:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %gate.fml
:: Utworzony: 07.03.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Przykładowe formuły warunków na bramach
::======================================================================================================================


\jest_do_wykonania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający, czy należy zawrócić w celu dalszego rejestrowania wykonań.
::       Zawracamy, gdy ilość wykonana na zleceniu produkcyjnym jest mniejsza niż planowana i zlecenie jest otwarte
::       albo jest to zlecenie warsztatowe otwarte
::       Warunek o treści exec('jest_do_wykonania','%gate',_a.ZL)
::       dodawany jest na bramach po czynności TTE_WYK_DGRP, zaraz przed czynnością TTE_WYK_DGRP.
::   WE: _a - ZL.ref()
::   WY: 1 - należy wrócić, jest jeszcze coś do zarejestrowania,
::       0 - nie wracamy, wszytko zarejestrowane
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

_result:=0;

ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
|| {? ZL.TYP().WP='P'
   || ZGP.cntx_psh();
      ZGP.clear();
      ZGP.f_clear();
      {? ZGP.find_tab(,'ZL',,'=',_zl,'STATUS',,'<>',exec('status_end','zl_guide'))
      || _result:=ZL.ILWYK_D<ZL.IL & ZL.STAN='O'
      ?};
      ZGP.cntx_pop()
   || _result:=ZL.STAN='O'
   ?}
?};
ZL.cntx_pop();
_result


\jest_do_wykonania_sciezka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Warunek na bramie określający, czy należy zawrócić w celu dalszego rejestrowania wykonań.
::       Zawracamy, gdy ilość wykonana na zleceniu jest mniejsza niż planowana oraz operacja do której
::       zarejestrowano nie jest ostatnią operacją w procesie technologicznym
::
::       Przydatna jeżeli mogą wystąpić braki
::
::       Warunek o treści exec('jest_do_wykonania_sciezka','%gate',_a.ZL,_a.ZGP)
::       dodawany jest na bramach po czynności TTE_WYK_DGRP, zaraz przed czynnością TTE_WYK_DGRP.
::   WE: _a - ZL.ref()
::       _b - ZGP.ref()
::   WY: 1 - należy wrócić, jest jeszcze coś do zarejestrowania,
::       0 - nie wracamy, wszytko zarejestrowane
::       ~~ - nie podano parametru złączeniowego _a lub _b
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
{? var_pres('_b')=type_of(null())
|| _zgp:=_b
|| return()
?};
_result:=0;
{? exec('jest_do_wykonania','%gate',_zl)>0
|| {? exec('is_last_op','zl_guide',_zgp)=0
   || _result:=1
   ?}
?};
_result


\jest_do_raportowania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający, czy należy zawrócić w celu generowania kolejnych dokumentów raportujących
::       produkcję. Zawracamy, gdy ilość zaraportowana na zleceniu jest mniejsza niż planowana
::       Warunek o treści exec('jest_do_raportowania','%gate',_a.ZL)
::       dodawany jest na bramach po czynności TTE_WYK_DGRP, zaraz przed czynnością TTE_WYK_DGRP.
::   WE: _a - ZL.ref()
::   WY: 1 - należy wrócić, jest jeszcze coś do zarejestrowania,
::       0 - nie wracamy, wszytko zarejestrowane
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

_result:=0;

ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
|| _result:=ZL.ILDOK<ZL.IL
?};
ZL.cntx_pop();

_result


\czy_generowac_rp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający, czy warto w ogóle uruchamiać czynność TTE_WYK_DGRP
::       - są zapisy ZLGD, do których nie ma wygenerowanych dokumentów magazynowych.
::       Warunek o treści exec('czy_generowac_rp','%gate',_a.ZL)
::       dodawany jest na bramach po czynności TTE_WYK_DWZL, zaraz przed czynnością TTE_WYK_DGRP.
::   WE: _a - ZL.ref()
::   WY: 1 - jest co generować,
::       0 - nie ma nic do generowania (albo błąd)
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _zl:=_a || return() ?};

_can_continue:=1;
_result:=0;
{? exec('FindAndGet','#table',ZL,_zl,,"TYP().WP<>'W'",0)
|| ZLGD.cntx_psh();
   _names:=ZLGD.names();
   {? _names.first()
   || {!
      |? ZLGD.use(_names.NAME);
         ZLGD.index('ZLECENIE');
         ZLGD.prefix(_zl);
         {? ZLGD.first()
         || {!
            |? _typ_tab:=exec('ilegen','magdok_prod').typ_tab;
               {? _typ_tab.first()
               || _result:=1;
                  _can_continue:=0
               ?};
               obj_del(_typ_tab);
               _can_continue=1 & ZLGD.next()
            !}
         ?};
         _can_continue=1 & _names.next()
      !}
   ?};
   ZLGD.cntx_pop()
?};
_result


\czy_sa_limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.00]
:: OPIS: Warunek na bramie sprawdzający czy warto uruchamiać realizację zamówień wewnętrznych do limitów
::       Przykładowe wywołanie:
::          exec('czy_sa_limity','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 1 - dla zlecenia wygenerowano limity
::       0 - zlecenie nie posiada limitów surowcowych
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _zl:=_a || return() ?};
exec('czy_sa_limity','zl_limit',_zl)


\czy_sa_odpady
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie sprawdzający czy warto uruchamiać rozliczenie odpadów dla zlecenia
::       albo zlecenia z nagłówka dokumentu raportującego.
::       Przykładowe wywołanie:
::          exec('czy_sa_odpady','%gate',_a.ZL)
::          exec('czy_sa_odpady','%gate',_a.ND)
::   WE: _a - ZL.ref(), ND.ref()
::   WY: 1 - dla zlecenia wygenerowano listę odpadów
::       0 - zlecenie nie posiada listy odpadów
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null()) || return() ?};
{? ref_tab(_a)=ZL
|| exec('czy_sa_odpady','zl_nlimit',_a)
|? ref_tab(_a)=ND
|| exec('czy_sa_odpady','zl_nlimit',exec('FindAndGet','#table',ND,_a,,"ZL",null()))
|| 0
?}


\czy_sa_nielimity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Warunek na bramie sprawdzający czy warto uruchamiać rozliczenie surowców nielimitowanych dla zlecenia
::       albo zlecenia z nagłówka dokumentu raportującego.
::       Przykładowe wywołanie:
::          exec('czy_sa_nielimity','%gate',_a.ZL)
::          exec('czy_sa_nielimity','%gate',_a.ND)
::   WE: _a - ZL.ref(), ND.ref()
::       [_b] - NUMBER - Czy uwzględniać tylko surowce nieoznaczone jako "rozliczane z operacją":
::            1 - tak, [0] - nie (uwzględniać wszystkie surowce nielimitowane)
::   WY: 1 - dla zlecenia wygenerowano surowce nielimitowane
::       0 - zlecenie nie posiada surowców nielimitowanych
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null()) || return() ?};
_typ:={? var_press('_b')=type_of(0) || _b || 0 ?};
{? ref_tab(_a)=ZL
|| exec('czy_sa_nielimity','zl_nlimit',_a,_typ)
|? ref_tab(_a)=ND
|| exec('czy_sa_nielimity','zl_nlimit',exec('FindAndGet','#table',ND,_a,,"ZL",null()),_typ)
|| 0
?}


\czy_sa_nielimity_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Warunek na bramie sprawdzający czy warto uruchamiać rozliczenie surowców nielimitowanych dla pozycji przewodnika
::       Przykładowe wywołanie:
::          exec('czy_sa_nielimity_zgp','%gate',_a.ZGP)
::   WE: _a - ZGP.ref()
::       [_b] - NUMBER - Czy uwzględniać tylko surowce oznaczone jako "rozliczane z operacją":
::            1 - tak, [0] - nie (uwzględniać wszystkie surowce nielimitowane)
::   WY: 1 - dla pozycji przewodnika wygenerowano surowce nielimitowane
::       0 - pozycja przewodnika nie posiada surowców nielimitowanych
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _zgp:=_a || return() ?};
_typ:={? var_press('_b')=type_of(0) || _b || 0 ?};
exec('czy_sa_nielimity_zgp','zl_nlimit',_zgp,_typ)


\czy_jeszcze_realizowac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.00]
:: OPIS: Warunek na bramie sprawdzający czy powrócić do realizacji zamówień wewnętrznych powiązanych ze zleceniem.
::       Przykładowe wywołanie:
::          exec('czy_jeszcze_realizowac','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 1 - dla zlecenia są jeszcze niezrealizowane zamówienia wewnętrzne
::       0 - w przeciwnym przypadku
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())  | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

_result:=0;
ZL.cntx_psh();
ZK_N.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
||
   exec('openz_psh','open_tab');
   exec('openz','open_tab',ZL.ODDZ+'__');
   {? ZL.RODZAJ='P'
   || ZL.index('UNRZL');
      ZL.prefix(ZL.UNRZL)
   || ZL.index('NRNZL');
      ZL.prefix(ZL.UNRZL)
   ?};

:: 1. pętla uaktualnia stany realizacji analizowanych zamówień
   _matakt:=tab_tmp(2
      ,'REF','STRING[16]',''
      ,'NRK','INTEGER',''
      ,'ILR','REAL',''
      ,'ZKP','STRING[16]',''
      ,'ZKN','STRING[16]',''
   );
   ZL.cntx_psh();
   {? ZL.first()
   || {!
      |? ZK_N.index('ZLALW');
         ZK_N.prefix(ZL.ref(),'A','T');
         {? ZK_N.first()
         || {!
            |? ZK_P.index('NAG');
               ZK_P.prefix(ZK_N.ref());
               {? ZK_P.first()
               || {!
                  |? exec('admatzkp','rezerwacje',$ZK_P.M,0,ZK_P.ILP,$ZK_N.ref(),$ZK_P.ref(),_matakt,1);
                     ZK_P.next()
                  !}
               ?};
               ZK_N.next()
            !}
         ?};
         ZL.next()
      !}
   ?};
   exec('akt_rezy','rezerwacje',_matakt);
   ZL.cntx_pop();

:: 2. pętla sprawdza stan realizacji zamówień
   {? ZL.first()
   || {!
      |? ZK_N.index('ZLALW');
         ZK_N.prefix(ZL.ref(),'A','T');
         {? ZK_N.first()
         || {!
            |? {? ZK_N.STAN<>'ZRE'
               || _result:=1
               ?};
               ~_result & ZK_N.next()
            !}
         ?};
         ~_result & ZL.next()
      !}
   ?};

   exec('openz_pop','open_tab')
?};
ZK_N.cntx_pop();
ZL.cntx_pop();
_result


\czy_rej_wyk_zl_uruchomiona
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Żeby nie powielać uruchomień czynności TTE_WYK_DWZL w danym procesie, funkcja sprawdza
::       czy dla danego zlecenia w danym procesie jest już uruchomiona instancja czynności TTE_WYK_DWZL.
::       Żeby nie powielać uruchomień czynności TTE_WYK_DWZL w ogóle, funkcja sprawdza
::       czy dla danego zlecenia w jakimkolwiek procesie jest już uruchomiona instancja czynności TTE_WYK_DWZL.
::       Formuła do użycia na bramie rozdzielającej, przykładowe wywołania:
::          params_exec('czy_rej_wyk_zl_uruchomiona','%gate',_a.ZL)
::          params_exec('czy_rej_wyk_zl_uruchomiona','%gate',_a.ZL,1)
::
::   WE: _a - ZL.ref()
::       [_b] - czy wyszukiwać we wszystkich procesach (1), domyślnie nie [0]
::   WY: 0 - brak uruchomień TTE_WYK_DWZL
::       1 - są jakieś uruchomienia
::       ~~ - nie podano parametru złączeniowego _a
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
{? var_pres('_b')=type_of(0) || _all:=_b || _all:=0 ?};

exec('czy_tab_x_uruchomiona','%gate',_zl,'TTE_WYK_DWZL',_all)


\czy_ma_odpady
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy zlecenie ma limity odpadowe, jeśli zlecenie jest złożone i limity do podrzędnych, to sprawdza
::       czy zlecenia podrzędne mają odpady
::       Formuła do użycia na bramie rozdzielającej, przykładowe wywołanie:
::          params_exec('czy_ma_odpady','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - brak odpadów
::       1 - są odpady
::       ~~ - nie podano parametru złączeniowego _a
::  OLD: \has_odpady/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

_result:=0;
_can_continue:=1;

ZL.cntx_psh(); ZL.clear();

{? ZL.seek(_zl)
||
   {? exec('subzlec_exist','zl_link',ZL.ref())>0
   ||
::    Sprawdzam w podzleceniach
      ZL.cntx_psh();
      ZL.index('NRNZL');
      ZL.prefix(ZL.UNRZL);
      {? ZL.first()
      || {!
         |?
            {? exec('czy_ma_odpady','%gate',ZL.ref())>0
            ||
               _result:=1;
               _can_continue:=0
            ?};
            ZL.next() & _can_continue>0
         !}
      ?};
      ZL.cntx_pop();
      ~~
   ||
::    Iteruje po limitach zlecenia
      exec('openmask','zl_common',ZL.ref());
      ZLIM.index('ZKN');
      ZLIM.prefix(ZL.ref(),'T');
      {? ZLIM.first()
      || {!
         |? {? ZLIM.SO='O'
            || _result:=1;
               _can_continue:=0
            ?};
            ZLIM.next() & _can_continue>0
         !}
      ?}
   ?}
?};
ZL.cntx_pop();
_result


\czy_podzlecenia_gotowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy zlecenie ma już wygenerowaną całą strukturę podzleceń (całe drzewo do najniższego poziomu)
::       Liczy ile podzleceń ma zlecenie nadrzędne i ile instancji przepływów dotarło na tej gałęzi
::       która generuje podzlecenia. Jeżeli się zgadza to proces można puścić dalej
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_podzlecenia_gotowe','%gate',params_get().in.p01,'nazwa')
::   WE: _a - ZL.ref()
::       _b - STRING - nazwa połączenia ścieżki którymi przychodzą wygenerowane podzlecenia
::   WY: 0 - nie wszystkie podzlecenia już wygenerowane
::       1 - wszystkie podzlecenia wygenerowane
::       ~~ - nie podano parametru złączeniowego _a lub nie podano parametru tekstowego _b
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
{? var_pres('_b')=type_of('') || _conn_name:=_b || return() ?};

_mp:=params_get().mp;

_result:=0;

ZL.cntx_psh();
ZL.clear();
{? ZL.seek(_zl)
|| _top_level:=exec('top_level','zl_link',ZL.ref());

   _ile_podzlec:=exec('subzlec_count','zl_link',_top_level);

   _tab:=_mp.gate_state();

   _can_continue:=1;
   {? _ile_podzlec>0
   || {? _tab.first()
      || _bufconn:=exec('buffer','#b_conn');
         {!
         |? _b_conn:=exec('FindAndGet','#table',B_CONN,_tab.B_CONN,,,null());
            _bufconn.cntx_get(_b_conn);
            {? _bufconn.NAME=_conn_name
            || _can_continue:=0;
               {? _tab.COUNT>=_ile_podzlec+1
               || _result:=1
               ?}
            ?};
            _tab.next() & _can_continue>0
         !}
      ?}
   ?}
?};
ZL.cntx_pop();
_result


\nie_wszystko_zlecone
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający, czy wszystkie pozycje zamówienia są zlecone do produkcji
::       albo nie wymagają zlecenia (zamówienia nie dotyczą produkcji, materiały nie są produktami)
::       Warunek o treści exec('nie_wszystko_zlecone','%gate',_a.ZK_N)
::       dodawany jest na bramach po czynności TTE_PZL_DZWE, przed czynnością TTE_PZL_DZWE (powrót do generowania).
::   WE: _a - ZK_N.ref()
::   WY: 1 - jest co generować (nie wszytko zlecone),
::       0 - nie ma nic do generowania (wszystko zlecone)
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _zk_n:=_a || return() ?};

_result:=0;

ZK_N.cntx_psh(); ZK_P.cntx_psh(); ZLZAM.cntx_psh(); TYPYZAM.cntx_psh();

ZK_N.use(ref_name(_zk_n)); ZK_P.use((ZK_P.name(1)-3)+(ref_name(_zk_n)+3));
ZK_N.prefix();
{? ZK_N.seek(_zk_n) & ZK_N.A='A'
|| {? ZK_N.T().R='Z'
   || _typyzam:=exec('get','#params',500213)
   |? ZK_N.T().R='W'
   || _typyzam:=exec('get','#params',500215)
   || _typyzam:=''
   ?};
   {? _typyzam*(ZK_N.T().T+' ')>0
   || ZK_P.index('NAG');
      ZK_P.prefix(_zk_n);
      {? ZK_P.first()
      || {!
         |? {? ZK_P.M().R='W' | M.R='P'
            || _ilz:=ZK_P.ILP-ZK_P.ILRB;
               ZLZAM.index('ZMZL');
               ZLZAM.prefix($ZK_P.ref());
               {? ZLZAM.first()
               || {!
                  |? _ilz-=ZLZAM.ILZL;
                     ZLZAM.next()
                  !}
               ?};
               {? _ilz>0 || _result:=1 ?}
            ?};
            _result=0 & ZK_P.next()
         !}
      ?}
   ?}
?};

ZK_N.cntx_pop(); ZK_P.cntx_pop(); ZLZAM.cntx_pop(); TYPYZAM.cntx_pop();

_result


\czy_sa_polfabrykaty_zlecenia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający czy zlecenie ma surowce będące półfabrykatami, czyli można dla niego powołać
::       kolejny poziom struktury (odpowiada funkcjonalnie parametrowi wyjściowemu POLFABRYKATY czynności TTE_PZL_DTEC).
::       Warunek o treści: exec('czy_sa_polfabrykaty_zlecenia','%gate',_a.ZL)
::       dodawany jest na bramach po czynności TTE_PZL_DZLE, zaraz przed czynnością TTE_PZL_DZLG.
::   WE: _a - ZL.ref()
::   WY: 1 - są półfabtykaty,
::       0 - nie ma półfabrykatów
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

_result:=0;

ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
|| _tktl:=exec('FindAndGet','#table',TKTL,{? ZL.RTKTL<>'' || ZL.RTKTL || ZL.RKTL ?},,"ref()",null());
   {? _tktl
   || _result:=exec('czy_pf','tech_mater',_tktl)
   ?}
?};
ZL.cntx_pop();
_result


\czy_sa_operacje_zlecenia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający czy zlecenie ma technologię zawierającą operacje
::       (odpowiada funkcjonalnie parametrowi wyjściowemu OPERACJE czynności TTE_PZL_DTEC).
::       Warunek o treści: exec('czy_sa_operacje_zlecenia','%gate',_a.ZL)
::       dodawany jest na bramach po czynności TTE_PZL_DZLE, zaraz przed czynnością TTE_PZL_DPZG.
::   WE: _a - ZL.ref()
::   WY: 1 - są operacje,
::       0 - nie ma operacji
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

_result:=0;

ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
|| _tktl:=exec('FindAndGet','#table',TKTL,{? ZL.RTKTL<>'' || ZL.RTKTL || ZL.RKTL ?},,"ref()",null());
   {? _tktl
   || _result:=exec('FindAndGet','#table',TKTL,_tktl,,"TYP().OPER='T'",0)
   ?}
?};
ZL.cntx_pop();
_result


\czy_przepisy_zintegrowane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający, czy w systemie dostępny jest mechanizm zintegrowanych przepisów planistycznych
::       dla zleceń złożonych (parametr 500368 ma wartość 'T')
::       Wywołanie: exec('czy_przepisy_zintegrowane','%gate')
::   WY: 1 - przepisy zintegrowane dla zlecenia złożonego, 0 - osobne przepisy dla każdego podzlecenia
::----------------------------------------------------------------------------------------------------------------------
exec('get','#params',500368,type_of(''))='T'


\synchronizacja_wykonan_ze_zlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający, czy jest ustawiona synchronizacja wykonań ze zleceń na plan operacyjny
::       (parametr 500621 ma wartość 'Z')
::       Wywołanie: exec('synchronizacja_wykonan_ze_zlec','%gate')
::   WY: 1 - przepisy zintegrowane dla zlecenia złożonego, 0 - osobne przepisy dla każdego podzlecenia
::----------------------------------------------------------------------------------------------------------------------
exec('get','#params',500621,type_of(''))='Z'


\synchronizacja_wykonan_z_planu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Warunek na bramie określający, czy jest ustawiona synchronizacja wykonań ze zleceń na plan operacyjny
::       (parametr 500621 ma wartość 'Z')
::       Wywołanie: exec('synchronizacja_wykonan_z_planu','%gate')
::   WY: 1 - przepisy zintegrowane dla zlecenia złożonego, 0 - osobne przepisy dla każdego podzlecenia
::----------------------------------------------------------------------------------------------------------------------
exec('get','#params',500621,type_of(''))='P'


\czy_efaktura_kontrah
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: Warunek na bramie określający, czy kontrahent faktury ma zaznaczoną zgodę na otrzymywanie e-faktur
::       UWAGA: ze względu na dialog używane w czynności ręcznej przed bramą
::   WE: _a - FAKS.ref()
::       [_b] - pytanie lub pusty string
::   WY: 1 - jest zgoda: e-mail,
::       2 - jest zgoda: Businesslink,
::       0 - nie ma zgody
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _faks:=_a
|| return()
?};
_ask:={? var_pres('_b')=type_of('') || _b || '' ?};

_paragon:=exec('FindAndGet','#table',FAKS,_faks,,"T().PAR",'N');
{? _paragon='T'
|| return(0)
?};

_kh:=exec('FindAndGet','#table',FAKS,_faks,,"KH",null());
{? _kh<>null()
|| exec('kh_dod_ini','kontrahent',_kh);
   _wyn:=
      {? KH_DOD.EFAKTURA='T'
      || FAKS.cntx_psh();
         FAKS.use(ref_name(_faks));
         FAKS.prefix();
         FAKS.seek(_faks);
         _seek:=(exec('bl_dokum_seek','zbl',FAKS) | exec('dokum_seek','zbl',FAKS));
         FAKS.cntx_pop();
         {? _seek
         || 1
         || 0
         ?}
      |? KH_DOD.EFAKTURA='B'
      || 2
      || 0
      ?}
?};

{? ~_wyn & _ask<>'' || _wyn:=FUN.ask('Czy wysłać fakturę %1 do kontrahenta?'@[exec('record','#to_string',_a)]) ?};
_wyn


\czy_zlecenie_zaakceptowane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza czy zlecenie jest zaakceptowane (otwarte)
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_zaakceptowane','%gate',params_get().in.p01)
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_zaakceptowane','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - zlecenie nie zaakceptowane
::       1 - zlecenie zaakceptowane
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
exec('FindAndGet','#table',ZL,_zl,,"STAN",'')='O'


\czy_zlecenie_zamkniete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza czy zlecenie jest zamknięte
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_zamkniete','%gate',params_get().in.p01)
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_zamkniete','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - zlecenie nie zamknięte
::       1 - zlecenie zamknięte
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
exec('FindAndGet','#table',ZL,_zl,,"STAN",'')='Z'


\typZam2Plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Warunek na bramie określający, czy podany typ zamówienia wymaga powołania zlecenia
::       parametry aplikacyjne 500213, 500215
::       Wywołanie: exec('typZam2Plan','%gate',_a.ZK_N)
::   WE: _a - uid ref ZK_N
::   WY: 1 - tak podlega powałania zlecenia,
::       0 - nie podlega
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zk_n:=_a
|| return()
?};
_typz:=exec('FindAndGet','#table',ZK_N,_zk_n,,"T().T",'');
_rodz:=exec('FindAndGet','#table',ZK_N,_zk_n,,"T().R",'');
_ltyp:={? _rodz='Z' || exec('get','#params',500213,type_of(''))
       |? _rodz='W' || exec('get','#params',500215,type_of(''))
       || '?'
       ?};
_res:=_ltyp='' | (' '+_ltyp+' ')*(' '+_typz+' ');
_res


\allrealORerror
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Warunek na bramie określający, czy wszystkie zadania potransferowe zostały wykonane lub wystąpił błąd
::   WY: 1 - wykonane lub błąd lub firmy nie ma w clustrze, 0 - do wykonania
::----------------------------------------------------------------------------------------------------------------------
_noreal:=exec('FindInSet','#table','UPG_REAL','STAN',0,'T',,,'N')=null();
_error:=exec('FindInSet','#table','UPG_REAL','ERROR',1,'T',,,'N')<>null();
:: jeśli są zadania do wykonania to kontrola czy dotyczą firmy i czy aby ta firma jest w clustrze
{? ~_noreal & ~_error
|| _firma:=exec('FindInSet','#table','UPG_REAL','STAN',0,'T',"@.UPG_REAL.FIRMA().SYMBOL",,'N');
   {? _firma<>''
   || _clust:=AppList.all.tab;
      _grpid:=app_info('cluster_group');
      _clndx:=AppList.all.ndx_par1_grp;
      _clust.index(_clndx);
      _clust.prefix(_firma,);
::      _clust.prefix(_firma,_grpid,);
      _error:=~_clust.first();
      obj_del(_clust)
   ?}
?};
_res:=_error | _noreal;
_res


\czy_zl_x_uruchomiona
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Żeby nie powielać uruchomień czynności 'x' w danym procesie, funkcja sprawdza
::       czy dla danego zlecenia w danym procesie jest już uruchomiona instancja czynności 'x'.
::       Żeby nie powielać uruchomień czynności 'x' w ogóle, funkcja sprawdza
::       czy dla danego zlecenia w jakimkolwiek procesie jest już uruchomiona instancja czynności 'x'.
::       Formuła do użycia na bramie rozdzielającej, przykładowe wywołania:
::          params_exec('czy_zl_x_uruchomiona','%gate',_a.ZL,'TTE_PZL_DZLE')
::          params_exec('czy_zl_x_uruchomiona','%gate',_a.ZL,'TTE_PZL_DZLE',1)
::
::   WE: _a - ZL.ref()
::       _b - UID czynności ('x')
::       [_c] - czy wyszukiwać we wszystkich procesach (1), domyślnie nie [0]
::   WY: 0 - brak uruchomień czynności 'x'
::       1 - są jakieś uruchomienia
::       ~~ - nie podano parametru złączeniowego _a lub nie podano parametru tekstowego _b
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

{? var_pres('_b')=type_of('')
|| _uid:=_b
|| return()
?};

{? var_pres('_c')=type_of(0) || _all:=_c || _all:=0 ?};

_result:=exec('czy_tab_x_uruchomiona','%gate',_zl,_uid,_all);

_result


\run_after_signal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Wzbudza bramę złożoną, jeżeli przyszedł przepływ bezpośrednio od zdarzenia sygnałowego
::   WE: _a - symbol sygnału
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_par:=obj_new('signal_name'); _par.signal_name:=_a;
_mp:=params_get().mp;
_tab:=_mp.gate_state();
{? _tab.first()
|| {!
   |? _result:=_tab.COUNT &
         exec('FindAndGet','#table',B_PREL,_tab.FROM,,"B_SIGNAL<>null() & B_PREL.B_SIGNAL().SYMBOL=_b.signal_name",0,_par);
      ~_result & _tab.next()
   !}
?};
_result


\czy_zlecenie_partiowane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Warunek na bramie określający, czy zlecenie może być partiowane
::   WE: _a - ZL.ref() / ~~
::   WY: 0 - niepartiowane
::       1 - partiowane
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
_result:=exec('zlec_party','zl_common',_zl);
_result


\czy_zlecenie_raportowane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Warunek na bramie określający, czy zlecenie może być raportowane na magazyn
::       Sprawdza dodatkowo, czy nie ma instancji czynności TTE_WYK_DGRP powiązanej
::       z tym zleceniem, po do żeby nie dublować odpaleń procesów
::   WE: _a - ZL.ref() / ~~
::   WY: 0 - nieraportowane
::       1 - raportowane
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
_ref:=null();
{? var_pres('_a')=type_of(ZL.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

ZL.cntx_psh();
{? _ref<>null()
|| ZL.prefix();
   {? ZL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| {? ZL.RP='T'
   || _result:=1
   ?};
   {? _result>0
   || {? exec('record_keyrefed','#b__box',ZL.uidref(),'TTE_WYK_DGRP')
      || _result:=0
      ?}
   ?}
?};
ZL.cntx_pop();
_result


\NotOnlyU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.02]
:: OPIS: Warunek na bramie określający, czy faktura posiada chociaż jedną pozycję towarową
::   WE: _a - FAKS.ref()
::   WY: 1-są indeksy materiałowe 0-nie ma
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
FAP.index('FAP');
FAP.prefix(_a);
{? FAP.first()
|| {!
   |? _res:=FAP.M().RODZ='T';
      ~_res & FAP.next()
   !}
?};
_res


\faktura_do_edi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Warunek na bramie określający, czy faktura (korekta) może być wysłana EDI
::       Warunek o treści exec('faktura_do_edi','%gate',_a.FAKTURA)
::          do umieszczenia na bramie przed czynnością ZWS_EDI_UNIW
::   WE: _a - FAKS.ref()
::   WY: 1 - faktura może być wysłana EDI;
::       0 - faktura nie może być wysłana EDI
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _faks:=_a || return() ?};

_result:=0;

_paragon:=exec('FindAndGet','#table',FAKS,_faks,,"T().PAR",'N');
{? _paragon='N'
|| _result:=1
?};

_result


\dek_dok_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AK [18.22]
:: OPIS: Warunek na bramie określający, czy dokument magazynowy może być wysłany do dekretacji
::       Warunek o treści exec('dek_dok_mag','%gate',_a.ND)
::          do umieszczenia na bramie przed sygnałem do dekretacji dokumentu magazynowego
::   WE: _a - ND.ref()
::   WY: 1 - do dekretacji
::       0 - nie dekretować
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _nd:=_a || return(0) ?};

_result:=_nd<>null() & exec('FindAndGet','#table',ND,_nd,,"MAG().KSG='T'",0);

_result


\zk_n_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AK [18.22]
:: OPIS: Ustala treść na ToDo dla czynności ręcznej, której parametr jest typu _ZK_N (zamówienie)
::       Przykładowe użycie w formule głównej:
::        FUN.ask('Czy wysłać zamówienie : '+params_exec('zk_n_todo','%gate','p01')+' na urządzenie mobilne?')
::       Przykładowe użycie na ToDo:
::        'Zrealizuj zamówienie : '+params_exec('zk_n_todo','%gate','p01')
::   WE: _a - symbol parametru, np. 'p01'
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_par:=_a;

_desc:='';
_in:=_mp.load(exec('kind_in','#b_port'));

:: jest parametr wejściowy to ustawiam odpowiedniego ZK_N
{? var_pres(_par,_in)
|| _desc:=exec('record','#to_string',($('_a.'+_par))(_in))
?};
_desc


\procesy_problem_moje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Sprawdza czy są jakieś procesy z problemami
::   WE: _a - $USERS.ref lub USERS.ref
::   WY: REAL - liczba moich procesów z problemami
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ref:=_a;
_users:=null();
{? type_of(_ref)=type_of('')
|| _users:=exec('FindAndGet','#table',USERS,_ref,,,null())
|? type_of(_ref)=type_of(USERS.ref())
|| _users:=_ref
?};
{? _users<>null()
|| _result:=exec('count_problemed','#bi_proc',1,_users)
?};
_result


\czy_nd_uruchomiona
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Żeby nie powielać uruchomień czynności 'x' w danym procesie, funkcja sprawdza
::       czy dla danego dokumentu magazynowego w danym procesie jest już uruchomiona instancja czynności 'x'.
::       Żeby nie powielać uruchomień czynności 'x' w ogóle, funkcja sprawdza
::       czy dla danego dokumentu magazynowego w jakimkolwiek procesie jest już uruchomiona instancja czynności 'x'.
::       Formuła do użycia na bramie rozdzielającej, przykładowe wywołania:
::          params_exec('czy_nd_x_uruchomiona','%gate',_a.ND,'LMG_MAG_DWYD')
::          params_exec('czy_nd_x_uruchomiona','%gate',_a.ND,'LMG_MAG_DWYD',1)
::
::   WE: _a - ND.ref()
::       _b - UID czynności ('x')
::       [_c] - czy wyszukiwać we wszystkich procesach (1), domyślnie nie [0]
::   WY: 0 - brak uruchomień czynności 'x'
::       1 - są jakieś uruchomienia
::       ~~ - nie podano parametru złączeniowego _a lub nie podano parametru tekstowego _b
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _nd:=_a
|| return()
?};

{? var_pres('_b')=type_of('')
|| _uid:=_b
|| return()
?};

{? var_pres('_c')=type_of(0) || _all:=_c || _all:=0 ?};

_result:=exec('czy_tab_x_uruchomiona','%gate',_nd,_uid,_all);

_result


\czy_sa_harmonogramy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Sprawdza czy w danym oddziale i danym roku są harmonogramy do redakcji
::   WE: _a - STRING - rok i oddział separowane ';'
::   WY: 0 - brak harmonogramów do redakcji
::       1 - są harmonogramy do redakcji
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_param:=_a;
_split:=spli_str(_param,';');

_result:=0;
{? obj_len(_split)>1
|| _rok:=_split[1];
   _rok:=#_rok;
   _oddz:=_split[2];

   HN.cntx_psh();
   HN.index('ODNR');
   HN.prefix(_oddz);
   {? HN.first()
   || {!
      |?
         {? HN.AKT='T' & exec('is_ended','umowy_harm',,_rok)=0
         || _result:=1
         ?};
         HN.next() & _result=0
      !}
   ?};
   HN.cntx_pop();
   ~~
?};
_result


\czy_zlecenie_nowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Sprawdza czy zlecenie jest nowe (w przygotowaniu)
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_nowe','%gate',params_get().in.p01)
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_nowe','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - zlecenie nie jest w przygotowaniu
::       1 - zlecenie jest w przygotowaniu
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
exec('FindAndGet','#table',ZL,_zl,,"STAN",'')='N'


\czy_zlecenie_proste
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Sprawdza czy zlecenie jest proste
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_nowe','%gate',params_get().in.p01)
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_nowe','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - zlecenie nie jest proste
::       1 - zlecenie jest proste
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
exec('FindAndGet','#table',ZL,_zl,,"RODZAJ",'')='P'


\czy_zlecenie_zlozone
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Sprawdza czy zlecenie jest złożone
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_zlozone','%gate',params_get().in.p01)
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_zlozone','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - zlecenie nie jest złożone
::       1 - zlecenie jest złożone
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
exec('FindAndGet','#table',ZL,_zl,,"RODZAJ",'')='Z'


\czy_zlecenie_niezalezne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Sprawdza czy zlecenie jest niezależne
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_niezalezne','%gate',params_get().in.p01)
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_niezalezne','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - zlecenie nie jest neizależne
::       1 - zlecenie jest niezależne
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
exec('FindAndGet','#table',ZL,_zl,,"RODZAJ",'')='N'


\czy_zlecenie_warsztatowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Sprawdza czy zlecenie jest warsztatowe
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_warsztatowe','%gate',params_get().in.p01)
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_warsztatowe','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 0 - zlecenie nie jest warsztatowe
::       1 - zlecenie jest warsztatowe
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
exec('FindAndGet','#table',ZL,_zl,,"TYP().WP",'')='W'


\czy_tab_x_uruchomiona
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Żeby nie powielać uruchomień czynności 'x' w danym procesie, funkcja sprawdza
::       czy dla danego rekordu tabeli w danym procesie jest już uruchomiona instancja czynności 'x'.
::       Żeby nie powielać uruchomień czynności 'x' w ogóle, funkcja sprawdza
::       czy dla danego rekordu tabeli w jakimkolwiek procesie jest już uruchomiona instancja czynności 'x'.
::       Formuła do użycia na bramie rozdzielającej, przykładowe wywołania:
::          params_exec('czy_tab_x_uruchomiona','%gate',_a.ZL,'TTE_PZL_DZLE')
::          params_exec('czy_tab_x_uruchomiona','%gate',_a.ZL,'TTE_PZL_DZLE',1)
::          params_exec('czy_tab_x_uruchomiona','%gate',_a.ND,'LMG_MAG_DWYD')
::          params_exec('czy_tab_x_uruchomiona','%gate',_a.ND,'LMG_MAG_DWYD',1)
::
::   WE: _a - tab.ref() albo $tab.ref()
::       _b - UID czynności ('x') - można podać kolejne identyfikatory rozdzielone przecinkami
::       [_c] - czy wyszukiwać we wszystkich procesach (1), domyślnie nie [0]
::   WY: 0 - brak uruchomień czynności 'x'
::       1 - są jakieś uruchomienia
::       ~~ - nie podano parametru złączeniowego _a lub nie podano parametru tekstowego _b
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _ref:=_a;
   _tab:=ref_tab(_ref)
|| return()
?};

{? var_pres('_b')=type_of('')
|| _uids:=_b;
   _uids:=spli_str(_uids,',')
|| return()
?};

{? var_pres('_c')=type_of(0) || _all:=_c || _all:=0 ?};
{? _all || _bi_proc:=null() || _mp:=params_get().mp; _bi_proc:=_mp.bi_proc ?};

_result:=0;

_it:=0;
{!
|? _it+=1;
   _result:=
      (exec('record_keyrefed','#b__box',exec('FindAndGet','#table',_tab,_ref,,"uidref()",''),_uids[_it],_bi_proc)>0);
   _result=0 & _it<obj_len(_uids)
!};

_result


\czy_kpo_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Sprawdza czy karta przekazania odpadów ma dany status
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_kpo_status','%gate',params_get().in.p01,'WITHDRAWN;REJECTED')
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_kpo_status','%gate',_a.KPO,'WITHDRAWN;REJECTED')
::   WE: _a - KPO.ref()
::       _b - badane statusy (oddzielone średnikami)
::   WY: 1 - karta ma podany status
::       0 - karta nie ma podanego statusu
::       ~~ - nie podano parametru złączeniowego _a i tekstowego _b
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _kpo:=_a
|| return()
?};
{? var_pres('_b')=type_of('')
|| _stats:=spli_str(_b,';')
|| return()
?};
_result:=0;
{! _it:=1 .. obj_len(_stats)
|! {? exec('FindAndGet','#table',KPO,_kpo,,"KPO.KPO_STAT().KOD",'')=_stats[_it] || _result:=1 ?}
!};
_result


\czy_rem_zgl_px
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Sprawdza czy zgłoszenie remontowe zostało zaplanowane w planie strategicznym
::   WE: _a - ZL.ref() / ~~
::   WY: 0 - nie ma w planie
::       1 - jest w planie
::       ~~ - nie podano parametru złączeniowego _a
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_rem_zgl:=null();
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _rem_zgl:=_a
|| return()
?};
_result:=0;
REM_ZGL.cntx_psh();
REM_ZGL.prefix();
{? REM_ZGL.seek(_rem_zgl)
|| {? REM_ZGL.PLAN_PX='T'
   || _result:=1
   ?}
?};
REM_ZGL.cntx_pop();
_result


\czy_rem_zgl_prz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Sprawdza czy zgłoszenie remontowe podlega czynności rejestracji przebiegu
::   WE: _a - REM_ZGL.ref() / ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_rem_zgl:=null();
{? var_pres('_a')=type_of(null())
|| _rem_zgl:=_a
?};
_result:=0;
{? _rem_zgl<>null()
|| REM_ZGL.cntx_psh();
   REM_ZGL.prefix();
   {? REM_ZGL.seek(_rem_zgl)
   || {? REM_ZGL.REM_ZAS<>null()
      || REM_ZAS.cntx_psh();
         REM_ZGL.REM_ZAS();
         {? REM_ZAS.PRZ_MODE<>'N'
         || _result:=1
         ?};
         REM_ZAS.cntx_pop()
      ?}
   ?};
   REM_ZGL.cntx_pop()
?};
_result


\czy_dyspMAG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Sprawdza czy dyspozycja transportu podlega możliwości wystawienia dyspozycji magazynowej
::   WE: _a - TR_NZL.ref()
::   WY: 1 - tak
::       0 - nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_tr_nzl:={? var_pres('_a')=type_of(null()) || _a || null() ?};
{? _tr_nzl<>null() & exec('FindAndGet','#table',TR_NZL,_tr_nzl,,"(';ZK_N;ZD_NAG;ZDP_NAG;'*WHERE)>1",0)
|| _res:=FUN.ask('Czy utworzyć dyspozycje w magazynach\n'
                 'dla dyspozycji transportowej %1?'@[exec('record','#to_string',_tr_nzl)])
?};
_res


\czy_generowac_limit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Warunek na bramie określający, czy po modyfikacji/dolaczeniu TMAT do zlecenia
::       można generować na jego podstawie limit
::   WE: _a - ZL.ref() / ~~
::   WY: 0 - nieraportowane
::       1 - raportowane
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _tmat:=_a
|| return()
?};
_ref:=null();
{? var_pres('_a')=type_of(TMAT.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

TMAT.cntx_psh();
{? _ref<>null()
|| TMAT.prefix();
   {? TMAT.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| {? TMAT.DFLT_KTL='N' & TMAT.KTL=null()
   || _result:=1
   || {? TMAT.MAG<>'N'
      || _result:=1
      ?}
   ?}
?};
TMAT.cntx_pop();
_result


\czy_generowac_podzlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Warunek na bramie określający, czy po modyfikacji/dolaczeniu TMAT do zlecenia
::       można generować na jego podstawie podzlecenie
::   WE: _a - ZL.ref() / ~~
::   WY: 0 - nieraportowane
::       1 - raportowane
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _tmat:=_a
|| return()
?};
_ref:=null();
{? var_pres('_a')=type_of(TMAT.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

TMAT.cntx_psh();
{? _ref<>null()
|| TMAT.prefix();
   {? TMAT.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| {? exec('tmat4zl','tech_mater',TMAT.ref())>0
   || _result:=1
   ?}
?};
TMAT.cntx_pop();
_result


\czy_zlecenie_tree_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Sprawdza czy zlecenie ma "typ elementu w drzewie"
::       Formuła do użycia na bramie zbierającej złożonej, przykładowe wywołanie:
::          params_exec('czy_zlecenie_tree_typ','%gate',params_get().in.p01,'M,F,P')
::       albo na bramie rozgałęziającej OR lub XOR, przykładowe wywołanie:
::          params_exec('czy_zlecenie_tree_typ','%gate',_a.ZL,'Z,N')
::   WE: _a - ZL.ref()
::       _b - lista typów elementu w drzewie zlecenia (P,Z,M,F,N)
::   WY: 0 - zlecenie nie jest żadnego z podanych typów
::       1 - zlecenie jest jednego z podanych typów
::       ~~ - nie podano parametru złączeniowego _a albo nie podano parametru tekstowego _b
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};
{? var_pres('_b')=type_of('')
|| _tree_typ:=_b
|| return()
?};
_tree_typ*exec('FindAndGet','#table',ZL,_zl,,"TREE_TYP",'')>0


\czy_rek_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Sprawdza czy reklamacja ma podany status zakończenia.
::       Przykładowe wywołanie: params_exec('czy_rek_status','%gate',params_get().in.p01,'T')
::   WE: _a - REK_N.ref()
::       _b - badany status zakończenia (N,T)
::   WY: 1 - reklamacja ma podany status
::       0 - reklamacja nie ma podanego statusu
::       ~~ - nie podano parametru złączeniowego _a i tekstowego _b
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _rek_n:=_a
|| return()
?};
{? var_pres('_b')=type_of('')
|| _status:=_b
|| return()
?};
_result:=0;
{? exec('FindAndGet','#table',REK_N,_rek_n,,"REK_N.RESULT",'')=_status || _result:=1 ?};

_result


\czy_generowac_przepis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Warunek na bramie określający, czy można generować przepis planistyczny do karty technologicznej
::   WE: _a - TKTL.ref() / ~~
::   WY: 0 - nie można
::       1 - można
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _tktl:=_a
|| return()
?};

_result:=0;

TKTL.cntx_psh();
TKTL.use(ref_name(_tktl));
TKTL.prefix();
{? TKTL.seek(_tktl)
|| _result:=exec('FindAndGet','#table',TPKTL,TKTL.TYP,,"TPKTL.CZAPLA='T'",0)
?};
TKTL.cntx_pop();
_result


\czy_sa_koop_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Warunek na bramie sprawdzający czy warto uruchamiać obsługę kooperacja magazynowych
::       Przykładowe wywołanie:
::          exec('czy_sa_koop_mag','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 1 - dla zlecenia występuje przynajmniej jedna operacja kooperacji magazynowej
::       0 - zlecenie nie posiada operacji kooperacji magazynowych
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _zl:=_a || return() ?};
_tab:=sql('select ZGP.REFERENCE as REF from ZGP where ZGP.ZL=:_a and ZGP.WEW=\'N\' and ZGP.SRW=\'M\'',_zl);
_tab.first()


\czy_sa_pozycje_przewodnika
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Warunek na bramie określający czy zlecenie ma przewodniki z pozycjami
::       Warunek o treści: exec('czy_sa_pozycje_przewodnika','%gate',_a.ZL)
::   WE: _a - ZL.ref()
::   WY: 1 - są pozycje przewodnika,
::       0 - zlecenie nie ma żadnej pozycji przewodnika
::       ~~ - nie podano parametru złączeniowego _a
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _zl:=_a
|| return()
?};

_result:=0;

ZGP.cntx_psh();
ZGP.index('S1');
_result:=ZGP.first();
ZGP.cntx_pop();

_result


\czy_dokument_kasowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Warunek na bramie określający czy rejestrować dokument kasowy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('get','#params',300241)='N' || return(0) ?};
exec('FindAndGet','#table',FAKS,_a,,"
   FAKSPL.cntx_psh();
   FAKSPL.use('fakpl%1'[FAKS.name()+3]);
   _result:=exec('war_got','faktury_plat')>0;
   FAKSPL.cntx_pop();
   _result
",0)


\czy_dokum_kontrah
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [RRxx]
:: OPIS: Warunek na bramie określający, czy kontrahent ma zaznaczoną zgodę na otrzymywanie e-faktur
::       UWAGA: ze względu na dialog używane w czynności ręcznej przed bramą
::   WE: _a - OFE.ref() / ZD_NAG.ref()
::       [_b] - pytanie lub pusty string
::   WY: 1 - jest zgoda: e-mail,
::       0 - nie ma zgody
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) | var_pres('_a')=type_of('')
|| _ref:=_a
|| return(0)
?};
_tab:=ref_tab(_ref);
{? _tab<>OFE & _tab<>ZD_NAG
||  return(0)
?};
_ask:={? var_pres('_b')=type_of('') || _b || '' ?};

_wyn:=0;
_kh:=exec('FindAndGet','#table',_tab,_ref,,"KH",null());
{? _kh<>null()
|| exec('kh_dod_ini','kontrahent',_kh);
   _wyn:={? KH_DOD.EFAKTURA='T' || 1 || 0 ?}
?};

{? ~_wyn & _ask<>'' || _wyn:=FUN.ask(_ask) ?};
_wyn

:Sign Version 2.0 jowisz:1045 2023/12/19 12:12:33 cf346ba46dc00dc6679e6704bbd781b59d044f0de1593e5401a98b42745cf55514bc0bfc63970864af4ce744475d2baeb73b5ec292822da944443c2bcaa0cf5fdad30f2c9d06be2f6137d145bc3961e19fa986e832cf283084bef5cd5792c867c5ba18c744bcc66306e98f2e72e66aa6ef495de2442999d0f91be7ffd1c54b34
