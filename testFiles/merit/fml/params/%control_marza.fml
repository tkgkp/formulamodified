:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %control_marza.fml
:: Utworzony: 18.07..2020
:: Autor: AMK
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły wewnętrzne do obsługi analiz marży IV
::======================================================================================================================


\gen_kl_pr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Tworzy symbol i opis elementu schematu Klient-Produkt
::       Symbol - symbol-klientaSEPARATORsymbol-produktu
::       Opis - opis-klientaSEPARATORopis-produktu
::   WE: _a - ref wymiaru Klient
::       _b - ref wymiaru produkt
::       _c - ile pobierać znaków z symbolu kontrahenta
::       _d - ile pobierać znaków z symbolu produktu (0 - dopełniać do końca)
::       _e - ile pobierać znaków z opisu kontrahenta
::       _f - ile pobierać znaków z opisu produktu (0 - dopełniać do końca)
::       _g - separator kontrahenta i produktu w symbolu
::       _h - separator kontrahenta i produktu w opisie
::       _i - symbol elementu nadrzędnego (pusty - element główny)
::   WY: tablica 3-elementowa _zwrot[1]-symbol, _zwrot[2]-opis, _zwrot[3]-symbol nadrzędnego (lub pusty)
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=obj_new(3); _zwrot[1]:=_zwrot[2]:=_zwrot[3]:='';
{? _=9 & type_of(_a)=type_of(null) & type_of(_b)=type_of(null) &
   type_of(_c)=type_of(0) & type_of(_d)=type_of(0) & type_of(_e)=type_of(0) & type_of(_f)=type_of(0) &
   type_of(_g)=type_of('') & type_of(_h)=type_of('') & type_of(_i)=type_of('') & _a & _b
|| UD_SKL.cntx_psh(); UD_SKL.index('SYMBOL'); UD_SKL.prefix();
   _sklient:=_sprodukt:=_oklient:=_oprodukt:=''; _seekk:=_seekp:=0;
   {? UD_SKL.seek(_a) || _seekk:=1; _sklient:=UD_SKL.SYMBOL; _oklient:=UD_SKL.OPIS ?};
   {? UD_SKL.seek(_b) || _seekp:=1; _sprodukt:=UD_SKL.SYMBOL; _oprodukt:=UD_SKL.OPIS ?};
   UD_SKL.cntx_pop();
   {? _seekk & _seekp
   || _zwrot[1]:=(_c+_sklient)+_g+{? _d>0 || (_d+_sprodukt) || _sprodukt ?};
      _zwrot[2]:=(_e+_oklient)+_h+{? _f>0 || (_f+_oprodukt) || _oprodukt ?};
      _zwrot[3]:=_i
   ?}
?};
_zwrot


\gen_kl_pr_rmpk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Tworzy symbol i opis rozdzielnika MPK dla schematu Klient-Produkt
::       Symbol - treść_doklejana_z_przodu_SYMBOL_MPK_treść_doklejana_z_tyłu
::       Opis - treść_doklejana_z_przodu_OPIS_MPK_treść_doklejana_z_tyłu
::   WE: _a - symbol MPK
::       _b - opis MPK
::       _c - treść doklejana do symbolu MPK z przodu
::       _d - treść doklejana do symbolu MPK z tyłu
::       _e - treść doklejana do opisu MPK z przodu
::       _f - treść doklejana do opisu MPK z tyłu
::       _g - symbol elementu nadrzędnego (pusty - element główny)
::   WY: tablica 3-elementowa _zwrot[1]-symbol, _zwrot[2]-opis, _zwrot[3]-symbol nadrzędnego (lub pusty)
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=obj_new(3); _zwrot[1]:=_zwrot[2]:=_zwrot[3]:='';
{? _=7 & type_of(_a)=type_of('') & type_of(_b)=type_of('') &
   type_of(_c)=type_of('') & type_of(_d)=type_of('') & type_of(_e)=type_of('') & type_of(_f)=type_of('') &
   type_of(_g)=type_of('') & _a<>'' & _b<>''
|| _zwrot[1]:=_c+_a+_d;
   _zwrot[2]:=_e+_b+_f;
   _zwrot[3]:=_g
?};
_zwrot


\szukaj_element1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Wyszukuje element w schemacie danych - jeśli nie ma zakłada go
::   WE: _a - wskazanie na schemat danych (UD_SCH)
::       _b - symbol elementu
::       _c - opis elementu
::       _d - symbol elementu nadrzędnego
::   WY: UD_SKL.ref()
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=null;
{? _a & _b<>''
|| UD_SCH.cntx_psh(); UD_SCH.index('SYMBOL'); UD_SCH.prefix();
   {? UD_SCH.seek(_a)
   || UD_DEF.cntx_psh(); UD_DEF.index('SCHSYM');
      _nadrz:=null;
      {? _d<>''
      || UD_DEF.prefix(UD_SCH.ref(),_d,);
         {? UD_DEF.first() || _nadrz:=UD_DEF.ref() ?}
      ?};
      UD_DEF.prefix(UD_SCH.ref(),_b,);
      {? UD_DEF.first()
      || _zwrot:=UD_DEF.UD_SKL
      || _skl:=null;
         UD_SKL.cntx_psh(); UD_SKL.index('SYMBOL'); UD_SKL.prefix(UD_SCH.UD_TYP,_b,);
         {? UD_SKL.first()
         || _skl:=UD_SKL.ref()
         || UD_SKL.blank(1);
            UD_SKL.UD_TYP:=UD_SCH.UD_TYP;
            UD_SKL.SYMBOL:=_b;
            UD_SKL.OPIS:=_c;
            UD_SKL.LISTA:=UD_SKL.AKTYWNY:='T';
            {? UD_SKL.add(1) || _skl:=UD_SKL.ref() ?}
         ?};
         UD_SKL.cntx_pop();
         {? _skl
         || UD_DEF.blank(1);
            UD_DEF.UD_SCH:=UD_SCH.ref();
            UD_DEF.UD_DEF:=_nadrz;
            UD_DEF.UD_SKL:=_skl;
            UD_DEF.UD_POZ:=null;
            UD_DEF.SYMBOL:=_b;
            UD_DEF.OPIS:=_c;
            {? UD_DEF.add() || _zwrot:=UD_DEF.UD_SKL ?}
         ?}
      ?};
      UD_DEF.cntx_pop()
   ?};
   UD_SCH.cntx_pop()
?};
_zwrot


\szukaj_element2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Wyszukuje element w schemacie danych - jeśli nie ma zakłada go - na podstawie kartoteki
::   WE: _a - wskazanie na schemat danych (UD_SCH)
::       _b - symbol elementu nadrzędnego
::   WY: UD_SKL.ref()
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=null;
{? _a
|| UD_SCH.cntx_psh(); UD_SCH.index('SYMBOL'); UD_SCH.prefix();
   {? UD_SCH.seek(_a)
   || UD_DEF.cntx_psh(); UD_DEF.index('SCHSYM');
      _nadrz:=null;
      {? _b<>''
      || UD_DEF.prefix(UD_SCH.ref(),_b,);
         {? UD_DEF.first() || _nadrz:=UD_DEF.ref() ?}
      ?};
      _sym:=_opis:='';
      {? cur_tab(1,0)=MGR
      || _sym:=MGR.KOD; _opis:=MGR.NAZ
      |? cur_tab(1,0)=TMPMM4 | cur_tab(1,0)=TMPUM4
      || M.cntx_psh(); M.index('MATKTM'); M.prefix();
         {? M.seek(cur_tab(1,0).REFM,M.name())
         || _sym:=M.KTM; _opis:=M.N
         ?};
         M.cntx_pop()
      |? cur_tab(1,0)=TMPKHM4
      || KH.cntx_psh(); KH.index('KOD'); KH.prefix();
         {? KH.seek(TMPKHM4.REFKH,KH.name())
         || _sym:=KH.KOD; _opis:=KH.NAZ
         ?};
         KH.cntx_pop()
      |? cur_tab(1,0)=GRKH
      || _sym:=GRKH.KOD; _opis:=GRKH.NAZ
      ?};
      {? _sym<>''
      || UD_DEF.prefix(UD_SCH.ref(),_sym,);
         {? UD_DEF.first()
         || _zwrot:=UD_DEF.UD_SKL
         || _skl:=null;
            UD_SKL.cntx_psh(); UD_SKL.index('SYMBOL'); UD_SKL.prefix(UD_SCH.UD_TYP,_sym,);
            {? UD_SKL.first()
            || _skl:=UD_SKL.ref()
            || UD_SKL.blank(1);
               UD_SKL.UD_TYP:=UD_SCH.UD_TYP;
               UD_SKL.SYMBOL:=_sym;
               UD_SKL.OPIS:=_opis;
               UD_SKL.LISTA:=UD_SKL.AKTYWNY:='T';
               {? UD_SKL.add(1) || _skl:=UD_SKL.ref() ?}
            ?};
            UD_SKL.cntx_pop();
            {? _skl
            || UD_DEF.blank(1);
               UD_DEF.UD_SCH:=UD_SCH.ref();
               UD_DEF.UD_DEF:=_nadrz;
               UD_DEF.UD_SKL:=_skl;
               UD_DEF.UD_POZ:=null;
               UD_DEF.SYMBOL:=_sym;
               UD_DEF.OPIS:=_opis;
               {? UD_DEF.add() || _zwrot:=UD_DEF.UD_SKL ?}
            ?}
         ?}
      ?};
      UD_DEF.cntx_pop()
   ?};
   UD_SCH.cntx_pop()
?};
_zwrot


\m4_mag_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Ustala element klient i element produkt na podstawie dokumentu magazynowego i jego pozycji
::   WY: Obiekt dwuelementowy
::       _1 - Klient (ref UD_SKL)
::       _2 - Produkt (ref UD_SKL)
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=obj_new(2); _zwrot[1]:=_zwrot[2]:=null;
_zwrot[1]:={? ND.KH || exec('m4_szuk_def_kh','control_marza',ND.KH,ND.D) || XINFO.MDOMKL ?};
_zwrot[2]:={? DK.M || exec('m4_szuk_def_pr','control_marza',DK.M,ND.D) || XINFO.MDOMPR ?};
_zwrot


\m4_sprz_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Ustala element klient i element produkt na podstawie dokumentu sprzedaży i jego pozycji
::   WY: Obiekt dwuelementowy
::       _1 - Klient (ref UD_SKL)
::       _2 - Produkt (ref UD_SKL)
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=obj_new(2); _zwrot[1]:=_zwrot[2]:=null;
_zwrot[1]:={? FAKS.KH || exec('m4_szuk_def_kh','control_marza',FAKS.KH,FAKS.D) || XINFO.MDOMKL ?};
_zwrot[2]:={? FAP.M || exec('m4_szuk_def_pr','control_marza',FAP.M,FAKS.D) || XINFO.MDOMPR ?};
_zwrot


\m4_pb_sprzedaz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Ustala pozycję budżetową dla dokumentu sprzedaży
::   WY: _a - UD_SKL.ref - ref pozycji budżetowej
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=null;
{? XINFO.MSCHWIEL & FAP.M
|| M.cntx_psh(); M.index('MATKTM'); M.prefix(); FAP.M();
   UD_SCH.cntx_psh(); UD_SCH.index('SYMBOL'); UD_SCH.prefix(); XINFO.MSCHWIEL();
   _rodzaj:={? M.RODZ='U'
             || 'MR_0_PRZYCH_U'
             || {? M.R='H' | M.R='W' || 'MR_0_PRZYCH_W' || 'MR_0_PRZYCH_T' ?}
             ?};
   UD_DEF.cntx_psh(); UD_DEF.index('SCHSYM'); UD_DEF.prefix(XINFO.MSCHWIEL,_rodzaj,);
   {? UD_DEF.first() || _zwrot:=UD_DEF.UD_SKL ?};
   UD_DEF.cntx_pop();
   UD_SCH.cntx_pop(); M.cntx_pop()
?};
_zwrot


\przekszt_elementy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [20.42]
:: OPIS: Formuła warunkowa dla przekształcenia modeli. Przekształca tylko wartości źrodłowe dla określonych
::       pozycji budżetowych. Formuła wykorzystywana jako formuła warunkowa w danych.
::   WY: _a...._z (maksymalnie 26) - kody pozycji budżetowych, dlaktórych wywoływać przekształcenie.
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
{? _
|| K__POZ.cntx_psh();
   UD_SKL.cntx_psh(); UD_SKL.index('SYMBOL'); UD_SKL.prefix();
   {! _i:=1.._
   |? ~_zwrot
   |! _par:=_[_i];
      {? type_of(_par)=type_of('')
      || _zwrot:=(K__POZ.WYMIAR01().SYMBOL=_par)
      ?}
   !};
   K__POZ.cntx_pop(); UD_SKL.cntx_pop()
?};
_zwrot





:Sign Version 2.0 jowisz:1048 2020/10/16 15:25:17 232d921e4158ceaa00e8f66e13e3e936969a236c19507f7af51abf69c407b3e98da307bcb373ab94c3fe19b6e9e871766d6712d503eb88c1647c3788e386a2e69d30658883e75de8d1c38f14c70ba322dda01d0106794ffea6ea47e75f07c1b0f6a81db5bf05bc4cbf7d21f59f7b6193647337c6c903c63f2467f382919dfb60
