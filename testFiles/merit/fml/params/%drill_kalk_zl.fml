:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %drill_kalk_zl.fml
:: Utworzony: 16.12.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły wyświetlające szczegóły dla pozycji kalkulacji zlecenia (drill-down)
::            Wyciąganie danych z tabel ANZMAT, ANZTLS, ANZTOU, ANZTTO, ANZWRK oraz tabel źródłowych
::======================================================================================================================


\drill_mat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Szczegóły kalkulacji/analizy zlecenia dla surowców
::       Formuła działa w kontekście bieżącej kalkulacji/analizy zlecenia
::   WE: [_a] - nr rubryki (ANZP) kalkulacji zlecenia, w której przechowywana jest ilość kalkulowana (xjm).
::              Jak nie podana to brana ilość zlecenia
::       [_b] - typ wyświetlanych materiałów: 'S' - surowce, 'O' - odpady, [''] - wszystko
::  OLD: \drill_mat/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZL,ANZH);
Cntx.clr(ZL,ANZH);
_nrx:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_so:={? var_pres('_b')=type_of('') || _b || '' ?};
{? _so='' || _so:='SO' ?};
exec('tktl_cntx_psh','tech_common');

_ilx:=0;
:: Określenie ilości kalkulowanej
{? _nrx>0
|| _ilx:=exec('FindInSet','#table','ANZP','NRARUB',_nrx,ANZH.ref(),"ANZP.WAR",,,0)
?};
_coefinal:=1;

{? VAR.A01='0'
||
   VAR_DEL.delete('__ILWAR');
   __ILWAR:=tab_tmp(1,
      'M_REF','STRING[16]','$M.ref()',
      'IL_TECH','REAL','Ilość wg tech.'@,
      'WAR_TECH','REAL','Wartość'@,
      'IL_LIM','REAL','Ilość wg limitów'@,
      'WAR_LIM','REAL','Wartość'@
   );

   {? ZL.TYP().TECH='N'
   || {? ZL.RODZAJ='Z'
      || _xjm:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,"XJM",0);
         _coefinal:={? _xjm=0 || 0 |? _ilx>0 || _ilx/_xjm || ZL.IL/_xjm ?};
         ZL.cntx_psh();
         ZL.index('STAN');
         ZL.prefix(ZL.HIDDEN,ZL.STAN,ZL.UNRZL);
         {? ZL.first()
         || {!
            |? _xjm:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,"XJM",0);
               _coef:={? _xjm=0 || 0 || ZL.IL*_coefinal/_xjm ?};
               _msk:=(8+ZL.RKTL)+3;
               exec('tktl_use','tech_common',_msk);
               exec('tmat_ilwar_add','%drill_kalk_zl',ZL.RKTL,__ILWAR,_coef);
               ZL.next()
            !}
         ?};
         ZL.cntx_pop()
      || _xjm:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,"XJM",0);
         _coefinal:=_coef:={? _xjm=0 || 0 |? _ilx>0 || _ilx/_xjm || ZL.IL/_xjm ?};
         _msk:=(8+ZL.RKTL)+3;
         exec('tktl_use','tech_common',_msk);
         exec('tmat_ilwar_add','%drill_kalk_zl',ZL.RKTL,__ILWAR,_coef)
      ?}
   || {? ZL.RODZAJ='Z'
      || _xjm:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,"XJM",0);
         _coefinal:={? _xjm=0 || 0 |? _ilx>0 || _ilx/_xjm || ZL.IL/_xjm ?};
         ZL.cntx_psh();
         ZL.index('STAN');
         ZL.prefix(ZL.HIDDEN,ZL.STAN,ZL.UNRZL);
         {? ZL.first()
         || {!
            |? _xjm:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"XJM",0);
               _coef:={? _xjm=0 || 0 || ZL.IL*_coefinal/_xjm ?};
               _msk:=(8+ZL.RTKTL)+3;
               exec('tktl_use','tech_common',_msk);
               exec('tmat_ilwar_add','%drill_kalk_zl',ZL.RTKTL,__ILWAR,_coef);
               ZL.next()
            !}
         ?};
         ZL.cntx_pop()
      || _xjm:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"XJM",0);
         _coefinal:=_coef:={? _xjm=0 || 0 |? _ilx>0 || _ilx/_xjm || ZL.IL/_xjm ?};
         _msk:=(8+ZL.RTKTL)+3;
         exec('tktl_use','tech_common',_msk);
         exec('tmat_ilwar_add','%drill_kalk_zl',ZL.RTKTL,__ILWAR,_coef)
      ?}
   ?};

   {? ZL.RODZAJ='P' |
      (ZL.NRNZL=0  & ZL.GENLIM='N' | ZL.NRNZL<>0 & ZL.GENLIM='P')
   || ZLIM.index('ZKK')
   || ZLIM.index('ZKP')
   ?};
   ZLIM.prefix(ZL.ref());
   {? ZLIM.first()
   || _rm:=roundmet();
      _coefinal:={? ZL.IL=0 || 0 |? _ilx>0 || _ilx/ZL.IL || 1 ?};
      {!
      |?
         _dokl:=exec('jaka_dok_m','jm',ZLIM.KTM);
         {? ZLIM.SO='S'
         || _coefs:=_coefinal;
            roundmet(2)
         || _coefs:=_coefinal*-1;
            roundmet(1)
         ?};
         __ILWAR.prefix($ZLIM.KTM);
         {? __ILWAR.first()
         || __ILWAR.IL_LIM+=(ZLIM.LIL*_coefs)$_dokl;
            __ILWAR.put()
         || __ILWAR.blank();
            __ILWAR.IL_LIM:=(ZLIM.LIL*_coefs)$_dokl;
            __ILWAR.M_REF:=$ZLIM.KTM;
            __ILWAR.add()
         ?};
         ZLIM.next()
      !};
      roundmet(_rm)
   ?};
   ANZMAT.f_clear();
   ANZMAT.index('ASN');
   ANZMAT.prefix();
::   ANZMAT.prefix(ANZH.ref());
   _where:='ANZMAT.ANZH=:_a';
   _where+={? _so='S'|| ' and IL>=0 ' |? _so='O' || 'and IL<0 ' || '' ?};
   ANZMAT.f_set(,,_where,ANZH.ref());
   ANZMAT.win_edit('RED');
   _wer:=ANZMAT.mk_sel('Ceny surowców pobrane do kalkulacji'@,'P',0,'anzmat_wer',5,10,20,,'U');
   ANZMAT.win_fld(_wer,,'T','KTM',,20,,,'Kod surowca'@);
   ANZMAT.win_fld(_wer,,'T','N',,40,,,'Nazwa'@);
   ANZMAT.win_fld(_wer,M,'J','KOD',,5,,,'jm'@);
   ANZMAT.win_fld(_wer,,'PRICE',,,14,2);
   ANZMAT.win_fld(_wer,,'POCH',,,5,,,'Pochodzenie ceny'@);
   ANZMAT.win_fld(_wer,__ILWAR,'IL_TECH',,,12,4);
   ANZMAT.win_fld(_wer,__ILWAR,'WAR_TECH',,,14,2);
   ANZMAT.win_fld(_wer,__ILWAR,'IL_LIM',,,12,4);
   ANZMAT.win_fld(_wer,__ILWAR,'WAR_LIM',,,14,2);
   ANZMAT.win_act(_wer,,'Rekord',,,,"
      __ILWAR.prefix($ANZMAT.T);
      {? ~__ILWAR.first()
      || __ILWAR.blank()
      || __ILWAR.WAR_TECH:=__ILWAR.IL_TECH*ANZMAT.PRICE;
         __ILWAR.WAR_LIM:=__ILWAR.IL_LIM*ANZMAT.PRICE
      ?};
      ~~
   ");
   ANZMAT.win_sel(_wer);
   ANZMAT.select();
   ANZMAT.f_clear();
   VAR_DEL.delete('__ILWAR')
||
   VAR_DEL.delete('__ZLST','__TAB3','__TAB5');

   _array:=obj_new(2);

   __ZLST:=exec('zlec_m_stan','zl_common',1);
   __TAB3:=exec('kontr_lim','zl_limit','T',1);
   __TAB5:=exec('kontr_nli','zl_limit','T',1);

   _grp:=__ZLST[1].grp_make('Szczegóły dla zlecenia: %1'@[VAR.A_ZLEC().SYM],,'zlec_szcz',,,,,'normal');
   __ZLST[1].grp_sel(_grp,__ZLST[1],__ZLST[2],'Stany zlecenia'@,,,,,,,,,'maximized_with_title');
   __ZLST[1].first();
   {? type_of(__TAB3)=type_of(_array)
   || __ZLST[1].grp_sel(_grp,__TAB3[1],__TAB3[2],'Rozl. limitów'@,,,,,,,,,'maximized_with_title');
      __TAB3[1].actions(__TAB3[2],'J');
      __TAB3[1].first()
   ?};
   {? type_of(__TAB5)=type_of(_array)
   || __ZLST[1].grp_sel(_grp,__TAB5[1],__TAB5[2],'Rozl. sur. nielimit.'@,,,,,,,,,'maximized_with_title');
      __TAB5[1].actions(__TAB5[2],'J');
      __TAB5[1].first()
   ?};

   __ZLST[1].win_sel(_grp);

   __ZLST[1].select();

   VAR_DEL.delete('__ZLST','__TAB3','__TAB5')
?};

exec('tktl_cntx_pop','tech_common');
Cntx.pop(ZL,ANZH);
~~


\drill_rob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Szczegóły kalkulacji/analizy zlecenia dla robocizny
::       Formuła działa w kontekście bieżącej kalkulacji/analizy zlecenia
::   WE: [_a] - technologia(0), przewodnik(1), domyślnie 0  <- dla kalkulacji zlecenia
::       [_b] - zwykły drill(0), rozbudowany drill(1), domyślnie 0 <- dla kalkulacji zlecenia
::  OLD: \drill_rob/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZL,ANZH);
Cntx.clr(ZL,ANZH);

{? ANZH.ZLEC().TYP().TECH='T'
|| _nrk:=exec('FindAndGet','#table',TKTL,ANZH.ZLEC().RTKTL,,"ref()",null())
|| _nrk:=exec('FindAndGet','#table',TKTL,ANZH.ZLEC().RKTL,,"ref()",null())
?};

_tabZL:=tab_tmp(1,'REF','STRING[16]','');
_tabZL.REF:=$ANZH.ZLEC;
_tabZL.add();
{? ANZH.ZLEC().RODZAJ='Z'
|| ZL.cntx_psh();
   ZL.index('NRNZL');
   ZL.prefix(ANZH.ZLEC().UNRZL);
   {? ZL.first()
   || {!
      |? _tabZL.REF:=$ZL.ref();
         _tabZL.add();
         ZL.next()
      !}
   ?};
   ZL.cntx_pop();
   ~~
?};

{? VAR.A01='0'
|| _tech_prz:={? var_pres('_a')=type_of(0) || _a || 0 ?};
   _extended:={? var_pres('_b')=type_of(0) || _b || 0 ?};

   {? ANZH.ZLEC().TYP().WP='W'
   || _tech_prz:=1;
      _extended:=1
   ?};

   {? _extended
   || _tab:=tab_tmp(1,'REF','STRING[16]','');
      {? _tech_prz=0
      ||
         {? ANZH.ZLEC().RODZAJ='Z'
         || ZL.cntx_psh();
            ZL.index('NRNZL');
            ZL.prefix(ANZH.ZLEC().UNRZL);
            {? ZL.first()
            || {!
               |? _tech:={? ZL.TYP().TECH='T' || ZL.RTKTL || ZL.RKTL ?};
                  {? _tech<>''
                  || _tab.REF:=_tech;
                     _tab.add()
                  ?};
                  ZL.next()
               !}
            ?};
            ZL.cntx_pop();
            ~~
         || _tab.REF:=$_nrk;
            _tab.add();
            ~~
         ?};

         _sqlt:=sql(''
                   +"
                     SELECT
                         nvl(TTOPER.KOD,TOPER.REFERENCE) as KOD
                        ,TTOPER.NA        as NA
                        ,TOPER.PLNH       as PLNH
                        ,TTOPER.PLATNE    as PLATNE
                        ,SUM(TOPER.NTIME) as NTIME
                        ,SUM(TOPER.PLNX)  as PLNX
                     FROM
                        TOPER
                        LEFT OUTER JOIN TTOPER USING(TOPER.OPER,TTOPER.REFERENCE)
                     WHERE
                        TOPER.NRK IN (SELECT tab.REF FROM :_a tab)
                        AND TOPER.PZ='P'
                        AND TOPER.WEW='T'
                     GROUP BY
                        TTOPER.KOD
                       ,TTOPER.NA
                       ,TOPER.PLNH
                       ,TTOPER.PLATNE
                       ,TOPER.REFERENCE
                    "
                   ,_tab
                   )

      ||
         {? ANZH.ZLEC().RODZAJ='Z'
         || ZL.cntx_psh();
            ZL.index('NRNZL');
            ZL.prefix(ANZH.ZLEC().UNRZL);
            {? ZL.first()
            || {!
               |? _tab.REF:=$ZL.ref();
                  _tab.add();
                  ZL.next()
               !}
            ?};
            ZL.cntx_pop();
            ~~
         || _tab.REF:=$ANZH.ZLEC;
            _tab.add();
            ~~
         ?};

         _sqlt:=sql(''
                   +"
                     SELECT
                         nvl(TTOPER.KOD,nvl(TOPER.REFERENCE,ZGP.REFERENCE)) as KOD
                        ,TTOPER.NA       as NA
                        ,ZGP.PLNH        as PLNH
                        ,TTOPER.PLATNE   as PLATNE
                        ,SUM(ZGP.NTIME)  as NTIME
                        ,SUM(ZGP.PLNX)   as PLNX
                     FROM
                        ZGP
                        LEFT OUTER JOIN ZGH USING(ZGP.NRPRZ,ZGH.REFERENCE)
                        LEFT OUTER JOIN TOPER USING(ZGP.TOPER,TOPER.REFERENCE)
                        LEFT OUTER JOIN TTOPER USING(TOPER.OPER,TTOPER.REFERENCE)
                     WHERE
                        ZGH.ZLEC IN (SELECT tab.REF FROM :_a tab)
                     GROUP BY
                        TTOPER.KOD
                       ,TTOPER.NA
                       ,ZGP.PLNH
                       ,TTOPER.PLATNE
                       ,TOPER.REFERENCE
                       ,ZGP.REFERENCE
                    "
                   ,_tab
                   )
      ?};

      {? _sqlt.first()
      || {!
         |?
            {? _tech_prz=0
            || _xjm:=exec('FindAndGet','#table',
                  TKTL,{? ANZH.ZLEC().RTKTL<>'' || ANZH.ZLEC().RTKTL || ANZH.ZLEC().RKTL ?},,"XJM",1
               );
               {? _sqlt.PLATNE='A'
               || _sqlt.NTIME:=ANZH.ZLEC().IL;
                  _sqlt.PLNX:=_sqlt.NTIME*_sqlt.PLNH;
                  _sqlt.put()
               || _sqlt.NTIME:=ANZH.ZLEC().IL/_xjm*_sqlt.NTIME;
                  _sqlt.PLNX:=_sqlt.NTIME*_sqlt.PLNH;
                  _sqlt.put()
               ?}
            || ~~
            ?};
            {? 5+_sqlt.KOD=5+TOPER.name()
            || _names:=exec('tpz_names','tech_oper',_sqlt.KOD);
               {? _names.KOD<>'???' || _sqlt.KOD:=_names.KOD ?};
               {? _names.NA<>'???' || _sqlt.NA:=_names.NA ?};
               _sqlt.put();
               obj_del(_names)
            |? 5+_sqlt.KOD=5+ZGP.name()
            || _ref:=_sqlt.KOD;
               _names:=exec('tpz_names','zl_guide',_sqlt.KOD);
               {? _names.KOD<>'???'
               || _sqlt.KOD:=_names.KOD
               || _sqlt.KOD:=$exec('FindAndGet','#table',ZGP,_ref,,"NRP",'')
               ?};
               {? _names.NA<>'???'
               || _sqlt.NA:=_names.NA
               || _sqlt.NA:=exec('FindAndGet','#table',ZGP,_ref,,"OPIS",'')
               ?};
               _sqlt.put();
               obj_del(_names)
            ?};
            _sqlt.next()
         !}
      ?};

      {? type_of(_sqlt)=type_of(SYSLOG)
      || _size:={? _sqlt.size()<40 || _sqlt.size() || 39 ?}+1;
         _win:=_sqlt.mk_sel('Robocizna uwzględniona w kalkulacji'@,'P',0,'#drillrobanzh0x',,1,_size,,'U');
         _sqlt.win_sel(_win);
         _sqlt.win_fld(_win,,'KOD'  ,,, 8, ,,'Kod'@);
         _sqlt.win_fld(_win,,'NA'   ,,,35, ,,'Nazwa'@);
         _sqlt.win_fld(_win,,'PLNH' ,,,10,2,,'Stawka'@);
         _sqlt.win_fld(_win,,'NTIME',,,10,4,,'Norma [czas/ilość]'@);
         _sqlt.win_fld(_win,,'PLNX' ,,,10,2,,'Koszt'@);
         _sqlt.win_fld(_win,,'PLATNE' ,,,1,,,'Płatne'@);
         _sqlt.select()
      ?}
   || ANZTTO.index('AO');
      ANZTTO.prefix(ANZH.ref());
      ANZTTO.first();
      ANZTTO.win_edit('');
      ANZTTO.win_sel('WER');
      ANZTTO.select()
   ?}
||
   _tab:=sql(''
            +"
                SELECT
                   nvl(TTOPER.KOD,nvl(TOPER.REFERENCE,ZGP.REFERENCE)) as KOD
                  ,TTOPER.NA      as NA
                  ,ZGP.PLNH       as PLNH
                  ,ZGP.NTIME      as NTIME
                  ,ZGP.PLNX       as PLNX

                  ,gd.TIME        as TIME
                  ,gd.KW          as KW

                FROM @ZLGD AS gd
                  LEFT OUTER JOIN ZGP AS zgp USING(gd.ZGP, zgp.REFERENCE)
                  LEFT OUTER JOIN TOPER USING(ZGP.TOPER,TOPER.REFERENCE)
                  LEFT OUTER JOIN TTOPER USING(TOPER.OPER,TTOPER.REFERENCE)
                WHERE
                  gd.ZL IN (SELECT tab.REF FROM :_a tab)
                     AND
                  ZGP.WEW='T'
             "
            ,_tabZL
            );

   _sqlt:=sql(''
             +"
               SELECT
                   tab.KOD         as KOD
                  ,tab.NA          as NA

                  ,tab.PLNH        as PLNH
                  ,SUM(tab.NTIME)  as NTIME
                  ,SUM(tab.PLNX)   as PLNX

                  ,SUM(tab.TIME)   as TIME
                  ,SUM(tab.KW)     as KW
               FROM
                  :_a tab
               GROUP BY
                  tab.KOD
                 ,tab.NA
                 ,tab.PLNH
              "
             ,_tab
             );
   {? _sqlt.first()
   || {!
      |?
         {? 5+_sqlt.KOD=5+TOPER.name()
         || _names:=exec('tpz_names','tech_oper',_sqlt.KOD);
            _sqlt.KOD:=_names.KOD;
            _sqlt.NA:=_names.NA;
            _sqlt.put();
            obj_del(_names)
         |? 5+_sqlt.KOD=5+ZGP.name()
         || _names:=exec('tpz_names','zl_guide',_sqlt.KOD);
            _sqlt.KOD:=_names.KOD;
            _sqlt.NA:=_names.NA;
            _sqlt.put();
            obj_del(_names)
         ?};
         _sqlt.next()
      !}
   ?};
   {? type_of(_sqlt)=type_of(SYSLOG)
   || _size:={? _sqlt.size()<40 || _sqlt.size() || 39 ?}+1;
      _win:=_sqlt.mk_sel('Robocizna uwzględniona w analizie'@,'P',0,'#drillrobanzh1o',,1,_size);
      _sqlt.win_sel(_win);
      _sqlt.win_fld(_win,,'KOD'  ,,, 8, ,,'Kod'@);
      _sqlt.win_fld(_win,,'NA'   ,,,35, ,,'Nazwa'@);

      _sqlt.win_fld(_win,,'PLNH' ,,,10,2,,'Plan. stawka'@);
      _sqlt.win_fld(_win,,'NTIME',,,10,4,,'Norma czas.'@);
      _sqlt.win_fld(_win,,'PLNX' ,,,10,2,,'Plan. koszt'@);

      _sqlt.win_fld(_win,,'TIME' ,,,10,4,,'Rzecz. czas.'@);
      _sqlt.win_fld(_win,,'KW'   ,,,10,2,,'Rzecz. koszt'@);
:      _sqlt.select()
      ~~
   ?};
   {? type_of(_sqlt)=type_of(SYSLOG)
    & var_pres('_win')=2
   || exec('drill_table','%drill_kalk_zl','R',_sqlt,_win,'Tabelarycznie'@)
   || exec('drill_table','%drill_kalk_zl','R')
   ?}
?};

Cntx.pop(ZL,ANZH);
~~


\drill_wrk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Szczegóły kalkulacji/analizy zlecenia dla kosztów stanowisk
::       Formuła działa w kontekście bieżącej kalkulacji/analizy zlecenia
::  OLD: \drill_wrk/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZL,ANZH);
Cntx.clr(ZL,ANZH);

{? VAR.A01='0'
|| ANZWRK.index('AP');
   ANZWRK.prefix(ANZH.ref());
   ANZWRK.first();
   ANZWRK.win_edit('');
   ANZWRK.win_sel('WER');
   ANZWRK.select()
|| exec('drill_table','%drill_kalk_zl','S')
?};

Cntx.pop(ZL,ANZH);
~~


\drill_utl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Szczegóły kalkulacji/analizy zlecenia dla kosztów N-P-U
::       Formuła działa w kontekście bieżącej kalkulacji/analizy zlecenia
::  OLD: \drill_utl/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZL,ANZH);
Cntx.clr(ZL,ANZH);

ANZTLS.index('AT');
ANZTLS.prefix(ANZH.ref());
ANZTLS.first();
ANZTLS.win_edit('');
ANZTLS.win_sel('WER');
ANZTLS.select();

Cntx.pop(ZL,ANZH);
~~


\drill_usl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Szczegóły kalkulacji/analizy zlecenia dla kosztów usług (kooperacji)
::       Formuła działa w kontekście bieżącej kalkulacji/analizy zlecenia
::  OLD: \drill_usl/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZL,ANZH);
Cntx.clr(ZL,ANZH);

ANZTOU.index('AT');
ANZTOU.prefix(ANZH.ref());
ANZTOU.first();
ANZTOU.win_edit('');
ANZTOU.win_sel('WER');
ANZTOU.select();

Cntx.pop(ZL,ANZH);
~~


\tmat_ilwar_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Dodaje rekordy do tabeli __ILWAR na podstawie prefiksu tabeli TMAT i ustawionej maski
::       Wołane z formuły exec('drill_mat','%drill_kalk_zl')
::   WE: _a - prefiks tabeli TMAT - $TKTL.ref()
::       _b - alias do tabeli __ILWAR
::       _c - współczynnik
::  OLD: \tmat_ilwar_add/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
_rtktl:=_a;
_ilwar:=_b;
_coef:=_c;
_rm:=roundmet();

TMAT.index('NNL');
TMAT.prefix(BIT.sqlint(_rtktl),);
{? TMAT.first()
||
   {!
   |?
      {? TMAT.SO='S'
      || _coefs:=_coef;
         roundmet(2)
      || _coefs:=_coef*-1;
         roundmet(1)
      ?};
      {? TMAT.GRKTM='G'
      || TTGP.index('GRS');
         TTGP.prefix(TMAT.TGRP);
         {? TTGP.first()
         || {!
            |? _ktm:=$TTGP.PT;
               _dokl:=exec('jaka_dok_m','jm',TTGP.PT);
               __ILWAR.prefix(_ktm);
               {? __ILWAR.first()
               || __ILWAR.IL_TECH+=(TMAT.WARB*_coefs)$_dokl;
                  __ILWAR.put()
               || __ILWAR.blank();
                  __ILWAR.IL_TECH:=(TMAT.WARB*_coefs)$_dokl;
                  __ILWAR.M_REF:=_ktm;
                  __ILWAR.add()
               ?};
               TTGP.next()
            !}
         ?}
      || _ktm:=$TMAT.PT;
         _dokl:=exec('jaka_dok_m','jm',TMAT.PT);
         __ILWAR.prefix(_ktm);
         {? __ILWAR.first()
         || __ILWAR.IL_TECH+=(TMAT.WARB*_coefs)$_dokl;
            __ILWAR.put()
         || __ILWAR.blank();
            __ILWAR.IL_TECH:=(TMAT.WARB*_coefs)$_dokl;
            __ILWAR.M_REF:=_ktm;
            __ILWAR.add()
         ?}
      ?};
      TCHMAT.index('SL');
      TCHMAT.prefix(TMAT.ref());
      {? TCHMAT.first()
      || {!
         |? {? TCHMAT.GRKTM='G'
            || TTGP.index('GRS');
               TTGP.prefix(TCHMAT.TGRP);
               {? TTGP.first()
               || {!
                  |? _ktm:=$TTGP.PT;
                     _dokl:=exec('jaka_dok_m','jm',TTGP.PT);
                     __ILWAR.prefix(_ktm);
                     {? __ILWAR.first()
                     || __ILWAR.IL_TECH+=(TCHMAT.WARB*_coefs)$_dokl;
                        __ILWAR.put()
                     || __ILWAR.blank();
                        __ILWAR.IL_TECH:=(TCHMAT.WARB*_coefs)$_dokl;
                        __ILWAR.M_REF:=_ktm;
                        __ILWAR.add()
                     ?};
                     TTGP.next()
                  !}
               ?}
            || _ktm:=$TCHMAT.PT;
               _dokl:=exec('jaka_dok_m','jm',TCHMAT.PT);
               __ILWAR.prefix(_ktm);
               {? __ILWAR.first()
               || __ILWAR.IL_TECH+=(TCHMAT.WARB*_coefs)$_dokl;
                  __ILWAR.put()
               || __ILWAR.blank();
                  __ILWAR.IL_TECH:=(TCHMAT.WARB*_coefs)$_dokl;
                  __ILWAR.M_REF:=_ktm;
                  __ILWAR.add()
               ?}
            ?};
            TCHMAT.next()
         !}
      ?};
      TMAT.next()
   !}
?};
roundmet(_rm);
~~


\drill_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JM [2009]
:: OPIS: Wyświetla okienko dla drill_down
::   WE: _a - 'R'obocizna, 'S'tanowiska
::   WY: ---
::  OLD: \drill_table/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
_wariant:={? _>0 & type_of(_a)=2
          || {? _a='R' || _a
             |? _a='S' || _a
                       || return(0);''
             ?}
          || return(0);''
          ?};

_secTab:={? _>2 & type_of(_b)=type_of(SYSLOG) || _b || ~~ ?};
_secWin:={? _>2 & type_of(_c)=type_of('')     || _c || ~~ ?};
_secTit:={? _>3 & type_of(_d)=type_of('')     || _d || 'Składniki' ?};

VAR_DEL.delete('DrillTab');
DrillTab:=tab_tmp(2,'TREE'    ,'TREE_REF'   ,'Rodzic'
                   ,'NAZWA'   ,'STRING[60]' ,'Nazwa pozycji'
                   ,'T_PLAN'  ,'REAL'       ,'Czas planowany'@
                   ,'T_REAL'  ,'REAL'       ,'Czas rzeczywisty'@
                   ,'VALUE'   ,'REAL'       ,'Koszt'@
::                 pola techniczne
                   ,'ROZ'     ,'INTEGER'    ,'Rozwinięte?'
                   ,'TABELA'  ,'STRING[8]'  ,'Akronim tabeli'
                   ,'TAB_REF' ,'STRING[16]' ,'Ref w TABELA'
                   ,'WARIANT' ,'STRING[8]'  ,'Wariant ścieżki'
                 );
_tab:=DrillTab;

:------------- Formula dodajaca pozycje do _tab
: _add2tab(_tab, TREE, NAZWA, T_PLAN, T_REAL, VALUE, ROZ, TABELA, TAB_REF, WARIANT);
_add2tab:="
   __:=1;
   {| _a
   |! blank(1);
      __+=1;    TREE:={? _>=__ & type_of(_[__])=1 || _[__] || 0  ?};
      __+=1;   NAZWA:={? _>=__ & type_of(_[__])=2 || _[__] || '' ?};
      __+=1;  T_PLAN:={? _>=__ & type_of(_[__])=1 || _[__] || 0  ?};
      __+=1;  T_REAL:={? _>=__ & type_of(_[__])=1 || _[__] || 0  ?};
      __+=1;   VALUE:={? _>=__ & type_of(_[__])=1 || _[__] || 0  ?};

      __+=1;     ROZ:={? _>=__ & type_of(_[__])=1 || _[__] || 0  ?};
      __+=1;  TABELA:={? _>=__ & type_of(_[__])=2 || _[__] || '' ?};
      __+=1; TAB_REF:={? _>=__ & type_of(_[__])=2 || _[__] || '' ?};
      __+=1; WARIANT:={? _>=__ & type_of(_[__])=2 || _[__] || '' ?};
      add()
   |}
";
:-----------------------

_tab.fld_attr(,2);
_wer:=_tab.mk_sel(,'P',0,'drill_table',1,1,,1);
_tab.win_sel(_wer);
{? exec('drill_pump','%drill_kalk_zl',_tab ,_wariant, _add2tab)
|| _timedok:=exec('get','#params',500604,1);
   _tab.win_fld(_wer,,'NAZWA',,,30,,,' ');
   _tab.win_fld(_wer,,'T_PLAN',,,12,_timedok);
   _tab.win_fld(_wer,,'T_REAL',,,12,_timedok);
   _tab.win_fld(_wer,,'VALUE' ,,,14,4);

   _fb:=$("exec('zwrw_all','#tree',cur_tab(1,1),'TREE','"+_wer+"')");
   _tab.win_act(_wer,0,'Formuła','Zwiń/roz&wiń'@@,,,,_fb,,,,,'W');

   _tab.win_fml(_wer,,'NAZWA',,'ICON_BEFORE',"
      {? cur_tab(1,1).TREE=0
      ||
         {? cur_tab(1,1).tr_state()=1
         || 'xwin16.png:75'
         || 'xwin16.png:74'
         ?}
      ||
         {? cur_tab(1,1).TABELA='OKR'
         || 'xwin16.png:118'
         |? cur_tab(1,1).TABELA='P' | cur_tab(1,1).TABELA='T' | cur_tab(1,1).TABELA='_sqlt'
         || 'xwin16.png:100'
         |? cur_tab(1,1).TABELA='ZLG_' | cur_tab(1,1).TABELA='_dt'
         || 'xwin16.png:33'
         |? cur_tab(1,1).TABELA='_WRKPLC'
         || 'xwin16.png:31'
         || 'xwin16.png:32'
         ?}
      ?}
   ");
   _title:='Szczegóły dotyczące '+{? _wariant='S'
                                  || 'stanowisk uwzględnionych'
                                  || 'robocizny uwzględnionej'
                                  ?}+' w '+{? VAR.A01='0'
                                           || 'kalkulacji wstępnej'
                                           || 'analizie'
                                           ?}+' zlecenia.';

   {? type_of(_secTab)
    & type_of(_secWin)
   || _secTab.first();
      _tab.first();
      _wgrp:=_tab.grp_make(_title,,'#drillrobgroup');
      _tab.grp_sel(_wgrp,_tab,_wer,'Zbiorczo w okresach'@,,,,,,,,,'maximized');
      _tab.grp_sel(_wgrp,_secTab,_secWin,_secTit,,,,,,,,,'maximized');
      _tab.win_sel(_wgrp);
      ~~

   || _tab.hdr_sel(_title);
      ~~
   ?};

   _tab.select();

   ~~
?};
VAR_DEL.delete('DrillTab');
~~


\drill_pump
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JM [2009]
:: OPIS: Akcja dla rozwijania pozycji w tabeli drill
::   WE: _a - wskazanie na tabelę drill
::       _b - wariant 'drylowania'
::       _c - formula dodająca dane do tabeli _a
::   WY: ---
::  OLD: \drill_pump/zlecanal.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_war:=_b;
: _add2tab(_tab, TREE, NAZWA, T_PLAN, T_REAL, VALUE, ROZ, TABELA, TAB_REF, WARIANT);
_add2tab:=_c;

_tabZL:=tab_tmp(1,'REF','STRING[16]','');
_tabZL.REF:=$ANZH.ZLEC;
_tabZL.add();
{? ANZH.ZLEC().RODZAJ='Z'
|| ZL.cntx_psh();
   ZL.index('NRNZL');
   ZL.prefix(ANZH.ZLEC().UNRZL);
   {? ZL.first()
   || {!
      |?
         _tabZL.REF:=$ZL.ref();
         _tabZL.add();
         ZL.next()
      !}
   ?};
   ZL.cntx_pop();
   ~~
?};

_sum2all:="{!_ii:=1..obj_len(_a) |! _a[_ii]+=_b !}";
:: --- ROBOCIZNA
{? _war='R'
|| _sqlt:=sql(''+"
                   SELECT
                     gd.O           AS OKR_REF,
                     o.ROK          AS OKR_ROK,
                     o.MC           AS OKR_MC,
                     o.NAZ          AS OKR_NAZ,
                     gd.DT          AS DT,
                     gd.B           AS B,

                     gd.P           AS PDREF,
                     gb.P           AS PBREF,
                     NVL(osd.NAZWISKO, osb.NAZWISKO) || ' ' || NVL(osd.PIERWSZE, osb.PIERWSZE) AS PRAC,

                     gd.TIME        AS DTIME,
                     gd.TIME_P      AS DTIME_P,
                     gd.KW          AS DKW,

                     gb.TIME        AS BTIME,
                     gb.TIME_P      AS BTIME_P,
                     gb.KW          AS BKW

                   FROM @ZLGD AS gd
                     LEFT OUTER JOIN @P AS pd       USING(gd.P, pd.REFERENCE)
                     LEFT OUTER JOIN OSOBA AS osd   USING(pd.OSOBA, osd.REFERENCE)

                     LEFT OUTER JOIN @ZLGB AS gb    USING(gb.ZLGD, gd.REFERENCE)
                     LEFT OUTER JOIN @P AS pb       USING(gb.P, pb.REFERENCE)
                     LEFT OUTER JOIN OSOBA AS osb   USING(pb.OSOBA, osb.REFERENCE)

                     LEFT OUTER JOIN OKR AS o       USING(gd.O, o.REFERENCE)

                     join ZGP using(gd.ZGP,ZGP.REFERENCE)

                   WHERE
                     gd.ZL IN (SELECT tab.REF FROM :_a tab) AND ZGP.WEW='T'
                 ",
             _tabZL
             );

:     koszt poszczegolnych poziomow
      _cst:=obj_new(3); {!_ii:=1..3 |! _cst[_ii]:=0 !};
:     czas rzeczywisty
      _trz:=obj_new(3); {!_ii:=1..3 |! _trz[_ii]:=0 !};
:     czas planowany
      _tpl:=obj_new(3); {!_ii:=1..3 |! _tpl[_ii]:=0 !};
:     1 - calkowite
:     2 - okresu
:     3-  pracownik

   {? type_of(_sqlt)<7 || return(0) ?};
   _wariant:='ROP';
:   _tab.hdr_sel('Koszt robocizny');
   {? _sqlt.first()
:: -- OKRES -> PRACOWNIK
   || _add2tab(_tab,0,'Okres -> Pracownik'@,,,,1,,,_wariant);
      _parent:=#_tab.ref();
      _sqlt.index( _sqlt.ndx_tmp(,1,'OKR_ROK',,
                                   ,'OKR_MC' ,,
                                   ,'PRAC'   ,,
                                   ,'DT'     ,,
                                )
                 );
      _sqlt.first();
      _tab.cntx_psh();

      _okres_p:='';
      _okres_r:=0;

      _prac_p:='';
      _prac_c:='';
      _prac_r:=0;

      _cst[1]:=0;
      _trz[1]:=0;
      _tpl[1]:=0;
:     istnieje nastepny
      _next:=1;

::         najpierw okres
      {!
      |? _okres_c:=_sqlt.OKR_REF;
         _add2tab(_tab, _parent, form(_sqlt.OKR_ROK,,,'99')+'/'+form(_sqlt.OKR_MC,-2,,'99')+' ('+_sqlt.OKR_NAZ+')',,,,,'OKR',_okres_c,_wariant);
         _okres_r:=#_tab.ref();
         _cst[2]:=0;
         _trz[2]:=0;
         _tpl[2]:=0;
         _tab.cntx_psh();

::         teraz pracownik
         {!
         |? _bd:={? _sqlt.PBREF<>'' || 'B' || 'D' ?};
            _prac_c:={? _bd='B' || _sqlt.PBREF || _sqlt.PDREF ?};
            _add2tab(_tab, _okres_r,  _sqlt.PRAC,,,,, 'T', _prac_c, _wariant);
            _prac_r:=#_tab.ref();
            _cst[3]:=0;
            _trz[3]:=0;
            _tpl[3]:=0;
            _tab.cntx_psh();

::             teraz daty
            {!
            |? _bd:={? _sqlt.PBREF<>'' || 'B' || 'D' ?};
               _add2tab(_tab
                       ,_prac_r
                       ,form(_sqlt.DT)
                       ,{? _bd='B' || _sqlt.BTIME_P || _sqlt.DTIME_P ?}
                       ,{? _bd='B' || _sqlt.BTIME   || _sqlt.DTIME   ?}
                       ,{? _bd='B' || _sqlt.BKW     || _sqlt.DKW     ?}
                       ,0,'ZLG_',,_wariant);
               _sum2all(_cst,_tab.VALUE );
               _sum2all(_trz,_tab.T_REAL);
               _sum2all(_tpl,_tab.T_PLAN);

               _next:=_sqlt.next();
               _next & {? _bd='B' || _sqlt.PBREF || _sqlt.PDREF ?}=_prac_c & _sqlt.OKR_REF=_okres_c
            !};
::             wracamy do pracownika
            _tab.cntx_pop();
            _tab.VALUE:=_cst[3];
            _tab.T_REAL:=_trz[3];
            _tab.T_PLAN:=_tpl[3];
            _tab.put();
            _next & (_sqlt.OKR_REF=_okres_c)
         !};
         _tab.cntx_pop();
         _tab.VALUE:=_cst[2];
         _tab.T_REAL:=_trz[2];
         _tab.T_PLAN:=_tpl[2];
         _tab.put();
         _next
      !};
      _tab.cntx_pop();
      {? _cst[1] & _tab.TREE=0
      || _tab.VALUE:=_cst[1];
         _tab.T_REAL:=_trz[1];
         _tab.T_PLAN:=_tpl[1];
         _tab.put()
      ?};

:: -- PRACOWNIK -> OKRES
      _wariant:='RPO';
      _add2tab(_tab,,'Pracownik -> Okres'@,,,,1,,,_wariant);
      _parent:=#_tab.ref();
      _sqlt.index( _sqlt.ndx_tmp(,1,'PRAC'  ,,
                                   ,'OKR_ROK',,
                                   ,'OKR_MC' ,,
                                   ,'DT'     ,,
                                )
                 );
      _sqlt.first();
      _tab.cntx_psh();

      _okres_p:='';
      _okres_r:=0;

      _prac_p:='';
      _prac_c:='';
      _prac_r:=0;

      _cst[1]:=0;
      _trz[1]:=0;
      _tpl[1]:=0;

      _next:=0;

::    najpierw pracownik
      {!
      |? _bd:={? _sqlt.PBREF<>'' || 'B' || 'D' ?};
         _prac_c:={? _bd='B' || _sqlt.PBREF || _sqlt.PDREF ?};
         _add2tab(_tab, _parent, _sqlt.PRAC,,,,, 'P', _prac_c, _wariant);
         _prac_r:=#_tab.ref();
         _cst[3]:=0;
         _trz[3]:=0;
         _tpl[3]:=0;
         _tab.cntx_psh();

::       teraz okres
         {!
         |? _okres_c:=_sqlt.OKR_REF;
            _add2tab(_tab, _prac_r, form(_sqlt.OKR_ROK,,,'99')+'/'+form(_sqlt.OKR_MC,-2,,'99')+' ('+_sqlt.OKR_NAZ+')',,,,,'OKR',_okres_c,_wariant);
            _okres_r:=#_tab.ref();
            _cst[2]:=0;
            _trz[2]:=0;
            _tpl[2]:=0;
            _tab.cntx_psh();

::              teraz daty
            {!
            |? _bd:={? _sqlt.PBREF<>'' || 'B' || 'D' ?};
               _add2tab(_tab
                       ,_okres_r
                       ,form(_sqlt.DT)
                       ,{?_bd='B'||_sqlt.BTIME_P||_sqlt.DTIME_P?}
                       ,{?_bd='B'||_sqlt.BTIME  ||_sqlt.DTIME  ?}
                       ,{?_bd='B'||_sqlt.BKW    ||_sqlt.DKW    ?}
                       ,0, 'ZLG_', ,_wariant);
               _sum2all(_cst,_tab.VALUE );
               _sum2all(_trz,_tab.T_REAL);
               _sum2all(_tpl,_tab.T_PLAN);
               _next:=_sqlt.next();
               _next & {?_bd='B'||_sqlt.PBREF||_sqlt.PDREF?}=_prac_c & _sqlt.OKR_REF=_okres_c
            !};
::          wracamy do okresu
            _tab.cntx_pop();
            _tab.VALUE:=_cst[2];
            _tab.T_REAL:=_trz[2];
            _tab.T_PLAN:=_tpl[2];
            _tab.put();

            _next & ({? _bd='B' || _sqlt.PBREF || _sqlt.PDREF ?}=_prac_c)
         !};
         _tab.cntx_pop();
         _tab.VALUE:=_cst[3];
         _tab.T_REAL:=_trz[3];
         _tab.T_PLAN:=_tpl[3];
         _tab.put();
         _next
      !};
      _tab.cntx_pop();
      {? _cst[1] & _tab.TREE=0
      || _tab.VALUE:=_cst[1];
         _tab.T_REAL:=_trz[1];
         _tab.T_PLAN:=_tpl[1];
         _tab.put()
      ?};
      1
   || 0
   ?}

:: --- STANOWISKA -------------------------------------------------------------
|? _war='S'
|| _sqlt:=sql(''+"
                   SELECT
                     gd.REFERENCE               AS REF,
                     gd.O                       AS OKR_REF,
                     o.ROK                      AS OKR_ROK,
                     o.MC                       AS OKR_MC,
                     o.NAZ                      AS OKR_NAZ,
                     gd.DT                      AS DT,
                     gd.P                       AS PDREF,
                     gb.P                       AS PBREF,

                     NVL(osd.NAZWISKO, osb.NAZWISKO) || ' ' || NVL(osd.PIERWSZE, osb.PIERWSZE)  AS PRAC,
                     NVL(gd.TIME,gb.TIME)       AS TIME,
                     NVL(gd.TIME_P,gb.TIME_P)   AS TIME_P,

                     gb.IL / NVL(zgp.ILOSC,1)*zgp.MTIME     AS WRK_TIME,
                     topr.PLACE                             AS WRK_REF,
                     topr.GRUPA                             AS ZBR_REF,
                     topr.TWRKPLG                           AS ZPO_REF,
                     ttwr.KOD || ' ' || ttwr.NA             AS WRK_NA,
                     ttwz.SYMBOL || ' ' || ttwz.NAZWA       AS ZBR_NA,
                     tzpo.KOD_ || ' ' || tzpo.NAZ_          AS ZPO_NA,

                     ttwr.KH                                AS WRK_KH,
                     plct.KH                                AS ZPO_KH

                   FROM @ZLGD AS gd
                     LEFT OUTER JOIN @P AS pd       USING(gd.P, pd.REFERENCE)
                     LEFT OUTER JOIN OSOBA AS osd   USING(pd.OSOBA, osd.REFERENCE)

                     LEFT OUTER JOIN @ZLGB AS gb    USING(gb.ZLGD, gd.REFERENCE)
                     LEFT OUTER JOIN @P AS pb       USING(gb.P, pb.REFERENCE)
                     LEFT OUTER JOIN OSOBA AS osb   USING(pb.OSOBA, osb.REFERENCE)

                     LEFT OUTER JOIN OKR AS o       USING(gd.O, o.REFERENCE)

                     LEFT OUTER JOIN ZGH as zgh     USING(gd.ZGH, zgh.REFERENCE)
                     LEFT OUTER JOIN ZGP AS zgp     USING(gd.ZGP, zgp.REFERENCE)

                     LEFT OUTER JOIN TOPER AS topr     USING(zgp.TOPER, topr.REFERENCE)

                     LEFT OUTER JOIN TWRKPLC AS ttwr   USING(topr.PLACE, ttwr.REFERENCE)

                     LEFT OUTER JOIN TWRKZBR AS ttwz   USING(topr.GRUPA, ttwz.REFERENCE)
                     LEFT OUTER JOIN TWRKZPO AS tzpo   USING(topr.TWRKPLG, tzpo.REFERENCE)
                     LEFT OUTER JOIN TWRKPLC AS plct   USING(tzpo.ELEMENT, plct.REFERENCE)

                   WHERE
                     gd.ZL IN (SELECT tab.REF FROM :_a tab) and ZGP.WEW='T'
                 ",
             _tabZL
             );
:     koszt poszczegolnych poziomow
      _cst:=obj_new(4); {! _ii:=1..4 |! _cst[_ii]:=0 !};
:     czas rzeczywisty
      _trz:=obj_new(4); {! _ii:=1..4 |! _trz[_ii]:=0 !};
:     czas planowany
      _tpl:=obj_new(4); {! _ii:=1..4 |! _tpl[_ii]:=0 !};
:     1 - calkowite
:     2 - okresu
:     3-  pracownik

   {? type_of(_sqlt)<7 || return(0) ?};
:   _tab.hdr_sel('Koszt pracy stanowisk');

   {? _sqlt.first()
::    OKRES -> STANOWISKO -> DATA -> PRACOWNIK
   || _wariant:='SOSDP';
      _add2tab(_tab,0,'Okres -> Stanowisko -> Pracownik'@,,,,1,,,_wariant);
      _parent:=#_tab.ref();

      _cst[1]:=0;
      _trz[1]:=0;
      _tpl[1]:=0;
      _next:=0;

      _sqlt.index( _sqlt.ndx_tmp(,1,'OKR_ROK',,
                                   ,'OKR_MC' ,,
                                   ,'WRK_NA' ,,
                                   ,'ZPO_NA' ,,
                                   ,'DT'     ,,
                                   ,'PRAC'   ,,
                                )
                 );
      _sqlt.first();
      _tab.cntx_psh();
::    okresy
      {!
      |? _okres_c:=_sqlt.OKR_REF;
         _add2tab(_tab, _parent, form(_sqlt.OKR_ROK,,,'99')+'/'+form(_sqlt.OKR_MC,-2,,'99')+' ('+_sqlt.OKR_NAZ+')',,,,1, 'OKR', _okres_c, _wariant);
         _okres_r:=#_tab.ref();
         _cst[2]:=0;
         _trz[2]:=0;
         _tpl[2]:=0;
         _tab.cntx_psh();
::       stanowiska
         {!
         |? _wrkp_c:=_sqlt.WRK_REF;
            _wrkp_z:=_sqlt.ZPO_REF;
            _plac_na:='';
            _plac_ref:='';
            {? _sqlt.WRK_NA<>''
            || _plac_na:=_sqlt.WRK_NA
            |? _sqlt.ZPO_NA<>''
            || _plac_na:=_sqlt.ZPO_NA
            ?};
            {? _sqlt.WRK_REF<>''
            || _plac_ref:=_sqlt.WRK_REF
            |? _sqlt.ZPO_REF<>''
            || _plac_ref:=_sqlt.ZPO_REF
            ?};

            _add2tab(_tab, _okres_r,_plac_na,,,,, '_WRKPLC', _plac_ref, _wariant);
            _wrkp_r:=#_tab.ref();
            _cst[3]:=0;
            _trz[3]:=0;
            _tpl[3]:=0;
            _tab.cntx_psh();
::          daty
            {!
            |? _date_c:=_sqlt.DT;
               _add2tab(_tab, _wrkp_r, form(_sqlt.DT),,,,, '_dt',,_wariant);
               _date_r:=#_tab.ref();
               _cst[4]:=0;
               _trz[4]:=0;
               _tpl[4]:=0;
               _tab.cntx_psh();
::             pracownicy
               {!
               |?
                  _koszt:=0;
                  {? _sqlt.WRK_KH>0
                  || _koszt:=_sqlt.WRK_KH
                  |? _sqlt.ZPO_KH>0
                  || _koszt:=_sqlt.ZPO_KH
                  ?};
                  _add2tab(_tab
                          ,_date_r
                          ,_sqlt.PRAC
                          ,_sqlt.WRK_TIME
                          ,_sqlt.TIME_P
                          ,_sqlt.WRK_TIME * _koszt
                          ,
                          ,'_sqlt'
                          ,_sqlt.REF
                          ,_wariant
                          );
                  _sum2all(_cst,_tab.VALUE );
                  _sum2all(_trz,_tab.T_REAL);
                  _sum2all(_tpl,_tab.T_PLAN);
                  _next:=_sqlt.next();
                  _next & _sqlt.OKR_REF=_okres_c & (_sqlt.WRK_REF=_wrkp_c & _sqlt.ZPO_REF=_wrkp_z) & _sqlt.DT=_date_c
               !};
               _tab.cntx_pop();
               {? _cst[4] & _tab.TABELA='_dt'
               || _tab.VALUE:=_cst[4];
                  _tab.T_REAL:=_trz[4];
                  _tab.T_PLAN:=_tpl[4];
                  _tab.put()
               ?};
               _next & _sqlt.OKR_REF=_okres_c & (_sqlt.WRK_REF=_wrkp_c & _sqlt.ZPO_REF=_wrkp_z)
            !};
            _tab.cntx_pop();
            {? _cst[3] & _tab.TABELA='_WRKPLC'
            || _tab.VALUE:=_cst[3];
               _tab.T_REAL:=_trz[3];
               _tab.T_PLAN:=_tpl[3];
               _tab.put()
            ?};
            _next & _sqlt.OKR_REF=_okres_c

         !};
         _tab.cntx_pop();
         {? _cst[2] & _tab.TABELA='OKR'
         || _tab.VALUE:=_cst[2];
            _tab.T_REAL:=_trz[2];
            _tab.T_PLAN:=_tpl[2];
            _tab.put()
         ?};
         _next
      !};
      _tab.cntx_pop();
      {? _cst[1] & _tab.TREE=0
      || _tab.VALUE:=_cst[1];
         _tab.T_REAL:=_trz[1];
         _tab.T_PLAN:=_tpl[1];
         _tab.put()
      ?};

::    STANOWISKO -> OKRES -> DATA -> PRACOWNIK
      _wariant:='SSODP';
      _add2tab(_tab,0,'Stanowisko -> Okres -> Pracownik'@,,,,1,,,_wariant);
      _parent:=#_tab.ref();

      _cst[1]:=0;
      _trz[1]:=0;
      _tpl[1]:=0;

      _next:=0;

      _sqlt.index( _sqlt.ndx_tmp(,1,'WRK_NA' ,,
                                   ,'ZPO_NA' ,,
                                   ,'OKR_ROK',,
                                   ,'OKR_MC' ,,
                                   ,'DT'     ,,
                                   ,'PRAC'   ,,
                                )
                 );
      _sqlt.first();
      _tab.cntx_psh();
::    stanowiska
      {!
      |? _wrkp_c:=_sqlt.WRK_REF;
         _wrkp_z:=_sqlt.ZPO_REF;
         _plac_na:='';
         _plac_ref:='';
         {? _sqlt.WRK_NA<>''
         || _plac_na:=_sqlt.WRK_NA
         |? _sqlt.ZPO_NA<>''
         || _plac_na:=_sqlt.ZPO_NA
         ?};
         {? _sqlt.WRK_REF<>''
         || _plac_ref:=_sqlt.WRK_REF
         |? _sqlt.ZPO_REF<>''
         || _plac_ref:=_sqlt.ZPO_REF
         ?};

         _add2tab(_tab,_parent,_plac_na,,,,,'_WRKPLC',_plac_ref,_wariant);
         _wrkp_r:=#_tab.ref();
         _cst[3]:=0;
         _trz[3]:=0;
         _tpl[3]:=0;
         _tab.cntx_psh();
::       okresy
         {!
         |? _okres_c:=_sqlt.OKR_REF;
            _add2tab(_tab, _wrkp_r, form(_sqlt.OKR_ROK,,,'99')+'/'+form(_sqlt.OKR_MC,-2,,'99')+' ('+_sqlt.OKR_NAZ+')',,,,1, 'OKR', _okres_c, _wariant);
            _okres_r:=#_tab.ref();
            _cst[2]:=0;
            _trz[2]:=0;
            _tpl[2]:=0;
            _tab.cntx_psh();
::          daty
            {!
            |? _date_c:=_sqlt.DT;
               _add2tab(_tab, _okres_r, form(_sqlt.DT),,,,, '_dt',,_wariant);
               _date_r:=#_tab.ref();
               _cst[4]:=0;
               _trz[4]:=0;
               _tpl[4]:=0;
               _tab.cntx_psh();
::             pracownicy
               {!
               |?
                  _koszt:=0;
                  {? _sqlt.WRK_KH>0
                  || _koszt:=_sqlt.WRK_KH
                  |? _sqlt.ZPO_KH>0
                  || _koszt:=_sqlt.ZPO_KH
                  ?};
                  _add2tab(_tab
                          ,_date_r
                          ,_sqlt.PRAC
                          ,_sqlt.WRK_TIME
                          ,_sqlt.TIME_P
                          ,_sqlt.WRK_TIME * _koszt
                          ,
                          ,'_sqlt'
                          ,_sqlt.REF
                          ,_wariant
                          );
                  _sum2all(_cst,_tab.VALUE );
                  _sum2all(_trz,_tab.T_REAL);
                  _sum2all(_tpl,_tab.T_PLAN);
                  _next:=_sqlt.next();
                  _next & _sqlt.OKR_REF=_okres_c & (_sqlt.WRK_REF=_wrkp_c & _sqlt.ZPO_REF=_wrkp_z) & _sqlt.DT=_date_c
               !};
               _tab.cntx_pop();
               {? _cst[4] & _tab.TABELA='_dt'
               || _tab.VALUE:=_cst[4];
                  _tab.T_REAL:=_trz[4];
                  _tab.T_PLAN:=_tpl[4];
                  _tab.put()
               ?};
               _next & _sqlt.OKR_REF=_okres_c & (_sqlt.WRK_REF=_wrkp_c & _sqlt.ZPO_REF=_wrkp_z)
            !};
            _tab.cntx_pop();
            {? _cst[2] & _tab.TABELA='OKR'
            || _tab.VALUE:=_cst[2];
               _tab.T_REAL:=_trz[2];
               _tab.T_PLAN:=_tpl[2];
               _tab.put()
            ?};
            _next & _sqlt.WRK_REF=_wrkp_c

         !};
         _tab.cntx_pop();
         {? _cst[3] & _tab.TABELA='_WRKPLC'
         || _tab.VALUE:=_cst[3];
            _tab.T_REAL:=_trz[3];
            _tab.T_PLAN:=_tpl[3];
            _tab.put()
         ?};
         _next
      !};
      _tab.cntx_pop();
      {? _cst[1] & _tab.TREE=0
      || _tab.VALUE:=_cst[1];
         _tab.T_REAL:=_trz[1];
         _tab.T_PLAN:=_tpl[1];
         _tab.put()
      ?};
      1
   || 0
   ?}
|| 0
?}

:Sign Version 2.0 jowisz:1048 2023/06/23 14:15:44 0dd4cb2daf8175f36bf0ade4a95953411eeec9bd4315c766b20cf959ed33af8ccde898cbb25f7f60f34fad58261be1e7448abb676913aa4ac644ccdf18ad5234a07e4e5593947c3e218a625bde7f546f1fcc0c15683bb93aa04db6ca61ccd2eb0466dd23c0a6fb39f96313a38da1c397da3f1a6aa5eb2eb9548ac1fc72018b38
