:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %personel.fml
:: Utworzony: 2016-06-20
:: Autor: AC
::======================================================================================================================
:: Zawartość: Formuły do obsługi czynności manualnych w procesach personelowych
::======================================================================================================================

\opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZWO, PER_ZA1) w zadaniach ręcznych - opis czynności ToDo
::       UWAGA: Formuła działająca poprawnie do wersji 20.14. W wersji 20.42 i nowszych należy uwzględniać mechanizm
::              tłumaczeń i dla każdej czynności stworzyć oddzielną indywidualną formułę zgodnie z regułami,
::              patrz np. formuła \opis_per_zwo_ob/%personel.fml
::   WE: _a - [STRING] - Formuła na opis ToDo
::----------------------------------------------------------------------------------------------------------------------
_a+' '+exec('record','#to_string',params_get().mp.load(exec('kind_in','#b_port')).p01)


\opis_per_zwo_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_ZWO w zadaniu ręcznym "Dostarczenie obiegówki" - opis czynności ToDo
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual','%personel',params_get().mp);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Akceptacja dostarczonej i podpisanej obiegówki %1 %2: Paszport - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Akceptacja dostarczonej i podpisanej obiegówki %1 %2: PESEL - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Akceptacja dostarczonej i podpisanej obiegówki %1 %2: Data urodzenia - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Akceptacja dostarczonej i podpisanej obiegówki'@@
?}


\opis_per_zwo_obi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_ZWO w zadaniu ręcznym "Wydanie obiegówki pracownikowi" - opis czynności ToDo
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual','%personel',params_get().mp);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Wydanie obiegówki pracownikowi %1 %2: Paszport - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Wydanie obiegówki pracownikowi %1 %2: PESEL - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Wydanie obiegówki pracownikowi %1 %2: Data urodzenia - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Wydanie obiegówki pracownikowi'@@
?}


\opis_per_zwo_mail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_ZWO w zadaniu ręcznym "Temat maila" - opis czynności ToDo
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Wysyła do maila temat z nawiskiem i imieniem zwolnionego pracownika'@@


\getParInManuall
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Pobranie parametru wejściowego dla czynności ręcznej
::   WE:
::   WY: wartość parametru
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get().mp.load(exec('kind_in','#b_port'));
_ref:={? var_pres('p01',_par) & _par.p01<>~~
      || _par.p01
      |? var_pres('p02',_par) & _par.p02<>~~
      || _par.p02
      || ~~
      ?};
_ref


\gl_bhp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZA3) w zadaniach ręcznych - formuła główna Szkolenia BHP
::----------------------------------------------------------------------------------------------------------------------
_prac:=exec('record','#to_string',params_get().mp.load(exec('kind_in','#b_port')).p01);
_opis:='Czy zaświadczenie o odbyciu szkoleń BHP zostało dostarczone przez pracownika %1?'@ [_prac]

\gl_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZWO) w zadaniach ręcznych, formuła główna - Przekazanie
::       (dostarczenie przez pracownika)
::----------------------------------------------------------------------------------------------------------------------
_ref:=params_exec('getParInManuall','%personel');
_prac:=exec('record','#to_string',_ref);
_opis:='Czy podpisana obiegówka została dostarczona przez pracownika %1?'@ [_prac];
_opis


\gl_obi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZWO) w zadaniach ręcznych, formuła główna - Wydanie obiegówki
::       pracownikowi
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_ref:=params_exec('getParInManuall','%personel');
_prac:=exec('record','#to_string',_ref);
_opis:='Czy wydano obiegówkę pracownikowi %1?'@ [_prac];
_opis


\gl_aneks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_PRZ) - formuła główna Dostarczenie podpisanego aneksu umowy
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_prac:=exec('record','#to_string',params_get().mp.load(exec('kind_in','#b_port')).p01);
_opis:='Czy pracownik %1 dostarczył podpisany aneks do umowy?'@ [_prac];
_opis


\gl_lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach - formuła główna Weryfikacja listy płac
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
_naz:=exec('FindAndGet','#table',O,_par,,'LT',0);
_opis:='Czy zweryfikowano listę %1?'@ [_naz];
_opis


\gl_wer_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZA3) - formuła główna Weryfikacja umowy
::----------------------------------------------------------------------------------------------------------------------
_prac:=exec('record','#to_string',params_get().mp.load(exec('kind_in','#b_port')).p01);
_opis:='Czy zaakceptowano umowę pracownika %1?'@ [_prac];
_opis


\gl_umowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZA1)- formuła główna Dostarczenia dokumentu umowy przez pracownika
::
::----------------------------------------------------------------------------------------------------------------------
_prac:=exec('record','#to_string',params_get().mp.load(exec('kind_in','#b_port')).p01);
_opis:='Czy Pan/Pani %1 dostarczył/a podpisany dokument umowy o pracę?'@ [_prac];
_opis


\e_mail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_WPU_WWW, PER_WPR_WWW) - formuła wyznaczająca e-mail użytkownika
::       składającego plan/wniosek urlopowy
::   WE: _a - tabela, musi posiadać pole P().OSOBA
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
_osoba:=exec('FindAndGet','#table',_a,params_get().mp.load(exec('kind_in','#b_port')).p01,,'P().OSOBA',null());
P.cntx_pop();
_user:=exec('osoba2user','users',_osoba);
exec('FindAndGet','#table',USERS,_user,,'EMAIL','')


\tytul_nwu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_WPU_WWW) - formuła wyznaczająca tytuł maila o akceptacji/odrzuceniu
::       wniosku urlopowego
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_okres:=exec('FindAndGet','#table',NWU,_in.p01,,"' '+'od dnia %1 do dnia %2'[$OD,$DO]",'');
_status:={? var_pres('p04',_in)=type_of('') & _in.p04<>'' || _in.p04 || _in.p02 ?};
{? _status='T'
|| 'Wniosek urlopowy %1 został zaakceptowany przez przełożonego'@ [_okres]
|? _status='W'
|| 'Wycofany wniosek urlopowy %1 został zaakceptowany przez przełożonego'@ [_okres]
|? _status='N'
|| 'Wniosek urlopowy %1 został odrzucony przez przełożonego'@ [_okres]
|? _status='O'
|| 'Wniosek urlopowy %1 został odrzucony przez kadry\n\nPowód odrzucenia:\n%2'@ [_okres,_in.p03]
|| 'Sprawdź wniosek urlopowy %1 '@ [_okres]
?}


\per_prac_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Formuła wyznaczająca e-mail pracownika
::       Wykorzystywana w procesie obiegu wniosku PER_ODBP_WWW - Polecenie odbioru nadgodzin
::       Wykorzystywana w procesie obiegu wniosku PER_PPSF_WWW - Wniosek o pracę poza siedzibą firmy
::       [_a] [STRING] - akronim pola z wniosku, w którym przechowywany jest ref pracownika (domyślnie 'ET_PRAC')
::----------------------------------------------------------------------------------------------------------------------
_pole:={? var_pres('_a')=type_of('') || _a || 'ET_PRAC' ?};
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_edokum:=exec('FindAndGet','#table',EDOKUM,_in.p01,,,null());

_email:='';
ETYPY.cntx_psh();
EDOK_ATR.cntx_psh();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum)) & exec('open_edk_atr', 'obiegi', _edokum)
|| _p_ref_s:=exec('atr_get','form_ob',_edokum,_pole,'REF_SQL');
   _osoba:=exec('FindAndGet','#table',P,_p_ref_s,,"OSOBA",null());
   _user:=exec('osoba2user','users',_osoba);
   _email:=exec('FindAndGet','#table',USERS,_user,,'EMAIL','')
?};
EDOKUM.cntx_pop();
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
_email


\per_wniosek_tresc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Formuła wyznaczająca treść maila dotyczącego wniosku w obiegu
::       Wykorzystywana w procesie obiegu wniosku PER_ODBP_WWW - Polecenie odbioru nadgodzin
::       Wykorzystywana w procesie obiegu wniosku PER_NADP_WWW - Polecenie pracy w godzinach nadliczbowych
::       Wykorzystywana w procesie obiegu wniosku PER_PPSF_WWW - Wniosek o pracę poza siedzibą firmy
::       Wykorzystywana w procesie obiegu wniosku PER_PPSP_WWW - Polecenie pracy poza siedzibą firmy
::       [_a] [STRING] - akronim pola z wniosku, w którym przechowywany jest ref pracownika (domyślnie 'ET_PRAC')
::       [_b] [INTEGER]- czy sytuacja odrzucenia polecenia przez pracownika? 0/1, domyślnie 0
::----------------------------------------------------------------------------------------------------------------------
_pole:={? var_pres('_a')=type_of('') || _a || 'ET_PRAC' ?};
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_edokum:=exec('FindAndGet','#table',EDOKUM,_in.p01,,,null());
_pracO:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_result:='';
ETYPY.cntx_psh();
EDOK_ATR.cntx_psh();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum)) & exec('open_edk_atr', 'obiegi', _edokum)
|| _osoba:=exec('FindAndGet','#table',OSOBA,EDOKUM.DOSTAWCA,,"NAZWISKO+' '+PIERWSZE",'');
   _nazwa:=EDOKUM.TYP().NAZWA;
   _data:=EDOKUM.DATAW;
:: określenie dat odbioru - w zależności od liczby sekcji na wniosku
   _val:=_przyczyna:='';
   _nPpsf:=exec('nazwa_ppsf','obiegi');
   _nPpsp:=exec('nazwa_ppsp','obiegi');
   EDOK_ATR.index('REKKOLED');
   EDOK_ATR.prefix(_edokum);
   {? EDOK_ATR.first()
   || _p_ref_s:=exec('atr_get','form_ob',_edokum,_pole,'REF_SQL');
      _nr_t:=exec('FindAndGet','#table',P,_p_ref_s,,"T",'');
      _osoba_prac:=exec('FindAndGet','#table',P,_p_ref_s,,"OSOBA",null);
      _prac:=exec('FindAndGet','#table',OSOBA,_osoba_prac,,"NAZWISKO+' '+PIERWSZE",'');
      _pracT:='%1, Numer teczki - %2'@[_prac,_nr_t];
      _val:='<ul style="color:black; font-size:9pt;">';
      {!
      |? _tat_na:=EDOK_ATR.TAT().NA;

::       polecenie odbioru nadgodzin
         {? _nazwa=exec('nazwa_odb_p','obiegi') & _tat_na*'ODB_DATA_'
         || _ind:=#spli_str(_tat_na,'_')[3];
            {? _ind>0
            || _odb_data:=exec('atr_get','form_ob',_edokum,'ODB_DATA_%1'[$_ind]);
               _g_wnio:=exec('atr_get','form_ob',_edokum,'ODB_GODZ_WNIO_%1'[$_ind]);
               _val+='<li>Data odbioru: %1 - liczba wnioskowanych godzin odbioru: %2</li>'@[_odb_data,_g_wnio]
            ?}

::       polecenie pracy w godzinach nadliczbowych
         |? _nazwa=exec('nazwa_nadg_p','obiegi') & _tat_na*'DATA_'
         || _ind:=#spli_str(_tat_na,'_')[2];
            {? _ind>0
            || _nadg_data:=exec('atr_get','form_ob',_edokum,'DATA_%1'[$_ind]);
               _typ:=exec('atr_get','form_ob',_edokum,'TYP_DNIA_%1'[$_ind]);
               _przed:=exec('atr_get','form_ob',_edokum,'PRZED_%1'[$_ind],'REF_SQL')+1;
               _g_od_s:=exec('atr_get','form_ob',_edokum,'GODZ_OD_%1'[$_ind]);
               _g_do_s:=exec('atr_get','form_ob',_edokum,'GODZ_DO_%1'[$_ind]);
               _czas_s:=exec('atr_get','form_ob',_edokum,'CZAS_%1'[$_ind]);
               _kiedy:={? _przed='G'
                       || '%1 - %2'[_g_od_s,_g_do_s]
                       || {? _przed='T' || 'przed rozpoczęciem pracy'@ || 'po zakończeniu pracy'@ ?}
                       ?};
               _uzasadnienie:=exec('atr_get','form_ob',_edokum,'OPIS_%1'[$_ind]);
               {? exec('to_ti_dt','form_ob',_nadg_data,'D')>#0
               || _val+='<li>Data nadgodzin: %1 - liczba wnioskowanych nadgodzin: %2 (%3)<br>Uzasadnienie: %4</li>'@
                        [_nadg_data,_czas_s,_kiedy,_uzasadnienie]
               ?}
            ?}

::       wniosek o pracę poza siedzibą firmy
         |? (_nazwa=_nPpsf | _nazwa=_nPpsp) & _tat_na*'PPSF_OD'
         || _od:=exec('atr_get','form_ob',_edokum,'PPSF_OD');
            _do:=exec('atr_get','form_ob',_edokum,'PPSF_DO');
            _val+='<li>Wniosek od %1 do %2</li>'@[_od,_do]

         ?};
         EDOK_ATR.next()
      !};
      _val+='</ul>'
   ?};

   _czyOdrzPps:=(_nazwa=_nPpsf | (_nazwa=_nPpsp & _pracO));
   _osOdrz:='';
   {? _czyOdrzPps
   || EDOKOS.cntx_psh();
      {? EDOKUM.name()+2<>EDOKOS.name()+2
      || EDOKOS.use('skid_y'+(EDOKUM.name()+2))
      ?};
      EDOKOS.index('SZUK12');
      EDOKOS.prefix(_edokum,'A');
      {? EDOKOS.first()
      || USERS.cntx_psh();
         _osOdrz:=exec('FindAndGet','#table',OSOBA,EDOKOS.USERS().OSOBA,,"NAZWISKO+' '+PIERWSZE",'');
         USERS.cntx_pop();
         EDOKOS.memo_get(,'UW_DL');
         _przyczyna:='<p>%1:<br>%2<br>%3</p><br>'['Przyczyna odrzucenia'@,EDOKOS.UW_KR,EDOKOS.memo_txt(,,'UW_DL')]
      ?};
      EDOKOS.cntx_pop()
   ?};

   _result:=
      '<h3>%1 %10: %2</h3>'
      '<h4>%11 %3 %4 %5%12: %6</h4>'
      '<p>%7</p><br>%8<p>%9</p>'
      [  _nazwa,
         _pracT,
         {? _czyOdrzPps || $date() || $_data ?},
         {? _czyOdrzPps || 'odrzucono'@ || 'wprowadzono'@ ?},
         -_nazwa,
         {? _czyOdrzPps || _osOdrz || _osoba ?},
         _val,
         _przyczyna,
         {? _nazwa=_nPpsp & ~_pracO || 'Polecenie oczekuje na akceptację.'@ || '' ?},
         'dla pracownika'@,
         'W dniu'@,
         {? _nazwa=_nPpsp || {? _pracO || '' || ' - wnioskodawca'@ ?} || ' - osoba weryfikująca'@ ?}
      ]+
      '<p>'+'Ta wiadomość została wygenerowana automatycznie - prosimy na nią nie odpowiadać.'@+'</p>'
?};
EDOKUM.cntx_pop();
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
_result


\por_prac_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Formuła wyznaczająca e-mail pracownika
::       Wykorzystywana w procesie obiegu wniosku POR_ODBP_WWW - Polecenie odbioru nadgodzin
::       Wykorzystywana w procesie obiegu wniosku POR_NADP_WWW - Polecenie pracy w godzinach nadliczbowych
::       Wykorzystywana w procesie obiegu wniosku POR_PPSF_WWW - Wniosek o pracę poza siedzibą firmy
::       Wykorzystywana w procesie obiegu wniosku POR_PPSP_WWW - Polecenie pracy poza siedzibą firmy
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_edokum:=exec('FindAndGet','#table',EDOKUM,_in.p01,,,null());

_email:='';
ETYPY.cntx_psh();
EDOK_ATR.cntx_psh();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum)) & exec('open_edk_atr', 'obiegi', _edokum)
|| _p_ref_s:='';
   {? EDOKUM.TYP().W_PORTAL='T'
   || _p_ref_s:=exec('atr_get','portal_walidacja','PracownikIdERP');
      {? form(_p_ref_s)=''
      || _p_ref_s:=EDOKUM.OSOBAWWW
      ?}
   ?};
   {? +_p_ref_s
   || _osoba:=exec('FindAndGet','#table',P,_p_ref_s,,"OSOBA",null());
      _user:=exec('osoba2user','users',_osoba);
      _email:=exec('FindAndGet','#table',USERS,_user,,'EMAIL','')
   ?}
?};
EDOKUM.cntx_pop();
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
_email


\por_wniosek_tresc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Formuła wyznaczająca treść maila dotyczącego wniosku w obiegu - HR Portal
::       Wykorzystywana w procesie obiegu wniosku POR_ODBP_WWW - Polecenie odbioru nadgodzin
::       Wykorzystywana w procesie obiegu wniosku POR_NADP_WWW - Polecenie pracy w godzinach nadliczbowych
::       Wykorzystywana w procesie obiegu wniosku POR_PPSF_WWW - Wniosek o pracę poza siedzibą firmy
::       Wykorzystywana w procesie obiegu wniosku POR_PPSP_WWW - Polecenie pracy poza siedzibą firmy
::       [_a] [INTEGER]- czy sytuacja odrzucenia polecenia przez pracownika? 0/1, domyślnie 0
::----------------------------------------------------------------------------------------------------------------------
_pracO:={? var_pres('_a')=type_of(0)  || _a || 0         ?};

_in:=params_get().mp.load(exec('kind_in','#b_port'));
_edokum:=exec('FindAndGet','#table',EDOKUM,_in.p01,,,null());

_result:='';
ETYPY.cntx_psh();
EDOK_ATR.cntx_psh();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum)) & exec('open_edk_atr', 'obiegi', _edokum)
|| _osoba:=exec('FindAndGet','#table',OSOBA,EDOKUM.DOSTAWCA,,"NAZWISKO+' '+PIERWSZE",'');
   _nazwa:=EDOKUM.TYP().NAZWA;
   _id:=EDOKUM.TYP().ID_WP;
   _data:=EDOKUM.DATAW;
:: określenie dat odbioru - w zależności od liczby sekcji na wniosku
   _val:=_przyczyna:='';
   _nPpsf:=exec('nazwa_ppsf','obiegi');
   _nPpsp:=exec('nazwa_ppsp','obiegi');

   _id_odb_w:=exec('_odb','portal_walidacja').id;
   _id_odb_p:=exec('_odbp','portal_walidacja').id;
   _id_nadg_w:=exec('_nadg_w','portal_walidacja').id;
   _id_nadg_p:=exec('_nadg_p','portal_walidacja').id;

   EDOK_ATR.index('REKKOLED');
   EDOK_ATR.prefix(_edokum);
   {? EDOK_ATR.first()
   || _p_ref_s:=exec('atr_get','portal_walidacja','PracownikIdERP');
      {? form(_p_ref_s)=''
      || _p_ref_s:=EDOKUM.OSOBAWWW
      ?};
      _nr_t:=exec('FindAndGet','#table',P,_p_ref_s,,"T",'');
      _osoba_prac:=exec('FindAndGet','#table',P,_p_ref_s,,"OSOBA",null);
      _prac:=exec('FindAndGet','#table',OSOBA,_osoba_prac,,"NAZWISKO+' '+PIERWSZE",'');
      _pracT:='%1, Numer teczki - %2'@[_prac,_nr_t];
      _val:='<ul style="color:black; font-size:9pt;">';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getAtrMemo:="exec('atr_get','portal_walidacja',_a,'WAR_W')";

::    polecenie odbioru nadgodzin
      {? _id=_id_odb_p
      || _odb_data:=_getAtr('DataOdbioru');
         _g_wnio:=_getAtr('GodzinyWnioskowane');
         _kiedy:=_getAtr('OdbiorNadgodzin');
         _val+='<li>Data odbioru: %1 - liczba wnioskowanych godzin odbioru: %2 (%3)</li>'@[_odb_data,_g_wnio,_kiedy]

::    polecenie pracy w godzinach nadliczbowych
      |? _id=_id_nadg_p
      ||
         _nadg_data:=_getAtr('Data');
         _wystapienie:=_getAtr('WystapienieNadgodzin');
         _g_od_s:=_getAtr('GodzinaOd');
         _g_do_s:=_getAtr('GodzinaDo');
         _czas_s:=_getAtr('LiczbaNadgodzin');
         _kiedy:={? _wystapienie='Od - Do'
                 || '%1 - %2'[_g_od_s,_g_do_s]
                 || _wystapienie
                 ?};
         _uzasadnienie:=_getAtrMemo('Uzasadnienie');
         {? exec('to_ti_dt','form_ob',_nadg_data,'D')>#0
         || _val+='<li>Data nadgodzin: %1 - liczba wnioskowanych nadgodzin: %2 (%3)<br>Uzasadnienie: %4</li>'@
                  [_nadg_data,_czas_s,_kiedy,_uzasadnienie]
         ?}

::       wniosek o pracę poza siedzibą firmy
::      |? (_nazwa=_nPpsf | _nazwa=_nPpsp) & _tat_na*'PPSF_OD'
::      || _od:=exec('atr_get','form_ob',_edokum,'PPSF_OD');
::         _do:=exec('atr_get','form_ob',_edokum,'PPSF_DO');
::         _val+='<li>Wniosek od %1 do %2</li>'@[_od,_do]

      ?};
      _val+='</ul>'
   ?};

::   _czyOdrzPps:=(_nazwa=_nPpsf | (_nazwa=_nPpsp & _pracO));
   _czyOdrzPps:=0;
   _osOdrz:='';
::   {? _czyOdrzPps
::   || EDOKOS.cntx_psh();
::      {? EDOKUM.name()+2<>EDOKOS.name()+2
::      || EDOKOS.use('skid_y'+(EDOKUM.name()+2))
::      ?};
::      EDOKOS.index('SZUK12');
::      EDOKOS.prefix(_edokum,'A');
::      {? EDOKOS.first()
::      || USERS.cntx_psh();
::         _osOdrz:=exec('FindAndGet','#table',OSOBA,EDOKOS.USERS().OSOBA,,"NAZWISKO+' '+PIERWSZE",'');
::         USERS.cntx_pop();
::         EDOKOS.memo_get(,'UW_DL');
::         _przyczyna:='<p>%1:<br>%2<br>%3</p><br>'['Przyczyna odrzucenia'@,EDOKOS.UW_KR,EDOKOS.memo_txt(,,'UW_DL')]
::      ?};
::      EDOKOS.cntx_pop()
::   ?};

   _result:=
      '<h3>%1 %10: %2</h3>'
      '<h4>%11 %3 %4 %5%12: %6</h4>'
      '<p>%7</p><br>%8<p>%9</p>'
      [  _nazwa,
         _pracT,
         {? _czyOdrzPps || $date() || $_data ?},
         {? _czyOdrzPps || 'odrzucono'@ || 'wprowadzono'@ ?},
         -_nazwa,
         {? _czyOdrzPps || _osOdrz || _osoba ?},
         _val,
         _przyczyna,
         {? _nazwa=_nPpsp & ~_pracO || 'Polecenie oczekuje na akceptację.'@ || '' ?},
         'dla pracownika'@,
         'W dniu'@,
         {? _nazwa=_nPpsp || {? _pracO || '' || ' - wnioskodawca'@ ?} || ' - osoba weryfikująca'@ ?}
      ]+
      '<p>'+'Ta wiadomość została wygenerowana automatycznie - prosimy na nią nie odpowiadać.'@+'</p>'
?};
EDOKUM.cntx_pop();
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
_result


\opis_ube
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesach (np. PER_ZWO) w zadaniu ręcznym "Pytanie o dane ubezpieczeniowe" - opis czynności
::       ToDo
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual','%personel',params_get().mp);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Powrót do danych ubezpieczeniowych %1 %2: Paszport - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Powrót do danych ubezpieczeniowych %1 %2: PESEL - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Powrót do danych ubezpieczeniowych %1 %2: Data urodzenia - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Powrót do danych ubezpieczeniowych'@@
?}


\dane_ube
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZA1) - formuła główna przy nawrocie do danych \
::       ubezpieczeniowych - zgłoszenie do ZUS
::----------------------------------------------------------------------------------------------------------------------
_ref:=params_exec('getParInManuall','%personel');
_prac:=exec('record','#to_string',_ref);
_opis:='Zgłoszenie osoby %1 do ZUS nie powiodło się.\n'
       'Być może przyczyną są niepoprawne dane ubezpieczeniowe.\n'
       'Możesz ponownie wygenerować zgłoszenie modyfikując wcześniej dane ubezpieczeniowe lub zakończyć czynność.'@ [_prac];
FUN.choice(_opis,,'&Wygenerować zgłoszenie'@,'&Zakończyć czynność'@,,,'',' '+_a)


\dane_ubw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZWO) - formuła główna przy nawrocie do danych
::       ubezpieczeniowych - wyrejestrowanie z ZUS
::
::----------------------------------------------------------------------------------------------------------------------
_ref:=params_exec('getParInManuall','%personel');
_prac:=exec('record','#to_string',_ref);
_opis:='~~'+
   'Wyrejestrowanie osoby %1 z ZUS nie powiodło się.\n'
   'Być może przyczyną są niepoprawne dane ubezpieczeniowe.\n'
   'Możesz ponownie wygenerować wyrejestrowanie modyfikując wcześniej dane ubezpieczeniowe lub zakończyć czynność.'@ [_prac];
FUN.choice(_opis,,'&Wygenerować wyrejestrowanie'@,'&Zakończyć czynność'@,,,'',' '+_a)


\spr_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_ZAM, PER_ZUS)- formuła sprawdza czy w systemie jest lista SUM
::       dla wybranego roku, miesiąca. Na wejściu czynności ręcznej w procesie musi być parametry:
::        p01 Rok ubezpieczeniowy(RU),
::        p02 Miesiąc ubezpieczeniowy(MU)
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_rok:=_in.p01;
_msc:=_in.p02;
{? exec('lista','!ppl_zes_wzus',_rok,_msc)=null()
|| 'Brak listy płac typu SUM za %1.\n'
   'Aby kontynuować proces należy dołączyć listę SUM. Czy chcesz założyć listę?'@ [date(_rok,_msc,0)$8]
|| 'OK'
?}


\spr_otw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_PIT4) - formuła sprawdza czy w systemie są otwarte listy
::       dla wybranego roku, miesiąca. Na wejściu czynności ręcznej w procesie muszą być jako parametry:
::         p01 Rok ubezpieczeniowy(RP),
::         p02 Miesiąc ubezpieczeniowy(MP)
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_O:=sql(
      'select count(*) as TEST '
      'from O '
      'join F_ZATR using (O.F_ZATR,F_ZATR.REFERENCE) '
      'where O.FIRMA=:_a and O.Z=\'N\' and O.RP=:_b and O.MP=:_c and F_ZATR.KOD=\'P\'',
      exec('ref_firma','ustawienia'),_in.p01,_in.p02
   );
   {? type_of(_O)=type_of(SYSLOG) & _O.first() & _O.TEST>0
   || 'Otwarte'
   || 'Zamknięte'
   ?}


\otw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (np. PER_PIT4) - formuła pytanie do użytkownika, co należy robić w momencie,
::       gdy są otwarte listy dla wybranego roku, miesiąca. Na wejściu czynności ręcznej muszą być jako parametry:
::        p01 Rok podatkowy (RP),
::        p02 Miesiąc podatkowy (MP)
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_rok:=_in.p01;
_msc:=_in.p02;
_wynik:=3;
_pyt:='~~'+
   'Miesiąc %1 ma otwarte listy płac.\n'
   'Czy mimo wszystko wygenerować przelew na zaliczkę PIT4?\n'
   'Czy zamknąć miesiąc %1, a potem wygenerować zaliczkę na PIT4?\n'
   'Czy zakończyć proces?'@ [ date(_rok,_msc,0)$8];
_wynik:=FUN.choice(_pyt,,'&Wygenerować'@,'Zamknąć &miesiąc'@,'&Zakończyć proces'@,,'',' Proces naliczania zaliczki na PIT4'@);
_wynik-1


\osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [17.00]
:: OPIS: wykorzystywany przy procesach (PER_WRH_WWW) - formuła wyznaczająca osobę na podstawie użytkownika składającego
::       wniosek - Wniosek o zmianę rachunku bankowego
::   WE:
::   WY: _osoba - wyznaczona na podstawie użytkownika rejestrującego wniosek
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
_osoba:=exec('FindAndGet','#table',EDOKUM,params_get().mp.load(exec('kind_in','#b_port')).p01,,'USERS().OSOBA',null());
USERS.cntx_pop();
_osoba


\kk_wg_projektu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.14]
:: OPIS: Formuła do wyznaczania konta kosztów podczas rejestracji godzin przepracowanych na podstawie projektu.
::   WE: _a - [REFERENCE] - wskazanie na projekt
::       _b - [INTEGER] - rok
::       _c - [STRING] - system
::   WY: _wy - Konto kosztów do godzin na podstawie projektu
::----------------------------------------------------------------------------------------------------------------------
_projekt:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_rok:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_system:={? var_pres('_c')=type_of('') || _c || 'PPL' ?};
_konto:='';
_msg:='Nie można dodać konta kosztowego.'@;
_wy:=null();

{? _projekt & _rok & +_system
|| PROJEKTY.cntx_psh();
   PROJEKTY.clear();
:: Ustawienie projektu
   {? PROJEKTY.seek(_projekt)
   || ROK_F.cntx_psh();
      ROK_F.index('ROKPOCZ');
      ROK_F.prefix(PROJEKTY.FIRMA,date(_rok,1,1));
:: Ustawienie roku bilansowego
      {? ROK_F.first()
      ||
:: Struktury konta kosztów
         {? _rok<=2017
         || _synt:='501';
            _il:=3;
            _an:=obj_new(_il);
            {! _ii:=1.._il |! _an[_ii]:='' !};
            _an[1]:={? PROJEKTY.T().R='Zewnętrzny' || 'PRO' || PROJEKTY.UD_SKL ?};
            _an[2]:=PROJEKTY.ref();
            _an[3]:='500'
         || _synt:='503';
            _il:=3;
            _an:=obj_new(_il);
            {! _ii:=1.._il |! _an[_ii]:='' !};
            _an[1]:={? PROJEKTY.T().R='Zewnętrzny' || 'PRJ' || PROJEKTY.UD_SKL ?};
            _an[3]:='500';
            _an[2]:='';
            ROK_F.cntx_psh(); ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
            {? ROK_F.find_ge(date(_rok,1,1))
            || KS.cntx_psh(); KS.index('SYM'); KS.prefix(ROK_F.ref(),_synt);
               {? KS.first()
               || BUD.cntx_psh(); BUD.index('KS'); BUD.prefix(KS.ref(),2);
                  {? BUD.first()
                  || SLUAPPL.cntx_psh(); SLUAPPL.index('NAZ'); SLUAPPL.prefix();
                     SLU.cntx_psh(); SLU.index('NAZ'); SLU.prefix();
                     BUD.SLU().SLU();
                     RS.cntx_psh(); RS.index('RS'); RS.prefix(SLU.WZ);
                     {? RS.first()
                     || {? RS.TAB='PROJEKTY' & RS.KOD='SYM'
                        || _an[2]:=PROJEKTY.SYM
                        |? RS.TAB='PROJEKTY' & RS.KOD='ID_KSG'
                        || _an[2]:=form(PROJEKTY.ID_KSG,BUD.SLU().SLU().DL*(-1),,'99')
                        ?}
                     ?};
                     RS.cntx_pop(); SLUAPPL.cntx_pop(); SLU.cntx_pop()
                  ?};
                  BUD.cntx_pop()
               ?};
               KS.cntx_pop()
            ?};
            ROK_F.cntx_pop()
         ?};
:: Sprawdzenie definicji konta
         {? _an[2]<>'' & (+_synt | _il)
         ||
:: Sprawdzenie syntetyki
            {? +_synt=ROK_F.SYNT
            || KS.cntx_psh();
               KS.index('SYM');
               KS.prefix(ROK_F.ref());
               {? KS.find_key(_synt,)
               || BUD.cntx_psh();
                  BUD.index('KS');
                  BUD.prefix(KS.ref());
:: Sprawdzenie czy konto ma analitykę
                  {? BUD.first()
                  ||
:: Sprawdzenie czy liczba analityk jest zgodna z definicji z podaną strukturą
                     {? BUD.size()=_il
                     || _konto:=_synt;
                        _ok:=1;
                        {!
                        |? _konto+=ROK_F.SEP;
                           _war:=_an[BUD.POZ];
                           {? var_pres('_war')=type_of('') & exec('FindInSet','#table','SLO','SL',_war,BUD.SLU().SLU,,1)
                           || _konto+=_war
                           |? var_pres('_war')=type_of(null())
                           || RS.cntx_psh();
                              RS.index('RS');
                              RS.prefix(BUD.SLU().SLU().WZ,);
                              {? RS.first() & ($(RS.TAB+'.name()'))()=form(8+($_war))
                              || ($(RS.TAB+'.cntx_psh()'))();
                                 ($(RS.TAB+'.clear()'))();
                                 {? ($(RS.TAB+'.seek(_a)'))(_war)
                                 || _kod:=($(RS.TAB+'.'+RS.KOD))();
                                    {? type_of(_kod)=1 & BUD.SLU().SLU().DL
                                    || _kod:=form(_kod,BUD.SLU().SLU().DL*(-1),,'99')
                                    |? type_of(_kod)=2 | (type_of(_kod)=1 & ~BUD.SLU().SLU().DL)
                                    || _kod:=form(_kod)
                                    || _kod:=''
                                    ?};
                                    {? +_kod
                                       &
                                       {? BUD.SLU().SLU().KDK || +_kod=BUD.SLU().SLU().DL || 1 ?}
                                    || SLO.cntx_psh();
                                       SLO.index('SL');
                                       SLO.prefix(BUD.SLU().SLU);
                                       {? SLO.find_key(_kod,)
                                       || _konto+=_kod
                                       || SLO.blank();
                                          SLO.SLU:=BUD.SLU().SLU;
                                          SLO.KOD:=_kod;
                                          SLO.TR:=($(RS.TAB+'.'+RS.TR))();
                                          {? SLO.add(1)
                                          || _konto+=SLO.KOD
                                          || _konto:='';
                                             _ok:=0
                                          ?}
                                       ?};
                                       SLO.cntx_pop()
                                    || _konto:='';
                                       _ok:=0
                                    ?}
                                 || _msg+='\n%1 %2.'['Brak tabeli wskazanej we wzorcu'@,BUD.SLU().SLU().WZ];
                                    _konto:='';
                                    _ok:=0
                                 ?};
                                 ($(RS.TAB+'.cntx_pop()'))()
                              || _msg+='\n%1.'['Brak poprawnej definicji wzorca dla konta analitycznego'@];
                                 _konto:='';
                                 _ok:=0
                              ?};
                              RS.cntx_pop()
                           || _msg+='\n%1.'['Brak poprawnej wartości do wyszukiwania konta kosztów'@];
                              _konto:='';
                              _ok:=0
                           ?};
                           BUD.next() & _ok
                        !}
                     || _msg+='\n%1.'['Niezgodna ilość poziomów analitycznych'@]
                     ?}
                  ||_msg+='\n%1 %2.'['Brak definicji analityki w budowie konta'@,_synt]
                  ?};
                  BUD.cntx_pop();
               _msg+='\n%1 %2.'['Brak wskazanego konta syntetycznego'@,_synt]
               ?};
               KS.cntx_pop()
            || _msg+='\n%1 %2.'['Błąd długości konta syntetycznego'@,_synt]
            ?}
         ||  _msg+='\n%1.'['Błąd w definicji struktury konat kosztów'@]
         ?};
         {? +_konto
         || KK.cntx_psh();
            KK.index('UNIK');
            KK.prefix(PROJEKTY.FIRMA,_system,ROK_F.ref(),_konto);
:: Wybór konta kosztowego
            {? KK.first()
            || _wy:=KK.ref()
:: Konto kosztowe zostało odnalezione
            || KK.blank();
:: Dodanie konta kosztowego
               KK.SYM:=_konto;
               KK.NAZWA:=PROJEKTY.NAZWA;
               KK.SYSTEM:=_system;
               KK.ROK_F:=ROK_F.ref();
               KK.FIRMA:=PROJEKTY.FIRMA;
               {? KK.add(1) || _wy:=KK.ref() ?}
            ?};
            KK.cntx_pop()
         ?}
      || _msg+='\n%1 %2.'['Brak planu kont na rok'@,$_rok]
      ?};
      ROK_F.cntx_pop()
   || _msg+='\n%1.'['Brak projektu'@]
   ?};
   PROJEKTY.cntx_pop()
|| _msg+='\n%1.'['Brak wymaganych parametrów potrzebnych do ustalenia konta kosztów'@]
?};

_wy


\hskdata
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Formuła do importu danych z czytników hskdata.
::   WE: _a - odczytana linia z pliku
::   WY:
::  OLD: \hskdata/czytdane.fml
::----------------------------------------------------------------------------------------------------------------------
R_BUFFER.CZ:=3+_a; _a:=3-_a;
R_BUFFER.KP:=form(8+_a); _a:=8-_a;
R_BUFFER.M:=2+_a; _a:=2-_a;
R_BUFFER.D:=2+_a; _a:=2-_a;
R_BUFFER.GODZ:=2+_a; _a:=2-_a;
R_BUFFER.MIN:=2+_a; _a:=2-_a;
R_BUFFER.ST:=1+_a; _a:=1-_a;
R_BUFFER.PO:=1+_a; _a:=1-_a


\kfap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Formuła do importu danych z czytników kfap.
::   WE: _a - odczytana linia z pliku
::   WY:
::  OLD: \kfap/czytdane.fml
::----------------------------------------------------------------------------------------------------------------------
R_BUFFER.KP:=6+_a; _a:=6-_a;
R_BUFFER.R:=4+_a; _a:=4-_a;
R_BUFFER.M:=2+_a; _a:=2-_a;
R_BUFFER.D:=2+_a; _a:=2-_a;
R_BUFFER.GODZ:=2+_a; _a:=2-_a;
R_BUFFER.MIN:=2+_a; _a:=2-_a;
R_BUFFER.TR:=$((1+_a)='W'); _a:=1-_a;
R_BUFFER.MD:=$((1+_a)='S'); _a:=1-_a;
R_BUFFER.CZ:=2+_a; _a:=2-_a


\unicard
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Formuła do importu danych z czytników unicard.
::   WE: _a - odczytana linia z pliku
::   WY:
::  OLD: \unicard/czytdane.fml
::----------------------------------------------------------------------------------------------------------------------
R_BUFFER.CZ:=3+_a; _a:=3-_a;
R_BUFFER.KP:=form(9+_a); _a:=9-_a;
R_BUFFER.M:=2+_a; _a:=2-_a;
R_BUFFER.D:=2+_a; _a:=2-_a;
R_BUFFER.GODZ:=2+_a; _a:=2-_a;
R_BUFFER.MIN:=2+_a; _a:=2-_a;
R_BUFFER.TR:=1+_a; _a:=1-_a;
R_BUFFER.MD:=1+_a; _a:=1-_a;
R_BUFFER.PO:=1+_a; _a:=1-_a


\NR_ZC_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Pobranie kolejnego numeru unowy zlecenia dla zleceniobiorcy dla formatu NNNN/RRRR
::   WE: _a ref tabeli P
::       [_b] opcjonalnie liczba, gdy następuje zmiana roku zawarcia umowy
::   WY: Kolejny numer umowy
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of(0) & _b || _zm_rok:=_b || _zm_rok:=0 ?};
ZC.cntx_psh;
_nr:=0;
_spr_f:="_ret:=0;
         _ZCN:=form(ZC.NU);
         _FRM:=form(_a);
         {? (+_ZCN)=(+_FRM)
         || {!
            |? _g_ZC:=_ZCN*'/';
               _g_FR:=_FRM*'/';
               {? _g_FR=_g_ZC
               || _ret:=1;
                  _ZCN:=_g_ZC-_ZCN;
                  _FRM:=_g_FR-_FRM;
                  (_g_FR & _g_ZC)
               || _ret:=0;
                  0
               ?}
            !}
         ?};
         _ret";

_zn:="_um:=ZC.NU;
      _nr:=0;
      _g:=_um*'/';
      {? _g || _nr:=#((_g-1)+_um) ?};
      _nr
      ";

_rok:=date()~1;
::dla zmiany roku sprawdzamy z bufora pole ZC.DU i wartość zmienna _rok
{? _zm_rok
|| {? ZC.DU~1<>_rok || _rok:=ZC.DU~1 ?}
?};
_nr:=0;
ZC.index('ZLECPRZ');
ZC.prefix(_a);
{? ZC.find_ge(date(_rok,1,1))
|| {!
   |? {? _spr_f('NNNN/RRRR') & ZC.DU~1=_rok
      || _pm:=_zn();
         {? _pm>_nr || _nr:=_pm ?}
      ?};
      ZC.next & ZC.DU~1=_rok
   !}
?};
ZC.cntx_pop;
_um:=form(_nr+=1,-4,,'9')+'/'+($(_rok));
_um


\NR_ZC_2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Pobranie kolejnego numeru unowy zlecenia dla zleceniobiorcy dla formatu NNNN/MM/RRRR
::   WE: ref tabeli P
::   WY: Kolejny numer umowy
::----------------------------------------------------------------------------------------------------------------------
ZC.cntx_psh;
_nr:=0;
_spr_f:="_ret:=0;
         _ZCN:=form(ZC.NU);
         _FRM:=form(_a);
         {? (+_ZCN)=(+_FRM)
         || {!
            |? _g_ZC:=_ZCN*'/';
               _g_FR:=_FRM*'/';
               {? _g_FR=_g_ZC
               || _ret:=1;
                  _ZCN:=_g_ZC-_ZCN;
                  _FRM:=_g_FR-_FRM;
                  (_g_FR & _g_ZC)
               || _ret:=0;
                  0
               ?}
            !}
         ?};
         _ret";

_zn:="_um:=ZC.NU;
      _nr:=0;
      _g:=_um*'/';
      {? _g || _nr:=#((_g-1)+_um) ?};
      _nr
      ";

_rok:=ZC.DU~1;
_mc :=ZC.DU~2;
{? ~_rok
|| _rok:=date~1
?};
_nr:=0;
ZC.index('ZLECPRZ');
ZC.prefix(_a);
{? ZC.find_ge(date(_rok,1,1))
|| {!
   |? {? _spr_f('NNNN/MM/RRRR') & ZC.DU~1=_rok
      || _pm:=_zn();
         {? _pm>_nr || _nr:=_pm ?}
      ?};
      ZC.next & ZC.DU~1=_rok
   !}
?};
ZC.cntx_pop;
_um:=form(_nr+=1,-4,,'9')+'/'+(form(_mc,-2))+'/'+($(_rok));
_um


\spr_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [18.22]
:: OPIS: sprawdza warunki tylko ZC (nie ma sprawdzania ZC_INFO), dla których nie trzeba generować zgłoszenia ZUS dla
::       umowy cywilnoprawnej
::   WE: _a - Wskazanie na zlecenie
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zc:=
   {? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=ZC
   || _a
   || _in:=params_get().mp.load(exec('kind_in','#b_port'));
      {? var_pres('p01',_in)=type_of(null) & _in.p01<>null & ref_tab(_in.p01)=ZC
      || _in.p01
      || null
      ?}
   ?};
{? _zc=null
|| return('BRAK')
?};

ZC.cntx_psh();
_kod:=exec('FindAndGet','#table',ZC,_zc,,'TTUB().KOD','');

:: Składka na ubezpieczenie emerytalne i rentowe
_zus:=exec('FindAndGet','#table',ZC,_zc,,'ZUS','');
::Składka na ubezpieczenie chorobowe
_fc:=exec('FindAndGet','#table',ZC,_zc,,'FC','');
::Składka na ubezpieczenie wypadkowe
_fw:=exec('FindAndGet','#table',ZC,_zc,,'FW','');
::Składka na Fundusz Pracy
_fp:=exec('FindAndGet','#table',ZC,_zc,,'FP','');
::Składka na Fundusz Gwarantowanych Świadczeń Pracowniczych
_fg:=exec('FindAndGet','#table',ZC,_zc,,'FG','');
:: Składka na ubezpieczenie zdrowotne
_kc:=exec('FindAndGet','#table',ZC,_zc,,'KC','');
_wynik:='';
{? 2+_kod<>'01'
|| {? _zus='T' | _fc='T' | _fw='T' | _fp='T' | _fg='T'
   || _wynik:=''
   || _wynik:='BRAK'
   ?}
|| _wynik:='BRAK'
?};
ZC.cntx_pop();
_wynik


\spr_grafik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [18.02]
:: OPIS: sprawdza, czy pracownik grafikowy
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_tak:='';
P.cntx_psh();
_tak:=exec('FindAndGet','#table',P,_in.p01,,'GRAFIK','N');
P.cntx_pop();
_tak


\wybor_zrodlo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [18.22]
:: OPIS: Wybór skąd mamy generować przelewy, z X - listy płac i rachunki, P - z list płac, Z - z rachunków do umów
::       cywilnoprawnych
::----------------------------------------------------------------------------------------------------------------------
_pyt:='~~Przelewy potrąceń wygenerować z:'@;
_wyn:=FUN.choice(_pyt,,'List płac i rachunkó&w'@,'&List płac'@,'&Rachunków do umów zleceń'@,,'');
_odp:={?_wyn=2 || 'P' |? _wyn=3 || 'Z' || 'X' ?};
_odp


\wybor_zakres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [18.22]
:: OPIS: Wybór skąd mamy generować przelewy, z B - ze wskazanej listy, P - z list tego samego typu ale wcześniejszych
::       (potrącenia przesunięte), W - ze wszystkich list wybranego typu (potrącenia z bieżącej listy i przesunięte)
::----------------------------------------------------------------------------------------------------------------------
_pyt:='~~Przelewy potrąceń wygenerować z:'@;
_wyn:=FUN.choice(_pyt,,'&Wskazanej listy (B)'@,'&Wcześniejszych list (P)'@,'&Wszystko (W)'@,,'');
_odp:={?_wyn=2 || 'P' |? _wyn=3 || 'W' || 'B' ?};
_odp


\spr_czyzam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: wesos [19.02]
:: OPIS: Sprawdza czy wszystkie listy zostały zamknięte, jeśli tak to zakłada że miesiąc
::       mógł już zostać zamknięty
::        p01 Lista płac(O)
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
O.cntx_psh();
O.seek(_in.p01);
O.index('LISTYMIE');
_rok:=O.R;
_mies:=O.M;
O.prefix(O.FIRMA,O.R,O.M,);
_zamk:=1;
{? O.first()
|| {!
   |? {? O.Z='N' || _zamk:=0 ?};
      _zamk & O.next()
   !}
?};
O.cntx_pop();
{? _zamk
|| 'Próba ponownego zamknięcia miesiąca (%1).\nKontynuować działanie?'@[(date(_rok,_mies,0)$8)]
|| 'OK'
?}


\spr_ppk_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wykorzystywany przy procesie importu danych o PPK (PPK_IMP) - sprawdza, czy pośród uczestników PPK są osoby,
::       które nie zostały jeszcze zaraportowane do Instytucji Finansowej
::----------------------------------------------------------------------------------------------------------------------
_ret:='BRAK';
PPK_UCZ.cntx_psh();
PPK_UCZ.index('UNIQUE');
PPK_UCZ.prefix();
{? PPK_UCZ.find_tab(,'ZG',,'=','N')
|| _ret:='JEST'
?};
PPK_UCZ.cntx_pop();
_ret


\ppk_rap_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wyświetla komunikat o konieczności wygenerowania raportu dla uczestników PPK, którzy nie zostaali jeszcze
::       zaraportowani do Instytucji Finansowej.
::----------------------------------------------------------------------------------------------------------------------
_ans:=1;
_ans:=FUN.ask('Należy utworzyć raport dla Instytucji Finansowej obsługującej PPK dla uczestników jeszcze niezarejestrowanych.\n'
                    'W (Pracownicze Plany Kapitałowe -> Ewidencja PPK -> przycisk Operacje grupowe -> Raporty pracodawcy -> zakładka Pliki wymiany danych) '
                    'należy poprzez akcję Dołącz dodać nowy plik raportu z bieżącą datą i wersją.\n'
                    'Następnie w zakładce Utworzone raporty za pomocą akcji Dołącz wybrać pozycję Rejestracja uczestnika.\n'
                    'Powrócić do zakładki Pliki wymiany danych i wybrać akcję Generuj.\n'
                    'Czy utworzono raport?');
_ans


\desc_manual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Dla czynności manualnej ustala elementy jej opisu do wyświetlenia na liście zadań.
::   WE: _a - Wskazanie na obiekt menadżera procesu
::   WY: tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('init_desc_tab','osoba');
_ref:=params_exec('getParInManuall','%personel');

OSOBA.cntx_psh();
OSOBA.prefix();
{? var_pres('_ref')=type_of(null) & _ref<>null & ref_name(_ref)=OSOBA.name() & OSOBA.seek(_ref)
|| _tab.ZAW_DANE:='T';
   _tab.NAZWISKO:=OSOBA.NAZWISKO;
   _tab.PIERWSZE:=OSOBA.PIERWSZE;
   _tab.OBCY:=OSOBA.OBCY;
   _tab.PASZPORT:=OSOBA.PASZPORT;
   _tab.PESEL:=OSOBA.PESEL;
   _tab.UR_DATA:=$OSOBA.UR_DATA
|| _tab.ZAW_DANE:='N'
?};
OSOBA.cntx_pop();

_tab


\gl_mail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wykorzystywany przy procesach (np. PER_ZWO) w zadaniach ręcznych, formuła główna - Temat maila
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_prac:=exec('record','#to_string',params_get().mp.load(exec('kind_in','#b_port')).p01);
_opis:='Zwolniono %1'@ [_prac];
_opis


\wysw_per_kom_zrodl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wykorzystywany przy procesie PER_KOM w zadaniach ręcznych, formuła na wyświetl ToDo - ZRODLO
::   WE:
::   WY: napis wyświetlany w okienku na wyświetl w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Wskazanie z czego pobierać dane do przelewów (listy, płac, rachunki, i rachunki i listy)'@


\wysw_per_kom_zakr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wykorzystywany przy procesie PER_KOM w zadaniach ręcznych, formuła na wyświetl ToDo - ZAKRES
::   WE:
::   WY: napis wyświetlany w okienku na wyświetl w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Wskazanie czy pobierać dane do przelewów z bieżącej listy, z wcześniejszych list, z obu'@


\wysw_per_kom_kon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wykorzystywany przy procesie PER_KOM w zadaniach ręcznych, formuła na wyświetl ToDo - Komunikat końcowy
::   WE:
::   WY: napis wyświetlany w okienku na wyświetl w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Komunikat procesu o błędnych parametrach - generowanie przelewów z potrąceń'@


\gl_weryf_lis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wykorzystywany przy procesie PER_LIC w zadaniu ręcznym, formuła główna - Weryfikacja listy płac
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_lista:=~params_get().mp.load(exec('kind_in','#b_port')).p01;
_opis:='Czy zweryfikowano listę %1?'@ [_lista];
_opis


\opis_wlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_LIC w zadaniu ręcznym, opis czynności ToDo - Weryfikacja listy płac
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Weryfikacja listy płac %1'@@[~params_get().mp.load(exec('kind_in','#b_port')).p01]


\opis_per_pit4p_clz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PIT4P w zadaniu ręcznym "Sprawdza, czy listy są zamknięte" - opis czynności ToDo
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Sprawdzenie czy listy są zamknięte'@@


\opis_per_pit4p_lo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PIT4P w zadaniu ręcznym "Listy otwarte do dalej z PIT" - opis czynności ToDo
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Co dalej z PIT4 jeśli nie wszystkie listy są zamknięte'@@


\opis_per_prz_dd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PRZ w zadaniu ręcznym, opis czynności ToDo - Dostarczenie podpisanego
::       dokumentu przez pracownika
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual','%personel',params_get().mp);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Akceptacja dostarczenia podpisanego aneksu przez pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Akceptacja dostarczenia podpisanego aneksu przez pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Akceptacja dostarczenia podpisanego aneksu przez pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Akceptacja dostarczenia podpisanego aneksu przez pracownika'@@
?}


\opis_per_prz_kk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PRZ w zadaniu ręcznym, opis czynności ToDo - Listy otwarte do dalej z PIT
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Czy zmienić konto kosztów?'@@


\gl_wzorzec_cp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PRZ w zadaniu ręcznym, formuła główna - Czy chcesz rejestrować wzorzec czasu
::       pracy
::   WE:
::   WY: napis w formule głównej
::----------------------------------------------------------------------------------------------------------------------
'Czy rejestrować nowy wzorzec pracy?'@


\opis_per_prz_wcp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PRZ w zadaniu ręcznym, opis czynności ToDo - Czy chcesz rejestrować wzorzec
::       czasu pracy
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Czy rejestrować nowy wzorzec pracy?'@@


\opis_per_za1_doum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_ZA1 w zadaniu ręcznym, opis czynności ToDo - Dostarczenie podpisanej umowy
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_tab:=params_exec('desc_manual','%personel',_mp);
:: ręczne dodanie rekordu kluczowego dla czynności ręcznej aby nie została zgubiona na liście TODO (wykonywana
:: równolegle z czynnością nieręczną)
P.cntx_psh();
P.prefix();
{? var_pres('p02',_in)=type_of(null) & _in.p02<>null & ref_name(_in.p02)=P.name() & P.seek(_in.p02)
|| _mp.keyRef(P.uidref(),0,0)
?};
P.cntx_pop();

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Akceptacja dostarczenia podpisanej umowy przez pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Akceptacja dostarczenia podpisanej umowy przez pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Akceptacja dostarczenia podpisanej umowy przez pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Akceptacja dostarczenia podpisanej umowy przez pracownika'@@
?}


\opis_per_zam_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_ZAM w zadaniu ręcznym, opis czynności ToDo - Sprawdza listę SUM
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Brak listy SUM'@@


\opis_per_zam_zam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_ZAM w zadaniu ręcznym, opis czynności ToDo - Sprawdza czy miesiąc został już
::       zamknięty
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Czy ponowić zamknięcie miesiąca?'@@


\opis_per_zus_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_ZAM w zadaniu ręcznym, opis czynności ToDo - Brak listy SUM
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
'Sprawdzenie, czy jest lista SUM'@@


\wyj_per_pks_koszt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PKS w zadaniu ręcznym, Formuła parametru wyjściowego - Miesięczny/Stały
::       podział kosztów
::   WE:
::   WY: okienko z wyborem
::----------------------------------------------------------------------------------------------------------------------
_podz:='Podział kosztów stały, czy miesięczny?'@;
_staly:='&Stały'@;
_mies:='&Miesięczny'@;
_zak:='&Zakończ'@;
FUN.choice(_podz,,_staly,_mies,_zak,,'')


\wyj_por_pruo_dp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: wykorzystywany przy procesie POR_PRUO_WWW w zadaniu serwisowym,
::       Formuła parametru wyjściowego - wartość pola DecyzjaPersonalna z wniosku
::   WE:
::   WY: okienko z wyborem
::----------------------------------------------------------------------------------------------------------------------
_edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
_val:='';
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum)) & exec('open_edk_atr', 'obiegi', _edokum)
|| _dp:=exec('atr_get','portal_walidacja','DecyzjaPersonalna');
   {? _dp='Przedłużenie umowy'
   || _val:='P'
   |? _dp='Rozwiązanie umowy'
   || _val:='Z'
   ?}
?};
EDOKUM.cntx_pop();
_val


\wyj_per_prz_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: wykorzystywany przy procesie PER_PRZ oraz PER_ZWO w zadaniu serwisowym
::       ustalającym kontekst pracownika dla wniosku,
::       Formuła parametru wyjściowego - wartość pola pracownik
::   WE:
::   WY: okienko z wyborem
::----------------------------------------------------------------------------------------------------------------------
_edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
_val:=null();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum)) & exec('open_edk_atr', 'obiegi', _edokum)
|| _prac:=exec('atr_get','portal_walidacja','PracownikIdERP');
   _val:=exec('FindAndGet','#table',P,_prac,,,null())
?};
EDOKUM.cntx_pop();
_val


\opis_per_pks_koszt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie PER_PKS w zadaniu ręcznym, opis czynności ToDo - Miesięczny/Stały podział kosztów
::   WE:
::   WY: opis czynności wyświetlany w ToDo
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual','%personel',params_get().mp);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Wybór rodzaju podziału kosztów dla pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Wybór rodzaju podziału kosztów dla pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Wybór rodzaju podziału kosztów dla pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Wybór rodzaju podziału kosztów dla pracownika'@@
?}


\NR_RH_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.42]
:: OPIS: Pobranie kolejnego numeru rachunku dla zleceniobiorcy dla formatu NNNN/UMOWA
::   WE: _a [REFERENCE] - ref tabeli ZC
::       _b [REFERENCE] - ref bieżącego rekordu
::   WY: Kolejny numer rachunku
::----------------------------------------------------------------------------------------------------------------------
RH.cntx_psh();
_nr:=0;
_spr_f:="_ret:=0;
         _ZCN:=spli_str(form(RH.N),'/')[1]+'/';
         _FRM:=form(_a);
         {? (+_ZCN)=(+_FRM)
         || {!
            |? _g_ZC:=_ZCN*'/';
               _g_FR:=_FRM*'/';
               {? _g_FR=_g_ZC
               || _ret:=1;
                  _ZCN:=_g_ZC-_ZCN;
                  _FRM:=_g_FR-_FRM;
                  (_g_FR & _g_ZC)
               || _ret:=0;
                  0
               ?}
            !}
         ?};
         _ret";

_zn:="_rh:=RH.N;
      _nr:=0;
      _g:=_rh*'/';
      {? _g || _nr:=#((_g-1)+_rh) ?};
      _nr
      ";

_nr:=0;
RH.index('RACHUNKI');
RH.prefix(_a);
{? RH.first()
|| {!
   |? {? _spr_f('NNNN/') & RH.ref()<>_b
      || _pm:=_zn();
         {? _pm>_nr || _nr:=_pm ?}
      ?};
      RH.next()
   !}
?};
RH.cntx_pop();
_rh:=form(_nr+=1,-4,,'9')+'/'+($(ZC.NU));
_rh


\NR_RH_2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.42]
:: OPIS: Pobranie kolejnego numeru rachunku dla zleceniobiorcy dla formatu NNNN/RRRR
::   WE: _a [REFERENCE] - ref tabeli ZC
::       _b [REFERENCE] - ref bieżącego rekordu
::   WY: Kolejny numer rachunku
::----------------------------------------------------------------------------------------------------------------------
RH.cntx_psh();
_nr:=0;
_spr_f:="_ret:=0;
         _ZCN:=form(RH.N);
         _FRM:=form(_a);
         {? (+_ZCN)=(+_FRM)
         || {!
            |? _g_ZC:=_ZCN*'/';
               _g_FR:=_FRM*'/';
               {? _g_FR=_g_ZC
               || _ret:=1;
                  _ZCN:=_g_ZC-_ZCN;
                  _FRM:=_g_FR-_FRM;
                  (_g_FR & _g_ZC)
               || _ret:=0;
                  0
               ?}
            !}
         ?};
         _ret";

_zn:="_rh:=RH.N;
      _nr:=0;
      _g:=_rh*'/';
      {? _g || _nr:=#((_g-1)+_rh) ?};
      _nr
      ";

_rok:=RH.R;
{? ~_rok
|| _rok:=date~1
?};
_nr:=0;
RH.index('DOK');
RH.prefix(exec('firma','ustawienia'),_rok);
{? RH.first()
|| {!
   |? {? _spr_f('NNNN/RRRR') & RH.ref()<>_b
      || _pm:=_zn();
         {? _pm>_nr || _nr:=_pm ?}
      ?};
      RH.next()
   !}
?};
RH.cntx_pop();
_rh:=form(_nr+=1,-4,,'9')+'/'+($(_rok));
_rh


\NR_RH_3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.42]
:: OPIS: Pobranie kolejnego numeru rachunku dla zleceniobiorcy dla formatu NNNN/MM/RRRR
::   WE: _a [REFERENCE] - ref tabeli ZC
::       _b [REFERENCE] - ref bieżącego rekordu
::   WY: Kolejny numer rachunku
::----------------------------------------------------------------------------------------------------------------------
RH.cntx_psh();
_nr:=0;
_spr_f:="_ret:=0;
         _ZCN:=form(RH.N);
         _FRM:=form(_a);
         {? (+_ZCN)=(+_FRM)
         || {!
            |? _g_ZC:=_ZCN*'/';
               _g_FR:=_FRM*'/';
               {? _g_FR=_g_ZC
               || _ret:=1;
                  _ZCN:=_g_ZC-_ZCN;
                  _FRM:=_g_FR-_FRM;
                  (_g_FR & _g_ZC)
               || _ret:=0;
                  0
               ?}
            !}
         ?};
         _ret";

_zn:="_rh:=RH.N;
      _nr:=0;
      _g:=_rh*'/';
      {? _g || _nr:=#((_g-1)+_rh) ?};
      _nr
      ";

_rok:=RH.DWY~1;
_mc :=RH.DWY~2;
{? ~_rok
|| _rok:=date~1
?};
_nr:=0;
RH.index('DOK');
RH.prefix(exec('firma','ustawienia'),_rok,_mc);
{? RH.first()
|| {!
   |? {? _spr_f('NNNN/MM/RRRR') & RH.ref()<>_b
      || _pm:=_zn();
         {? _pm>_nr || _nr:=_pm ?}
      ?};
      RH.next()
   !}
?};
RH.cntx_pop();
_rh:=form(_nr+=1,-4,,'9')+'/'+(form(_mc,-2))+'/'+($(_rok));
_rh


\desc_manual_abs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Dla czynności manualnej w procesach dotyczących wniosków na wspólnym portalu ustala elementy jej opisu do
::       wyświetlenia na liście zadań.
::   WE: _a [EDOKUM] - przekazany w parametrze
::   WY: _tab - tablica nazwana z elementami dla opisu czynności ręcznej
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) & _a<>null || _a || return() ?};

_tab:=exec('init_desc_tab','osoba');
EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
OSOBA.cntx_psh();
OSOBA.prefix();
{? EDOKUM.seek(_edokum,,1)
|| _tab.ZAW_DANE:='T';
   _tab.DATAW:=EDOKUM.DATAW;
   _tab.NAZWISKO:=EDOKUM.DOSTAWCA().NAZWISKO;
   _tab.PIERWSZE:=EDOKUM.DOSTAWCA().PIERWSZE;
   _tab.OBCY:=EDOKUM.DOSTAWCA().OBCY;
   _tab.PASZPORT:=EDOKUM.DOSTAWCA().PASZPORT;
   _tab.PESEL:=EDOKUM.DOSTAWCA().PESEL;
   _tab.UR_DATA:=$EDOKUM.DOSTAWCA().UR_DATA
|| _tab.ZAW_DANE:='N'
?};
OSOBA.cntx_pop();
EDOKUM.cntx_pop();
_tab


\opis_por_wdsp_www_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie POR_WDSP_WWW w zadaniu ręcznym, opis czynności ToDo - Dostarczenie duplikatu
::       świadectwa
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual_abs','%personel',params_get().mp.load(exec('kind_in','#b_port')).p01);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Realizacja dostarczenia duplikatu świadectwa pracy dla pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Realizacja dostarczenia duplikatu świadectwa pracy dla pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Realizacja dostarczenia duplikatu świadectwa pracy dla pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Realizacja dostarczenia duplikatu świadectwa pracy dla pracownika'@@
?}


\gl_wyd_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesach (np. POR_WDSP_WWW) - formuła główna wysłanie / dostarczenie danego dokumentu
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
_prac:=_type:=_email:='';
_udok:=_rdcr:=0;
_info:='wnioskowany dokument'@;
EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
ETYPY.cntx_psh();
EDOK_ATR.cntx_psh();
{? type_of(_edokum)=type_of(null) & EDOKUM.seek(_edokum,,1)
|| _prac:=exec('record','#to_string',EDOKUM.DOSTAWCA);
   _type:=EDOKUM.TYP().NAZWA;
   {? _udok:=(_type=exec('_edp','portal_walidacja').name)
   || _info:='kopię dokumentacji'@;
      EDOK_ATR.use('edokat'+(EDOKUM.name()+2));
      {? exec('atr_get','portal_walidacja','CzyWysylkaEmailEAkta')='T'
      || _email:='mailowo '@
      ?}
   |? _rdcr:=(_type=exec('_rdcr','portal_walidacja').name)
   || _info:='(Zdarzenia kadrowe -> Zestawienia i raporty -> Raporty ZUS -> '@;
      _info+='ZCNA Zgłoszenie/wyrejestrowanie danych o członkach rodziny dla celów ubezpieczenia zdrowotnego)'@
   ?}
?};
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
EDOKUM.cntx_pop();
{? _type=exec('_wn_zzal','portal_walidacja').name
|| 'Czy dla pracownika %1zrealizowano wniosek papierowy?'@ [{? +_prac || _prac+' ' || '' ?}]
|? _rdcr
|| 'Czy dla pracownika %1wykonano zgłoszenie danych członka rodziny dla celów ubezpieczenia zdrowotnego %2?'@
      [{? +_prac || _prac+' ' || '' ?},_info]
|| 'Czy pracownikowi %1dostarczono %2%3?'@
   [{? +_prac || _prac+' ' || ''?},_email,_info+{? ~_udok & +_type || ': '+_type || '' ?}]
?}


\wysw_por_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wykorzystywany przy procesach wniosków z HR Portal w zadaniach ręcznych, formuła na wyświetl ToDo
::       - Komentarz pracownika w sprawie realizacji wniosku
::   WE: [_a] [STRING] - ID_WP atrybutu
::   WY: Komunikat zawierający uwagi pracownika odnośnie wniosku lub pusty napis
::----------------------------------------------------------------------------------------------------------------------
_id_wp:={? var_pres('_a')=type_of('') & +_a || _a || '' ?};
_par:=params_get();
_opis:='Komentarz odnośnie realizacji zgłoszony przez pracownika'@;
_tresc:='';
_tab:=tab_tmp(1,
         'OPIS','STRING[255]','Rodzaj',
         'TRESC','SYS_MEMO','Treść'
      );

{? type_of(_par)<>type_of(~~) & var_pres('mp',_par)>0
|| _edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
   _prac:='';
   EDOKUM.cntx_psh();
   EDOKUM.use(ref_name(_edokum));
   EDOKUM.prefix();
   {? type_of(_edokum)=type_of(null) & EDOKUM.seek(_edokum,,1)
   || _prac:=exec('record','#to_string',EDOKUM.DOSTAWCA);
      _opis+={? +_prac || ' '+_prac || '' ?};
      EDOK_ATR.cntx_psh();
      {? exec('open_edk_atr', 'obiegi', _edokum)
      || ETYPY.cntx_psh();
      _atr:={? EDOKUM.TYP().NAZWA=exec('_edp','portal_walidacja').name || 'WAR' || 'WAR_W' ?};
      ETYPY.cntx_pop();
         {? +_id_wp || _tresc:=exec('atr_get','portal_walidacja',_id_wp,_atr) ?}
      ?};
      EDOK_ATR.cntx_pop()
   ?};
   EDOKUM.cntx_pop()
?};
{? _tresc='' || _tresc+='Brak' ?};
_tab.blank();
_tab.OPIS:=_opis;
{? _tab.add(1)
|| {? _tab.memo_set(_tresc,'TRESC')
   || _tab.memo_put()
   ?}
?};
_red:=_tab.mk_edit('Informacja'@,,'komodprac');
exec('ok_esc','#window',_tab,_red);
_tab.win_esep(_red,'Komentarz pracownika'@);
_tab.win_efld(_red,,'OPIS',,,100,,1);
_tab.win_efld(_red,,'TRESC',,,100,-5,1);
_tab.win_edit(_red);
_tab.display(,,'Komentarz pracownika');
clr_edit()


\opis_por_erp7_www_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie POR_ERP7_WWW w zadaniu ręcznym, opis czynności ToDo - Dostarczenie zaświadczenia
::       ERP-7
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual_abs','%personel',params_get().mp.load(exec('kind_in','#b_port')).p01);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Realizacja dostarczenia zaświadczenia ERP-7 dla pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Realizacja dostarczenia zaświadczenia ERP-7 dla pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Realizacja dostarczenia zaświadczenia ERP-7 dla pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Realizacja dostarczenia zaświadczenia ERP-7 dla pracownika'@@
?}


\opis_por_wkd_www_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie POR_WKD_WWW w zadaniu ręcznym, opis czynności ToDo - Dostarczenie kopii
::       dokumentacji.
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual_abs','%personel',params_get().mp.load(exec('kind_in','#b_port')).p01);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Realizacja dostarczenia kopii dokumentacji dla pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Realizacja dostarczenia kopii dokumentacji dla pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Realizacja dostarczenia kopii dokumentacji dla pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Realizacja dostarczenia kopii dokumentacji dla pracownika'@@
?}


\opis_por_wpap_www_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie POR_WPAP_WWW w zadaniu ręcznym, opis czynności ToDo - Realizacja wniosku
::       papierowego.
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual_abs','%personel',params_get().mp.load(exec('kind_in','#b_port')).p01);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Realizacja wniosku papierowego dla pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Realizacja wniosku papierowego dla pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Realizacja wniosku papierowego dla pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Realizacja wniosku papierowego dla pracownika'@@
?}


\opis_por_rek_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: wykorzystywany przy procesie PER_REK w zadaniu ręcznym, opis czynności ToDo - potwierdzenie
::       uruchomienia procesu rekrutacji
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual_abs','%personel',params_get().mp.load(exec('kind_in','#b_port')).p01);

{? _tab.ZAW_DANE='T'
|| 'Realizacja zgłoszenia rekrutacji: %1 %2, data wniosku %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,$_tab.DATAW]
|| 'Realizacja zgloszenia rekrutacji'@@
?}


\gl_por_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: wykorzystywany przy procesach PER_REK - formuła główna uruchomienie procesu rekrutacji
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
_type:=_osoba:='';

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
ETYPY.cntx_psh();
{? type_of(_edokum)=type_of(null) & EDOKUM.seek(_edokum,,1)
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   _osoba:='%1 %2, data wniosku: %3'@[EDOKUM.DOSTAWCA().NAZWISKO,OSOBA.PIERWSZE,$EDOKUM.DATAW];
   OSOBA.cntx_pop();
   _type:=EDOKUM.TYP().NAZWA
?};
ETYPY.cntx_pop();
EDOKUM.cntx_pop();
_text:={? _type=exec('_rekrutacja','portal_walidacja').name & +_osoba
       || 'Czy rozpoczęto proces rekrutacji zgłoszony przez: %1'@[_osoba]
       || ''
       ?};

_loop:=1;
_result:=0;
{!
|? _loop
|! _wyb:=FUN.choice(_text,,'Szczegóły','Tak',,,'Nie');
   {? _wyb=1
::   szczegóły wniosku
   || params_exec('wysw_por_rek','%personel','Informacje z wniosku o rekrutację')
   |? _wyb=2
   || _result:=1;
      _loop:=0
   |? _wyb=0
   || _result:=_loop:=0
   ?}
!};
_result


\wysw_por_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Wykorzystywany przy procesach wniosków z HR Portal w zadaniach ręcznych, formuła na wyświetl ToDo
::       - Informacja z wniosku w obiegu dot. zgłoszenia rekrutacji
::   WE: [_a] [STRING] - ID_WP atrybutu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_id_wp:={? var_pres('_a')=type_of('') & +_a || _a || '' ?};
_par:=params_get();
_opis:='Komentarz odnośnie realizacji zgłoszony przez pracownika'@;
_tresc:='';
_TAB:=tab_tmp(1,
         'REK_W','STRING[1]','Rekrutacja wewnętrzna',
         'REK_Z','STRING[1]','Rekrutacja zewnętrzna',
         'WYDZ','STRING[100]','Jednostka organizacyjna',
         'STN','STRING[100]','Stanowisko',
         'ZGL','STRING[100]','Przełożony',
         'PRZEL','STRING[100]','Przełożony',
         'MIEJSCE','STRING[100]','Miejsce wykonywania pracy',
         'LO','INTEGER','Liczba osób',
         'DATA_ZA','DATE','Data zatrudnienia',
         'WYM','SYS_MEMO','Wymagania',
         'ZAD','SYS_MEMO','Zadania'
      );

{? type_of(_par)<>type_of(~~) & var_pres('mp',_par)>0
|| _edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
   _prac:='';
   EDOKUM.cntx_psh();
   EDOKUM.use(ref_name(_edokum));
   EDOKUM.index('ID'); EDOKUM.clear();
   {? type_of(_edokum)=type_of(null) & EDOKUM.seek(_edokum,,1)
   || EDOK_ATR.cntx_psh();
      {? exec('open_edk_atr', 'obiegi', _edokum)
      || _p_uidref:=exec('atr_get','portal_walidacja','PrzelozonyIdERP');
         P.cntx_psh();
         P.index('OSOBA');
         _zgl:={? P.seek(_p_uidref) || '%1 %2'[P.OSOBA().PIERWSZE,OSOBA.NAZWISKO] || '' ?};
         P.cntx_pop();

         _TAB.blank();
         _TAB.ZGL:=_zgl;
         _TAB.PRZEL:=exec('atr_get','portal_walidacja','PrzelozonyImieNazwisko');
         _TAB.REK_W:=exec('atr_get','portal_walidacja','RekWewnetrzna');
         _TAB.REK_Z:=exec('atr_get','portal_walidacja','RekZewnetrzna');
         _TAB.WYDZ:=exec('atr_get','portal_walidacja','DzialNazwa');
         _TAB.STN:=exec('atr_get','portal_walidacja','StanowiskoNazwa');
         _TAB.MIEJSCE:=exec('atr_get','portal_walidacja','MiejsceWykPracyNazwa');
         _TAB.LO:=#exec('atr_get','portal_walidacja','LiczbaOsob');
         _data_s:=exec('atr_get','portal_walidacja','DataZatrudnienia');
         _TAB.DATA_ZA:=exec('to_ti_dt','form_ob',_data_s,'D');
         _wym:=exec('atr_get','portal_walidacja','Wymagania','WAR_W');
         _zad:=exec('atr_get','portal_walidacja','Zadania','WAR_W');
         {? _TAB.add(1)
         || _TAB.memo_set(_wym,'WYM') & _TAB.memo_put(,'WYM');
            _TAB.memo_set(_zad,'ZAD') & _TAB.memo_put(,'ZAD')
         ?};
::       okienko
         _width:=50;
         _red:=_TAB.mk_edit('Informacja o zgłoszeniu rekrutacji'@,,'#infrek20201123');
         _TAB.win_esep(_red,'Zgłaszający'@);
         _TAB.win_efld(_red,,'ZGL',,,_width,,1,'Osoba zgłaszająca');
         _TAB.win_esep(_red,'Rekrutacja'@);
         _TAB.win_efld(_red,,'PRZEL',,,_width,,1);
         _TAB.win_efld(_red,,'DATA_ZA',,,,,1);
         _TAB.win_efld(_red,,'LO',,,13,,1);
         _TAB.win_efld(_red,,'REK_W',,,,,1,,,,'check-box',,"'T'","'N'");
         _TAB.win_efld(_red,,'REK_Z',,,,,1,,,,'check-box',,"'T'","'N'");
         _TAB.win_efld(_red,,'WYDZ',,,_width,,1);
         _TAB.win_efld(_red,,'STN',,,_width,,1);
         _TAB.win_efld(_red,,'MIEJSCE',,,_width,,1);
::       memo
         _TAB.win_efld(_red,,'WYM',,,_width,-5,1);
         _TAB.win_efld(_red,,'ZAD',,,_width,-5,1);
         _TAB.win_edit(_red);
         _TAB.display()
      ?};
      EDOK_ATR.cntx_pop()
   ?};
   EDOKUM.cntx_pop()
?};
clr_edit()


\e_mail_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła wyznaczająca e-mail osoby weryfikującej wniosek urlopowy, wykorzystywana w procesie
::       "PER_WPU2_WWW - Wniosek urlopowy - powiadomienie przełożonego (wersja 20.14)".
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_mp:=_par.mp;
_rola:=_mp.buf_prel.B_ROLE;
_nwu:=_mp.load(exec('kind_in','#b_port')).p01;

:: Symbol czynności weryfikującej wniosek urlopowy.
_czyn_weryf:=obj_new('UID','ref');
_czyn_weryf.UID:='PKW_POR_IWWU';

B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_czyn_weryf.UID,);
_czyn_weryf.ref:={? B_ACTION.first() || B_ACTION.ref() || null() ?};
B_ACTION.cntx_pop();

_err:=obj_new('txt','add');
_err.txt:='';
_err.add:="{? .txt*_a=0 || .txt+='\n'+_a ?}";

_mail:=obj_new('txt','add');
_mail.txt:='';
_mail.add:="{? .txt*_a=0 || .txt+='\n'+_a ?}";

NWU.cntx_psh();
NWU.prefix();
{? NWU.seek(_nwu)
|| USERS.cntx_psh();
   USERS.prefix();
   OSOBA.cntx_psh();
   OSOBA.prefix();
   P.cntx_psh();
   P.prefix();

   _put:=0;

   _slo:='TYPPOZ';
   _kod:='AKCWNIO';

:: Bezpośredni przełożeni - bez zastępstw i bez względu na nieobecności.
   _TAB0:=exec('prac_nad','stanprac',NWU.P,'dodatkowe=1,zastępstwa=0,nieobecni=1',_slo,_kod);
   {? _TAB0.first()
   || {? OSOBA.seek(_TAB0.OSOBA) & NWU.AO<>OSOBA.ref()
      || NWU.AO:=OSOBA.ref();
         _put+=1
      ?}
   ?};

:: Faktyczni weryfikatorzy - z uwzglednieniem zastępstw i nieobecności.
   _TAB1:=exec('prac_nad','stanprac',NWU.P,'dodatkowe=1,zastępstwa=1,nieobecni=0',_slo,_kod);

   _TAB:={? _TAB1.first() || _TAB1 || _TAB0 ?};

   {? _TAB.first()
   || _TAB.prefix(_TAB.L);
      _kto_wer:=null();
      {!
      |? {? P.seek(_TAB.P_SQL)
         || _firma:=P.FIRMA;
            P.OSOBA();
            _user:=exec('osoba2user','users',OSOBA.ref());
            {? _user=null()
            || _err.add(
                  'Osoba weryfikująca [%1] bez możliwości logowania się do systemu. [%2]'@
                  [OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE,_czyn_weryf.UID]
               )
            |? ~USERS.seek(_user)
            || _arr.add(
                  'Odnalezienie użytkownika (%1) związanego z osobą weryfikującą nie powiodło się. [%2]'@
                  [_user,_czyn_weryf.UID]
               )
::             Użytkownik został ustalony na podstawie OSOBA. Nie ma więc potrzeby sprawdzać wypełnienia pola
::             USERS.OSOBA.
            |? USERS.EMAIL=''
            || _err.add(
                  'Brak adresu mailowego osoby weryfikującej: %1 %2. [%3]'@
                  [USERS.OSOBA().NAZWISKO,USERS.OSOBA().PIERWSZE,_czyn_weryf.UID]
               )
            |? ~exec('chk_role','#b__box',USERS.ref(),_czyn_weryf.UID)
            || _err.add(
                  '%1 %2: brak uprawnień do czynności weryfikacji wniosku urlopowego. [%3]'@
                  [USERS.OSOBA().NAZWISKO,USERS.OSOBA().PIERWSZE,_czyn_weryf.UID]
               )
            || _mail.add(USERS.EMAIL);
               {? _kto_wer=null()
               || _kto_wer:=USERS.OSOBA;
                  {? NWU.KTO_WER<>USERS.OSOBA
                  || NWU.KTO_WER:=USERS.OSOBA;
                     _put+=1
                  ?}
               ?}
            ?}
         ?};
         _TAB.next()
      !}
   || _err.add(
         'Ustalenie bezpośredniego przełożonego dla pracownika %1 nie powiodło się. [%2]'@
         [NWU.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE,_czyn_weryf.UID]
      )
   ?};

   {? _put
   || NWU.put()
   ?};

   obj_del(_TAB);
   obj_del(_TAB1);
   obj_del(_TAB0);

   P.cntx_pop();
   OSOBA.cntx_pop();
   USERS.cntx_pop()


|| _err.add('Odnalezienie wniosku urlopowego nie powiodło się. [%1]'@[_czyn_weryf.UID])
?};
NWU.cntx_pop();

{? _mail.txt<>''
:: Jeżeli znajdziemy choć jeden poprawny adres, to wysyłamy powiadomienie.
|| 1-_mail.txt
|? _err.txt<>''
|| 1-_err.txt
|| 'Ustalenie użytkownika weryfikującego wniosek nie powiodło się - wystąpił nieprzewidziany błąd. [%1]'@
   [_czyn_weryf.UID]
?}


\pracownik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [20.14]
:: OPIS: wykorzystywany przy procesach (np. PER_WPU_WWW, PER_WPR_WWW) - formuła wyznaczająca e-mail użytkownika
::       składającego plan/wniosek urlopowy
::   WE: _a - tabela, musi posiadać pole P().OSOBA
::----------------------------------------------------------------------------------------------------------------------
_nwu:=params_get().mp.load(exec('kind_in','#b_port')).p01;
P.cntx_psh();
OSOBA.cntx_psh();
_osoba:=exec('FindAndGet','#table',_a,_nwu,,'P().OSOBA',null());
_prac:=exec('FindAndGet','#table',OSOBA,_osoba,,'PIERWSZE','')+' '+exec('FindAndGet','#table',OSOBA,_osoba,,'NAZWISKO','');
_prac+=' numer teczki '+exec('FindAndGet','#table',_a,_nwu,,'P().T','');
P.cntx_pop();
OSOBA.cntx_pop();
'Został złożony nowy wniosek urlopowy przez pracownika: %1'@ [_prac]


\przelozony
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AC [20.14]
:: OPIS: wykorzystywany przy procesach (np. PER_WPU_WWW, PER_WPR_WWW) - formuła wyznaczająca e-mail użytkownika
::       składającego plan/wniosek urlopowy
::   WE: _a - tabela, musi posiadać pole KTO_WER
::----------------------------------------------------------------------------------------------------------------------
_nwu:=params_get().mp.load(exec('kind_in','#b_port')).p01;
P.cntx_psh();
OSOBA.cntx_psh();
_osoba:=exec('FindAndGet','#table',_a,_nwu,,'KTO_WER',null());
_prac:=exec('FindAndGet','#table',_a,_nwu,,'P().OSOBA',null());
_pracownik:=exec('FindAndGet','#table',OSOBA,_prac,,'PIERWSZE','')+' ';
_pracownik+=exec('FindAndGet','#table',OSOBA,_prac,,'NAZWISKO','');
_pracownik+=' numer teczki '+exec('FindAndGet','#table',_a,_nwu,,'P().T','');
_przelozony:=exec('FindAndGet','#table',OSOBA,_osoba,,'PIERWSZE','')+' ';
_przelozony+=exec('FindAndGet','#table',OSOBA,_osoba,,'NAZWISKO','');
OSOBA.cntx_pop();
P.cntx_pop();
{? _osoba<>null()
|| 'Użytkownik %1 uczestniczy w akceptacji wniosku urlopowego i powinien mieć uzupełnione pole adres e-mail.\n'
   'Należy uzupełnić e-mail użytkownika: Wspólne->Użytkownicy, role, uprawnienia->Inne dane'@ [_przelozony]
|| 'Pracownik %1 nie posiada przypisanego przełożonego lub przełożony nie ma przypisanej roli. \n'
   'Proces składania wniosku został zawieszony. \n'
   'Należy sprawdzić czy pracownik ma przełożonego: Wspólne->Ustawienia i parametryzacja->Kadry->Zależności służbowe \n'
   'oraz sprawdzić czy przełożony na odpowiednią rolę Przełożny (w wersji standard) Wspólne->Użytkownicy, role, \n'
   'uprawnienia->Uprawnienia, a następnie odblokować proces w dziedzinie Obsługa procesów'@ [_pracownik]
?}


\brak_czynnosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.14]
:: OPIS: informacja dla procesu o braku dostępu do czynności
::   WE:
::   WE: _a - tabela, musi posiadać pole AO
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp.load(exec('kind_in','#b_port'));
_nwu:=_mp.p01;
_msg:=_mp.p02;
{? exec('FindAndGet','#table',_a,_nwu)=~~
|| return('Brak wniosku lub wniosek nie został znaleziony. %1'@['(PKW_POR_IWWU)'])
?};
_msg


\opis_por_rdcr_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie POR_RDCR_WWW w zadaniu ręcznym, opis czynności ToDo - Dostarczenie raportu o
::       zarejestrowaniu w ZUS.
::----------------------------------------------------------------------------------------------------------------------
_edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
_tab:=params_exec('desc_manual_abs','%personel',_edokum);

_czlonek_rodz:='';

{? type_of(_edokum)=type_of(null) & _edokum<>null
|| EDOKUM.cntx_psh();
   EDOKUM.use(ref_name(_edokum));
   EDOKUM.index('ID'); EDOKUM.clear();
   {? EDOKUM.seek(_edokum)
   || EDOK_ATR.cntx_psh();
      {? exec('open_edk_atr', 'obiegi', _edokum)
      || _nazwisko:=exec('atr_get','portal_walidacja','Nazwisko');
         _imie:=exec('atr_get','portal_walidacja','Imie');
         _czlonek_rodz+='%1%2'@[{? +_nazwisko || ': '+_nazwisko || '' ?},{? +_imie || ' '+_imie || '' ?}]
      ?};
      EDOK_ATR.cntx_pop()
   ?};
   EDOKUM.cntx_pop();
   {? _tab.ZAW_DANE='T'
   || {? _tab.OBCY='T'
      || 'Dostarczenie raportu o zarejestrowanie w ZUS członka rodziny dla pracownika %1 %2: Paszport - %3%4'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_czlonek_rodz]
      |? +_tab.PESEL
      || 'Dostarczenie raportu o zarejestrowanie w ZUS członka rodziny dla pracownika %1 %2: PESEL - %3%4'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_czlonek_rodz]
      || 'Dostarczenie raportu o zarejestrowanie w ZUS członka rodziny dla pracownika %1 %2: Data urodzenia - %3%4'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_czlonek_rodz]
      ?}
   || 'Dostarczenie raportu o zarejestrowanie w ZUS członka rodziny dla pracownika%1'@@ [_czlonek_rodz]
   ?}
|| 'Dostarczenie raportu o zarejestrowanie w ZUS członka rodziny dla pracownika'@@
?}


\zglos_czl_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Sprawdza, czy należy przekazać zadanie dla roli Specjalista ds. kadr dotyczącego dostarczenia raportu o
::       zarejestrowaniu w ZUS.
::   WE: _a - EDOKUM
::   WY: 1/0 - należy wykonać zadanie / nie ma potrzeby wykonywania zadania
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) & #_a || _a || return(_result) ?};

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum)
|| EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum) & exec('atr_get','portal_walidacja','NieZglaszacDoUbezpieczenia')<>'T'
   || _result:=1
   ?};
   EDOK_ATR.cntx_pop()
?};
EDOKUM.cntx_pop();
_result


\gl_weryf_adres
:----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesach (np. POR_ZMUS_WWW) - formuła główna, weryfikacja adresu pracownika
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
_prac:=_type:='';
_info:='';
EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
ETYPY.cntx_psh();
EDOK_ATR.cntx_psh();
{? type_of(_edokum)=type_of(null) & EDOKUM.seek(_edokum,,1) & exec('open_edk_atr', 'obiegi', _edokum)
|| _prac:=exec('record','#to_string',EDOKUM.DOSTAWCA);
   _type:=EDOKUM.TYP().NAZWA;
   {? _type=exec('_zmiana_us','portal_walidacja').name
   || _info:='(Zdarzenia kadrowe -> Urzędy skarbowe -> Zapis: '@;
      _od:=exec('str2date','#convert',exec('atr_get','portal_walidacja','ZmianaOd'));
      OS_US.cntx_psh();
      OS_US.index('OD');
      OS_US.prefix(EDOKUM.DOSTAWCA,_od);
      {? OS_US.first()
      || US.cntx_psh();
         _info+='%1 %2)'[$OS_US.OD,OS_US.US().NU];
         US.cntx_pop()
      ?};
      OS_US.cntx_pop()
   ?}
?};
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
EDOKUM.cntx_pop();
_isInfo:=+_info;
'Czy dla pracownika %1zweryfikowano %2adres do celów podatkowych dla zmienionego Urzędu Skarbowego%3?'@
   [{? +_prac || _prac+' ' || '' ?},{? _isInfo || 'w ostatnio dodanym zapisie ' || ''?},
      {? _isInfo || ' '+_info || '' ?}]


\opis_por_zmus_www_adr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: wykorzystywany przy procesie POR_ZMUS_WWW w zadaniu ręcznym, opis czynności ToDo - Zweryfikowanie adresu
::       wnioskodawcy.
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual_abs','%personel',params_get().mp.load(exec('kind_in','#b_port')).p01);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zweryfikowanie adresu do celów podatkowych dla zmienionego Urzędu Skarbowego pracownika %1 %2: Paszport - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Zweryfikowanie adresu do celów podatkowych dla zmienionego Urzędu Skarbowego pracownika %1 %2: PESEL - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Zweryfikowanie adresu do celów podatkowych dla zmienionego Urzędu Skarbowego pracownika %1 %2: Data urodzenia - %3'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Zweryfikowanie adresu do celów podatkowych dla zmienionego Urzędu Skarbowego pracownika'@@
?}


\gl_por_prak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Wykorzystywany przy procesie PER_PRAK - formuła główna uruchomienie procesu praktyki
::   WE:
::   WY: _opis - Pytanie w procesie
::----------------------------------------------------------------------------------------------------------------------
_edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
_type:=_osoba:='';

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
ETYPY.cntx_psh();
{? type_of(_edokum)=type_of(null) & EDOKUM.seek(_edokum,,1)
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   _osoba:='%1 %2, data wniosku: %3'@[EDOKUM.DOSTAWCA().NAZWISKO,OSOBA.PIERWSZE,$EDOKUM.DATAW];
   OSOBA.cntx_pop();
   _type:=EDOKUM.TYP().NAZWA
?};
ETYPY.cntx_pop();
EDOKUM.cntx_pop();
_text:={? _type=exec('_praktyka','portal_walidacja').name & +_osoba
       || 'Czy rozpoczęto proces uzupełniania w systemie praktyki zgłoszonej przez: %1'@ [_osoba]
       || ''
       ?};

_loop:=1;
_result:=0;
{!
|? _loop
|! _wyb:=FUN.choice(_text,,'Szczegóły','Tak',,,'Nie');
   {? _wyb=1
::   szczegóły wniosku
   || params_exec('wysw_por_prak','%personel','Informacje z wniosku o praktykę')
   |? _wyb=2
   || _result:=1;
      _loop:=0
   |? _wyb=0
   || _result:=_loop:=0
   ?}
!};
_result


\opis_por_prak_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Wykorzystywany przy procesie PER_PRAK w zadaniu ręcznym, opis czynności ToDo - potwierdzenie
::       uruchomienia procesu praktyki
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_exec('desc_manual_abs','%personel',params_get().mp.load(exec('kind_in','#b_port')).p01);

{? _tab.ZAW_DANE='T'
|| 'Realizacja praktyki: %1 %2, data wniosku %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,$_tab.DATAW]
|| 'Realizacja praktyki'@@
?}


\wysw_por_prak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Wykorzystywany przy procesach wniosków z HR Portal w zadaniach ręcznych, formuła na wyświetl ToDo
::       - Informacja z wniosku w obiegu dot. praktyki
::   WE: [_a] [STRING] - ID_WP atrybutu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_id_wp:={? var_pres('_a')=type_of('') & +_a || _a || '' ?};
_par:=params_get();
_opis:='Komentarz odnośnie realizacji zgłoszony przez pracownika'@;
_tresc:='';
_TAB:=tab_tmp(1,
         'ZGL','STRING[100]','Zgłaszający',
         'PRAKT','STRING[100]','Imię i nazwisko osoby podejmującej praktyki',
         'WYDZ','STRING[100]','Jednostka organizacyjna',
         'OPIEKUN','STRING[100]','Opiekun',
         'MIEJSCE','STRING[100]','Miejsce praktyk',
         'RODZPRAK','STRING[100]','Rodzaj praktyk',
         'WYNAGR','REAL','Wynagrodzenie za praktyki',
         'OD','DATE','Data rozpoczęcia praktyk',
         'DO','DATE','Data zakończenia praktyk',
         'WY','REAL','Wymiar zatrudnienia',
         'ZAD','SYS_MEMO','Zadania',
         'INFO','SYS_MEMO','Informacje dodatkowe'
      );

{? type_of(_par)<>type_of(~~) & var_pres('mp',_par)>0
|| _edokum:=params_get().mp.load(exec('kind_in','#b_port')).p01;
   _prac:='';
   EDOKUM.cntx_psh();
   EDOKUM.use(ref_name(_edokum));
   EDOKUM.index('ID'); EDOKUM.clear();
   {? type_of(_edokum)=type_of(null) & EDOKUM.seek(_edokum,,1)
   || EDOK_ATR.cntx_psh();
      {? exec('open_edk_atr','obiegi',_edokum)
      ||
         OSOBA.cntx_psh();
         _zgl:={? EDOKUM.DOSTAWCA<>null() || '%1 %2'[EDOKUM.DOSTAWCA().PIERWSZE,OSOBA.NAZWISKO] || '' ?};
         OSOBA.cntx_pop();

         _getAtr:="exec('atr_get','portal_walidacja',_a)";

         _TAB.blank();
         _TAB.ZGL:=_zgl;
         _TAB.PRAKT:='%1 %2'[_getAtr('Imie'),_getAtr('Nazwisko')];
         _TAB.WYDZ:=_getAtr('DzialNazwa');
         _TAB.OPIEKUN:=_getAtr('OpiekunImieNazwisko');
         _TAB.MIEJSCE:=_getAtr('MiejsceWykPracyNazwa');
         _TAB.RODZPRAK:=_getAtr('RodzajPraktyki');
         _TAB.WYNAGR:=#gsub(_getAtr('WynagrodzeniePraktyki'),',','.');
         _TAB.OD:=exec('to_ti_dt','form_ob',_getAtr('DataOdPraktyki'),'D');
         _TAB.DO:=exec('to_ti_dt','form_ob',_getAtr('DataDoPraktyki'),'D');
         _wyl:=#_getAtr('EtatL');
         _wym:=#_getAtr('EtatM');
         _TAB.WY:={? _wym || (_wyl/_wym)$3 || 0 ?};
         _zad:=exec('atr_get','portal_walidacja','Zadania','WAR_W');
         _info:=_getAtr('InformacjeDodatkowe');
         {? _TAB.add(1)
         || _TAB.memo_set(_zad,'ZAD') & _TAB.memo_put(,'ZAD');
            _TAB.memo_set(_info,'INFO') & _TAB.memo_put(,'INFO')
         ?};
::       okienko
         _width:=50;
         _red:=_TAB.mk_edit('Informacja o praktykach'@,,'#infopraktyki0');
         _TAB.win_esep(_red,'Zgłaszający'@);
         _TAB.win_efld(_red,,'ZGL',,,_width,,1,'Osoba zgłaszająca');
         _TAB.win_esep(_red,'Praktyki'@);
         _TAB.win_efld(_red,,'OPIEKUN',,,_width,,1);
         _TAB.win_efld(_red,,'PRAKT',,,_width,,1);
         _TAB.win_efld(_red,,'OD',,,,,1);
         _TAB.win_efld(_red,,'DO',,,,,1);
         _TAB.win_efld(_red,,'WYDZ',,,_width,,1);
         _TAB.win_efld(_red,,'MIEJSCE',,,_width,,1);
         _TAB.win_efld(_red,,'WY',,,13,,1);
         _TAB.win_efld(_red,,'RODZPRAK',,,_width,,1);
         _TAB.win_efld(_red,,'WYNAGR',,,13,2,1);
::       memo
         _TAB.win_efld(_red,,'ZAD',,,_width,-5,1);
         _TAB.win_efld(_red,,'INFO',,,_width,-5,1);
         _TAB.win_edit(_red);
         _TAB.display()
      ?};
      EDOK_ATR.cntx_pop()
   ?};
   EDOKUM.cntx_pop()
?};
clr_edit()


\per_rej_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła wyznaczająca e-mail rejestrującego wniosek
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_edokum:=exec('FindAndGet','#table',EDOKUM,_in.p01,,,null());

_email:='';
EDOKUM.cntx_psh();
EDOKUM.index('ID');
EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum))
|| _email:=exec('FindAndGet','#table',USERS,EDOKUM.USERS,,'EMAIL','')
?};
EDOKUM.cntx_pop();
_email


\czy_odb_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: Wykorzystywany przy procesie PEP_INNE_WWW do sprawdzenia
::       czy po akceptacji powinniśmy uruchomić odbiór dokumentów
::   WE: _a [DICT] - obiekt z parametrami wejściowymi z poprzedzającej czynności (spodziewamy się, że będzie tam EDOKUM)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_edokum:=exec('FindAndGet','#table',EDOKUM,_a.EDOKUM,,,null());
_result:=0;
EDOKUM.cntx_psh();
{? EDOKUM.seek(_edokum,ref_name(_edokum),1) & EDOKUM.STATUS='Y' & EDOKUM.B_PREL=''
|| _result:=~exec('isEdokumInBP_UID','paperless',EDOKUM.uidref())
?};
EDOKUM.cntx_pop();
_result


:Sign Version 2.0 jowisz:1048 2023/06/23 14:15:44 c4c1bcd262a8ead2e028fa54348fd859a7ecc20b9342292113d7141eb32f8362af1d2055f89ddde667d654e3bfdb52ad3b9389cb4d649db39505488fbe7b4bc6d4359d7c91226db813b570c9ef63089dbf46062540aefa7e2b87d33c4a3c41002a8b645039dd0f01fcd566b5ab7764c6d2c745aaaa5aca07e1fab0dea8f9967f
