:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %keygen.fml
:: Utworzony: 13.09.2018
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do generowania kluczy grupujących
::======================================================================================================================


\users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Wystawia klucz grupujący z aktywnymi użytkownikami - $USERS.ref()
::   WE: [_a] - kod czynności - ogranicza listę użytkowników do uprawnionych do niej
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _uid:=_a
|| _uid:=''
?};

_mp:=params_get().mp;

_mp.grpkey();

USERS.cntx_psh();
USERS.index('USR_AKOD');
USERS.prefix('T');
{? USERS.first()
|| {!
   |? {? _uid='' | exec('chk_role','#b__box',USERS.ref(),_uid)
      || _mp.grpkeyAdd($USERS.ref())
      ?};
      USERS.next()
   !}
?};
USERS.cntx_pop();

_mp.done();
~~


\umowy_harm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Wystawia klucz grupujący z harmonogramami które nie zostały zredagowane w danym roku
::   WE: [_a] - INTEGER rok harmonogramu, jeżeli nie podany to bieżący
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ar:=(date()~1);
{? var_pres('_a')=type_of(0)
|| _ar:=_a
?};

_mp:=params_get().mp;
_in:=params_get().in;

:: Rok może też przyjść w parametrze wejściowym ITEM
{? _in.ITEM<>''
|| _ar:=#_in.ITEM
?};

_mp.grpkey();

HARMON.cntx_psh();
HN.cntx_psh();
HN.index('NAZ');
HN.prefix('T');
{? HN.first()
|| {!
   |? {? exec('is_ended','umowy_harm',,_ar)=0
      || _mp.grpkeyAdd($HN.ref())
      ?};
      HN.next()
   !}
?};

HN.cntx_pop();
HARMON.cntx_pop();

_mp.done();
~~


\rem_gwar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Wystawia klucz grupujący z zasobami, którym się skończyła, lub zaraz skończy gwarancja
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=params_get().in;

_mp.grpkey();
REM_GWAR.cntx_psh();
REM_GWAR.index('SENT_BEF');
REM_GWAR.prefix('N');
REM_ZAS.cntx_psh();
{? REM_GWAR.first()
|| {!
   |?
      {? REM_GWAR.REM_ZAS().AKT='T'
      || {? exec('rem_gwar_chk','zasoby')=1
         || _mp.grpkeyAdd($REM_GWAR.ref())
         ?}
      ?};
      REM_GWAR.next()
   !}
?};

REM_GWAR.index('SENT_AFT');
REM_GWAR.prefix('N');
{? REM_GWAR.first()
|| {!
   |?
      {? REM_GWAR.REM_ZAS().AKT='T'
      || {? exec('rem_gwar_chk','zasoby')=2
         || _mp.grpkeyAdd($REM_GWAR.ref())
         ?}
      ?};
      REM_GWAR.next()
   !}
?};
REM_ZAS.cntx_pop();
REM_GWAR.cntx_pop();
_mp.done();
~~


\oddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Wystawia klucz grupujący z oddzialami - ODDZ.KOD
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_mp.grpkey();

ODDZ.cntx_psh();
ODDZ.prefix();
{? ODDZ.first()
|| {!
   |? _mp.grpkeyAdd(ODDZ.KOD);
      ODDZ.next()
   !}
?};
ODDZ.cntx_pop();

_mp.done();
~~


\rem_zgl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Wystawia klucz grupujący z niezamkniętymi zgłoszeniami remontowymi - $REM_ZGL.ref()
::       Uwzględnia zgłoszenia, które nie mają aktualnie keyRefa, dzięki czemu domyślamy się, że nie są w procesie
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_mp.grpkey();

REM_ZGL.cntx_psh();
::exec('rem_open','open_tab','___');
REM_ZGL.index('SYMBOL');
REM_ZGL.prefix();
{? REM_ZGL.first()
|| {!
   |? {? REM_ZGL.STAT_REJ<>exec('status_closed','remonty_zgloszenia')
         & exec('keyRefOtherProc','#b__box',REM_ZGL.uidref(),_mp)=0
      || _mp.grpkeyAdd($REM_ZGL.ref())
      ?};
      REM_ZGL.next()
   !}
?};
REM_ZGL.cntx_pop();

_mp.done();
~~


\rem_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Wystawia klucz grupujący z zasobami remontowymi - $REM_ZAS.ref()
::   WE: [_a] - parametr sterujący zawartością klucza, możliwe opcje:
::              [0] - wszystkie zasoby
::              1 - zasoby, które mają definicje zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _opt:=_a || _opt:=0 ?};

_mp:=params_get().mp;

_mp.grpkey();

REM_ZAS.cntx_psh();
REM_ZAS.index('AKT');

REM_CYKL.cntx_psh();
REM_CYKL.index('REM_ZAS');

REM_ZAS.prefix('T');
{? REM_ZAS.first()
|| {!
   |? {? _opt
      || REM_CYKL.prefix(REM_ZAS.ref());
         {? REM_CYKL.first()
         || _mp.grpkeyAdd($REM_ZAS.ref())
         ?}
      || _mp.grpkeyAdd($REM_ZAS.ref())
      ?};
      REM_ZAS.next()
   !}
?};

REM_CYKL.cntx_pop();
REM_ZAS.cntx_pop();

_mp.done();
~~


\dokump_mail_grpkey
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: wysyłanie maili wg zapisów w tabeli DOKUMP (powiadomienia o kontaktach) - klucz grupujący
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_mp.grpkey();

DOKUMP.cntx_psh();
DOKUMP.index('SEND_R');
DOKUMP.prefix('M','N');
{? DOKUMP.first()
|| {!
   |? {? DOKUMP.DOKUM<>null() & (DOKUMP.DOKUM().TYP='K' | DOKUMP.DOKUM().TYP='D')
      || _mp.grpkeyAdd(DOKUMP.uidref())
      ?};
      DOKUMP.next()
   !}
?};
DOKUMP.cntx_pop();

_mp.done();
~~


\zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wystawia klucz grupujący ze zgłoszeniami jednorazowymi, do których nie ma wystawionych KPO
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=params_get().in;

_mp.grpkey();

:: Sprawdzenie parametryzacji BDO
{? exec('is_active','bdo_fun') & exec('is_configured','bdo_fun')
|| ZLP.cntx_psh();
   _names:=ZLP.names();
   {? _names.first()
   || {!
      |? ZLP.use(_names.NAME);
         _where:=
            'ZLP.STAT_REJ=\'Z\' and '
            'ZLP.SENT_KPO=\'N\' and '
            'ZLP.KPO is null and '
            'ZLP.ODP is not null and '
            'ZLP.NOMAIL=\'T\'';
         ZLP.f_set('KPO',,_where);
         {? ZLP.f_first()
         || {!
            |? _result:=exec('zlp2TR_NAG','transport_wspolne',ZLP.uidref(),1);
               {? _result.STAT_REJ<>'N'
               || _mp.grpkeyAdd($ZLP.ref())
               ?};
               obj_del(_result);
               ZLP.f_next()
            !}
         ?};
         ZLP.f_clear();
         _names.next()
      !}
   ?};
   ZLP.cntx_pop()
?};
_mp.done();
~~


\dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wystawia klucz grupujący dla dokumentów, które spełniają podane wymagania - $DOKUM.ref()
::   WE: _a - wartość pola DOKUM.BL_STAT
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_mp.grpkey();

DOKUM.cntx_psh();
DOKUM.prefix();
DOKUM.f_set(,,'DOKUM.FIRMA=:_a and DOKUM.BL_STAT=\':_b\'',REF.FIRMA,_a);
{? DOKUM.f_first()
|| {!
   |? _mp.grpkeyAdd($DOKUM.ref());
      DOKUM.f_next()
   !}
?};
DOKUM.f_clear();
DOKUM.cntx_pop();

_mp.done();
~~


\json_tab_uidref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wystawia klucz grupujący dla uidref()-ów z dowolnej tabeli przekazanych w parametrze
::   WE: _a [STRING] tablica TAB.uidref()-ów w postaci JSON, czyli np.: [{"uidref": "wartość"}, {"uidref": "wartość"}]
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_mp.grpkey();

:: optymistycznie zakładam, że jest to tablica z obiektami {"uidref": "wartość"}
_obj:=json_parse(_a);

{? var_pres('_obj')>100
|| _size:=obj_len(_obj);
   {? _size>0
   || {! _it:=1.. _size
      |! _mp.grpkeyAdd(_obj[_it].uidref+16)
      !}
   ?}
?};

_mp.done();
~~


\zk_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Wystawia klucz grupujący z pozycjami przekazanego w pamarametrze nagłówka zamówienia sprzedaży
::   WE: _a - ZK_N.ref()
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=params_get().in;

_mp.grpkey();

_zk_n:={? var_pres('_a')=type_of(null()) || _a || null() ?};
{? _zk_n<>null()
|| M.cntx_psh();
   ZLZAM.cntx_psh();
   ZK_P.cntx_psh();
   ZK_P.use('zkpoz'+(ref_name(_zk_n)+3));
   ZK_P.index('ZAM');
   ZK_P.prefix(_zk_n);
   {? ZK_P.first()
   || {!
      |?
::       Odrzucenie pozycji na usługi i na materiały, które nie są wyrobami/półproduktami
         {? ~(ZK_P.M().RODZ='U' | (~(ZK_P.M().R='W' | ZK_P.M().R='P')))
         ||
::          Sprawdzenie, czy jest ilość dostępna (czy już zleceno na całość)
            _ilz:=ZK_P.ILP-ZK_P.ILRB;
            ZLZAM.index('ZMZL');
            ZLZAM.prefix($ZK_P.ref());
            {? ZLZAM.first()
            || {!
               |? _ilz-=ZLZAM.ILZL;
                  ZLZAM.next()
               !}
            ?};
            {? _ilz>0
            || _mp.grpkeyAdd($ZK_P.ref())
            ?}
         ?};
         ZK_P.next()
      !}
   ?};
   ZK_P.cntx_pop();
   M.cntx_pop();
   ZLZAM.cntx_pop();
   _mp.done()
?};
~~


\grop_zl_to_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Wystawia klucz grupujący z ze zleceniami wchodzącymi w skład grupy operacji, które jeszcze nie zostały zaplanowane
::   WE: [_a] - GROP.ref()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_grop:=null();
{? var_pres('_a')=type_of(GROP.ref())
|| _grop:=_a
?};
_mp:=params_get().mp;
_in:=params_get().in;

:: GROP może też przyjść w parametrze wejściowym ITEM
{? _in.ITEM<>''
|| _grop:=exec('FindAndGet','#table',GROP,_in.ITEM,,,null())
?};

_mp.grpkey();
GROPP.cntx_psh();
GROPP.index('GROP2');
GROPP.prefix(_grop);
{? GROPP.first()
|| {!
   |? {? GROPP.ZL<>null() & exec('zl_planned','px_obj',GROPP.ZL,exec('get_mainversion','px_ver'))=0
      || _mp.grpkeyAdd($GROPP.ZL)
      ?};
      GROPP.next()
   !}
?};
GROPP.cntx_pop();
_mp.done();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:15:44 655b847d817489d13c1a74de111ad974fce549b1c173bdcc69e783b89b3c04ce7ab4b4aca2bed7578a2da746172ecae00052e4c2f70625cd9ec344eb393fdb46a709102a4ea1c2f11c59fbb1c42fbf7bab8f1e020ed0498b5c9ce4bb70934dcef9ac549ba8cc818e845c6454ac6bb9dbbec85377503f2c454af2cc4024811cd0
