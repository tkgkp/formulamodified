:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %businesslink3.fml
:: Utworzony: 10.08.2020
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły wspomagające obsługę testów systemu Businesslink multitenant (e-invoicingu).
::            Formuły pomocnicze do procesów obsługujących komunikację Businesslinkiem
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Główna formuła startowa.
::----------------------------------------------------------------------------------------------------------------------
on_error(0);

_szer:=60;

_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'NAME','STRING[%1]' [$_szer],'Nazwa',
   'HELP','STRING[60]','Podpowiedź',
   'FORMULA','STRING[255]','Formuła do wykonania'
);
_add:="
   _a.blank();
   _a.LP:=_a.size()+1;
   {? var_pres('_d')=3
   || _a.FORMULA:=$_d
   ?};
   _a.NAME:=
      {? _a.FORMULA=''
      || '[ %1 ]' [_b]
      || _b
      ?};
   _a.HELP:={? var_pres('_c')=type_of('') || _c || '' ?};
   _a.add()
";

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_add(_TAB,'Na skróty'@);
_add(_TAB,'Obszar roboczy'@,'Obszar roboczy rejestr dokumentów'@,"exec('zbl_dok','zbl')");
_add(_TAB,'Parametry'@,'Redagowanie parametrów'@,"exec('params','businesslink3')");
_add(_TAB,'Token OAuth'@,'Pobiera token dla aktualnego dzierżawcy'@,
   "exec('czytaj','#stalesys',,XINFO);exec('get_token','sl_api','Businesslink',exec('token_id','businesslink3'))"
);
_add(_TAB,'Wymiana danych'@,'Wymiana danych z innymi systemami'@,"exec('sync_def_sel','synchro')");
_add(_TAB,'Identyfikatory rekordów'@,'Wertowanie identyfikatorów'@,"exec('def','#sync_id','ZWS')");
::_add(_TAB,'Definicje tabel i pól dodatkowych'@,'Definicje tabel i pól dodatkowych na portalu'@,
::   "exec('portalk_select','portal_engine')"
::);
::_add(_TAB,'Zarządzanie uprawnieniami'@,'Zarządzania uprawnieniami do elementów portalu'@,
::   "exec('portalu_select','portal_engine')"
::);
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_add(_TAB,'Narzędzia'@);
_add(_TAB,'Zewnętrzne identyfikatory rekordów'@,'Aktualizacja definicji zewnętrznych identyfikatorów rekordów'@,"
   _ret:=exec('init','sync_id');
   {? _ret.RESULT
   || FUN.info('Operacja zakończona sukcesem.'@)
   || FUN.info('Operacja nie powiodła się [%1].'@ [_ret.ARGS.KOD])
   ?}"
);
_add(_TAB,'Rekordy do przetworzenia'@,'Wertowanie identyfikatorów rekordów do przetworzenia'@,
   "exec('new_sync','%portal')"
);
_add(_TAB,'Wylogowanie użytkowników mbasic (m.in. tomcat)'@,'Wylogowanie użytkowników mbasic (wśród nich ODBC dla tomcat)'@,"
   {? FUN.ask(
         'Czy wylogować użytkowników mbasic?\n\n'
         'Wśród nich znajdą się między innymi użytkownicy ODBC, np. tomcat i #macroim (komunikator).'@
      )
   || exec('new','__madmin').del_mbasic_users()
   ?};
   ~~"
);
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
::_add(_TAB,'Postman'@);
::_add(_TAB,'Kolekcja'@,'Przygotowanie pliku z kolekcją dla Postmana-a'@,"exec('postman_kolekcja','%portal')");
::_add(_TAB,'Środowisko'@,'Przygotowanie pliku ze środowiskiem dla Postmana-a'@,"exec('postman_env','%portal')");
_add(_TAB,'MWAC'@);
_add(_TAB,'Menadżer'@,'Menadżer - klient MacroWebAPI'@,"exec('manager','businesslink3')");
_add(_TAB,'Metody'@,'Prezentacja wszystkich dostępnych metod'@,"exec('methods','%businesslink3')");
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_dh:=_TAB.size()+1;
{? _dh<5
|| _dh:=5
|? _dh>30
|| _dh:=30
?};
_ws:=_TAB.mk_sel('Businesslink — funkcje pomocnicze'@,'N',,,,,_dh,,'U');
_TAB.win_fld(_ws,,'NAME',,,,,,,1);
_TAB.win_act(_ws,,'Formuła','Uruchom'@,,,"($cur_tab(1,1).FORMULA)()",,1,,,,'U');
_TAB.win_act(_ws,,'Formuła','Informacja'@,,,"FUN.info(cur_tab(1,1).HELP)",,,,,,'I');
_TAB.win_act(_ws,,'Rekord',,,,"
   _par:=params_get();
   _TAB:=_par.TAB;
   echo(_TAB.HELP);
   {? _TAB.FORMULA=''
   || _ag:='U';
      _color:=1
   || _ag:='';
      _color:=0
   ?};
   {? _a
   || _TAB.actions_grayed(_par.ws,_ag)
   ?};
   _color
   ");
_TAB.win_sel(_ws);
params_set(
   'TAB',_TAB,
   'ws',_ws,
   'szer',_szer
);
_TAB.select();

~~


\methods
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła prezentuje listę wszystkich dostępnych metod.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_client:=exec('client','__mwac','blmt.mwac');
{? ~_client.Valid
|| FUN.info('Inicjalizacja modułu obsługi klienta MacroWebApi nie powiodła się.'@);
   return(0)
?};
::exec('portaljson_decl','portal_engine');

_TAB:=tab_tmp(1,
   'METHOD','STRING[50]','Metoda'@,
   'BASE','STRING[50]','Obsługiwana tabela'@,
   'RESTMETH','STRING[10]','Metoda'@,
   'FRQ','INTEGER','Szablon uzupełniony?'@,
   'REQUEST','SYS_MEMO','Szablon żądania'@,
   'FRS','INTEGER','Szablon usupełniony'@,
   'RESPONSE','SYS_MEMO','Szablon odpowiedzi'@,
   'FF','INTEGER','Szablon uzupełniony?'@,
   'FML','SYS_MEMO','Szablon kodu'@,
   'COLOR','STRING[11]','Kolor'@
);
{! _it:=1 .. obj_len(_client.Methods)
|! _TAB.blank();
   _TAB.METHOD:=_client.Methods[_it].NAME;
   _TAB.RESTMETH:=_client.Methods[_it].RESTMETH;
::   _TAB.BASE:=
::      {? _TAB.METHOD+6='Modify'
::      || _TAB.METHOD-6
::      |? _TAB.METHOD+3='Get'
::      || _TAB.METHOD-3
::      |? _TAB.METHOD+6='Delete'
::      || _TAB.METHOD-6
::      || _TAB.METHOD
::      ?};
   {? +_TAB.BASE+12>31
   || _TAB.COLOR:='255:0:0'
   ?};
   {? _client.Methods[_it].NAME+6<>'Modify'
   || _TAB.FF:=-1
   ?};
   _TAB.add()
!};

_frq:="
   _TAB:=cur_tab(1,1);
   _par:=params_get();
   _eol:=_par.eol;
   {? _TAB.FRQ
   || _TAB.memo_get(,'REQUEST')
   || _ometh:=_par.client.getMethod(_TAB.METHOD);
      {? _ometh.Valid
      || _templ:=gsub(_ometh.getRequestTemplate(),spli_str('{;,',';'),spli_str('{%1;,%1' [_eol],';'));
         _TAB.memo_set(_templ,'REQUEST');
         _TAB.FRQ:=1;
         _TAB.put();
         _TAB.memo_put(,'REQUEST')
      ?}
   ?};
";
_frs:="
   _TAB:=cur_tab(1,1);
   _par:=params_get();
   _eol:=_par.eol;
   {? _TAB.FRS
   || _TAB.memo_get(,'RESPONSE')
   || _ometh:=_par.client.getMethod(_TAB.METHOD);
      {? _ometh.Valid
      || _templ:=gsub(_ometh.getResponseTemplate(),spli_str('{;,',';'),spli_str('{%1;,%1' [_eol],';'));
         _TAB.memo_set(_templ,'RESPONSE');
         _TAB.FRS:=1;
         _TAB.put();
         _TAB.memo_put(,'RESPONSE')
      ?}
   ?};
";
_ws:=_TAB.mk_sel('Metody'@,,,'methods',,,,,'U');
_TAB.win_fld(_ws,,'METHOD',,,,,,'Nazwa'@,,'Nazwa metody'@);
_TAB.win_act(_ws,,'Formuła','Żąd&anie'@@,,'Prezentacja szablonu żądania'@,$(_frq+"_TAB.memo_view(,'REQUEST')"),,,,,,'A');
_TAB.win_act(_ws,,'Formuła','&Odpowiedź'@@,,'Prezentacja szablonu odpowiedzi'@,$(_frs+"_TAB.memo_view(,'RESPONSE')"),,,,,,'O');
::_TAB.win_act(_ws,,'Formuła','FML'@@,,'Prezentacja szablonu kodu'@,$(_fj+"
::   {? _TAB.FF
::   || _TAB.memo_get(,'FML')
::   || _obj:=_par.obj;
::      _obj.init(_TAB.memo_txt(0,1,'JSON'));
::      _FLDS:=_obj.getFlds('LP');
::      {? _FLDS.first()
::      || _fml:='_obj.create();'+(2*_eol);
::         {!
::         |? {? 7+_FLDS.NAME<>'__exf__'
::            || {? ',__ModifiedDate_cloud,PersonId,'*(',%1' [_FLDS.NAME])
::               || _fml+='::'
::               ?};
::               _val:=
::                  {? _FLDS.NAME='__id_cloud'
::                  || '{? _id || _id || ~~ ?}'
::                  |? _FLDS.NAME='__id_erp'
::                  || 'QQQ.uidref()'
::                  |? _FLDS.NAME='__ModifiedDate_erp'
::                  || 'QQQ.idput_value()'
::                  |? _FLDS.NAME='PersonId__id_Erp'
::                  || 'P.uidref()'
::                  || ''
::                  ?};
::               _fml+='_obj.set(\\'%1\\',%2);%3' [_FLDS.NAME,_val,_eol]
::            ?};
::            _FLDS.next()
::         !};
::         _fml+='%1_obj.save();' [_eol];
::         _TAB.memo_set(_fml,'FML');
::         _TAB.FF:=1;
::         _TAB.put();
::         _TAB.memo_put(,'FML')
::      ?}
::   ?};
::   _TAB.memo_view(,'FML')
::   "),,,,,,
::   'F'
::);
_TAB.win_act(_ws,,'Szukaj');
_TAB.win_act(_ws,,'Kolejność');
_TAB.win_act(_ws,,'Rekord',,,,"
   _TAB:=cur_tab(1,1);
::   {? _a
::   || _ws:=cur_win(1,1);
::      _TAB.actions_grayed(_ws,{? _TAB.FF=-1 || 'F:' || ':' ?});
::      _TAB.actions(_ws,,{? _TAB.FF=-1 || 'J' || 'F' ?},1)
::   ?};
   _TAB.COLOR
");
_TAB.win_btn(_ws,'text=%1' ['Żąd&anie'@],'menu:A');
_TAB.win_btn(_ws,'text=%1' ['&Odpowiedź'@],'menu:O');
::_TAB.win_btn(_ws,'text=%1' ['Pomoc'@],'menu:P');
_TAB.win_sel(_ws);

params_set(
   'client',_client,
::   'obj',obj_new(@.CLASS.PortalJSON),
   'eol',%10
);
_TAB.select()


\dokum_to_html
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zwraca treść html powiadomienia z listą dokumentów
::       Sposób użycia - wpisanie do pola 'Treść html': $exec('dokum_to_html','%businesslink3',_a.p01)
::       albo: $exec('dokum_to_html','%businesslink3',params_get().in.p01)
::   WE: _a - lista DOKUM.uidref()-ów (w postaci tablicy JSON)
::       _b - sposób działania (ustalana jest treść powiadomienia):
::            0-cała lista,
::            1-tylko te nowe DOKUM-y, którymi trzeba się zająć
::            2-wszystkie te DOKUM-y, którymi trzeba się zająć
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że jest to tablica z obiektami {"uidref": "wartość"}
_obj:=json_parse(_a);

_option:=_b;

{? _option=1
|| _title:='Lista nowych dokumentów dostępnych w Businesslink, wymagających obsługi manualnej'
|? _option=2
|| _title:='Lista dokumentów dostępnych w Businesslink, wymagających obsługi manualnej'
|| _title:='Lista nowych dokumentów dostępnych w Businesslink'
?};

_doki:=0;

{? var_pres('_obj')>100
|| _size:=obj_len(_obj);
   {? _size>0
   || _doki:=1;
      _result:='<p>%1:</p>\n'[_title];
      _result+='<ul>\n';
      {! _it:=1.. _size
      |! _result+=
            '<li>%1</li>\n'
            [exec('FindAndGet','#table',DOKUM,_obj[_it].uidref,,"SYM_ZEW",'[usunięty]')]
      !};
      _result+='</ul>\n';
::    Przycisk z pierwszym dokumentem
      _dokum:=exec('FindAndGet','#table',DOKUM,_obj[1].uidref,,"SYM_ZEW",'');
      _link_desk:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',_obj[1].uidref));
      _link_html:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',_obj[1].uidref),XINFO.LINK_INT);
      {? _link_html=''
      || _result+=
            '[[BODY_BUTTON(%1,%2,%3)]]\n'
            [  _link_desk,
               'Dokument: %1'[_dokum],
               'Dokument: %1'[_dokum]
            ]
      || _result+=
            '[[BODY_BUTTON2(%1,%2,%3,%4,%5,%6)]]\n'
            [  _link_desk,
               'Dokument: %1'[_dokum],
               'Dokument: %1'[_dokum],
               _link_html,
               'Dokument: %1'[_dokum],
               'Dokument: %1'[_dokum]
            ]
      ?}
   ?}
?};

{? _doki=0
|| _result:='<p>Brak nowych dokumentów dostępnych w Businesslink.</p>\n'
?};

_result


\dokum_empty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Sprawdza, czy przekazana lista dokumentów jest pusta
::       Sposób użycia - warunek o treści: exec('dokum_empty','%businesslink3',_a.DOKUM)
::   WE: _a - lista DOKUM.uidref()-ów (w postaci tablicy JSON)
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że jest to tablica z obiektami {"uidref": "wartość"}
_obj:=json_parse(_a);

_empty:=1;

{? var_pres('_obj')>100
|| _empty:=(obj_len(_obj)=0)
?};

_empty


\dokum_visible
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Modyfikacja listy dokumentów - pozostawienie tylko tych, co mają pole DOKUM.BL_VISIB='T'
::   WE: _a - lista DOKUM.uidref()-ów (w postaci tablicy JSON)
::   WY: lista DOKUM.uidref()-ów (w postaci tablicy JSON)
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że jest to tablica z obiektami {"uidref": "wartość"}
_jman:=exec('json_man','__jsonm',_a);
_jman1:=_jman.new('[]');

_size:=_jman.countChildren();
{! _it:=1.. _size
|! _uidref:=_jman.getValue('[%1].uidref'[$_it]);
   {? exec('FindAndGet','#table',DOKUM,_uidref,,"@.DOKUM.BL_VISIB='T'",0)
   || _json:=_jman.getJSON('[%1]'[$_it]);
      _jman1.setObject(_jman1.addChildElement(''),_json)
   ?}
!};

_jman1.getJSON()


\dokum_to_service
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Lista dokumentów wymagających obsługi manualnej
::   WE: [_a] - liczba dni wstecz dla nowych zapisów, które sprawdzać (domyślnie 10000, czyli praktycznie bez limitu);
::       wpisanie liczby ujemnej powoduje także przyjęcie wartości 10000
::   WY: lista DOKUM.uidref()-ów (w postaci tablicy JSON) - jest to tablica z obiektami {"uidref": "wartość"}
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| {? _a<0 || _days:=10000 || _days:=_a ?}
|| _days:=10000
?};

_time_ident:=time_ident(date()-_days,time(0,0,0));

_jman:=exec('json_man','__jsonm','[]');
   _jman1:=_jman.new('{}');
   _jman1.setValue(_jman1.addChildElement('','uidref'),'');

DOKUM.cntx_psh();
DOKUM.index('BL');
DOKUM.prefix('T',REF.FIRMA,'P','T');
{? DOKUM.first()
|| {!
   |? {? DOKUM.idadd_value()>_time_ident
      || _jman1.setValue('uidref',DOKUM.uidref());
         _jman.setObject(_jman.addChildElement(''),_jman1.getJSON())
      ?};
      DOKUM.next()
   !}
?};
DOKUM.cntx_pop();

_jman.getJSON()


\edok_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [21.14]
:: OPIS: Formuła testowa do automatycznej rejestracji faktur w obiegu businesslink.
::       Przykład wywołania we wtyczce: params_exec('edok_auto','%businesslink3',_a)
::   WE: _a - 0 (Parametry domyślne dla okienka do parametryzacji)
::            1 (Parametry domyślne w tabeli EDOKUM)
::            3 (Obsługa informacji dodatkowych)
::   WY: 0/1/-1
::----------------------------------------------------------------------------------------------------------------------
:: Definicja obiektu __PAR wykorzystanego do obsługi parametrów w okienku (dla ręcznej rejestracji)
:: __PAR.ODD:=__PAR.TYP:=__PAR.SL:=''; __PAR.PAY:=null;
{? _a=0
|| ETYPY.cntx_psh(); ETYPY.index('UNIK');
   ETYPY.prefix();
   TYPOBIEG.cntx_psh();
   TYPOBIEG.index('UNIK'); TYPOBIEG.prefix('Obieg faktur',);
   _typobieg:={? TYPOBIEG.first() || TYPOBIEG.ref() || null ?};
   TYPOBIEG.cntx_pop();
   {? EDOKUM.KOREKTA='T'
   || OBIEGI.TYP:={? ETYPY.find_key(_typobieg,'Korekta')
                  || SKID.SL_KH:=ETYPY.DOM_SL().SLU().NAZ;
                     {? SKID.SL_KH='' || SKID.SL_KH:='KONTRAHENCI' ?};
                     ETYPY.ref()
                  || null()
                  ?}
   || OBIEGI.TYP:={? ETYPY.find_key(_typobieg,'Faktura VAT')
                  || SKID.SL_KH:=ETYPY.DOM_SL().SLU().NAZ;
                     {? SKID.SL_KH='' || SKID.SL_KH:='KONTRAHENCI' ?};
                     ETYPY.ref()
                  || null()
                  ?}
   ?};
   ETYPY.cntx_pop();
   ODD.cntx_psh(); ODD.prefix();
   OBIEGI.ODD:={? ODD.find_key(REF.FIRMA,'CENTRALA',) || ODD.ref() || null ?};
   ODD.cntx_pop();
   1
|? _a=1
|| {? var_press('__PAR')<=0
   || ETYPY.cntx_psh(); ETYPY.index('UNIK');
      ETYPY.prefix();
      TYPOBIEG.cntx_psh();
      TYPOBIEG.index('UNIK'); TYPOBIEG.prefix('Obieg faktur',);
      _typobieg:={? TYPOBIEG.first() || TYPOBIEG.ref() || null ?};
      TYPOBIEG.cntx_pop();
      {? EDOKUM.KOREKTA='T'
      || EDOKUM.TYP:={? ETYPY.find_key(_typobieg,'Korekta')
                     || SKID.SL_KH:=ETYPY.DOM_SL().SLU().NAZ;
                        {? SKID.SL_KH='' || SKID.SL_KH:='KONTRAHENCI' ?};
                        ETYPY.ref()
                     || null()
                     ?}
      || EDOKUM.TYP:={? ETYPY.find_key(_typobieg,'Faktura VAT')
                     || SKID.SL_KH:=ETYPY.DOM_SL().SLU().NAZ;
                        {? SKID.SL_KH='' || SKID.SL_KH:='KONTRAHENCI' ?};
                        ETYPY.ref()
                     || null()
                     ?}
      ?};
      ETYPY.cntx_pop();
      ODD.cntx_psh(); ODD.prefix();
      EDOKUM.ODD:={? ODD.find_key(REF.FIRMA,'CENTRALA',) || ODD.ref() || null ?};
      ODD.cntx_pop()
   ?};
   1
|| 0
?}


\wni_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [21.37]
:: OPIS: Formuła testowa do automatycznej rejestracji wniosków w obiegu businesslink.
::       Przykład wywołania we wtyczce: params_exec('wni_auto','%businesslink3',_a)
::   WE: _a - 0 (Parametry domyślne dla okienka do parametryzacji)
::            1 (Parametry domyślne w tabeli EDOKUM)
::            3 (Obsługa informacji dodatkowych)
::   WY: 0/1/-1
::----------------------------------------------------------------------------------------------------------------------
:: Definicja obiektu __PAR wykorzystanego do obsługi parametrów w okienku (dla ręcznej rejestracji)
:: __PAR.ODD:=__PAR.TYP:=__PAR.SL:=''; __PAR.PAY:=null;
{? _a=1
|| {? var_press('__PAR')<=0
   || ETYPY.cntx_psh(); ETYPY.index('UNIK');
      ETYPY.prefix();
      TYPOBIEG.cntx_psh();
      TYPOBIEG.index('UNIK'); TYPOBIEG.prefix('Obieg wniosków',);
      _typobieg:={? TYPOBIEG.first() || TYPOBIEG.ref() || null ?};
      EDOKUM.TYP:={? ETYPY.find_key(_typobieg,'Pismo w obiegu')
                  || SKID.SL_KH:=ETYPY.DOM_SL().SLU().NAZ;
                     {? SKID.SL_KH='' || SKID.SL_KH:='KONTRAHENCI' ?};
                     ETYPY.ref()
                  || null()
                  ?};
      EDOKUM.TR:='Pismo w obiegu';
      TYPOBIEG.cntx_pop();
      ODD.cntx_psh(); ODD.prefix();
      EDOKUM.ODD:={? ODD.find_key(REF.FIRMA,'CENTRALA',) || ODD.ref() || null ?};
      ODD.cntx_pop();
      ETYPY.cntx_pop()
   ?};
   1
|| 0
?}


\dok_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [21.14]
:: OPIS: Formuła testowa do automatycznej rejestracji dokumentów księgowych businesslink
::       Przykłąd wywołania we wtyczce: params_exec('dok_auto','%businesslink3',_a)
::   WE: _a - 0 (Parametry domyślne dla okienka do parametryzacji)
::            1 (Parametry domyślne w tabeli DOK)
::            2 (Parametry domyślne w tabeli pozycji VAT)
::   WY: 0/1/-1
::----------------------------------------------------------------------------------------------------------------------
:: Definicja obiektu __PAR wykorzystanego do obsługi parametrów w okienku (dla ręcznej rejestracji)
:: __PAR.SL:=__PAR.R:=__PAR.KK:=__PAR.K2:='';
:: __PAR.OKRVAT:=__PAR.SP_PL:=__PAR.ODD:=__PAR.REJ:=__PAR.DZ:=__PAR.DOK_REJ:=__PAR.RVAT:=__PAR.GRVAT:=null;
{? _a=0 | _a=1
|| {? _a=0 | var_pres('__PAR')<=0
   || REJ.cntx_psh();  VAT_REJ.cntx_psh(); DOK_REJ.cntx_psh(); GR_VAT.cntx_psh();
      ODD.index('ODDZIALY'); ODD.prefix();
      DOK.ODD:={? ODD.find_key(REF.FIRMA,'CENTRALA',) || ODD.ref() || null ?};

      REJ.index('KOD'); REJ.prefix();
      DOK.REJ:={? REJ.find_key(SSTALE.AR,DOK.ODD,'ZAK_KRAJ') || REJ.ref() || null ?};

      VAT_REJ.index('REJ_SYM'); VAT_REJ.prefix();
      DOK.RVAT:={? VAT_REJ.find_key(DOK.REJ,'ZAK_KRAJ') || VAT_REJ.ref() || null() ?};

      DOK_REJ.index('NAZ'); DOK_REJ.prefix();
      DOK.DOK_REJ:={? DOK_REJ.find_key(DOK.REJ,'Zakup krajowy') || DOK_REJ.ref() || null() ?};

      GR_VAT.index('REJ_KOD'); GR_VAT.prefix();
      VPOZ.GRVAT:={? GR_VAT.find_key(DOK.REJ,'ZakupPod') || GR_VAT.ref() || null() ?};
      REJ.cntx_pop(); VAT_REJ.cntx_pop(); DOK_REJ.cntx_pop(); GR_VAT.cntx_pop();

      SLOSLU.SLSLU:='KONTRAHENCI'
   ?};
   1
|| 0
?}


\dokumxml_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PBS [23.25]
:: OPIS: Formuła testowa do automatycznego dodawania danych dodatkowych dokumentu sprzedażowego - finanse
::----------------------------------------------------------------------------------------------------------------------
_dok:=$DOK.ref();
:: Usunięcie ewentualnie już istniejących danych
exec('dokumxml_del3','edi_xml',_dok);
:: Dodawanie danych dodatkowych poziom po poziomie
_r1:=exec('dokumxml_adder','edi_xml',0,_dok,'','E','Faktura');
_r2:=exec('dokumxml_adder','edi_xml',_r1,_dok,'','E','Fa');

POZF.cntx_psh(); POZF.index('DOK'); POZF.prefix(DOK.ref);
{? POZF.first()
|| {! |?
      _r3:=exec('dokumxml_adder','edi_xml',_r2,_dok,'','E','FaWiersz');
      _r4:=exec('dokumxml_adder','edi_xml',_r3,_dok,'Indeks'+$POZF.LP,'E','Indeks');
      POZF.next()
   !}
?};
POZF.cntx_pop();
:: Dodawanie danych dodatkowych ścieżką
exec('dokumxml_adder','edi_xml',0,_dok,'Testowa treść informacji stopki','E','','/Faktura/Stopka/Informacje/StopkaFaktury');
1


\abc_notify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Warunek zdarzenia startowego - czy jest notyfikacja o zmianach w dokumentach Businesslink.
::       Opcjonalnie, po przekroczeniu limitu czasu zdarzenie wyzwalane jest bezwarunkowo.
::       Limit czasu resetowany jest po każdym odebraniu notyfikacji.
::       UWAGA: obecnie formuła sprawdza wyłącznie warunek czasowy i nie zwraca tokena na wyjście
::   WE: [_a] - limit czasu (w minutach - domyślnie 15)
::   WY: obj('STATUS','TOKEN')
::         STATUS=1 - warunek spełniony
::         TOKEN [STRING] może być '' - należy go ustawić w parametrze wyjściowym zdarzenia
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _limit:=_a || _limit:=15 ?};

_result:=0;
_reset:=0;
_token:='';

_abc:=exec('abc_notify','#notify');

_tm:=_abc.param_get(__Firma,'BL_TMSNC');

{? _tm=''
|| _result:=1;
   _reset:=1
|| _sync_utc:=iso_datetime_parse_utc(_tm).utc;
   {? _sync_utc+_limit*60<utc_get()
   || _result:=1;
      _reset:=1
   ?}
?};

{? _reset
|| _abc.param_set(__Firma,'BL_TMSNC',iso_datetime_value())
?};

_res:=obj_new('STATUS','TOKEN');
_res.STATUS:=_result;
_res.TOKEN:=_token;

_res


\getinfo_and_upo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Pobranie informacji o wysłanych dokumentach oraz UPO
::       WYŁĄCZONE - działanie przeniesione do kolejki technicznej
::----------------------------------------------------------------------------------------------------------------------
::{? var_pres('BL_GETTM',DOKUM)>0
::|| exec('documents_getinfo','businesslink3');
::   exec('upo_service_get1','businesslink3')
::?};
1


\dokum_to_ntc_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Zwraca treść html powiadomienia z listą dokumentów
::       Sposób użycia: $exec('dokum_to_ntc_desc','%businesslink3',_a.p01)
::       albo: $exec('dokum_to_ntc_desc','%businesslink3',params_get().in.p01)
::   WE: _a - lista DOKUM.uidref()-ów (w postaci tablicy JSON)
::   WY: tekst HTML w znacznikach <html></html>
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że jest to tablica z obiektami {"uidref": "wartość"}
_obj:=json_parse(_a);

_doki:=0;

_result:='<html>\n';

{? var_pres('_obj')>100
|| _size:=obj_len(_obj);
   {? _size>0
   || _doki:=1;
      _result+='<ul>\n';
      {! _it:=1.. _size
      |! _result+=
            '<li>%1</li>\n'
            [exec('FindAndGet','#table',DOKUM,_obj[_it].uidref,,"SYM_ZEW",'[usunięty]')]
      !};
      _result+='</ul>\n'
   ?}
?};

{? _doki=0
|| _result+='<p>Brak nowych dokumentów dostępnych w Businesslink.</p>\n'
?};

_result+='</html>';

_result


\dokum_to_ntc_button
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Nazwa przycisku w powiadomieniu
::       Sposób użycia: $exec('dokum_to_ntc_button','%businesslink3',_a.p01)
::       albo: $exec('dokum_to_ntc_button','%businesslink3',params_get().in.p01)
::   WE: _a - lista DOKUM.uidref()-ów (w postaci tablicy JSON)
::   WY: nazwa przycisku zawierająca symbol pierwszego DOKUM z przekazanej listy
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że jest to tablica z obiektami {"uidref": "wartość"}
_obj:=json_parse(_a);

_result:='';

{? var_pres('_obj')>100
|| _size:=obj_len(_obj);
   {? _size>0
   ||
::    Przycisk z pierwszym dokumentem
      _result:='Dokument: %1'[exec('FindAndGet','#table',DOKUM,_obj[1].uidref,,"SYM_ZEW",'')]
   ?}
?};

_result


\dokum_to_ntc_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Akcja przycisku w powiadomieniu
::       Sposób użycia: $exec('dokum_to_ntc_action','%businesslink3',_a.p01)
::       albo: $exec('dokum_to_ntc_action','%businesslink3',params_get().in.p01)
::   WE: _a - lista DOKUM.uidref()-ów (w postaci tablicy JSON)
::   WY: akcja w postaci linku do pierwszego DOKUM z przekazanej listy
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że jest to tablica z obiektami {"uidref": "wartość"}
_obj:=json_parse(_a);

_result:='';

{? var_pres('_obj')>100
|| _size:=obj_len(_obj);
   {? _size>0
   ||
::    Przycisk z pierwszym dokumentem (link)
      _link:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',_obj[1].uidref));
      _result:='{"url": %1, "delete": %2}'[json_value(_link),json_value(1)]
   ?}
?};

_result


\api_status_to_service
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Formuła pobiera status usług BL i tworzy JSON pomijając niechciane elementy
::       Do użycia w procesie ZBL_STA lub podobnych zastosowaniach
::   WE: [_a] - poziom wrażliwości: 0-wszystkie zapisy, [1]-uwagi i błędy, 2-tylko błędy
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_sensitivity:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_desc:='';

:: Kompletny wynik zwrócony przez API
_jman:=exec('api_status','businesslink3');
:: Element tablicy AppsList - konkretna aplikacja
_jman1:=_jman.new('{}');
:: Wynikowy JSON używany w kolejnych funkcjach
_jman2:=_jman.new('{}');

:: Sprawdzenie czy nastąpiła zmiana w statusach API
{? _jman.isPath('LastCheckTime') || _jman.deleteElement('LastCheckTime') ?};
{? _jman.isPath('BLStatusVersion') || _jman.deleteElement('BLStatusVersion') ?};
_file:=fopen('BLST.json','ur',1,,1);
{? _file.is_open()
||
   _jman_file:=exec('json_man','__jsonm',_file);
   {? hash(_jman.getJSON())=hash(_jman_file.getJSON())
   ||
      _file.fclose();
      return(_jman2.getJSON())
   ?};
   _file.fclose()
?};
:: zapisanie JSON'a
obj_del(_file);
_file:=fopen('BLST.json','Uw',1,,1);
{? _file.is_open()
||
   _jman.getJSON(_file);
   _file.fclose()
?};

{? type_of(_jman)>100
|| {? _jman.isPath('AppsList')
   ||
      _variant:='info';
      _jman2.load(_jman.getJSON());
::    Usuwamy listę aplikacji, będzie zasilona ponownie wg kryteriam wrażliwości
      _jman2.deleteElement('AppsList');
      _jman2.setObject(_jman2.addChildElement('','AppsList'),'[]');

      _size:=_jman.countChildren('AppsList');
      {! _it:=1.. _size
      |! _jman1.load(_jman.getJSON('AppsList[%1]'[$_it]));
         _status:=_jman1.getValue('Status');
         {? (_status='Healthy' & _sensitivity=0) |
            (_status='Partially degraded' & _sensitivity<2) |
            (_status='Error')
         || _jman2.setObject(_jman2.addChildElement('AppsList'),_jman1.getJSON())
         ?};
         {? _status='Error'
         || _variant:='danger'
         |? _status='Partially degraded'
         || {? _variant<>'danger' || _variant:='warning' ?}
         ?}
      !};

      _jman2.addChildElement('','Variant');
      _jman2.setValue('Variant',_variant)
   ?}
?};

_jman2.getJSON()


\api_status_condition
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Warunek dla bramy w procesie ZBL_STA - czy przekazany JSON ma niepustą sekcję AppsList lub ma pole Info
::       Warunek ma treść: exec('api_status_condition','%businesslink3',_a.OUT)
::   WE: _a - JSON w postaci tekstowej - wynik formuły exec('api_status_to_service','%businesslink3')
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że struktura obiektu jest prawidłowa,
:: ale na wszelki wypadek sprawdzenie, czy parametr jest tekstem
{? var_pres('_a')=type_of('')
|| _jman:=exec('json_man','__jsonm',_a)
|| return(0)
?};

_result:=0;

{? type_of(_jman)>100
|| {? _jman.isPath('AppsList')
   || _result:=(_jman.countChildren('AppsList')>0)
   ?};
   {? _jman.isPath('Info')
   || _result:=1
   ?}
?};

_result


\api_status_to_ntc_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Zwraca opis do powiadomienia o stanie usług Businesslink
::       Użycie: $exec('api_status_to_ntc_desc','%businesslink3',params_get().in.p01)
::               na parametrze DESC czynności ZWS_NTC_SEND
::   WE: _a - JSON w postaci tekstowej - wynik formuły exec('api_status_to_service','%businesslink3')
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że struktura obiektu jest prawidłowa,
:: ale na wszelki wypadek sprawdzenie, czy parametr jest tekstem
{? var_pres('_a')=type_of('')
|| _jman:=exec('json_man','__jsonm',_a)
|| return('')
?};

_jman1:=_jman.new('{}');

_result:='<html>\n';
_result+='<table style="width: 100%; border-style: none">\n';

{? type_of(_jman)>100
|| {? _jman.isPath('AppsList')
   ||
      _size:=_jman.countChildren('AppsList');
      {! _it:=1.. _size
      |! _jman1.load(_jman.getJSON('AppsList[%1]'[$_it]));
         _result+='
         <tr>
         <td style="width: 0px; border: none;">%1</td>
         <td style="padding-left:20px; border: none;">%2</td>
         </tr>
         '[_jman1.getValue('Name'),_jman1.getValue('Status')]
      !}
   ?}
?};
_result+='</table>\n</html>\n';

_status_healthy:='OK'@;
_status_degraded:='Działa częściowo poprawnie'@;
_status_error:='Nie działa'@;
_color_healthy:='#4CAF4E';
_color_degraded:='#EE9F07';
_color_error:='#DC1E28';

::Tablica z możliwymi statusami które zwraca API
::znaki "> otwierają styl html celem dodania odpowiedniego koloru
_arr_json_status:=spli_str('">Healthy|">Partially degraded|">Error','|');
::Tablica statusów wyświetlana w powiadomieniu
_arr_ntc_status:=obj_new(3);
_arr_ntc_status[1]:='color: %1;">%2'[_color_healthy, _status_healthy];
_arr_ntc_status[2]:='color: %1;">%2'[_color_degraded, _status_degraded];
_arr_ntc_status[3]:='color: %1;">%2'[_color_error, _status_error];

_result:=gsub(_result,_arr_json_status,_arr_ntc_status);

_result


\api_status_to_ntc_variant
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Zwraca wariant powiadomienia o stanie usług Businesslink
::       Użycie: params_exec('api_status_to_ntc_variant','%businesslink3',params_get().in.p01)
::               na czynności zwracającej wariant w celu przekazania jako parametr VARIANT do czynności ZWS_NTC_SEND
::   WE: _a - JSON w postaci tekstowej - wynik formuły exec('api_status_to_service','%businesslink3')
::----------------------------------------------------------------------------------------------------------------------
:: optymistycznie zakładam, że struktura obiektu jest prawidłowa,
:: ale na wszelki wypadek sprawdzenie, czy parametr jest tekstem
{? var_pres('_a')=type_of('')
|| _jman:=exec('json_man','__jsonm',_a)
|| return('info')
?};

{? _jman.isPath('Variant') || _jman.getValue('Variant') || 'info' ?}


\api_status_to_ntc_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KK [23.25_BLBC1]
:: OPIS: Zwraca nagłówek do powiadomienia o stanie usługa Businesslink
::       Użycie: $exec('api_status_to_ntc_info','%businesslink3',params_get().in.p01)
::               na parametrze DESC czynności ZWS_NTC_SEND
::   WE: _a - JSON w postaci tekstowej - wynik formuły exec('api_status_to_service','%businesslink3')
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _jman:=exec('json_man','__jsonm',_a)
|| return()
?};

{? _jman.isPath('Info') || _jman.getValue('Info') || return() ?}


\dokumxml_test_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [23.25]
:: OPIS: Formuła testowa do odczytywania danych dodatkowych dokumentu zakupu
::   WE: _a - zmienna nazwana o strukturze dofiniowanej w exec('env','edi_wspolne')
::----------------------------------------------------------------------------------------------------------------------
_edi:=_a;
_tab:=ref_tab(DOKUM.REFSQL);
{? _tab=DOK
|| DOK.cntx_psh();
   {? DOK.seek(DOKUM.REFSQL,ref_name(DOKUM.REFSQL),1)
   || _obj:=exec('obj_get','edi_xml',DOK);
      DOK.TR+=_obj.Stopka.Rejestry.BDO+' '+_obj.Stopka.Rejestry.KRS+' '+_obj.Stopka.Rejestry.PelnaNazwa
           +' '+_obj.Stopka.Rejestry.REGON;
      DOK.put()
   ?};
   DOK.cntx_pop()
|? _tab=EDOKUM
|| EDOKUM.cntx_psh();
   {? EDOKUM.seek(DOKUM.REFSQL,ref_name(DOKUM.REFSQL),1)
   || _obj:=exec('obj_get','edi_xml',EDOKUM);
      EDOKUM.TR+=_obj.Stopka.Rejestry.BDO+' '+_obj.Stopka.Rejestry.KRS+' '+_obj.Stopka.Rejestry.PelnaNazwa
                 +' '+_obj.Stopka.Rejestry.REGON;
      EDOKUM.put()
   ?};
   EDOKUM.cntx_pop()
?};
1

:Sign Version 2.0 jowisz:1045 2024/01/29 14:27:20 44fd278137feb9c1653d2aef6774d1e1b72ac596c427d46c0910d45a5d8f00bfc6f944ae2e7ca6d9b766ccc2f0c5aeacd63080a68d2cb7b2f0cb36e4189355ed94868c15356fd59002f9c59e5becabd5c7a8a99cb23e92255e691692400462a5099399c27be9a63129db359d7c0b556a2d6c3eec08607bb22367b1e008af262e
