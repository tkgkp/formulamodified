:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %fakso.fml
:: Utworzony: 27.06.2017
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Formuły do obsługi informacji dodatkowych
::======================================================================================================================


\autofakk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: Przykładowa formuła dla wtyczki KOSZTY_ROZPISZ_001
::       Rozpisanie z uwzględnieniem stawek VAT
::   WY: 1-została wykonana 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_tab:=__zakkos.sel_aget();   __zakkos.sel_adel();

{? _tab.size & FUN.ask('Rozpisanie kosztów dotyczyć będzie zaznaczonych rekordów.\nCzy kontynuować?'@)
||
:: skoro wybrano to zakładam, że wykonano
   _res:=1;
:: rozpiska automatyczna wg zaznaczonych rekordow
   _rozp:=tab_tmp(2,'TREE','INTEGER',''
           ,'REF','INTEGER',''
           ,'ALW','REAL',''
           ,'ROZ','REAL',''
           ,'STV','STRING[16]','');

   __zakkos.cntx_psh;

   _tab.clear;
   {? _tab.first
   || {!
      |? {? (__zakkos.clear; __zakkos.seek(_tab.REF,))
         || {? __zakkos.TREE=0
            || _ref:=#__zakkos.ref;
               _stv:={? __zakkos.REF<>''
                     || $exec('FindAndGet','#table',ref_tab(__zakkos.REF),__zakkos.REF,,"SV",null())
                     || 'xxx'
                     ?};
               __zakkos.clear;
               __zakkos.prefix(_ref);
               {? __zakkos.first
               || {!
                  |? _rozp.clear;
                     _rozp.blank;
                     _rozp.TREE:=_ref;
                     _rozp.REF:=#__zakkos.ref;
                     _rozp.ALW:=__zakkos.FWB;
                     _rozp.ROZ:=__zakkos.ROZ;
                     _rozp.STV:={? __zakkos.REF<>''
                                || $exec('FindAndGet','#table',ref_tab(__zakkos.REF),__zakkos.REF,,"SV",null())
                                || 'xxx'
                                ?};
                     {? _rozp.STV=_stv || _rozp.add(1) ?};
                     __zakkos.next
                  !}
               ?}
            |? (_rozp.clear; _rozp.prefix(__zakkos.TREE); ~_rozp.find_key(#__zakkos.ref))
            || _stv:='xxx';
               __zakkos.cntx_psh();
               __zakkos.prefix();
               {? __zakkos.seek(__zakkos.TREE)
               || _stv:={? __zakkos.REF<>''
                        || $exec('FindAndGet','#table',ref_tab(__zakkos.REF),__zakkos.REF,,"SV",null())
                        || 'xxx'
                        ?}
               ?};
               __zakkos.cntx_pop();
               _rozp.clear;
               _rozp.blank;
               _rozp.TREE:=__zakkos.TREE;
               _rozp.REF:=#__zakkos.ref;
               _rozp.ALW:=__zakkos.FWB;
               _rozp.ROZ:=__zakkos.ROZ;
               _rozp.STV:={? __zakkos.REF<>''
                          || $exec('FindAndGet','#table',ref_tab(__zakkos.REF),__zakkos.REF,,"SV",null())
                          || 'xxx'
                          ?};
               {? _rozp.STV=_stv || _rozp.add(1) ?}
            || ''
            ?}
         ?};
         _tab.next
      !}
   ?};
   obj_del(_tab);

   _pozp:=sql('select distinct :_a.TREE TREE, sum(:_a.ALW) ALW, sum(:_a.ROZ) ROZ from :_a '+
           ' group by :_a.TREE order by 1 ',_rozp);
   _pozp.clear;
   {? _pozp.first
   || {!
      |? {? (__zakkos.clear; __zakkos.seek(_pozp.TREE,); __zakkos.WAR-__zakkos.ROZ+_pozp.ROZ>0)
         || _alw:=_pozp.ALW;
            _roz:=__zakkos.WAR-__zakkos.ROZ+_pozp.ROZ;
            _rok:=__zakkos.WAR-__zakkos.ROZ+_pozp.ROZ;
            _max:=0;
            _rgr:=null;
            _rozp.clear;
            _rozp.prefix(_pozp.TREE);
            {? _rozp.first
            || {!
               |? {? (__zakkos.clear; __zakkos.seek(_rozp.REF,))
                  || __zakkos.ROZ:={? _alw>0 || _roz*(__zakkos.FWB/_alw) $2 || 0 ?};
                     __zakkos.put(1);
                     {? __zakkos.FWB>_max || _max:=__zakkos.FWB; _rgr:=__zakkos.ref ?};
                     _rok-=__zakkos.ROZ
                  ?};
                  _rozp.next
               !}
            ?};
            {? _rok<>0 & _rgr<>null & (__zakkos.clear; __zakkos.seek(_rgr))
            || __zakkos.ROZ+=_rok;
               __zakkos.put
            ?}
         ?};
         exec('roz_fakk','faktury_wspolne',_pozp.TREE);
         _pozp.next
      !}
   ?};
   __zakkos.cntx_pop;
   obj_del(_rozp);
   obj_del(_pozp)
||
   _res:=1;
:: rozpiska automatyczna dla wszystkich rekordow
   _rozp:=tab_tmp(2,'TREE','INTEGER',''
           ,'REF','INTEGER',''
           ,'ALW','REAL',''
           ,'ROZ','REAL',''
           ,'STV','STRING[16]','');
   __zakkos.cntx_psh();
   __zakkos.clear();
   __zakkos.prefix(0);
   {? __zakkos.first()
   || {!
      |? _ref:=#__zakkos.ref;
         _stv:={? __zakkos.REF<>''
               || $exec('FindAndGet','#table',ref_tab(__zakkos.REF),__zakkos.REF,,"SV",null())
               || 'xxx'
               ?};
         __zakkos.cntx_psh();
         __zakkos.clear();
         __zakkos.prefix(_ref);
         {? __zakkos.first()
         || {!
            |? _rozp.clear;
               _rozp.blank;
               _rozp.TREE:=_ref;
               _rozp.REF:=#__zakkos.ref;
               _rozp.ALW:=__zakkos.FWB;
               _rozp.ROZ:=__zakkos.ROZ;
               _rozp.STV:={? __zakkos.REF<>''
                          || $exec('FindAndGet','#table',ref_tab(__zakkos.REF),__zakkos.REF,,"SV",null())
                          || 'xxx'
                          ?};
               {? _rozp.STV=_stv || _rozp.add(1) ?};
               __zakkos.next
            !}
         ?};
         __zakkos.cntx_pop();
         __zakkos.next()
      !}
   ?};
   _pozp:=sql('select distinct :_a.TREE TREE, sum(:_a.ALW) ALW, sum(:_a.ROZ) ROZ from :_a '+
              ' group by :_a.TREE order by 1 ',_rozp);
   _pozp.clear;
   {? _pozp.first
   || {!
      |? {? (__zakkos.clear; __zakkos.seek(_pozp.TREE,); __zakkos.WAR-__zakkos.ROZ+_pozp.ROZ>0)
         || _alw:=_pozp.ALW;
            _roz:=__zakkos.WAR-__zakkos.ROZ+_pozp.ROZ;
            _rok:=__zakkos.WAR-__zakkos.ROZ+_pozp.ROZ;
            _max:=0;
            _rgr:=null;
            _rozp.clear;
            _rozp.prefix(_pozp.TREE);
            {? _rozp.first
            || {!
               |? {? (__zakkos.clear; __zakkos.seek(_rozp.REF,))
                  || __zakkos.ROZ:={? _alw>0 || _roz*(__zakkos.FWB/_alw) $2 || 0 ?};
                     __zakkos.put(1);
                     {? __zakkos.FWB>_max || _max:=__zakkos.FWB; _rgr:=__zakkos.ref ?};
                     _rok-=__zakkos.ROZ
                  ?};
                  _rozp.next
               !}
            ?};
            {? _rok<>0 & _rgr<>null & (__zakkos.clear; __zakkos.seek(_rgr))
            || __zakkos.ROZ+=_rok;
               __zakkos.put
            ?}
         ?};
         exec('roz_fakk','faktury_wspolne',_pozp.TREE);
         _pozp.next
      !}
   ?};
   __zakkos.cntx_pop();
   obj_del(_rozp);
   obj_del(_pozp)
?};
_res

:Sign Version 2.0 jowisz:1048 2020/10/16 15:25:17 6d7b6f794762c74e682e9e2a15448e655565414e8b82849a738f0df5d5a0bcb0a910b9bdbf446341ec197c0a84480d6acbe7ca7228143939d3a1d84855a3bb262752a6a0c6a563980c658d7a03e0fbafd9c7d4ea8d4c12fa718511208cf3ea21e8cb4d8f937081aeb3251d9f5c178bb1b1a88e57bf65da4ee1c971032996fb4d
