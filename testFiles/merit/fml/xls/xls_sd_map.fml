:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_sd_map.fml
:: Utworzony: 13.03.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu konfiguracji
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='SD_MAP';
_def.FUNPAR:='ZWS_PAR_ASDD';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_sd_def_xlsx','xls__init');
_def.SHEET:='Połączenia parametrów=1,1';
_def.NAME:='Połączenia parametrów szablonów z paramatrami zestawów'@;
_def.DESC:='Połączenia parametrów szablonów z paramatrami zestawów';
_def.ADD_ROWS:=0;
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="SD_MAP";

: prolog
_def.BEFORE:="
   SD_MAP.cntx_psh();
   SD_MAP.f_clear();
   SD_MAP.index('KOD');
   SD_MAP.prefix();
   SD_PAR.cntx_psh();
   SD_PAR.index('KOD');
   SD_PAR.prefix();
   SD_DOK.cntx_psh();
   SD_DOK.index('KOD');
   SD_DOK.prefix();
   SD_WPAR.cntx_psh();
   SD_WPAR.index('KOD');
   SD_WPAR.prefix();
   ~~
";

: epilog
_def.AFTER:="
   SD_WPAR.cntx_pop();
   SD_DOK.cntx_pop();
   SD_PAR.cntx_pop();
   SD_MAP.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('SYSTEM', MS.name(SD_MAP,'SYSTEM'),0,, MS.comment(SD_MAP,'SYSTEM'));
   _env.define('KOD',    MS.name(SD_MAP,'KOD'),0,,    MS.comment(SD_MAP,'KOD'));
   _env.define('SD_DOK', MS.name(SD_MAP,'SD_DOK'),0,, MS.comment(SD_MAP,'SD_DOK'),type_of(''));
   _env.define('SD_PAR', MS.name(SD_MAP,'SD_PAR'),0,, MS.comment(SD_MAP,'SD_PAR'),type_of(''));
   _env.define('SD_WPAR',MS.name(SD_MAP,'SD_WPAR'),0,,MS.comment(SD_MAP,'SD_WPAR'),type_of(''));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.SYSTEM.VALUE:=SD_MAP.SYSTEM;
   _buf.KOD.VALUE:=SD_MAP.KOD;
   _buf.SD_DOK.VALUE:=SD_MAP.SD_DOK().KOD;
   _buf.SD_PAR.VALUE:=SD_MAP.SD_PAR().KOD;
   _buf.SD_WPAR.VALUE:=SD_MAP.SD_WPAR().KOD;
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_sd_map',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_sd_map',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.SYSTEM=''  || 'SYSTEM'
   |? _buf.KOD=''     || 'KOD'
   |? _buf.SD_DOK=''  || 'SD_DOK'
   |? _buf.SD_WPAR='' || 'SD_WPAR'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

:: błędne wartości
{? ('TN'*(1+_buf.SYSTEM))=0
|| _val.msg_inset('SYSTEM','T','N');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(SD_MAP,'SYSTEM');
{? +_buf.SYSTEM>_max
|| _val.msg_length('SYSTEM',_max);
   _buf.SYSTEM:=_max+_buf.SYSTEM
?};
_max:=MS.fld_len(SD_MAP,'KOD');
{? +_buf.KOD>_max
|| _val.msg_length('KOD',_max);
   _buf.KOD:=_max+_buf.KOD
?};
_max:=MS.fld_len(SD_DOK,'KOD');
{? +_buf.SD_DOK>_max
|| _val.msg_length('SD_DOK',_max);
   _buf.SD_DOK:=_max+_buf.SD_DOK
?};
_max:=MS.fld_len(SD_PAR,'KOD');
{? +_buf.SD_PAR>_max
|| _val.msg_length('SD_PAR',_max);
   _buf.SD_PAR:=_max+_buf.SD_PAR
?};
_max:=MS.fld_len(SD_WPAR,'KOD');
{? +_buf.SD_WPAR>_max
|| _val.msg_length('SD_WPAR',_max);
   _buf.SD_WPAR:=_max+_buf.SD_WPAR
?};

: weryfikacja spójności referencyjnej
_dok:=null;
{? SD_DOK.find_key(_buf.SD_DOK,)
|| _dok:=SD_DOK.ref()
|| _val.msg_norec('SD_DOK');
   _val.RESULT:=0;
   return()
?};
_par:=null;
{? SD_PAR.find_key(_buf.SD_PAR,)
|| _par:=SD_PAR.ref()
|? _buf.SD_PAR<>''
|| _val.msg_norec('SD_PAR');
   _val.RESULT:=0;
   return()
?};
_wpr:=null;
{? SD_WPAR.find_key(_buf.SD_WPAR,)
|| _wpr:=SD_WPAR.ref()
|| _val.msg_norec('SD_WPAR');
   _val.RESULT:=0;
   return()
?};

_ref:=null;
{? (SD_MAP.index('KOD'); SD_MAP.find_key(_buf.KOD,)) |
   (SD_MAP.index('UNIQUE'); SD_MAP.find_key(_par,_wpr))
|| _ref:=SD_MAP.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1'[_a.KOD]",
   'SD_DOK',_dok,
   'SD_PAR',_par,
   'SD_WPAR',_wpr
);
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,SD_MAP,"
   _a.SYSTEM:=_b.SYSTEM;
   _a.KOD:=_b.KOD;
   _a.SD_DOK:=_c.SD_DOK;
   _a.SD_PAR:=_c.SD_PAR;
   _a.SD_WPAR:=_c.SD_WPAR;
   ~~
");
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:12 71544b854847009c51ee012d795bbc95b6e1ea6478ca50d3f963156b91fc4ef11b835f1cf36f1ef2c6df824b1803f1644f4d652422ee739cef1e47893f6c7136cb7d8853c66a0ba6b5541b5910b97cb57070394fd36af57120009a6d15fc6b67ed2fc8475fbef9e8de3d1f8201552c8ef90be9b98c1b14f38c82bbc4cc0a4679
