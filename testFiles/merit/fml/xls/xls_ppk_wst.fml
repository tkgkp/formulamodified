:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_ppk_wst.fml
:: Utworzony: 03.07.2019
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu struktur wniosków PPK.
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='PPK_WST';
_def.FUNPAR:='ZWS_PAR_PWNU';
_def.DOMAIN:=exec('name','#b_domain','PPK');
_def.FILE:=exec('def_per_ppk_xlsx','xls__init');
_def.SHEET:='Struktury wniosków PPK=1,1';
_def.NAME:='Struktury wniosków PPK'@;
_def.DESC:='Struktury wniosków PPK';
_def.ADD_ROWS:=0;

: źródło danych
_def.TABLE:="PPK_WST";

: prolog
_def.BEFORE:=
   "  PPK_WRD.cntx_psh();
      PPK_WRD.index('SYMBOL');
      PPK_WRD.prefix();
      R.cntx_psh();
      R.index('RUBKOD');
      R.prefix();
      PPK_WST.cntx_psh();
      PPK_WST.index('UNIQUE');
      PPK_WST.prefix();
      ~~
   ";

: epilog
_def.AFTER:=
   "  PPK_WST.cntx_pop();
      R.cntx_pop();
      PPK_WRD.cntx_pop();
      ~~
   ";

: definicja kolumn
_def.FIELDS:=
   "  _env:=_a;
      _env.define('PPK_WRDR',MS.name(PPK_WRD,'RODZAJ'), 0,,MS.comment(PPK_WRD,'RODZAJ'));
      _env.define('PPK_WRDS',MS.name(PPK_WRD,'SYMBOL'), 0,,MS.comment(PPK_WRD,'SYMBOL'));
      _env.define('R',       MS.name(PPK_WST,'R'),      0,,MS.comment(PPK_WST,'R'),type_of(0),0);
      _env.define('BLOKADA', MS.name(PPK_WST,'BLOKADA'),0,,MS.comment(PPK_WST,'BLOKADA'));
      _env.define('ZMIANA',  MS.name(PPK_WST,'ZMIANA'), 0,,MS.comment(PPK_WST,'ZMIANA'));
      ~~
   ";

: zawartość wiersza
_def.EXPORT:=
   "  _env:=_a;
      _buf:=_b;
      _buf.PPK_WRDR.VALUE:=PPK_WST.PPK_WRD().RODZAJ;
      _buf.PPK_WRDS.VALUE:=PPK_WST.PPK_WRD().SYMBOL;
      _env.write_async('PPK_WRD',PPK_WST.PPK_WRD);
      _buf.R.VALUE:=PPK_WST.R().RN;
      _env.write_async('RUBRYKI',exec('r','xls__util'));
      _buf.BLOKADA.VALUE:=PPK_WST.BLOKADA;
      _buf.ZMIANA.VALUE:=PPK_WST.ZMIANA;
      1
   ";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_ppk_wst',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_ppk_wst',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

: błędy krytyczne
_fld:=
   {? _buf.PPK_WRDR='' || 'PPK_WRDR'
   |? _buf.PPK_WRDS='' || 'PPK_WRDR'
   |? _buf.R=0         || 'R'
   |? _buf.BLOKADA=''  || 'BLOKADA'
   |? _buf.ZMIANA=''   || 'ZMIANA'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_empty(_fld);
   _validate.RESULT:=0;
   return()
?};

{? +_buf.PPK_WRDR>1
|| _validate.msg_length('PPK_WRDR',1);
   _buf.PPK_WRDR:=1+_buf.PPK_WRDR
?};
{? 'OU'*_buf.PPK_WRDR=0
|| _validate.msg_inset('PPK_WRDR','O','U');
   _validate.RESULT:=0;
   return()
?};

_max:=MS.fld_len(PPK_WRD,'SYMBOL');
{? +_buf.PPK_WRDS>_max
|| _validate.msg_length('PPK_WRDS',_max);
   _buf.PPK_WRDS:=_max+_buf.PPK_WRDS
?};

{? PPK_WRD.find_key(_buf.PPK_WRDR,_buf.PPK_WRDS,)
|| _ppk_wrd:=PPK_WRD.ref()
|| _validate.msg_norec(,'%1 / %2' [MS.name(PPK_WRD,'RODZAJ'),MS.name(PPK_WRD,'SYMBOL')]);
   _validate.RESULT:=0;
   return()
?};

{? R.find_key(_buf.R)
|| _rref:=R.ref()
|| _validate.msg_norec('R');
   _validate.RESULT:=0;
   return()
?};

: pola z wartościami T/N
_arr:=spli_str('BLOKADA,ZMIANA',',');
{! _lp:=1 .. obj_len(_arr)
|! _acr:=_arr[_lp];
   {? ($('{? +_a.%1>1 || _a.%1:=1+_a.%1; 1 ?}' [_acr]))(_buf)
   || _validate.msg_length(_acr,1)
   ?};
   _val:=($('_a.%1' [_acr]))(_buf);
   {? 'TN'*_val=0
   || _validate.msg_inset(_acr,'T','N');
      _validate.RESULT:=0;
      return()
   ?}
!};
obj_del(_arr);

: wybór akcji
_ref:=null();
{? PPK_WST.find_key(_ppk_wrd,_rref)
|| _ref:=PPK_WST.ref();
   {? _update
   || _validate.ACTION:='put'
   || _validate.RESULT:=0
   ?}
|| _validate.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_validate.OBJ:=exec('write_obj','xls__util',
   _ref,
   "'%1 - %2: %3'[_a.PPK_WRDR,_a.PPK_WRDS,$_a.R]",
   'PPK_WRD',_ppk_wrd,
   'R',_rref
);

~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

exec('write','xls__util',_buf,_update,_validate,PPK_WST,
   "  _a.PPK_WRD:=_c.PPK_WRD;
      _a.R:=_c.R;
      _a.BLOKADA:=_b.BLOKADA;
      _a.ZMIANA:=_b.ZMIANA;
      ~~
   "
);

~~

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:42 391b35cb8e243b069f3f64026a60195e9557a3ed2e82bae5743449418ee056e4182fdcf47234dfd667c870559605492ae33f118e773f4a41a306383b0728fce1db3d85d5651e5362cbf07c0e96731f931c3d0d11852f8c4f1866fe9cf1101e23d9895261e6cae9cb8482fad1138eee5b6c352318764dd1bb78c71f05acd27ecd
