:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_hrb_upr.fml
:: Utworzony: 16.09.2019
:: Autor: KN
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu i importu uprawnień do danych - tabela UPR_RB
::======================================================================================================================
\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel uprawnień do rachunków bankowych
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_def:=_a;
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_USRUPR';
_def.ID:='UPR_HRB';

_def.FILE:='uprawnienia.xlsx';
_def.SHEET:='Rachunki bankowe=1,1';
_def.NAME:='Uprawnienia do rachunków bankowych'@;
_def.DESC:='Uprawnienia do rachunków bankowych';

_def.TABLE:="exec('table','xls_hrb_upr')";
_def.FIELDS:="exec('fields','xls_hrb_upr',_a)";

_def.TAB_IMP:="UPR_RB";

_def.BEFORE:="UPR_RB.cntx_psh()";
_def.AFTER:="UPR_RB.cntx_pop()";

_def.PREFIX:="exec('prefix','xls_hrb_upr')";
_def.EXPORT:="exec('export','xls_hrb_upr',_a,_b)";

_def.VALIDATE:="exec('validate','xls_hrb_upr',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_hrb_upr',_a,_b,_c)";

_def.SELECT:="exec('select','xls_hrb_upr',_a,_b)";

exec('SelUsersTab','xls_users_up');

~~


\TabRbUpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Tymczasowa tabela uprawnień do rachunków bankowych
::   WY: uchwyt tabeli
::----------------------------------------------------------------------------------------------------------------------

_wyn:=tab_tmp(5
   ,'USER_KOD','STRING[10]','User kod'
   ,'USER_REF','STRING[16]','User ref'
   ,'RB_REF','STRING[16]','Ref rachunku bankowego'
   ,'RB_NUMER','STRING[50]','Numer rachunku bankowego'
   ,'ACCESS','STRING[1]','Uprawnienie'
   ,'PELNE','STRING[1]','Czy pelne uprawnienia'
   ,'UIDREF','STRING[100]','Identyfikator rekordu'
   );

_add:="_wyn:=params_get().wyn;
       _wyn.blank();
       _wyn.USER_REF:=_a;
       _wyn.USER_KOD:=_b;
       _wyn.RB_REF:=_c;
       _wyn.RB_NUMER:=_d;
       _wyn.ACCESS:=_e;
       _wyn.PELNE:=_f;
       _wyn.UIDREF:=_g;
       _wyn.add(1)
      ";

USERS.cntx_psh();
SKID_RBK.cntx_psh();
UPR_RB.cntx_psh();

USERS.f_clear();
USERS.index('USR_AKOD');
USERS.prefix('T');

UPR_RB.index('RB');
::SKID_RBK.index('BANK');
::SKID_RBK.prefix('001INFO');
SKID_RBK.index('TRN'); SKID_RBK.prefix(REF.INFO,0,null);

{? USERS.first()
|| {!
   |? _user_ref:=USERS.ref();
      _user_kod:=USERS.KOD;
      _moz_dostep:=exec('user_upraw_dostep','xls_hrb_upr','HRB',_user_ref);
      {? _moz_dostep
      || UPR_RB.prefix(_user_ref);
         {? SKID_RBK.first()
         || {!
            |? {? pelne_upr='T'
               || params_set('wyn',_wyn);
                  (_add)($_user_ref,_user_kod,'','','T','T',USERS.uidref()+SKID_RBK.uidref());
                  SKID_RBK.last()
               || _access:={? _moz_dostep & UPR_RB.find_key(SKID_RBK.ref()) || 'T' || 'N' ?};
                  params_set('wyn',_wyn);
                  (_add)($_user_ref,_user_kod,$SKID_RBK.ref(),SKID_RBK.N,_access,'N',USERS.uidref()+SKID_RBK.uidref())
               ?};
               SKID_RBK.next()
            !}
         ?}
      ?};
      USERS.next()
   !}
?};
::_wyn.win_sel(_wyn.mk_sel(,,1));
::_wyn.select();

USERS.cntx_pop();
SKID_RBK.cntx_pop();
UPR_RB.cntx_pop();

_wyn


\table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

exec('TabRbUpr','xls_hrb_upr')


\user_upraw_dostep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Sprawdza w tabeli B_PERM_U czy dany użytkownik może mieć dany rodzaj uprawnienia
::   WE: _a - rodzaj uprawnienia (HRB)
::       _b - ref użytkownika
::   WY: 1 - użytkownik może mieć uprawnienie
::       0 - użytkownik nie może mieć uprawnienia
::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_a')<>type_of('') | (_a<>'HRB')
|| _a:='ODDZ'
?};
{? var_pres('_b')<>type_of(null()) | _b=null()
|| return(0)
?};

_rodz:=_a;
_user_ref:=_b;
_bperm_ref:=exec('bperm_ref','xls_hrb_upr',_rodz);

B_PERM_U.cntx_psh();
B_PERM_U.index('USER');
B_PERM_U.prefix(REF.FIRMA,_user_ref,_bperm_ref);
_dostep:=(B_PERM_U.first());
pelne_upr:=B_PERM_U.FULL;
B_PERM_U.cntx_pop();

_dostep


\bperm_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Zwraca ref B_PERM dla danego rodzaju uprawnienia
::   WE: _a - rodzaj uprawnienia (HRB)
::   WY: ref B_PERM
::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_a')<>type_of('') | (_a<>'HRB')
|| _a:='ODDZ'
?};

_rodz:=_a;

_bperm_ref:=null();
B_PERM.cntx_psh();
B_PERM.index('NAME');
B_PERM.prefix(_rodz);
{? B_PERM.first()
|| _bperm_ref:=B_PERM.ref()
?};
B_PERM.cntx_pop();

_bperm_ref


\prefix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Określa zakres eksportowanych danych
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

__SelUsers.prefix('HRB');
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_def:=_a;

_tooltip:=MS.name(UPR_RB,'USER')+' '+'(max. %1 znaków). '@[$MS.fld_len(USERS,'KOD')];
_tooltip+='Pole wymagane'@;
_def.define('USER','Użytkownik'@,1,,_tooltip);

_tooltip:=MS.name(UPR_RB,'RB')+' '+'(max. %1 znaków). '@[$MS.fld_len(SKID_RBK,'N')];
_def.define('RB','Numer rachunku bankowego'@,1,,_tooltip);

_tooltip:='Uprawniony (max. 1 znak). '@;
_tooltip+='Dozwolone wartości: T/N'@;
_def.define('DOSTEP','Czy uprawniony?'@,1,,_tooltip);

_tooltip:='Pełne uprawnienia (max. 1 znak). '@;
_tooltip+='Dozwolone wartości: T/N'@;
_def.define('PELNE','Czy pełne uprawnienia?'@,1,,_tooltip);

~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------

_excel:=_a;
_obj:=_b;
_tab:=_excel.table();

{? __SelUsers.first()
|| _result:=__SelUsers.find_key(_tab.USER_REF)
|| _result:=1
?};

{? _result
|| _obj.USER.VALUE:=_tab.USER_KOD;
   _obj.RB.VALUE:=_tab.RB_NUMER;
   _obj.DOSTEP.VALUE:=_tab.ACCESS;
   _obj.PELNE.VALUE:=_tab.PELNE
?};

_result


\record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------

_def:=_a;
_obj:=_a;
_mode:=_b;
_validate:=_c;

UPR_RB.prefix();
{? _validate.ACTION='add'
|| UPR_RB.blank()
?};
UPR_RB.USER:=_validate.OBJ.USER;
UPR_RB.RB:=_validate.OBJ.RB;

~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - obj_new - środowisko mechanizmu
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_selected:=_a;
_excel:=_b;

exec('select','xls_users_up',_selected,_excel,'HRB')


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER   - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obj_new() - obiekt z resultem, wynik działania exec('args_valid','#excel_imex').
::                        Obiekt ten jest przekazywany do formuły na IMPORT. Pole RESULT decyduje czy formuła
::                        na import się wykona. Pole MSG służy to odpisania komunikatu
::----------------------------------------------------------------------------------------------------------------------

_obj:=_a;
_mode:=_b;
_result:=_c;

_can_continue:=1;
:: Walidacja wartości z Excel, czy są w nim pola których się spodziewam i czy mają dobre wartości
{? _obj.USER='' & _can_continue
|| _can_continue:=0;
   _result.msg_empty('USER')
?};
{? _obj.DOSTEP='' & _can_continue
|| _can_continue:=0;
   _result.msg_empty('DOSTEP')
?};
{? _obj.PELNE='' & _can_continue
|| _can_continue:=0;
   _result.msg_empty('PELNE')
?};

_user:=null();
{? _can_continue
|| _user:=exec('FindInSet','#table','USERS','USR_KKOD',_obj.USER,,,1);
   {? _user=null()
   || _can_continue:=0;
      _result.msg_norec('USER')
   ?}
?};

_rb:=null();
{? _can_continue
|| RBtyp:={? var_press('RBtyp')>0 || RBtyp || REF.INFO ?};
   RBref:={? var_press('RBref')>0 || RBref ||  0 ?};
   _firma:={? RBtyp*'KH'>0 || RACHBANK.FIRMA || null ?};
   RACHBANK.AKTYWNY:='T';
   SKID_RBK.index('AKTYWNY'); SKID_RBK.prefix(_firma,RBtyp,RBref,RACHBANK.AKTYWNY,_obj.RB);
   {? SKID_RBK.first
   || _rb:=SKID_RBK.ref()
   ?};
   {? _rb=null()
   || _can_continue:=0;
      _result.msg_norec('RB')
   ?}
?};

{? _obj.DOSTEP<>'T' & _obj.DOSTEP<>'N' & _can_continue
|| _can_continue:=0;
   _result.msg_inset('DOSTEP','T','N')
?};

{? _obj.PELNE<>'T' & _obj.PELNE<>'N' & _can_continue
|| _can_continue:=0;
   _result.msg_inset('PELNE','T','N')
?};

{? _can_continue & _obj.DOSTEP='T'
|| {? ~exec('user_upraw_dostep','xls_hrb_upr','HRB',_user)
   || _can_continue:=0;
      _result.msg_value('DOSTEP','Użytkownik nie może mieć uprawnienia, nie ma odpowiedniej roli.'@)
   ?}
?};

_result.RESULT:=_can_continue;

:: OK

{? _result.RESULT & _obj.PELNE='T' & _mode=1
|| UPR_RB.index('RB');
   UPR_RB.prefix(_user);
   _bperm_ref:=exec('bperm_ref','xls_hrb_upr','HRB');
   B_PERM_U.index('USER');
   B_PERM_U.prefix(REF.FIRMA,_user, _bperm_ref);
   {? UPR_RB.first() | (B_PERM_U.first(); B_PERM_U.FULL='N')
   || _result.ACTION:='pdel';
      _result.OBJ:=obj_new('USER','PELNE');
      _result.OBJ.USER:=_user;
      _result.OBJ.PELNE:='T'
   ?}
?};

{? _result.RESULT & _obj.PELNE='N' & (_mode=1 | _obj.DOSTEP='T')
|| UPR_RB.index('RB');
   UPR_RB.prefix(_user,_rb);
   _bperm_ref:=exec('bperm_ref','xls_hrb_upr','HRB');
   B_PERM_U.index('USER');
   B_PERM_U.prefix(REF.FIRMA,_user, _bperm_ref);
   {? UPR_RB.first()
   || {? _obj.DOSTEP='N'
      || _result.ACTION:='del'
      ?}
   || {? _obj.DOSTEP='T'
      || _result.ACTION:='add';
         _result.OBJ:=obj_new('USER','RB');
         _result.OBJ.USER:=_user;
         _result.OBJ.RB:=_rb;
         exec('record','xls_hrb_upr',_obj,_mode,_result)
      ?}
   ?}
?};

~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [19.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------

_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| _user:=exec('FindInSet','#table','USERS','USR_KKOD',_obj.USER,,,1);
   _bperm_ref:=exec('bperm_ref','xls_hrb_upr','HRB');
   B_PERM_U.index('USER');
   B_PERM_U.prefix(REF.FIRMA, _user, _bperm_ref);
   {? _validate.ACTION='add'
   || {? B_PERM_U.first()
      || {? B_PERM_U.FULL='T' | B_PERM_U.ACCESS='N'
         || B_PERM_U.FULL:='N';
            B_PERM_U.ACCESS:='T';
            B_PERM_U.put()
         ?};
         {? UPR_RB.add(1) & B_PERM_U.FULL='N' & B_PERM_U.ACCESS='T'
         || _result:=1
         ?}
      ?}
   |? _validate.ACTION='pdel'
   || {? UPR_RB.first()
      || {! |? UPR_RB.del() !}
      ?};
      {? B_PERM_U.first() & (B_PERM_U.FULL='N' | B_PERM_U.ACCESS='N')
       || B_PERM_U.FULL:='T';
          B_PERM_U.ACCESS:='T';
          B_PERM_U.put()
      ?};
      {? ~UPR_RB.first() & B_PERM_U.FULL='T' & B_PERM_U.ACCESS='T' || _result:=1 ?}
   |? _validate.ACTION='del'
   || {? B_PERM_U.first()
      || {? B_PERM_U.FULL='T'
         || B_PERM_U.FULL:='N';
            B_PERM_U.put()
         ?};
         {? B_PERM_U.FULL='N' & UPR_RB.count()=0 & UPR_RB.del(1,1)<>0
         || _result:=1
         ?}
      ?}
   ?}
?};

{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie uprawnienia użytkownika %1 do rachunku bankowego %2 nie powiodło się.'@
                        [_obj.USER,_obj.RB]

   |? _validate.ACTION='del'
   || _validate.MSG:='Usunięcie uprawnienia użytkownika %1 do rachunku bankowego %2 nie powiodło się.'@
                        [_obj.USER,_obj.RB]
   |? _validate.ACTION='pdel'
   || _validate.MSG:='Nadanie pełnych uprawnień do rachunku bankowego użytkownikowi %1 nie powiodło się.'@
                        [_obj.USER]
   ?}
?};

_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 3269a5f06373c75dae2f3b2fc70d5bc1bafef437886d85565942934c5c68fc0eb60c78fb8094c2d0d8c8348efb63d5fd388457620adabb62e21cd17d21d3b857e7eb9e43838783baee9b5104dc718fb7fb74f90d323aa51295e35efd89def93dca3c8e97d254fdae4f0e3ef072d37db7de952d26d70dd0311cb509b96f086da7
