:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_ztp.fml
:: Utworzony: 23.07.2018
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu typów zleceń
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ZTP';
_def.DOMAIN:=exec('name','#b_domain','TTE');
_def.FUNPAR:='ZWS_PAR_TZLE';

_def.FILE:='produkcja.xlsx';
_def.SHEET:='Typy zleceń'@+'=1,1';
_def.NAME:='Typy zleceń'@;
_def.DESC:='Typy zleceń'@;

_def.PREFIX:="ZTP.index('TP'); ZTP.prefix()";
_def.TABLE:="ZTP";
_def.FIELDS:="exec('fields','xls_ztp',_a)";

_def.BEFORE:="ZTP.cntx_psh()";
_def.AFTER:="ZTP.cntx_pop()";
_def.SELECT:="exec('select','xls_ztp',_a)";

_def.EXPORT:="exec('export','xls_ztp',_a,_b)";
_def.VALIDATE:="exec('validate','xls_ztp',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_ztp',_a,_b,_c)";
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_define:=$(
   '_a.define(_b,'
   '{? var_pres(\'_d\')=type_of(\'\') || _d || exec(\'fldLabel\',\'#field\',ZTP,_b) ?},_c,,'
   '{? var_pres(\'_e\')=type_of(\'\') || _e || exec(\'fldComment\',\'#field\',ZTP,_b) ?})'
);
_define(_def,'TYP',0,,'Typ (max. 3 znaki)'@);
_define(_def,'OPIS',0,,'Opis (max. 60 znaków)'@);
_define(_def,'WP',1);
_define(_def,'DEF_OPCK',1);
_define(_def,'DEF_OPCA',1);
_define(_def,'CRUBALL',1);
_define(_def,'CRUBMAT',1);
_define(_def,'CRUBROB',1);
_define(_def,'CRUBJEDN',1);
_define(_def,'CRUBIL',1);
_define(_def,'CRUBIL0',1);
_define(_def,'ILE_PRZ',1);
_define(_def,'TOL',1);
_define(_def,'RODZAJ',1);
_define(_def,'WYD',1);
_define(_def,'KK',1);
_define(_def,'MG',1);
_define(_def,'KOD_ZLC',1);
_define(_def,'KOD_ZLP',1);
_define(_def,'KOD_PAR',1);
_define(_def,'K_NZL',1);
_define(_def,'K_LIM',1);
_define(_def,'K_PDP',1);
_define(_def,'K_NLI',1);
_define(_def,'K_ROB',1);
_define(_def,'K_ILO',1);
_define(_def,'TECH',1);
_define(_def,'PL_DIR',1);
_define(_def,'SEP_PRZ',1);
_define(_def,'PL_FORCE',1);
_define(_def,'PROJZAKR',1);
_define(_def,'PROJWJO',1);
_define(_def,'PROJZKH',1);
_define(_def,'RP_REZ',1);
~~


\record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
ZTP.prefix();
{? _validate.ACTION='add'
|| ZTP.blank();
   ZTP.TYP:=_obj.TYP
?};
ZTP.OPIS:=_obj.OPIS;
ZTP.WP:=_obj.WP;
ZTP.DEF_OPCK:=_validate.OBJ.DEF_OPCK;
ZTP.DEF_OPCA:=_validate.OBJ.DEF_OPCA;
ZTP.CRUBALL:=_obj.CRUBALL;
ZTP.CRUBMAT:=_obj.CRUBMAT;
ZTP.CRUBROB:=_obj.CRUBROB;
ZTP.CRUBJEDN:=_obj.CRUBJEDN;
ZTP.CRUBIL:=_obj.CRUBIL;
ZTP.CRUBIL0:=_obj.CRUBIL0;
ZTP.ILE_PRZ:=_obj.ILE_PRZ;
ZTP.TOL:=_obj.TOL;
ZTP.RODZAJ:=_obj.RODZAJ;
ZTP.WYD:=_validate.OBJ.WYD;
ZTP.KK:=_validate.OBJ.KK;
ZTP.MG:=_validate.OBJ.MG;
ZTP.KOD_ZLC:=_obj.KOD_ZLC;
ZTP.KOD_ZLP:=_obj.KOD_ZLP;
ZTP.KOD_PAR:=_obj.KOD_PAR;
ZTP.K_NZL:=_obj.K_NZL;
ZTP.K_LIM:=_obj.K_LIM;
ZTP.K_PDP:=_obj.K_PDP;
ZTP.K_NLI:=_obj.K_NLI;
ZTP.K_ROB:=_obj.K_ROB;
ZTP.K_ILO:=_obj.K_ILO;
ZTP.TECH:=_obj.TECH;
ZTP.PL_DIR:=_obj.PL_DIR;
ZTP.SEP_PRZ:=_obj.SEP_PRZ;
ZTP.PL_FORCE:=_obj.PL_FORCE;
ZTP.PROJZAKR:=_obj.PROJZAKR;
ZTP.PROJWJO:=_obj.PROJWJO;
ZTP.PROJZKH:=_obj.PROJZKH;
ZTP.RP_REZ:=_obj.RP_REZ;
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.TYP.VALUE:=ZTP.TYP;
_table.OPIS.VALUE:=ZTP.OPIS;
_table.WP.VALUE:=ZTP.WP;
_table.DEF_OPCK.VALUE:=ZTP.DEF_OPCK().NA; _excel.write_async('ANWAR'+ZTP.DEF_OPCK().A01,ZTP.DEF_OPCK);
_table.DEF_OPCA.VALUE:=ZTP.DEF_OPCA().NA; _excel.write_async('ANWAR'+ZTP.DEF_OPCA().A01,ZTP.DEF_OPCA);
_table.CRUBALL.VALUE:=ZTP.CRUBALL;
_table.CRUBMAT.VALUE:=ZTP.CRUBMAT;
_table.CRUBROB.VALUE:=ZTP.CRUBROB;
_table.CRUBJEDN.VALUE:=ZTP.CRUBJEDN;
_table.CRUBIL.VALUE:=ZTP.CRUBIL;
_table.CRUBIL0.VALUE:=ZTP.CRUBIL0;
_table.ILE_PRZ.VALUE:=ZTP.ILE_PRZ;
_table.TOL.VALUE:=ZTP.TOL;
_table.RODZAJ.VALUE:=ZTP.RODZAJ;
_table.WYD.VALUE:=ZTP.WYD().KOD; _excel.write_async('SLO',ZTP.WYD);
_table.KK.VALUE:=ZTP.KK().SYM;
_table.MG.VALUE:=ZTP.MG().SYM; _excel.write_async('MG',ZTP.MG);
_table.KOD_ZLC.VALUE:=ZTP.KOD_ZLC;
   _excel.write_async('NRDOK',exec('FindInSet','#table','NRDOK','NRDOK',ZTP.KOD_ZLC,,,1,,null()));
_table.KOD_ZLP.VALUE:=ZTP.KOD_ZLP;
   _excel.write_async('NRDOK',exec('FindInSet','#table','NRDOK','NRDOK',ZTP.KOD_ZLP,,,1,,null()));
_table.KOD_PAR.VALUE:=ZTP.KOD_PAR;
   _excel.write_async('NRDOK',exec('FindInSet','#table','NRDOK','NRDOK',ZTP.KOD_PAR,,,1,,null()));
_table.K_NZL.VALUE:=ZTP.K_NZL;
_table.K_LIM.VALUE:=ZTP.K_LIM;
_table.K_PDP.VALUE:=ZTP.K_PDP;
_table.K_NLI.VALUE:=ZTP.K_NLI;
_table.K_ROB.VALUE:=ZTP.K_ROB;
_table.K_ILO.VALUE:=ZTP.K_ILO;
_table.TECH.VALUE:=ZTP.TECH;
_table.PL_DIR.VALUE:=ZTP.PL_DIR;
_table.SEP_PRZ.VALUE:=ZTP.SEP_PRZ;
_table.PL_FORCE.VALUE:=ZTP.PL_FORCE;
_table.PROJZAKR.VALUE:=ZTP.PROJZAKR;
_table.PROJWJO.VALUE:=ZTP.PROJWJO;
_table.PROJZKH.VALUE:=ZTP.PROJZKH;
_table.RP_REZ.VALUE:=ZTP.RP_REZ;

:: Dostępne warianty kalkulacji i analizy dla zlecenia
::ZTPF.cntx_psh();
::ZTPF.index('TO');
::ZTPF.prefix(ZTP.ref());
::{? ZTPF.first()
::|| {!
::   |? _excel.write_async('ZTPF'+ZTPF.OPC().A01,ZTPF.ref());
::      ZTPF.next()
::   !}
::?};
::ZTPF.cntx_pop();

_result


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('DEF_OPCK','DEF_OPCA','WYD','KK','MG');
_result.OBJ.DEF_OPCK:=exec('FindInSet','#table','ANWAR','NA',_obj.DEF_OPCK,'0',"ANWAR.ref()",1);
_result.OBJ.DEF_OPCA:=exec('FindInSet','#table','ANWAR','NA',_obj.DEF_OPCA,'1',"ANWAR.ref()",1);
_result.OBJ.WYD:=exec('FindInSet','#table','SLO','SL',_obj.WYD,XINFO.SLWYDZIA,"SLO.ref()",1);
_result.OBJ.KK:=exec('FindInSet','#table','KK','KONTAKOD',_obj.KK,REF.FIRMA,"KK.ref()",1);
_result.OBJ.MG:=exec('FindInSet','#table','MG','MAGAZYNY',_obj.MG,,"MG.ref()",1);

:: Błędy
{? _obj.DEF_OPCK<>'' & _result.OBJ.DEF_OPCK=null()
|| _result.msg_norec('DEF_OPCK');
   _result.RESULT:=0
?};
{? _obj.DEF_OPCA<>'' & _result.OBJ.DEF_OPCA=null()
|| _result.msg_norec('DEF_OPCA');
   _result.RESULT:=0
?};
{? _obj.WYD<>'' & _result.OBJ.WYD=null()
|| _result.msg_norec('WYD');
   _result.RESULT:=0
?};
{? _obj.KK<>'' & _result.OBJ.KK=null()
|| _result.msg_norec('KK');
   _result.RESULT:=0
?};
{? _obj.MG<>'' & _result.OBJ.MG=null()
|| _result.msg_norec('MG');
   _result.RESULT:=0
?};
{? +_obj.K_NZL=0 | 'TN'*_obj.K_NZL=0
|| _result.msg_inset('K_NZL','T','N');
   _result.RESULT:=0
?};
{? +_obj.K_LIM=0 | 'TN'*_obj.K_LIM=0
|| _result.msg_inset('K_LIM','T','N');
   _result.RESULT:=0
?};
{? +_obj.K_PDP=0 | 'TN'*_obj.K_PDP=0
|| _result.msg_inset('K_PDP','T','N');
   _result.RESULT:=0
?};
{? +_obj.K_NLI=0 | 'TN'*_obj.K_NLI=0
|| _result.msg_inset('K_NLI','T','N');
   _result.RESULT:=0
?};
{? +_obj.K_ROB=0 | 'TN'*_obj.K_ROB=0
|| _result.msg_inset('K_ROB','T','N');
   _result.RESULT:=0
?};
{? +_obj.K_ILO=0 | 'TN'*_obj.K_ILO=0
|| _result.msg_inset('K_ILO','T','N');
   _result.RESULT:=0
?};
{? +_obj.TECH=0 | 'TN'*_obj.TECH=0
|| _result.msg_inset('TECH','T','N');
   _result.RESULT:=0
?};
{? +_obj.RP_REZ=0 | 'TN'*_obj.RP_REZ=0
|| _result.msg_inset('RP_REZ','T','N');
   _result.RESULT:=0
?};

:: OK
{? _result.RESULT>0
|| BEER.NRDOK_AB:='ZL';
   ZTP.index('TP');
   ZTP.prefix(_obj.TYP,);
   {? ZTP.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record','xls_ztp',_obj,_mode,_result);
         {? exec('chk_ztp','zl_common',1)<>''
         || _result.RESULT:=0
         ?}
      ?}
   || _result.ACTION:='add';
      exec('record','xls_ztp',_obj,_mode,_result);
      {? exec('chk_ztp','zl_common',0)<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ZTP.add(1)
   |? _validate.ACTION='put'
   || _result:=ZTP.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie typu zlecenia %1 nie powiodło się.'@[$_obj.TYP]
   || _validate.MSG:='Poprawa typu zlecenia %1 nie powiodła się.'@[$_obj.TYP]
   ?}
?};
_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,
   'TYP','STRING[3]','Typ'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'OPIS','STRING[60]','Opis'
);
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'TYP',,);

ZTP.cntx_psh();
ZTP.index('TP');
ZTP.prefix();
{? ZTP.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$ZTP.ref();
      _selected.prefix($ZTP.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.TYP:=ZTP.TYP;
      _tab.OPIS:=ZTP.OPIS;
      _tab.add();
      ZTP.next()
   !}
?};
_result:=exec('select_action','#table',_tab,'TYP,OPIS',20,'Wybór typów zleceń do eksportu'@);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |? _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
ZTP.cntx_pop();
_result

:Sign Version 2.0 jowisz:1048 2020/10/16 15:26:07 9d18076150fb44aed4abfbbd5eae00e94da21a7979e0ddee97a1bb80c0e3e6c27f589d31c925323d37ee4af109c2de71409f118a783362a552055150c4a168500a1aeb66e003797a5b277a852059b8ac689b52ac864df2799147e7e0b788f625a4e68edd5b7fbb7b4fd24275888a1ce291867ed2ba5bc4492b0c77b2b7afa69f
