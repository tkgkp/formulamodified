:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_proc.fml
:: Utworzony: 27.08.2018
:: Autor: WH
:: Systemy:
::======================================================================================================================
:: Zawartość:
::======================================================================================================================

\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - obiekt z definicją, który należy zasilić - wynik działania exec('args_init','#excel_imex')
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='B_PROC';
_def.DOMAIN:=exec('name','#b_domain','ZPR');
_def.FUNPAR:='b_proc_fix';
::_def.ADD_ROWS:=100;
_def.FILE:='procesy.xlsx';
_def.SHEET:='Procesy'@+'=1,3';
_def.NAME:='Procesy'@;
_def.DESC:='Procesy'@;

_def.PREFIX:="exec('prefix','xls_proc_fix')";
_def.TABLE:="exec('table','xls_proc_fix',_a,_b)";
_def.FIELDS:="exec('fields','xls_proc_fix',_a)";

_def.EXPORT:="exec('export','xls_proc_fix',_a,_b)";
_def.VALIDATE:="exec('validate','xls_proc_fix',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_proc_fix',_a,_b,_c)";
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca eksportowane pola tabeli i ich atrybuty w excel
::   WE: _a - obiekt z definicją pól który należy zasilić - wynik działania exec('args_fields','#excel_imex')
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_tooltip:=MS.name(B_PROC,'SYMBOL')+' '+'(max. %1 znaków). '@[$MS.fld_len(B_PROC,'SYMBOL')];
_tooltip+='Wymagane.'@;
_def.define('SYMBOL','Symbol'@,1,,_tooltip);

_tooltip:=MS.name(B_PROC,'NAME')+' '+'(max. %1 znaków). '@[$MS.fld_len(B_PROC,'NAME')];
_tooltip+='Wymagane.'@;
_def.define('NAME','Nazwa'@,1,,_tooltip);

_tooltip:=MS.name(B_PROC,'VER')+' '+'(max. %1 znaków). '@[$MS.fld_len(B_PROC,'VER')];
_tooltip+='Wymagane.'@;
_def.define('VER','Wersja'@,1,,_tooltip);

_tooltip:=MS.name(B_PROC,'TARGET')+' '+'(max. %1 znaków). '@['32 tys'];
_def.define('TARGET','Cel'@,1,,_tooltip);

_tooltip:=MS.name(B_PROC,'DESC')+' '+'(max. %1 znaków). '@['32 tys'];
_def.define('DESC','Opis'@,1,,_tooltip);

_tooltip:='Nazwa pliku .graphml. Wymagane.'@;
_def.define('FILE','Plik'@,1,,_tooltip);
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól tabeli MacroBASE
::                      każdy obiekt ma taką strukturę:
::                        _obj_bridge.NAZWA_POLA.VALUE - wartość która będzie zapisana w EXCEL
::                        _obj_bridge.NAZWA_POLA.EDITABLE - czy komórka będzie edytowalna
::                        _obj_bridge.NAZWA_POLA.COLOR - kolor w formacie html czyli #ffffff
::                      Aktualny wewnętrzny obiekt można podejrzeć tu: exec('filler_obj_core','#excel_imex')
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER   - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obj_new() - obiekt z resultem, wynik działania exec('args_valid','#excel_imex').
::                        Obiekt ten jest przekazywany do formuły na IMPORT. Pole RESULT decyduje czy formuła
::                        na import się wykona. Pole MSG służy to odpisania komunikatu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_can_continue:=1;
_result.RESULT:=1;
:: Walidacja wartości z Excel, czy są w nim pola których się spodziewam i czy mają dobre wartości
{? _obj.SYMBOL=''
|| _can_continue:=0;
   _result.msg_empty('SYMBOL')
?};
{? _obj.NAME=''
|| _can_continue:=0;
   _result.msg_empty('NAME')
?};
{? _obj.VER=''
|| _can_continue:=0;
   _result.msg_empty('VER')
?};
{? _can_continue>0
|| _max:=MS.fld_len(B_PROC,'SYMBOL');
   {? +_obj.SYMBOL>_max
   || _result.msg_length('SYMBOL',_max);
      _obj.SYMBOL:=_max+_obj.SYMBOL
   ?}
?};
{? _can_continue>0
|| _max:=MS.fld_len(B_PROC,'NAME');
   {? +_obj.NAME>_max
   || _result.msg_length('NAME',_max);
      _obj.NAME:=_max+_obj.NAME
   ?}
?};
{? _can_continue>0
|| _max:=MS.fld_len(B_PROC,'VER');
   {? +_obj.VER>_max
   || _result.msg_length('VER',_max);
      _obj.VER:=_max+_obj.VER
   ?}
?};
_sep:=exec('sep','#file');
_filepath:=_result.dir()+_sep+_obj.FILE;
{? _can_continue>0
||
   {? +_filepath>255
   || _can_continue:=0;
      _result.MSG:='Ścieżka do pliku (katalog i nazwa) nie może być dłuższa niż 255 znaków.'@
   ?}
?};
{? _can_continue>0
|| {? _obj.FILE*'\\'>0 |
      _obj.FILE*'/'>0 |
      _obj.FILE*'<'>0 |
      _obj.FILE*'>'>0 |
      _obj.FILE*':'>0 |
      _obj.FILE*'*'>0 |
      _obj.FILE*'?'>0 |
      _obj.FILE*'\"'>0
   || _can_continue:=0;
      _result.MSG:='Nazwa pliku zawiera niedozwolone znaki.'@
   ?}
?};
_dir_on_server:=_result.env.DIR_ON_SERVER;

{? _can_continue>0
|| _fpath:=_filepath;
   {? _dir_on_server=0
   || _fpath:='@'+_filepath
   ?};
   {? fexists(_fpath,0)=0
   || _can_continue:=0;
      _result.MSG:='Plik: %1 nie istnieje.'@[_filepath]
   ?}
?};

{? _can_continue>0
||
   B_PROC.index('SYM');
   B_PROC.prefix('N',REF.FIRMA,_obj.SYMBOL,_obj.VER,);
   {? B_PROC.first()
   ||
      {? _mode=1
      || _result.ACTION:='put';
         B_PROC.NAME:=_obj.NAME;
         B_PROC.memo_set(_obj.TARGET,'TARGET');
         B_PROC.memo_set(_obj.DESC,'DESC');
         ~~
      ?};
      ~~
   ?};
   ~~
?};
{? _can_continue=0
|| _result.RESULT:=0
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt z resultem walidatora i resultem importu, wynik działania exec('args_valid','#excel_imex')
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;
_can_continue:=1;

{? _result.ACTION='put'
|| _what:=exec('B_PROC','#to_string');
   _can_continue:=B_PROC.put();
   {? _can_continue>0
   || _can_continue:=B_PROC.memo_put(,'TARGET')
   ?};
   {? _can_continue>0
   || _can_continue:=B_PROC.memo_put(,'DESC')
   ?};
   {? _can_continue>0
   || _result.MSG:='Proces: %1 już istnieje. Podczas importu zostały zaktualizowane tylko dane nagłówka.'@[_what]
   || _result.MSG:='Proces: %1 już istnieje. Nie udała się aktualizacja danych nagłówka.'@[_what]
   ?}
?};
{? _can_continue=0
|| _result.RESULT:=0
?};
~~


\table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Przygotowuję tabelkę tymczasową procesów do eksportu
::   WE: _a - INTEGER - 1/2/3 - tryb działania: 1 - eksport wszystkiego
::                                              2 - eksport asynchroniczny jednego rekordu
::                                              3 - eksport wybranych rekordów
::       [_b] - INTEGER - [0]/1 - czy formuła wykonana w czasie inicjalizacji i weryfikacji
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=~~;

_mode:=1;
{? var_pres('_a')=type_of(0)
|| _mode:=_a
?};
_init:=0;
{? var_pres('_b')=type_of(0)
|| _init:=_b
?};

{? _init=0
||
   {? var_pres('EX_ENV')<100
   || _env:=exec('env','#b_design');
      EX_ENV:=_env
   || _env:=EX_ENV
   ?};
   _tab:=_env.EXCEL_SEL
?};
{? type_of(_tab)<=0
||
   _tab:=tab_tmp(3,
      'SELECTED','STRING[1]','Wybrano?'
      ,'SYMBOL','STRING[100]','Symbol'@
      ,'NAME','STRING[100]','Nazwa'@
      ,'VER','STRING[30]','Wersja'@
      ,'REF','STRING[16]','SQL Ref'
      ,'ACCEPTED','STRING[1]','Zaakceptowany?'@
      ,'OPIS','STRING[255]','Symbol, nazwa, wersja'
      ,'FILE','STRING[255]','Plik'
      ,'TARGET','SYS_MEMO'   ,'Cel'@
      ,'DESC'  ,'SYS_MEMO'   ,'Opis'@
      ,'IDADD' ,'IDADD'      ,'Identyfikator rekordu'
   );
   {? _init=0
   ||
      B_PROC.cntx_psh();
      exec('prefix','xls_proc');
      {? B_PROC.first()
      || {!
         |? _tab.blank();
            _tab.REF:=$B_PROC.ref();
            _tab.SYMBOL:=B_PROC.SYMBOL;
            _tab.NAME:=B_PROC.NAME;
            _tab.VER:=B_PROC.VER;
            _tab.ACCEPTED:=B_PROC.ACCEPTED;
            _memo:=B_PROC.memo_txt(,1,'TARGET');
            _tab.memo_set(_memo,'TARGET');
            _memo:=B_PROC.memo_txt(,1,'DESC');
            _tab.memo_set(_memo,'DESC');
            _tab.OPIS:=exec('B_PROC','#to_string');
            {? _tab.add()>0
            || _tab.memo_put(,'TARGET');
               _tab.memo_put(,'DESC')
            ?};
            B_PROC.next()
         !}
      ?};
      B_PROC.cntx_pop();
      _env.EXCEL_SEL:=_tab
   ?}
?};
_tab


\prefix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Formuła na prefix
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
B_PROC.index('FIRMA');
B_PROC.prefix(REF.FIRMA,'T');
~~


\init_alt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.02]
:: OPIS: Inicjalizuje mechanizm tylko jednym naprawczym importem
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_env.init("exec('init','xls_proc_fix',_a)");
~~

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:42 61c1679941cac72b43baf34ff30eebc7069379c0afc936ffb4081ea2164b47021e7dc9c5062b32017d608ab25f3fca880e8415fa76e210bb49a12fb22d273137e81520d89b63485954927dcb491e03ccab32e9b9ba5da82d38807e58fff224122acddd011e03e3e94ad89df5754742e649c8b0dacec86cac2e0fffd6d2abc08b
