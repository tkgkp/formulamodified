:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_spr_fin.fml
:: Utworzony: 28.08.2018
:: Autor: JK
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu sprawozdań finansowych
::======================================================================================================================


\filename
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Nazwa pliku do eksportu
::   we: _a - jeżeli przekazany to obieg dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')>0
|| {? _a='dokumenty'
   || 'obieg_dokumentow.xlsx'
   || 'obieg_wnioskow.xlsx'
   ?}
|| 'obieg_wnioskow.xlsx'
?}


\filename_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Nazwa pliku do eksportu typów wniosku bez papieru
::----------------------------------------------------------------------------------------------------------------------
'obieg_wniosków_bez_papieru.xlsx'


\filename_seod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Nazwa pliku do eksportu typów seod
::   WE: _a - W-wnioski, F-faktury, D-delegacje
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') || _a || 'F' ?};
{? _typ='F'
|| 'obieg_faktur_seod.xlsx'
|? _typ='W'
|| 'obieg_wniosków_seod.xlsx'
|| 'obieg_delegacji_seod.xlsx'
?}


\TYPOBIEG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TYPOBIEG';
_def.FUNPAR:='ZWS_PAR_WTYP';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Typy obiegów'@+'=1,1';
_def.NAME:='Typy obiegów';
_def.DESC:='Typy obiegów';
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

_def.PREFIX:="TYPOBIEG.index('UNIK'); TYPOBIEG.prefix()";
_def.TABLE:="TYPOBIEG";
_def.FIELDS:="exec('TYPOBIEG_fld','xls_obieg',_a)";

_def.BEFORE:="TYPOBIEG.cntx_psh()";
_def.AFTER:="TYPOBIEG.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('TYPOBIEG_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('TYPOBIEG_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('TYPOBIEG_imp','xls_obieg',_a,_b,_c)";
~~


\TYPOBIEG_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZWA','Nazwa',1,,'50 znakowa nazwa typu obiegu');
~~


\TYPOBIEG_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZWA.VALUE:=TYPOBIEG.NAZWA;
_result


\TYPOBIEG_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.NAZWA='' || 'NAZWA'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};
: ostrzeżenia
_max:=MS.fld_len(TYPOBIEG,'NAZWA');
{? +_table.NAZWA>_max
|| _result.msg_length('NAZWA',_max);
   _table.NAZWA:=_max+_table.NAZWA
?};

TYPOBIEG.index('UNIK');
TYPOBIEG.prefix(_table.NAZWA,_table.NAZWA);
{? TYPOBIEG.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || TYPOBIEG.blank() ?};
   TYPOBIEG.NAZWA:=_table.NAZWA
?};
~~


\TYPOBIEG_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TYPOBIEG.add(1)
   |? _validate.ACTION='put'
   || _result:=TYPOBIEG.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie TYPOBIEG: %1 nie powiodło się.'[_table.NAZWA]
   || _validate.MSG:='Poprawa TYPOBIEG: %1 nie powiodła się.'[_table.NAZWA]
   ?}
?};
_result


\ETYPZAL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPZAL';
_def.FUNPAR:='ZWS_PAR_OZAL';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Typy zaliczek'@+'=1,1';
_def.NAME:='Typy zaliczek';
_def.DESC:='Typy zaliczek';

_def.PREFIX:="ETYPZAL.index('UNIK'); ETYPZAL.prefix(REF.FIRMA)";
_def.TABLE:="ETYPZAL";
_def.FIELDS:="exec('ETYPZAL_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPZAL.cntx_psh()";
_def.AFTER:="ETYPZAL.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPZAL_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPZAL_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPZAL_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPZAL_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZ','Nazwa',1,,'50 znakowa nazwa typu zaliczki'@);
_def.define('SYSTEM','Zaliczka bez obiegu',1,,'Znacznik, czy zaliczka bez obiegu');
_def.define('KASPRZEL','Domyślna realizacja przez kasę czy poprzez przelew',1,,'Domyślna realizacja przez kasę czy poprzez przelew');
_def.define('EDSYMZAL','Edycja symbolu zaliczki',1,,'Znacznik, czy edytowany symbol zaliczki');
_def.define('AUT_SYM','Automatyczne nadawanie symbolu zaliczki',1,,'Znacznik, czy automatyczne nadawanie symbolu zaliczki');
_def.define('FORMSYMZ','Formuła na symbol zaliczki',1,,'Formuła na symbol zaliczki');
_def.define('ED_WAL','Edycja waluty',1,,'Edycja waluty');
_def.define('DOMLDNIR','Domyślna liczba dni realizacji',1,,'Domyślna liczba dni realizacji zaliczki',,0);
_def.define('DOT_WYN','Dotyczy wynagrodzeń',1,,'Znacznik, czy rejestrowane zaliczki dotyczą wynagrodzeń');
_def.define('KON_ROZ','Konto rozliczeń',1,,'Formuła na konto rozliczeń');
~~


\ETYPZAL_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;
_table.NAZ.VALUE:=ETYPZAL.NAZ;
_table.SYSTEM.VALUE:=ETYPZAL.SYSTEM;
_table.KASPRZEL.VALUE:=ETYPZAL.KASPRZEL;
_table.EDSYMZAL.VALUE:=ETYPZAL.EDSYMZAL;
_table.AUT_SYM.VALUE:=ETYPZAL.AUT_SYM;
_table.FORMSYMZ.VALUE:=ETYPZAL.FORMSYMZ;
_table.ED_WAL.VALUE:=ETYPZAL.ED_WAL;
_table.DOMLDNIR.VALUE:=ETYPZAL.DOMLDNIR;
_table.DOT_WYN.VALUE:=ETYPZAL.DOT_WYN;
_table.KON_ROZ.VALUE:=ETYPZAL.KON_ROZ;
_result


\ETYPZAL_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.SYSTEM='' || 'SYSTEM'
   |? _table.NAZ='' || 'NAZ'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};
: ostrzeżenia
_max:=MS.fld_len(ETYPZAL,'SYSTEM');
{? +_table.SYSTEM>_max
|| _result.msg_length('SYSTEM',_max);
   _table.SYSTEM:=_max+_table.SYSTEM
?};
_max:=MS.fld_len(ETYPZAL,'NAZ');
{? +_table.NAZ>_max
|| _result.msg_length('NAZ',_max);
   _table.NAZ:=_max+_table.NAZ
?};

ETYPZAL.index('UNIK');
ETYPZAL.prefix(REF.FIRMA,_table.SYSTEM,_table.NAZ,_table.NAZ);
{? ETYPZAL.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYPZAL.blank() ?};
   ETYPZAL.NAZ:=_table.NAZ;
   ETYPZAL.SYSTEM:=_table.SYSTEM;
   ETYPZAL.KASPRZEL:=_table.KASPRZEL;
   ETYPZAL.EDSYMZAL:=_table.EDSYMZAL;
   ETYPZAL.AUT_SYM:=_table.AUT_SYM;
   ETYPZAL.FORMSYMZ:=_table.FORMSYMZ;
   ETYPZAL.ED_WAL:=_table.ED_WAL;
   ETYPZAL.DOMLDNIR:=_table.DOMLDNIR;
   ETYPZAL.DOT_WYN:=_table.DOT_WYN;
   ETYPZAL.KON_ROZ:=_table.KON_ROZ;
   ETYPZAL.FIRMA:=REF.FIRMA
?};
~~


\ETYPZAL_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPZAL.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPZAL.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYPZAL: %1 nie powiodło się.'[_table.NAZWA]
   || _validate.MSG:='Poprawa ETYPZAL: %1 nie powiodła się.'[_table.NAZWA]
   ?}
?};
_result


\ETYPY_F
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPY_F';
_def.FUNPAR:='ZWS_PAR_OTYP';
_def.DOMAIN:=exec('name','#b_domain','OBG');
_def.FILE:=exec('filename','xls_obieg','dokumenty');
_def.SHEET:='Typy dokumentów'+'=1,1';
_def.NAME:='Typy dokumentów w obiegu';
_def.DESC:='Typy dokumentów w obiegu';

_def.PREFIX:="ETYPY.index('UNIK_WP'); ETYPY.prefix()";
_def.TABLE:="exec('ETYPY_F_tab','xls_obieg',_a,'N')";
_def.TAB_IMP:="ETYPY";
_def.FIELDS:="exec('ETYPY_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPY.cntx_psh()";
_def.AFTER:="ETYPY.cntx_pop()";
_def.SELECT:="exec('ETYPY_select','xls_obieg',_a,'T','N')";

_def.EXPORT:="exec('ETYPY_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPY_valid','xls_obieg',_a,_b,_c,1)";
_def.IMPORT:="exec('ETYPY_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPY_F_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Zwraca tabelę do eksportu listy parametrów bieżącej firmy
::   WE:  _a  - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::       [_b] - typ na portalu
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| sql(
      'select ETYPY.REFERENCE as REF, (\':\' || ETYPY.IDADD || ETYPY.REFERENCE) as UIDREF '
      'from ETYPY join TYPOBIEG '
      'where TYPOBIEG.NAZWA LIKE \':_a\' and '+
      {? var_pres('_b')=type_of('')
      || 'ETYPY.W_PORTAL=\''+_b+'\''
      || 'ETYPY.W_PORTAL NOT LIKE \'T\''
      ?}
      ,'Obieg faktur'
   )
|| ETYPY
?}


\ETYPY
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPY';
_def.FUNPAR:='ZWS_PAR_WTYP';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg','wnioski');
_def.SHEET:='Typy wniosków'+'=1,1';
_def.NAME:='Typy wniosków w obiegu';
_def.DESC:='Typy wniosków w obiegu';

_def.PREFIX:="ETYPY.index('UNIK_WP'); ETYPY.prefix()";
_def.TABLE:="exec('ETYPY_tab','xls_obieg',_a)";
_def.TAB_IMP:="ETYPY";
_def.FIELDS:="exec('ETYPY_fld','xls_obieg',_a,'n')";

_def.BEFORE:="ETYPY.cntx_psh()";
_def.AFTER:="ETYPY.cntx_pop()";
_def.SELECT:="exec('ETYPY_select','xls_obieg',_a,'N','N')";

_def.EXPORT:="exec('ETYPY_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPY_valid','xls_obieg',_a,_b,_c,2)";
_def.IMPORT:="exec('ETYPY_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPY_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE:  _a  - obiekt z definicją pól który należy zasilić
::       [_b] - typ na wspolnym portalu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_wp:={? var_pres('_b')=type_of('') || _b || 'N' ?};
_def.define('NAZWA','Nazwa',1,,'Nazwa typu dokumentu w obiegu',2);
_def.define('W_PORTAL','Wspólny portal',1,,'Znacznik, czy dotyczy wspólnego portalu',2);
_def.define('ED_PODZ','Edycja podziałów controllingowych w dokumentach',1,,'Edycja podziałów controllingowych w dokumentach? T/N',2);
_def.define('SKID_MB','Model dla controllingu',1,,'Wskazanie na domyślny model dla controllingu',2);
_def.define('PLATNOSC','Domyślny rodzaj płatności',1,,'Wskazanie na domyślny rodzaj płatności',2);
_def.define('DOM_SL','Domyślny słownik kontrahentów',1,,'Wskazanie na domyślny słownik kontrahentów',2);
_def.define('TYPVATPR','Typ dokumentu - VAT czy prosty',1,,'Typ dokumentu - czy VAT? T/N',2);
_def.define('ZAP_REAL','Realizacja zapotrzebowań',1,,'Czy dokument w obiegu jest realizacją zapotrzebowania? T/N',2);
_def.define('DEKR','Znacznik, czy dokument w obiegu jest dekretowany',1,,'Znacznik, czy dokument w obiegu jest dekretowany w f-k? T/N',2);
_def.define('ED_ID','Edycja identyfikatora dokumentu',1,,'Edycja identyfikatora dokumentu? T/N',2);
_def.define('AUT_ID','Automatyczne nadawanie identyfikatora dokumentu',1,,'Automatyczne nadawanie identyfikatora dokumentu? T/N',2);
_def.define('TYPOBIEG','Typ obiegu',1,,'Wskazanie na typ obiegu',2);
_def.define('CZY_DATY','Wnioski - czy wprowadzać zakres dat',1,,'Wnioski - czy wprowadzać zakres dat? N - nie wprowadzać/D - zakres dat/G - zakres dat i godzin',2);
_def.define('CZY_WAR','Wnioski - czy wprowadzać wartość',1,,'Wnioski - czy wprowadzać wartość? B - brutto/N - netto/A - brutto i netto/pole niewypełnione - nie wprowadzać',2);
_def.define('CZY_KH','Wnioski - czy wprowadzać kontrahenta',1,,'Wnioski - czy wprowadzać kontrahenta? T/N',2);
_def.define('CZY_PRAC','Wnioski - czy wprowadzać pracownika',1,,'Wnioski - czy wprowadzać pracownika? T/N',2);
_def.define('OBIEGKON','Obieg kontaktów',1,,'Typy dotyczące obiegów kontaktów? T/N',2);
_def.define('ZAPOT','Wniosek typu zapotrzebowanie',1,,'Wniosek typu zapotrzebowanie? T/B/N',2);
_def.define('DEL_POZ','Delegacja z przejazdami',1,,'Znacznik, czy delegacja z przejazdami? T/N',2);
_def.define('DEL_ZAL','Delegacja z zaliczkami',1,,'Znacznik, czy delegacja z zaliczkami? T/N',2);
_def.define('CZY_GODR','Czy godzina rozpoczęcia delegacji?',1,,'Delegacje - czy rejestrować godzinę rozpoczęcia delegacji? T/N',2);
_def.define('CZY_GODZ','Czy godzina zakończenia?',1,,'Delegacje - czy rejestrować godzinę zakończenia delegacji? T/N',2);
_def.define('DEL_ZAGR','Delegacja zagraniczna?',1,,'Czy delegacja zagraniczna? T/N',2);
_def.define('ATR_ONE','Tylko jeden komplet informacji dodatkowych',1,,'Ograniczenie liczby pól informacji dod. do jednego kompletu? T/N',2);
_def.define('ATR_G1R','Generuj automatycznie pusty rekord informacji dodatkowych',1,,'Czy wygenerować automatycznie pierwszy rekord inform. dod.? T/N',2);
_def.define('CZY_KNTR','Kontrola daty początkowej?',1,,'Czy kontrola daty początkowej delegacji/planu delegacji? T/N',2);
_def.define('KNTR_DNI','Maksymalna liczba dni',1,,'O ile dni maksymalnie data początkowa < bieżącej',1);
_def.define('FAKT_DEL','Faktura dla delegacji',1,,'Znacznik, czy faktura dla delegacji? T/N',2);
_def.define('OPIS','Opis typu dokumentu',1,,'Opis typu dokumentu',2);
_def.define('AKTYWNY','Aktywny',1,,'Znacznik czy typ aktywny.? T/N',2);
_def.define('CZY_DOPE','Wnioski - czy wprowadzać datę operacji',1,,'Wnioski - czy wprowadzać datę operacji? T/N',2);
_def.define('CZY_ZALP','Wniosek typu zaliczka dla pracownika',1,,'Wniosek typu zaliczka dla pracownika? T/N',2);
_def.define('ETYPZAL','Typ zaliczki',1,,'Wskazanie na typ zaliczki',2);
_def.define('POZF','Pozycje faktury',1,,'Znacznik, czy dostępna redakcja pozycji faktur? T/N',2);
_def.define('TYP_CENY','Typ ceny',1,,'Znacznik typu ceny jednostkowej: N - netto, B - brutto',2);
_def.define('CZY_PLAN','Plan delegacji',1,,'Znacznik czy jest to delegacja czy plan delegacji? T/N',2);
_def.define('OBS_PROJ','Obsługa projektów',1,,'Aktywna obsługa projektów? T/N',2);
_def.define('PROJRODZ','Rodzaj wybieranych projektów',1,,'Rodzaj wybieranych projektów: Z - zewn./W - wewn/A - czy wszystkie',2);
_def.define('PROJ_RW','Rodzaj wartości dla projektów',1,,'Rodzaj wartości dla projektów',2);
_def.define('PROJ_SJO','Schemat jednostek organizacyjnych dla projektów',1,,'Schemat jednostek organizacyjnych dla projektów',2);
_def.define('RODZ_DOK','Rodzaj dokumentu',1,,'Rodzaj dokumentu? Z - zakup/S - sprzedaż',2);
_def.define('FAKT_ZAL','Faktura zaliczkowa',1,,'Czy faktura zaliczkowa? T/N',2);
_def.define('ODD_TYP','Jednostka księgowa - typ',1,,
   'Typ definicji domyślnej jednostki księgowej\n'
   'B - brak\n'
   'S - stała\n'
   'F - formuła',2
);
_def.define('ODD_S','Jednostka księgowa - stała',1,,'Domyślna jednostka księgowa - stała',2);
_def.define('ODD_F','Jednostka księgowa - formuła',1,,'Domyślna jednostka księgowa - formuła',2);
_def.define('IDINHEAD','Informacje dodatkowe w nagłówku',1,,'Czy informacje dodatkowe w oknie nagłówkowym T/N',2);
_def.define('ED_TEMAT','Temat edytowalny',1,,'Czy temat jest edytowalny',2);
_def.define('GRP_DOC','Grupa dokumentu w obiegu',1,,'Wskazanie na grupę dokumentu w obiegu',2);
{? var_pres('_b')<=0
|| _def.define('DOK_VAT','Pozycje VAT dla faktur walutowych',1,,'Wprowadzanie pozycji VAT dla faktur walutowych T/N',2);
   _def.define('KURSF','Formuła na kurs waluty',1,,'Formuła na kurs waluty',2)
?};
{? _wp='n'
|| _def.define('IN_POR','Portal HR',1,,'Znacznik T/N, czy wniosek dostępny na portalu HR',2);
   _def.define('ID_WP','Identyfikator - HR portal',1,,'Identyfikator w HR portal',2);
   _def.define('WID_WP','Widoczny na HR portalu',1,,'Czy typ wniosku widoczny w HR portal?',2);
   _def.define('RODZ_WP','Rodzaj wniosku na HR portal',1,,'Rodzaj wniosku w HR portal',2);
   _def.define('GRUPA_WP','Grupa wniosku na HR portal',1,,'Grupa wniosku w HR portal',2)
|? _wp='D'
|| _def.define('ID_WP','Identyfikator portalu SEOD',0,,'Identyfikator portalu HR',2)
?};
~~


\ETYPY_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE:  _a  - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::        _b  - czy obieg dokumentów? T/N
::       [_c] - typ na portalu
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;
_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'NAZWA','STRING[50]','Nazwa'
   ,'TYPOBIEG','STRING[50]','Typ');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'TYPOBIEG',,);
_por:={? var_pres('_c')=type_of('') || _c || '' ?};

ETYPY.cntx_psh();
ETYPY.index('UNIK_WP');
ETYPY.prefix();
{? ETYPY.first()
|| {!
   |?
      {? _b='T' & ETYPY.TYPOBIEG().NAZWA='Obieg faktur' & (_por='' | ETYPY.W_PORTAL=_por)
      || _tab.blank();
         _tab.REF:=$ETYPY.ref();
         _selected.prefix($ETYPY.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.NAZWA:=ETYPY.NAZWA;
         _tab.TYPOBIEG:=ETYPY.TYPOBIEG().NAZWA;
         _tab.add()
      |? _b='N' & ETYPY.TYPOBIEG().NAZWA<>'Obieg faktur' & (_por='' | ETYPY.W_PORTAL=_por)
      || _tab.blank();
         _tab.REF:=$ETYPY.ref();
         _selected.prefix($ETYPY.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.NAZWA:=ETYPY.NAZWA;
         _tab.TYPOBIEG:=ETYPY.TYPOBIEG().NAZWA;
         _tab.add()
      ?};
      ETYPY.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NAZWA,TYPOBIEG',20,'Wybór typów w obiegu do eksportu'@,1);
{? _result>0
||
   _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
ETYPY.cntx_pop();
_result


\ETYPY_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Zwraca tabelę do eksportu listy parametrów bieżącej firmy
::   WE:  _a  - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| sql(
      'select ETYPY.REFERENCE as REF, (\':\' || ETYPY.IDADD || ETYPY.REFERENCE) as UIDREF '
      'from ETYPY join TYPOBIEG '
      'where TYPOBIEG.NAZWA NOT LIKE \':_a\' and ETYPY.W_PORTAL = \'N\''
      ,'Obieg faktur'
   )
|| ETYPY
?}


\ETYPY_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE:  _a  - obj_new - środowisko mechanizmu
::        _b  - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;

{? _tab=ETYPY | ETYPY.seek(_tab.REF)
|| _table.NAZWA.VALUE:=ETYPY.NAZWA;
   _table.ED_PODZ.VALUE:={? ETYPY.ED_PODZ='T' || 'T' || 'N' ?};
   _table.W_PORTAL.VALUE:=ETYPY.W_PORTAL;
   _table.SKID_MB.VALUE:=ETYPY.SKID_MB().KOD; _excel.write_async('SKID_MBN',ETYPY.SKID_MB);
   _table.PLATNOSC.VALUE:=ETYPY.PLATNOSC().KOD; _excel.write_async('SLO',ETYPY.PLATNOSC);
   _table.DOM_SL.VALUE:=ETYPY.DOM_SL().SLU().NAZ; _excel.write_async('SLU',ETYPY.DOM_SL().SLU);
   _table.TYPVATPR.VALUE:={? ETYPY.TYPVATPR || 'T' || 'N' ?};
   _table.ZAP_REAL.VALUE:={? ETYPY.ZAP_REAL='T' || 'T' || 'N' ?};
   _table.DEKR.VALUE:={? ETYPY.DEKR='T' || 'T' || 'N' ?};
   _table.ED_ID.VALUE:={? ETYPY.ED_ID='T' || 'T' || 'N' ?};
   _table.AUT_ID.VALUE:={? ETYPY.AUT_ID='T' || 'T' || 'N' ?};
   _table.TYPOBIEG.VALUE:=ETYPY.TYPOBIEG().NAZWA; _excel.write_async('TYPOBIEG',ETYPY.TYPOBIEG);
   _table.CZY_DATY.VALUE:={? ETYPY.CZY_DATY=1 || 'D' |? ETYPY.CZY_DATY=2 || 'G' || 'N' ?};
   _table.CZY_WAR.VALUE:={? ETYPY.CZY_WAR=1 || 'B' |?  ETYPY.CZY_WAR=2 || 'N' |?  ETYPY.CZY_WAR=3 || 'A' || '' ?};
   _table.CZY_KH.VALUE:={? ETYPY.CZY_KH || 'T' || 'N' ?};
   _table.CZY_PRAC.VALUE:={? ETYPY.CZY_PRAC || 'T' || 'N' ?};
   _table.OBIEGKON.VALUE:={? ETYPY.OBIEGKON || 'T' || 'N' ?};
   _table.ZAPOT.VALUE:={? ETYPY.ZAPOT=1 || 'T' |? ETYPY.ZAPOT=2 || 'B' || 'N' ?};
   _table.DEL_POZ.VALUE:={? ETYPY.DEL_POZ || 'T' || 'N' ?};
   _table.DEL_ZAL.VALUE:={? ETYPY.DEL_ZAL || 'T' || 'N' ?};
   _table.CZY_GODR.VALUE:={? ETYPY.CZY_GODR=1 || 'T' |? ETYPY.CZY_GODR=2 || 'U' || 'N' ?};
   _table.CZY_GODZ.VALUE:={? ETYPY.CZY_GODZ=1 || 'T' |? ETYPY.CZY_GODZ=2 || 'U' || 'N' ?};
   _table.DEL_ZAGR.VALUE:={? ETYPY.DEL_ZAGR || 'T' || 'N' ?};
   _table.ATR_ONE.VALUE:={? ETYPY.ATR_ONE || 'T' || 'N' ?};
   _table.ATR_G1R.VALUE:={? ETYPY.ATR_G1R || 'T' || 'N' ?};
   _table.CZY_KNTR.VALUE:={? ETYPY.CZY_KNTR || 'T' || 'N' ?};
   _table.KNTR_DNI.VALUE:=ETYPY.KNTR_DNI;
   _table.FAKT_DEL.VALUE:={? ETYPY.FAKT_DEL || 'T' || 'N' ?};
   _table.OPIS.VALUE:=ETYPY.memo_txt(,1,'OPIS');
   _table.AKTYWNY.VALUE:={? ETYPY.AKTYWNY='T' || 'T' || 'N' ?};
   _table.CZY_DOPE.VALUE:={? ETYPY.CZY_DOPE='T' || 'T' || 'N' ?};
   _table.CZY_ZALP.VALUE:={? ETYPY.CZY_ZALP='T' || 'T' || 'N' ?};
   _table.ETYPZAL.VALUE:={? ETYPY.CZY_ZALP='T'
                         || _excel.write_async('ETYPZAL',ETYPY.ETYPZAL); ETYPY.ETYPZAL().NAZ
                         || ''
                         ?};
   _table.POZF.VALUE:={? ETYPY.POZF='T' || 'T' || 'N' ?};
   _table.TYP_CENY.VALUE:=ETYPY.TYP_CENY;
   _table.CZY_PLAN.VALUE:={? ETYPY.CZY_PLAN || 'T' || 'N' ?};
   _table.OBS_PROJ.VALUE:={? ETYPY.OBS_PROJ || 'T' || 'N' ?};
   _table.PROJRODZ.VALUE:={? ETYPY.PROJRODZ=2 || 'Z' |? ETYPY.PROJRODZ=3 || 'W' || 'A' ?};
   _table.PROJ_RW.VALUE:=ETYPY.PROJ_RW().SYMBOL; _excel.write_async('UD_SCH',ETYPY.PROJ_RW);
   _table.PROJ_SJO.VALUE:=ETYPY.PROJ_SJO().SYMBOL; _excel.write_async('UD_SCH',ETYPY.PROJ_SJO);
   _table.RODZ_DOK.VALUE:=ETYPY.RODZ_DOK;
   _table.FAKT_ZAL.VALUE:={? ETYPY.FAKT_ZAL='T' || 'T' || 'N' ?};
   _table.ODD_TYP.VALUE:=ETYPY.ODD_TYP;
   _table.ODD_S.VALUE:=ETYPY.ODD_S().OD; {? ETYPY.ODD_S || _excel.write_async('ODD',ETYPY.ODD_S) ?};
   _table.ODD_F.VALUE:=ETYPY.ODD_F;
   _table.IDINHEAD.VALUE:={? ETYPY.IDINHEAD || 'T' || 'N' ?};
   _table.ED_TEMAT.VALUE:={? ETYPY.ED_TEMAT='T' || 'T' || 'N' ?};
   {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
   || _table.DOK_VAT.VALUE:={? ETYPY.DOK_VAT='' || 'N' || ETYPY.DOK_VAT ?};
      _table.KURSF.VALUE:=ETYPY.KURSF
   ?};
   _table.GRP_DOC.VALUE:=ETYPY.GRP_DOC().N;
                         {? ETYPY.GRP_DOC
                         || {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
                            || _excel.write_async('ETYP_GRPF',ETYPY.GRP_DOC)
                            || _excel.write_async('ETYP_GRP',ETYPY.GRP_DOC)
                            ?}
                         ?};
   {? ETYPY.W_PORTAL='N' & ETYPY.TYPOBIEG().NAZWA='Obieg wniosków'
   || _table.IN_POR.VALUE:={? ETYPY.IN_POR || 'T' || 'N' ?};
      _table.ID_WP.VALUE:=ETYPY.ID_WP;
      _table.WID_WP.VALUE:=ETYPY.WID_WP;
      _table.RODZ_WP.VALUE:=$ETYPY.RODZ_WP;
      _table.GRUPA_WP.VALUE:=ETYPY.GRUPA_WP
   |? ETYPY.W_PORTAL='D'
   || _table.ID_WP.VALUE:=ETYPY.ID_WP
   ?};
   {? ETYPY.W_PORTAL<>'D'
   ||
::    Eksport schematów informacji dodatkowych
      ETYP_ATR.cntx_psh();
      ETYP_ATR.index('TATZ');
      ETYP_ATR.prefix(ETYPY.ref());
      {? ETYP_ATR.first()
      || {!
         |? {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
            || _excel.write_async('ETYP_ATRF',ETYP_ATR.ref())
            || _excel.write_async('ETYP_ATR',ETYP_ATR.ref())
            ?};
            ETYP_ATR.next()
         !}
      ?};
      ETYP_ATR.cntx_pop();

::    Eksport definicji tworzenia podziałów
      ETYPYDTP.cntx_psh();
      ETYPYDTP.index('UNIK');
      ETYPYDTP.prefix(ETYPY.ref());
      {? ETYPYDTP.first()
      || {!
         |? {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
            || _excel.write_async('ETYPYDTPF',ETYPYDTP.ref())
            || _excel.write_async('ETYPYDTP',ETYPYDTP.ref())
            ?};
            ETYPYDTP.next()
         !}
      ?};
      ETYPYDTP.cntx_pop();
::    Definicje odtwarzania schematu
      ETYPYPOD.cntx_psh();
      ETYPYPOD.index('UNIK');
      ETYPYPOD.prefix(ETYPY.ref());
      {? ETYPYPOD.first()
      || {!
         |? {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
            || _excel.write_async('ETYPYPODF',ETYPYPOD.ref())
            || _excel.write_async('ETYPYPOD',ETYPYPOD.ref())
            ?};
            ETYPYPOD.next()
         !}
      ?};
      ETYPYPOD.cntx_pop()
   ?};

:: Parametry dekretacji z obiegu
   ETYPYFIR.cntx_psh();
   ETYPYFIR.index('UNIK');
   ETYPYFIR.prefix(ETYPY.ref());
   {? ETYPYFIR.first()
   || {!
      |? {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
         || {? ETYPY.W_PORTAL='S'
            || _excel.write_async('ETYPYFIRFS',ETYPYFIR.ref())
            || _excel.write_async('ETYPYFIRF',ETYPYFIR.ref())
            ?}
         |? ETYPY.W_PORTAL='D'
         || _excel.write_async('ETYPYFIRDS',ETYPYFIR.ref())
         || _excel.write_async('ETYPYFIR',ETYPYFIR.ref())
         ?};
         ETYPYFIR.next()
      !}
   ?};
   ETYPYFIR.cntx_pop();
:: Schematy
   {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
   ||
      ETSCHPOD.cntx_psh();
      ETSCHPOD.index('ETYPY');
      ETSCHPOD.prefix(ETYPY.ref);
      {? ETSCHPOD.first()
      || {!
         |? _excel.write_async('ETSCHPOD',ETSCHPOD.ref());
            ETSCHPOD.next()
         !}
      ?};
      ETSCHPOD.cntx_pop();

      ETSCHPDR.cntx_psh();
      ETSCHPDR.index('UNIK');
      ETSCHPDR.prefix(REF.FIRMA,ETYPY.ref());
      {? ETSCHPDR.first()
      || {!
         |? _excel.write_async('ETSCHPDR',ETSCHPDR.ref());
            ETSCHPDR.next()
         !}
      ?};
      ETSCHPDR.cntx_pop()
   ?}
?};
_result


\ETYPY_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE:  _a  - obj_new() - tablica nazwana z polami odczytanymi z excel
::        _b  - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::        _c  - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::        _d  - 1 - faktury / 2 - wnioski
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_typ:={? var_pres('_d')>0 || _d || 2 ?};
_result.RESULT:=1;

: wychwyć błędy krytyczne
_fld:=
   {? _table.NAZWA='' || 'NAZWA'
   |? _table.TYPOBIEG='' || 'TYPOBIEG'
   |? _typ=1 & _table.DOM_SL='' | _typ=2 & _table.CZY_KH='T' & _table.TYPOBIEG*'wniosków' & _table.DOM_SL='' || 'DOM_SL'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

_typobieg:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.TYPOBIEG,_table.TYPOBIEG,,1);
{? _typobieg=null
|| _result.MSG:='Nie znaleziono typu obiegu: %1'@[_table.TYPOBIEG];
   _result.RESULT:=0
?};

_dom_sl:=null;
{? _typ=1 | _typ=2 & _table.DOM_SL<>''
|| _dom_sl:=exec('FindInSet','#table','SLUAPPL','NAZ',_table.DOM_SL,'F',,1);
   {? _dom_sl=null
   || _result.MSG:='Nie znaleziono słownika użytkownika: %1'@[_table.DOM_SL];
      _result.RESULT:=0
   ?}
?};

: błędne wartości
{? _table.CZY_DATY<>'' & ('NDG'*_table.CZY_DATY)=0
|| _result.msg_value('CZY_DATY','Dozwolone wartości: N, D, G.');
   _result.RESULT:=0;
   return()

|? _table.CZY_WAR<>'' & ('BNA'*_table.CZY_WAR)=0
|| _result.msg_value('CZY_WAR','Dozwolone wartości: Niewypełnione pole, B, N, A.');
   _result.RESULT:=0;
   return()

|? _table.TYP_CENY<>'' & ('BN'*_table.TYP_CENY)=0
|| _result.msg_value('TYP_CENY','Dozwolone wartości: B, N.');
   _result.RESULT:=0;
   return()

|? _table.PROJRODZ<>'' & ('ZWA'*_table.PROJRODZ)=0
|| _result.msg_value('PROJRODZ','Dozwolone wartości: Z, W, A.');
   _result.RESULT:=0;
   return()

|? _table.RODZ_DOK<>'' & ('ZS'*_table.RODZ_DOK)=0
|| _result.msg_value('RODZ_DOK','Dozwolone wartości: Z, S.');
   _result.RESULT:=0;
   return()

|? _table.ZAPOT<>'' & _table.ZAPOT<>'T' & _table.ZAPOT<>'N' & _table.ZAPOT<>'B'
|| _result.msg_value('ZAPOT','Dozwolone wartości: niewypełnione pole, T, B, N.');
   _result.RESULT:=0;
   return()

|? (  _fld:='';
      {? _table.TYPVATPR<>'' & _table.TYPVATPR<>'T' & _table.TYPVATPR<>'N' || _fld:='TYPVATPR' ?};
      {? _table.ZAP_REAL<>'' & _table.ZAP_REAL<>'T' & _table.ZAP_REAL<>'N' || _fld:='ZAP_REAL' ?};
      {? _table.DEKR<>'' & _table.DEKR<>'T' & _table.DEKR<>'N' || _fld:='DEKR' ?};
      {? _table.ED_ID<>'' & _table.ED_ID<>'T' & _table.ED_ID<>'N' || _fld:='ED_ID' ?};
      {? _table.AUT_ID<>'' & _table.AUT_ID<>'T' & _table.AUT_ID<>'N' || _fld:='AUT_ID' ?};
      {? _table.CZY_KH<>'' & _table.CZY_KH<>'T' & _table.CZY_KH<>'N' || _fld:='CZY_KH' ?};
      {? _table.CZY_PRAC<>'' & _table.CZY_PRAC<>'T' & _table.CZY_PRAC<>'N' || _fld:='CZY_PRAC' ?};
      {? _table.OBIEGKON<>'' & _table.OBIEGKON<>'T' & _table.OBIEGKON<>'N' || _fld:='OBIEGKON' ?};
      {? _table.DEL_POZ<>'' & _table.DEL_POZ<>'T' & _table.DEL_POZ<>'N' || _fld:='DEL_POZ' ?};
      {? _table.DEL_ZAL<>'' & _table.DEL_ZAL<>'T' & _table.DEL_ZAL<>'N' || _fld:='DEL_ZAL' ?};
      {? _table.ATR_ONE<>'' & _table.ATR_ONE<>'T' & _table.ATR_ONE<>'N' || _fld:='ATR_ONE' ?};
      {? _table.ATR_G1R<>'' & _table.ATR_G1R<>'T' & _table.ATR_G1R<>'N' || _fld:='ATR_G1R' ?};
      {? _table.CZY_KNTR<>'' & _table.CZY_KNTR<>'T' & _table.CZY_KNTR<>'N' || _fld:='CZY_KNTR' ?};
      {? _table.FAKT_DEL<>'' & _table.FAKT_DEL<>'T' & _table.FAKT_DEL<>'N' || _fld:='FAKT_DEL' ?};
      {? _table.AKTYWNY<>'' & _table.AKTYWNY<>'T' & _table.AKTYWNY<>'N' || _fld:='AKTYWNY' ?};
      {? _table.CZY_DOPE<>'' & _table.CZY_DOPE<>'T' & _table.CZY_DOPE<>'N' || _fld:='CZY_DOPE' ?};
      {? _table.CZY_ZALP<>'' & _table.CZY_ZALP<>'T' & _table.CZY_ZALP<>'N' || _fld:='CZY_ZALP' ?};
      {? _table.POZF<>'' & _table.POZF<>'T' & _table.POZF<>'N' || _fld:='POZF' ?};
      {? _table.CZY_PLAN<>'' & _table.CZY_PLAN<>'T' & _table.CZY_PLAN<>'N' || _fld:='CZY_PLAN' ?};
      {? _table.OBS_PROJ<>'' & _table.OBS_PROJ<>'T' & _table.OBS_PROJ<>'N' || _fld:='OBS_PROJ' ?};
      {? _table.FAKT_ZAL<>'' & _table.FAKT_ZAL<>'T' & _table.FAKT_ZAL<>'N' || _fld:='FAKT_ZAL' ?};
      {? _table.ED_PODZ<>'' & _table.ED_PODZ<>'T' & _table.ED_PODZ<>'N' || _fld:='ED_PODZ' ?};
      {? _table.ED_TEMAT<>'' & _table.ED_TEMAT<>'T' & _table.ED_TEMAT<>'N' || _fld:='ED_TEMAT' ?};
      _fld<>''
   )
|| _result.msg_value(_fld,'Dozwolone wartości: niewypełnione pole, T, N.');
   _result.RESULT:=0;
   return()
|? 'BSF'*_table.ODD_TYP=0
|| _result.msg_inset('ODD_TYP','B','S','F');
   _result.RESULT:=0;
   return()
?};

ETYPY.index('UNIK_WP');
ETYPY.prefix(_typobieg,_table.W_PORTAL,_table.NAZWA,_table.NAZWA);
{? ETYPY.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _table.ODD_S='S' & _table.ODD_S=''
   || _result.msg_empty('ODD_S');
      _result.RESULT:=0;
      return()
   |? _table.ODD_S='F' & _table.ODD_F=''
   || _result.msg_empty('ODD_F');
      _result.RESULT:=0;
      return()
   ?}
?};
{? _result.RESULT=1 & _table.W_PORTAL='N' & _typ=2 & _table.ID_WP<>''
|| _is_id_wp:=0;
   _ref:=ETYPY.ref();
   ETYPY.cntx_psh();
   ETYPY.index('ID_WP'); ETYPY.prefix();
   {? ETYPY.find_key(_table.ID_WP,) & (_result.ACTION='add' | ETYPY.ref()<>_ref)
   || _is_id_wp:=1
   ?};
   ETYPY.cntx_pop();
   {? _is_id_wp
   || _result.MSG:='Istnieje już wniosek o identyfikatorze: %1 na portalu HR'@[_table.ID_WP];
      _result.RESULT:=0;
      return()
   ?}
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYPY.blank(1) ?};
   ETYPY.NAZWA:=_table.NAZWA;
   ETYPY.ED_PODZ:=_table.ED_PODZ;
   ETYPY.W_PORTAL:=_table.W_PORTAL;
   ETYPY.SKID_MB:=exec('FindInSet','#table','SKID_MBN','KOD',_table.SKID_MB,,,1);
   ETYPY.PLATNOSC:=exec('FindInSet','#table','SLO','KOD',_table.PLATNOSC,,,1);
   ETYPY.DOM_SL:=_dom_sl;
   ETYPY.TYPVATPR:={? _table.TYPVATPR='T' || 1 || 0 ?};
   ETYPY.ZAP_REAL:=_table.ZAP_REAL;
   ETYPY.DEKR:=_table.DEKR;
   ETYPY.ED_ID:=_table.ED_ID;
   ETYPY.AUT_ID:=_table.AUT_ID;
   ETYPY.TYPOBIEG:=_typobieg;
   ETYPY.CZY_DATY:={? _table.CZY_DATY='D' || 1 |? _table.CZY_DATY='G' || 2 || 0 ?};
   ETYPY.CZY_WAR:={? _table.CZY_WAR='B' || 1 |? _table.CZY_WAR='N' || 2 |? _table.CZY_WAR='A' || 3 || 0 ?};
   ETYPY.CZY_KH:={? _table.CZY_KH='T' || 1 || 0 ?};
   ETYPY.CZY_PRAC:={? _table.CZY_PRAC='T' || 1 || 0 ?};
   ETYPY.OBIEGKON:={? _table.OBIEGKON='T' || 1 || 0 ?};
   ETYPY.ZAPOT:={? _table.ZAPOT='T' || 1 |? _table.ZAPOT='B' || 2 || 0 ?};
   ETYPY.DEL_POZ:={? _table.DEL_POZ='T' || 1 || 0 ?};
   ETYPY.DEL_ZAL:={? _table.DEL_ZAL='T' || 1 || 0 ?};
   ETYPY.CZY_GODR:={? _table.CZY_GODR='T' || 1 |? _table.CZY_GODR='U'|| 2 || 0 ?};
   ETYPY.CZY_GODZ:={? _table.CZY_GODZ='T' || 1 |? _table.CZY_GODZ='U'|| 2 || 0 ?};
   ETYPY.DEL_ZAGR:={? _table.DEL_ZAGR='T' || 1 || 0 ?};
   ETYPY.ATR_ONE:={? _table.ATR_ONE='T' || 1 || 0 ?};
   ETYPY.ATR_G1R:={? _table.ATR_G1R='T' || 1 || 0 ?};
   ETYPY.CZY_KNTR:={? _table.CZY_KNTR='T' || 1 || 0 ?};
   ETYPY.KNTR_DNI:=_table.KNTR_DNI;
   ETYPY.FAKT_DEL:={? _table.FAKT_DEL='T' || 1 || 0 ?};
   ETYPY.AKTYWNY:=_table.AKTYWNY;
   ETYPY.CZY_DOPE:=_table.CZY_DOPE;
   ETYPY.CZY_ZALP:={? _table.CZY_ZALP='T' || 'T' || 'N' ?};
   ETYPY.ETYPZAL:={? _table.CZY_ZALP='T'
                  || exec('FindInSet','#table','ETYPZAL','DISP',_table.ETYPZAL,REF.FIRMA,_table.ETYPZAL,1)
                  || null()
                  ?};
   ETYPY.POZF:=_table.POZF;
   ETYPY.TYP_CENY:=_table.TYP_CENY;
   ETYPY.CZY_PLAN:={? _table.CZY_PLAN='T' || 1 || 0 ?};
   ETYPY.OBS_PROJ:={? _table.OBS_PROJ='T' || 1 || 0 ?};
   ETYPY.PROJRODZ:={? _table.PROJRODZ='Z' || 2 |? _table.PROJRODZ='W' || 3 || 1 ?};
   ETYPY.PROJ_RW:=exec('FindInSet','#table','UD_SCH','SYMBOLS',_table.PROJ_RW,,,1);
   ETYPY.PROJ_SJO:=exec('FindInSet','#table','UD_SCH','SYMBOLS',_table.PROJ_SJO,,,1);
   ETYPY.RODZ_DOK:=_table.RODZ_DOK;
   ETYPY.FAKT_ZAL:=_table.FAKT_ZAL;
   ETYPY.ODD_TYP:=_table.ODD_TYP;
   ETYPY.ODD_S:={? _table.ODD_S<>'' || exec('FindInSet','#table','ODD','ODDZIALY',_table.ODD_S,REF.FIRMA,,1) ?};
   ETYPY.ODD_F:=_table.ODD_F;
   ETYPY.IDINHEAD:={? _table.IDINHEAD='T' || 1 || 0 ?};
   ETYPY.ED_TEMAT:=_table.ED_TEMAT;
   {? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
   || ETYPY.DOK_VAT:=_table.DOK_VAT;
      ETYPY.KURSF:=_table.KURSF
   ?};
   ETYPY.GRP_DOC:=exec('FindInSet','#table','ETYP_GRP','N',_table.GRP_DOC,REF.FIRMA,,1);
   {? ETYPY.W_PORTAL='N' & _typ=2
   || ETYPY.IN_POR:=_table.IN_POR='T';
      ETYPY.ID_WP:=_table.ID_WP;
      ETYPY.WID_WP:={? 'TN'*_table.WID_WP || _table.WID_WP || 'N' ?};
      ETYPY.RODZ_WP:=#_table.RODZ_WP;
      ETYPY.GRUPA_WP:=_table.GRUPA_WP
   |? ETYPY.W_PORTAL='D'
   || ETYPY.ID_WP:=_table.ID_WP
   ?};
   ~~
?};
~~


\ETYPY_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPY.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPY.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYPY %1 nie powiodło się.'[_table.NAZWA]
   || _validate.MSG:='Poprawa ETYPY %1 nie powiodła się.'[_table.NAZWA]
   ?}
|| ETYPY.memo_set(_table.OPIS);
   ETYPY.memo_put(,'OPIS');
   ETYPY.put()
?};
_result


\ETYPYFIR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - UID - unikalny identyfikator imex
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:=_b;
_def.FUNPAR:={? _b+1='R' || 'ZWS_PAR_WTYP' |? _b+1='F' || 'ZWS_PAR_OTYP' |? _b+2='DS' || 'SEO_PAR_TYDE' || 'SEO_PAR_TYPY' ?};
_def.DOMAIN:={? _b+1='R' || exec('name','#b_domain','OBE')
             |? _b+1='F' || exec('name','#b_domain','OBG')
             || exec('name','#b_domain','SEO')
             ?};
_def.FILE:={? _b+1='R' || exec('filename','xls_obieg')
           |? _b+1='F' || exec('filename','xls_obieg','dokumenty')
           |? _b+2='DS' || exec('filename_seod','xls_obieg','D')
           || exec('filename_seod','xls_obieg','F')
           ?};
_def.SHEET:=_c+'=1,1';
_def.NAME:=_c;
_def.DESC:=_c;
_def.HIDDEN:='T';

_def.PREFIX:="ETYPYFIR.index('UNIK'); ETYPYFIR.prefix()";
_def.TABLE:="exec('ETYPYFIR_tab','xls_obieg',_a)";
_def.TAB_IMP:="ETYPYFIR";
_def.FIELDS:="exec('ETYPYFIR_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPYFIR.cntx_psh()";
_def.AFTER:="ETYPYFIR.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPYFIR_exp','xls_obieg',_a,_b)";
_def.VALIDATE:={? _b+2='DS'
               || "exec('ETYPYFIR_valid','xls_obieg',_a,_b,_c,'D')"
               |? _b+1='S'
               || "exec('ETYPYFIR_valid','xls_obieg',_a,_b,_c,'S')"
               || "exec('ETYPYFIR_valid','xls_obieg',_a,_b,_c)"
               ?};
_def.IMPORT:="exec('ETYPYFIR_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPYFIR_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ dokumentu w obiegu',1,,'Wskazanie na typ dokumentu w obiegu');
_def.define('ODD','Jednostka księgowa',1,,'Wskazanie na jednostkę księgową');
_def.define('ROK_F','Rok obrachunkowy',1,,'Wskazanie na rok obrachunkowy');
_def.define('DOM_REJ','Domyślny rejestr księgowy',1,,'Domyślny rejestr księgowy');
_def.define('DOM_RDOK','Domyślny rodzaj dokumentu',1,,'Domyślny rodzaj dokumentu');
_def.define('DOM_RKOR','Domyślny rodzaj dokumentu - korekty',1,,'Domyślny rodzaj dokumentu - korekty');
_def.define('DOM_RVAT','Domyślny rejestr VAT',1,,'Domyślny rejestr VAT');
_def.define('DOMGRVAT','Domyślna grupa podatkowa',1,,'Domyślna grupa podatkowa');
_def.define('AUTOKSIE','Schemat dokumentów',1,,'Schemat dokumentów');
~~


\ETYPYFIR_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Zwraca tabelę do eksportu listy parametrów bieżącej firmy
::   WE: _a - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| sql('select ETYPYFIR.REFERENCE as REF, (\':\' || ETYPYFIR.IDADD || ETYPYFIR.REFERENCE) as UIDREF from ETYPYFIR where ETYPYFIR.FIRMA=:_a',REF.FIRMA)
|| ETYPYFIR
?}


\ETYPYFIR_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;
{? _tab=ETYPYFIR | ETYPYFIR.seek(_tab.REF)
|| _table.ETYPYT.VALUE:=ETYPYFIR.ETYPY().TYPOBIEG().NAZWA;
   _table.ETYPY.VALUE:=ETYPYFIR.ETYPY().NAZWA;
   _table.ODD.VALUE:=ETYPYFIR.ODD().OD; _excel.write_async('ODD',ETYPYFIR.ODD);
   _table.ROK_F.VALUE:=ETYPYFIR.ROK_F().NAZ; _excel.write_async('ROK_F',ETYPYFIR.ROK_F);
   _table.DOM_REJ.VALUE:=ETYPYFIR.DOM_REJ().KOD; _excel.write_async('REJ',ETYPYFIR.DOM_REJ);
   _table.DOM_RDOK.VALUE:=ETYPYFIR.DOM_RDOK().NAZ; _excel.write_async('DOK_REJ',ETYPYFIR.DOM_RDOK);
   _table.DOM_RKOR.VALUE:=ETYPYFIR.DOM_RKOR().NAZ; _excel.write_async('DOK_REJ',ETYPYFIR.DOM_RKOR);
   _table.DOM_RVAT.VALUE:=ETYPYFIR.DOM_RVAT().SYM; _excel.write_async('VAT_REJ',ETYPYFIR.DOM_RVAT);
   _table.DOMGRVAT.VALUE:=ETYPYFIR.DOMGRVAT().KOD; _excel.write_async('GR_VAT',ETYPYFIR.DOMGRVAT);
   _table.AUTOKSIE.VALUE:=ETYPYFIR.AUTOKSIE().NAZ; _excel.write_async('AUTOKSIE',ETYPYFIR.AUTOKSIE)
?};
_result


\ETYPYFIR_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE:  _a  - obj_new() - tablica nazwana z polami odczytanymi z excel
::        _b  - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::        _c  - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::       [_d] - typ na portalu HR
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_wp:={? var_pres('_d')=type_of('') || _d || 'N' ?};
_result.RESULT:=1;
_etypy:=null;
_rej:=null;
_vrej:=null;
{? _table.DOM_REJ='' || _result.RESULT:=0 ?};
{? _result.RESULT
|| {? _table.ROK_F<>''
   || _rok:=exec('FindInSet','#table','ROK_F','NAZWA',_table.ROK_F,REF.FIRMA,,1);
      {? _rok=null
      || _result.MSG:='Nie znaleziono roku bilansowego: %1'@[_table.ROK_F];
         _result.RESULT:=0
      ?}
   || _rok:=null
   ?}
?};
{? _result.RESULT
|| _odd:=exec('FindInSet','#table','ODD','ODDZIALY',_table.ODD,REF.FIRMA,,1);
   {? _odd=null
   || _result.MSG:='Nie odnaleziono oddziału %1'@[_table.ODD];
      _result.RESULT:=0
   ?}
?};
{? _result.RESULT
|| _typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
   {? _typ=null
   || _result.MSG:='Nie odnaleziono typu obiegu %1'@[_table.ETYPYT];
      _result.RESULT:=0
   || _etypy:=exec('FindInSet','#table','ETYPY','UNIK_WP',_table.ETYPY,_typ,,1,_wp);
      {? _etypy=null
      || _result.MSG:='Nie odnaleziono typu obiegu %1'@[_table.ETYPY];
         _result.RESULT:=0;
         return()
      ?}
   ?}
?};

_rej:=null;
{? _result.RESULT
|| REJ.cntx_psh(); REJ.index('KOD'); REJ.prefix(_rok,_odd,_table.DOM_REJ,);
   {? REJ.first()
   || _rej:=REJ.ref()
   || _result.msg_norec('REJ');
      _result.RESULT:=0
   ?};
   REJ.cntx_pop()
?};
{? _result.RESULT
|| VAT_REJ.cntx_psh();
   {? _table.DOM_RVAT<>''
   || {? VAT_REJ.find_tab(,'SYM',,'=',_table.DOM_RVAT)
      || _vrej:=VAT_REJ.ref()
      || _result.msg_norec('VAT_REJ');
         _result.RESULT:=0
      ?}
   || _vrej:=null
   ?};
   VAT_REJ.cntx_pop()
?};
{? _result.RESULT
|| ETYPYFIR.index('UNIK'); ETYPYFIR.prefix(_etypy,REF.FIRMA,_rok,_odd);
   {? ETYPYFIR.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || ETYPYFIR.blank() ?};
      ETYPYFIR.ETYPY:=_etypy;
      ETYPYFIR.FIRMA:=REF.FIRMA;
      ETYPYFIR.ODD:=_odd;
      ETYPYFIR.ROK_F:=_rok;
      ETYPYFIR.DOM_RVAT:=_vrej;
      ETYPYFIR.DOM_REJ:=_rej;
      ETYPYFIR.DOM_RDOK:=exec('FindInSet','#table','DOK_REJ','NAZ',_table.DOM_RDOK,_rej,,1);
      ETYPYFIR.DOM_RKOR:=exec('FindInSet','#table','DOK_REJ','NAZ',_table.DOM_RKOR,_rej,,1);
      ETYPYFIR.DOMGRVAT:=exec('FindInSet','#table','GR_VAT','REJ_KOD',_table.DOMGRVAT,_rej,,1);
      ETYPYFIR.AUTOKSIE:=exec('FindInSet','#table','AUTOKSIE','NAZ',_table.AUTOKSIE,_rok,,1)
   ?}
?};
~~


\ETYPYFIR_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPYFIR.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPYFIR.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYPYFIR nie powiodło się.'
   || _validate.MSG:='Poprawa ETYPYFIR nie powiodła się.'
   ?}
?};
_result


\RODZINF
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='RODZINF';
_def.FUNPAR:='ZWS_PAR_KKKA';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:='definicje_kontrahenci.xlsx';
_def.SHEET:='Rodzaj kontaktu'+'=1,1';
_def.NAME:='Rodzaj kontaktu';
_def.DESC:='Rodzaj kontaktu';
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

_def.PREFIX:="RODZINF.index('UNIK'); RODZINF.prefix()";
_def.TABLE:="RODZINF";
_def.FIELDS:="exec('RODZINF_fld','xls_obieg',_a)";

_def.BEFORE:="RODZINF.cntx_psh()";
_def.AFTER:="RODZINF.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('RODZINF_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('RODZINF_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('RODZINF_imp','xls_obieg',_a,_b,_c)";
~~


\RODZINF_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZ','Nazwa',1,,'50 znakowa nazwa');
~~


\RODZINF_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZ.VALUE:=RODZINF.NAZ;
_result


\RODZINF_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

RODZINF.index('UNIK');
RODZINF.prefix(_table.NAZ);
{? RODZINF.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || RODZINF.blank() ?};
   RODZINF.NAZ:=_table.NAZ
?};
~~


\RODZINF_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=RODZINF.add(1)
   |? _validate.ACTION='put'
   || _result:=RODZINF.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie RODZINF %1 nie powiodło się.'[_table.NAZ]
   || _validate.MSG:='Poprawa RODZINF %1 nie powiodła się.'[_table.NAZ]
   ?}
?};
_result


\ETYP_ATR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::       _b - UID - unikalny identyfikator imex
::       _c - nazwa arkusza, nazwa i opis
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:=_b;
_def.FUNPAR:={? _b='ETYP_ATR' || 'ZWS_PAR_WTYP' || 'ZWS_PAR_OTYP' ?};
_def.DOMAIN:={? _b='ETYP_ATR' || exec('name','#b_domain','OBE') || exec('name','#b_domain','OBG') ?};
_def.FILE:={? _b='ETYP_ATR' || exec('filename','xls_obieg') ||  exec('filename','xls_obieg','dokumenty') ?};
_def.SHEET:=_c+'=1,1';
_def.NAME:=_c;
_def.DESC:=_c;
_def.HIDDEN:='T';

_def.PREFIX:="ETYP_ATR.index('KOLZ'); ETYP_ATR.prefix()";
_def.TABLE:="ETYP_ATR";
_def.FIELDS:="exec('ETYP_ATR_fld','xls_obieg',_a)";

_def.BEFORE:="ETYP_ATR.cntx_psh()";
_def.AFTER:="ETYP_ATR.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYP_ATR_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYP_ATR_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYP_ATR_imp','xls_obieg',_a,_b,_c)";
~~


\ETYP_ATR_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ dokumentu w obiegu',1,,'Typ dokumentu w obiegu');
_def.define('W_PORTAL','HR Portal',1,,'Znacznik, czy dotyczy HR portal');
_def.define('KOL','Kolumna',1,,'Numer porzadkowy kolumny w ramach schematu',,0);
_def.define('TAT','Atrybut',1,,'Wskazanie na atrybut');
_def.define('WYMAG','Czy wymagane',1,,'Czy wypełnienie pola jest wymagane');
_def.define('SLOPOLE','Pole słownika',1,,'Z którego pola słownika pobrać wartość (K - kod, T - treść)');
_def.define('DEF_KIND','Sposób nadawania wartości domyślnej',1,,'Nadawanie wg.: W - podana wartość, F - wyliczana formułą');
_def.define('DEFAULT','Wartość domyślna',1,,'Wartość domyślna');
_def.define('SLO','Wskazanie na element słownika',1,,'Wskazanie na element słownika dla wartości domyślnej');
_def.define('TUD_SKL','Typ elementu struktury',1,,'Wskazanie na typ elementu struktury wartości domyślnej');
_def.define('UD_SKL','Element struktury',1,,'Wskazanie na element struktury wartości domyślnej');
_def.define('DEF_FORM','Formuła na wyliczenie wartości początkowej',1,,'Formuła wyliczająca wartośc poczatkową');
_def.define('ZDARZT','Typ kontaktu',1,,'Typ kontaktu');
_def.define('EDIT','Blokada edycji',1,,'Blokada edycji');
_def.define('AE','Formuła po edycji',1,,'Formuła po edycji');
_def.define('OPIS','Nagłówek',1,,'Nagłówek sekcji atrybutów');
_def.define('TAB','Akronim tabeli powiązanej ze słownikiem',1,,'Akronim tabeli powiązanej ze słownikiem');
_def.define('TSLO','Formuła na słownik tymczasowy',1,,'Formuła na słownik tymczasowy');
_def.define('DOPIS','Rozszerzony długi opis',1,,'Rozszerzony długi opis');
_def.define('CZY_ZERO','Zerowa wartość liczbowa',1,,'Czy zero jest wartością pustą czy dopuszczalną wartością.');
_def.define('SLO_CHG','Słownik zmienny',1,,'Znacznik, czy formuła na słownik zależy od innych danych. T/N',2);
~~


\ETYP_ATR_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;
_table.ETYPYT.VALUE:=ETYP_ATR.ETYPY().TYPOBIEG().NAZWA;
_table.ETYPY.VALUE:=ETYP_ATR.ETYPY().NAZWA;
_table.W_PORTAL.VALUE:=ETYP_ATR.ETYPY().W_PORTAL;

::_excel.write_async('ETYPY',ETSCHPOD.ETSCHPDN);
_table.KOL.VALUE:=ETYP_ATR.KOL;
_table.TAT.VALUE:=ETYP_ATR.TAT().NA; _excel.write_async('TAT',ETYP_ATR.TAT);
_table.WYMAG.VALUE:=ETYP_ATR.WYMAG;
_table.SLOPOLE.VALUE:=ETYP_ATR.SLOPOLE;
_table.DEF_KIND.VALUE:=ETYP_ATR.DEF_KIND;
_table.DEFAULT.VALUE:=ETYP_ATR.DEFAULT;
_table.SLO.VALUE:=ETYP_ATR.SLO().KOD; _excel.write_async('SLO',ETYP_ATR.SLO);
_table.TUD_SKL.VALUE:=ETYP_ATR.UD_SKL().UD_TYP().SYMBOL;
_table.UD_SKL.VALUE:=ETYP_ATR.UD_SKL().SYMBOL; _excel.write_async('UD_SKL',ETYP_ATR.UD_SKL);
_table.DEF_FORM.VALUE:=ETYP_ATR.DEF_FORM;
_table.ZDARZT.VALUE:=ETYP_ATR.ZDARZT().ZDARZ; _excel.write_async('ZDARZT',ETYP_ATR.ZDARZT);
_table.EDIT.VALUE:=ETYP_ATR.EDIT;
_table.AE.VALUE:=ETYP_ATR.AE;
_table.OPIS.VALUE:=ETYP_ATR.memo_txt(,1,'OPIS');
_table.TAB.VALUE:=ETYP_ATR.TAB;
_table.TSLO.VALUE:=ETYP_ATR.TSLO;
_table.DOPIS.VALUE:=ETYP_ATR.memo_txt(,1,'DOPIS');
_table.CZY_ZERO.VALUE:=ETYP_ATR.CZY_ZERO;
_table.SLO_CHG.VALUE:={? ETYP_ATR.SLO_CHG || 'T' || 'N' ?};

_result


\ETYP_ATR_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_etypy:=null;

_typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
{? _typ=null
|| _result.msg_norec('ETYPYT');
   _result.RESULT:=0
|| _etypy:=exec('FindInSet','#table','ETYPY','UNIK_WP',_table.ETYPY,_typ,,1,_table.W_PORTAL);
   {? _etypy=null
   || _result.msg_norec('ETYPY');
      _result.RESULT:=0;
      return()
   ?}
?};

_zdarzt:=exec('FindInSet','#table','ZDARZT','ZDARZT',_table.ZDARZT,,,1);

ETYP_ATR.index('KOLZ');
ETYP_ATR.prefix(_etypy,_zdarzt,_table.KOL);
{? ETYP_ATR.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYP_ATR.blank() ?};
   ETYP_ATR.ETYPY:=_etypy;
   ETYP_ATR.KOL:=_table.KOL;
   ETYP_ATR.TAT:=exec('FindInSet','#table','TAT','NA',_table.TAT,,,1);
   ETYP_ATR.WYMAG:=_table.WYMAG;
   ETYP_ATR.SLOPOLE:=_table.SLOPOLE;
   ETYP_ATR.DEF_KIND:=_table.DEF_KIND;
   ETYP_ATR.DEFAULT:=_table.DEFAULT;
   ETYP_ATR.SLO:=exec('FindInSet','#table','SLO','KOD',_table.SLO,,,1);
   _tudskl:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.TUD_SKL,,,1);
   ETYP_ATR.UD_SKL:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.UD_SKL,_tudskl,,1);
   ETYP_ATR.DEF_FORM:=_table.DEF_FORM;
   ETYP_ATR.ZDARZT:=_zdarzt;
   ETYP_ATR.EDIT:=_table.EDIT;
   ETYP_ATR.AE:=_table.AE;
   ETYP_ATR.TAB:=_table.TAB;
   ETYP_ATR.TSLO:=_table.TSLO;
   ETYP_ATR.CZY_ZERO:=_table.CZY_ZERO;
   ETYP_ATR.SLO_CHG:=_table.SLO_CHG='T'
?};
~~


\ETYP_ATR_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYP_ATR.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYP_ATR.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYP_ATR nie powiodło się.'
   || _validate.MSG:='Poprawa ETYP_ATR nie powiodła się.'
   ?}
|| ETYP_ATR.memo_set(_table.OPIS,'OPIS');
   ETYP_ATR.memo_put(,'OPIS');
   ETYP_ATR.memo_set(_table.DOPIS,'DOPIS');
   ETYP_ATR.memo_put(,'DOPIS');
   ETYP_ATR.put()
?};
_result


\ETYP_ATR_WP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::       _b - UID - unikalny identyfikator imex
::       _c - nazwa arkusza, nazwa i opis
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:=_b;
_def.FUNPAR:={? _b='ETYP_ATR_WP' || 'ZWS_PAR_PTYP' || 'SEO_PAR_TYWN' ?};
_def.DOMAIN:={? _b='ETYP_ATR_WP' || exec('name','#b_domain','POR') || exec('name','#b_domain','SEO') ?};
_def.FILE:={? _b='ETYP_ATR_WP' || 'obieg_wnioskow_HR_Portal.xlsx' || exec('filename_seod','xls_obieg','W') ?};
_def.SHEET:=_c+'=1,1';
_def.NAME:=_c;
_def.DESC:=_c;
_def.HIDDEN:='T';

_def.PREFIX:="ETYP_ATR.index('KOLZ'); ETYP_ATR.prefix()";
_def.TABLE:="ETYP_ATR";
_def.FIELDS:="exec('ETYP_ATR_WP_fld','xls_obieg',_a)";

_def.BEFORE:="ETYP_ATR.cntx_psh()";
_def.AFTER:="ETYP_ATR.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYP_ATR_WP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYP_ATR_WP_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYP_ATR_WP_imp','xls_obieg',_a,_b,_c)";
~~


\ETYP_ATR_WP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ dokumentu w obiegu',1,,'Typ dokumentu w obiegu');
_def.define('W_PORTAL','HR portal',1,,'Znacznik, czy dotyczy HR portal');
_def.define('KOL','Kolumna',1,,'Numer porzadkowy kolumny w ramach schematu',,0);
_def.define('TAT','Atrybut',1,,'Wskazanie na atrybut');

_def.define('ID_WP','Identyfikator - HR portal',1,,'Identyfikator w HR portal');
_def.define('SEC_IDX','Numer sekcji',1,,'Numer sekcji (określa kolejność sekcji w oknie)');
_def.define('SECTION','Nazwa sekcji',1,,'Nazwa sekcji, w której zostanie umieszczone pole');
_def.define('HINT','Podpowiedź',1,,'Podpowiedź po najechaniu na pole');
_def.define('MAX_LENG','Maksymalna długość pola',1,,'Maksymalna długość pola');
_def.define('WIDTH','Szerokość',1,,'Szerokość');
_def.define('COLUMN','Kolumna',1,,'Kolumna, w której pole zostanie umieszczone na formularzu');
_def.define('ROW','Wiersz',1,,'Wiersz, w którym pole zostanie umieszone na formularzu');
_def.define('MINVALUE','Wartość minimalna',1,,'Wartość minimalna');
_def.define('MAXVALUE','Wartość maksymalna',1,,'Wartość maksymalna');
_def.define('DEFAULT','Wartość domyślna',1,,'Wartość domyślna');
_def.define('WYMAG','Czy wymagane',1,,'Czy wypełnienie pola jest wymagane');
_def.define('EDIT','Blokada edycji',1,,'Blokada edycji');
_def.define('VISIBLE','Widoczność',1,,'Czy widoczne?');
_def.define('CAP_SIZE','Szerokość etykiety',1,,'Szerokość miejsca na etykietę');

~~


\ETYP_ATR_WP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;
_table.ETYPYT.VALUE:=ETYP_ATR.ETYPY().TYPOBIEG().NAZWA;
_table.ETYPY.VALUE:=ETYP_ATR.ETYPY().NAZWA;
_table.W_PORTAL.VALUE:=ETYP_ATR.ETYPY().W_PORTAL;

_table.KOL.VALUE:=ETYP_ATR.KOL;
_table.TAT.VALUE:=ETYP_ATR.TAT().NA;
{? ETYPY.W_PORTAL='P'
|| _excel.write_async('TAT_BP',ETYP_ATR.TAT)
|? ETYPY.W_PORTAL='s'
|| _excel.write_async('TAT_SEOD',ETYP_ATR.TAT)
|| _excel.write_async('TAT_WP',ETYP_ATR.TAT)
?};
_table.ID_WP.VALUE:=ETYP_ATR.ID_WP;
_table.SEC_IDX.VALUE:=ETYP_ATR.SEC_IDX;
_table.SECTION.VALUE:=ETYP_ATR.SECTION;
_table.HINT.VALUE:=ETYP_ATR.HINT;
_table.MAX_LENG.VALUE:=ETYP_ATR.MAX_LENG;
_table.WIDTH.VALUE:=ETYP_ATR.WIDTH;
_table.COLUMN.VALUE:=ETYP_ATR.COLUMN;
_table.ROW.VALUE:=ETYP_ATR.ROW;
_table.MINVALUE.VALUE:=ETYP_ATR.MINVALUE;
_table.MAXVALUE.VALUE:=ETYP_ATR.MAXVALUE;
_table.DEFAULT.VALUE:=exec('etypatr_default','obiegi2');
_table.WYMAG.VALUE:=ETYP_ATR.WYMAG;
_table.EDIT.VALUE:=ETYP_ATR.EDIT;
_table.VISIBLE.VALUE:=ETYP_ATR.VISIBLE;
_table.CAP_SIZE.VALUE:=ETYP_ATR.CAP_SIZE;

_result


\ETYP_ATR_WP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_etypy:=null;

_typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
{? _typ=null
|| _result.msg_norec('ETYPYT');
   _result.RESULT:=0
|| _etypy:=exec('FindInSet','#table','ETYPY','UNIK_WP',_table.ETYPY,_typ,,1,_table.W_PORTAL);
   {? _etypy=null
   || _result.msg_norec('ETYPY');
      _result.RESULT:=0;
      return()
   ?}
?};
_tat:=exec('FindInSet','#table','TAT','NA',_table.TAT,,,1);
{? _tat=null
|| _result.msg_norec('TAT_WP');
   _result.RESULT:=0;
   return()
?};

ETYP_ATR.index('TATZ');
ETYP_ATR.prefix(_etypy,null(),_tat);
{? ETYP_ATR.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYP_ATR.blank() ?};
   ETYP_ATR.ETYPY:=_etypy;
   {? _result.ACTION='add'
   || ETYP_ATR.cntx_psh();
      ETYP_ATR.index('KOLZ');
      ETYP_ATR.prefix(_etypy,null(),_table.KOL);
      {? ETYP_ATR.first()
      || _lp:=1;
         _kol:=0;
         ETYP_ATR.cntx_psh();
         ETYP_ATR.index('KOLZ');
         {!
         |? ETYP_ATR.prefix(_etypy,null(),_lp);
            {? ETYP_ATR.first()
            || _lp+=1
            || _kol:=_lp
            ?};
            _kol>0
         !};
         ETYP_ATR.cntx_pop()
      || _kol:=_table.KOL
      ?};
      ETYP_ATR.cntx_pop();
      ETYP_ATR.KOL:=_kol
   ?};
   ETYP_ATR.TAT:=_tat;
   ETYP_ATR.ID_WP:=_table.ID_WP;
   ETYP_ATR.SEC_IDX:=_table.SEC_IDX;
   ETYP_ATR.SECTION:=_table.SECTION;
   ETYP_ATR.HINT:=_table.HINT;
   ETYP_ATR.MAX_LENG:=_table.MAX_LENG;
   ETYP_ATR.WIDTH:=_table.WIDTH;
   ETYP_ATR.COLUMN:=_table.COLUMN;
   ETYP_ATR.ROW:=_table.ROW;
   ETYP_ATR.MINVALUE:=_table.MINVALUE;
   ETYP_ATR.MAXVALUE:=_table.MAXVALUE;
   TAT.cntx_psh();
   {? ETYP_ATR.TAT().TYP<>'W' | var_press('DEF_MEMO',ETYP_ATR)<=0
   || ETYP_ATR.DEFAULT:=_table.DEFAULT
   ?};
   TAT.cntx_pop();
   ETYP_ATR.WYMAG:=_table.WYMAG;
   ETYP_ATR.EDIT:=_table.EDIT;
   ETYP_ATR.VISIBLE:=_table.VISIBLE;
   ETYP_ATR.CAP_SIZE:=_table.CAP_SIZE

?};
~~


\ETYP_ATR_WP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYP_ATR.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYP_ATR.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYP_ATR nie powiodło się.'
   || _validate.MSG:='Poprawa ETYP_ATR nie powiodła się.'
   ?}
|| TAT.cntx_psh();
   {? ETYP_ATR.TAT().TYP='W' & var_press('DEF_MEMO',ETYP_ATR)>0
   || ETYP_ATR.memo_set(_table.DEFAULT,'DEF_MEMO');
      ETYP_ATR.memo_put(,'DEF_MEMO')
   ?};
   TAT.cntx_pop()
?};
_result


\ETYPYDTP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - UID - unikalny identyfikator imex
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:=_b;
_def.FUNPAR:={? _b='ETYPYDTP' || 'ZWS_PAR_WTYP' || 'ZWS_PAR_OTYP' ?};
_def.DOMAIN:={? _b='ETYPYDTP' || exec('name','#b_domain','OBE') || exec('name','#b_domain','OBG') ?};
_def.FILE:={? _b='ETYPYDTP' || exec('filename','xls_obieg') ||  exec('filename','xls_obieg','dokumenty') ?};
_def.SHEET:=_c+'=1,1';
_def.NAME:=_c;
_def.DESC:=_c;
_def.HIDDEN:='T';

_def.PREFIX:="ETYPYDTP.index('UNIK'); ETYPYDTP.prefix()";
_def.TABLE:="ETYPYDTP";
_def.FIELDS:="exec('ETYPYDTP_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPYDTP.cntx_psh()";
_def.AFTER:="ETYPYDTP.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPYDTP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPYDTP_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPYDTP_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPYDTP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ obiegu',1,,'Wskazanie na typ obiegu');
_def.define('SKID_MB','Model dla controllingu',1,,'Wskazanie na model dla controllingu');
_def.define('POZB_RW','Pozycja budżetowa - rodzaj wyboru',1,,'Wartości: F - formuła, R - rodzaj wartości dla projektu');
_def.define('WYM2_RW','Wymiar 2 - rodzaj wyboru',1,,'Wartości: F - formuła, J - jednostka organizacyjna projektu');
_def.define('WYM3_RW','Wymiar 3 - rodzaj wyboru',1,,'Wartości: F - formuła, J - jednostka organizacyjna projektu');
_def.define('WYM4_RW','Wymiar 4 - rodzaj wyboru',1,,'Wartości: F - formuła, J - jednostka organizacyjna projektu');
_def.define('WYM5_RW','Wymiar 5 - rodzaj wyboru',1,,'Wartości: F - formuła, J - jednostka organizacyjna projektu');
_def.define('POZB_F','Pozycja budżetowa - formuła',1,,'Pozycja budżetowa - formuła');
_def.define('WYM2_F','Wymiar 2 - formuła',1,,'Wymiar 2 - formuła');
_def.define('WYM3_F','Wymiar 3 - formuła',1,,'Wymiar 3 - formuła');
_def.define('WYM4_F','Wymiar 4 - formuła',1,,'Wymiar 4 - formuła');
_def.define('WYM5_F','Wymiar 5 - formuła',1,,'Wymiar 5 - formuła');
~~


\ETYPYDTP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.ETYPYT.VALUE:=ETYPYDTP.ETYPY().TYPOBIEG().NAZWA;
_table.ETYPY.VALUE:=ETYPYDTP.ETYPY().NAZWA;
_table.SKID_MB.VALUE:=ETYPYDTP.SKID_MB().KOD; _excel.write_async('SKID_MBN',ETYPYDTP.SKID_MB);
_table.POZB_RW.VALUE:=ETYPYDTP.POZB_RW;
_table.WYM2_RW.VALUE:=ETYPYDTP.WYM2_RW;
_table.WYM3_RW.VALUE:=ETYPYDTP.WYM3_RW;
_table.WYM4_RW.VALUE:=ETYPYDTP.WYM4_RW;
_table.WYM5_RW.VALUE:=ETYPYDTP.WYM5_RW;
_table.POZB_F.VALUE:=ETYPYDTP.POZB_F().SKROT; _excel.write_async('FORMULA',ETYPYDTP.POZB_F);
_table.WYM2_F.VALUE:=ETYPYDTP.WYM2_F().SKROT; _excel.write_async('FORMULA',ETYPYDTP.WYM2_F);
_table.WYM3_F.VALUE:=ETYPYDTP.WYM3_F().SKROT; _excel.write_async('FORMULA',ETYPYDTP.WYM3_F);
_table.WYM4_F.VALUE:=ETYPYDTP.WYM4_F().SKROT; _excel.write_async('FORMULA',ETYPYDTP.WYM4_F);
_table.WYM5_F.VALUE:=ETYPYDTP.WYM5_F().SKROT; _excel.write_async('FORMULA',ETYPYDTP.WYM5_F);
_result


\ETYPYDTP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_etypy:=null;

_skidmb:=exec('FindInSet','#table','SKID_MBN','KOD',_table.SKID_MB,,,1);
{? _skidmb=null
|| _result.MSG:='Nie odnaleziono %1'@[_table.SKID_MB];
   _result.RESULT:=0
?};

_typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
{? _typ=null
|| _result.msg_norec('ETYPYT');
   _result.RESULT:=0
|| _etypy:=exec('FindInSet','#table','ETYPY','UNIK',_table.ETYPY,_typ,,1);
   {? _etypy=null
   || _result.msg_norec('ETYPY');
      _result.RESULT:=0;
      return()
   ?}
?};

ETYPYDTP.index('UNIK');
ETYPYDTP.prefix(_etypy,_skidmb);
{? ETYPYDTP.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYPYDTP.blank() ?};
   ETYPYDTP.ETYPY:=_etypy;
   ETYPYDTP.SKID_MB:=_skidmb;
   ETYPYDTP.POZB_RW:=_table.POZB_RW;
   ETYPYDTP.WYM2_RW:=_table.WYM2_RW;
   ETYPYDTP.WYM3_RW:=_table.WYM3_RW;
   ETYPYDTP.WYM4_RW:=_table.WYM4_RW;
   ETYPYDTP.WYM5_RW:=_table.WYM5_RW;
   ETYPYDTP.POZB_F:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.POZB_F,,,1);
   ETYPYDTP.WYM2_F:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.WYM2_F,,,1);
   ETYPYDTP.WYM3_F:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.WYM3_F,,,1);
   ETYPYDTP.WYM4_F:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.WYM4_F,,,1);
   ETYPYDTP.WYM5_F:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.WYM5_F,,,1)
?};
~~


\ETYPYDTP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPYDTP.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPYDTP.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYPYDTP nie powiodło się.'
   || _validate.MSG:='Poprawa ETYPYDTP nie powiodła się.'
   ?}
?};
_result


\ETYPYPOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - UID - unikalny identyfikator imex
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:=_b;
_def.FUNPAR:={? _b='ETYPYPOD' || 'ZWS_PAR_WTYP' || 'ZWS_PAR_OTYP' ?};
_def.DOMAIN:={? _b='ETYPYPOD' || exec('name','#b_domain','OBE') || exec('name','#b_domain','OBG') ?};
_def.FILE:={? _b='ETYPYPOD' || exec('filename','xls_obieg') ||  exec('filename','xls_obieg','dokumenty') ?};
_def.SHEET:=_c+'=1,1';
_def.NAME:=_c;
_def.DESC:=_c;
_def.HIDDEN:='T';

_def.PREFIX:="ETYPYPOD.index('UNIK'); ETYPYPOD.prefix()";
_def.TABLE:="ETYPYPOD";
_def.FIELDS:="exec('ETYPYPOD_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPYPOD.cntx_psh()";
_def.AFTER:="ETYPYPOD.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPYPOD_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPYPOD_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPYPOD_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPYPOD_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ obiegu',1,,'Wskazanie na typ obiegu');
_def.define('SCH_PROJ','Schemat projektów',1,,'Wskazanie na schemat projektów');
_def.define('TYPDOL','Typ dołączania',1,,'Typ dołączania elementu do schematu projektów');
_def.define('ROOTT','Typ drzewa',1,,'Wskazanie na typ drzewa');
_def.define('ROOT','Element nadrzędny',1,,'Wskazanie na element nadrzędny');
_def.define('FORMULA','Formuła na wybór elementu nadrzędnego',1,,'Formuła na wybór elementu nadrzędnego (UD_SKL)');
~~


\ETYPYPOD_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.ETYPYT.VALUE:=ETYPYPOD.ETYPY().TYPOBIEG().NAZWA;
_table.ETYPY.VALUE:=ETYPYPOD.ETYPY().NAZWA;
::_excel.write_async('ETYPY',ETYPYPOD.ETYPY);
_table.SCH_PROJ.VALUE:=ETYPYPOD.SCH_PROJ().SYMBOL; _excel.write_async('UD_SCH',ETYPYPOD.SCH_PROJ);
_table.TYPDOL.VALUE:=ETYPYPOD.TYPDOL;
_table.ROOTT.VALUE:=ETYPYPOD.ROOT().UD_TYP().SYMBOL; _excel.write_async('UD_TYP',ETYPYPOD.ROOT().UD_TYP);
_table.ROOT.VALUE:=ETYPYPOD.ROOT().SYMBOL; _excel.write_async('UD_SKL',ETYPYPOD.ROOT);
_table.FORMULA.VALUE:=ETYPYPOD.FORMULA().SKROT; _excel.write_async('FORMULA',ETYPYPOD.FORMULA);
_result


\ETYPYPOD_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_etypy:=null;

_typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
{? _typ=null
|| _result.msg_norec('ETYPYT');
   _result.RESULT:=0
|| _etypy:=exec('FindInSet','#table','ETYPY','UNIK',_table.ETYPY,_typ,,1);
   {? _etypy=null
   || _result.msg_norec('ETYPY');
      _result.RESULT:=0;
      return()
   ?}
?};

_udsch:=exec('FindInSet','#table','UD_SCH','SYMBOLS',_table.SCH_PROJ,,,1);
{? _udsch=null
|| _result.MSG:='Nie odnaleziono %1'@[_table.SCH_PROJ];
   _result.RESULT:=0
?};

_roott:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.ROOTT,,,1);
_root:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.ROOT,_roott,,1);

ETYPYPOD.index('UNIK');
ETYPYPOD.prefix(_etypy,_udsch);
{? ETYPYPOD.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYPYPOD.blank() ?};
   ETYPYPOD.ETYPY:=_etypy;
   ETYPYPOD.SCH_PROJ:=_udsch;
   ETYPYPOD.TYPDOL:=_table.TYPDOL;
   ETYPYPOD.ROOT:=_root;
   ETYPYPOD.FORMULA:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.FORMULA,,,1)
?};
~~


\ETYPYPOD_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPYPOD.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPYPOD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYPYPOD nie powiodło się.'@
   || _validate.MSG:='Poprawa ETYPYPOD nie powiodła się.'@
   ?}
?};
_result


\ETYPY_WP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPY_WP';
_def.FUNPAR:='ZWS_PAR_PTYP';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:='obieg_wnioskow_HR_Portal.xlsx';
_def.SHEET:='Typy wniosków HR portal'+'=1,1';
_def.NAME:='Typy wniosków HR portal';
_def.DESC:='Typy wniosków HR portal';

_def.PREFIX:="ETYPY.index('UNIK_WP'); ETYPY.prefix()";
_def.TABLE:="exec('ETYPY_WP_tab','xls_obieg',_a)";
_def.TAB_IMP:="ETYPY";
_def.FIELDS:="exec('ETYPY_WP_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPY.cntx_psh()";
_def.AFTER:="ETYPY.cntx_pop()";
_def.SELECT:="exec('ETYPY_select','xls_obieg',_a,'N','T')";

_def.EXPORT:="exec('ETYPY_WP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPY_WP_valid','xls_obieg',_a,_b,_c,2)";
_def.IMPORT:="exec('ETYPY_WP_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPY_WP_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Zwraca tabelę do eksportu listy parametrów bieżącej firmy
::   WE:  _a  - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::       [_b] - 'T' - portal HR, 'P' - bez papieru
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_b')>0 || _b || 'T' ?};
{? _a=1
|| _where:={? _typ='T'
           || 'ETYPY.W_PORTAL=\'T\' OR ETYPY.W_PORTAL=\'X\''
           || 'ETYPY.W_PORTAL LIKE \':_a\''
           ?};
   sql('select ETYPY.ID_WP, ETYPY.REFERENCE as REF, (\':\' || ETYPY.IDADD || ETYPY.REFERENCE) as UIDREF '
       'from ETYPY join TYPOBIEG where '+_where+
       ' order by ID_WP',_typ)
|| ETYPY
?}


\ETYPY_WP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Określa pola tabeli
::   WE:  _a  - obiekt z definicją pól który należy zasilić
::       [_b] - typ w portalu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_typ:={? var_pres('_b')=type_of('') || _b || '' ?};
_def.define('ID_WP','Identyfikator - HR portal',1,,'Identyfikator w HR portal',2);
_def.define('TYPOBIEG','Typ obiegu',1,,'Wskazanie na typ obiegu',2);
_def.define('W_PORTAL','HR portal',1,,'Znacznik, czy dotyczy HR portal',2);
_def.define('NAZWA','Nazwa',1,,'Nazwa typu dokumentu w obiegu',2);
_def.define('ID_WP_B','Typ bazowy',1,,'Typ bazowy',2);
_def.define('AKTYWNY','Aktywny',1,,'Znacznik czy typ aktywny.? T/N',2);
_def.define('BT_WP','Czy typ bazowy',1,,'Czy typ bazowy',2);
_def.define('STD_WP','Czy wersja standardowa',1,,'Czy wersja standardowa',2);

_def.define('FORMWALT','Formuła walidacyjna typ',1,,'Formuła walidacyjna typ',2);
_def.define('FORMWALS','Formuła walidacyjna skrot',1,,'Formuła walidacyjna skrot',2);
_def.define('WID_WP','Widoczny na HR portalu',1,,'Czy typ wniosku widoczny w HR portal?',2);
_def.define('ZAL_WP','Czy wymagany załącznik?',1,,'Czy wymagany załącznik?',2);
_def.define('RODZ_WP','Rodzaj wniosku na HR portal',1,,'Rodzaj wniosku w HR portal',2);
_def.define('GRUPA_WP','Grupa wniosku na HR portal',1,,'Grupa wniosku w HR portal',2);
_def.define('TAGI_WP','Tagi dla wniosku na HR portal',1,,'Tagi dla wniosku w HR portal',2);
_def.define('AUT_ID','Automatyczne nadawanie identyfikatora dokumentu',1,,'Automatyczne nadawanie identyfikatora dokumentu',2);
_def.define('IN_ERP','Paperless w ERP',1,,'Znacznik, czy wniosek paperless można zarejestrować w ERP',2);
_def.define('ED_TEMAT','Temat edytowalny',1,,'Czy temat jest edytowalny: T,N',2);
_def.define('CZY_PRAC','Wnioski - czy wprowadzać pracownika',1,,'Wnioski - czy wprowadzać pracownika',2);
_def.define('GRP_DOC','Grupa dokumentu w obiegu',1,,'Wskazanie na grupę dokumentu w obiegu',2);
{? _typ='s'
|| _def.define('SKID_MB','Model dla controllingu',1,,'Wskazanie na model dla controllingu',2)
?};
~~


\ETYPY_WP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;

{? _tab=ETYPY | ETYPY.seek(_tab.REF)
|| _table.ID_WP.VALUE:=ETYPY.ID_WP;
   _table.TYPOBIEG.VALUE:=ETYPY.TYPOBIEG().NAZWA; _excel.write_async('TYPOBIEG',ETYPY.TYPOBIEG);
   _table.W_PORTAL.VALUE:=ETYPY.W_PORTAL;
   _table.NAZWA.VALUE:=ETYPY.NAZWA;
   _table.ID_WP_B.VALUE:=ETYPY.ID_WP_B;
   _table.AKTYWNY.VALUE:=ETYPY.AKTYWNY;
   _table.BT_WP.VALUE:=ETYPY.BT_WP;
   _table.STD_WP.VALUE:=ETYPY.STD_WP;

   _table.FORMWALT.VALUE:=ETYPY.FORM_WAL().TYP;
   _table.FORMWALS.VALUE:=ETYPY.FORM_WAL().SKROT;
   _table.WID_WP.VALUE:=ETYPY.WID_WP;
   _table.ZAL_WP.VALUE:=$ETYPY.ZAL_WP;
   _table.RODZ_WP.VALUE:=$ETYPY.RODZ_WP;
   _table.GRUPA_WP.VALUE:=ETYPY.GRUPA_WP;
   _table.TAGI_WP.VALUE:=ETYPY.TAGI_WP;
   _table.AUT_ID.VALUE:=ETYPY.AUT_ID;
   _table.IN_ERP.VALUE:=$ETYPY.IN_ERP;
   _table.ED_TEMAT.VALUE:=ETYPY.ED_TEMAT;
   _table.CZY_PRAC.VALUE:=$ETYPY.CZY_PRAC;
   _table.GRP_DOC.VALUE:=ETYPY.GRP_DOC().N; _excel.write_async('ETYP_GWP',ETYPY.GRP_DOC);
   {? ETYPY.W_PORTAL='s'
   || _table.SKID_MB.VALUE:=ETYPY.SKID_MB().KOD; {? ETYPY.SKID_MB || _excel.write_async('SKID_MBN',ETYPY.SKID_MB) ?}
   ?};
   {? 'TX'*ETYPY.W_PORTAL
   ||
:: Eksport schematów informacji dodatkowych
      ETYP_ATR.cntx_psh();
      ETYP_ATR.index('TATZ');
      ETYP_ATR.prefix(ETYPY.ref());
      {? ETYP_ATR.first()
      || {!
         |? _excel.write_async('ETYP_ATR_WP',ETYP_ATR.ref());
            ETYP_ATR.next()
         !}
      ?};
      ETYP_ATR.cntx_pop();

      SCH_FORM.cntx_psh();
      SCH_FORM.index('UNIK');
      SCH_FORM.prefix(FIRMA.ref(),ETYPY.FORM_WAL().TYP,ETYPY.FORM_WAL().SKROT);
      {? SCH_FORM.first()
      || {!
         |? _excel.write_async('SCH_FORM',SCH_FORM.ref());
            SCH_FORM.next()
         !}
      ?};
      SCH_FORM.cntx_pop();

:: Eksport procesów powiązanych
      ETYPPROC.cntx_psh();
      ETYPPROC.index('DISP');
      ETYPPROC.prefix(ETYPY.ref());
      {? ETYPPROC.first()
      || {!
         |? _excel.write_async('ETYPPROC',ETYPPROC.ref());
            ETYPPROC.next()
         !}
      ?};
      ETYPPROC.cntx_pop()
   |? ETYPY.W_PORTAL='P'
   || ETYPYATT.cntx_psh();
      ETYPYATT.index('NAZWA'); ETYPYATT.prefix(ETYPY.ref());
      {? ETYPYATT.first()
      || {!
         |? _excel.write_async('ETYPYATT',ETYPYATT.ref());
            ETYPYATT.next()
         !}
      ?};
      ETYPYATT.cntx_pop();
      ETYP_ATR.cntx_psh();
      ETYP_ATR.index('TATZ');
      ETYP_ATR.prefix(ETYPY.ref());
      {? ETYP_ATR.first()
      || {!
         |? _excel.write_async('ETYP_ATR_BP',ETYP_ATR.ref());
            ETYP_ATR.next()
         !}
      ?};
      ETYP_ATR.cntx_pop();

:: Eksport procesów powiązanych
      ETYPPROC.cntx_psh();
      ETYPPROC.index('DISP');
      ETYPPROC.prefix(ETYPY.ref());
      {? ETYPPROC.first()
      || {!
         |? _excel.write_async('ETYPPROC_BP',ETYPPROC.ref());
            ETYPPROC.next()
         !}
      ?};
      ETYPPROC.cntx_pop()
   |? ETYPY.W_PORTAL='s'
   ||
:: Eksport schematów informacji dodatkowych
      ETYP_ATR.cntx_psh();
      ETYP_ATR.index('TATZ');
      ETYP_ATR.prefix(ETYPY.ref());
      {? ETYP_ATR.first()
      || {!
         |? _excel.write_async('ETYP_ATR_SEOD',ETYP_ATR.ref());
            ETYP_ATR.next()
         !}
      ?};
      ETYP_ATR.cntx_pop();

      SCH_FORM.cntx_psh();
      SCH_FORM.index('UNIK');
      SCH_FORM.prefix(FIRMA.ref(),ETYPY.FORM_WAL().TYP,ETYPY.FORM_WAL().SKROT);
      {? SCH_FORM.first()
      || {!
         |? _excel.write_async('SCH_FORM',SCH_FORM.ref());
            SCH_FORM.next()
         !}
      ?};
      SCH_FORM.cntx_pop();

:: Eksport procesów powiązanych
      ETYPPROC.cntx_psh();
      ETYPPROC.index('DISP');
      ETYPPROC.prefix(ETYPY.ref());
      {? ETYPPROC.first()
      || {!
         |? _excel.write_async('ETYPPROC_SEOD',ETYPPROC.ref());
            ETYPPROC.next()
         !}
      ?};
      ETYPPROC.cntx_pop()
   ?}
?};
_result


\ETYPY_WP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

: wychwyć błędy krytyczne
_fld:=
   {? _table.NAZWA='' || 'NAZWA'
   |? _table.TYPOBIEG='' || 'TYPOBIEG'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

_typobieg:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.TYPOBIEG,_table.TYPOBIEG,,1);
{? _typobieg=null
|| _result.MSG:='Nie znaleziono typu obiegu: %1'@[_table.TYPOBIEG];
   _result.RESULT:=0
?};

{? _table.FORMWALS<>'' | _table.FORMWALT<>''
||
   SCH_FORM.cntx_psh();
   SCH_FORM.index('UNIK');
   SCH_FORM.prefix(REF.FIRMA,_table.FORMWALT,_table.FORMWALS);
   {? SCH_FORM.first()
   || _formwal:=SCH_FORM.ref()
   || _result.MSG:='Nie znaleziono formuły walidacyjnej %1'@[_table.FORMWALS];
      _result.RESULT:=0
   ?};
   SCH_FORM.cntx_pop()
|| _formwal:=null
?};


{? _typobieg=null
|| _result.MSG:='Nie znaleziono typu obiegu: %1'@[_table.TYPOBIEG];
   _result.RESULT:=0
?};

_skid_mb:=null;
{? var_pres('SKID_MB',_table)>0 & _table.SKID_MB<>''
|| _skid_mb:=exec('FindInSet','#table','SKID_MBN','KOD',_table.SKID_MB,,,1);
   {? ~_skid_mb
   || _result.MSG:='Nie znaleziono modelu danych %1'@[_table.SKID_MB];
      _result.RESULT:=0
   ?}
?};

ETYPY.index('UNIK_WP');
ETYPY.prefix(_typobieg,_table.W_PORTAL,_table.NAZWA,_table.NAZWA);
{? ETYPY.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _mode<>0 & _result.ACTION='put' & _result.RESULT=1
|| ETYP_ATR.cntx_psh();
   ETYP_ATR.index('TATZ');
   ETYP_ATR.prefix(ETYPY.ref());
   {? ETYP_ATR.first()
   || {!
      |? ETYP_ATR.del()
      !}
   ?};
   ETYP_ATR.cntx_pop()
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYPY.blank(1) ?};
   ETYPY.ID_WP:=_table.ID_WP;
   ETYPY.TYPOBIEG:=_typobieg;
   ETYPY.W_PORTAL:=_table.W_PORTAL;
   ETYPY.NAZWA:=_table.NAZWA;
   ETYPY.ID_WP_B:=_table.ID_WP_B;
   ETYPY.AKTYWNY:={? ETYPY.W_PORTAL<>'s' | exec('lic_or','#b_domain','SEO') || _table.AKTYWNY || 'N' ?};
   ETYPY.BT_WP:=_table.BT_WP;
   ETYPY.STD_WP:=_table.STD_WP;

   ETYPY.FORM_WAL:=_formwal;
   ETYPY.WID_WP:=_table.WID_WP;
   ETYPY.ZAL_WP:=#_table.ZAL_WP;
   ETYPY.RODZ_WP:=#_table.RODZ_WP;
   ETYPY.GRUPA_WP:=_table.GRUPA_WP;
   ETYPY.TAGI_WP:=_table.TAGI_WP;
   ETYPY.AUT_ID:=_table.AUT_ID;
   ETYPY.IN_ERP:=#_table.IN_ERP;
   ETYPY.ED_TEMAT:=_table.ED_TEMAT;
   ETYPY.CZY_PRAC:=#_table.CZY_PRAC;
   ETYPY.GRP_DOC:=exec('FindInSet','#table','ETYP_GRP','N',_table.GRP_DOC,REF.FIRMA,,1);
   ETYPY.SKID_MB:=_skid_mb;
   ~~
?};
~~


\ETYPY_WP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPY.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPY.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYPY %1 nie powiodło się.'[_table.NAZWA]
   || _validate.MSG:='Poprawa ETYPY %1 nie powiodła się.'[_table.NAZWA]
   ?}
?};
_result


\ETSCHPDN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETSCHPDN';
_def.FUNPAR:='ZWS_PAR_OTYP';
_def.DOMAIN:=exec('name','#b_domain','OBG');
_def.FILE:=exec('filename','xls_obieg','dokumenty');
_def.SHEET:='Nagłówki schematów'+'=1,1';
_def.NAME:='Nagłowki schematów';
_def.DESC:='Nagłowki schematów';
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

_def.PREFIX:="ETSCHPDN.index('UNIK'); ETSCHPDN.prefix()";
_def.TABLE:="ETSCHPDN";
_def.FIELDS:="exec('ETSCHPDN_fld','xls_obieg',_a)";

_def.BEFORE:="ETSCHPDN.cntx_psh()";
_def.AFTER:="ETSCHPDN.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETSCHPDN_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETSCHPDN_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETSCHPDN_imp','xls_obieg',_a,_b,_c)";
~~


\ETSCHPDN_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZWA','Nazwa schematu',1,,'Nazwa schematu tworzenia podziałów');
~~


\ETSCHPDN_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZWA.VALUE:=ETSCHPDN.NAZWA;
_result


\ETSCHPDN_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_max:=MS.fld_len(ETSCHPDN,'NAZWA');
{? +_table.NAZWA>_max
|| _result.msg_length('NAZWA',_max);
   _table.NAZWA:=_max+_table.NAZWA
?};

ETSCHPDN.index('UNIK');
ETSCHPDN.prefix(_table.NAZWA);
{? ETSCHPDN.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETSCHPDN.blank() ?};
   ETSCHPDN.NAZWA:=_table.NAZWA
?};
~~


\ETSCHPDN_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETSCHPDN.add(1)
   |? _validate.ACTION='put'
   || _result:=ETSCHPDN.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETSCHPDN %1 nie powiodło się.'[_table.NAZWA]
   || _validate.MSG:='Poprawa ETSCHPDN %1 nie powiodła się.'[_table.NAZWA]
   ?}
?};
_result


\ETSCHPDR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETSCHPDR';
_def.FUNPAR:='ZWS_PAR_OTYP';
_def.DOMAIN:=exec('name','#b_domain','OBG');
_def.FILE:=exec('filename','xls_obieg','dokumenty');
_def.SHEET:='Powiązania typów ze schematami'@+'=1,1';
_def.NAME:='Powiązania typów ze schematami';
_def.DESC:='Powiązania typów ze schematami';
_def.HIDDEN:='T';

_def.PREFIX:="ETSCHPDR.index('UNIK'); ETSCHPDR.prefix(REF.FIRMA)";
_def.TABLE:="ETSCHPDR";
_def.FIELDS:="exec('ETSCHPDR_fld','xls_obieg',_a)";

_def.BEFORE:="ETSCHPDR.cntx_psh()";
_def.AFTER:="ETSCHPDR.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETSCHPDR_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETSCHPDR_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETSCHPDR_imp','xls_obieg',_a,_b,_c)";
~~


\ETSCHPDR_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ obiegu',1,,'Wskazanie na typ obiegu');
_def.define('ETSCHPDN','Nagłówek schematu tworzenia podziałów',1,,'Wskazanie na nagłówek schematu tworzenia podziałów');
_def.define('AKT','Aktywny',1,,'Znacznik, czy schemat aktywny dla typu');
~~


\ETSCHPDR_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.ETYPYT.VALUE:=ETSCHPDR.ETYPY().TYPOBIEG().NAZWA;
_table.ETYPY.VALUE:=ETSCHPDR.ETYPY().NAZWA;
::_excel.write_async('ETYPY',ETSCHPDR.ETYPY);
_table.ETSCHPDN.VALUE:=ETSCHPDR.ETSCHPDN().NAZWA; _excel.write_async('ETSCHPDN',ETSCHPDR.ETSCHPDN);
_table.AKT.VALUE:=ETSCHPDR.AKT;
_result


\ETSCHPDR_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_etypy:=null;

_typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
{? _typ=null
|| _result.msg_norec('ETYPYT');
   _result.RESULT:=0
|| _etypy:=exec('FindInSet','#table','ETYPY','UNIK',_table.ETYPY,_typ,,1);
   {? _etypy=null
   || _result.msg_norec('ETYPY');
      _result.RESULT:=0;
      return()
   ?}
?};

_etschpdn:=exec('FindInSet','#table','ETSCHPDN','UNIK',_table.ETSCHPDN,,,1);
{? _etschpdn=null
|| _result.MSG:='Nie odnaleziono %1'@[_table.ETSCHPDN];
   _result.RESULT:=0
?};


ETSCHPDR.index('UNIK');
ETSCHPDR.prefix(REF.FIRMA,_etypy,_etschpdn);
{? ETSCHPDR.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETSCHPDR.blank() ?};
   ETSCHPDR.FIRMA:=REF.FIRMA;
   ETSCHPDR.ETYPY:=_etypy;
   ETSCHPDR.ETSCHPDN:=_etschpdn;
   ETSCHPDR.AKT:=_table.AKT
?};
~~


\ETSCHPDR_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETSCHPDR.add(1)
   |? _validate.ACTION='put'
   || _result:=ETSCHPDR.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETSCHPDR nie powiodło się.'
   || _validate.MSG:='Poprawa ETSCHPDR nie powiodła się.'
   ?}
?};
_result


\ETSCHPOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETSCHPOD';
_def.FUNPAR:='ZWS_PAR_OTYP';
_def.DOMAIN:=exec('name','#b_domain','OBG');
_def.FILE:=exec('filename','xls_obieg','dokumenty');
_def.SHEET:='Pozycje schematów'+'=1,1';
_def.NAME:='Pozycje schematów';
_def.DESC:='Pozycje schematów';
_def.HIDDEN:='T';

_def.PREFIX:="ETSCHPOD.index('UNIK'); ETSCHPOD.prefix()";
_def.TABLE:="ETSCHPOD";
_def.FIELDS:="exec('ETSCHPOD_fld','xls_obieg',_a)";

_def.BEFORE:="ETSCHPOD.cntx_psh()";
_def.AFTER:="ETSCHPOD.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETSCHPOD_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETSCHPOD_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETSCHPOD_imp','xls_obieg',_a,_b,_c)";
~~


\ETSCHPOD_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETSCHPDN','Nagłówek schematu tworzenia podziałów',1,,'Wskazanie na nagłówek schematu tworzenia podziałów');
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ obiegu',1,,'Wskazanie na typ obiegu');
_def.define('SKID_MB','Model controllingowy',1,,'Wskazanie na model controllingowy ktorego dotyczy definicja');
_def.define('LP','Lp.',1,,'Liczba porządkowa',,0);

_def.define('TPBUD','Typ pozycji budżetowa',1,,'Wskazanie na typ pozycji');
_def.define('PBUD','Pozycja budżetowa',1,,'Wskazanie na pozycję budżetową');
_def.define('FPBUD','Pozycja budżetowa - formuła',1,,'Formuła do wyliczania pozycji budżetowej');

_def.define('TJORG','Typ pozycji budżetowa',1,,'Wskazanie na typ pozycji');
_def.define('JORG','Jednostka organizacyjna',1,,'Wskazanie na wymiar 2');
_def.define('FJORG','Jednostka organizacyjna - formuła',1,,'Formuła do wyliczenia wymiaru 2');

_def.define('TOKOSZ','Typ pozycji budżetowa',1,,'Wskazanie na typ pozycji');
_def.define('OKOSZ','Obiekt kosztów',1,,'Wskazanie na wymiar 3');
_def.define('FOKOSZ','Obiekt kosztów - formuła',1,,'Formuła do wyliczenia wymiaru 3');

_def.define('TWYM4','Typ pozycji budżetowa',1,,'Wskazanie na typ pozycji');
_def.define('WYM4','Wymiar 4',1,,'Wskazanie na wymiar 4');
_def.define('FWYM4','Wymiar 4 - formuła',1,,'Formuła do wyliczenia wymiaru 4');

_def.define('TWYM5','Typ pozycji budżetowa',1,,'Wskazanie na typ pozycji');
_def.define('WYM5','Wymiar 5',1,,'Wskaznie na wymiar 5');
_def.define('FWYM5','Wymiar 5 - formuła',1,,'Formuła na wymiar 5');
_def.define('UDZIAL','Procent',1,,'Procent kwoty');
_def.define('KW_F','Formuła na kwotę',1,,'Formuła na kwotę podziału');
_def.define('FORM_WAR','Formuła warunkowa',1,,'Wskazanie na formułę warunkową');
_def.define('MIEJSCE','Miejsce uruchomienia schematu',1,,'Miejsce uruchomienia schematu podziałów controllingowych');
_def.define('ZN_PBUD','Pozycja budżetowa - typ',1,,'Pozycja budżetowa - typ');
_def.define('ZN_JORG','Wymiar 2 - typ',1,,'Wymiar 2 - typ');
_def.define('ZN_OKOSZ','Wymiar 3 - typ',1,,'Wymiar 3 - typ');
_def.define('ZN_WYM4','Wymiar 4 - typ',1,,'Wymiar 4 - typ');
_def.define('ZN_WYM5','Wymiar 5 - typ',1,,'Wymiar 5 - typ');
~~


\ETSCHPOD_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;

_table.ETSCHPDN.VALUE:=ETSCHPOD.ETSCHPDN().NAZWA; _excel.write_async('ETSCHPDN',ETSCHPOD.ETSCHPDN);
_table.ETYPYT.VALUE:=ETSCHPOD.ETYPY().TYPOBIEG().NAZWA;
_table.ETYPY.VALUE:=ETSCHPOD.ETYPY().NAZWA;
::_excel.write_async('ETYPY',ETSCHPOD.ETYPY);
_table.SKID_MB.VALUE:=ETSCHPOD.SKID_MB().KOD; _excel.write_async('SKID_MBN',ETSCHPOD.SKID_MB);
_table.LP.VALUE:=ETSCHPOD.LP;

_table.TPBUD.VALUE:=ETSCHPOD.PBUD().UD_TYP().SYMBOL;
_table.PBUD.VALUE:=ETSCHPOD.PBUD().SYMBOL; _excel.write_async('UD_SKL',ETSCHPOD.PBUD);
_table.FPBUD.VALUE:=ETSCHPOD.FPBUD().SKROT; _excel.write_async('FORMULA',ETSCHPOD.FPBUD);

_table.TJORG.VALUE:=ETSCHPOD.JORG().UD_TYP().SYMBOL;
_table.JORG.VALUE:=ETSCHPOD.JORG().SYMBOL; _excel.write_async('UD_SKL',ETSCHPOD.JORG);
_table.FJORG.VALUE:=ETSCHPOD.FJORG().SKROT; _excel.write_async('FORMULA',ETSCHPOD.FJORG);

_table.TOKOSZ.VALUE:=ETSCHPOD.OKOSZ().UD_TYP().SYMBOL;
_table.OKOSZ.VALUE:=ETSCHPOD.OKOSZ().SYMBOL; _excel.write_async('UD_SKL',ETSCHPOD.OKOSZ);
_table.FOKOSZ.VALUE:=ETSCHPOD.FOKOSZ().SKROT; _excel.write_async('FORMULA',ETSCHPOD.FOKOSZ);

_table.TWYM4.VALUE:=ETSCHPOD.WYM4().UD_TYP().SYMBOL;
_table.WYM4.VALUE:=ETSCHPOD.WYM4().SYMBOL; _excel.write_async('UD_SKL',ETSCHPOD.WYM4);
_table.FWYM4.VALUE:=ETSCHPOD.FWYM4().SKROT; _excel.write_async('FORMULA',ETSCHPOD.FWYM4);

_table.TWYM5.VALUE:=ETSCHPOD.WYM5().UD_TYP().SYMBOL;
_table.WYM5.VALUE:=ETSCHPOD.WYM5().SYMBOL; _excel.write_async('UD_SKL',ETSCHPOD.WYM5);
_table.FWYM5.VALUE:=ETSCHPOD.FWYM5().SKROT; _excel.write_async('FORMULA',ETSCHPOD.FWYM5);

_table.UDZIAL.VALUE:=ETSCHPOD.UDZIAL;
_table.KW_F.VALUE:=ETSCHPOD.KW_F().SKROT; _excel.write_async('FORMULA',ETSCHPOD.KW_F);
_table.FORM_WAR.VALUE:=ETSCHPOD.FORM_WAR().SKROT; _excel.write_async('FORMULA',ETSCHPOD.FORM_WAR);
_table.MIEJSCE.VALUE:=ETSCHPOD.MIEJSCE;
_table.ZN_PBUD.VALUE:=ETSCHPOD.ZN_PBUD;
_table.ZN_JORG.VALUE:=ETSCHPOD.ZN_JORG;
_table.ZN_OKOSZ.VALUE:=ETSCHPOD.ZN_OKOSZ;
_table.ZN_WYM4.VALUE:=ETSCHPOD.ZN_WYM4;
_table.ZN_WYM5.VALUE:=ETSCHPOD.ZN_WYM5;
_result


\ETSCHPOD_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_etypy:=null;

_typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
{? _typ=null
|| _result.msg_norec('ETYPYT');
   _result.RESULT:=0
|| _etypy:=exec('FindInSet','#table','ETYPY','UNIK',_table.ETYPY,_typ,,1);
   {? _etypy=null
   || _result.msg_norec('ETYPY');
      _result.RESULT:=0;
      return()
   ?}
?};

_etschpdn:=exec('FindInSet','#table','ETSCHPDN','UNIK',_table.ETSCHPDN,,,1);
{? _etschpdn=null
|| _result.MSG:='Nie odnaleziono %1'@[_table.ETSCHPDN];
   _result.RESULT:=0
?};

_skidmb:=exec('FindInSet','#table','SKID_MBN','KOD',_table.SKID_MB,,,1);
{? _skidmb=null
|| _result.MSG:='Nie odnaleziono %1'@[_table.ETSCHPDN];
   _result.RESULT:=0
?};

ETSCHPOD.index('UNIK');
ETSCHPOD.prefix(_etschpdn,_skidmb,_table.LP);
{? ETSCHPOD.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETSCHPOD.blank() ?};
   ETSCHPOD.ETSCHPDN:=_etschpdn;
   ETSCHPOD.ETYPY:=_etypy;
   ETSCHPOD.SKID_MB:=_skidmb;
   ETSCHPOD.LP:=_table.LP;

   _tpbud:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.TPBUD,,,1);
   ETSCHPOD.PBUD:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.PBUD,_tpbud,,1);
   ETSCHPOD.FPBUD:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.FPBUD,,,1);

   _tjorg:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.TJORG,,,1);
   ETSCHPOD.JORG:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.JORG,_tjorg,,1);
   ETSCHPOD.FJORG:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.FJORG,,,1);

   _tokosz:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.TOKOSZ,,,1);
   ETSCHPOD.OKOSZ:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.OKOSZ,_tokosz,,1);
   ETSCHPOD.FOKOSZ:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.FOKOSZ,,,1);

   _twym4:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.TWYM4,,,1);
   ETSCHPOD.WYM4:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.WYM4,_twym4,,1);
   ETSCHPOD.FWYM4:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.FWYM4,,,1);

   _twym5:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.TWYM5,,,1);
   ETSCHPOD.WYM5:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.WYM5,_twym5,,1);
   ETSCHPOD.FWYM5:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.FWYM5,,,1);
   ETSCHPOD.UDZIAL:=_table.UDZIAL;
   ETSCHPOD.KW_F:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.KW_F,,,1);
   ETSCHPOD.FORM_WAR:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.FORM_WAR,,,1);
   ETSCHPOD.MIEJSCE:=_table.MIEJSCE;
   ETSCHPOD.ZN_PBUD:=_table.ZN_PBUD;
   ETSCHPOD.ZN_JORG:=_table.ZN_JORG;
   ETSCHPOD.ZN_OKOSZ:=_table.ZN_OKOSZ;
   ETSCHPOD.ZN_WYM4:=_table.ZN_WYM4;
   ETSCHPOD.ZN_WYM5:=_table.ZN_WYM5
?};
~~


\ETSCHPOD_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETSCHPOD.add(1)
   |? _validate.ACTION='put'
   || _result:=ETSCHPOD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETSCHPOD nie powiodło się.'
   || _validate.MSG:='Poprawa ETSCHPOD nie powiodła się.'
   ?}
?};
_result


\ETYPWYD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPWYD';
_def.FUNPAR:='ZWS_PAR_DWYD';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Typy wydatków'@+'=1,1';
_def.NAME:='Typy wydatków'@;
_def.DESC:='Typy wydatków'@;
_def.MULTIFIR:='T';

_def.PREFIX:="ETYPWYD.index('UNIK'); ETYPWYD.prefix()";
_def.TABLE:="ETYPWYD";
_def.FIELDS:="exec('ETYPWYD_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPWYD.cntx_psh()";
_def.AFTER:="ETYPWYD.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPWYD_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPWYD_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPWYD_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPWYD_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZWA','Nazwa',1,,'Nazwa typu wydatku',2);
_def.define('DOM_RWYD','Domyślny rodzaj wydatku',1,,'Wskazanie na domyślny rodzaj wydatku',2);
_def.define('ED_FULL','Rozszerzona edycja wydatku',1,,'Rozszerzona edycja wydatku: B - brutto, N- netto, A - brutto i netto',2);
~~


\ETYPWYD_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.NAZWA.VALUE:=ETYPWYD.NAZWA;
_table.DOM_RWYD.VALUE:=ETYPWYD.DOM_RWYD().KOD; _excel.write_async('SLO',ETYPWYD.DOM_RWYD);
_table.ED_FULL.VALUE:={? ETYPWYD.ED_FULL=1 || 'B' |? ETYPWYD.ED_FULL=2 || 'N' |? ETYPWYD.ED_FULL=3 || 'A' ?};
_result


\ETYPWYD_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

: błędne wartości
{? _table.ED_FULL<>'' & ('BNA'*_table.ED_FULL)=0
|| _result.msg_value('ED_FULL','Dozwolone wartości: B, N, A.');
   _result.RESULT:=0
?};

ETYPWYD.index('UNIK');
ETYPWYD.prefix(_table.NAZWA);
{? ETYPWYD.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYPWYD.blank() ?};
   ETYPWYD.NAZWA:=_table.NAZWA;
   ETYPWYD.DOM_RWYD:=exec('FindInSet','#table','SLO','KOD',_table.DOM_RWYD,,,1);
   ETYPWYD.ED_FULL:={? _table.ED_FULL='B' || 1 |? _table.ED_FULL='N' || 2 |? _table.ED_FULL='A' || 3 ?}
?};
~~


\ETYPWYD_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPWYD.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPWYD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie typu wydatku dla delegacji %1 nie powiodło się.'[_table.NAZWA]
   || _validate.MSG:='Poprawa typu wydatku dla delegacji %1 nie powiodła się.'[_table.NAZWA]
   ?}
?};
_result


\SKL_PLD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKL_PLD';
_def.FUNPAR:='ZWS_PAR_DSPL';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Składniki płacowe - delegacje'+'=1,1';
_def.NAME:='Składniki płacowe - delegacje';
_def.DESC:='Składniki płacowe - delegacje';

_def.PREFIX:="SKL_PLD.index('UNIK'); SKL_PLD.prefix()";
_def.TABLE:="SKL_PLD";
_def.FIELDS:="exec('SKL_PLD_fld','xls_obieg',_a)";

_def.BEFORE:="SKL_PLD.cntx_psh()";
_def.AFTER:="SKL_PLD.cntx_pop()";
_def.SELECT:="exec('SKL_PLD_select','xls_obieg',_a)";

_def.EXPORT:="exec('SKL_PLD_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('SKL_PLD_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('SKL_PLD_imp','xls_obieg',_a,_b,_c)";
~~


\SKL_PLD_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('RKWOT','Rodzaj kwoty',1,,'Rodzaj kwoty w delegacji');
_def.define('R','Rubryka płacowa',1,,'Rubryka płacowa',type_of(0),0);
~~


\SKL_PLD_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - czy obieg dokumentów? T/N
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;
_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'RODZAJ','STRING[50]','Rodzaj kwoty'
   ,'RUBRYKA','INTEGER','Rubryka');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'RODZAJ',,);

SKL_PLD.cntx_psh();
SKL_PLD.index('UNIK');
SKL_PLD.prefix();
{? SKL_PLD.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$SKL_PLD.ref();
      _selected.prefix($SKL_PLD.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.RODZAJ:=SKL_PLD.RKWOT().KOD;
      _tab.RUBRYKA:=SKL_PLD.R;
      _tab.add();
      SKL_PLD.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'RODZAJ,RUBRYKA',10,'Wybór składników płacowych do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SKL_PLD.cntx_pop();
_result


\SKL_PLD_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;
{? _tab=SKL_PLD | SKL_PLD.seek(_tab.REF)
||
   _table.RKWOT.VALUE:=SKL_PLD.RKWOT().KOD; _excel.write_async('SLO',SKL_PLD.RKWOT);
   _table.R.VALUE:=SKL_PLD.R().RN; _excel.write_async('RUBRYKI',exec('r','xls__util'))
?};
_result


\SKL_PLD_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;


_rk:=exec('FindInSet','#table','R','RUBKOD',_table.R,,,0);
{? _rk=null
|| {? _table.R=0
   || _result.MSG:='Pole "Rubryka płacowa" musi być liczbą i wskazywać na pozycję z tabeli rubryk płacowych'@
   || _result.MSG:='Nie znaleziono rodzaju kwoty: %1'@[$_table.R]
   ?};
   _result.RESULT:=0
?};

_rkwot:=exec('FindInSet','#table','SLO','KOD',_table.RKWOT,,,1);
{? _rkwot=null
|| _result.MSG:='Nie znaleziono rubryki: %1'@[_table.RKWOT];
   _result.RESULT:=0
?};

SKL_PLD.index('UNIK');
SKL_PLD.prefix(_rkwot);
{? SKL_PLD.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SKL_PLD.blank() ?};
   SKL_PLD.RKWOT:=_rkwot;
   SKL_PLD.R:=_rk
?};
~~


\SKL_PLD_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SKL_PLD.add(1)
   |? _validate.ACTION='put'
   || _result:=SKL_PLD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie składnika płacowego %1 nie powiodło się.'[_table.RKWOT]
   || _validate.MSG:='Poprawa składnika płacowego %1 nie powiodła się.'[_table.RKWOT]
   ?}
?};
_result


\INNESRTR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='INNESRTR';
_def.FUNPAR:='ZWS_PAR_DSTR';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Inne środki transportu'+'=1,1';
_def.NAME:='Inne środki transportu';
_def.DESC:='Inne środki transportu';
_def.MULTIFIR:='T';

_def.PREFIX:="INNESRTR.index('NAZWA'); INNESRTR.prefix()";
_def.TABLE:="INNESRTR";
_def.FIELDS:="exec('INNESRTR_fld','xls_obieg',_a)";

_def.BEFORE:="INNESRTR.cntx_psh()";
_def.AFTER:="INNESRTR.cntx_pop()";
_def.SELECT:="exec('INNESRTR_select','xls_obieg',_a)";

_def.EXPORT:="exec('INNESRTR_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('INNESRTR_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('INNESRTR_imp','xls_obieg',_a,_b,_c)";
~~


\INNESRTR_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZWA','Nazwa',1,,'20 znakowa nazwa');
_def.define('DODAT','Dodatkowy',1,,'1 znakowy znacznik T/N, czy dodatkowy środek transportu (używany w SEDO)');
~~


\INNESRTR_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - czy obieg dokumentów? T/N
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;
_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'NAZWA','STRING[20]','Nazwa');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NAZWA',,);

INNESRTR.cntx_psh();
INNESRTR.index('NAZWA');
INNESRTR.prefix();
{? INNESRTR.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$INNESRTR.ref();
      _selected.prefix($INNESRTR.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.NAZWA:=INNESRTR.NAZWA;
      _tab.add();
      INNESRTR.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NAZWA',20,'Wybór innych środków transportu do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
INNESRTR.cntx_pop();
_result


\INNESRTR_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;
{? _tab=INNESRTR | INNESRTR.seek(_tab.REF)
|| _table.NAZWA.VALUE:=INNESRTR.NAZWA;
   _table.DODAT.VALUE:=INNESRTR.DODAT
?};
_result


\INNESRTR_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.NAZWA='' || 'NAZWA'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

INNESRTR.index('NAZWA');
INNESRTR.prefix(_table.NAZWA);
{? INNESRTR.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || INNESRTR.blank() ?};
   INNESRTR.NAZWA:=_table.NAZWA;
   INNESRTR.DODAT:={? 'TN'*_table.DODAT || _table.DODAT || 'N' ?}
?};
~~


\INNESRTR_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=INNESRTR.add(1)
   |? _validate.ACTION='put'
   || _result:=INNESRTR.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie środku transportu: %1, nie powiodło się.'[_table.NAZWA]
   || _validate.MSG:='Poprawa środku transportu: %1, nie powiodła się.'[_table.NAZWA]
   ?}
?};
_result


\SAMDELTY
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SAMDELTY';
_def.FUNPAR:='ZWS_PAR_DRPO';
_def.DOMAIN:=exec('name','#b_domain','FKS');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Rodzaje pojazdów - delegacje'@+'=1,1';
_def.NAME:='Rodzaje pojazdów - delegacje';
_def.DESC:='Rodzaje pojazdów - delegacje';
_def.MULTIFIR:='T';

_def.PREFIX:="SAMDELTY.index('RODZAJ'); SAMDELTY.prefix()";
_def.TABLE:="SAMDELTY";
_def.FIELDS:="exec('SAMDELTY_fld','xls_obieg',_a)";

_def.BEFORE:="SAMDELTY.cntx_psh()";
_def.AFTER:="SAMDELTY.cntx_pop()";
_def.SELECT:="exec('SAMDELTY_select','xls_obieg',_a)";

_def.EXPORT:="exec('SAMDELTY_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('SAMDELTY_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('SAMDELTY_imp','xls_obieg',_a,_b,_c)";
~~


\SAMDELTY_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('RODZAJ','Rodzaj',1,,'Rodzaj pojazdu do ewidencji przebiegu');
_def.define('OPIS','Opis',1,,'Opis');
~~


\SAMDELTY_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - czy obieg dokumentów? T/N
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;
_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'RODZAJ','STRING[20]','Rodzaj pojazdu'
   ,'OPIS','STRING[50]','Opis');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'RODZAJ',,);

SAMDELTY.cntx_psh();
SAMDELTY.index('RODZAJ');
SAMDELTY.prefix();
{? SAMDELTY.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$SAMDELTY.ref();
      _selected.prefix($SAMDELTY.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.RODZAJ:=SAMDELTY.RODZAJ;
      _tab.OPIS:=SAMDELTY.OPIS;
      _tab.add();
      SAMDELTY.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'RODZAJ,OPIS',20,'Wybór rodzaju pojazdów do ewidencji przebiegu do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SAMDELTY.cntx_pop();
_result


\SAMDELTY_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;

{? _tab=SAMDELTY | SAMDELTY.seek(_tab.REF)
|| _table.RODZAJ.VALUE:=SAMDELTY.RODZAJ;
   _table.OPIS.VALUE:=SAMDELTY.OPIS
?};
_result


\SAMDELTY_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.RODZAJ='' || 'RODZAJ'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

SAMDELTY.index('RODZAJ');
SAMDELTY.prefix(_table.RODZAJ);
{? SAMDELTY.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SAMDELTY.blank() ?};
   SAMDELTY.RODZAJ:=_table.RODZAJ;
   SAMDELTY.OPIS:=_table.OPIS
?};
~~


\SAMDELTY_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SAMDELTY.add(1)
   |? _validate.ACTION='put'
   || _result:=SAMDELTY.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie rodzaju pojazdu do ewidencji przebiegu: %1, nie powiodło się.'[_table.RODZAJ]
   || _validate.MSG:='Poprawa rodzaju pojazdu do ewidencji przebiegu: %1, nie powiodła się.'[_table.RODZAJ]
   ?}
?};
_result


\SAMDELEG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SAMDELEG';
_def.FUNPAR:='ZWS_PAR_DSPR';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Stawki za przebieg - delegacje'@+'=1,1';
_def.NAME:='Stawki za przebieg - delegacje';
_def.DESC:='Stawki za przebieg - delegacje';
_def.MULTIFIR:='T';

_def.PREFIX:="SAMDELEG.index('RODZAJ'); SAMDELEG.prefix()";
_def.TABLE:="SAMDELEG";
_def.FIELDS:="exec('SAMDELEG_fld','xls_obieg',_a)";

_def.BEFORE:="SAMDELEG.cntx_psh()";
_def.AFTER:="SAMDELEG.cntx_pop()";
_def.SELECT:="exec('SAMDELEG_select','xls_obieg',_a)";

_def.EXPORT:="exec('SAMDELEG_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('SAMDELEG_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('SAMDELEG_imp','xls_obieg',_a,_b,_c)";
~~


\SAMDELEG_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('RODZAJ','Rodzaj pojazdu',1,,'Rodzaj pojazdu do ewidencji przebiegu');
_def.define('STAWKA','Stawka',1,,'Stawka za przebieg',,4);
_def.define('DATA','Data od',1,,'Data, od której obowiązują stawki');
~~


\SAMDELEG_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - czy obieg dokumentów? T/N
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;
_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'RODZAJ','STRING[20]','Rodzaj'
   ,'STAWKA','REAL','Stawka'
   ,'DATA','DATE','Data od');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'RODZAJ',,);

SAMDELEG.cntx_psh();
SAMDELEG.index('RODZAJ');
SAMDELEG.prefix();
{? SAMDELEG.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$SAMDELEG.ref();
      _selected.prefix($SAMDELEG.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.RODZAJ:=SAMDELEG.RODZAJ().RODZAJ;
      _tab.STAWKA:=SAMDELEG.STAWKA;
      _tab.DATA:=SAMDELEG.DATA;
      _tab.add();
      SAMDELEG.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'RODZAJ,STAWKA,DATA',20,'Wybór stawek za przebieg w delegacji do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SAMDELEG.cntx_pop();
_result


\SAMDELEG_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;

{? _tab=SAMDELEG | SAMDELEG.seek(_tab.REF)
|| _table.RODZAJ.VALUE:=SAMDELEG.RODZAJ().RODZAJ; _excel.write_async('SAMDELTY',_table.RODZAJ);
   _table.STAWKA.VALUE:=SAMDELEG.STAWKA;
   _table.DATA.VALUE:=SAMDELEG.DATA
?};
_result


\SAMDELEG_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_rodzaj:=exec('FindInSet','#table','SAMDELTY','RODZAJ',_table.RODZAJ,,,1);
{? _rodzaj=null
|| _result.MSG:='Nie odnaleziono rodzaju pojazdu: %1'@[_table.RODZAJ];
   _result.RESULT:=0
?};

SAMDELEG.index('RODZAJ');
SAMDELEG.prefix(_rodzaj,_table.DATA);
{? SAMDELEG.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SAMDELEG.blank() ?};
   SAMDELEG.RODZAJ:=_rodzaj;
   SAMDELEG.STAWKA:=_table.STAWKA;
   SAMDELEG.DATA:=_table.DATA
?};
~~


\SAMDELEG_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SAMDELEG.add(1)
   |? _validate.ACTION='put'
   || _result:=SAMDELEG.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie stawki za przebieg do pojazdu: %1, nie powiodło się.'[_table.RODZAJ]
   || _validate.MSG:='Poprawa stawki za przebieg do pojazdu: %1, nie powiodła się.'[_table.RODZAJ]
   ?}
?};
_result


\SCH_FORM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.02]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SCH_FORM';
_def.FUNPAR:='ZWS_PAR_WTYP';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Formuły schematów'@+'=1,1';
_def.NAME:='Formuły schematów'@;
_def.DESC:='Formuły schematów'@;

_def.PREFIX:="SCH_FORM.index('UNIK'); SCH_FORM.prefix()";
_def.TABLE:="SCH_FORM";
_def.FIELDS:="exec('SCH_FORM_fld','xls_obieg',_a)";

_def.BEFORE:="SCH_FORM.cntx_psh()";
_def.AFTER:="SCH_FORM.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('SCH_FORM_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('SCH_FORM_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('SCH_FORM_imp','xls_obieg',_a,_b,_c)";
~~


\SCH_FORM_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.02]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('TYP','Typ formuły',1,,'2 znakowy typ formuły',2);
_def.define('SKROT','Skrót formuły',1,,'20 znakowa skrócona nazwa formuły',2);
_def.define('NAZWA','Nazwa',1,,'70 znakowa nazwa formuły',2);
_def.define('SYSTEM','Formuła systemowa',1,,'Znacznik, czy formuła systemowa. T/N',2);
_def.define('TRESC','Treść formuły',1,,'255 znakowa treść formuły',2);
~~


\SCH_FORM_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.02]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.TYP.VALUE:=SCH_FORM.TYP;
_table.SKROT.VALUE:=SCH_FORM.SKROT;
_table.NAZWA.VALUE:=SCH_FORM.NAZWA;
_table.SYSTEM.VALUE:=SCH_FORM.SYSTEM;
_table.TRESC.VALUE:=SCH_FORM.TRESC;
_result


\SCH_FORM_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.02]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

: wychwyć błędy krytyczne
_fld:=
   {? _table.NAZWA='' || 'NAZWA'
   |? _table.SKROT='' || 'SKROT'
   |? _table.TRESC='' || 'TRESC'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

: błędne wartości
{? _table.SYSTEM<>'' & ('NT'*_table.SYSTEM)=0
|| _result.msg_value('SYSTEM','Dozwolone wartości: T, N.');
   _result.RESULT:=0;
   return()
?};

SCH_FORM.index('UNIK');
SCH_FORM.prefix(REF.FIRMA,_table.TYP,_table.SKROT,_table.SKROT,);
{? SCH_FORM.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SCH_FORM.blank() ?};
   SCH_FORM.TYP:=_table.TYP;
   SCH_FORM.SKROT:=_table.SKROT;
   SCH_FORM.NAZWA:=_table.NAZWA;
   SCH_FORM.SYSTEM:=_table.SYSTEM;
   SCH_FORM.TRESC:=_table.TRESC;
   SCH_FORM.FIRMA:=REF.FIRMA
?};
~~


\SCH_FORM_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.02]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SCH_FORM.add(1)
   |? _validate.ACTION='put'
   || _result:=SCH_FORM.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie formuły do obsługi schematów w obiegu: %1 nie powiodło się.'[_table.SKROT]
   || _validate.MSG:='Poprawa formuły do obsługi schematów w obiegu: %1 nie powiodła się.'[_table.SKROT]
   ?}
?};
_result


\PORSLO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::       _b - UID - unikalny identyfikator imex
::       _c - nazwa arkusza, nazwa i opis
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PORSLO';
_def.FUNPAR:='ZWS_PAR_PSLO';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:='slowniki_portal.xlsx';
_def.SHEET:='Słowniki portalowe'+'=1,1';
_def.NAME:='słowniki portal';
_def.DESC:='słowniki portal';
::_def.HIDDEN:='T';

_def.PREFIX:="PORSLO.index('FIELD'); PORSLO.prefix()";
_def.TABLE:="PORSLO";
_def.FIELDS:="exec('PORSLO_fld','xls_obieg',_a)";

_def.BEFORE:="PORSLO.cntx_psh()";
_def.AFTER:="PORSLO.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('PORSLO_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('PORSLO_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('PORSLO_imp','xls_obieg',_a,_b,_c)";
~~


\PORSLO_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('FIELD','Nazwa pola',1,,'Lista wartości - nazwa pola');
_def.define('CODE','Kod listy',1,,'Kod dynamicznej listy wartości');
_def.define('TYPE','Typ listy',1,,'Typ listy wartości');
_def.define('FORMULA','Treść formuły',1,,'Formuła zwracająca dane dla słownika');
_def.define('OPIS','Opis słownika',1,,'Opis słownika');
_def.define('SYSTEM','Element systemowy',1,,'Element systemowy');
_def.define('GLOBAL','Słownik globalny',1,,'Słownik globalny');

~~


\PORSLO_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.FIELD.VALUE:=PORSLO.FIELD;
_table.CODE.VALUE:=PORSLO.CODE;
_table.TYPE.VALUE:=PORSLO.TYPE;
_table.FORMULA.VALUE:=PORSLO.FORMULA;
_table.OPIS.VALUE:=PORSLO.OPIS;
_table.SYSTEM.VALUE:=PORSLO.SYSTEM;
_table.GLOBAL.VALUE:=PORSLO.GLOBAL;

PORSLOIT.cntx_psh();
PORSLOIT.index('SLOVAL');
PORSLOIT.prefix(PORSLO.ref());
{? PORSLOIT.first() & ~(PORSLO.SYSTEM='T' & PORSLO.GLOBAL='N')
|| {!
   |? _excel.write_async('PORSLOIT',PORSLOIT.ref());
      PORSLOIT.next()
   !}
?};
PORSLOIT.cntx_pop();

_result


\PORSLO_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

PORSLO.index('FIELD');
PORSLO.prefix(null(),_table.FIELD,_table.TYPE,_table.CODE);
{? PORSLO.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || PORSLO.blank() ?};
   PORSLO.FIRMA:=null();
   PORSLO.FIELD:=_table.FIELD;
   PORSLO.CODE:=_table.CODE;
   PORSLO.TYPE:=_table.TYPE;
   PORSLO.FORMULA:=_table.FORMULA;
   PORSLO.OPIS:=_table.OPIS;
   PORSLO.SYSTEM:=_table.SYSTEM;
   PORSLO.GLOBAL:=_table.GLOBAL

?};
~~


\PORSLO_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PORSLO.add(1)
   |? _validate.ACTION='put'
   || _result:=PORSLO.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie PORSLO nie powiodło się.'
   || _validate.MSG:='Poprawa PORSLO nie powiodła się.'
   ?}
?};
_result


\TAT_WP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MP] [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE:  _a  - obj_new - środowisko mechanizmu
::       [_b] - uid
::       [_c] - opis
::  TAG: <PUBLICZNA>
::  OLD: /init\xls_tat.fml
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:=_b;
_def.DOMAIN:={? _b='TAT_WP' || exec('name','#b_domain','POR') || exec('name','#b_domain','SEO') ?};
_def.FUNPAR:={? _b='TAT_WP' || 'ZWS_PAR_PTYP' || 'SEO_PAR_TYWN' ?};
_def.MULTIFIR:='T';

_def.FILE:={? _b='TAT_WP' || 'parametryzacja.xlsx' || exec('filename_seod','xls_obieg','W') ?};
_def.SHEET:=_c+'=1,1';
_def.NAME:=_c;
_def.DESC:=_c;
::_def.HIDDEN:='T';

_def.PREFIX:={? _b='TAT_WP'
             || "exec('TAT_prefix','xls_obieg','T')"
             || "exec('TAT_prefix','xls_obieg','s')"
             ?};
_def.TABLE:="exec('TAT_table','xls_obieg')";
_def.FIELDS:="exec('TAT_fields','xls_obieg',_a)";

_def.BEFORE:="TAT.cntx_psh()";
_def.AFTER:="TAT.cntx_pop()";
_def.SELECT:={? _b='TAT_WP'
             || "exec('TAT_select','xls_obieg',_a,'T')"
             || "exec('TAT_select','xls_obieg',_a,'s')"
             ?};
_def.EXPORT:="exec('TAT_export','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('TAT_validate','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('TAT_import','xls_obieg',_a,_b,_c)";
~~


\TAT_prefix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa zakres eksportowanych danych
::   WE: _a - typ wniosku
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') || _a || 'N' ?};
TAT.index('W_PORTAL');
TAT.prefix(_typ);
~~


\TAT_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
TAT


\TAT_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('NA','Nazwa',0,,'20 znakowy kod');
_def.define('TYP','Typ',0,,
'(L) - liczba
 (D) - data
 (C) - czas
 (T) - tekst
 (S) - słownik
 (P) - partia produkcyjna
 (B) - Tak/Nie
 (U) - schemat struktury
 (X) - słownik tymczasowy
 (O) - nagłówek
');
_def.define('OPIS','Opis',1,,'80 znakowy kod');
_def.define('WYMCZ','Dotyczy osoby',1,,'Czy należy do wymagań osób - T/N');
_def.define('CZY_PREC','Liczba zmiennoprzecinkowa',1,,'Czy liczba zmiennoprzecinkowa?');
_def.define('PREC','Liczba miejsc po przecinku',1,,'Liczba miejsc po przecinku prezentowanych wartości');
_def.define('TSEP','Separator tysięcy',1,,'Sposób wyświetlania - czy separator tysięcy?');
_def.define('W_PORTAL','HR portal',1,,'Czy atrybut dla HR portal?');
_def.define('P_FIELD','PORSLO nazwa pola',1,,'PORSLO nazwa pola');
_def.define('P_TYPE','PORSLO typ listy',1,,'PORSLO typ listy');
_def.define('P_CODE','PORSLO kod listy',1,,'PORSLO kod listy');
_def.define('PORTYPE','Typ listy',1,,'Typ listy wartości');
_def.define('ID_WP','Identyfikator w HR portal',1,,'Identyfikator w HR portal');
_def.define('MIEJSCE','Miejsce użycia',1,,'Znacznik miejsca użycja: W-wnioski, L-logistyka, P-produkcja');
~~


\TAT_record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
TAT.prefix();
{? _validate.ACTION='add'
||
   TAT.blank();
   TAT.NA:=_obj.NA
?};
PORSLO.cntx_psh();
PORSLO.index('FIELD');
PORSLO.prefix(null(),_obj.P_FIELD,_obj.P_TYPE,_obj.P_CODE);
{? PORSLO.first()
|| _porslo:=PORSLO.ref()
|| _porslo:=null()
?};
PORSLO.cntx_pop();
TAT.TYP:=_obj.TYP;
TAT.OPIS:=_obj.OPIS;
TAT.WYMCZ:=_obj.WYMCZ;
TAT.CZY_PREC:=_obj.CZY_PREC;
TAT.PREC:=_obj.PREC;
TAT.TSEP:=_obj.TSEP;
TAT.W_PORTAL:=_obj.W_PORTAL;
TAT.PORSLO:=_porslo;
TAT.PORTYPE:=_obj.PORTYPE;
TAT.ID_WP:=_obj.ID_WP;
TAT.MIEJSCE:=_obj.MIEJSCE;
ZNORMAT.ATROSO:={? TAT.WYMCZ='T' || 'T' || 'N' ?};
~~


\TAT_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NA.VALUE:=TAT.NA;
_table.TYP.VALUE:=TAT.TYP;
_table.OPIS.VALUE:=TAT.OPIS;
_table.WYMCZ.VALUE:=TAT.WYMCZ;
_table.CZY_PREC.VALUE:=TAT.CZY_PREC;
_table.PREC.VALUE:=TAT.PREC;
_table.TSEP.VALUE:=TAT.TSEP;
_table.W_PORTAL.VALUE:=TAT.W_PORTAL;
_table.P_FIELD.VALUE:=TAT.PORSLO().FIELD;
_table.P_TYPE.VALUE:=TAT.PORSLO().TYPE;
_table.P_CODE.VALUE:=TAT.PORSLO().CODE; _excel.write_async('PORSLO',TAT.PORSLO);
_table.PORTYPE.VALUE:=TAT.PORTYPE;
_table.ID_WP.VALUE:=TAT.ID_WP;
_table.MIEJSCE.VALUE:=TAT.MIEJSCE;
_result


\TAT_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;

{? _result.RESULT=1
||
   TAT.index('NA');
   TAT.prefix(_obj.NA,);
   {? TAT.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _ref:=TAT.ref();
         TAT.cntx_psh();
         TAT.index('ID_WP');
         TAT.prefix(_obj.ID_WP,);
         {? TAT.first & _ref<>TAT.ref()
         || _result.RESULT:=0;
            _result.MSG:='Rekord o tym samym identyfikatorze, ale innej nazwie już istnieje'@;
            TAT.cntx_pop()
         || _result.ACTION:='put';
            TAT.cntx_pop();
            exec('TAT_record','xls_obieg',_obj,_mode,_result);
            {? exec('tat_rkpo','mat_atr',_result.ACTION)<>'' || _result.RESULT:=0 ?}
         ?}
      ?}
   || TAT.index('ID_WP');
      TAT.prefix(_obj.ID_WP,);
      {? TAT.first
      || {? _mode=0
         || _result.RESULT:=0
         || _result.ACTION:='put';
            exec('TAT_record','xls_obieg',_obj,_mode,_result);
            {? exec('tat_rkpo','mat_atr',_result.ACTION)<>'' || _result.RESULT:=0 ?}
         ?}
      || _result.ACTION:='add';
         exec('TAT_record','xls_obieg',_obj,_mode,_result);
         {? exec('tat_rkpo','mat_atr',_result.ACTION)<>'' || _result.RESULT:=0 ?}
      ?}
   ?}
?};
~~


\TAT_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAT.add(1)
   |? _validate.ACTION='put'
   || _result:=TAT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie typu atrybutu o symbolu %1 nie powiodła się.'@[_obj.NA]
   || _validate.MSG:='Poprawa typu atrybutu o symbolu %1 nie powiodła się.'@[_obj.NA]
   ?}
?};
_result


\TAT_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - typ
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_wp:=_b;

_result:=0;

_tab:=tab_tmp(1,'NA','STRING[20]','Nazwa'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'OPIS','STRING[60]','Opis'
   ,'TYP','STRING[1]','Typ'
   ,'SLU','STRING[20]','Słownik użytkownika'
   ,'UD_SCH','STRING[20]','Schemat danych'
   ,'W_PORTAL','STRING[1]','Czy atrybut dla HR portal?'
   ,'PORTYPE','STRING[100]','Typ listy wartości'
   ,'ID_WP','STRING[232]','Identyfikator w HR portal'
   ,'MIEJSCE','STRING[1]','Miejsce użycia');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NA',,);

TAT.cntx_psh();
TAT.index('W_PORTAL');
TAT.prefix(_wp);
{? TAT.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$TAT.ref();
      _selected.prefix($TAT.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.NA:=TAT.NA;
      _tab.OPIS:=TAT.OPIS;
      _tab.TYP:=TAT.TYP;
      _tab.SLU:=TAT.SLU().NAZ;
      _tab.UD_SCH:={? TAT.UD_SCH<>null() || TAT.UD_SCH().UD_TYP().SYMBOL+'/'+TAT.UD_SCH().SYMBOL || '' ?};
      _tab.W_PORTAL:=TAT.W_PORTAL;
      _tab.PORTYPE:=TAT.PORTYPE;
      _tab.ID_WP:=TAT.ID_WP;
      _tab.MIEJSCE:=TAT.MIEJSCE;

      _tab.add();
      TAT.next()
   !}
?};
_result:=exec('select_action','#table',_tab,'NA,OPIS,TYP,SLU,UD_SCH,W_PORTAL',20,'Wybór typów atrybutów do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
TAT.cntx_pop();
_result


\ETYPPROC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::       _b - UID - unikalny identyfikator imex
::       _c - nazwa arkusza, nazwa i opis
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPPROC';
_def.FUNPAR:='ZWS_PAR_PTYP';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:='obieg_wnioskow_HR_Portal.xlsx';
_def.SHEET:='Powiązane procesy'+'=1,1';
_def.NAME:='Powiązane procesy';
_def.DESC:='Powiązane procesy';
_def.HIDDEN:='T';

_def.PREFIX:="ETYPPROC.index('UNIK'); ETYPPROC.prefix()";
_def.TABLE:="ETYPPROC";
_def.FIELDS:="exec('ETYPPROC_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPPROC.cntx_psh()";
_def.AFTER:="ETYPPROC.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPPROC_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPPROC_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPPROC_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPPROC_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('PROC_SYM','Symbol procesu',1,,'Symbol procesu');
_def.define('PROC_VER','Wersja',1,,'Wersja procesu');
_def.define('ETYPYT','Typ obiegu',1,,'50 znakowa nazwa typu obiegu');
_def.define('ETYPY','Typ dokumentu w obiegu',1,,'Typ dokumentu w obiegu');
_def.define('W_PORTAL','HR portal',1,,'Znacznik, czy dotyczy HR portal');
~~


\ETYPPROC_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;
_table.ETYPYT.VALUE:=ETYPPROC.ETYPY().TYPOBIEG().NAZWA;
_table.ETYPY.VALUE:=ETYPPROC.ETYPY().NAZWA;
_table.W_PORTAL.VALUE:=ETYPPROC.ETYPY().W_PORTAL;

_table.PROC_SYM.VALUE:=ETYPPROC.PROC_SYM;
_table.PROC_VER.VALUE:=ETYPPROC.PROC_VER;
_result


\ETYPPROC_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_etypy:=null;

_typ:=exec('FindInSet','#table','TYPOBIEG','UNIK',_table.ETYPYT,,,1);
{? _typ=null
|| _result.msg_norec('ETYPYT');
   _result.RESULT:=0
|| _etypy:=exec('FindInSet','#table','ETYPY','UNIK_WP',_table.ETYPY,_typ,,1,_table.W_PORTAL);
   {? _etypy=null
   || _result.msg_norec('ETYPY');
      _result.RESULT:=0;
      return()
   ?}
?};

::B_PROC.cntx_psh();
::B_PROC.index('SYMVER');
::B_PROC.prefix(REF.FIRMA,_table.PROC_SYM,_table.PROC_VER);
::{? ~B_PROC.first()
::|| _result.MSG:='Nie odnaleziono procesu o symbolu: %1, wersji: %2'@[_table.PROC_SYM,_table.PROC_VER];
::   _result.RESULT:=0;
::   B_PROC.cntx_pop();
::   return()
::?};
::B_PROC.cntx_pop();

ETYPPROC.index('UNIK');
ETYPPROC.prefix(REF.FIRMA,_etypy);
{? ETYPPROC.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};

{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYPPROC.blank() ?};
   ETYPPROC.FIRMA:=REF.FIRMA;
   ETYPPROC.ETYPY:=_etypy;
   ETYPPROC.PROC_SYM:=_table.PROC_SYM;
   ETYPPROC.PROC_VER:=_table.PROC_VER
?};
~~


\ETYPPROC_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPPROC.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYPPROC.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie ETYPPROC nie powiodło się.'
   || _validate.MSG:='Poprawa ETYPPROC nie powiodła się.'
   ?}
?};
_result


\PORSLOIT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::       _b - UID - unikalny identyfikator imex
::       _c - nazwa arkusza, nazwa i opis
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PORSLOIT';
::_def.FUNPAR:='ZWS_PAR_PTYP';
_def.FUNPAR:='ZWS_PAR_PSLO';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:='slowniki_portal.xlsx';
_def.SHEET:='Elementy listy'+'=1,1';
_def.NAME:='Elementy listy';
_def.DESC:='Elementy listy';
_def.HIDDEN:='T';

_def.PREFIX:="PORSLOIT.index('SLOVAL'); PORSLOIT.prefix()";
_def.TABLE:="PORSLOIT";
::_def.TAB_IMP:="PORSLO";
_def.FIELDS:="exec('PORSLOIT_fld','xls_obieg',_a)";

_def.BEFORE:="PORSLOIT.cntx_psh();FIRMA.cntx_psh()";
_def.AFTER:="PORSLOIT.cntx_pop();FIRMA.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('PORSLOIT_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('PORSLOIT_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('PORSLOIT_imp','xls_obieg',_a,_b,_c)";
~~


\PORSLOIT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------

_def:=_a;
_def.define('VALUE','Wartość',1,,'Wartość elementu listy');
_def.define('DESC','Opis',1,,'Opis elementu listy');
_def.define('FIRMA','Symbol firmy',1,,'Symbol firmy dla elementu listy');

_def.define('P_FIELD','PORSLO nazwa pola',1,,'PORSLO nazwa pola');
_def.define('P_TYPE','PORSLO typ listy',1,,'PORSLO typ listy');
_def.define('P_CODE','PORSLO kod listy',1,,'PORSLO kod listy');
~~


\PORSLOIT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.DESC.VALUE:=PORSLOIT.DESC;
_table.VALUE.VALUE:=PORSLOIT.VALUE;
_table.FIRMA.VALUE:={? PORSLOIT.FIRMA || PORSLOIT.FIRMA().SYMBOL || '' ?};
_table.P_FIELD.VALUE:=PORSLOIT.PORSLO().FIELD;
_table.P_TYPE.VALUE:=PORSLOIT.PORSLO().TYPE;
_table.P_CODE.VALUE:=PORSLOIT.PORSLO().CODE;

_result


\PORSLOIT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

PORSLO.cntx_psh();
PORSLO.index('FIELD');
PORSLO.prefix(null(),_table.P_FIELD,_table.P_TYPE,_table.P_CODE);
_porslo:={? PORSLO.first() || PORSLO.ref() || null() ?};
_firma:={? _table.FIRMA=''
        || null()
        || exec('FindInSet','#table','FIRMA','SYMBOL',_table.FIRMA,,,1,,null())
        ?};
PORSLO.cntx_pop();
PORSLOIT.index('SLOVAL');
PORSLOIT.prefix(_porslo,_firma,_table.VALUE,);
{? PORSLOIT.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || PORSLOIT.blank() ?};
   PORSLOIT.VALUE:=_table.VALUE;
   PORSLOIT.DESC:=_table.DESC;
   PORSLOIT.FIRMA:=_firma;
   PORSLOIT.PORSLO:=_porslo
?};
~~


\PORSLOIT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PORSLOIT.add(1)
   |? _validate.ACTION='put'
   || _result:=PORSLOIT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie PORSLOIT nie powiodło się.'
   || _validate.MSG:='Poprawa PORSLOIT nie powiodła się.'
   ?}
?};
_result


\ETYPY_BP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPY_BP';
_def.FUNPAR:='PEP_PAR_TYPY';
_def.DOMAIN:=exec('name','#b_domain','PEP');
_def.FILE:=exec('filename_bp','xls_obieg');
_def.SHEET:='Typy wniosków bez papieru'+'=1,1';
_def.NAME:='Typy wniosków bez papieru';
_def.DESC:='Typy wniosków bez papieru';

_def.PREFIX:="ETYPY.index('UNIK_WP'); ETYPY.prefix()";
_def.TABLE:="exec('ETYPY_WP_tab','xls_obieg',_a,'P')";
_def.TAB_IMP:="ETYPY";
_def.FIELDS:="exec('ETYPY_WP_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPY.cntx_psh()";
_def.AFTER:="ETYPY.cntx_pop()";
_def.SELECT:="exec('ETYPY_select','xls_obieg',_a,'P')";

_def.EXPORT:="exec('ETYPY_WP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPY_WP_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPY_WP_imp','xls_obieg',_a,_b,_c)";
~~


\ETYP_ATR_BP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [21.37_01]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYP_ATR_BP';
_def.FUNPAR:='PEP_PAR_TYPY';
_def.DOMAIN:=exec('name','#b_domain','PEP');
_def.FILE:=exec('filename_bp','xls_obieg');
_def.SHEET:='Schematy inf. dod.=1,1';
_def.NAME:='Schematy inf. dod.';
_def.DESC:='Schematy inf. dod.';
_def.HIDDEN:='T';

_def.PREFIX:="ETYP_ATR.index('KOLZ'); ETYP_ATR.prefix()";
_def.TABLE:="ETYP_ATR";
_def.FIELDS:="exec('ETYP_ATR_WP_fld','xls_obieg',_a)";

_def.BEFORE:="ETYP_ATR.cntx_psh()";
_def.AFTER:="ETYP_ATR.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYP_ATR_WP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYP_ATR_WP_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYP_ATR_WP_imp','xls_obieg',_a,_b,_c)";
~~


\TAT_BP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [KN] [21.37_01]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::  OLD: /init\xls_tat.fml
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAT_BP';
_def.DOMAIN:=exec('name','#b_domain','PEP');
_def.FUNPAR:='PEP_PAR_TYPY';
_def.MULTIFIR:='T';

_def.FILE:='parametryzacja.xlsx';
_def.SHEET:='Typy atrybutów paperless=1,1';
_def.NAME:='Typy atrybutów paperless'@;
_def.DESC:='Typy atrybutów paperless';
::_def.HIDDEN:='T';

_def.PREFIX:="exec('TAT_prefix','xls_obieg','P')";
_def.TABLE:="exec('TAT_table','xls_obieg')";
_def.FIELDS:="exec('TAT_fields','xls_obieg',_a)";

_def.BEFORE:="TAT.cntx_psh()";
_def.AFTER:="TAT.cntx_pop()";
_def.SELECT:="exec('TAT_select','xls_obieg',_a,'P')";

_def.EXPORT:="exec('TAT_export','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('TAT_validate','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('TAT_import','xls_obieg',_a,_b,_c)";
~~


\ETYPPROC_BP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KN [21.37_01]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::       _b - UID - unikalny identyfikator imex
::       _c - nazwa arkusza, nazwa i opis
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPPROC_BP';
_def.FUNPAR:='PEP_PAR_TYPY';
_def.DOMAIN:=exec('name','#b_domain','PEP');
_def.FILE:=exec('filename_bp','xls_obieg');
_def.SHEET:='Powiązane procesy'+'=1,1';
_def.NAME:='Powiązane procesy';
_def.DESC:='Powiązane procesy';
_def.HIDDEN:='T';

_def.PREFIX:="ETYPPROC.index('UNIK'); ETYPPROC.prefix()";
_def.TABLE:="ETYPPROC";
_def.FIELDS:="exec('ETYPPROC_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPPROC.cntx_psh()";
_def.AFTER:="ETYPPROC.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPPROC_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPPROC_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPPROC_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPYATT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPYATT';
_def.FUNPAR:='PEP_PAR_TYPY';
_def.DOMAIN:=exec('name','#b_domain','PEP');
_def.FILE:=exec('filename_bp','xls_obieg');
_def.SHEET:='Typy załączników wniosku=1,1';
_def.NAME:='Typy załączników wniosku';
_def.DESC:='Typy załączników wniosku';
_def.HIDDEN:='T';

_def.PREFIX:="ETYPYATT.index('NAZWA'); ETYPYATT.prefix()";
_def.TABLE:="ETYPYATT";
_def.FIELDS:="exec('ETYPYATT_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPYATT.cntx_psh()";
_def.AFTER:="ETYPYATT.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPYATT_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPYATT_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPYATT_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPYATT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ETYPY','Typ wniosku',1,,'50 znakowa nazwa typu wniosku');
_def.define('SLO_NAZ','Typ załącznika',1,,'150 znakowa nazwa typu załącznika');
_def.define('TYPESIGN','Typ podpisu',1,,
   '4 znaki identyfikujące typy podpisów:\n'
   'K - kwalifikowany\n'
   'N - niekwalifikowany\n'
   'R - odręczny\n'
   'Z - zwykły'
);
~~


\ETYPYATT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.ETYPY.VALUE:=ETYPYATT.ETYPY().NAZWA;
_table.SLO_NAZ.VALUE:=ETYPYATT.SLO_NAZ().NAZWA; _excel.write_async('SLO_NAZ',ETYPYATT.SLO_NAZ);
_table.TYPESIGN.VALUE:=ETYPYATT.memo_txt(,1,'TYPESIGN');
_result


\ETYPYATT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_fld:=
   {? _table.ETYPY='' || 'ETYPY'
   |? _table.SLO_NAZ='' || 'SLO_NAZ'
   || ''
   ?};
{? _fld<>''
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};
_tsign:=_table.TYPESIGN;
{? _tsign<>''
|| _err:='';
   {! _ii:=1..+_tsign
   |! _zn:=(_ii+_tsign)+1;
      {? 'KNRZ'*_zn=0 & _err*_zn=0
      || _err+=_zn
      ?}
   !};
   {? _err<>''
   || _result.MSG:='Nieprawidłowe znaki w polu TYPESIGN: %1'@[_err];
      _result.RESULT:=0;
      return()
   ?}
?};
_to:=exec('FindInSet','#table','TYPOBIEG','UNIK','Obieg wniosków');
{? _to=null
|| _result.MSG:='Nie znaleziono typu obiegu: %1'@['Obieg wniosków'];
   _result.RESULT:=0;
   return()
?};
_typ:=exec('FindInSet','#table','ETYPY','UNIK_WP',_table.ETYPY,_to,,1,'P');
{? _typ=null
|| _result.MSG:='Nie znaleziono typu wniosku bez papieru: %1'@[_table.ETYPY];
   _result.RESULT:=0;
   return()
?};
_slo_typ:=exec('FindInSet','#table','SLO_TYP','SYMBOL','ZAL','ZAL');
{? _slo_typ=null
|| _result.MSG:='Nie znaleziono typu słownika: %1'@['ZAL'];
   _result.RESULT:=0;
   return()
?};
_slo_naz:=exec('FindInSet','#table','SLO_NAZ','NAZWA',_table.SLO_NAZ,_slo_typ);
{? _slo_naz=null
|| _result.MSG:='Nie znaleziono typu załącznika: %1'@[_table.SLO_NAZ];
   _result.RESULT:=0;
   return()
?};
ETYPYATT.index('SLO_NAZ');
ETYPYATT.prefix(_typ,_slo_naz);
{? ETYPYATT.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add'
   || ETYPYATT.blank();
      ETYPYATT.ETYPY:=_typ;
      ETYPYATT.SLO_NAZ:=_slo_naz
   ?}
?};
~~


\ETYPYATT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYPYATT.add(1)
   |? _validate.ACTION='put'
   || _result:=1
   ?};
   {? _result=1
   || ETYPYATT.memo_set(_table.TYPESIGN,'TYPESIGN');
      ETYPYATT.memo_put(,'TYPESIGN');
      _result:=ETYPYATT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie typu załacznika: %1 nie powiodło się.'[_table.SLO_NAZ]
   || _validate.MSG:='Poprawa typu załącznika: %1 nie powiodła się.'[_table.SLO_NAZ]
   ?}
?};
_result


\ETYPY_F_SEOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPY_F_SEOD';
_def.FUNPAR:='SEO_PAR_TYPY';
_def.DOMAIN:=exec('name','#b_domain','SEO');
_def.FILE:=exec('filename_seod','xls_obieg','F');
_def.SHEET:='Typy faktur'+'=1,1';
_def.NAME:='Typy faktur SEOD';
_def.DESC:='Typy faktur SEOD';

_def.PREFIX:="ETYPY.index('UNIK_WP'); ETYPY.prefix()";
_def.TABLE:="exec('ETYPY_F_tab','xls_obieg',_a,'S')";
_def.TAB_IMP:="ETYPY";
_def.FIELDS:="exec('ETYPY_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPY.cntx_psh()";
_def.AFTER:="ETYPY.cntx_pop()";
_def.SELECT:="exec('ETYPY_select','xls_obieg',_a,'T','S')";

_def.EXPORT:="exec('ETYPY_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPY_valid','xls_obieg',_a,_b,_c,1)";
_def.IMPORT:="exec('ETYPY_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPY_W_SEOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPY_W_SEOD';
_def.FUNPAR:='SEO_PAR_TYWN';
_def.DOMAIN:=exec('name','#b_domain','SEO');
_def.FILE:=exec('filename_seod','xls_obieg','W');
_def.SHEET:='Typy wniosków SEOD'+'=1,1';
_def.NAME:='Typy wniosków SEOD';
_def.DESC:='Typy wniosków SEOD';

_def.PREFIX:="ETYPY.index('UNIK_WP'); ETYPY.prefix()";
_def.TABLE:="exec('ETYPY_WP_tab','xls_obieg',_a,'s')";
_def.TAB_IMP:="ETYPY";
_def.FIELDS:="exec('ETYPY_WP_fld','xls_obieg',_a,'s')";

_def.BEFORE:="ETYPY.cntx_psh()";
_def.AFTER:="ETYPY.cntx_pop()";
_def.SELECT:="exec('ETYPY_select','xls_obieg',_a,'N','s')";

_def.EXPORT:="exec('ETYPY_WP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPY_WP_valid','xls_obieg',_a,_b,_c,2)";
_def.IMPORT:="exec('ETYPY_WP_imp','xls_obieg',_a,_b,_c)";
~~


\ETYPPROC_SEOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPPROC_SEOD';
_def.FUNPAR:='SEO_PAR_TYWN';
_def.DOMAIN:=exec('name','#b_domain','SEO');
_def.FILE:=exec('filename_seod','xls_obieg','W');
_def.SHEET:='Powiązane procesy seod'+'=1,1';
_def.NAME:='Powiązane procesy seod';
_def.DESC:='Powiązane procesy seod';
_def.HIDDEN:='T';

_def.PREFIX:="ETYPPROC.index('UNIK'); ETYPPROC.prefix()";
_def.TABLE:="ETYPPROC";
_def.FIELDS:="exec('ETYPPROC_fld','xls_obieg',_a)";

_def.BEFORE:="ETYPPROC.cntx_psh()";
_def.AFTER:="ETYPPROC.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('ETYPPROC_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPPROC_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYPPROC_imp','xls_obieg',_a,_b,_c)";
~~


\ETYP_GRP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYP_GRP';
_def.FUNPAR:='ZWS_PAR_WGRP';
_def.DOMAIN:=exec('name','#b_domain','OBE');
_def.FILE:=exec('filename','xls_obieg');
_def.SHEET:='Grupy dokumentów w obiegu'@+'=1,1';
_def.NAME:='Grupy dokumentów w obiegu';
_def.DESC:='Grupy dokumentów w obiegu';

_def.PREFIX:="ETYP_GRP.index('N'); ETYP_GRP.prefix()";
_def.TABLE:="ETYP_GRP";
_def.FIELDS:="exec('ETYP_GRP_fld','xls_obieg',_a)";

_def.BEFORE:="SAMDELTY.cntx_psh()";
_def.AFTER:="SAMDELTY.cntx_pop()";
_def.SELECT:="exec('ETYP_GRP_select','xls_obieg',_a)";

_def.EXPORT:="exec('ETYP_GRP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYP_GRP_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYP_GRP_imp','xls_obieg',_a,_b,_c)";

~~


\ETYP_GRPF
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYP_GRPF';
_def.FUNPAR:='ZWS_PAR_OGRP';
_def.DOMAIN:=exec('name','#b_domain','OBG');
_def.FILE:=exec('filename','xls_obieg','dokumenty');
_def.SHEET:='Grupy dokumentów w obiegu'@+'=1,1';
_def.NAME:='Grupy dokumentów w obiegu';
_def.DESC:='Grupy dokumentów w obiegu';

_def.PREFIX:="ETYP_GRP.index('N'); ETYP_GRP.prefix()";
_def.TABLE:="ETYP_GRP";
_def.FIELDS:="exec('ETYP_GRP_fld','xls_obieg',_a)";

_def.BEFORE:="ETYP_GRP.cntx_psh()";
_def.AFTER:="ETYP_GRP.cntx_pop()";
_def.SELECT:="exec('ETYP_GRP_select','xls_obieg',_a)";

_def.EXPORT:="exec('ETYP_GRP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYP_GRP_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYP_GRP_imp','xls_obieg',_a,_b,_c)";

~~


\ETYP_GWP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYP_GWP';
_def.FUNPAR:='ZWS_PAR_HRGR';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:='obieg_wnioskow_HR_Portal.xlsx';
_def.SHEET:='Grupy dokumentów w obiegu'@+'=1,1';
_def.NAME:='Grupy dokumentów w obiegu';
_def.DESC:='Grupy dokumentów w obiegu';

_def.PREFIX:="ETYP_GRP.index('N'); ETYP_GRP.prefix()";
_def.TABLE:="ETYP_GRP";
_def.FIELDS:="exec('ETYP_GRP_fld','xls_obieg',_a)";

_def.BEFORE:="ETYP_GRP.cntx_psh()";
_def.AFTER:="ETYP_GRP.cntx_pop()";
_def.SELECT:="exec('ETYP_GRP_select','xls_obieg',_a)";

_def.EXPORT:="exec('ETYP_GRP_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYP_GRP_valid','xls_obieg',_a,_b,_c)";
_def.IMPORT:="exec('ETYP_GRP_imp','xls_obieg',_a,_b,_c)";

~~


\ETYP_GRP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZ','Nazwa',1,,'Pełna nazwa grupy dokumentów obiegu');
_def.define('N','Skrót',1,,'Unikalne, symboliczne oznaczenie grupy dokumentów obiegu');
~~


\ETYP_GRP_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - czy obieg dokumentów? T/N
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;
_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'NAZ','STRING[50]','Nazwa'
   ,'N','STRING[8]','Skrót');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'N',,);

ETYP_GRP.cntx_psh();
ETYP_GRP.index('N');
ETYP_GRP.prefix();
{? ETYP_GRP.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$ETYP_GRP.ref();
      _selected.prefix($ETYP_GRP.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.N:=ETYP_GRP.N;
      _tab.NAZ:=ETYP_GRP.NAZ;
      _tab.add();
      ETYP_GRP.next()
   !}
?};
_result:=exec('select_action','#table',_tab,'N,NAZ',20,'Wybór grup wniosków, delegacji i faktur w obiegu do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
ETYP_GRP.cntx_pop();
_result


\ETYP_GRP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;

{? _tab=ETYP_GRP | ETYP_GRP.seek(_tab.REF)
|| _table.N.VALUE:=ETYP_GRP.N;
   _table.NAZ.VALUE:=ETYP_GRP.NAZ
?};
_result


\ETYP_GRP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.N='' || 'N'
   |? _table.NAZ='' || 'NAZ'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

ETYP_GRP.index('N');
ETYP_GRP.prefix(REF.FIRMA,_table.N,_table.N);
{? ETYP_GRP.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ETYP_GRP.blank() ?};
   ETYP_GRP.FIRMA:=REF.FIRMA;
   ETYP_GRP.N:=_table.N;
   ETYP_GRP.NAZ:=_table.NAZ
?};
~~


\ETYP_GRP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [22.26]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ETYP_GRP.add(1)
   |? _validate.ACTION='put'
   || _result:=ETYP_GRP.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie grupy wniosku/delegacji/faktury w obiegu: %1, nie powiodło się.'[_table.N]
   || _validate.MSG:='Poprawa grupy wniosku/delegacji/faktury w obiegu: %1, nie powiodło się.'[_table.N]
   ?}
?};
_result


\ETYPY_D_SEOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ETYPY_D_SEOD';
_def.FUNPAR:='SEO_PAR_TYDE';
_def.DOMAIN:=exec('name','#b_domain','SEO');
_def.FILE:=exec('filename_seod','xls_obieg','D');
_def.SHEET:='Typy delegacji'+'=1,1';
_def.NAME:='Typy delegacji SEOD';
_def.DESC:='Typy delegacji SEOD';

_def.PREFIX:="ETYPY.index('UNIK_WP'); ETYPY.prefix()";
_def.TABLE:="exec('ETYPY_WP_tab','xls_obieg',_a,'D')";
_def.TAB_IMP:="ETYPY";
_def.FIELDS:="exec('ETYPY_fld','xls_obieg',_a,'D')";

_def.BEFORE:="ETYPY.cntx_psh()";
_def.AFTER:="ETYPY.cntx_pop()";
_def.SELECT:="exec('ETYPY_select','xls_obieg',_a,'N','D')";

_def.EXPORT:="exec('ETYPY_exp','xls_obieg',_a,_b)";
_def.VALIDATE:="exec('ETYPY_valid','xls_obieg',_a,_b,_c,2)";
_def.IMPORT:="exec('ETYPY_imp','xls_obieg',_a,_b,_c)";
~~

:Sign Version 2.0 jowisz:1045 2023/10/04 07:51:48 349e176a86b1f5752cf741d05ec3622182e3cda38090c8f0a290c3c51cae19a0f204d0aae8bc5e89d62acc0d57658f5c7db802aebdda368aebd7d8d2217578f2e2095b0a6978527c247d144cf56cce9b3e1dc3fbeaca688f0b4246236f1ed8d1f9c7b5856e8154df928faf69dc7e27212515eed3e7414f9236dc350b935bb327
