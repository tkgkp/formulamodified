:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_kst_war.fml
:: Utworzony: 03.09.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu wartości stałych
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [STRING] - identyfikator
::       _c [STRING] - opis w języku polskim
::       _d [STRING] - symbol dziedziny produktowej
::       _e [STRING] - symbol funkcji parametryzacji
::       _f [STRING] - nazwa pliku xls (domyślnie zwracana przez \def_kst_xlsx/xls__init.fml)
::       _g [STRING] - nazwa zakładki (domyślnie domyślnie taka jak _c)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;
_uid:=-_b;
_txt:=_c;
_dom:=_d;
_fun:=_e;

_def.ID:=~_uid;
_def.FUNPAR:=_fun;
_def.DOMAIN:=exec('name','#b_domain',_dom);
_def.NAME:=_def.env.LANG_PARAMS.translate(_txt);
_def.FILE:={? var_pres('_f')<>type_of('') | _f='' || exec('def_kst_xlsx','xls__init') || _f ?};
_def.SHEET:='%1=1,1'[{? var_pres('_g')<>type_of('') | _g='' || _txt || _g ?}];
_def.DESC:=_txt;
_def.ADD_ROWS:=0;

: źródło danych, prolog, epilog
_def.TABLE:=$('exec(\'%1_table\',\'xls_kst_war\',_a)'[_uid]);
_def.TAB_IMP:="KST_WAR";
_def.BEFORE:=$('exec(\'%1_before\',\'xls_kst_war\',_a)'[_uid]);
_def.AFTER:=$('exec(\'%1_after\',\'xls_kst_war\',_a)'[_uid]);

: definicja kolumn, zawartość wiersza
_def.FIELDS:=$(
   '_a.define(\'DATE\',\'Data zmiany\',0);'
   'exec(\'%1_fields\',\'xls_kst_war\',_a)'[_uid]
);
_def.EXPORT:=$(
   '_date:=_a.table().DATE;'
   '_b.DATE.VALUE:=_date;'
   'exec(\'%1_export\',\'xls_kst_war\',_a,_b,_date)'[_uid]
);

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:=$('exec(\'%1_validate\',\'xls_kst_war\',_a,_b,_c)'[_uid]);
_def.IMPORT:=$('exec(\'%1_import\',\'xls_kst_war\',_a,_b,_c,{? _a.DATE<>date(0,0,0) || _a.DATE || null ?})'[_uid]);
~~


\pkd_dpo_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,
   KST_PAR,'URLOP','URL_CHOR','CHOROBA','WALORYZ','LIMPUU',
   KST,'EKW','Z4','PRZWYN','DATAPLAN','PRZEDST'
);

exec('daty_zmian','#stalesys',_TAB,KST,
   'WS1N','WS1',
   'WS2N','WS2',
   'WS3N','WS3',
   'WS4N','WS4',
   'WS5N','WS5',
   'WS6N','WS6',
   'WS7N','WS7',
   'WS8N','WS8',
   'WS9N','WS9',
   'W_PRN',
   'SZ_PRN'
);

_TAB


\pkd_dpo_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
R.cntx_psh();
R.prefix();
~~


\pkd_dpo_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
R.cntx_pop();
~~


\pkd_dpo_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('URLOP',   MS.name(KST_PAR,'URLOP'),   1,,MS.comment(KST_PAR,'URLOP'),type_of(0),0);
_xls.define('URL_CHOR',MS.name(KST_PAR,'URL_CHOR'),1,,MS.comment(KST_PAR,'URL_CHOR'),type_of(0),0);
_xls.define('EKW',     MS.name(KST,'EKW'),         1,,MS.comment(KST,'EKW'),type_of(0),2);
_xls.define('CHOROBA', MS.name(KST_PAR,'CHOROBA'), 1,,MS.comment(KST_PAR,'CHOROBA'),type_of(0),0);
_xls.define('WALORYZ', MS.name(KST_PAR,'WALORYZ'), 1,,MS.comment(KST_PAR,'WALORYZ'),type_of(0),0);
_xls.define('LIMPUU',  MS.name(KST_PAR,'LIMPUU'),  1,,MS.comment(KST_PAR,'LIMPUU'),type_of(0),0);
_xls.define('Z4',      MS.name(KST,'Z4'),          1,,MS.comment(KST,'Z4'),type_of(0),2);
_xls.define('PRZWYN',  MS.name(KST,'PRZWYN'),      1,,MS.comment(KST,'PRZWYN'),type_of(0),2);
_xls.define('DATAPLAN',MS.name(KST,'DATAPLAN'),    1,,MS.comment(KST,'DATAPLAN'),type_of(date()));
_xls.define('PRZEDST', MS.name(KST,'PRZEDST'),     1,,MS.comment(KST,'PRZEDST'));

_xls.define('WS1N',    MS.name(KST,'WS1N'),        1,,MS.comment(KST,'WS1N'));
_xls.define('WS1',     MS.name(KST,'WS1'),         1,,MS.comment(KST,'WS1'),type_of(0),2);
_xls.define('WS2N',    MS.name(KST,'WS2N'),        1,,MS.comment(KST,'WS2N'));
_xls.define('WS2',     MS.name(KST,'WS2'),         1,,MS.comment(KST,'WS2'),type_of(0),2);
_xls.define('WS3N',    MS.name(KST,'WS3N'),        1,,MS.comment(KST,'WS3N'));
_xls.define('WS3',     MS.name(KST,'WS3'),         1,,MS.comment(KST,'WS3'),type_of(0),2);
_xls.define('WS4N',    MS.name(KST,'WS4N'),        1,,MS.comment(KST,'WS4N'));
_xls.define('WS4',     MS.name(KST,'WS4'),         1,,MS.comment(KST,'WS4'),type_of(0),2);
_xls.define('WS5N',    MS.name(KST,'WS5N'),        1,,MS.comment(KST,'WS5N'));
_xls.define('WS5',     MS.name(KST,'WS5'),         1,,MS.comment(KST,'WS5'),type_of(0),2);
_xls.define('WS6N',    MS.name(KST,'WS6N'),        1,,MS.comment(KST,'WS6N'));
_xls.define('WS6',     MS.name(KST,'WS6'),         1,,MS.comment(KST,'WS6'),type_of(0),2);
_xls.define('WS7N',    MS.name(KST,'WS7N'),        1,,MS.comment(KST,'WS7N'));
_xls.define('WS7',     MS.name(KST,'WS7'),         1,,MS.comment(KST,'WS7'),type_of(0),2);
_xls.define('WS8N',    MS.name(KST,'WS8N'),        1,,MS.comment(KST,'WS8N'));
_xls.define('WS8',     MS.name(KST,'WS8'),         1,,MS.comment(KST,'WS8'),type_of(0),2);
_xls.define('WS9N',    MS.name(KST,'WS9N'),        1,,MS.comment(KST,'WS9N'));
_xls.define('WS9',     MS.name(KST,'WS9'),         1,,MS.comment(KST,'WS9'),type_of(0),2);

_xls.define('W_PRN',   MS.name(KST,'W_PRN'),       1,,MS.comment(KST,'W_PRN'));
_xls.define('SZ_PRN',  MS.name(KST,'SZ_PRN'),      1,,MS.comment(KST,'SZ_PRN'));
~~


\pkd_dpo_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST,KST_PAR);

: wartości stałych do zapisania
_buf.URLOP.VALUE:=KST_PAR.URLOP().RN;
_buf.URL_CHOR.VALUE:=KST_PAR.URL_CHOR().RN;
_buf.EKW.VALUE:=KST.EKW;
_buf.CHOROBA.VALUE:=KST_PAR.CHOROBA;
_buf.WALORYZ.VALUE:=KST_PAR.WALORYZ;
_buf.LIMPUU.VALUE:=KST_PAR.LIMPUU;
_buf.Z4.VALUE:=KST.Z4;
_buf.PRZWYN.VALUE:=KST.PRZWYN;
_buf.DATAPLAN.VALUE:=KST.DATAPLAN;
_buf.PRZEDST.VALUE:=KST.PRZEDST;

_buf.WS1N.VALUE:=KST.WS1N;
_buf.WS1.VALUE:=KST.WS1;
_buf.WS2N.VALUE:=KST.WS2N;
_buf.WS2.VALUE:=KST.WS2;
_buf.WS3N.VALUE:=KST.WS3N;
_buf.WS3.VALUE:=KST.WS3;
_buf.WS4N.VALUE:=KST.WS4N;
_buf.WS4.VALUE:=KST.WS4;
_buf.WS5N.VALUE:=KST.WS5N;
_buf.WS5.VALUE:=KST.WS5;
_buf.WS6N.VALUE:=KST.WS6N;
_buf.WS6.VALUE:=KST.WS6;
_buf.WS7N.VALUE:=KST.WS7N;
_buf.WS7.VALUE:=KST.WS7;
_buf.WS8N.VALUE:=KST.WS8N;
_buf.WS8.VALUE:=KST.WS8;
_buf.WS9N.VALUE:=KST.WS9N;
_buf.WS9.VALUE:=KST.WS9;

_buf.W_PRN.VALUE:=KST.W_PRN;
_buf.SZ_PRN.VALUE:=KST.SZ_PRN;

: uzupełnij arkusz o powiązane wiersze
_env.write_async('RUBRYKI',exec('r','xls__util'));
_env.write_async('RUBRYKI',exec('r','xls__util'));

1


\pkd_dpo_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.URLOP=0    || 'URLOP'
   |? _buf.URL_CHOR=0 || 'URL_CHOR'
   |? _buf.CHOROBA=0  || 'CHOROBA'
   |? _buf.WALORYZ=0  || 'WALORYZ'
   || ''
   ?};
:: pomijamy sprawdzanie jeśli to jest wiersz zerowy
{? _fld<>'' & _buf.DATE<>date(0,0,0)
:  ostrzeżenie
|| _val.msg_empty(_fld)
?};

: błędne wartości
{? _buf.Z4<0
|| _val.msg_range('Z4',0);
   _val.RESULT:=0;
   return()

|? _buf.PRZWYN<0
|| _val.msg_range('PRZWYN',0);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(KST,'W_PRN');
{? +_buf.W_PRN>_max
|| _val.msg_length('W_PRN',_max);
   _buf.W_PRN:=_max+_buf.W_PRN
?};
_max:=MS.fld_len(KST,'SZ_PRN');
{? +_buf.SZ_PRN>_max
|| _val.msg_length('SZ_PRN',_max);
   _buf.SZ_PRN:=_max+_buf.SZ_PRN
?};

: weryfikacja spójności referencyjnej
_urlop:=null;
{? _buf.URLOP<>0
|| {? ~R.find_tab(,'RN',,'=',_buf.URLOP)
   || _val.msg_norec('URLOP')
   || _urlop:=R.ref()
   ?}
?};
_url_chor:=null;
{? _buf.URL_CHOR<>0
|| {? ~R.find_tab(,'RN',,'=',_buf.URL_CHOR)
   || _val.msg_norec('URL_CHOR')
   || _url_chor:=R.ref()
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]",
   'URLOP',_urlop,
   'URL_CHOR',_url_chor
);

~~


\pkd_dpo_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST_PAR.URLOP:=_obj.URLOP;
KST_PAR.URL_CHOR:=_obj.URL_CHOR;
KST.EKW:=_buf.EKW;
KST_PAR.CHOROBA:=_buf.CHOROBA;
KST_PAR.WALORYZ:=_buf.WALORYZ;
KST_PAR.LIMPUU:=_buf.LIMPUU;
KST.Z4:=_buf.Z4;
KST.PRZWYN:=_buf.PRZWYN;
KST.DATAPLAN:=_buf.DATAPLAN;
KST.PRZEDST:=_buf.PRZEDST;

KST.WS1N:=_buf.WS1N;
KST.WS1:=_buf.WS1;
KST.WS2N:=_buf.WS2N;
KST.WS2:=_buf.WS2;
KST.WS3N:=_buf.WS3N;
KST.WS3:=_buf.WS3;
KST.WS4N:=_buf.WS4N;
KST.WS4:=_buf.WS4;
KST.WS5N:=_buf.WS5N;
KST.WS5:=_buf.WS5;
KST.WS6N:=_buf.WS6N;
KST.WS6:=_buf.WS6;
KST.WS7N:=_buf.WS7N;
KST.WS7:=_buf.WS7;
KST.WS8N:=_buf.WS8N;
KST.WS8:=_buf.WS8;
KST.WS9N:=_buf.WS9N;
KST.WS9:=_buf.WS9;

KST.W_PRN:=_buf.W_PRN;
KST.SZ_PRN:=_buf.SZ_PRN;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,
   KST_PAR,'URLOP','URL_CHOR','CHOROBA','WALORYZ','LIMPUU',
   KST,'EKW','Z4','PRZWYN','DATAPLAN','PRZEDST'
);
exec('zapisz','#stalesys',_date,KST,
   'WS1N','WS1',
   'WS2N','WS2',
   'WS3N','WS3',
   'WS4N','WS4',
   'WS5N','WS5',
   'WS6N','WS6',
   'WS7N','WS7',
   'WS8N','WS8',
   'WS9N','WS9',
   'W_PRN',
   'SZ_PRN'
);
~~


\pkd_pfr_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,KST,
   'PFOBOWWP','PFOBOWPP','PFIMIE','PFNAZW','PFTEL','PFFAX','PFEMAIL',
   'PFZOWCZY','PFZOWPP','PFZOWOPI','PFZOWDAT','PFZOWZNA','PFZOWKW'
);

exec('daty_zmian','#stalesys',_TAB,KST,
   'PFZPCCZY','PFZPCDEC','PFZPCPP','PFZPCDAT','PFZPCZNA','PFZPCDST',
   'PFFORPRP','PFFORWLA','PFWIEFIR','PFFORPR','PFTYPFIR','PFR_LIST',
   'PFR_R_L','PFR_R_U','PFR_R_Z'
);

_TAB


\pkd_pfr_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\pkd_pfr_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\pkd_pfr_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('PFOBOWWP',MS.name(KST,'PFOBOWWP'),1,,MS.comment(KST,'PFOBOWWP'),type_of(date()));
_xls.define('PFOBOWPP',MS.name(KST,'PFOBOWPP'),1,,MS.comment(KST,'PFOBOWPP'));
_xls.define('PFIMIE',  MS.name(KST,'PFIMIE'),  1,,MS.comment(KST,'PFIMIE'));
_xls.define('PFNAZW',  MS.name(KST,'PFNAZW'),  1,,MS.comment(KST,'PFNAZW'),);
_xls.define('PFTEL',   MS.name(KST,'PFTEL'),   1,,MS.comment(KST,'PFTEL'));
_xls.define('PFFAX',   MS.name(KST,'PFFAX'),   1,,MS.comment(KST,'PFFAX'));
_xls.define('PFEMAIL', MS.name(KST,'PFEMAIL'), 1,,MS.comment(KST,'PFEMAIL'));
_xls.define('PFZOWCZY',MS.name(KST,'PFZOWCZY'),1,,MS.comment(KST,'PFZOWCZY'),type_of(0),0);
_xls.define('PFZOWPP', MS.name(KST,'PFZOWPP'), 1,,
   MS.comment(KST,'PFZOWPP')+' '+
   '[1-Prezes Zarządu PFRON /'+
   ' 2-Właściwy Minister /'+
   ' 3-Inny]'
);
_xls.define('PFZOWOPI',MS.name(KST,'PFZOWOPI'),1,,MS.comment(KST,'PFZOWOPI'));
_xls.define('PFZOWDAT',MS.name(KST,'PFZOWDAT'),1,,MS.comment(KST,'PFZOWDAT'),type_of(date()));
_xls.define('PFZOWZNA',MS.name(KST,'PFZOWZNA'),1,,MS.comment(KST,'PFZOWZNA'));
_xls.define('PFZOWKW', MS.name(KST,'PFZOWKW'), 1,,MS.comment(KST,'PFZOWKW'),type_of(0),2);
_xls.define('PFZPCCZY',MS.name(KST,'PFZPCCZY'),1,,MS.comment(KST,'PFZPCCZY')+' [T/N]',type_of(''));
_xls.define('PFZPCDEC',MS.name(KST,'PFZPCDEC'),1,,
   MS.comment(KST,'PFZPCDEC')+' '+
   '[1-Przyznanie statusu /'+
   ' 2-Utrata statusu]'
);
_xls.define('PFZPCPP', MS.name(KST,'PFZPCPP'), 1,,
   MS.comment(KST,'PFZPCPP')+' '+
   '[1-Pełnomocnik Rządu /'+
   ' 2-Wojewoda]'
);
_xls.define('PFZPCDAT',MS.name(KST,'PFZPCDAT'),1,,MS.comment(KST,'PFZPCDAT'),type_of(date()));
_xls.define('PFZPCZNA',MS.name(KST,'PFZPCZNA'),1,,MS.comment(KST,'PFZPCZNA'));
_xls.define('PFZPCDST',MS.name(KST,'PFZPCDST'),1,,MS.comment(KST,'PFZPCDST'),type_of(date()));
_xls.define('PFFORPRP',MS.name(KST,'PFFORPRP'),1,,MS.comment(KST,'PFFORPRP'));
_xls.define('PFFORWLA',MS.name(KST,'PFFORWLA'),1,,MS.comment(KST,'PFFORWLA'));
_xls.define('PFWIEFIR',MS.name(KST,'PFWIEFIR'),1,,MS.comment(KST,'PFWIEFIR'));
_xls.define('PFFORPR', MS.name(KST,'PFFORPR'), 1,,MS.comment(KST,'PFFORPR'));
_xls.define('PFTYPFIR',MS.name(KST,'PFTYPFIR'),1,,MS.comment(KST,'PFTYPFIR'));
_xls.define('PFR_LIST',MS.name(KST,'PFR_LIST'),1,,MS.comment(KST,'PFR_LIST'));
_xls.define('PFR_R_L', MS.name(KST,'PFR_R_L'), 1,,MS.comment(KST,'PFR_R_L'),type_of(0),2);
_xls.define('PFR_R_U', MS.name(KST,'PFR_R_U'), 1,,MS.comment(KST,'PFR_R_U'),type_of(0),2);
_xls.define('PFR_R_Z', MS.name(KST,'PFR_R_Z'), 1,,MS.comment(KST,'PFR_R_Z'),type_of(0),2);

~~


\pkd_pfr_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST);

: wartości stałych do zapisania
_buf.PFOBOWWP.VALUE:=KST.PFOBOWWP;
_buf.PFOBOWPP.VALUE:=KST.PFOBOWPP;
_buf.PFIMIE.VALUE:=KST.PFIMIE;
_buf.PFNAZW.VALUE:=KST.PFNAZW;
_buf.PFTEL.VALUE:=KST.PFTEL;
_buf.PFFAX.VALUE:=KST.PFFAX;
_buf.PFEMAIL.VALUE:=KST.PFEMAIL;
_buf.PFZOWCZY.VALUE:=KST.PFZOWCZY;
_buf.PFZOWPP.VALUE:=KST.PFZOWPP;
_buf.PFZOWOPI.VALUE:=KST.PFZOWOPI;
_buf.PFZOWDAT.VALUE:=KST.PFZOWDAT;
_buf.PFZOWZNA.VALUE:=KST.PFZOWZNA;
_buf.PFZOWKW.VALUE:=KST.PFZOWKW;
_buf.PFZPCCZY.VALUE:={? KST.PFZPCCZY || 'T' || 'N' ?};
_buf.PFZPCDEC.VALUE:=KST.PFZPCDEC;
_buf.PFZPCPP.VALUE:=KST.PFZPCPP;
_buf.PFZPCDAT.VALUE:=KST.PFZPCDAT;
_buf.PFZPCZNA.VALUE:=KST.PFZPCZNA;
_buf.PFZPCDST.VALUE:=KST.PFZPCDST;
_buf.PFFORPRP.VALUE:=KST.PFFORPRP;
_buf.PFFORWLA.VALUE:=KST.PFFORWLA;
_buf.PFWIEFIR.VALUE:=KST.PFWIEFIR;
_buf.PFFORPR.VALUE:=KST.PFFORPR;
_buf.PFTYPFIR.VALUE:=KST.PFTYPFIR;
_buf.PFR_LIST.VALUE:=KST.PFR_LIST;
_buf.PFR_R_L.VALUE:=KST.PFR_R_L;
_buf.PFR_R_U.VALUE:=KST.PFR_R_U;
_buf.PFR_R_Z.VALUE:=KST.PFR_R_Z;

1


\pkd_pfr_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: błędy
_fld:=spli_str('PFZOWKW,PFR_R_L,PFR_R_U,PFR_R_Z',',');
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   {? ($('_a.%1<0'[_acr]))(_buf)
   || _val.msg_range(_acr,0);
      return(0)
   ?}
!};
obj_del(_fld);

: ostrzeżenia
_fld:=spli_str(
   'PFOBOWPP,PFIMIE,PFNAZW,PFTEL,PFFAX,PFEMAIL,'
   'PFZOWPP,PFZOWOPI,PFZOWZNA,PFZPCDEC,PFZPCPP,PFZPCZNA,'
   'PFFORPRP,PFFORWLA,PFWIEFIR,PFFORPR,PFTYPFIR,PFR_LIST',
   ','
);
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   _max:=MS.fld_len(KST,_acr);
   {? ($('+_a.%1>_b'[_acr]))(_buf,_max)
   || _val.msg_length(_acr,_max);
      ($('_a.%1:=_b+_a.%1'[_acr]))(_buf,_max)
   ?}
!};
obj_del(_fld);

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]"
);

~~


\pkd_pfr_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.PFOBOWWP:=_buf.PFOBOWWP;
KST.PFOBOWPP:=_buf.PFOBOWPP;
KST.PFIMIE:=_buf.PFIMIE;
KST.PFNAZW:=_buf.PFNAZW;
KST.PFTEL:=_buf.PFTEL;
KST.PFFAX:=_buf.PFFAX;
KST.PFEMAIL:=_buf.PFEMAIL;
KST.PFZOWCZY:=_buf.PFZOWCZY;
KST.PFZOWPP:=_buf.PFZOWPP;
KST.PFZOWOPI:=_buf.PFZOWOPI;
KST.PFZOWDAT:=_buf.PFZOWDAT;
KST.PFZOWZNA:=_buf.PFZOWZNA;
KST.PFZOWKW:=_buf.PFZOWKW;
KST.PFZPCCZY:=(_buf.PFZPCCZY='T');
KST.PFZPCDEC:=_buf.PFZPCDEC;
KST.PFZPCPP:=_buf.PFZPCPP;
KST.PFZPCDAT:=_buf.PFZPCDAT;
KST.PFZPCZNA:=_buf.PFZPCZNA;
KST.PFZPCDST:=_buf.PFZPCDST;
KST.PFFORPRP:=_buf.PFFORPRP;
KST.PFFORWLA:=_buf.PFFORWLA;
KST.PFWIEFIR:=_buf.PFWIEFIR;
KST.PFFORPR:=_buf.PFFORPR;
KST.PFTYPFIR:=_buf.PFTYPFIR;
KST.PFR_LIST:=_buf.PFR_LIST;
KST.PFR_R_L:=_buf.PFR_R_L;
KST.PFR_R_U:=_buf.PFR_R_U;
KST.PFR_R_Z:=_buf.PFR_R_Z;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,KST,
   'PFOBOWWP','PFOBOWPP','PFIMIE','PFNAZW','PFTEL','PFFAX','PFEMAIL',
   'PFZOWCZY','PFZOWPP','PFZOWOPI','PFZOWDAT','PFZOWZNA','PFZOWKW'
);

exec('zapisz','#stalesys',_date,KST,
   'PFZPCCZY','PFZPCDEC','PFZPCPP','PFZPCDAT','PFZPCZNA','PFZPCDST',
   'PFFORPRP','PFFORWLA','PFWIEFIR','PFFORPR','PFTYPFIR','PFR_LIST',
   'PFR_R_L','PFR_R_U','PFR_R_Z'
);
~~


\slsys_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
exec('daty_zmian','#stalesys',,
   XINFO,   'SLBANK','SLWAL','DWD','UWD','SLP','SLTYPPL','SLWYDZIA','SLKH____','SLJEZYK','SLUMTYP','SLUMKAT','SLUMRODZ',
            'SLPRRODZ','SLOKRODZ',
   INFO,'NAROD','POWKOR','KRAJ',
   FINFO,'SL_ODS',
   KST_PAR,'SKID_MB'
)


\slsys_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh(); SLU.prefix();
SLUAPPL.cntx_psh(); SLUAPPL.prefix();
SLO.cntx_psh(); SLO.prefix();
~~


\slsys_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_pop();
SLUAPPL.cntx_pop();
SLU.cntx_pop();
~~


\slsys_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('SLBANK',   MS.name(XINFO,'SLBANK'),   1,,MS.comment(XINFO,'SLBANK'),type_of(''),'');
_xls.define('SLWAL',    MS.name(XINFO,'SLWAL'),    1,,MS.comment(XINFO,'SLWAL'),type_of(''),'');
_xls.define('DWD',      MS.name(XINFO,'DWD'),      1,,MS.comment(XINFO,'DWD'),type_of(''),'');
_xls.define('UWD',      MS.name(XINFO,'UWD'),      1,,MS.comment(XINFO,'UWD'),type_of(''),'');
_xls.define('SLP',      MS.name(XINFO,'SLP'),      1,,MS.comment(XINFO,'SLP'),type_of(''),'');
_xls.define('SLTYPPL',  MS.name(XINFO,'SLTYPPL'),  1,,MS.comment(XINFO,'SLTYPPL'),type_of(''),'');
_xls.define('SLWYDZIA', MS.name(XINFO,'SLWYDZIA'), 1,,MS.comment(XINFO,'SLWYDZIA'),type_of(''),'');
_xls.define('SLKH____', MS.name(XINFO,'SLKH____'), 1,,MS.comment(XINFO,'SLKH____'),type_of(''),'');
_xls.define('SLJEZYK',  MS.name(XINFO,'SLJEZYK'),  1,,MS.comment(XINFO,'SLJEZYK'),type_of(''),'');
_xls.define('SLUMTYP',  MS.name(XINFO,'SLUMTYP'),  1,,MS.comment(XINFO,'SLUMTYP'),type_of(''),'');
_xls.define('SLUMKAT',  MS.name(XINFO,'SLUMKAT'),  1,,MS.comment(XINFO,'SLUMKAT'),type_of(''),'');
_xls.define('SLUMRODZ', MS.name(XINFO,'SLUMRODZ'), 1,,MS.comment(XINFO,'SLUMRODZ'),type_of(''),'');
_xls.define('SLPRRODZ', MS.name(XINFO,'SLPRRODZ'), 1,,MS.comment(XINFO,'SLPRRODZ'),type_of(''),'');
_xls.define('SLOKRODZ', MS.name(XINFO,'SLOKRODZ'), 1,,MS.comment(XINFO,'SLOKRODZ'),type_of(''),'');

_xls.define('NAROD',    MS.name(INFO,'NAROD'),     1,,MS.comment(INFO,'NAROD'),type_of(''),'');
_xls.define('POWKOR',   MS.name(INFO,'POWKOR'),    1,,MS.comment(INFO,'POWKOR'),type_of(''),'');
_xls.define('KRAJ',     MS.name(INFO,'KRAJ'),      1,,MS.comment(INFO,'KRAJ'),type_of(''),'');

_xls.define('SL_ODS',   MS.name(FINFO,'SL_ODS'),   1,,MS.comment(FINFO,'SL_ODS'),type_of(''),'');

_xls.define('SKID_MB',  MS.name(KST_PAR,'SKID_MB'),1,,MS.comment(KST_PAR,'SKID_MB'),type_of(''),'');
~~


\slsys_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,
   XINFO,   'SLBANK','SLWAL','DWD','UWD','SLP','SLTYPPL','SLWYDZIA','SLKH____','SLJEZYK','SLUMTYP','SLUMKAT','SLUMRODZ',
            'SLPRRODZ','SLOKRODZ',
   INFO,    'NAROD','POWKOR','KRAJ',
   FINFO,   'SL_ODS',
   KST_PAR, 'SKID_MB'
);
: wartości stałych do zapisania
_buf.SLBANK.VALUE:=XINFO.SLBANK().NAZ;
_buf.SLWAL.VALUE:=XINFO.SLWAL().NAZ;
_buf.DWD.VALUE:=XINFO.DWD().NAZ;
_buf.UWD.VALUE:=XINFO.UWD().NAZ;
_buf.SLP.VALUE:=XINFO.SLP().NAZ;
_buf.SLTYPPL.VALUE:=XINFO.SLTYPPL().NAZ;
_buf.SLWYDZIA.VALUE:=XINFO.SLWYDZIA().NAZ;
_buf.SLKH____.VALUE:=XINFO.SLKH____().NAZ;
_buf.SLJEZYK.VALUE:=XINFO.SLJEZYK().NAZ;
_buf.SLUMTYP.VALUE:=XINFO.SLUMTYP().NAZ;
_buf.SLUMKAT.VALUE:=XINFO.SLUMKAT().NAZ;
_buf.SLUMRODZ.VALUE:=XINFO.SLUMRODZ().NAZ;
_buf.SLPRRODZ.VALUE:=XINFO.SLPRRODZ().NAZ;
_buf.SLOKRODZ.VALUE:=XINFO.SLOKRODZ().NAZ;

_buf.NAROD.VALUE:=INFO.NAROD().KOD;
_buf.POWKOR.VALUE:=INFO.POWKOR().NAZ;
_buf.KRAJ.VALUE:=INFO.KRAJ().KOD;

_buf.SL_ODS.VALUE:=FINFO.SL_ODS().SLU().NAZ;

_buf.SKID_MB.VALUE:=KST_PAR.SKID_MB().KOD;
1


\slsys_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.SLWAL=''     || 'SLWAL'
   |? _buf.NAROD=''     || 'NAROD'
   |?  exec('tte_lic','tte')='T'
 & _buf.SLWYDZIA=''
                        || 'SLWYDZIA'
   |? _buf.KRAJ=''      || 'KRAJ'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: weryfikacja spójności referencyjnej
_slu:=obj_new(
:: xinfo
   'SLBANK','SLWAL','DWD','UWD','SLP','SLTYPPL','SLWYDZIA','SLKH____','SLJEZYK','SLUMTYP','SLUMKAT','SLUMRODZ',
   'SLPRRODZ','SLOKRODZ',
:: info
   'POWKOR');
_slu_acr:=
:: xinfo
   'SLBANK|SLWAL|DWD|UWD|SLP|SLTYPPL|SLWYDZIA|SLKH____|SLJEZYK|SLUMTYP|SLUMKAT|SLUMRODZ|SLPRRODZ|SLOKRODZ|'
:: info
   'POWKOR|';
{!
|? (_acr:=(_slu_acr*'|'-1)+_slu_acr)<>''
|!
   _slu_acr:=(_slu_acr*'|')-_slu_acr;
   _value:=($'_a.%1'[_acr])(_buf);
   {? _value=''
   || ($'_a.%1'[_acr])(_slu):=null()
   |? SLU.find_tab(,'NAZ',,'=',_value)
   || ($'_a.%1'[_acr])(_slu):=SLU.ref()
   || _val.msg_norec(_acr); _val.RESULT:=0; return()
   ?}
!};
_slo:=obj_new(
:: info
   'NAROD','KRAJ');
_slo_acr:=
:: info
   'NAROD|KRAJ|';
{!
|? (_acr:=(_slo_acr*'|'-1)+_slo_acr)<>''
|!
   _slo_acr:=(_slo_acr*'|')-_slo_acr;
   _value:=($'_a.%1'[_acr])(_buf);
   _sluslo:=
      {? _acr='KRAJ' || exec('FindInSet','#table','SLU','NAZ','~KRAJE UE',,,,,null())
      |? _acr='NAROD' || _slu.SLWAL
      || null()
      ?};
   {? _value=''
   || ($'_a.%1'[_acr])(_slo):=null()
   |? SLO.find_tab(,'KOD',,'=',_value,'SLU',,'=',_sluslo)
   || ($'_a.%1'[_acr])(_slo):=SLO.ref()
   || _val.msg_norec(_acr); _val.RESULT:=0; return()
   ?}
!};
:: FINFO,'SL_ODS'
{? _buf.SL_ODS=''
|| _sl_ods:=null()
|? SLUAPPL.find_tab(,'GDZIE',,'=','F','SLU','NAZ','=',_buf.SL_ODS)
|| _sl_ods:=SLUAPPL.ref()
|| _val.msg_norec('SL_ODS');
   _val.RESULT:=0;
   return()
?};
:: KST_PAR,'SKID_MB'
{? _buf.SKID_MB=''
|| _skid_mb:=null()
|? SKID_MBN.find_tab(,'KOD',,'=',_buf.SKID_MB)
|| _skid_mb:=SKID_MBN.ref()
|| _val.msg_norec('SKID_MB');
   _val.RESULT:=0;
   return()
?};
: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]",
   'slu',_slu,
   'slo',_slo,
   'SL_ODS',_sl_ods,
   'SKID_MB',_skid_mb
);
~~


\slsys_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
XINFO.SLBANK:=_obj.slu.SLBANK;
XINFO.SLWAL:=_obj.slu.SLWAL;
XINFO.DWD:=_obj.slu.DWD;
XINFO.UWD:=_obj.slu.UWD;
XINFO.SLP:=_obj.slu.SLP;
XINFO.SLTYPPL:=_obj.slu.SLTYPPL;
XINFO.SLWYDZIA:=_obj.slu.SLWYDZIA;
XINFO.SLKH____:=_obj.slu.SLKH____;
XINFO.SLJEZYK:=_obj.slu.SLJEZYK;
XINFO.SLUMTYP:=_obj.slu.SLUMTYP;
XINFO.SLUMKAT:=_obj.slu.SLUMKAT;
XINFO.SLUMRODZ:=_obj.slu.SLUMRODZ;
XINFO.SLPRRODZ:=_obj.slu.SLPRRODZ;
XINFO.SLOKRODZ:=_obj.slu.SLOKRODZ;

INFO.NAROD:=_obj.slo.NAROD;
INFO.POWKOR:=_obj.slu.POWKOR;
INFO.KRAJ:=_obj.slo.KRAJ;

FINFO.SL_ODS:=_obj.SL_ODS;

KST_PAR.SKID_MB:=_obj.SKID_MB;

: zapisz zmianę stałych z właściwą datą
:: XINFO,INFO,FINFO,KST_PAR
exec('zapisz','#stalesys',_date,
   XINFO,   'SLBANK','SLWAL','DWD','UWD','SLP','SLTYPPL','SLWYDZIA','SLKH____','SLJEZYK','SLUMTYP','SLUMKAT','SLUMRODZ',
            'SLPRRODZ','SLOKRODZ',
   INFO,'NAROD','POWKOR','KRAJ',
   FINFO,'SL_ODS',
   KST_PAR,'SKID_MB'
);
:: INFO
INFO.SLKH____:=exec('sluappl','slo_sys',XINFO.SLKH____);
:: INFO.SLKHD___ - ??? gdzie to jest wykorzystywane ???
INFO.SLKHD___:=exec('sluappl','slo_sys',XINFO.SLKHD___);
INFO.SLBANK:=exec('sluappl','slo_sys',XINFO.SLBANK);
INFO.SLWAL:=exec('sluappl','slo_sys',XINFO.SLWAL);
exec('zapisz','#stalesys',_date,
   INFO,    'SLKH____','SLKHD___','SLBANK','SLWAL'
);
:: FINFO
FINFO.NAROD:=INFO.NAROD;
FINFO.SLBANK:=exec('sluappl','slo_sys',XINFO.SLBANK);
FINFO.SLWAL:=exec('sluappl','slo_sys',XINFO.SLWAL);
exec('zapisz','#stalesys',_date,
   FINFO,   'NAROD','SLBANK','SLWAL'
);
:: KINFO
KINFO.SLBANK:=exec('sluappl','slo_sys',XINFO.SLBANK);
exec('zapisz','#stalesys',_date,
   KINFO,   'SLBANK'
);
~~


\pgoddz_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('daty_zmian','#stalesys',,
   INFO,    'KRAJ','NAROD','BANKRS','TYPKRS','WW','TW'
);
_loop:=_Tab.first();
{!
|? _loop
|!
   _loop:={? _Tab.next() || _Tab.prev(); _Tab.del() || 0 ?}
!};
_Tab


\pgoddz_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_psh();
SLO.prefix();
~~


\pgoddz_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_pop();
~~


\pgoddz_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('KRAJ',     MS.name(INFO,'KRAJ'),      1,,MS.comment(INFO,'KRAJ'),type_of(''),'');
_xls.define('NAROD',    MS.name(INFO,'NAROD'),     1,,MS.comment(INFO,'NAROD'),type_of(''),'');
_xls.define('BANKRS',   MS.name(INFO,'BANKRS'),    1,,MS.comment(INFO,'BANKRS'),type_of(''),'');
_xls.define('TYPKRS',   MS.name(INFO,'TYPKRS'),    1,,'Jedna z opcji: 0-Sprzedaży, 1-Zakupu, 2-Średni',type_of(0),0);
_xls.define('WW',       MS.name(INFO,'WW'),        1,,'Jedna z opcji: N-Nie stosowana, A-Wszystkie oddziały, '
   'W-Wybrane oddziały, P-Pomocniczo do obliczania cen',type_of(''),'');
_xls.define('WAL_F',    MS.name(POM,'WAL_F'),        1,,'Dostępna dla dokumentów sprzedaży T/N',type_of(''),'');
_xls.define('WAL_K',    MS.name(POM,'WAL_K'),        1,,'Dostępna dla dokumentów zakupu T/N',type_of(''),'');
_xls.define('WAL_M',    MS.name(POM,'WAL_M'),        1,,'Dostępna dla dokumentów magazynowych T/N',type_of(''),'');
_xls.define('WAL_O',    MS.name(POM,'WAL_O'),        1,,'Dostępna dla dokumentów ofert T/N',type_of(''),'');
_xls.define('WAL_Z',    MS.name(POM,'WAL_Z'),        1,,'Dostępna dla dokumentów zamówień sprzedaży T/N',type_of(''),'');
_xls.define('WAL_W',    MS.name(POM,'WAL_W'),        1,,'Dostępna dla dokumentów zamówień dostaw T/N',type_of(''),'');
_xls.define('WAL_B',    MS.name(POM,'WAL_B'),        1,,'Pomocnicza dla dokumentów sprzedaży T/N',type_of(''),'');
_xls.define('WAL_G',    MS.name(POM,'WAL_G'),        1,,'Pomocnicza dla dokumentów zakupu T/N',type_of(''),'');
_xls.define('WAL_A',    MS.name(POM,'WAL_A'),        1,,'Pomocnicza dla dokumentów magazynowych T/N',type_of(''),'');
_xls.define('WAL_D',    MS.name(POM,'WAL_D'),        1,,'Pomocnicza dla dokumentów ofert T/N',type_of(''),'');
_xls.define('WAL_C',    MS.name(POM,'WAL_C'),        1,,'Pomocnicza dla dokumentów zamówień sprzedaży T/N',type_of(''),'');
_xls.define('WAL_E',    MS.name(POM,'WAL_E'),        1,,'Pomocniczapna dla dokumentów zamówień dostaw T/N',type_of(''),'');
~~


\pgoddz_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY:fml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,
   INFO,    'KRAJ','NAROD','BANKRS','TYPKRS','WW','TW'
);

: wartości stałych do zapisania
_buf.KRAJ.VALUE:=INFO.KRAJ().KOD;
_buf.NAROD.VALUE:=INFO.NAROD().KOD;
_buf.BANKRS.VALUE:=INFO.BANKRS().KOD;
_buf.TYPKRS.VALUE:=INFO.TYPKRS;
_buf.WW.VALUE:=INFO.WW;
_buf.WAL_F.VALUE:={? INFO.TW*'F' || 'T' || 'N' ?};
_buf.WAL_K.VALUE:={? INFO.TW*'K' || 'T' || 'N' ?};
_buf.WAL_M.VALUE:={? INFO.TW*'T' || 'T' || 'N' ?};
_buf.WAL_O.VALUE:={? INFO.TW*'O' || 'T' || 'N' ?};
_buf.WAL_Z.VALUE:={? INFO.TW*'Z' || 'T' || 'N' ?};
_buf.WAL_W.VALUE:={? INFO.TW*'W' || 'T' || 'N' ?};
_buf.WAL_B.VALUE:={? INFO.TW*'B' || 'T' || 'N' ?};
_buf.WAL_G.VALUE:={? INFO.TW*'G' || 'T' || 'N' ?};
_buf.WAL_A.VALUE:={? INFO.TW*'A' || 'T' || 'N' ?};
_buf.WAL_D.VALUE:={? INFO.TW*'D' || 'T' || 'N' ?};
_buf.WAL_C.VALUE:={? INFO.TW*'C' || 'T' || 'N' ?};
_buf.WAL_E.VALUE:={? INFO.TW*'E' || 'T' || 'N' ?};
1


\pgoddz_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY.fml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.WW='' || 'WW'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? _buf.TYPKRS<>0 & _buf.TYPKRS<>1 & _buf.TYPKRS<>2
|| _val.msg_value('TYPKRS','Dozwolone wartości: niewypełnione pole, 0, 1, 2.');
   _val.RESULT:=0;
   return()

|? _buf.WW<>'' & ('NAWP'*_buf.WW)=0
|| _val.msg_value('WW','Dozwolone wartości: N, A, W, P.');
   _val.RESULT:=0;
   return()

|? (  _fld:='';
      {? _buf.WAL_F<>'' & _buf.WAL_F<>'T' & _buf.WAL_F<>'N' || _fld:='WAL_F' ?};
      {? _buf.WAL_K<>'' & _buf.WAL_K<>'T' & _buf.WAL_K<>'N' || _fld:='WAL_K' ?};
      {? _buf.WAL_M<>'' & _buf.WAL_M<>'T' & _buf.WAL_M<>'N' || _fld:='WAL_M' ?};
      {? _buf.WAL_O<>'' & _buf.WAL_O<>'T' & _buf.WAL_O<>'N' || _fld:='WAL_O' ?};
      {? _buf.WAL_Z<>'' & _buf.WAL_Z<>'T' & _buf.WAL_Z<>'N' || _fld:='WAL_Z' ?};
      {? _buf.WAL_W<>'' & _buf.WAL_W<>'T' & _buf.WAL_W<>'N' || _fld:='WAL_W' ?};
      {? _buf.WAL_B<>'' & _buf.WAL_B<>'T' & _buf.WAL_B<>'N' || _fld:='WAL_B' ?};
      {? _buf.WAL_G<>'' & _buf.WAL_G<>'T' & _buf.WAL_G<>'N' || _fld:='WAL_G' ?};
      {? _buf.WAL_A<>'' & _buf.WAL_A<>'T' & _buf.WAL_A<>'N' || _fld:='WAL_A' ?};
      {? _buf.WAL_D<>'' & _buf.WAL_D<>'T' & _buf.WAL_D<>'N' || _fld:='WAL_D' ?};
      {? _buf.WAL_C<>'' & _buf.WAL_C<>'T' & _buf.WAL_C<>'N' || _fld:='WAL_C' ?};
      {? _buf.WAL_E<>'' & _buf.WAL_E<>'T' & _buf.WAL_E<>'N' || _fld:='WAL_E' ?};
      _fld<>''
   )
|| _val.msg_value(_fld,'Dozwolone wartości: niewypełnione pole, T, N.');
   _val.RESULT:=0;
   return()
?};

: weryfikacja spójności referencyjnej
_slo:=obj_new(
:: info
   'KRAJ','NAROD','BANKRS');
_slo_acr:=
:: info
   'KRAJ|NAROD|BANKRS|';
{!
|? (_acr:=(_slo_acr*'|'-1)+_slo_acr)<>''
|!
   _slo_acr:=(_slo_acr*'|')-_slo_acr;
   _value:=($'_a.%1'[_acr])(_buf);
   _sluslo:=
      {? _acr='KRAJ' || exec('FindInSet','#table','SLU','NAZ','~KRAJE UE',,,,,null())
      |? _acr='NAROD' || XINFO.SLWAL
      |? _acr='BANKRS' || XINFO.SLBANK
      || null()
      ?};
   {? _value=''
   || ($'_a.%1'[_acr])(_slo):=null()
   |? SLO.find_tab(,'KOD',,'=',_value,'SLU',,'=',_sluslo)
   || ($'_a.%1'[_acr])(_slo):=SLO.ref()
   || _val.msg_norec(_acr); _val.RESULT:=0; return()
   ?}
!};
: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]",
   'slo',_slo
);
~~


\pgoddz_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   Wr.fml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
INFO.KRAJ:=_obj.slo.KRAJ;
INFO.NAROD:=_obj.slo.NAROD;
INFO.BANKRS:=_obj.slo.BANKRS;
INFO.TYPKRS:={? _buf.TYPKRS<>0 | _buf.TYPKRS<>1 | _buf.TYPKRS<>2  || 2 || _buf.TYPKRS ?};
INFO.WW:=_buf.WW;
INFO.TW:=
   {? _buf.WAL_F='T' || 'F' || '' ?}+
   {? _buf.WAL_K='T' || 'K' || '' ?}+
   {? _buf.WAL_M='T' || 'M' || '' ?}+
   {? _buf.WAL_O='T' || 'O' || '' ?}+
   {? _buf.WAL_Z='T' || 'Z' || '' ?}+
   {? _buf.WAL_W='T' || 'W' || '' ?}+
   {? _buf.WAL_B='T' || 'B' || '' ?}+
   {? _buf.WAL_G='T' || 'G' || '' ?}+
   {? _buf.WAL_A='T' || 'A' || '' ?}+
   {? _buf.WAL_D='T' || 'D' || '' ?}+
   {? _buf.WAL_C='T' || 'C' || '' ?}+
   {? _buf.WAL_E='T' || 'E' || '' ?};

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,
   INFO,    'KRAJ','NAROD','BANKRS','TYPKRS','WW','TW'
);
~~


\kparam_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
exec('daty_zmian','#stalesys',,
   KPARAM,  'OKD','CZY_ZMKU','LSP_WSZ'
)


\kparam_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\kparam_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
~~


\kparam_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('OKD',      MS.name(KPARAM,'OKD'),     1,,MS.comment(KPARAM,'OKD'),type_of(''),'');
_xls.define('CZY_ZMKU', MS.name(KPARAM,'CZY_ZMKU'),1,,MS.comment(KPARAM,'CZY_ZMKU'),type_of(''),'');
_xls.define('LSP_WSZ', MS.name(KPARAM,'LSP_WSZ'),1,,MS.comment(KPARAM,'LSP_WSZ'),type_of(''),'');
~~


\kparam_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY:fml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,
   KPARAM,  'OKD','CZY_ZMKU','LSP_WSZ'
);

: wartości stałych do zapisania
_buf.OKD.VALUE:=KPARAM.OKD;
_buf.CZY_ZMKU.VALUE:=KPARAM.CZY_ZMKU;
_buf.LSP_WSZ.VALUE:=KPARAM.LSP_WSZ;
1


\kparam_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY.fml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: błędne wartości
{? _buf.OKD<>'' & _buf.OKD<>'T' & _buf.OKD<>'N'
|| _val.msg_value('OKD','Dozwolone wartości: niewypełnione pole, T, N.');
   _val.RESULT:=0;
   return()
|? _buf.CZY_ZMKU<>'' & _buf.CZY_ZMKU<>'T' & _buf.CZY_ZMKU<>'N'
|| _val.msg_value('CZY_ZMKU','Dozwolone wartości: niewypełnione pole, T, N.');
   _val.RESULT:=0;
   return()
|? _buf.LSP_WSZ<>'' & _buf.LSP_WSZ<>'T' & _buf.LSP_WSZ<>'N'
|| _val.msg_value('LSP_WSZ','Dozwolone wartości: niewypełnione pole, T, N.');
   _val.RESULT:=0;
   return()
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]"
);
~~


\kparam_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   Wr.fml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KPARAM.OKD:=_buf.OKD;
KPARAM.CZY_ZMKU:=_buf.CZY_ZMKU;
KPARAM.LSP_WSZ:=_buf.LSP_WSZ;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,
   KPARAM,  'OKD','CZY_ZMKU','LSP_WSZ'
);
~~


\ppl_dpo_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,
   KST,'ZUS','PRFE','PRFRP','PRFRF','PRFR','PRFC','PRFW','WSODBR','SK',
   'PRKC','PRKO','FP','FGSP','FEP','PPE','EKW','WEK','WEM',
   KST_PAR,'AUT_BLOK','URLOP','URL_CHOR','CHOROBA','WALORYZ'
);

exec('daty_zmian','#stalesys',_TAB,KST_PAR,
   'LIMPUU'
);

_TAB


\ppl_dpo_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
R.cntx_psh();
R.prefix();
~~


\ppl_dpo_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
R.cntx_pop();
~~


\ppl_dpo_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('ZUS',     MS.name(KST,'ZUS'),         1,,MS.comment(KST,'ZUS'),type_of(0),2);
_xls.define('PRFE',    MS.name(KST,'PRFE'),        1,,MS.comment(KST,'PRFE'),type_of(0),2);
_xls.define('PRFRP',   MS.name(KST,'PRFRP'),       1,,MS.comment(KST,'PRFRP'),type_of(0),2);
_xls.define('PRFRF',   MS.name(KST,'PRFRF'),       1,,MS.comment(KST,'PRFRF'),type_of(0),2);
_xls.define('PRFC',    MS.name(KST,'PRFC'),        1,,MS.comment(KST,'PRFC'),type_of(0),2);
_xls.define('PRFW',    MS.name(KST,'PRFW'),        1,,MS.comment(KST,'PRFW'),type_of(0),2);
_xls.define('WSODBR',  MS.name(KST,'WSODBR'),      1,,MS.comment(KST,'WSODBR'),type_of(0),2);
_xls.define('AUT_BLOK',MS.name(KST_PAR,'AUT_BLOK'),1,,MS.comment(KST_PAR,'AUT_BLOK'));
_xls.define('SK',      MS.name(KST,'SK'),          1,,MS.comment(KST,'SK'),type_of(0),2);
_xls.define('PRKC',    MS.name(KST,'PRKC'),        1,,MS.comment(KST,'PRKC'),type_of(0),2);
_xls.define('PRKO',    MS.name(KST,'PRKO'),        1,,MS.comment(KST,'PRKO'),type_of(0),2);
_xls.define('FP',      MS.name(KST,'FP'),          1,,MS.comment(KST,'FP'),type_of(0),2);
_xls.define('FGSP',    MS.name(KST,'FGSP'),        1,,MS.comment(KST,'FGSP'),type_of(0),2);
_xls.define('FEP',     MS.name(KST,'FEP'),         1,,MS.comment(KST,'FEP'),type_of(0),2);
_xls.define('PPE',     MS.name(KST,'PPE'),         1,,MS.comment(KST,'PPE'),type_of(0),2);
_xls.define('URLOP',   MS.name(KST_PAR,'URLOP'),   1,,MS.comment(KST_PAR,'URLOP'),type_of(0),0);
_xls.define('URL_CHOR',MS.name(KST_PAR,'URL_CHOR'),1,,MS.comment(KST_PAR,'URL_CHOR'),type_of(0),0);
_xls.define('EKW',     MS.name(KST,'EKW'),         1,,MS.comment(KST,'EKW'),type_of(0),2);
_xls.define('CHOROBA', MS.name(KST_PAR,'CHOROBA'), 1,,MS.comment(KST_PAR,'CHOROBA'),type_of(0),0);
_xls.define('WALORYZ', MS.name(KST_PAR,'WALORYZ'), 1,,MS.comment(KST_PAR,'WALORYZ'),type_of(0),0);
_xls.define('LIMPUU',  MS.name(KST_PAR,'LIMPUU'),  1,,MS.comment(KST_PAR,'LIMPUU'),type_of(0),0);
_xls.define('WEK',     MS.name(KST,'WEK'),         1,,MS.comment(KST,'WEK'),type_of(0),0);
_xls.define('WEM',     MS.name(KST,'WEM'),         1,,MS.comment(KST,'WEM'),type_of(0),0);
~~


\ppl_dpo_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST,KST_PAR);

: wartości stałych do zapisania
_buf.ZUS.VALUE:=KST.ZUS;
_buf.PRFE.VALUE:=KST.PRFE;
_buf.PRFRP.VALUE:=KST.PRFRP;
_buf.PRFRF.VALUE:=KST.PRFRF;
_buf.PRFC.VALUE:=KST.PRFC;
_buf.PRFW.VALUE:=KST.PRFW;
_buf.WSODBR.VALUE:=KST.WSODBR;
_buf.AUT_BLOK.VALUE:=KST_PAR.AUT_BLOK;
_buf.SK.VALUE:=KST.SK;
_buf.PRKC.VALUE:=KST.PRKC;
_buf.PRKO.VALUE:=KST.PRKO;
_buf.FP.VALUE:=KST.FP;
_buf.FGSP.VALUE:=KST.FGSP;
_buf.FEP.VALUE:=KST.FEP;
_buf.PPE.VALUE:=KST.PPE;
_buf.URLOP.VALUE:=KST_PAR.URLOP().RN;
_buf.URL_CHOR.VALUE:=KST_PAR.URL_CHOR().RN;
_buf.EKW.VALUE:=KST.EKW;
_buf.CHOROBA.VALUE:=KST_PAR.CHOROBA;
_buf.WALORYZ.VALUE:=KST_PAR.WALORYZ;
_buf.LIMPUU.VALUE:=KST_PAR.LIMPUU;
_buf.WEK.VALUE:=KST.WEK;
_buf.WEM.VALUE:=KST.WEM;

: uzupełnij arkusz o powiązane wiersze
_env.write_async('RUBRYKI',exec('r','xls__util'));
_env.write_async('RUBRYKI',exec('r','xls__util'));

1


\ppl_dpo_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.PRFE=0     || 'PRFE'
   |? _buf.PRFRP=0    || 'PRFRP'
   |? _buf.PRFRF=0    || 'PRFRF'
   |? _buf.PRFC=0     || 'PRFC'
   |? _buf.SK=0       || 'SK'
   |? _buf.PRKC=0     || 'PRKC'
   |? _buf.PRKO=0     || 'PRKO'
   |? _buf.URLOP=0    || 'URLOP'
   |? _buf.URL_CHOR=0 || 'URL_CHOR'
   |? _buf.CHOROBA=0  || 'CHOROBA'
   |? _buf.WALORYZ=0  || 'WALORYZ'
   || ''
   ?};
{? _fld<>'' & _buf.DATE<>date(0,0,0)
:  ostrzeżenia
|| _val.msg_empty(_fld)
?};

: błędne wartości
{? _buf.AUT_BLOK<>'' & ('TN'*_buf.AUT_BLOK)=0
|| _val.msg_inset('AUT_BLOK','T','N');
   _val.RESULT:=0;
   return()
?};

: weryfikacja spójności referencyjnej
_urlop:=null;
{? _buf.URLOP<>0
|| {? ~R.find_tab(,'RN',,'=',_buf.URLOP)
   || _val.msg_norec('URLOP')
   || _urlop:=R.ref()
   ?}
?};
_url_chor:=null;
{? _buf.URL_CHOR<>0
|| {? ~R.find_tab(,'RN',,'=',_buf.URL_CHOR)
   || _val.msg_norec('URL_CHOR')
   || _url_chor:=R.ref()
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]",
   'URLOP',_urlop,
   'URL_CHOR',_url_chor
);

~~


\ppl_dpo_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.ZUS:=_buf.ZUS;
KST.PRFE:=_buf.PRFE;
KST.PRFRP:=_buf.PRFRP;
KST.PRFRF:=_buf.PRFRF;
KST.PRFR:=_buf.PRFRP+_buf.PRFRF;
KST.PRFC:=_buf.PRFC;
KST.PRFW:=_buf.PRFW;
KST.WSODBR:=_buf.WSODBR;
KST_PAR.AUT_BLOK:=_buf.AUT_BLOK;
KST.SK:=_buf.SK;
KST.PRKC:=_buf.PRKC;
KST.PRKO:=_buf.PRKO;
KST.FP:=_buf.FP;
KST.FGSP:=_buf.FGSP;
KST.FEP:=_buf.FEP;
KST.PPE:=_buf.PPE;
KST_PAR.URLOP:=_obj.URLOP;
KST_PAR.URL_CHOR:=_obj.URL_CHOR;
KST_PAR.CHOROBA:=_buf.CHOROBA;
KST_PAR.WALORYZ:=_buf.WALORYZ;
KST_PAR.LIMPUU:=_buf.LIMPUU;
KST.EKW:=_buf.EKW;
KST.WEK:=_buf.WEK;
KST.WEM:=_buf.WEM;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,
   KST,'ZUS','PRFE','PRFRP','PRFRF','PRFR','PRFC','PRFW','WSODBR','SK',
   'PRKC','PRKO','FP','FGSP','FEP','PPE','EKW','WEK','WEM',
   KST_PAR,'AUT_BLOK','CHOROBA','WALORYZ','URLOP','URL_CHOR'
);

exec('zapisz','#stalesys',_date,
   KST_PAR,'LIMPUU'
);
~~


\ppl_wsp_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,KST,
   'KU','KUZ','KUS','KU_L50','UL','UL_ROK','PRZWYN','PRGWYN','NK','EMER',
   'Z3','Z2','Z4','Z5','MIN_MAC','KWWOLALI','KWWOLPOZ',
   'R_NLIM','LKZ','PDBP','ZWPOD','ZWPODW'
);
exec('daty_zmian','#stalesys',_TAB,KST,
   'ZWPODD','ZWPODE','ZWPODP',
   'ULGA_KS1','ULGA_KS2','ULGA_KS3',
   'PZ_LP',
   'LIM_SKZW',
   'PW_TWP'
);
exec('daty_zmian','#stalesys',_TAB,KST,
   'KW_W','UL2','UL3'
);

_TAB


\ppl_wsp_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\ppl_wsp_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\ppl_wsp_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('KU',      MS.name(KST,'KU'),      1,,MS.comment(KST,'KU'),type_of(0),2);
_xls.define('KUZ',     MS.name(KST,'KUZ'),     1,,MS.comment(KST,'KUZ'),type_of(0),2);
_xls.define('KUS',     MS.name(KST,'KUS'),     1,,MS.comment(KST,'KUS'),type_of(0),2);
_xls.define('KU_L50',  MS.name(KST,'KU_L50'),  1,,MS.comment(KST,'KU_L50'),type_of(0),2);
_xls.define('UL',      MS.name(KST,'UL'),      1,,MS.comment(KST,'UL'),type_of(0),2);
_xls.define('UL_ROK',  MS.name(KST,'UL_ROK'),  1,,MS.comment(KST,'UL_ROK'),type_of(0),2);
_xls.define('PRZWYN',  MS.name(KST,'PRZWYN'),  1,,MS.comment(KST,'PRZWYN'),type_of(0),2);
_xls.define('PRGWYN',  MS.name(KST,'PRGWYN'),  1,,MS.comment(KST,'PRGWYN'),type_of(0),2);
_xls.define('NK',      MS.name(KST,'NK'),      1,,MS.comment(KST,'NK'),type_of(0),2);
_xls.define('EMER',    MS.name(KST,'EMER'),    1,,MS.comment(KST,'EMER'),type_of(0),2);
_xls.define('Z3',      MS.name(KST,'Z3'),      1,,MS.comment(KST,'Z3'),type_of(0),2);
_xls.define('Z2',      MS.name(KST,'Z2'),      1,,MS.comment(KST,'Z2'),type_of(0),2);
_xls.define('Z4',      MS.name(KST,'Z4'),      1,,MS.comment(KST,'Z4'),type_of(0),2);
_xls.define('Z5',      MS.name(KST,'Z5'),      1,,MS.comment(KST,'Z5'),type_of(0),2);
_xls.define('MIN_MAC', MS.name(KST,'MIN_MAC'), 1,,MS.comment(KST,'MIN_MAC'),type_of(0),2);
_xls.define('KWWOLALI',MS.name(KST,'KWWOLALI'),1,,MS.comment(KST,'KWWOLALI'),type_of(0),2);
_xls.define('KWWOLPOZ',MS.name(KST,'KWWOLPOZ'),1,,MS.comment(KST,'KWWOLPOZ'),type_of(0),2);
_xls.define('R_NLIM',  MS.name(KST,'R_NLIM'),  1,,MS.comment(KST,'R_NLIM'));
_xls.define('LKZ',     MS.name(KST,'LKZ'),     1,,MS.comment(KST,'LKZ'),type_of(0),2);
_xls.define('PDBP',    MS.name(KST,'PDBP'),    1,,MS.comment(KST,'PDBP'),type_of(0),2);
_xls.define('ZWPOD',   MS.name(KST,'ZWPOD'),   1,,MS.comment(KST,'ZWPOD'),type_of(0),2);
_xls.define('ZWPODW',  MS.name(KST,'ZWPODW'),  1,,MS.comment(KST,'ZWPODW'),type_of(0),2);
_xls.define('ZWPODD',  MS.name(KST,'ZWPODD'),  1,,MS.comment(KST,'ZWPODD'),type_of(0),2);
_xls.define('ZWPODE',  MS.name(KST,'ZWPODE'),  1,,MS.comment(KST,'ZWPODW'),type_of(0),2);
_xls.define('ZWPODP',  MS.name(KST,'ZWPODP'),  1,,MS.comment(KST,'ZWPODP'),type_of(0),2);
_xls.define('ULGA_KS1',MS.name(KST,'ULGA_KS1'),1,,MS.comment(KST,'ULGA_KS1'),type_of(0),2);
_xls.define('ULGA_KS2',MS.name(KST,'ULGA_KS2'),1,,MS.comment(KST,'ULGA_KS2'),type_of(0),2);
_xls.define('ULGA_KS3',MS.name(KST,'ULGA_KS3'),1,,MS.comment(KST,'ULGA_KS3'),type_of(0),2);
_xls.define('PZ_LP',   MS.name(KST,'PZ_LP'),   1,,MS.comment(KST,'PZ_LP'),type_of(0),2);
_xls.define('LIM_SKZW',MS.name(KST,'LIM_SKZW'),1,,MS.comment(KST,'LIM_SKZW'),type_of(0),2);
_xls.define('PW_TWP',  MS.name(KST,'PW_TWP'),  1,,MS.comment(KST,'PW_TWP'),type_of(0),2);
_xls.define('ZUSOSW',  MS.name(KST,'ZUSOSW'),  1,,MS.comment(KST,'ZUSOSW'),type_of(date()),2);
_xls.define('KW_W',    MS.name(KST,'KW_W'),    1,,MS.comment(KST,'KW_W'),type_of(0),2);
_xls.define('UL2',     MS.name(KST,'UL2'),     1,,MS.comment(KST,'UL2'),type_of(0),2);
_xls.define('UL3',     MS.name(KST,'UL3'),     1,,MS.comment(KST,'UL3'),type_of(0),2);
~~


\ppl_wsp_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST);

: wartości stałych do zapisania
_buf.KU.VALUE:=KST.KU;
_buf.KUZ.VALUE:=KST.KUZ;
_buf.KUS.VALUE:=KST.KUS;
_buf.KU_L50.VALUE:=KST.KU_L50;
_buf.UL.VALUE:=KST.UL;
_buf.UL_ROK.VALUE:=KST.UL_ROK;
_buf.PRZWYN.VALUE:=KST.PRZWYN;
_buf.PRGWYN.VALUE:=KST.PRGWYN;
_buf.NK.VALUE:=KST.NK;
_buf.EMER.VALUE:=KST.EMER;
_buf.Z3.VALUE:=KST.Z3;
_buf.Z2.VALUE:=KST.Z2;
_buf.Z4.VALUE:=KST.Z4;
_buf.Z5.VALUE:=KST.Z5;
_buf.MIN_MAC.VALUE:=KST.MIN_MAC;
_buf.R_NLIM.VALUE:=KST.R_NLIM;
_buf.KWWOLALI.VALUE:=KST.KWWOLALI;
_buf.KWWOLPOZ.VALUE:=KST.KWWOLPOZ;
_buf.LKZ.VALUE:=KST.LKZ;
_buf.PDBP.VALUE:=KST.PDBP;
_buf.ZWPOD.VALUE:=KST.ZWPOD;
_buf.ZWPODW.VALUE:=KST.ZWPODW;
_buf.ZWPODD.VALUE:=KST.ZWPODD;
_buf.ZWPODE.VALUE:=KST.ZWPODE;
_buf.ZWPODP.VALUE:=KST.ZWPODP;
_buf.ULGA_KS1.VALUE:=KST.ULGA_KS1;
_buf.ULGA_KS2.VALUE:=KST.ULGA_KS2;
_buf.ULGA_KS3.VALUE:=KST.ULGA_KS3;
_buf.PZ_LP.VALUE:=KST.PZ_LP;
_buf.LIM_SKZW.VALUE:=KST.LIM_SKZW;
_buf.PW_TWP.VALUE:=KST.PW_TWP;
_buf.ZUSOSW.VALUE:=KST.ZUSOSW;
_buf.KW_W.VALUE:=KST.KW_W;
_buf.UL2.VALUE:=KST.UL2;
_buf.UL3.VALUE:=KST.UL3;

1


\ppl_wsp_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.KU=0     || 'KU'
   |? _buf.KUZ=0    || 'KUZ'
   |? _buf.KUS=0    || 'KUS'
   |? _buf.UL=0     || 'UL'
   |? _buf.UL_ROK=0 || 'UL_ROK'
   |? _buf.NK=0     || 'NK'
   |? _buf.EMER=0   || 'EMER'
   |? _buf.ZWPOD=0 & _buf.DATE>=date(2019,8,1)  || 'ZWPOD'
   |? _buf.ZWPODW=0 & _buf.DATE>=date(2019,8,1) || 'ZWPODW'
   |? _buf.KW_W=0 & _buf.DATE>=date(2023,1,1)  || 'KW_W'
   |? _buf.UL2=0 & _buf.DATE>=date(2023,1,1)   || 'UL2'
   |? _buf.UL3=0 & _buf.DATE>=date(2023,1,1)   || 'UL3'
   || ''
   ?};
{? _fld<>'' & _buf.DATE<>date(0,0,0)
:  ostrzeżenia
|| _val.msg_empty(_fld)
?};
{? PAR_SKID.get(261)='T'
|| {? _buf.LKZ=0  || 'LKZ'
   |? _buf.PDBP=0 || 'PDBP'
   || ''
   ?};
   {? _fld<>'' & _buf.DATE<>date(0,0,0)
:     ostrzeżenia
   || _val.msg_empty(_fld)
   ?}
?};

: błędne wartości
_fld:=spli_str(
   'KU,KUZ,KUS,KU_L50,UL,UL_ROK,PRZWYN,PRGWYN,NK,EMER,'
   'Z3,Z2,Z4,Z5,MIN_MAC,KWWOLALI,KWWOLPOZ,LKZ,PDBP,ZWPOD,ZWPODW,KW_W,UL2,UL3',
   ','
);
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   {? ($('_a.%1<0'[_acr]))(_buf)
   || _val.msg_range(_acr,0);
      return(0)
   ?}
!};
obj_del(_fld);

: błędne wartości procentowe <0,100>
_fld:=spli_str('PW_TWP',',');
{! _lp:=1 .. obj_len(_fld)
|! _acr:=_fld[_lp];
   _value:=($('_a.%1' [_acr]))(_buf);
   {? _value<0 | _value>100
   || _val.msg_range(_acr,0,100);
      _val.RESULT:=0;
      return()
   ?}
!};
obj_del(_fld);

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]"
);
~~


\ppl_wsp_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.KU:=_buf.KU;
KST.KUZ:=_buf.KUZ;
KST.KUS:=_buf.KUS;
KST.KU_L50:=_buf.KU_L50;
KST.UL:=_buf.UL;
KST.UL_ROK:=_buf.UL_ROK;
KST.PRZWYN:=_buf.PRZWYN;
KST.PRGWYN:=_buf.PRGWYN;
KST.NK:=_buf.NK;
KST.EMER:=_buf.EMER;
KST.Z3:=_buf.Z3;
KST.Z2:=_buf.Z2;
KST.Z4:=_buf.Z4;
KST.Z5:=_buf.Z5;
KST.MIN_MAC:=_buf.MIN_MAC;
KST.R_NLIM:=_buf.R_NLIM;
KST.KWWOLALI:=_buf.KWWOLALI;
KST.KWWOLPOZ:=_buf.KWWOLPOZ;
KST.LKZ:=_buf.LKZ;
KST.PDBP:=_buf.PDBP;
KST.ZWPOD:=_buf.ZWPOD;
KST.ZWPODW:=_buf.ZWPODW;
KST.ZWPODD:=_buf.ZWPODD;
KST.ZWPODE:=_buf.ZWPODE;
KST.ZWPODP:=_buf.ZWPODP;
KST.ULGA_KS1:=_buf.ULGA_KS1;
KST.ULGA_KS2:=_buf.ULGA_KS2;
KST.ULGA_KS3:=_buf.ULGA_KS3;
KST.PZ_LP:=_buf.PZ_LP;
KST.LIM_SKZW:=_buf.LIM_SKZW;
KST.PW_TWP:=_buf.PW_TWP;
KST.ZUSOSW:=_buf.ZUSOSW;
KST.KW_W:=_buf.KW_W;
KST.UL2:=_buf.UL2;
KST.UL3:=_buf.UL3;


: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,KST,
   'KU','KUZ','KUS','KU_L50','UL','UL_ROK','PRZWYN','PRGWYN','NK','EMER',
   'Z3','Z2','Z4','Z5','MIN_MAC','R_NLIM','KWWOLALI','KWWOLPOZ','LKZ','PDBP','ZWPOD','ZWPODW','ZUSOSW'
);

exec('zapisz','#stalesys',_date,KST,
   'ZWPODD','ZWPODE','ZWPODP','ULGA_KS1','ULGA_KS2','ULGA_KS3',
   'PZ_LP',
   'LIM_SKZW',
   'PW_TWP',
   'KW_W','UL2','UL3'
);
~~


\ppl_poz_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,KST,
   'PROJZAKR','PROJKK','NR_ZC_AU','NR_ZC_FM',
   'NR_RH_AU','NR_RH_FM');
exec('daty_zmian','#stalesys',_TAB,KST,
   'WS1N','WS1',
   'WS2N','WS2',
   'WS3N','WS3',
   'WS4N','WS4',
   'WS5N','WS5',
   'WS6N','WS6',
   'WS7N','WS7',
   'WS8N','WS8',
   'WS9N','WS9',
   'W_PRN',
   'SZ_PRN'
);

_TAB


\ppl_poz_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
FORMULA.cntx_psh();
FORMULA.prefix();
~~


\ppl_poz_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
FORMULA.cntx_pop();
~~


\ppl_poz_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('PROJZAKR',MS.name(KST,'PROJZAKR'),1,,MS.comment(KST,'PROJZAKR'));
_xls.define('PROJKK',  MS.name(KST,'PROJKK'),  1,,MS.comment(KST,'PROJKK'));
_xls.define('NR_ZC_AU',MS.name(KST,'NR_ZC_AU'),1,,MS.comment(KST,'NR_ZC_AU'));
_xls.define('NR_ZC_FM',MS.name(KST,'NR_ZC_FM'),1,,MS.comment(KST,'NR_ZC_FM'));
_xls.define('NR_RH_AU',MS.name(KST,'NR_RH_AU'),1,,MS.comment(KST,'NR_RH_AU'));
_xls.define('NR_RH_FM',MS.name(KST,'NR_RH_FM'),1,,MS.comment(KST,'NR_RH_FM'));

_xls.define('WS1N',    MS.name(KST,'WS1N'),    1,,MS.comment(KST,'WS1N'));
_xls.define('WS1',     MS.name(KST,'WS1'),     1,,MS.comment(KST,'WS1'),type_of(0),2);
_xls.define('WS2N',    MS.name(KST,'WS2N'),    1,,MS.comment(KST,'WS2N'));
_xls.define('WS2',     MS.name(KST,'WS2'),     1,,MS.comment(KST,'WS2'),type_of(0),2);
_xls.define('WS3N',    MS.name(KST,'WS3N'),    1,,MS.comment(KST,'WS3N'));
_xls.define('WS3',     MS.name(KST,'WS3'),     1,,MS.comment(KST,'WS3'),type_of(0),2);
_xls.define('WS4N',    MS.name(KST,'WS4N'),    1,,MS.comment(KST,'WS4N'));
_xls.define('WS4',     MS.name(KST,'WS4'),     1,,MS.comment(KST,'WS4'),type_of(0),2);
_xls.define('WS5N',    MS.name(KST,'WS5N'),    1,,MS.comment(KST,'WS5N'));
_xls.define('WS5',     MS.name(KST,'WS5'),     1,,MS.comment(KST,'WS5'),type_of(0),2);
_xls.define('WS6N',    MS.name(KST,'WS6N'),    1,,MS.comment(KST,'WS6N'));
_xls.define('WS6',     MS.name(KST,'WS6'),     1,,MS.comment(KST,'WS6'),type_of(0),2);
_xls.define('WS7N',    MS.name(KST,'WS7N'),    1,,MS.comment(KST,'WS7N'));
_xls.define('WS7',     MS.name(KST,'WS7'),     1,,MS.comment(KST,'WS7'),type_of(0),2);
_xls.define('WS8N',    MS.name(KST,'WS8N'),    1,,MS.comment(KST,'WS8N'));
_xls.define('WS8',     MS.name(KST,'WS8'),     1,,MS.comment(KST,'WS8'),type_of(0),2);
_xls.define('WS9N',    MS.name(KST,'WS9N'),    1,,MS.comment(KST,'WS9N'));
_xls.define('WS9',     MS.name(KST,'WS9'),     1,,MS.comment(KST,'WS9'),type_of(0),2);

_xls.define('W_PRN',   MS.name(KST,'W_PRN'),   1,,MS.comment(KST,'W_PRN'));
_xls.define('SZ_PRN',  MS.name(KST,'SZ_PRN'),  1,,MS.comment(KST,'SZ_PRN'));
~~


\ppl_poz_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY:fml
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST);

_buf.PROJZAKR.VALUE:=KST.PROJZAKR;
_buf.PROJKK.VALUE:=KST.PROJKK().SKROT;
_buf.NR_ZC_AU.VALUE:=KST.NR_ZC_AU;
_buf.NR_ZC_FM.VALUE:=KST.NR_ZC_FM;
_buf.NR_RH_AU.VALUE:=KST.NR_RH_AU;
_buf.NR_RH_FM.VALUE:=KST.NR_RH_FM;

_buf.WS1N.VALUE:=KST.WS1N;
_buf.WS1.VALUE:=KST.WS1;
_buf.WS2N.VALUE:=KST.WS2N;
_buf.WS2.VALUE:=KST.WS2;
_buf.WS3N.VALUE:=KST.WS3N;
_buf.WS3.VALUE:=KST.WS3;
_buf.WS4N.VALUE:=KST.WS4N;
_buf.WS4.VALUE:=KST.WS4;
_buf.WS5N.VALUE:=KST.WS5N;
_buf.WS5.VALUE:=KST.WS5;
_buf.WS6N.VALUE:=KST.WS6N;
_buf.WS6.VALUE:=KST.WS6;
_buf.WS7N.VALUE:=KST.WS7N;
_buf.WS7.VALUE:=KST.WS7;
_buf.WS8N.VALUE:=KST.WS8N;
_buf.WS8.VALUE:=KST.WS8;
_buf.WS9N.VALUE:=KST.WS9N;
_buf.WS9.VALUE:=KST.WS9;

_buf.W_PRN.VALUE:=KST.W_PRN;
_buf.SZ_PRN.VALUE:=KST.SZ_PRN;

: wartości stałych do zapisania
_buf.PROJZAKR.VALUE:=KST.PROJZAKR;

: uzupełnij arkusz o powiązane wiersze
_env.write_async('FORMULA',KST.PROJKK);

1


\ppl_poz_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.PROJZAKR='' || 'PROJZAKR'
   |? _buf.NR_ZC_AU='' || 'NR_ZC_AU'
   |? _buf.NR_RH_AU='' || 'NR_RH_AU'
   || ''
   ?};
{? _fld<>''
:  ostrzeżenia
|| _val.msg_empty(_fld)
?};

: błędne wartości
{? ('|Nie dotyczy|Wewnętrzne|Zewnętrzne|Wszystkie|'*('|%1|'[_buf.PROJZAKR]))=0
|| _val.msg_inset('PROJZAKR','Nie dotyczy','Wewnętrzne','Zewnętrzne','Wszystkie');
   _val.RESULT:=0;
   return()

|? _buf.NR_ZC_AU<>'' & ('B12I'*_buf.NR_ZC_AU)=0
|| _val.msg_inset('NR_ZC_AU','B','1','2','I');
   _val.RESULT:=0;
   return()

|? _buf.NR_RH_AU<>'' & ('B123I'*_buf.NR_RH_AU)=0
|| _val.msg_inset('NR_RH_AU','B','1','2','I');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(KST,'W_PRN');
{? +_buf.W_PRN>_max
|| _val.msg_length('W_PRN',_max);
   _buf.W_PRN:=_max+_buf.W_PRN
?};
_max:=MS.fld_len(KST,'SZ_PRN');
{? +_buf.SZ_PRN>_max
|| _val.msg_length('SZ_PRN',_max);
   _buf.SZ_PRN:=_max+_buf.SZ_PRN
?};

: weryfikacja spójności referencyjnej
_formula:=null;
{? _buf.PROJKK<>''
|| {? FORMULA.find_tab(,'RODZAJ',,'=','Q','SKROT',,'=',_buf.PROJKK)
   || _formula:=FORMULA.ref()
   || _val.msg_norec('URLOP');
      _val.RESULT:=0;
      return()
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]",
   'PROJKK',_formula
);

~~


\ppl_poz_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.PROJZAKR:=_buf.PROJZAKR;
KST.PROJKK:=_obj.PROJKK;
KST.NR_ZC_AU:=_buf.NR_ZC_AU;
KST.NR_ZC_FM:=_buf.NR_ZC_FM;
KST.NR_RH_AU:=_buf.NR_RH_AU;
KST.NR_RH_FM:=_buf.NR_RH_FM;

KST.WS1N:=_buf.WS1N;
KST.WS1:=_buf.WS1;
KST.WS2N:=_buf.WS2N;
KST.WS2:=_buf.WS2;
KST.WS3N:=_buf.WS3N;
KST.WS3:=_buf.WS3;
KST.WS4N:=_buf.WS4N;
KST.WS4:=_buf.WS4;
KST.WS5N:=_buf.WS5N;
KST.WS5:=_buf.WS5;
KST.WS6N:=_buf.WS6N;
KST.WS6:=_buf.WS6;
KST.WS7N:=_buf.WS7N;
KST.WS7:=_buf.WS7;
KST.WS8N:=_buf.WS8N;
KST.WS8:=_buf.WS8;
KST.WS9N:=_buf.WS9N;
KST.WS9:=_buf.WS9;

KST.W_PRN:=_buf.W_PRN;
KST.SZ_PRN:=_buf.SZ_PRN;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,KST,
   'PROJZAKR','PROJKK','NR_ZC_AU','NR_ZC_FM','NR_RH_AU','NR_RH_FM'
);
exec('zapisz','#stalesys',_date,KST,
   'WS1N','WS1',
   'WS2N','WS2',
   'WS3N','WS3',
   'WS4N','WS4',
   'WS5N','WS5',
   'WS6N','WS6',
   'WS7N','WS7',
   'WS8N','WS8',
   'WS9N','WS9',
   'W_PRN',
   'SZ_PRN'
);
~~


\prc_dpo_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,KST,
   'R_NLIM','R_NTYG','R_NNTYG','R_ODOB','R_OTYG','R_OTYGZ','R_PNOD','R_PNDO',
   'R_WE','R_WY','R_MARG','GRDN','R_RC','R_KW','R_KG','R_KG','R_ODBIOR','R_PWE','R_PWY','R_WEWY_R'
);

_TAB


\prc_dpo_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
R_CZYT.cntx_psh();
R_CZYT.prefix();
R_KLKW.cntx_psh();
R_KLKW.prefix();
R.cntx_psh();
R.prefix();
~~


\prc_dpo_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
R.cntx_pop();
R_KLKW.cntx_pop();
R_CZYT.cntx_pop();
~~


\prc_dpo_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('R_NLIM',  MS.name(KST,'R_NLIM'),  1,,MS.comment(KST,'R_NLIM'),type_of(''));
_xls.define('R_NTYG',  MS.name(KST,'R_NTYG'),  1,,MS.comment(KST,'R_NTYG'),type_of(''));
_xls.define('R_NNTYG', MS.name(KST,'R_NNTYG'), 1,,MS.comment(KST,'R_NNTYG'),type_of(''));
_xls.define('R_ODOB',  MS.name(KST,'R_ODOB'),  1,,MS.comment(KST,'R_ODOB'),type_of(''));
_xls.define('R_OTYG',  MS.name(KST,'R_OTYG'),  1,,MS.comment(KST,'R_OTYG'),type_of(''));
_xls.define('R_OTYGZ', MS.name(KST,'R_OTYGZ'), 1,,MS.comment(KST,'R_OTYGZ'),type_of(''));
_xls.define('R_PNOD',  MS.name(KST,'R_PNOD'),  1,,MS.comment(KST,'R_PNOD'),type_of(time));
_xls.define('R_PNDO',  MS.name(KST,'R_PNDO'),  1,,MS.comment(KST,'R_PNDO'),type_of(time));
_xls.define('R_WE',    MS.name(KST,'R_WE'),    1,,MS.comment(KST,'R_WE'),type_of(time));
_xls.define('R_WY',    MS.name(KST,'R_WY'),    1,,MS.comment(KST,'R_WY'),type_of(time));
_xls.define('R_MARG',  MS.name(KST,'R_MARG'),  1,,MS.comment(KST,'R_MARG'),type_of(time));
_xls.define('GRDN',    MS.name(KST,'GRDN'),    1,,MS.comment(KST,'GRDN'),type_of(time));
_xls.define('R_RC_N',  MS.name(KST,'R_RC'),    1,,MS.comment(KST,'R_RC'),type_of(''));
_xls.define('R_RC_C',  MS.name(R_CZYT,'C'),    1,,MS.comment(R_CZYT,'C'),type_of(''));
_xls.define('R_KW',    MS.name(KST,'R_KW'),    1,,MS.comment(KST,'R_KW'),type_of(''));
_xls.define('R_KG',    MS.name(KST,'R_KG'),    1,,MS.comment(KST,'R_KG'),type_of(0),0);
_xls.define('R_ODBIOR',MS.name(KST,'R_ODBIOR'),1,,MS.comment(KST,'R_ODBIOR'),type_of(0),0);
_xls.define('R_PWE',   MS.name(KST,'R_PWE'),   1,,MS.comment(KST,'R_PWE'),type_of(time));
_xls.define('R_PWY',   MS.name(KST,'R_PWY'),   1,,MS.comment(KST,'R_PWY'),type_of(time));
_xls.define('R_WEWY_R',MS.name(KST,'R_WEWY_R'),1,,MS.comment(KST,'R_WEWY_R'),type_of(''));

~~


\prc_dpo_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST);

: wartości stałych do zapisania
_buf.R_NLIM.VALUE:=KST.R_NLIM;
_buf.R_NTYG.VALUE:=KST.R_NTYG;
_buf.R_NNTYG.VALUE:=KST.R_NNTYG;
_buf.R_ODOB.VALUE:=KST.R_ODOB;
_buf.R_OTYG.VALUE:=KST.R_OTYG;
_buf.R_OTYGZ.VALUE:=KST.R_OTYGZ;
_buf.R_PNOD.VALUE:=KST.R_PNOD;
_buf.R_PNDO.VALUE:=KST.R_PNDO;
_buf.R_WE.VALUE:=KST.R_WE;
_buf.R_WY.VALUE:=KST.R_WY;
_buf.R_MARG.VALUE:=KST.R_MARG;
_buf.GRDN.VALUE:=KST.GRDN;
_buf.R_RC_N.VALUE:=KST.R_RC().N;
_buf.R_RC_C.VALUE:=KST.R_RC().C;
_buf.R_KW.VALUE:=KST.R_KW().O;
_buf.R_KG.VALUE:=KST.R_KG().RN;
_buf.R_ODBIOR.VALUE:=KST.R_ODBIOR().RN;
_buf.R_PWE.VALUE:=KST.R_PWE;
_buf.R_PWY.VALUE:=KST.R_PWY;
_buf.R_WEWY_R.VALUE:=KST.R_WEWY_R;


: uzupełnij arkusz o powiązane wiersze
_env.write_async('R_CZYT',KST.R_RC);
_env.write_async('R_KLKW',KST.R_KW);
_env.write_async('RUBRYKI',exec('r','xls__util'));
_env.write_async('RUBRYKI',exec('r','xls__util'));

1


\prc_dpo_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.R_NLIM=''          || 'R_NLIM'
   |? _buf.R_NTYG=''          || 'R_NTYG'
   |? _buf.R_PNOD=time(0,0,0) || 'R_PNOD'
   |? _buf.R_PNDO=time(0,0,0) || 'R_PNDO'
   |? _buf.R_KG=0             || 'R_KG'
   |? _buf.R_ODBIOR=0         || 'R_ODBIOR'
   || ''
   ?};
{? _fld<>''
:  ostrzeżenie
|| _val.msg_empty(_fld)
?};

: weryfikacja spójności referencyjnej
_r_czyt:=null;
{? _buf.R_RC_N<>'' & _buf.R_RC_C<>''
|| {? ~R_CZYT.find_tab(,'N',,'=',_buf.R_RC_N,'C',,'=',_buf.R_RC_C)
   || _val.msg_norec('R_RC_N')
   || _r_czyt:=R_CZYT.ref()
   ?}
?};
_r_klkw:=null;
{? _buf.R_KW<>''
|| {? ~R_KLKW.find_tab(,'O',,'=',_buf.R_KW)
   || _val.msg_norec('R_KW')
   || _r_klkw:=R_KLKW.ref()
   ?}
?};
_r_kg:=null;
{? _buf.R_KG<>0
|| {? ~R.find_tab(,'RN',,'=',_buf.R_KG)
   || _val.msg_norec('R_KG')
   || _r_kg:=R.ref()
   ?}
?};
_url_chor:=null;
{? _buf.R_ODBIOR<>0
|| {? ~R.find_tab(,'RN',,'=',_buf.R_ODBIOR)
   || _val.msg_norec('R_ODBIOR')
   || _url_chor:=R.ref()
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]",
   'R_RC',_r_czyt,
   'R_KW',_r_klkw,
   'R_KG',_r_kg,
   'R_ODBIOR',_url_chor
);

~~


\prc_dpo_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.R_NLIM:=_buf.R_NLIM;
KST.R_NTYG:=_buf.R_NTYG;
KST.R_NNTYG:=_buf.R_NNTYG;
KST.R_ODOB:=_buf.R_ODOB;
KST.R_OTYG:=_buf.R_OTYG;
KST.R_OTYGZ:=_buf.R_OTYGZ;
KST.R_PNOD:=_buf.R_PNOD;
KST.R_PNDO:=_buf.R_PNDO;
KST.R_WE:=_buf.R_WE;
KST.R_WY:=_buf.R_WY;
KST.R_MARG:=_buf.R_MARG;
KST.GRDN:=_buf.GRDN;
KST.R_RC:=_obj.R_RC;
KST.R_KW:=_obj.R_KW;
KST.R_KG:=_obj.R_KG;
KST.R_ODBIOR:=_obj.R_ODBIOR;
KST.R_PWE:=_buf.R_PWE;
KST.R_PWY:=_buf.R_PWY;
KST.R_WEWY_R:=_buf.R_WEWY_R;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,KST,
   'R_NLIM','R_NTYG','R_NNTYG','R_ODOB','R_OTYG','R_OTYGZ','R_PNOD','R_PNDO',
   'R_WE','R_WY','R_MARG','GRDN','R_RC','R_KW','R_KG','R_ODBIOR','R_PWE','R_PWY','R_WEWY_R'
);

~~


\zws_dfi_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
exec('daty_zmian','#stalesys',,KST,
   'NAZWA','SKROT','KRAJ','WOJEWODZ','POWIAT','GMINA','MIASTO',
   'ULICA','DOM','LOKAL','KOD','POCZTA','TEL','FAX','EMAIL'
)


\zws_dfi_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
KRAJE.cntx_psh();
KRAJE.prefix();
~~


\zws_dfi_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
KRAJE.cntx_pop();
~~


\zws_dfi_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('NAZWA',   MS.name(KST,'NAZWA'),   1,,MS.comment(KST,'NAZWA'));
_xls.define('SKROT',   MS.name(KST,'SKROT'),   1,,MS.comment(KST,'SKROT'));
_xls.define('KRAJ',    MS.name(KST,'KRAJ'),    1,,MS.comment(KST,'KRAJ'));
_xls.define('WOJEWODZ',MS.name(KST,'WOJEWODZ'),1,,MS.comment(KST,'WOJEWODZ'));
_xls.define('POWIAT',  MS.name(KST,'POWIAT'),  1,,MS.comment(KST,'POWIAT'));
_xls.define('GMINA',   MS.name(KST,'GMINA'),   1,,MS.comment(KST,'GMINA'));
_xls.define('MIASTO',  MS.name(KST,'MIASTO'),  1,,MS.comment(KST,'MIASTO'));
_xls.define('ULICA',   MS.name(KST,'ULICA'),   1,,MS.comment(KST,'ULICA'));
_xls.define('DOM',     MS.name(KST,'DOM'),     1,,MS.comment(KST,'DOM'));
_xls.define('LOKAL',   MS.name(KST,'LOKAL'),   1,,MS.comment(KST,'LOKAL'));
_xls.define('KOD',     MS.name(KST,'KOD'),     1,,MS.comment(KST,'KOD'));
_xls.define('POCZTA',  MS.name(KST,'POCZTA'),  1,,MS.comment(KST,'POCZTA'));
_xls.define('TEL',     MS.name(KST,'TEL'),     1,,MS.comment(KST,'TEL'));
_xls.define('FAX',     MS.name(KST,'FAX'),     1,,MS.comment(KST,'FAX'));
_xls.define('EMAIL',   MS.name(KST,'EMAIL'),   1,,MS.comment(KST,'EMAIL'));

~~


\zws_dfi_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST);

: wartości stałych do zapisania
_buf.NAZWA.VALUE:=KST.NAZWA;
_buf.SKROT.VALUE:=KST.SKROT;
_buf.KRAJ.VALUE:=KST.KRAJ().KODISO;
_buf.WOJEWODZ.VALUE:=KST.WOJEWODZ;
_buf.POWIAT.VALUE:=KST.POWIAT;
_buf.GMINA.VALUE:=KST.GMINA;
_buf.MIASTO.VALUE:=KST.MIASTO;
_buf.ULICA.VALUE:=KST.ULICA;
_buf.DOM.VALUE:=KST.DOM;
_buf.LOKAL.VALUE:=KST.LOKAL;
_buf.KOD.VALUE:=KST.KOD;
_buf.POCZTA.VALUE:=KST.POCZTA;
_buf.TEL.VALUE:=KST.TEL;
_buf.FAX.VALUE:=KST.FAX;
_buf.EMAIL.VALUE:=KST.EMAIL;

: uzupełnij arkusz o powiązane wiersze
_env.write_async('KRAJE',KST.KRAJ);

1


\zws_dfi_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.NAZWA=''    || 'NAZWA'
   |? _buf.SKROT=''    || 'SKROT'
   |? _buf.KRAJ=''     || 'KRAJ'
   |? _buf.WOJEWODZ='' || 'WOJEWODZ'
   |? _buf.POWIAT=''   || 'POWIAT'
   |? _buf.GMINA=''    || 'GMINA'
   |? _buf.MIASTO=''   || 'MIASTO'
   |? _buf.ULICA=''    || 'ULICA'
   |? _buf.DOM=''      || 'DOM'
   |? _buf.KOD=''      || 'KOD'
   |? _buf.POCZTA=''   || 'POCZTA'
   || ''
   ?};
:: Wykluczamy ze sprawdzania dane licencjobiorcy, jeśli nie zmieniliśmy domyślnej wartości
{? _fld<>'' & _buf.SKROT<>'Nazwa firmy do zmiany'
:  ostrzeżenie
|| _val.msg_empty(_fld)
?};

: ostrzeżenia
_fld:=spli_str(
   'NAZWA,SKROT,WOJEWODZ,POWIAT,GMINA,MIASTO,'
   'ULICA,DOM,LOKAL,KOD,POCZTA,TEL,FAX,EMAIL',
   ','
);
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   _max:=($'MS.fld_len(KST,_a)')(_acr);
   {? ($('+_a.%1'[_acr]))(_buf)>_max
   || ($('_a.%1:=_b+_a.%1'[_acr]))(_buf,_max);
      _val.msg_length(_acr,_max)
   ?}
!};
obj_del(_fld);
_max:=MS.fld_len(KRAJE,'KODISO');
{? +_buf.KRAJ>_max
|| _val.msg_length('KRAJ',_max);
   _buf.KRAJ:=_max+_buf.KRAJ
?};

: weryfikacja spójności referencyjnej
_kraj:=null;
{? _buf.KRAJ<>''
|| {? ~KRAJE.find_tab(,'KODISO',,'=',_buf.KRAJ)
   || _val.msg_norec('KRAJ')
   || _kraj:=KRAJE.ref()
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATA]",
   'KRAJ',_kraj
);

~~


\zws_dfi_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.NAZWA:=_buf.NAZWA;
KST.SKROT:=_buf.SKROT;
KST.KRAJ:=_obj.KRAJ;
KST.WOJEWODZ:=_buf.WOJEWODZ;
KST.POWIAT:=_buf.POWIAT;
KST.GMINA:=_buf.GMINA;
KST.MIASTO:=_buf.MIASTO;
KST.ULICA:=_buf.ULICA;
KST.DOM:=_buf.DOM;
KST.LOKAL:=_buf.LOKAL;
KST.KOD:=_buf.KOD;
KST.POCZTA:=_buf.POCZTA;
KST.TEL:=_buf.TEL;
KST.FAX:=_buf.FAX;
KST.EMAIL:=_buf.EMAIL;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,KST,
   'NAZWA','SKROT','KRAJ','WOJEWODZ','POWIAT','GMINA','MIASTO',
   'ULICA','DOM','LOKAL','KOD','POCZTA','TEL','FAX','EMAIL'
);
~~


\zws_dro_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,KST,
   'NIP','REG','NUSP','NKP','PKD','PFRON','GMGUS','US','ODDZ_ZUS','GLN','BDO','OSS','IOSS',
   'EORI','STATUS_P','PODFIZ','PODNAZ','PODIME','PODURDAT','DREJ','OREJ','REJ','NREJ','DRD'
);

exec('daty_zmian','#stalesys',_TAB,KST,
   'FDZIAL','FWLASN','GRVAT'
);

_TAB


\zws_dro_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ADRES.cntx_psh();
ADRES.prefix();
US.cntx_psh();
US.prefix();
~~


\zws_dro_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ADRES.cntx_pop();
US.cntx_pop();
~~


\zws_dro_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('NIP',     MS.name(KST,'NIP'),     1,,MS.comment(KST,'NIP'));
_xls.define('REG',     MS.name(KST,'REG'),     1,,MS.comment(KST,'REG'));
_xls.define('NUSP',    MS.name(KST,'NUSP'),    1,,MS.comment(KST,'NUSP'));
_xls.define('NKP',     MS.name(KST,'NKP'),     1,,MS.comment(KST,'NKP'));
_xls.define('PKD',     MS.name(KST,'PKD'),     1,,MS.comment(KST,'PKD'));
_xls.define('PFRON',   MS.name(KST,'PFRON'),   1,,MS.comment(KST,'PFRON'));
_xls.define('GMGUS',   MS.name(KST,'GMGUS'),   1,,MS.comment(KST,'GMGUS'));
_xls.define('US',      MS.name(KST,'US'),      1,,MS.comment(KST,'US'));
_xls.define('ODDZ_ZUS',MS.name(KST,'ODDZ_ZUS'),1,,MS.comment(KST,'ODDZ_ZUS'));
_xls.define('GLN',     MS.name(KST,'GLN'),     1,,MS.comment(KST,'GLN'));
_xls.define('BDO',     MS.name(KST,'BDO'),     1,,MS.comment(KST,'BDO'));
_xls.define('OSS',     MS.name(KST,'OSS'),     1,,MS.comment(KST,'OSS'));
_xls.define('IOSS',    MS.name(KST,'IOSS'),    1,,MS.comment(KST,'IOSS'));
_xls.define('EORI',    MS.name(KST,'EORI'),    1,,MS.comment(KST,'EORI'));
_xls.define('STATUS_P',MS.name(KST,'STATUS_P'),1,,MS.comment(KST,'STATUS_P'));
_xls.define('PODFIZ',  MS.name(KST,'PODFIZ'),  1,,MS.comment(KST,'PODFIZ'),type_of(0),0);
_xls.define('PODNAZ',  MS.name(KST,'PODNAZ'),  1,,MS.comment(KST,'PODNAZ'));
_xls.define('PODIME',  MS.name(KST,'PODIME'),  1,,MS.comment(KST,'PODIME'));
_xls.define('PODURDAT',MS.name(KST,'PODURDAT'),1,,MS.comment(KST,'PODURDAT'),type_of(date));
_xls.define('DREJ',    MS.name(KST,'DREJ'),    1,,MS.comment(KST,'DREJ'),type_of(date));
_xls.define('OREJ',    MS.name(KST,'OREJ'),    1,,MS.comment(KST,'OREJ'));
_xls.define('REJ',     MS.name(KST,'REJ'),     1,,MS.comment(KST,'REJ'));
_xls.define('NREJ',    MS.name(KST,'NREJ'),    1,,MS.comment(KST,'NREJ'));
_xls.define('DRD',     MS.name(KST,'DRD'),     1,,MS.comment(KST,'DRD'),type_of(date));
_xls.define('FDZIAL',  MS.name(KST,'FDZIAL'),  1,,MS.comment(KST,'FDZIAL'));
_xls.define('FWLASN',  MS.name(KST,'FWLASN'),  1,,MS.comment(KST,'FWLASN'));
_xls.define('GRVAT',  MS.name(KST,'GRVAT'),  1,,MS.comment(KST,'GRVAT'));

~~


\zws_dro_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST);

: wartości stałych do zapisania
_buf.NIP.VALUE:=KST.NIP;
_buf.REG.VALUE:=KST.REG;
_buf.NUSP.VALUE:=KST.NUSP;
_buf.NKP.VALUE:=KST.NKP;
_buf.PKD.VALUE:=KST.PKD;
_buf.PFRON.VALUE:=KST.PFRON;
_buf.GMGUS.VALUE:=KST.GMGUS;
_buf.US.VALUE:=KST.US().NU;
_buf.ODDZ_ZUS.VALUE:=KST.ODDZ_ZUS().NAZWA;
_buf.GLN.VALUE:=KST.GLN;
_buf.BDO.VALUE:=KST.BDO;
_buf.OSS.VALUE:=KST.OSS;
_buf.IOSS.VALUE:=KST.IOSS;
_buf.EORI.VALUE:=KST.EORI;
_buf.STATUS_P.VALUE:=KST.STATUS_P;
_buf.PODFIZ.VALUE:=KST.PODFIZ;
_buf.PODNAZ.VALUE:=KST.PODNAZ;
_buf.PODIME.VALUE:=KST.PODIME;
_buf.PODURDAT.VALUE:=KST.PODURDAT;
_buf.DREJ.VALUE:=KST.DREJ;
_buf.OREJ.VALUE:=KST.OREJ;
_buf.REJ.VALUE:=KST.REJ;
_buf.NREJ.VALUE:=KST.NREJ;
_buf.DRD.VALUE:=KST.DRD;
_buf.FDZIAL.VALUE:=KST.FDZIAL;
_buf.FWLASN.VALUE:=KST.FWLASN;
_buf.GRVAT.VALUE:=KST.GRVAT().SKR;

: uzupełnij arkusz o powiązane wiersze
_env.write_async('US',KST.US);
_env.write_async('ADRES',KST.ODDZ_ZUS);

1


\zws_dro_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.NIP='' || 'NIP'
   |? _buf.REG='' || 'REG'
   || ''
   ?};
{? _fld<>''
:  ostrzeżenie
|| _val.msg_empty(_fld)
?};

: ostrzeżenia
_fld:=spli_str(
   'NIP,REG,NUSP,NKP,PKD,PFRON,GMGUS,GLN,BDO,'
   'PODNAZ,PODIME,OREJ,REJ,NREJ,FDZIAL,FWLASN',
   ','
);
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   _max:=($'MS.fld_len(KST,_a)')(_acr);
   {? ($('+_a.%1'[_acr]))(_buf)>_max
   || ($('_a.%1:=_b+_a.%1'[_acr]))(_buf,_max);
      _val.msg_length(_acr,_max)
   ?}
!};
obj_del(_fld);
_max:=MS.fld_len(US,'NU');
{? +_buf.US>_max
|| _val.msg_length('US',_max);
   _buf.US:=_max+_buf.US
?};
_max:=MS.fld_len(ADRES,'NAZWA');
{? +_buf.ODDZ_ZUS>_max
|| _val.msg_length('ODDZ_ZUS',_max);
   _buf.ODDZ_ZUS:=_max+_buf.ODDZ_ZUS
?};
_max:=MS.fld_len(KH,'SKR');
{? +_buf.GRVAT>_max
|| _val.msg_length('GRVAT',_max);
   _buf.GRVAT:=_max+_buf.GRVAT
?};
: weryfikacja spójności referencyjnej
_us:=null;
{? _buf.US<>''
|| {? ~US.find_tab(,'NU',,'=',_buf.US)
   || _val.msg_norec('US')
   || _us:=US.ref()
   ?}
?};
_oddz_zus:=null;
{? _buf.ODDZ_ZUS<>''
|| {? ~ADRES.find_tab(,
         'TYP','SYMBOL','=','ODDZUS',
         'NAZWA',,'=',_buf.ODDZ_ZUS
      )
   || _val.msg_norec('ODDZ_ZUS')
   || _oddz_zus:=ADRES.ref()
   ?}
?};
_grvat:=null;
{? _buf.GRVAT<>''
|| {? KH.find_tab(,'SKR',,'=',_buf.GRVAT)
   || _grvat:=KH.ref()
   || _val.msg_norec('GRVAT')
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATA]",
   'US',_us,
   'ODDZ_ZUS',_oddz_zus,
   'GRVAT',_grvat
);

~~


\zws_dro_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.NIP:=_buf.NIP;
KST.REG:=_buf.REG;
KST.NUSP:=_buf.NUSP;
KST.NKP:=_buf.NKP;
KST.PKD:=_buf.PKD;
KST.PFRON:=_buf.PFRON;
KST.GMGUS:=_buf.GMGUS;
KST.US:=_obj.US;
KST.ODDZ_ZUS:=_obj.ODDZ_ZUS;
KST.GLN:=_buf.GLN;
KST.BDO:=_buf.BDO;
KST.OSS:=_buf.OSS;
KST.IOSS:=_buf.IOSS;
KST.EORI:=_buf.EORI;
KST.STATUS_P:=_buf.STATUS_P;
KST.PODFIZ:=_buf.PODFIZ;
KST.PODNAZ:=_buf.PODNAZ;
KST.PODIME:=_buf.PODIME;
KST.PODURDAT:=_buf.PODURDAT;
KST.DREJ:=_buf.DREJ;
KST.OREJ:=_buf.OREJ;
KST.REJ:=_buf.REJ;
KST.NREJ:=_buf.NREJ;
KST.DRD:=_buf.DRD;
KST.FDZIAL:=_buf.FDZIAL;
KST.FWLASN:=_buf.FWLASN;
::KST.GRVAT:=_buf.GRVAT;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,KST,
   'NIP','REG','NUSP','NKP','PKD','PFRON','GMGUS','US','ODDZ_ZUS','GLN','BDO','OSS','IOSS',
   'EORI','STATUS_P','PODFIZ','PODNAZ','PODIME','PODURDAT','DREJ','OREJ','REJ','NREJ','DRD'
);

exec('zapisz','#stalesys',_date,KST,
   'FDZIAL','FWLASN','GRVAT'
);
~~


\zws_kor_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
exec('daty_zmian','#stalesys',,KST,
   'KMIASTO','KULICA','KDOM','KLOKAL','KKOD','KPOCZTA','KTEL','KFAX','KEMAIL'
)


\zws_kor_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\zws_kor_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\zws_kor_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('KMIASTO',MS.name(KST,'KMIASTO'),1,,MS.comment(KST,'KMIASTO'));
_xls.define('KULICA', MS.name(KST,'KULICA'), 1,,MS.comment(KST,'KULICA'));
_xls.define('KDOM',   MS.name(KST,'KDOM'),   1,,MS.comment(KST,'KDOM'));
_xls.define('KLOKAL', MS.name(KST,'KLOKAL'), 1,,MS.comment(KST,'KLOKAL'));
_xls.define('KKOD',   MS.name(KST,'KKOD'),   1,,MS.comment(KST,'KKOD'));
_xls.define('KPOCZTA',MS.name(KST,'KPOCZTA'),1,,MS.comment(KST,'KPOCZTA'));
_xls.define('KTEL',   MS.name(KST,'KTEL'),   1,,MS.comment(KST,'KTEL'));
_xls.define('KFAX',   MS.name(KST,'KFAX'),   1,,MS.comment(KST,'KFAX'));
_xls.define('KEMAIL', MS.name(KST,'KEMAIL'), 1,,MS.comment(KST,'KEMAIL'));

~~


\zws_kor_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST);

: wartości stałych do zapisania
_buf.KMIASTO.VALUE:=KST.KMIASTO;
_buf.KULICA.VALUE:=KST.KULICA;
_buf.KDOM.VALUE:=KST.KDOM;
_buf.KLOKAL.VALUE:=KST.KLOKAL;
_buf.KKOD.VALUE:=KST.KKOD;
_buf.KPOCZTA.VALUE:=KST.KPOCZTA;
_buf.KTEL.VALUE:=KST.KTEL;
_buf.KFAX.VALUE:=KST.KFAX;
_buf.KEMAIL.VALUE:=KST.KEMAIL;

1


\zws_kor_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: ostrzeżenia
_fld:=spli_str('KMIASTO,KULICA,KDOM,KLOKAL,KKOD,KPOCZTA,KTEL,KFAX,KEMAIL',',');
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   _max:=($'MS.fld_len(KST,_a)')(_acr);
   {? ($('+_a.%1'[_acr]))(_buf)>_max
   || ($('_a.%1:=_b+_a.%1'[_acr]))(_buf,_max);
      _val.msg_length(_acr,_max)
   ?}
!};
obj_del(_fld);

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATA]"
);

~~


\zws_kor_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
KST.KMIASTO:=_buf.KMIASTO;
KST.KULICA:=_buf.KULICA;
KST.KDOM:=_buf.KDOM;
KST.KLOKAL:=_buf.KLOKAL;
KST.KKOD:=_buf.KKOD;
KST.KPOCZTA:=_buf.KPOCZTA;
KST.KTEL:=_buf.KTEL;
KST.KFAX:=_buf.KFAX;
KST.KEMAIL:=_buf.KEMAIL;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,KST,
   'KMIASTO','KULICA','KDOM','KLOKAL','KKOD','KPOCZTA','KTEL','KFAX','KEMAIL'
);
~~


\aip_ido_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
exec('daty_zmian','#stalesys',,XINFO,
   'AIP_SYS','AIP_URL','AIP_USR','AIP_PASS','NA_IDO','IM_IDO','EM_IDO'
)


\aip_ido_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\aip_ido_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\aip_ido_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('AIP_SYS',MS.name(XINFO,'AIP_SYS'),1,,MS.comment(XINFO,'AIP_SYS'));
_xls.define('AIP_URL',MS.name(XINFO,'AIP_URL'),1,,MS.comment(XINFO,'AIP_URL'));
_xls.define('AIP_USR',MS.name(XINFO,'AIP_USR'),1,,MS.comment(XINFO,'AIP_USR'));
_xls.define('AIP_PASS',MS.name(XINFO,'AIP_PASS'),1,,MS.comment(XINFO,'AIP_PASS'));
_xls.define('NA_IDO', MS.name(XINFO,'NA_IDO'), 1,,MS.comment(XINFO,'NA_IDO'));
_xls.define('IM_IDO', MS.name(XINFO,'IM_IDO'), 1,,MS.comment(XINFO,'IM_IDO'));
_xls.define('EM_IDO', MS.name(XINFO,'EM_IDO'), 1,,MS.comment(XINFO,'EM_IDO'));
~~


\aip_ido_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,XINFO);

: wartości stałych do zapisania
_buf.AIP_SYS.VALUE:=XINFO.AIP_SYS;
_buf.AIP_URL.VALUE:=XINFO.AIP_URL;
_buf.AIP_USR.VALUE:=XINFO.AIP_USR;
_buf.AIP_PASS.VALUE:=XINFO.AIP_PASS;
_buf.NA_IDO.VALUE:=XINFO.NA_IDO;
_buf.IM_IDO.VALUE:=XINFO.IM_IDO;
_buf.EM_IDO.VALUE:=XINFO.EM_IDO;

1


\aip_ido_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.AIP_SYS<>'' | _buf.AIP_URL<>'' | _buf.AIP_USR<>'' | _buf.AIP_PASS<>''
   || {? _buf.AIP_SYS='' || 'AIP_SYS'
      |? _buf.AIP_URL='' || 'AIP_URL'
      |? _buf.AIP_USR='' || 'AIP_USR'
      |? _buf.AIP_PASS='' || 'AIP_PASS'
      || ''
      ?}
   || ''
   ?};
{? _fld<>''
:  ostrzeżenie
|| _val.msg_empty(_fld)
?};

: ostrzeżenia
_fld:=spli_str('AIP_SYS,AIP_URL,AIP_USR,AIP_PASS,NA_IDO,IM_IDO,EM_IDO',',');
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   _max:=MS.fld_len(XINFO,_acr);
   {? ($('+_a.%1>_b'[_acr]))(_buf,_max)
   || _val.msg_length(_acr,_max);
      ($('_a.%1:=_b+_a.%1'[_acr]))(_buf,_max)
   ?}
!};
obj_del(_fld);

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]"
);

~~


\aip_ido_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
XINFO.AIP_SYS:=_buf.AIP_SYS;
XINFO.AIP_URL:=_buf.AIP_URL;
XINFO.AIP_USR:=_buf.AIP_USR;
XINFO.AIP_PASS:=_buf.AIP_PASS;
XINFO.NA_IDO:=_buf.NA_IDO;
XINFO.IM_IDO:=_buf.IM_IDO;
XINFO.EM_IDO:=_buf.EM_IDO;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,XINFO,
   'AIP_SYS','AIP_URL','AIP_USR','AIP_PASS','NA_IDO','IM_IDO','EM_IDO'
);
~~


\ppk_pus_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('daty_zmian','#stalesys',,
   KST_PPK,
      'LAT_MIN','LAT_WYM','LAT_MAX','ZAW_UM','WZN_OKR','WZN_DN','WZN_MS',
      'SK_PF','SK_MAXDF','SK_DOMDF','SK_MINPU','SK_MAXPU','SK_MAXDU',
      'WMW',
      'PWP_DOM','PWP_WSZ','PWP_NUD','PWP_UKW',
      'LICZ_OD','UST_OD',
      'SK_UWDF','SK_FORMF',
      'PPKEMAIL',
      'DWT_OKR'
);
exec('daty_zmian','#stalesys',_TAB,
   KST_PPK,
      'PRZEJ_DO','POP_ZAW'
);
_TAB


\ppk_pus_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\ppk_pus_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\ppk_pus_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_tNUMBER:=type_of(0);
_tSTRING:=type_of('');
_tDATE:=type_of(date());

_xls.define('LAT_MIN', MS.name(KST_PPK,'LAT_MIN'), 1,,MS.comment(KST_PPK,'LAT_MIN'), _tNUMBER,0);
_xls.define('LAT_WYM', MS.name(KST_PPK,'LAT_WYM'), 1,,MS.comment(KST_PPK,'LAT_WYM'), _tNUMBER,0);
_xls.define('LAT_MAX', MS.name(KST_PPK,'LAT_MAX'), 1,,MS.comment(KST_PPK,'LAT_MAX'), _tNUMBER,0);

_xls.define('ZAW_UM',  MS.name(KST_PPK,'ZAW_UM'),  1,,MS.comment(KST_PPK,'ZAW_UM'),  _tNUMBER,0);

_xls.define('WZN_OKR', MS.name(KST_PPK,'WZN_OKR'), 1,,MS.comment(KST_PPK,'WZN_OKR'), _tNUMBER,0);
_xls.define('WZN_DN',  MS.name(KST_PPK,'WZN_DN'),  1,,MS.comment(KST_PPK,'WZN_DN'),  _tNUMBER,0);
_xls.define('WZN_MS',  MS.name(KST_PPK,'WZN_MS'),  1,,MS.comment(KST_PPK,'WZN_MS'),  _tNUMBER,0);

_xls.define('SK_PF',   MS.name(KST_PPK,'SK_PF'),   1,,MS.comment(KST_PPK,'SK_PF'),   _tNUMBER,2);
_xls.define('SK_MAXDF',MS.name(KST_PPK,'SK_MAXDF'),1,,MS.comment(KST_PPK,'SK_MAXDF'),_tNUMBER,2);
_xls.define('SK_DOMDF',MS.name(KST_PPK,'SK_DOMDF'),1,,MS.comment(KST_PPK,'SK_DOMDF'),_tNUMBER,2);
_xls.define('SK_MINPU',MS.name(KST_PPK,'SK_MINPU'),1,,MS.comment(KST_PPK,'SK_MINPU'),_tNUMBER,2);
_xls.define('SK_MAXPU',MS.name(KST_PPK,'SK_MAXPU'),1,,MS.comment(KST_PPK,'SK_MAXPU'),_tNUMBER,2);
_xls.define('SK_MAXDU',MS.name(KST_PPK,'SK_MAXDU'),1,,MS.comment(KST_PPK,'SK_MAXDU'),_tNUMBER,2);

_xls.define('WMW',     MS.name(KST_PPK,'WMW'),     1,,MS.comment(KST_PPK,'WMW'),     _tNUMBER,2);

_xls.define('PWP_DOM', MS.name(KST_PPK,'PWP_DOM'), 1,,MS.comment(KST_PPK,'PWP_DOM'), _tSTRING);
_xls.define('PWP_WSZ', MS.name(KST_PPK,'PWP_WSZ'), 1,,MS.comment(KST_PPK,'PWP_WSZ'), _tSTRING);
_xls.define('PWP_NUD', MS.name(KST_PPK,'PWP_NUD'), 1,,MS.comment(KST_PPK,'PWP_NUD'), _tSTRING);
_xls.define('PWP_UKW', MS.name(KST_PPK,'PWP_UKW'), 1,,MS.comment(KST_PPK,'PWP_UKW'), _tSTRING);

_xls.define('LICZ_OD', MS.name(KST_PPK,'LICZ_OD'), 1,,MS.comment(KST_PPK,'LICZ_OD'), _tDATE);
_xls.define('UST_OD',  MS.name(KST_PPK,'UST_OD'),  1,,MS.comment(KST_PPK,'UST_OD'),  _tDATE);

_xls.define('SK_UWDF', MS.name(KST_PPK,'SK_UWDF'), 1,,MS.comment(KST_PPK,'SK_UWDF'), _tSTRING);
_xls.define('SK_FORMF',MS.name(KST_PPK,'SK_FORMF'),1,,MS.comment(KST_PPK,'SK_FORMF'),_tSTRING);

_xls.define('PPKEMAIL',MS.name(KST_PPK,'PPKEMAIL'),1,,MS.comment(KST_PPK,'PPKEMAIL'),_tSTRING);

_xls.define('POD_WMW', MS.name(KST_PPK,'POD_WMW'), 1,,MS.comment(KST_PPK,'POD_WMW'), _tSTRING);
_xls.define('D_PRZWPL',MS.name(KST_PPK,'D_PRZWPL'),1,,MS.comment(KST_PPK,'D_PRZWPL'),_tNUMBER,0);

_xls.define('DWT_OKR', MS.name(KST_PPK,'DWT_OKR'), 1,,MS.comment(KST_PPK,'DWT_OKR'), _tNUMBER,0);

_xls.define('PRZEJ_DO',  MS.name(KST_PPK,'PRZEJ_DO'),  1,,MS.comment(KST_PPK,'PRZEJ_DO'),  _tDATE);

_xls.define('POP_ZAW', MS.name(KST_PPK,'POP_ZAW'), 1,,MS.comment(KST_PPK,'POP_ZAW'), _tNUMBER,0);

~~


\ppk_pus_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,KST_PPK);

: wartości stałych do zapisania
_buf.LAT_MIN.VALUE:=KST_PPK.LAT_MIN;
_buf.LAT_WYM.VALUE:=KST_PPK.LAT_WYM;
_buf.LAT_MAX.VALUE:=KST_PPK.LAT_MAX;

_buf.ZAW_UM.VALUE:=KST_PPK.ZAW_UM;

_buf.WZN_OKR.VALUE:=KST_PPK.WZN_OKR;
_buf.WZN_DN.VALUE:=KST_PPK.WZN_DN;
_buf.WZN_MS.VALUE:=KST_PPK.WZN_MS;

_buf.SK_PF.VALUE:=KST_PPK.SK_PF;
_buf.SK_MAXDF.VALUE:=KST_PPK.SK_MAXDF;
_buf.SK_DOMDF.VALUE:=KST_PPK.SK_DOMDF;
_buf.SK_MINPU.VALUE:=KST_PPK.SK_MINPU;
_buf.SK_MAXPU.VALUE:=KST_PPK.SK_MAXPU;
_buf.SK_MAXDU.VALUE:=KST_PPK.SK_MAXDU;

_buf.WMW.VALUE:=KST_PPK.WMW;

_buf.PWP_DOM.VALUE:=KST_PPK.PWP_DOM;
_buf.PWP_WSZ.VALUE:=KST_PPK.PWP_WSZ;
_buf.PWP_NUD.VALUE:=KST_PPK.PWP_NUD;
_buf.PWP_UKW.VALUE:=KST_PPK.PWP_UKW;

_buf.LICZ_OD.VALUE:=KST_PPK.LICZ_OD;
_buf.UST_OD.VALUE:=KST_PPK.UST_OD;

_buf.SK_UWDF.VALUE:=KST_PPK.SK_UWDF;
_buf.SK_FORMF.VALUE:={? KST_PPK.SK_UWDF='O' || KST_PPK.SK_FORMF || '' ?};

_buf.PPKEMAIL.VALUE:=KST_PPK.PPKEMAIL;
_buf.POD_WMW.VALUE:=KST_PPK.POD_WMW;
_buf.D_PRZWPL.VALUE:=KST_PPK.D_PRZWPL;

_buf.DWT_OKR.VALUE:=KST_PPK.DWT_OKR;

_buf.PRZEJ_DO.VALUE:=KST_PPK.PRZEJ_DO;

_buf.POP_ZAW.VALUE:=KST_PPK.POP_ZAW;

1


\ppk_pus_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

_d0:=date(0,0,0);
: wychwyć braki
_fld:=
   {? _buf.LAT_MIN=0  || 'LAT_MIN'
   |? _buf.LAT_WYM=0  || 'LAT_WYM'
   |? _buf.LAT_MAX=0  || 'LAT_MAX'

   |? _buf.WZN_OKR=0  || 'WZN_OKR'
   |? _buf.WZN_DN=0   || 'WZN_DN'
   |? _buf.WZN_MS=0   || 'WZN_MS'

   |? _buf.SK_PF=0    || 'SK_PF'
   |? _buf.SK_MAXDF=0 || 'SK_MAXDF'
   |? _buf.SK_MINPU=0 || 'SK_MINPU'
   |? _buf.SK_MAXPU=0 || 'SK_MAXPU'
   |? _buf.SK_MAXDU=0 || 'SK_MAXDU'

   |? _buf.WMW=0      || 'WMW'

   |? _buf.PWP_DOM='' || 'PWP_DOM'
   |? _buf.PWP_WSZ='' || 'PWP_WSZ'
   |? _buf.PWP_NUD='' || 'PWP_NUD'
   |? _buf.PWP_UKW='' || 'PWP_UKW'
:: Warunek usunięty z uwagi na konieczność importu danych wzorcowych bez określonej daty objęcia przez ustawę:
::   |? _buf.UST_OD=_d0 || 'UST_OD'

   |? _buf.SK_UWDF='' || 'SK_UWDF'

   |? _buf.PPKEMAIL='' || 'PPKEMAIL'

   || ''
   ?};
:: pomijamy sprawdzanie jeśli to jest wiersz zerowy
{? _fld<>'' & _buf.DATE<>_d0
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};
{? _buf.SK_UWDF='O' & _buf.SK_FORMF=''
|| _val.msg_empty('SK_FORMF');
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? _buf.LAT_WYM<_buf.LAT_MIN
|| _val.msg_value('LAT_WYM',
      'Wartość "%1" nie może być mniejsza od wartości "%2" (%3).'
      [MS.name(KST_PPK,'LAT_WYM'),MS.name(KST_PPK,'LAT_MIN'),$_buf.LAT_MIN]
   );
   _val.RESULT:=0;
   return()
?};
{? _buf.LAT_MAX<_buf.LAT_WYM
|| _val.msg_value('LAT_MAX',
      'Wartość "%1" nie może być mniejsza od wartości "%2" (%3).'
      [MS.name(KST_PPK,'LAT_MAX'),MS.name(KST_PPK,'LAT_WYM'),$_buf.LAT_WYM]
   );
   _val.RESULT:=0;
   return()
?};
:: pomijamy sprawdzanie jeśli to jest wiersz zerowy
{? (_buf.WZN_MS<1 | _buf.WZN_MS>12) & _buf.DATE<>_d0
|| _val.msg_range('WZN_MS',1,12);
   _val.RESULT:=0;
   return()
?};
_od:=date(,_buf.WZN_MS,1)~3;
_do:=date(,_buf.WZN_MS,0)~3;
:: pomijamy sprawdzanie jeśli to jest wiersz zerowy
{? (_buf.WZN_DN<_od | _buf.WZN_DN>_do) & _buf.DATE<>_d0
|| _val.msg_range('WZN_DN',_od,_do);
   _val.RESULT:=0;
   return()
?};
{? _buf.UST_OD<>date(2019,7,1) &
   _buf.UST_OD<>date(2020,1,1) &
   _buf.UST_OD<>date(2020,7,1) &
   _buf.UST_OD<>date(2021,1,1) &
   _buf.UST_OD<>_d0
|| _val.msg_value('UST_OD','Data niezgodna z ustawą.');
   _val.RESULT:=0;
   return()
?};
{? _buf.WMW<0
|| _val.msg_range('WMW',0);
   _val.RESULT:=0;
   return()
?};

_afld:=spli_str('SK_PF,SK_MAXDF,SK_MAXPU,SK_MAXDU',',');
{! _lp:=1 .. obj_len(_afld)
|! _acr:=_afld[_lp];
   _value:=($('_a.%1' [_acr]))(_buf);
   {? _value<0 | _value>100
   || _val.msg_range(_acr,0,100);
      _val.RESULT:=0;
      return()
   ?}
!};
obj_del(_afld);

{? _buf.SK_DOMDF<0 | _buf.SK_DOMDF>_buf.SK_MAXDF
|| _val.msg_range('SK_DOMDF',0,_buf.SK_MAXDF);
   _val.RESULT:=0;
   return()
?};
{? _buf.SK_MINPU<0 | _buf.SK_MINPU>_buf.SK_MAXPU
|| _val.msg_range('SK_MINPU',0,_buf.SK_MAXPU);
   _val.RESULT:=0;
   return()
?};

_afld:=spli_str('PWP_DOM,PWP_WSZ,PWP_NUD,PWP_UKW',',');
{! _lp:=1 .. obj_len(_afld)
|! _acr:=_afld[_lp];
   _value:=($('_a.%1' [_acr]))(_buf);
   {? _value<>'T' & _value<>'N'
   || _val.msg_inset(_acr,'T','N');
      _val.RESULT:=0;
      return()
   ?}
!};
obj_del(_afld);

{? _buf.PPKEMAIL<>'P' & _buf.PPKEMAIL<>'S'
|| _val.msg_inset('PPKEMAIL','P','S');
   _val.RESULT:=0;
   return()
?};

{? _buf.DWT_OKR<0
|| _val.msg_range('DWT_OKR',0);
   _val.RESULT:=0;
   return()
?};

{? _buf.POP_ZAW<0
|| _val.msg_range('POP_ZAW',0);
   _val.RESULT:=0;
   return()
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]"
);

~~


\ppk_pus_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

KST_PPK.LAT_MIN:=_buf.LAT_MIN;
KST_PPK.LAT_WYM:=_buf.LAT_WYM;
KST_PPK.LAT_MAX:=_buf.LAT_MAX;

KST_PPK.ZAW_UM:=_buf.ZAW_UM;

KST_PPK.WZN_OKR:=_buf.WZN_OKR;
KST_PPK.WZN_DN:=_buf.WZN_DN;
KST_PPK.WZN_MS:=_buf.WZN_MS;

KST_PPK.SK_PF:=_buf.SK_PF;
KST_PPK.SK_MAXDF:=_buf.SK_MAXDF;
KST_PPK.SK_DOMDF:=_buf.SK_DOMDF;
KST_PPK.SK_MINPU:=_buf.SK_MINPU;
KST_PPK.SK_MAXPU:=_buf.SK_MAXPU;
KST_PPK.SK_MAXDU:=_buf.SK_MAXDU;

KST_PPK.WMW:=_buf.WMW;

KST_PPK.PWP_DOM:=_buf.PWP_DOM;
KST_PPK.PWP_WSZ:=_buf.PWP_WSZ;
KST_PPK.PWP_NUD:=_buf.PWP_NUD;
KST_PPK.PWP_UKW:=_buf.PWP_UKW;

KST_PPK.LICZ_OD:=_buf.LICZ_OD;
KST_PPK.UST_OD:=_buf.UST_OD;

KST_PPK.SK_UWDF:=_buf.SK_UWDF;
KST_PPK.SK_FORMF:=_buf.SK_FORMF;

KST_PPK.PPKEMAIL:=_buf.PPKEMAIL;

KST_PPK.POD_WMW:=_buf.POD_WMW;
KST_PPK.D_PRZWPL:=_buf.D_PRZWPL;

KST_PPK.DWT_OKR:=_buf.DWT_OKR;

KST_PPK.PRZEJ_DO:=_buf.PRZEJ_DO;

KST_PPK.POP_ZAW:=_buf.POP_ZAW;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,
   KST_PPK,
      'LAT_MIN','LAT_WYM','LAT_MAX','ZAW_UM','WZN_OKR','WZN_DN','WZN_MS',
      'SK_PF','SK_MAXDF','SK_DOMDF','SK_MINPU','SK_MAXPU','SK_MAXDU',
      'WMW',
      'PWP_DOM','PWP_WSZ','PWP_NUD','PWP_UKW',
      'LICZ_OD','UST_OD',
      'SK_UWDF','SK_FORMF',
      'PPKEMAIL'
);

exec('zapisz','#stalesys',_date,
   KST_PPK,
      'POD_WMW','D_PRZWPL',
      'DWT_OKR',
      'PRZEJ_DO','POP_ZAW'
);

~~


\ter_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
exec('daty_zmian','#stalesys',,XINFO,
   'TER_AKT','TER_URL','TER_USR','TER_PASS','TER_KNT'
)


\ter_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\ter_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\ter_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('TER_AKT',MS.name(XINFO,'TER_AKT'),1,,MS.comment(XINFO,'TER_AKT'));
_xls.define('TER_URL',MS.name(XINFO,'TER_URL'),1,,MS.comment(XINFO,'TER_URL'));
_xls.define('TER_USR',MS.name(XINFO,'TER_USR'),1,,MS.comment(XINFO,'TER_USR'));
_xls.define('TER_PASS',MS.name(XINFO,'TER_PASS'),1,,MS.comment(XINFO,'TER_PASS'));
_xls.define('TER_KNT',MS.name(XINFO,'TER_KNT'),1,,MS.comment(XINFO,'TER_KNT'));
~~


\ter_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,XINFO);

: wartości stałych do zapisania
_buf.TER_AKT.VALUE:=XINFO.TER_AKT;
_buf.TER_URL.VALUE:=XINFO.TER_URL;
_buf.TER_USR.VALUE:=XINFO.TER_USR;
_buf.TER_PASS.VALUE:=XINFO.TER_PASS;
_buf.TER_KNT.VALUE:=XINFO.TER_KNT;

1


\ter_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.TER_AKT<>'' | _buf.TER_URL<>'' | _buf.TER_USR<>'' | _buf.TER_PASS<>'' | _buf.TER_KNT<>''
   || {? _buf.TER_AKT='' || 'TER_AKT'
      |? _buf.TER_URL='' || 'TER_URL'
      |? _buf.TER_USR='' || 'TER_USR'
      |? _buf.TER_PASS='' || 'TER_PASS'
      |? _buf.TER_KNT='' || 'TER_KNT'
      || ''
      ?}
   || ''
   ?};
{? _fld<>''
:  ostrzeżenie
|| _val.msg_empty(_fld)
?};

: ostrzeżenia
_fld:=spli_str('TER_AKT,TER_URL,TER_USR,TER_PASS,TER_KNT',',');
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   _max:=MS.fld_len(XINFO,_acr);
   {? ($('+_a.%1>_b'[_acr]))(_buf,_max)
   || _val.msg_length(_acr,_max);
      ($('_a.%1:=_b+_a.%1'[_acr]))(_buf,_max)
   ?}
!};
obj_del(_fld);

{? _buf.TER_AKT<>'N' & _buf.TER_AKT<>'T'
:  ostrzeżenie
|| _val.msg_inset('TER_AKT','T','N')
?};

{? _buf.TER_KNT<>'N' & _buf.TER_KNT<>'T'
:  ostrzeżenie
|| _val.msg_inset('TER_KNT','T','N')
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]"
);

~~


\ter_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
XINFO.TER_AKT:=_buf.TER_AKT;
XINFO.TER_URL:=_buf.TER_URL;
XINFO.TER_USR:=_buf.TER_USR;
XINFO.TER_PASS:=_buf.TER_PASS;
XINFO.TER_KNT:=_buf.TER_KNT;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,XINFO,
   'TER_AKT','TER_URL','TER_USR','TER_PASS','TER_KNT'
);
~~


\outlook_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wybranych stałych systemu (kolumna DATE).
::   WE: _a [INTEGER] - tryb wykonywania formuły
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
exec('daty_zmian','#stalesys',,XINFO,
   'OUT_FIRM','OUT_WYB','OUT_EDIT','OUT_OCR'
)


\outlook_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Prolog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\outlook_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Epilog iteracji po tabeli zawierającej daty zmian wybranych stałych systemu.
::   WE: _a [OBJECT] - środowisko uruchomienia i parametry wykonywanej formuły
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\outlook_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Definicja kolumn akrusza Excel.
::   WE: _a [OBJECT] - obiekt definiujący pola
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_xls:=_a;

_xls.define('OUT_FIRM',MS.name(XINFO,'OUT_FIRM'),1,,MS.comment(XINFO,'OUT_FIRM'));
_xls.define('OUT_WYB',MS.name(XINFO,'OUT_WYB'),1,,MS.comment(XINFO,'OUT_WYB'));
_xls.define('OUT_EDIT',MS.name(XINFO,'OUT_EDIT'),1,,MS.comment(XINFO,'OUT_EDIT'));
_xls.define('OUT_OCR',MS.name(XINFO,'OUT_OCR'),1,,MS.comment(XINFO,'OUT_OCR'));
~~


\outlook_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Wypełnia tablicę wartościami, które będą zapisane w arkuszu Excel.
::       Użycie: export
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól
::       _c [DATA] - data, na którą mają być ustalone wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;
_date:=_c;

: niezbędne podczytanie wartości stałych
exec('czytaj','#stalesys',_date,XINFO);

: wartości stałych do zapisania
_buf.OUT_FIRM.VALUE:=XINFO.OUT_FIRM;
_buf.OUT_WYB.VALUE:=XINFO.OUT_WYB;
_buf.OUT_EDIT.VALUE:=XINFO.OUT_EDIT;
_buf.OUT_OCR.VALUE:=XINFO.OUT_OCR;

1


\outlook_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć braki
_fld:=
   {? _buf.OUT_FIRM<>'' | _buf.OUT_WYB<>'' | _buf.OUT_EDIT<>'' | _buf.OUT_OCR<>''
   || {? _buf.OUT_FIRM='' || 'OUT_FIRM'
      |? _buf.OUT_WYB='' || 'OUT_WYB'
      |? _buf.OUT_EDIT='' || 'OUT_EDIT'
      |? _buf.OUT_OCR='' || 'OUT_OCR'
      || ''
      ?}
   || ''
   ?};
{? _fld<>''
:  ostrzeżenie
|| _val.msg_empty(_fld)
?};

: ostrzeżenia
_fld:=spli_str('OUT_FIRM,OUT_WYB,OUT_EDIT,OUT_OCR',',');
{! _ii:=1..obj_len(_fld)
|! _acr:=_fld[_ii];
   _max:=MS.fld_len(XINFO,_acr);
   {? ($('+_a.%1>_b'[_acr]))(_buf,_max)
   || _val.msg_length(_acr,_max);
      ($('_a.%1:=_b+_a.%1'[_acr]))(_buf,_max)
   ?}
!};
obj_del(_fld);

{? _buf.OUT_WYB<>'T' & _buf.OUT_WYB<>'N'
:  ostrzeżenie
|| _val.msg_inset('OUT_WYB','T','N');
   _val.RESULT:=0;
   return()
?};

{? _buf.OUT_EDIT<>'T' & _buf.OUT_EDIT<>'N'
:  ostrzeżenie
|| _val.msg_inset('OUT_EDIT','T','N');
   _val.RESULT:=0;
   return()
?};

{? _buf.OUT_OCR<>'T' & _buf.OUT_OCR<>'N'
:  ostrzeżenie
|| _val.msg_inset('OUT_OCR','T','N');
   _val.RESULT:=0;
   return()
?};

VAR_DEL.delete('WYN','FIR','WAR');
WYN:=0;
FIR:=_buf.OUT_FIRM;
WAR:='';
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.for_each("{? FIRMA.A='T' || WAR+=FIRMA.APP_IDEN +', ' ?}; {? FIR=FIRMA.APP_IDEN & FIRMA.A='T' || WYN:=1 ?}");
{? ~WYN
|| _val.msg_inset('OUT_FIRM',WAR);
   _val.RESULT:=0;
   FIRMA.cntx_pop();
   return()
?};
VAR_DEL.delete('WYN','FIR','WAR');
FIRMA.cntx_pop();

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',null,
   "'%1'[$_a.DATE]"
);

~~


\outlook_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Tworzy lub modyfikuje stałych na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące (ignorowany)
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [DATA/null] - data, na którą mają być zapisane wartości pól
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_date:=_d;

: ustaw wartości stałych
XINFO.OUT_FIRM:=_buf.OUT_FIRM;
XINFO.OUT_WYB:=_buf.OUT_WYB;
XINFO.OUT_EDIT:=_buf.OUT_EDIT;
XINFO.OUT_OCR:=_buf.OUT_OCR;

: zapisz zmianę stałych z właściwą datą
exec('zapisz','#stalesys',_date,XINFO,
   'OUT_FIRM','OUT_WYB','OUT_EDIT','OUT_OCR'
);
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 5ea0dd9a66bc9671cd5a7a2a9147d5802bad1bdaa34ae904ad8feabffbe6b223123bbb8cee918f2b17c13783e8f58661c012209f8a3f3474ec30977ed6cc2806188195524b1e29f1dc4a4db23e8dac462979f3fe5048dadd0b71332a1156126c5a4dbab8d276d7f525636b2d0dc70de503ea0c8faec4350d2370b9723d879f91
