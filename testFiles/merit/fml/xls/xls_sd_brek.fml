:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_sd_brek.fml
:: Utworzony: 11.03.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu konfiguracji
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='SD_BREK';
_def.FUNPAR:='ZWS_PAR_ASDZ';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_sd_zes_xlsx','xls__init');
_def.SHEET:='Dziedziny zestawów=1,1';
_def.NAME:='Dziedziny zestawów danych'@;
_def.DESC:='Dziedziny zestawów danych';
_def.ADD_ROWS:=0;
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="SD_BREK";

: prolog
_def.BEFORE:="
   SD_BREK.cntx_psh();
   SD_BREK.f_clear();
   SD_BREK.index('KOD');
   SD_BREK.prefix();
   SD_WREK.cntx_psh();
   SD_WREK.index('KOD');
   SD_WREK.prefix();
   ~~
";

: epilog
_def.AFTER:="
   SD_BREK.cntx_pop();
   SD_WREK.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('SYSTEM',  MS.name(SD_BREK,'SYSTEM'),0,,  MS.comment(SD_BREK,'SYSTEM'));
   _env.define('KOD',     MS.name(SD_BREK,'KOD'),0,,     MS.comment(SD_BREK,'KOD'));
   _env.define('SD_WREK', MS.name(SD_BREK,'SD_WREK'),0,, MS.comment(SD_BREK,'SD_WREK'),type_of(''));
   _env.define('B_DOMAIN',MS.name(SD_BREK,'B_DOMAIN'),0,,MS.comment(SD_BREK,'B_DOMAIN'),type_of(''));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.SYSTEM.VALUE:=SD_BREK.SYSTEM;
   _buf.KOD.VALUE:=SD_BREK.KOD;
   _buf.SD_WREK.VALUE:=SD_BREK.SD_WREK().KOD;
   _buf.B_DOMAIN.VALUE:=SD_BREK.B_DOMAIN().SYMBOL;
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_sd_brek',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_sd_brek',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.SYSTEM=''   || 'SYSTEM'
   |? _buf.KOD=''      || 'KOD'
   |? _buf.SD_WREK=''  || 'SD_WREK'
   |? _buf.B_DOMAIN='' || 'B_DOMAIN'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

:: błędne wartości
{? ('TN'*(1+_buf.SYSTEM))=0
|| _val.msg_inset('SYSTEM','T','N');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(SD_BREK,'SYSTEM');
{? +_buf.SYSTEM>_max
|| _val.msg_length('SYSTEM',_max);
   _buf.SYSTEM:=_max+_buf.SYSTEM
?};
_max:=MS.fld_len(SD_BREK,'KOD');
{? +_buf.KOD>_max
|| _val.msg_length('KOD',_max);
   _buf.KOD:=_max+_buf.KOD
?};
_max:=MS.fld_len(SD_WREK,'KOD');
{? +_buf.SD_WREK>_max
|| _val.msg_length('SD_WREK',_max);
   _buf.SD_WREK:=_max+_buf.SD_WREK
?};
_max:=MS.fld_len(B_DOMAIN,'SYMBOL');
{? +_buf.B_DOMAIN>_max
|| _val.msg_length('B_DOMAIN',_max);
   _buf.B_DOMAIN:=_max+_buf.B_DOMAIN
?};

: weryfikacja spójności referencyjnej
_rek:=null;
{? SD_WREK.find_key(_buf.SD_WREK,)
|| _rek:=SD_WREK.ref()
|| _val.msg_norec('SD_WREK');
   _val.RESULT:=0;
   return()
?};

_dom:=exec('domain_ref','#b_domain',_buf.B_DOMAIN);
{? _dom=null
|| _val.msg_norec('B_DOMAIN');
   _val.RESULT:=0;
   return()
?};

_ref:=null;
{? (SD_BREK.index('KOD'); SD_BREK.find_key(_buf.KOD)) |
   (SD_BREK.index('UNIQUE'); SD_BREK.find_key(_dom,_rek))
|| _ref:=SD_BREK.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1 - %2'[_a.SD_WREK,_a.B_DOMAIN]",
   'SD_WREK',_rek,
   'B_DOMAIN',_dom
);
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,SD_BREK,"
   _a.SYSTEM:=_b.SYSTEM;
   _a.KOD:=_b.KOD;
   _a.SD_WREK:=_c.SD_WREK;
   _a.B_DOMAIN:=_c.B_DOMAIN;
   ~~
");
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:12 9167ef0a2e3adfa70e037dc3fc7023bfc281ef71c108e377705e8478afd8f3ab746bb1273e94b805bb41830d79088f050d90ac486526a80be184fcc15908705630a664182143f8cc81f8b51d2dac4b69d77a1c326d9cc23d41fd7800029e2075d62de9e1496f5b04bf06f0359c5996fce98f02877c65e8a83284d1041fc3915d
