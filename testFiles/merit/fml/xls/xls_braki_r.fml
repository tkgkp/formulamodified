:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_braki_r.fml
:: Utworzony: 04.05.2022
:: Autor: AKUL
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu rodzajów braków
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='BRAKI_R';
_def.DOMAIN:=exec('name','#b_domain','TTE');
_def.FUNPAR:='ZWS_PAR_TRBR';

_def.FILE:='produkcja.xlsx';
_def.SHEET:='Rodzaje braków'@+'=1,1';
_def.NAME:='Rodzaje braków'@;
_def.DESC:='Rodzaje braków'@;

_def.PREFIX:="BRAKI_R.index('KOD'); BRAKI_R.prefix()";
_def.TABLE:="BRAKI_R";
_def.FIELDS:="exec('fields','xls_braki_r',_a)";

_def.BEFORE:="BRAKI_R.cntx_psh()";
_def.AFTER:="BRAKI_R.cntx_pop()";
_def.SELECT:="exec('select','xls_braki_r',_a)";

_def.EXPORT:="exec('export','xls_braki_r',_a,_b)";
_def.VALIDATE:="exec('validate','xls_braki_r',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_braki_r',_a,_b,_c)";
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('KOD','Kod'@,0,,'Kod (max. 20 znaków)'@);
_def.define('OPIS','Opis'@,1,,'Opis (max. 60 znaków)'@);
~~


\record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
BRAKI_R.prefix();
{? _validate.ACTION='add'
|| BRAKI_R.blank()
?};
BRAKI_R.KOD:=_obj.KOD;
BRAKI_R.OPIS:=_obj.OPIS;
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.KOD.VALUE:=BRAKI_R.KOD;
_table.OPIS.VALUE:=BRAKI_R.OPIS;

:: Powiązane operacje
::BRAKI_RO.cntx_psh();
::BRAKI_RO.index('BRAKI_R');
::BRAKI_RO.prefix(BRAKI_R.ref());
::{? BRAKI_RO.first()
::|| {!
::   |? _excel.write_async('BRAKI_RO',BRAKI_RO.ref());
::      BRAKI_RO.next()
::   !}
::?};
::BRAKI_ROTPF.cntx_pop();

_result


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;

:: Błędy
{? +_obj.OPIS>60
|| _result.msg_length('OPIS',60);
   _result.RESULT:=0
?};
{? +_obj.KOD>20
|| _result.msg_length('KOD',20);
   _result.RESULT:=0
?};

:: OK
{? _result.RESULT>0
|| BRAKI_R.index('KOD');
   BRAKI_R.prefix(_obj.KOD,);
   {? BRAKI_R.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record','xls_braki_r',_obj,_mode,_result);
         {? exec('braki_r_chk','braki',1)<>''
         || _result.RESULT:=0
         ?}
      ?}
   || _result.ACTION:='add';
      exec('record','xls_braki_r',_obj,_mode,_result);
      {? exec('braki_r_chk','braki',0)<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=BRAKI_R.add(1)
   |? _validate.ACTION='put'
   || _result:=BRAKI_R.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie rodzaju braku o kodzie %1 nie powiodło się.'@[$_obj.KOD]
   || _validate.MSG:='Poprawa rodzaju braku o kodzie %1 nie powiodła się.'@[$_obj.KOD]
   ?}
?};
_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,
   'KOD','STRING[20]','Kod'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'OPIS','STRING[30]','Opis'
);
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,);

BRAKI_R.cntx_psh();
BRAKI_R.index('KOD');
BRAKI_R.prefix();
{? BRAKI_R.first()
|| {!
   |?  _tab.blank();
       _tab.REF:=$BRAKI_R.ref();
       _selected.prefix($BRAKI_R.ref());
       {? _selected.first()
       || _tab.SELECTED:='T'
       || _tab.SELECTED:='N'
       ?};
       _tab.KOD:=BRAKI_R.KOD;
       _tab.OPIS:=BRAKI_R.OPIS;
       _tab.add();
       BRAKI_R.next()
   !}
?};
_result:=exec('select_action','#table',_tab,'KOD,OPIS',20,'Wybór rodzajów braków do eksportu'@);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |? _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
BRAKI_R.cntx_pop();
_result

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:41 0d1edf87c86391c04cfe30a71da602631bab14c232c265fdc69879db76de5cb41d5df31dc9f9dc661efb5ab20fbb45f1a8b42be4d5404b720398d884978878abe3886495bbc20ae425481c676b5383adc9b0e2e89308a94dc0535ac4f7c7f808666e5143c22d7d5ef41d30f31af5ebe3f7501d9dc1f104a00d4e93bed9b73d60
