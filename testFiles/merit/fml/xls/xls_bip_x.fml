:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_bip_x.fml
:: Utworzony: 29.09.2020
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu konfiguracji
::======================================================================================================================


\_kat_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [STRING] - kod funkcjonalności
::       _c [STRING] - lista kolumn
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;
_fun:=_b;
_col:=_c;

: źródło danych
_def.TABLE:="BIPKAT";

: prolog i epilog
_def.BEFORE:=$('exec(\'_kat_beg\',\'xls_bip_x\',\'%1\')'[_fun]);
_def.AFTER:=$('exec(\'_kat_end\',\'xls_bip_x\')');

: definicja kolumn
_def.FIELDS:=$('exec(\'_kat_col\',\'xls_bip_x\',_a,\'%1\')'[_col]);

: zawartość wiersza
_def.EXPORT:=$('exec(\'_kat_exp\',\'xls_bip_x\',_a,_b)');

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:=$('exec(\'_kat_val\',\'xls_bip_x\',_a,_b,_c)');
_def.IMPORT:=$('exec(\'_kat_imp\',\'xls_bip_x\',_a,_b,_c,\'%1\')'[_fun]);
~~


\_kat_beg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed rozpoczęcien eksportu/importu danych tabeli BIPKAT.
::   WE: _a [STRING] - kod funkcjonalności
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_fun:=_a;

BIPKAT.cntx_psh();
BIPKAT.index('KOD');
BIPKAT.prefix(exec('ref_firma','ustawienia'),_fun,);
ETYPY.cntx_psh();
ETYPY.prefix();
~~


\_kat_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po zakończeniu eksportu/importu danych tabeli BIPKAT.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ETYPY.cntx_pop();
BIPKAT.cntx_pop();
~~


\_kat_col
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Definicja kolumn w pliku wymiany danych dla tabeli BIPKAT.
::   WE: _a [OBJECT] - wskazanie środowiska
::       _b [STRING] - lista kolumn
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_env:=_a;
_col:=spli_str(_b,',');
_len:=obj_len(_col);

{! _ii:=1.._len
|! _acr:=_col[_ii];
   _dtn:=type_of('');
:: Zakładamy, że ewentualne pola relacyjne również wysyłamy jako napisy.
   {? var_pres(_acr,BIPKAT)=22
   || _dtn:=type_of(0)
   ?};
   _lab:=MS.name(BIPKAT,_acr);
   _com:=MS.comment(BIPKAT,_acr);
   _env.define(_acr,_lab,0,,_com,_dtn,0)
!};
~~


\_kat_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Ustawia wartości w polach bufora danych i asynchronicznie zapisuje powiązane dane.
::   WE: _a [OBJECT] - wskazanie obiektu środowiska
::       _b [OBJECT] - wskazanie bufora danych
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;

_len:=BIPKAT.fld_num();
{! _ii:=1.._len
|! _acr:=BIPKAT.fld_acr(_ii);
   {? var_pres(_acr,_buf)>100
   || {? _acr='WNIOSEK'
      || _buf.WNIOSEK.VALUE:=BIPKAT.WNIOSEK().NAZWA;
         _env.write_async('ETYPY_WP',BIPKAT.WNIOSEK)
      || ($'_a.%1.VALUE:=BIPKAT.%1'[_acr])(_buf)
      ?}
   ?}
!};
1


\_kat_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne (brak wymaganych informacji)
{? _val.chk_fld(_buf,'KOD','NAZWA')<>''
:  katastrofa
|| return()
?};

: ostrzeżenia
_len:=BIPKAT.fld_num();
{! _ii:=1.._len
|! _acr:=BIPKAT.fld_acr(_ii);
   {? var_pres(_acr,_buf)=2
   || _max:=0;
      {? _acr='WNIOSEK'
      || _max:=MS.fld_len(ETYPY,'ID_WP')
      |? var_pres(_acr,BIPKAT)=27
      || _max:=MS.fld_len(BIPKAT,_acr)
      ?};
      {? _max>0
      || {? ($'+_a.%1>_b'[_acr])(_buf,_max)
         || _val.msg_length(_acr,_max);
            ($'_a.%1:=_b+_a.%1'[_acr])(_buf,_max)
         ?}
      ?}
   ?}
!};

_ref:=null();
{? BIPKAT.find_key(_buf.KOD,)
|| _ref:=BIPKAT.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

_wniosek:=null();
{? var_pres('WNIOSEK',_buf)=2 & _buf.WNIOSEK<>''
|| ETYPY.cntx_psh();
   ETYPY.index('UNIK_WP');
   ETYPY.prefix(exec('bl_typ','obiegi',2),'T',);
   {? ETYPY.find_key(_buf.WNIOSEK,)
   || _wniosek:=ETYPY.ref()
   ?};
   ETYPY.cntx_pop();
   {? _wniosek=null()
   || _val.msg_value('WNIOSEK','Brak definicji wniosku "%1".'@ [_buf.WNIOSEK]);
      _val.RESULT:=0;
      return()
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1 - %2'[_a.KOD,_a.NAZWA]",
   'WNIOSEK',_wniosek
);
~~


\_kat_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::       _d [STRING] - kod funkcjonalności
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_fun:=_d;

_fml:="_a.FIRMA:=exec('ref_firma','ustawienia');";
_fml+='_a.FUNKC:=\'%1\';'[_fun];
_len:=BIPKAT.fld_num();
{! _ii:=1.._len
|! _acr:=BIPKAT.fld_acr(_ii);
   {? var_pres(_acr,_buf)>0
   || {? _acr='WNIOSEK'
      || _fml+='_a.%1:=_c.%1;'[_acr]
      || _fml+='_a.%1:=_b.%1;'[_acr]
      ?}
   ?}
!};
_fml+="~~";

exec('write','xls__util',_buf,_mod,_val,BIPKAT,$_fml);
~~


\pwdk_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_PWDK';
_def.FUNPAR:='ZWS_PAR_PWDK';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Kategorie wydarzeń=1,1';
_def.NAME:='Kategorie wydarzeń'@;
_def.DESC:='Kategorie wydarzeń';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

:: ustaw parametry eksportu/importu danych
exec('_kat_ini','xls_bip_x',_def,'WDRZ','KOD,NAZWA,POW_MAIL,POW_LIST,POW_PUSH,SYSTEM');
~~


\pbwk_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_PBWK';
_def.FUNPAR:='ZWS_PAR_PBWK';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Kategorie element. bazy wiedzy=1,1';
_def.NAME:='Kategorie element. bazy wiedzy'@;
_def.DESC:='Kategorie element. bazy wiedzy';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

:: ustaw parametry eksportu/importu danych
exec('_kat_ini','xls_bip_x',_def,'WIEDZA','KOD,NAZWA,IKONA,OPIS,WNIOSEK,SAMOUCZ,POW_LIST,POW_PUSH,SYSTEM');
~~


\pblk_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNAl
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_PBLK';
_def.FUNPAR:='ZWS_PAR_PBLK';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Kategorie biuletynów=1,1';
_def.NAME:='Kategorie biuletynów'@;
_def.DESC:='Kategorie biuletynów';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

:: ustaw parametry eksportu/importu danych
exec('_kat_ini','xls_bip_x',_def,'BLTN','KOD,NAZWA,IKONA,OPIS,POW_LIST,POW_PUSH,SYSTEM');
~~


\pkdr_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNAl
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_PKDR';
_def.FUNPAR:='ZWS_PAR_PKDR';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Kategorie pytań do działu kadr=1,1';
_def.NAME:='Kategorie pytań do działu kadr'@;
_def.DESC:='Kategorie pytań do działu kadr';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

:: ustaw parametry eksportu/importu danych
exec('_kat_ini','xls_bip_x',_def,'KDR','KOD,NAZWA,SYSTEM');
~~


\pulp_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNAl
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_PULP';
_def.FUNPAR:='ZWS_PAR_PULP';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Kategorie ulepszeń=1,1';
_def.NAME:='Kategorie ulepszeń'@;
_def.DESC:='Kategorie ulepszeń';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

:: ustaw parametry eksportu/importu danych
exec('_kat_ini','xls_bip_x',_def,'ULP','KOD,NAZWA,IKONA,OPIS,SYSTEM');
~~


\pogl_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNAl
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_POGL';
_def.FUNPAR:='ZWS_PAR_POGL';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Kategorie ogłoszeń=1,1';
_def.NAME:='Kategorie ogłoszeń'@;
_def.DESC:='Kategorie ogłoszeń';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

:: ustaw parametry eksportu/importu danych
exec('_kat_ini','xls_bip_x',_def,'OGL','KOD,NAZWA,IKONA,OPIS,SYSTEM');
~~


\pbkn_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNAl
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_PBKN';
_def.FUNPAR:='ZWS_PAR_PBKN';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Kategorie dokumentów=1,1';
_def.NAME:='Kategorie dokumentów'@;
_def.DESC:='Kategorie dokumentów';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

:: ustaw parametry eksportu/importu danych
exec('_kat_ini','xls_bip_x',_def,'ZAL','KOD,NAZWA,IKONA,OPIS,POW_LIST,POW_PUSH,SYSTEM');
~~


\bipksn_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_KSN';
_def.FUNPAR:='ZWS_PAR_PBKN';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Typy załączników dla kategorii=1,1';
_def.NAME:='Typy załączników dla kategorii'@;
_def.DESC:='Typy załączników dla kategorii';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

: źródło danych
_def.TABLE:="BIPKSN";

: prolog
_def.BEFORE:="
   _firma:=exec('ref_firma','ustawienia');
   BIPKAT.cntx_psh();
   BIPKAT.index('KOD');
   BIPKAT.prefix(_firma);
   BIPKSN.cntx_psh();
   {? _a.is_export()
   || BIPKSN.index('VIEW')
   || BIPKSN.index('UNIQUE')
   ?};
   BIPKSN.prefix(_firma);
   SLO_NAZ.cntx_psh();
   SLO_NAZ.index('NAZWA');
   ZAL_KOM.cntx_psh();
   ZAL_KOM.index('TYP');
   ZAL_KOM.prefix();
   ~~
";

: epilog
_def.AFTER:="
   ZAL_KOM.cntx_pop();
   SLO_NAZ.cntx_pop();
   BIPKSN.cntx_pop();
   BIPKAT.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('FUNKC',  MS.name(BIPKSN,'FUNKC'),0,,  MS.comment(BIPKSN,'FUNKC'));
   _env.define('BIPKAT', MS.name(BIPKSN,'BIPKAT'),0,, MS.comment(BIPKSN,'BIPKAT'));
   _env.define('SLO_NAZ',MS.name(BIPKSN,'SLO_NAZ'),0,,MS.comment(BIPKSN,'SLO_NAZ'));
:: Komunikat
   _env.define('ZGODA','Potwierdzenie',1,,'Pobranie załacznika wymaga potwierdzenia [T/N]');
   _env.define('CZW',MS.name(ZAL_KOM,'CZW'),1,,'J - Jednokrotnie / K - każdorazowo');
   _env.define('TEXT',MS.name(ZAL_KOM,'TEXT'),1,,MS.comment(ZAL_KOM,'TEXT'));

   ~~
";

: zawartość wiersza
_def.EXPORT:="exec('bipksn_exp','xls_bip_x',_a,_b)";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('bipksn_val','xls_bip_x',_a,_b,_c)";
_def.IMPORT:="exec('bipksn_imp','xls_bip_x',_a,_b,_c)";
~~


\bipksn_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Ustawia wartości w polach bufora danych i asynchronicznie zapisuje powiązane dane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;

BIPKSN.BIPKAT();
_buf.FUNKC.VALUE:=BIPKAT.FUNKC;
_buf.BIPKAT.VALUE:=BIPKAT.KOD;
_buf.SLO_NAZ.VALUE:=BIPKSN.SLO_NAZ().NAZWA;
{? ZAL_KOM.find_key(SLO_NAZ.ref())
|| _buf.ZGODA.VALUE:=ZAL_KOM.ZGODA;
   _buf.CZW.VALUE:=ZAL_KOM.CZW;
   _buf.TEXT.VALUE:=ZAL_KOM.memo_txt(,1,'TEXT')
?};

:: zapisz wymagane wymagane złączenia
_env.write_async('BIP_PBKN',BIPKSN.BIPKAT);
_env.write_async('SLO_NAZ',BIPKSN.SLO_NAZ);
1


\bipksn_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne (brak wymaganych informacji)
{? _val.chk_fld(_buf,'FUNKC','BIPKAT','SLO_NAZ')<>''
:  katastrofa
|| return()
?};

_kom:=0;
{? _buf.ZGODA='T' | _buf.ZGODA='N'
|| _kom+=1
|? _buf.ZGODA<>''
|| _val.msg_inset('ZGODA','T','N');
   _val.RESULT:=0;
   return()
?};
{? _buf.CZW='J' | _buf.CZW='K'
|| _kom+=1
|? _buf.CZW<>''
|| _val.msg_inset('CZW','J','K');
   _val.RESULT:=0;
   return()
?};
{? +_buf.TEXT
|| _kom+=1
?};
{? _kom>0 & _kom<3
|| {? _buf.ZGODA=''
   || _val.msg_empty('ZGODA')
   |? _buf.CZW=''
   || _val.msg_empty('CZW')
   |? _buf.TEXT
   || _val.msg_empty('TEXT')
   ?};
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(BIPKAT,'FUNKC');
{? +_buf.FUNKC>_max
|| _val.msg_length('FUNKC',_max);
   _buf.FUNKC:=_max+_buf.FUNKC
?};
_max:=MS.fld_len(BIPKAT,'KOD');
{? +_buf.BIPKAT>_max
|| _val.msg_length('BIPKAT',_max);
   _buf.BIPKAT:=_max+_buf.BIPKAT
?};
_max:=MS.fld_len(SLO_NAZ,'NAZWA');
{? +_buf.SLO_NAZ>_max
|| _val.msg_length('SLO_NAZ',_max);
   _buf.SLO_NAZ:=_max+_buf.SLO_NAZ
?};

: weryfikacja spójności referencyjnej
_kat:=null;
{? BIPKAT.find_key(_buf.FUNKC,_buf.BIPKAT,)
|| _kat:=BIPKAT.ref()
|| _val.msg_norec('BIPKAT');
   _val.RESULT:=0;
   return()
?};
_slo:=null;
exec('slo_typ_bipksn','portal_bip');
SLO_NAZ.prefix(exec('slo_typ','ext_slo',EDIT_VAR.SLO_TYP));
{? SLO_NAZ.find_key(_buf.SLO_NAZ,)
|| _slo:=SLO_NAZ.ref()
|| _val.msg_norec('SLO_NAZ');
   _val.RESULT:=0;
   return()
?};

_ref:=null;
{? BIPKSN.find_key(_buf.FUNKC,_slo)
|| _ref:=BIPKSN.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1, %2'[_a.BIPKAT,_a.SLO_NAZ]",
   'KAT_REF',_kat,
   'SLO_REF',_slo
);
~~


\bipksn_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,BIPKSN,"
   _a.BIPKAT:=_c.KAT_REF;
   _a.SLO_NAZ:=_c.SLO_REF;
   ~~
",,"
   _buf:=_a;
   _obj:=_b;
   {? _buf.ZGODA<>'' & _buf.CZW<>'' & _buf.TEXT<>''
   || _ret:=0;
      BIPKSN.SLO_NAZ();
      {? ~(_put:=ZAL_KOM.find_key(SLO_NAZ.ref()))
      || ZAL_KOM.blank()
      ?};
      _zmiana:=0;
      {? ZAL_KOM.ZGODA<>_buf.ZGODA
      || ZAL_KOM.ZGODA:=_buf.ZGODA;
         _zmiana+=1
      ?};
      {? ZAL_KOM.CZW<>_buf.CZW
      || ZAL_KOM.CZW:=_buf.CZW;
         _zmiana+=1
      ?};
      {? ~_put
      || ZAL_KOM.add()
      |? _zmiana
      || ZAL_KOM.put()
      ?};
      {? ZAL_KOM.memo_txt(0,1,'TEXT')<>_buf.TEXT
      || ZAL_KOM.memo_set(_buf.TEXT,'TEXT') ;
         ZAL_KOM.memo_put(,'TEXT')
      ?}
   ?};
   1
"
);
~~


\ptoc_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_def:=_a;

_def.ID:='BIP_PTOC';
_def.FUNPAR:='ZWS_PAR_PTOC';
_def.DOMAIN:=exec('name','#b_domain','POR');
_def.FILE:=exec('def_portal_xlsx','xls__init');
_def.SHEET:='Typy oceny=1,1';
_def.NAME:='Typy oceny'@;
_def.DESC:='Typy oceny';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';

: źródło danych
_def.TABLE:="ZZ_TYP";

: prolog
_def.BEFORE:="
   ZZ_TYP.cntx_psh();
   ZZ_TYP.index('KOD');
   ZZ_TYP.prefix();
   ~~
";

: epilog
_def.AFTER:="
   ZZ_TYP.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('TYP',   MS.name(ZZ_TYP,'TYP'),0,,   MS.comment(ZZ_TYP,'TYP'));
   _env.define('KOD',   MS.name(ZZ_TYP,'KOD'),0,,   MS.comment(ZZ_TYP,'KOD'));
   _env.define('NAZWA', MS.name(ZZ_TYP,'NAZWA'),0,, MS.comment(ZZ_TYP,'NAZWA'));
   _env.define('SYSTEM',MS.name(ZZ_TYP,'SYSTEM'),0,,MS.comment(ZZ_TYP,'SYSTEM'));
   _env.define('WAGA',  MS.name(ZZ_TYP,'WAGA'),0,,  MS.comment(ZZ_TYP,'WAGA'),type_of(0),0);
   ~~
";

: zawartość wiersza
_def.EXPORT:="exec('ptoc_exp','xls_bip_x',_a,_b)";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('ptoc_val','xls_bip_x',_a,_b,_c)";
_def.IMPORT:="exec('ptoc_imp','xls_bip_x',_a,_b,_c)";
~~


\ptoc_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Ustawia wartości w polach bufora danych i asynchronicznie zapisuje powiązane dane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;

_buf.TYP.VALUE:=ZZ_TYP.TYP;
_buf.KOD.VALUE:=ZZ_TYP.KOD;
_buf.NAZWA.VALUE:=ZZ_TYP.NAZWA;
_buf.SYSTEM.VALUE:=ZZ_TYP.SYSTEM;
_buf.WAGA.VALUE:=ZZ_TYP.WAGA;
1


\ptoc_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne (brak wymaganych informacji)
{? _val.chk_fld(_buf,'TYP','KOD','NAZWA','SYSTEM')<>''
:  katastrofa
|| return()
?};

:: błędne wartości
{? ('TN'*(1+_buf.SYSTEM))=0
|| _val.msg_inset('SYSTEM','T','N');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(ZZ_TYP,'TYP');
{? +_buf.TYP>_max
|| _val.msg_length('TYP',_max);
   _buf.TYP:=_max+_buf.TYP
?};
_max:=MS.fld_len(ZZ_TYP,'KOD');
{? +_buf.KOD>_max
|| _val.msg_length('KOD',_max);
   _buf.KOD:=_max+_buf.KOD
?};
_max:=MS.fld_len(ZZ_TYP,'NAZWA');
{? +_buf.NAZWA>_max
|| _val.msg_length('NAZWA',_max);
   _buf.NAZWA:=_max+_buf.NAZWA
?};
_max:=MS.fld_len(ZZ_TYP,'SYSTEM');
{? +_buf.SYSTEM>_max
|| _val.msg_length('SYSTEM',_max);
   _buf.SYSTEM:=_max+_buf.SYSTEM
?};

_ref:=null;
{? ZZ_TYP.find_key(_buf.TYP,_buf.KOD,)
|| _ref:=ZZ_TYP.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1, %2 - %3'[_a.TYP,_a.KOD,_a.NAZWA]"
);
~~


\ptoc_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,ZZ_TYP,"
   _a.TYP:=_b.TYP;
   _a.KOD:=_b.KOD;
   _a.NAZWA:=_b.NAZWA;
   _a.SYSTEM:=_b.SYSTEM;
   _a.WAGA:=_b.WAGA;
   ~~
");
~~

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:41 d00c0e9c3734602805cba299eeb8770b0cd88f3d0bcb4137d4d81ca1acbe7ecd616d84b4ddfdb94e5fa4e3d8c195e73e3f3cf2817a75f9f935251850339461277a02b7ac7f4db239136cec205e4948fe701b9c8e53f96c7b1f9387e09fcd68bf1b3255c1e86700e0bc4f6f52736ff2272c209baa42694adee2e8839f10f7c3ff
