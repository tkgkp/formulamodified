:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_sql.fml
:: Utworzony: 23.07.2018
:: Autor: MB
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu zapytań SQL
::======================================================================================================================


\filename
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Nazwa pliku do eksportu zapytań SQL
::   WE: _a - dziedzina
::----------------------------------------------------------------------------------------------------------------------
-_a+'_sql.xlsx'


\funpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Identyfikator na drzewie ustawień i parametryzacji
::   WE: _a - obszar
::----------------------------------------------------------------------------------------------------------------------
{? _a='PKD'
|| 'ZWA_PAR_OSQL'
|? _a='PPL'
|| 'ZWA_PAR_PSQL'
|? _a='ZWS'
|| 'ZWS_PRJ_SQL'
|| 'ZWS_'+_a+'_SQL'
?}


\sql
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Dodaje definicjie tabel do eksportu/importi do/z excela
::   WE: _a - środowisko
::       _b - nazwa  obszaru
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_env.init($('exec(\'TAB_SQL\',\'xls_sql\',_a,\''+_b+'\')'));
_env.init($('exec(\'TAB_SQLK\',\'xls_sql\',_a,\''+_b+'\')'));
_env.init($('exec(\'TAB_SQLP\',\'xls_sql\',_a,\''+_b+'\')'));
_env.init($('exec(\'Z_DRILL\',\'xls_sql\',_a,\''+_b+'\')'));
~~


\TAB_SQL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obszar
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAB_SQL_'+_b;
_def.DOMAIN:=exec('name','#b_domain',_b);
_def.FUNPAR:=exec('funpar','xls_sql',_b);
_def.FILE:=exec('filename','xls_sql',_b);
_def.SHEET:='Zapytania SQL=1,1';
_def.NAME:='Zapytania SQL '+(-exec('name','#b_domain',_b));
_def.DESC:='Zapytania SQL'+(-exec('name','#b_domain',_b));
_def.MULTIFIR:='T';

_def.PREFIX:="TAB_SQL.prefix()";
_def.TABLE:=$('{? _b=0 || exec(\'TAB_SQL_tab\',\'xls_sql\',_a,\''+_b+'\') || ~~ ?}');
_def.FIELDS:="exec('TAB_SQL_fld','xls_sql',_a)";

_def.BEFORE:=$('exec(\'sql_adm\',\'#sql\',\''+_b+'\',1);TAB_SQL.cntx_psh()');
_def.AFTER:=$('TAB_SQL.cntx_pop(); exec(\'sql_adm\',\'#sql\',\''+_b+'\',2)');
_def.SELECT:=$('exec(\'TAB_SQL_select\',\'xls_sql\',_a,\''+_b+'\')');

_def.EXPORT:="exec('TAB_SQL_exp','xls_sql',_a,_b)";
_def.VALIDATE:="exec('TAB_SQL_valid','xls_sql',_a,_b,_c)";
_def.IMPORT:="exec('TAB_SQL_imp','xls_sql',_a,_b,_c)";
~~


\TAB_SQL_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Zwraca tabele do eksportu zapytań SQL
::   WE: _a - typ pracy
::       _b - obszar
::----------------------------------------------------------------------------------------------------------------------
{? var_press('TAB_SQL')<=0
|| exec('sql_adm','#sql',_b,1)
?};
TAB_SQL


\TAB_SQL_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('OBSZAR','Obszar funkcjonalny',1,,'20 nazwa obszaru funkcjonalnego');
_def.define('NAZ','Nazwa  zapytania',1,,'75 znakowa nazwa');
_def.define('FILENAME','Nazwa pliku',1,,'25 znakowa nazwa pliku SQL');
_def.define('BSQL','Formuła przed',1,,'128 znakowa formuła przed');
_def.define('ASQL','Formuła po',1,,'128 znakowa formuła po');
_def.define('RSQL','Formuła na rekord przed',1,,'128 znakowa formuła na rekord przed');
_def.define('DRILL','Drążenie',1,,'1 znakowy znacznik cz można drążyć w dół: T-tak, N-nie');
_def.define('DOM_GRUP','Domyślne grupowanie',1,,'50 znakowa informacja o polach w domyślnym grupowaniu');
_def.define('STD','Standard',1,,'1 znakowy znacznik czy zapytanie standardowe: T-tak, N-nie');
_def.define('SQL','Zapytanie SQL',1,,'Treść zapytania SQL',type_of(''));
~~


\TAB_SQL_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - dziedzina
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
BPMN.SYM_DOM:=_b;

_result:=0;

_tab:=tab_tmp(3,
   'OBSZAR','STRING[20]','Obszar funkcjonalny',
   'NAZ','STRING[75]','Nazwa',
   'FILENAME','STRING[25]','Nazwa pliku',
   'REF','STRING[16]','ref',
   'SELECTED','STRING[1]','sel'
);

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'OBSZAR',,,'NAZ',,);

exec('cr_tab','#sql');

TAB_SQL.prefix();
{? TAB_SQL.first()
|| {!
   |? _tab.blank(1);
      _tab.OBSZAR:=TAB_SQL.OBSZAR;
      _tab.NAZ:=TAB_SQL.NAZ;
      _tab.FILENAME:=TAB_SQL.FILENAME;
      _tab.REF:=$#TAB_SQL.ref();
      _tab.SELECTED:={? _selected.find_key(_tab.REF,) || 'T' || 'N' ?};
      _tab.add();
      TAB_SQL.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'OBSZAR[8],NAZ[60],FILENAME[25]',10,'Wybór zapytań SQL do eksportu',1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |? _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
exec('sql_adm','#sql',_b,2);
VAR_DEL.delete('TAB_SQL','TAB_SQLP','RAB_SQLP');
_result


\TAB_SQL_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.OBSZAR.VALUE:=TAB_SQL.OBSZAR;
_table.NAZ.VALUE:=TAB_SQL.NAZ;
_table.FILENAME.VALUE:=TAB_SQL.FILENAME;
_table.BSQL.VALUE:=TAB_SQL.BSQL;
_table.ASQL.VALUE:=TAB_SQL.ASQL;
_table.RSQL.VALUE:=TAB_SQL.RSQL;
_table.DRILL.VALUE:=TAB_SQL.DRILL;
_table.DOM_GRUP.VALUE:=TAB_SQL.DOM_GRUP;
_table.STD.VALUE:=TAB_SQL.STD;
_table.SQL.VALUE:=exec('get_sql','#sql');

TAB_SQLK.cntx_psh();
TAB_SQLK.prefix(TAB_SQL.FILENAME,);
{? TAB_SQLK.first()
|| {!
   |? _excel.write_async('TAB_SQLK_'+BPMN.SYM_DOM,TAB_SQLK.ref());
      TAB_SQLK.next()
   !}
?};
TAB_SQLK.cntx_pop();
TAB_SQLP.cntx_psh();
TAB_SQLP.prefix(TAB_SQL.FILENAME,);
{? TAB_SQLP.first()
|| {!
   |? _excel.write_async('TAB_SQLP_'+BPMN.SYM_DOM,TAB_SQLP.ref());
      TAB_SQLP.next()
   !}
?};
TAB_SQLP.cntx_pop();
Z_DRILL.cntx_psh();
Z_DRILL.prefix(TAB_SQL.FILENAME,);
{? Z_DRILL.first()
|| {!
   |? _excel.write_async('Z_DRILL_'+BPMN.SYM_DOM,Z_DRILL.ref());
      Z_DRILL.next()
   !}
?};
Z_DRILL.cntx_pop();
_result


\TAB_SQL_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.OBSZAR='' || _fld:='OBSZAR'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld); return()
|? 'TN'*_table.DRILL=0
|| _result.msg_inset('DRILL','T','N'); return()
|? 'TN'*_table.STD=0
|| _result.msg_inset('STD','T','N'); return()
?};
{? var_press('TAB_OBSZ')<=0 || exec('cr_obsz','sql') ?};
{? ~TAB_OBSZ.find_key(_table.OBSZAR,)
|| _result.msg_norec('OBSZAR'); return()
?};
TAB_SQL.prefix(_table.OBSZAR,_table.NAZ,);
{? TAB_SQL.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.ACTION='add' || TAB_SQL.blank(1) ?};
TAB_SQL.OBSZAR:=_table.OBSZAR;
TAB_SQL.NAZ:=_table.NAZ;
TAB_SQL.FILENAME:=_table.FILENAME;
TAB_SQL.BSQL:=_table.BSQL;
TAB_SQL.ASQL:=_table.ASQL;
TAB_SQL.RSQL:=_table.RSQL;
TAB_SQL.DRILL:=_table.DRILL;
TAB_SQL.DOM_GRUP:=_table.DOM_GRUP;
TAB_SQL.STD:=_table.STD;
{? exec('chk_sql','#sql',{? _result.ACTION='add' || 'a' || 'e' ?})=''
|| _result.RESULT:=1
?};
~~


\TAB_SQL_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAB_SQL.add(1)
   |? _validate.ACTION='put'
   || _result:=TAB_SQL.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie zapytania SQL: %1 nie powiodło się.'[_table.NAZ]
   || _validate.MSG:='Poprawa zapytania SQL: %1 nie powiodła się.'[_table.NAZ]
   ?}
|| SaveSql:=1;
   exec('set_sql','#sql',_table.SQL)
?};
_result


\TAB_SQLK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAB_SQLK_'+_b;
_def.DOMAIN:=exec('name','#b_domain',_b);
_def.FUNPAR:=exec('funpar','xls_sql',_b);
_def.FILE:=exec('filename','xls_sql',_b);
_def.SHEET:='Parametry zapytań SQL=1,1';
_def.NAME:='Parametry zapytań SQL';
_def.DESC:='Parametry zapytań SQL';
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

_def.PREFIX:="TAB_SQLK.prefix()";
_def.TABLE:="{? _b=0 || TAB_SQLK || ~~ ?}";
_def.FIELDS:="exec('TAB_SQLK_fld','xls_sql',_a)";

_def.BEFORE:=$('exec(\'sql_adm\',\'#sql\',\''+_b+'\',1);TAB_SQLK.cntx_psh()');
_def.AFTER:=$(
   'TAB_SQLK.cntx_pop();'
   '{? _a.is_import() || exec(\'save_par\',\'#sql\') ?};'
   'exec(\'sql_adm\',\'#sql\',\''+_b+'\',2)'
);
_def.SELECT:="";

_def.EXPORT:="exec('TAB_SQLK_exp','xls_sql',_a,_b)";
_def.VALIDATE:="exec('TAB_SQLK_valid','xls_sql',_a,_b,_c)";
_def.IMPORT:="exec('TAB_SQLK_imp','xls_sql',_a,_b,_c)";
~~


\TAB_SQLK_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('FILENAME','Nazwa pliku SQL',1,,'25 znakowa nazwa pliku SQL');
_def.define('NR','Numer parametru',1,,'Numer parametru');
_def.define('NAZ','Nazwa',1,,'60 znakowa nazwa parametru');
_def.define('RODZ','Rodzaj',1,,
   'Rodzaj','1 znkowy rodzaj parametru:\n'
   'S - string\n'
   'I - integer\n'
   'R - real\n'
   'D - date\n'
   'F - formuła'
);
_def.define('DL_PR','Długość/precyzja',1,,'Długość/precyzja');
_def.define('WZ','Wzorzec',1,,'128 znakowa formuła na wzorzec');
_def.define('DV','Wartość poczatkowa',1,,'128 znakowa formuła na wartość początkowa');
_def.define('BD','Przed wyświetleniem',1,,'128 znakowa formuła na przed wyświetleniem');
_def.define('BE','Przed redagowaniem',1,,'128 znakowa formuła na przed redagowaniem');
_def.define('F3','Klawisz F3',1,,'128 znakowa formuła na klawisz F3');
_def.define('AE','Po redagowaniu',1,,'128 znakowa formuła na po redagowaniu');

~~


\TAB_SQLK_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.FILENAME.VALUE:=TAB_SQLK.FILENAME;
_table.NR.VALUE:=TAB_SQLK.NR;
_table.NAZ.VALUE:=TAB_SQLK.NAZ;
_table.RODZ.VALUE:=TAB_SQLK.RODZ;
_table.DL_PR.VALUE:=TAB_SQLK.DL_PR;
_table.WZ.VALUE:=TAB_SQLK.WZ;
_table.DV.VALUE:=TAB_SQLK.DV;
_table.BD.VALUE:=TAB_SQLK.BD;
_table.BE.VALUE:=TAB_SQLK.BE;
_table.F3.VALUE:=TAB_SQLK.F3;
_table.AE.VALUE:=TAB_SQLK.AE;
_result


\TAB_SQLK_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.FILENAME='' || _fld:='FILENAME'
|? _table.NAZ='' || _fld:='NAZ'
|? _table.RODZ='' || _fld:='RODZ'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld); return()
|? 'SIRDF'*_table.RODZ=0
|| _result.msg_inset('RODZ','S','I','R','D','F'); return()
?};
TAB_SQL.cntx_psh();
TAB_SQL.index(TAB_SQL2); TAB_SQL.prefix(_table.FILENAME,);
_jest:=TAB_SQL.first();
TAB_SQL.cntx_pop();
{? ~_jest
|| _result.msg_norec('FILENAME'); return()
?};
TAB_SQLK.prefix(_table.FILENAME,_table.NR);
{? TAB_SQLK.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _table.NR>1
|| TAB_SQLK.cntx_psh();
   TAB_SQLK.prefix(_table.FILENAME,_table.NR-1);
   _brak:=~TAB_SQLK.first();
   TAB_SQLK.cntx_pop();
   {? _brak
   || _result.MSG:='Dodanie parametru numer: %1 nie jest możliwe. Brak parametru o numerze: %2.'@[$_table.NR,$(_table.NR-1)];
      return()
   ?}
?};
_crc:=TAB_SQLK.crc();
{? _result.ACTION='add' || TAB_SQLK.blank(1) ?};
TAB_SQLK.FILENAME:=_table.FILENAME;
TAB_SQLK.NR:=_table.NR;
TAB_SQLK.NAZ:=_table.NAZ;
TAB_SQLK.RODZ:=_table.RODZ;
TAB_SQLK.DL_PR:=_table.DL_PR;
TAB_SQLK.WZ:=_table.WZ;
TAB_SQLK.DV:=_table.DV;
TAB_SQLK.BD:=_table.BD;
TAB_SQLK.BE:=_table.BE;
TAB_SQLK.F3:=_table.F3;
TAB_SQLK.AE:=_table.AE;
{? exec('chk_par','#sql',_result.ACTION='add')=''
|| _result.RESULT:=1;
   {? _result.ACTION='add' | _crc<>TAB_SQLK.crc()
   || SqlVar.mpar:='.m'
   ?}
?};
~~


\TAB_SQLK_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAB_SQLK.add(1)
   |? _validate.ACTION='put'
   || _result:=TAB_SQLK.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie parametru zapytania SQL nie powiodło się.'@
   || _validate.MSG:='Poprawa parametru zapytania SQL nie powiodła się.'@
   ?}
?};
_result


\TAB_SQLP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - dziedzina
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAB_SQLP_'+_b;
_def.DOMAIN:=exec('name','#b_domain',_b);
_def.FILE:=exec('filename','xls_sql',_b);
_def.FUNPAR:=exec('funpar','xls_sql',_b);
_def.SHEET:='Wartości zapytania SQL=1,1';
_def.NAME:='Wartości zapytania SQL';
_def.DESC:='Wartości zapytania SQL';
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

_def.PREFIX:="TAB_SQLP.prefix()";
_def.TABLE:="{? _b=0 || TAB_SQLP || ~~ ?}";
_def.FIELDS:="exec('TAB_SQLP_fld','xls_sql',_a)";

_def.BEFORE:=$('exec(\'sql_adm\',\'#sql\',\''+_b+'\',1);TAB_SQLP.cntx_psh()');
_def.AFTER:=$(
   'TAB_SQLP.cntx_pop();'
   '{? _a.is_import() || exec(\'save_war\',\'#sql\') ?};'
   'exec(\'sql_adm\',\'#sql\',\''+_b+'\',2)'
);
_def.SELECT:="";

_def.EXPORT:="exec('TAB_SQLP_exp','xls_sql',_a,_b)";
_def.VALIDATE:="exec('TAB_SQLP_valid','xls_sql',_a,_b,_c)";
_def.IMPORT:="exec('TAB_SQLP_imp','xls_sql',_a,_b,_c)";
~~


\TAB_SQLP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('SQL','Nazwa pliku',1,,'25 znakowa nazwa pliku zapytania');
_def.define('NR_KOL','Nr kolumny',1,,'Nr kolumny');
_def.define('PREC','Dokładność',1,,'Dokładność');
_def.define('SZER','Szerokość',1,,'Szerokość');
_def.define('SUM','Sumować',1,,'1 znakowy znacznik, czy sumować: T-tal, N-nie');
_def.define('HID','Ukryć wartość',1,,'100 znakowa ukryć wartość');
~~


\TAB_SQLP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.SQL.VALUE:=TAB_SQLP.SQL;
_table.NR_KOL.VALUE:=TAB_SQLP.NR_KOL;
_table.PREC.VALUE:=TAB_SQLP.PREC;
_table.SZER.VALUE:=TAB_SQLP.SZER;
_table.SUM.VALUE:=TAB_SQLP.SUM;
_table.HID.VALUE:=TAB_SQLP.HID;
_result


\TAB_SQLP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.SQL='' || _fld:='SQL'
|? _table.SUM='' || _fld:='SUM'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld); return()
|? 'TN'*_table.SUM=0
|| _result.msg_inset('SUM','T','T'); return()
?};
TAB_SQL.cntx_psh();
TAB_SQL.index(TAB_SQL2); TAB_SQL.prefix(_table.SQL,);
_jest:=TAB_SQL.first();
TAB_SQL.cntx_pop();
{? ~_jest
|| _result.msg_norec('SQL'); return()
?};
TAB_SQLP.prefix(_table.SQL,_table.NR_KOL);
{? TAB_SQLP.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
_crc:=TAB_SQLP.crc();
{? _result.ACTION='add' || TAB_SQLP.blank(1) ?};
TAB_SQLP.SQL:=_table.SQL;
TAB_SQLP.NR_KOL:=_table.NR_KOL;
TAB_SQLP.PREC:=_table.PREC;
TAB_SQLP.SZER:=_table.SZER;
TAB_SQLP.SUM:=_table.SUM;
TAB_SQLP.HID:=_table.HID;
{? exec('chk_wart','#sql',{? _result.ACTION='add' || 'a' || 'e' ?})=''
|| _result.RESULT:=1;
   {? _result.ACTION='add' | _crc<>TAB_SQLP.crc()
   || SqlVar.mwar:='.m'
   ?}
?};
~~


\TAB_SQLP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAB_SQLP.add(1)
   |? _validate.ACTION='put'
   || _result:=TAB_SQLP.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie wartości dla zapytania SQL nie powiodło się.'@
   || _validate.MSG:='Poprawa wartości dla zapytania SQL nie powiodła się.'@
   ?}
?};
_result


\Z_DRILL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - dziedzina
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='Z_DRILL_'+_b;
_def.DOMAIN:=exec('name','#b_domain',_b);
_def.FILE:=exec('filename','xls_sql',_b);
_def.FUNPAR:=exec('funpar','xls_sql',_b);
_def.SHEET:='Domyślne grupowanie w SQL=1,1';
_def.NAME:='Domyślne grupowanie w SQL';
_def.DESC:='Domyślne grupowanie w SQL';
_def.HIDDEN:='T';
_def.ADD_ROWS:=0;
_def.MULTIFIR:='T';

_def.PREFIX:="Z_DRILL.prefix()";
_def.TABLE:="{? _b=0 || Z_DRILL || ~~ ?}";
_def.FIELDS:="exec('Z_DRILL_fld','xls_sql',_a)";

_def.BEFORE:=$('exec(\'sql_adm\',\'#sql\',\''+_b+'\',1);Z_DRILL.cntx_psh()');
_def.AFTER:=$(
   'Z_DRILL.cntx_pop();'
   '{? _a.is_import() || exec(\'Z_DRILL_save\',\'xls_sql\',\''+_b+'\') ?};'
   'exec(\'sql_adm\',\'#sql\',\''+_b+'\',2)'
);
_def.SELECT:="";

_def.EXPORT:="exec('Z_DRILL_exp','xls_sql',_a,_b)";
_def.VALIDATE:="exec('Z_DRILL_valid','xls_sql',_a,_b,_c)";
_def.IMPORT:="exec('Z_DRILL_imp','xls_sql',_a,_b,_c)";
~~


\Z_DRILL_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('FILENAME','Nazwa pliku',0,,'25 znakowa nazwa pliku zapytania');
_def.define('W','LP',0,,'Liczba porządkowa');
_def.define('TYP','Typ',0,,'Typ');
_def.define('ZESTAW','Zestaw',0,,'50 znakowa nazwa zestawu');
_def.define('PARAMETR','Parametr',0,,'250 znakowy parametr');
~~


\Z_DRILL_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.FILENAME.VALUE:=Z_DRILL.FILENAME;
_table.W.VALUE:=Z_DRILL.W;
_table.TYP.VALUE:=Z_DRILL.TYP;
_table.ZESTAW.VALUE:=Z_DRILL.ZESTAW;
_table.PARAMETR.VALUE:=Z_DRILL.PARAMETR;
_result


\Z_DRILL_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
TAB_SQL.cntx_psh();
TAB_SQL.index(TAB_SQL2); TAB_SQL.prefix(_table.FILENAME,);
_jest:=TAB_SQL.first();
TAB_SQL.cntx_pop();
{? ~_jest
|| _result.msg_norec('FILENAME'); return()
?};
Z_DRILL.prefix(_table.FILENAME,_table.W);
{? Z_DRILL.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
_crc:=Z_DRILL.crc();
{? _result.ACTION='add' || Z_DRILL.blank(1) ?};
Z_DRILL.FILENAME:=_table.FILENAME;
Z_DRILL.W:=_table.W;
Z_DRILL.TYP:=_table.TYP;
Z_DRILL.ZESTAW:=_table.ZESTAW;
Z_DRILL.PARAMETR:=_table.PARAMETR;
_result.RESULT:=1;
~~


\Z_DRILL_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=Z_DRILL.add(1)
   |? _validate.ACTION='put'
   || _result:=Z_DRILL.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie domyślnego grupowania dla zapytania SQL nie powiodło się.'@
   || _validate.MSG:='Poprawa domyślnego grupowania dla zapytania SQL nie powiodła się.'@
   ?}
?};
_result


\Z_DRILL_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Zapisuje domyślne grupowanie zapytań SQL do plików
::   WE: _a - dziedzina
::----------------------------------------------------------------------------------------------------------------------
TAB_SQL.cntx_psh();
TAB_SQL.prefix();
{? TAB_SQL.first()
|| {!
   |? {? TAB_SQL.DRILL='T'
      || exec('drill_save','#sql',)
      ?};
      TAB_SQL.next()
   !}
?};
TAB_SQL.cntx_pop();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 de8c501e7a987f654e0d6a75b4c3c8b3983437688267e1fd6d4fab2b711428a48b914488739837178fc9e5cf94e981deb06f3be1ed0e98903cef7862739a1b646c8154a3aae4c6450faa21d730bc6c16d19475c862c37d7f598f4f0a6cec455c684534731c5f276884044d241de75dd33ffe70e4cc2acfdfb255a86dfeb2699f
