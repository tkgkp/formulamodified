:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_tacttls.fml
:: Utworzony: 12.08.2020
:: Autor: AKUL
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu narządów, przyrządów, urządzeń (NPU) kart technologicznych
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TACTTLS';
_def.DOMAIN:=exec('name','#b_domain','TTE');
_def.FUNPAR:='TKTL';
_def.HIDDEN:='T';
_def.SKIP:='T';
_def.ADD_ROWS:=0;

_def.FILE:='produkcja_technologie.xlsx';
_def.SHEET:='N-P-U'@+'=1,1';
_def.NAME:='Narzędzia, przyrządy, urządzenia'@;
_def.DESC:='Narzędzia potrzebne do wykonania operacji/ czynności'@;

_def.PREFIX:="TACTTLS.index('UNIQ'); TACTTLS.prefix()";
_def.TABLE:="TACTTLS";
_def.FIELDS:="exec('fields','xls_tacttls',_a)";

_def.BEFORE:="TACTTLS.cntx_psh()";
_def.AFTER:="{? _a.is_import() || exec('tktl_import_clear','tech_common',_a.excel) ?};TACTTLS.cntx_pop()";

_def.EXPORT:="exec('export','xls_tacttls',_a,_b)";
_def.VALIDATE:="exec('validate','xls_tacttls',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_tacttls',_a,_b,_c)";
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_edit:=0;
_def.define('TKTL_NRK','Nr karty'@,_edit);
_def.define('TKTL_WER','Wersja karty'@,_edit);
_def.define('NROP','Nr operacji'@,_edit);
_def.define('M','Narzędzie'@,_edit);
_def.define('ILE','Ilość'@,_edit,'Ilość (krotność) N-P-U',,,0);
_def.define('FILE','Formuła na ilość'@,_edit);
_def.define('ZXJM','Zużycie na XJM'@,_edit,'Zużycie na serię produktu',,,6);
_def.define('FZXJM','Formuła na zużycie na XJM'@,_edit);
_def.define('ZH','Zużycie na godzinę'@,_edit,,,,6);
_def.define('FZH','Formuła na zużycie na godzinę'@,_edit);
_def.define('EXIST','Warunek'@,_edit,'Warunek wystąpienia pozycji (formuła)');
_def.define('PFAZ','Faza produkcji'@,_edit);
_def.define('ACT','Aktualny'@,_edit,,'Znacznik aktualności elementu - [T]/[N]');
_def.define('CRE_TIME','Czas powołania elementu'@,_edit,,,type_of(''));
_def.define('OD','Obowiązuje od'@,_edit);
_def.define('USER','Zmieniał'@,_edit,,'Operator, który zmieniał element');
_def.define('CAUSE','Powód zmiany'@,_edit);
_def.define('MOD_TIME','Czas modyfikacji elementu'@,_edit,,,type_of(''));
~~


\record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
TACTTLS.prefix();
{? _validate.ACTION='add'
|| TACTTLS.blank();
   TACTTLS.NRK:=_validate.OBJ.NRK;
   TACTTLS.NROP:=_validate.OBJ.NROP;
   TACTTLS.M:=_validate.OBJ.M;
   TACTTLS.PFAZ:=_validate.OBJ.PFAZ
?};

TACTTLS.ILE:=_obj.ILE;
TACTTLS.FILE:=_obj.FILE;
TACTTLS.ZXJM:=_obj.ZXJM;
TACTTLS.FZXJM:=_obj.FZXJM;
TACTTLS.ZH:=_obj.ZH;
TACTTLS.FZH:=_obj.FZH;
TACTTLS.EXIST:=_obj.EXIST;
TACTTLS.ACT:=_obj.ACT;
TACTTLS.CRE_TIME:=#_obj.CRE_TIME;
TACTTLS.OD:=_obj.OD;
TACTTLS.USER:=_validate.OBJ.USER;
TACTTLS.CAUSE:=_validate.OBJ.CAUSE;
TACTTLS.MOD_TIME:=#_obj.MOD_TIME;
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.TKTL_NRK.VALUE:=TACTTLS.NRK().NRK;
_table.TKTL_WER.VALUE:=TACTTLS.NRK().WER;
:: Wyszukuje nowy nr operacji z tablicy mapującej
_table.NROP.VALUE:={? __TOPER_MAP.find_key(TACTTLS.NROP().UNROP)
                    || $__TOPER_MAP.NEW
                    || ''
                    ?};
_table.M.VALUE:=TACTTLS.M().KTM;
_table.ILE.VALUE:=TACTTLS.ILE;
_table.FILE.VALUE:=TACTTLS.FILE;
_table.ZXJM.VALUE:=TACTTLS.ZXJM;
_table.FZXJM.VALUE:=TACTTLS.FZXJM;
_table.ZH.VALUE:=TACTTLS.ZH;
_table.FZH.VALUE:=TACTTLS.FZH;
_table.EXIST.VALUE:=TACTTLS.EXIST;
_table.PFAZ.VALUE:=TACTTLS.PFAZ().KOD;
_table.ACT.VALUE:=TACTTLS.ACT;
_table.CRE_TIME.VALUE:=$TACTTLS.CRE_TIME;
_table.OD.VALUE:=TACTTLS.OD;
_table.USER.VALUE:=TACTTLS.USER().KOD;
_table.CAUSE.VALUE:=TACTTLS.CAUSE().NAZ;
_table.MOD_TIME.VALUE:=$TACTTLS.MOD_TIME;

_result


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('NRK','NROP','M','PFAZ','USER','CAUSE');
_imp_err:=0;
_check:=1;

:: Sprawdzam czy do karty zgłoszony został błąd
{? __TKTL_ERR.find_key(_obj.TKTL_NRK,_obj.TKTL_WER,)
|| _imp_err:=1
?};
:: Jeżeli wcześniej został zgłoszony błąd to wychodzę wcześniej bez dodatkowej walidacji
{? _imp_err>0
|| _result.RESULT:=0
||
:: Wyszukanie refów powiązanych rekordów
   _result.OBJ.NRK:={? _obj.TKTL_NRK='' | _obj.TKTL_WER=''
                    || null()
                    || exec('FindInSet','#table','TKTL','NRK',_obj.TKTL_WER,'T',,1,_obj.TKTL_NRK,null())
                    ?};
   _result.OBJ.NROP:={? _obj.NROP='' | _obj.NROP='0'
                     || null()
                     || exec('FindInSet','#table','TOPER','UNROP',#_obj.NROP,,,,,null())
                     ?};
   _result.OBJ.M:={? _obj.M=''
                  || null()
                  || exec('FindInSet','#table','M','MATKTM',_obj.M,,,1,,null())
                  ?};
   _result.OBJ.PFAZ:={? _obj.PFAZ=''
                     || null()
                     || exec('FindInSet','#table','PFAZ','KOD',_obj.PFAZ,,,1,,null())
                     ?};
   _result.OBJ.USER:={? _obj.USER=''
                     || null()
                     || exec('FindInSet','#table','USERS','USR_KKOD',_obj.USER,,,1,,null())
                     ?};
   _result.OBJ.CAUSE:={? _obj.CAUSE=''
                      || null()
                      || exec('FindInSet','#table','TTXCAUSE','NAZ',_obj.CAUSE,,,1,,null())
                      ?};
:: Ostrzeżenia
   {? _obj.USER<>'' & _result.OBJ.USER=null()
   || _result.msg_norec('USER')
   ?};
:: Błędy
   {? _result.OBJ.NRK=null()
   || _result.msg_norec('TKTL_NRK');
      _result.RESULT:=0
   ?};
   {? _obj.NROP<>'' & _obj.NROP<>'0' & _result.OBJ.NROP=null()
   || _result.msg_norec('NROP');
      _result.RESULT:=0
   ?};
   {? _obj.M<>'' & _result.OBJ.M=null()
   || _result.msg_norec('M');
      _result.RESULT:=0
   ?};
   {? _obj.PFAZ<>'' & _result.OBJ.PFAZ=null()
   || _result.msg_norec('PFAZ');
      _result.RESULT:=0
   ?};
   {? _obj.CAUSE<>'' & _result.OBJ.CAUSE=null()
   || _result.msg_norec('CAUSE');
      _result.RESULT:=0
   ?};

   {? +_obj.ACT=0 | 'TN'*_obj.ACT=0
   || _result.msg_inset('ACT','N','T');
      _result.RESULT:=0
   ?}
?};

:: OK
{? _result.RESULT>0
||
   _valid:="
      _res:=__CHK.record2(TACTTLS,,'M','EXIST');
      {? _res=''
      || {? TACTTLS.FILE<>'' || TACTTLS.ILE:=tpar.calc(TACTTLS.FILE) ?};
         {? TACTTLS.FZXJM<>'' || TACTTLS.ZXJM:=tpar.calc(TACTTLS.FZXJM) ?};
         {? TACTTLS.FZH<>'' || TACTTLS.ZH:=tpar.calc(TACTTLS.FZH) ?};
         {? TACTTLS.ILE<=0
         || FUN.emsg('Ilość musi być większa od zera.'@);
            _res:={? TACTTLS.FILE<>'' || 'FILE' || 'ILE' ?}
         |? TACTTLS.ZXJM<0
         || FUN.emsg('Zużycie nie może być ujemne.'@);
            _res:={? TACTTLS.FZXJM<>'' || 'FZXJM' || 'ZXJM' ?}
         |? TACTTLS.ZH<0
         || FUN.emsg('Zużycie nie może być ujemne.'@);
            _res:={? TACTTLS.FZH<>'' || 'FZH' || 'ZH' ?}
         ?}
      ?};
      _res
   ";
   TACTTLS.index('UNIQ');
   TACTTLS.prefix(_result.OBJ.NRK,_result.OBJ.NROP,_result.OBJ.M,_result.OBJ.PFAZ);
   {? TACTTLS.first()
   || {? _mode=0
      || _result.RESULT:=0;
         _check:=0;
         _result.MSG:='Technologia %1 (wer.%2) posiada już N-P-U \'%3\' przypisany do operacji nr %4 '
                      'i fazy produkcji %5.'@[_obj.TKTL_NRK,_obj.TKTL_WER,_obj.M,_obj.NROP,_obj.PFAZ]
      || _result.ACTION:='put';
         exec('record','xls_tacttls',_obj,_mode,_result);
         exec('start_tpar','tech_param',exec('FindAndGet','#table','TKTL',TACTTLS.NRK,,"TKTL.KTM",null()));
         {? _valid()<>''
         || _result.RESULT:=0
         ?}
      ?}
   || _result.ACTION:='add';
      exec('record','xls_tacttls',_obj,_mode,_result);
      exec('start_tpar','tech_param',exec('FindAndGet','#table','TKTL',TACTTLS.NRK,,"TKTL.KTM",null()));
      {? _valid()<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
{? _result.RESULT<=0 & _check>0 & _imp_err=0
||
:: Jak błąd to ustawiam znacznik błędu na karcie technologicznej
   {? _result.OBJ.NRK<>null()
   || TKTL.cntx_psh();
      TKTL.prefix();
      {? TKTL.seek(_result.OBJ.NRK)
      || TKTL.IMP_ERR:='T';
         TKTL.put();
         _result.MSG+='\nKarta %1 (wer. %2) oraz wszystkie jej elementy, które zostały do tej pory zaimportowane '
                      'zostaną usunięte.'@[TKTL.NRK,TKTL.WER];
::       Dodaję kartę do listy ignorowanych kart przy imporcie
         __TKTL_ERR.NRK:=_obj.TKTL_NRK;
         __TKTL_ERR.WER:=_obj.TKTL_WER;
         __TKTL_ERR.add()
      ?};
      TKTL.cntx_pop()
   ?}
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| EXCEL_ENV.ID_GRP:=$TACTTLS.NRK;
   {? _validate.ACTION='add'
   || _result:=TACTTLS.add(1)
   |? _validate.ACTION='put'
   || _result:=TACTTLS.put(1)
   ?}
|| EXCEL_ENV.ID_GRP:=''
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie N-P-U %3 do karty technologicznej %1 (%2) nie powiodło się.'@
                     [_obj.TKTL_NRK,_obj.TKTL_WER,_obj.M]
   || _validate.MSG:='Poprawa N-P-U %3 do karty technologicznej %1 (%2) nie powiodła się.'@
                     [_obj.TKTL_NRK,_obj.TKTL_WER,_obj.M]
   ?}
?};
_result

:Sign Version 2.0 jowisz:1048 2020/10/16 15:26:06 7a0f7b20eaae8a1e1b41d70eb8d39172ca735921033850929d0e97e5b81d2d747c65a868a5e8217dd35a7454653477e03beb977a5aefca370c2be5ba4212baff794c33e1bc1c9a3df6635efa69be8632d20b4235a96e22bf526b568ac61579d5cccfdd863b43e812360b021e481e5ceeab4168cbe7f97580b9e1c2f20c2c07f1
