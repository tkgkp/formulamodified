:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_sd_def.fml
:: Utworzony: 11.03.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu konfiguracji
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='SD_DEF';
_def.FUNPAR:='ZWS_PAR_ASDD';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_sd_def_xlsx','xls__init');
_def.SHEET:='Definicje szablonów=1,1';
_def.NAME:='Definicje szablonów'@;
_def.DESC:='Definicje szablonów';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="SD_DEF";

: prolog
_def.BEFORE:="
   SD_DEF.cntx_psh();
   SD_DEF.f_clear();
   {? _a.is_export()
   || SD_DEF.index('NAZWA')
   || exec('_xslo','szablon_std');
      SD_DEF.index('KOD')
   ?};
   SD_DEF.clear();
   ~~
";

: epilog
_def.AFTER:="
   SD_DEF.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('SYSTEM',  MS.name(SD_DEF,'SYSTEM'),0,,  MS.comment(SD_DEF,'SYSTEM'));
   _env.define('KOD',     MS.name(SD_DEF,'KOD'),0,,     MS.comment(SD_DEF,'KOD'));
   _env.define('SYMBOL',  MS.name(SD_DEF,'SYMBOL'),0,,  MS.comment(SD_DEF,'SYMBOL'));
   _env.define('NAZWA',   MS.name(SD_DEF,'NAZWA'),0,,   MS.comment(SD_DEF,'NAZWA'));
   _env.define('OPIS',    MS.name(SD_DEF,'OPIS'),0,,    MS.comment(SD_DEF,'OPIS'));
   _env.define('AUTOR',   MS.name(SD_DEF,'AUTOR'),0,,   MS.comment(SD_DEF,'AUTOR'));
   _env.define('GRUPA',   MS.name(SD_DEF,'GRUPA'),0,,   MS.comment(SD_DEF,'GRUPA'));
   _env.define('DOSTEPNY',MS.name(SD_DEF,'DOSTEPNY'),0,,MS.comment(SD_DEF,'DOSTEPNY'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="exec('export','xls_sd_def',_a,_b)";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_sd_def',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_sd_def',_a,_b,_c)";
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Ustawia wartości w polach bufora danych i asynchronicznie zapisuje powiązane dane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_buf:=_b;
_buf.SYSTEM.VALUE:=SD_DEF.SYSTEM;
_buf.KOD.VALUE:=SD_DEF.KOD;
_buf.SYMBOL.VALUE:=SD_DEF.SYMBOL;
_buf.NAZWA.VALUE:=SD_DEF.NAZWA;
_buf.OPIS.VALUE:=SD_DEF.memo_txt(,1,'OPIS');
_buf.AUTOR.VALUE:=SD_DEF.AUTOR;
_buf.GRUPA.VALUE:=SD_DEF.GRUPA;
_buf.DOSTEPNY.VALUE:=SD_DEF.DOSTEPNY;

:: dziedziny szablonów
SD_BDEF.cntx_psh();
SD_BDEF.index('SYM_DOM');
SD_BDEF.prefix(SD_DEF.ref());
_loop:=SD_BDEF.first();
{!
|? _loop
|! _env.write_async('SD_BDEF',SD_BDEF.ref());
   _loop:=SD_BDEF.next()
!};
SD_BDEF.cntx_pop();

:: szablony dokumentów
SD_DOK.cntx_psh();
SD_DOK.index('NAZWA');
SD_DOK.prefix(SD_DEF.ref());
_loop:=SD_DOK.first();
{!
|? _loop
|! _env.write_async('SD_DOK',SD_DOK.ref());
   _loop:=SD_DOK.next()
!};
SD_DOK.cntx_pop();

1


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.SYSTEM=''   || 'SYSTEM'
   |? _buf.KOD=''      || 'KOD'
   |? _buf.SYMBOL=''   || 'SYMBOL'
   |? _buf.NAZWA=''    || 'NAZWA'
   |? _buf.GRUPA=''    || 'GRUPA'
   |? _buf.DOSTEPNY='' || 'DOSTEPNY'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

:: błędne wartości
{? ('TN'*(1+_buf.SYSTEM))=0
|| _val.msg_inset('SYSTEM','T','N');
   _val.RESULT:=0;
   return()
|? ('TN'*(1+_buf.GRUPA))=0
|| _val.msg_inset('GRUPA','T','N');
   _val.RESULT:=0;
   return()
|? ('TN'*(1+_buf.DOSTEPNY))=0
|| _val.msg_inset('DOSTEPNY','T','N');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(SD_DEF,'SYSTEM');
{? +_buf.SYSTEM>_max
|| _val.msg_length('SYSTEM',_max);
   _buf.SYSTEM:=_max+_buf.SYSTEM
?};
_max:=MS.fld_len(SD_DEF,'KOD');
{? +_buf.KOD>_max
|| _val.msg_length('KOD',_max);
   _buf.KOD:=_max+_buf.KOD
?};
_max:=MS.fld_len(SD_DEF,'SYMBOL');
{? +_buf.SYMBOL>_max
|| _val.msg_length('SYMBOL',_max);
   _buf.SYMBOL:=_max+_buf.SYMBOL
?};
_max:=MS.fld_len(SD_DEF,'NAZWA');
{? +_buf.NAZWA>_max
|| _val.msg_length('NAZWA',_max);
   _buf.NAZWA:=_max+_buf.NAZWA
?};
_max:=MS.fld_len(SD_DEF,'AUTOR');
{? +_buf.AUTOR>_max
|| _val.msg_length('AUTOR',_max);
   _buf.AUTOR:=_max+_buf.AUTOR
?};
_max:=MS.fld_len(SD_DEF,'GRUPA');
{? +_buf.GRUPA>_max
|| _val.msg_length('GRUPA',_max);
   _buf.GRUPA:=_max+_buf.GRUPA
?};
_max:=MS.fld_len(SD_DEF,'DOSTEPNY');
{? +_buf.DOSTEPNY>_max
|| _val.msg_length('DOSTEPNY',_max);
   _buf.DOSTEPNY:=_max+_buf.DOSTEPNY
?};

_ref:=null;
{? (SD_DEF.index('KOD'); SD_DEF.find_key(_buf.KOD,)) |
   (SD_DEF.index('SYMBOL'); SD_DEF.find_key(_buf.SYMBOL,))
|| _ref:=SD_DEF.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1'[_a.KOD]"
);
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,SD_DEF,"
   _a.SYSTEM:=_b.SYSTEM;
   _a.KOD:=_b.KOD;
   _a.SYMBOL:=_b.SYMBOL;
   _a.NAZWA:=_b.NAZWA;
   _a.memo_set(_b.OPIS,'OPIS');
   _a.AUTOR:=_b.AUTOR;
   _a.GRUPA:=_b.GRUPA;
   _a.DOSTEPNY:=_b.DOSTEPNY;
   ~~
",'OPIS');
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 ce66d57e3cb266bfb1c9ad0840cc92da85bfc82138ca11abde2979a17a4581c5f2725cb54aa65e8066be74f9d1e4ffd73a522ae6b762391f954e26b8fd046913eb80183a801e8782cbb92c38c9a7a1b7d15a819148afbab10ea3252cff4170272bd59670a3bc60718c051aa995b6a184cfe12383fae45f7fe3ba86ba90c36433
