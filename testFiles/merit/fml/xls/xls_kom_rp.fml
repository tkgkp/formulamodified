:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_kom_rp.fml
:: Utworzony: 13.08.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu rodzajów potrąceń wynagrodzenia
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='KOM_RP';
_def.FUNPAR:='ZWS_PAR_PTPW';
_def.DOMAIN:=exec('name','#b_domain','PPL');
_def.FILE:=exec('def_per_dict_xlsx','xls__init');
_def.SHEET:='Rodzaje potrąceń=1,1';
_def.NAME:='Rodzaje potrąceń'@;
_def.DESC:='Rodzaje potrąceń';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="KOM_RP";

: prolog
_def.BEFORE:="
   R.cntx_psh();
   R.prefix();
   KOM_RP.cntx_psh();
   KOM_RP.f_clear();
   KOM_RP.index('KOM_RP');
   KOM_RP.prefix();
   ~~
";

: epilog
_def.AFTER:="
   KOM_RP.cntx_pop();
   R.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('N',       MS.name(KOM_RP,'N'),       0,,MS.comment(KOM_RP,'N'));
   _env.define('R',       MS.name(KOM_RP,'R'),       0,,MS.comment(KOM_RP,'R'),type_of(0),0);
   _env.define('P',       MS.name(KOM_RP,'P'),       1,,MS.comment(KOM_RP,'P'),,0);
   _env.define('ALIMENTY',MS.name(KOM_RP,'ALIMENTY'),1,,MS.comment(KOM_RP,'ALIMENTY'));
   _env.define('INNE',    MS.name(KOM_RP,'INNE'),    1,,MS.comment(KOM_RP,'INNE'));
   _env.define('ZAL',     MS.name(KOM_RP,'ZAL'),     1,,MS.comment(KOM_RP,'ZAL'));
   _env.define('PROC',    MS.name(KOM_RP,'PROC'),    1,,MS.comment(KOM_RP,'PROC'),,2);
   _env.define('MIN',     MS.name(KOM_RP,'MIN'),     1,,MS.comment(KOM_RP,'MIN'),,2);
   _env.define('ZUS',     MS.name(KOM_RP,'ZUS'),     1,,MS.comment(KOM_RP,'ZUS'),,2);
   _env.define('EMER',    MS.name(KOM_RP,'EMER'),    1,,MS.comment(KOM_RP,'EMER'),,2);
   _env.define('F',       MS.name(KOM_RP,'F'),       1,,MS.comment(KOM_RP,'F'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.N.VALUE:=KOM_RP.N;
   _buf.R.VALUE:=KOM_RP.R().RN;
   _buf.P.VALUE:=KOM_RP.P;
   _buf.ALIMENTY.VALUE:=KOM_RP.ALIMENTY;
   _buf.INNE.VALUE:=KOM_RP.INNE;
   _buf.ZAL.VALUE:=KOM_RP.ZAL;
   _buf.PROC.VALUE:=KOM_RP.PROC;
   _buf.MIN.VALUE:=KOM_RP.MIN;
   _buf.ZUS.VALUE:=KOM_RP.ZUS;
   _buf.EMER.VALUE:=KOM_RP.EMER;
   _buf.F.VALUE:=KOM_RP.F;
   _env.write_async('RUBRYKI',exec('r','xls__util'));
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_kom_rp',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_kom_rp',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.N=''        || 'N'
   |? _buf.R=0         || 'R'
   |? _buf.P=0         || 'P'
   |? _buf.ALIMENTY='' || 'ALIMENTY'
   |? _buf.INNE=''     || 'INNE'
   |? _buf.ZAL=''      || 'ZAL'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? _buf.R<0
|| _val.msg_range('R',0);
   _val.RESULT:=0;
   return()

|? _buf.P<0
|| _val.msg_range('P',0);
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.ALIMENTY)=0
|| _val.msg_inset('ALIMENTY','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.INNE)=0
|| _val.msg_inset('INNE','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.ZAL)=0
|| _val.msg_inset('ZAL','T','N');
   _val.RESULT:=0;
   return()

|? _buf.PROC<0 | _buf.PROC>100
|| _val.msg_range('PROC',0,100);
   _val.RESULT:=0;
   return()

|? _buf.MIN<0 | _buf.MIN>100
|| _val.msg_range('MIN',0,100);
   _val.RESULT:=0;
   return()

|? _buf.ZUS<0 | _buf.ZUS>100
|| _val.msg_range('ZUS',0,100);
   _val.RESULT:=0;
   return()

|? _buf.EMER<0 | _buf.EMER>100
|| _val.msg_range('EMER',0,100);
   _val.RESULT:=0;
   return()
?};

{? _buf.F<>''
|| _err:=form_chk($_buf.F);
   {? _err.first()
   || _val.MSG:='Formuła ma nieprawidłową składnię. Znak: %1, %2.'@
         [$_err.ERR_COL,_err.ERR_DESC];
      _val.RESULT:=0;
      return()
   ?}
?};

: weryfikacja spójności referencyjnej
{? ~R.find_tab(,'RN',,'=',_buf.R)
|| _val.msg_norec('R');
   _val.RESULT:=0;
   return()
|| _rub:=R.ref()
?};

_ref:=null;
{? KOM_RP.find_tab(,'R',,'=',_rub,'N',,'=',_buf.N)
|| _ref:=KOM_RP.ref()
?};

exec('__RUB','object');
: sprawdzenie poprawności merytorycznej
{? _buf.ALIMENTY='T' & ~__RUB.sys_attr(_rub,21111)
|| _val.MSG:='Składnik %1 nie ma przypisanego atrybutu 21111.'@[$_buf.R];
   _val.RESULT:=0;
   return()

|? _buf.INNE='T' & ~__RUB.sys_attr(_rub,21114)
|| _val.MSG:='Składnik %1 nie ma przypisanego atrybutu 21114.'@[$_buf.R];
   _val.RESULT:=0;
   return()
?};
{? ~exec('sprawdz_priorytet','komornik',KOM_RP,_ref,_buf.P,_buf.PROC,_buf.MIN,_buf.ZUS,_buf.EMER)
|| _val.MSG:='Niezgodne wartości dla potrąceń o identycznym priorytecie.'@;
   _val.RESULT:=0;
   return()
?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('KOM_RP','R','to_str');
_obj.to_str:="'%1: %2'[_a.N,$_a.R]";
_obj.R:=_rub;
_obj.KOM_RP:=_ref;

{? _ref=null
|| _val.ACTION:='add'
|| _val.ACTION:='put'
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.N:=_b.N;
   _a.R:=_c.R;
   _a.P:=_b.P;
   _a.ALIMENTY:=_b.ALIMENTY;
   _a.INNE:=_b.INNE;
   _a.ZAL:=_b.ZAL;
   _a.PROC:=_b.PROC;
   _a.MIN:=_b.MIN;
   _a.ZUS:=_b.ZUS;
   _a.EMER:=_b.EMER;
   _a.F:=_b.F;
   ~~
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? KOM_RP.seek(_obj.KOM_RP)
   || _set(KOM_RP,_buf,_obj);
      {? ~KOM_RP.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,KOM_RP.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| KOM_RP.blank();
   _set(KOM_RP,_buf,_obj);
   {? ~KOM_RP.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 500014d39460214b01ee692deadfab327b9e720869ae7c0fe426ac57bf239c3e8b1796631ab42c7e7ab816dfa958653e7606df822e098daa1a4b30a884345fa81e76ef639349252125e6d8eba12a2afebc056674c42830ce86f4838ecc552af5942276e2de9d8ce619e1aa115d86570516becfb91cbaa67629e2988639dfc149
