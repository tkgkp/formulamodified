:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_schemat.fml
:: Utworzony: 19.07.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu schematów danych
::======================================================================================================================


\def_xlsx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca domyślną nazwę pliku wymiany danych.
::   WE:
::   WY: nazwa pliku z rozszerzeniem
::----------------------------------------------------------------------------------------------------------------------
'schematy_danych.xlsx'


\init_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UD_TYP';
_def.FUNPAR:='ZWS_PAR_RSCH';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Typy danych=1,1';
_def.NAME:='Schematy danych - typy danych'@;
_def.DESC:='Schematy danych: typy danych';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UD_TYP";

: prolog
_def.BEFORE:="
   UD_TYP.cntx_psh();
   UD_TYP.f_clear();
   UD_TYP.index('SYMBOL');
   UD_TYP.prefix()
";

: epilog
_def.AFTER:="
   UD_TYP.cntx_pop()
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('SYMBOL', MS.name(UD_TYP,'SYMBOL'), 0,,MS.comment(UD_TYP,'SYMBOL'));
   _env.define('OPIS',   MS.name(UD_TYP,'OPIS'),   1,,MS.comment(UD_TYP,'OPIS'));
   _env.define('DLUGOSC',MS.name(UD_TYP,'DLUGOSC'),1,,MS.comment(UD_TYP,'DLUGOSC'),,0);
   _env.define('POZIOM', MS.name(UD_TYP,'POZIOM'), 0,,MS.comment(UD_TYP,'POZIOM'));
   _env.define('OCHRONA',MS.name(UD_TYP,'OCHRONA'),0,,MS.comment(UD_TYP,'OCHRONA'));
   _env.define('SYSTEM', MS.name(UD_TYP,'SYSTEM'), 0,,MS.comment(UD_TYP,'SYSTEM'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.SYMBOL.VALUE:=UD_TYP.SYMBOL;
   _buf.OPIS.VALUE:=UD_TYP.OPIS;
   _buf.DLUGOSC.VALUE:=UD_TYP.DLUGOSC;
   _buf.POZIOM.VALUE:={? UD_TYP.POZIOM<>'' || UD_TYP.POZIOM || 'N' ?};
   _buf.OCHRONA.VALUE:={? UD_TYP.OCHRONA<>'' || UD_TYP.OCHRONA || 'N' ?};
   _buf.SYSTEM.VALUE:=UD_TYP.SYSTEM;
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_typ','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_typ','xls_schemat',_a,_b,_c)";
~~


\validate_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.SYMBOL=''  || 'SYMBOL'
   |? _buf.OPIS=''    || 'OPIS'
   |? _buf.POZIOM=''  || 'POZIOM'
   |? _buf.OCHRONA='' || 'OCHRONA'
   |? _buf.SYSTEM=''  || 'SYSTEM'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? ('TN'*_buf.POZIOM)=0
|| _val.msg_inset('POZIOM','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.OCHRONA)=0
|| _val.msg_inset('OCHRONA','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.SYSTEM)=0
|| _val.msg_inset('SYSTEM','T','N');
   _val.RESULT:=0;
   return()

|? _buf.DLUGOSC<0
|| _val.msg_range('DLUGOSC',0);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.SYMBOL>_max
|| _val.msg_length('SYMBOL',_max);
   _buf.SYMBOL:=_max+_buf.SYMBOL
?};
_max:=MS.fld_len(UD_TYP,'OPIS');
{? +_buf.OPIS>_max
|| _val.msg_length('OPIS',_max);
   _buf.OPIS:=_max+_buf.OPIS
?};

_rzS:={? UD_TYP.find_tab(,'SYMBOL',,'=',_buf.SYMBOL) || UD_TYP.ref() || null ?};
_rzO:={? UD_TYP.find_tab(,'OPIS',,'=',_buf.OPIS) || UD_TYP.ref() || null ?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UD_TYP','to_str');
_obj.to_str:="'%1 - %2'[_a.SYMBOL,_a.OPIS]";
_obj.UD_TYP:=_rzS;

{? _rzS=null
|| {? _rzO=null
   || _val.ACTION:='add'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
|| {? _rzO=null | _rzO=_rzS
   || _val.ACTION:='put'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\import_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.SYMBOL:=_b.SYMBOL;
   _a.OPIS:=_b.OPIS;
   _a.DLUGOSC:=_b.DLUGOSC;
   _a.POZIOM:=_b.POZIOM;
   _a.OCHRONA:=_b.OCHRONA;
   _a.SYSTEM:=_b.SYSTEM
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UD_TYP.seek(_obj.UD_TYP)
   || _set(UD_TYP,_buf);
      {? ~UD_TYP.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UD_TYP.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UD_TYP.blank();
   _set(UD_TYP,_buf);
   {? ~UD_TYP.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UD_SKL';
_def.FUNPAR:='ZWS_PAR_RSCH';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Elementy schematów=1,1';
_def.NAME:='Schematy danych - elementy schematów'@;
_def.DESC:='Schematy danych: elementy schematów';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UD_SKL";

: prolog
_def.BEFORE:="
   UD_TYP.cntx_psh();
   UD_SKL.cntx_psh();
   UD_SKL.f_clear();
   UD_SKL.index('SYMBOL');
   UD_SKL.prefix()
";

: epilog
_def.AFTER:="
   UD_SKL.cntx_pop();
   UD_TYP.cntx_pop()
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UD_TYP',  MS.name(UD_SKL,'UD_TYP'),  0,,MS.comment(UD_SKL,'UD_TYP'));
   _env.define('SYMBOL',  MS.name(UD_SKL,'SYMBOL'),  0,,MS.comment(UD_SKL,'SYMBOL'));
   _env.define('OPIS',    MS.name(UD_SKL,'OPIS'),    1,,MS.comment(UD_SKL,'OPIS'));
   _env.define('LISTA',   MS.name(UD_SKL,'LISTA'),   1,,MS.comment(UD_SKL,'LISTA'));
   _env.define('AKTYWNY', MS.name(UD_SKL,'AKTYWNY'), 1,,MS.comment(UD_SKL,'AKTYWNY'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.UD_TYP.VALUE:=UD_SKL.UD_TYP().SYMBOL;
   _buf.SYMBOL.VALUE:=UD_SKL.SYMBOL;
   _buf.OPIS.VALUE:=UD_SKL.OPIS;
   _buf.LISTA.VALUE:={? UD_SKL.LISTA<>'' || UD_SKL.LISTA || 'N' ?};
   _buf.AKTYWNY.VALUE:={? UD_SKL.AKTYWNY<>'' || UD_SKL.AKTYWNY || 'T' ?};
   _env.write_async('UD_TYP',UD_SKL.UD_TYP);
   SKIDXODD.cntx_psh();
   SKIDXODD.index('UD_SKL');
   SKIDXODD.prefix(UD_SKL.ref());
   {? SKIDXODD.first() || _env.write_async('SKIDXODD',SKIDXODD.ref()) ?};
   SKIDXODD.cntx_pop();
   SKIDXDUD.cntx_psh();
   SKIDXDUD.index('POZ');
   SKIDXDUD.prefix(UD_SKL.ref());
   {? SKIDXDUD.first() || _env.write_async('SKIDXDUD',SKIDXDUD.ref()) ?};
   SKIDXDUD.cntx_pop();
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_skl','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_skl','xls_schemat',_a,_b,_c)";
~~


\validate_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UD_TYP=''  || 'UD_TYP'
   |? _buf.SYMBOL=''  || 'SYMBOL'
   |? _buf.OPIS=''    || 'OPIS'
   |? _buf.LISTA=''   || 'LISTA'
   |? _buf.AKTYWNY='' || 'AKTYWNY'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? ('TN'*_buf.LISTA)=0
|| _val.msg_inset('LISTA','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.AKTYWNY)=0
|| _val.msg_inset('AKTYWNY','T','N');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.UD_TYP>_max
|| _val.msg_length('UD_TYP',_max);
   _buf.UD_TYP:=_max+_buf.UD_TYP
?};
_max:=MS.fld_len(UD_SKL,'SYMBOL');
{? +_buf.SYMBOL>_max
|| _val.msg_length('SYMBOL',_max);
   _buf.SYMBOL:=_max+_buf.SYMBOL
?};
_max:=MS.fld_len(UD_SKL,'OPIS');
{? +_buf.OPIS>_max
|| _val.msg_length('OPIS',_max);
   _buf.OPIS:=_max+_buf.OPIS
?};

: weryfikacja spójności referencyjnej
{? (_typ:=exec('szukaj_ud_typ','schemat',_buf.UD_TYP))=null
|| _val.msg_norec('UD_TYP');
   _val.RESULT:=0;
   return()
?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UD_SKL','UD_TYP','to_str');
_obj.to_str:="'%1: %2 - %3'[_a.UD_TYP,_a.SYMBOL,_a.OPIS]";
_obj.UD_SKL:=exec('szukaj_ud_skl','schemat',_typ,_buf.SYMBOL);
_obj.UD_TYP:=_typ;

{? _obj.UD_SKL=null
|| _val.ACTION:='add'
|| _val.ACTION:='put'
?};
~~


\import_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UD_TYP:=_c.UD_TYP;
   _a.SYMBOL:=_b.SYMBOL;
   _a.OPIS:=_b.OPIS;
   _a.LISTA:=_b.LISTA;
   _a.AKTYWNY:=_b.AKTYWNY
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UD_SKL.seek(_obj.UD_SKL)
   || _set(UD_SKL,_buf,_obj);
      {? ~UD_SKL.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UD_SKL.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UD_SKL.blank();
   _set(UD_SKL,_buf,_obj);
   {? ~UD_SKL.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UD_FIR';
_def.FUNPAR:='ZWS_PAR_RSCH';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Reprezentanci firm=1,1';
_def.NAME:='Schematy danych - reprezentanci firm'@;
_def.DESC:='Schematy danych: reprezentanci firm';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UD_FIR";

: prolog
_def.BEFORE:="
   FIRMA.cntx_psh();
   UD_TYP.cntx_psh();
   UD_SKL.cntx_psh();
   UD_FIR.cntx_psh();
   UD_FIR.f_clear();
   UD_FIR.index('SYMBOL');
   UD_FIR.prefix()
";

: epilog
_def.AFTER:="
   UD_FIR.cntx_pop();
   UD_SKL.cntx_pop();
   UD_TYP.cntx_pop();
   FIRMA.cntx_pop()
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UD_TYP',MS.name(UD_SKL,'UD_TYP'),0,,MS.comment(UD_SKL,'UD_TYP'));
   _env.define('UD_SKL',MS.name(UD_FIR,'UD_SKL'),0,,MS.comment(UD_FIR,'UD_SKL'));
   _env.define('FIRMA', MS.name(UD_FIR,'FIRMA'), 0,,MS.comment(UD_FIR,'FIRMA'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.UD_TYP.VALUE:=UD_FIR.UD_SKL().UD_TYP().SYMBOL;
   _buf.UD_SKL.VALUE:=UD_SKL.SYMBOL;
   _buf.FIRMA.VALUE:=UD_FIR.FIRMA().SYMBOL;
   _env.write_async('UD_SKL',UD_FIR.UD_SKL);
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_fir','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_fir','xls_schemat',_a,_b,_c)";
~~


\validate_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UD_TYP='' || 'UD_TYP'
   |? _buf.UD_SKL='' || 'UD_SKL'
   |? _buf.FIRMA=''  || 'FIRMA'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.UD_TYP>_max
|| _val.msg_length('UD_TYP',_max);
   _buf.UD_TYP:=_max+_buf.UD_TYP
?};
_max:=MS.fld_len(UD_SKL,'SYMBOL');
{? +_buf.UD_SKL>_max
|| _val.msg_length('UD_SKL',_max);
   _buf.UD_SKL:=_max+_buf.UD_SKL
?};
_max:=MS.fld_len(FIRMA,'SYMBOL');
{? +_buf.FIRMA>_max
|| _val.msg_length('FIRMA',_max);
   _buf.FIRMA:=_max+_buf.FIRMA
?};

: weryfikacja spójności referencyjnej
{? (_skl:=exec('szukaj_ud_skl','schemat',_buf.UD_TYP,_buf.UD_SKL))=null
|| _val.msg_norec('UD_SKL');
   _val.RESULT:=0;
   return()
?};
_sym:=REF.FIRMA().SYMBOL;
_fir:=exec('firma','#firma',_buf.FIRMA);
exec('firma','#firma',_sym);
{? _fir=null
|| _val.msg_norec('FIRMA');
   _val.RESULT:=0;
   return()
?};

_rzS:={? UD_FIR.find_tab(,'UD_SKL',,'=',_skl) || UD_FIR.ref() || null ?};
_rzF:={? UD_FIR.find_tab(,'FIRMA',,'=',_fir) || UD_FIR.ref() || null ?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UD_FIR','UD_SKL','FIRMA','to_str');
_obj.to_str:="'%1: %2 - %3'[_a.UD_TYP,_a.UD_SKL,_a.FIRMA]";
_obj.UD_FIR:=_rzF;
_obj.UD_SKL:=_skl;
_obj.FIRMA:=_fir;

{? _rzF=null
|| {? _rzS=null
   || _val.ACTION:='add'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0;
      return()
   ?}
|| {? _rzS=null | _rzS=_rzF
   || _val.ACTION:='put'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0;
      return()
   ?}
?};
~~


\import_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UD_SKL:=_b.UD_SKL;
   _a.FIRMA:=_b.FIRMA
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UD_FIR.seek(_obj.UD_FIR)
   || _set(UD_FIR,_obj);
      {? ~UD_FIR.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UD_FIR.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UD_FIR.blank();
   _set(UD_FIR,_obj);
   {? ~UD_FIR.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UD_SCH';
_def.FUNPAR:='ZWS_PAR_RSCH';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Schematy danych=1,1';
_def.NAME:='Schematy danych - schematy danych'@;
_def.DESC:='Schematy danych: schematy danych';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UD_SCH";

: prolog
_def.BEFORE:="
   UD_TYP.cntx_psh();
   UD_SCH.cntx_psh();
   UD_SCH.f_clear();
   UD_SCH.index('SYMBOL');
   UD_SCH.prefix();
   ~~
";

: epilog
_def.AFTER:="
   UD_SCH.cntx_pop();
   UD_TYP.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UD_TYP',  MS.name(UD_SCH,'UD_TYP'),  0,,MS.comment(UD_SCH,'UD_TYP'));
   _env.define('SYMBOL',  MS.name(UD_SCH,'SYMBOL'),  0,,MS.comment(UD_SCH,'SYMBOL'));
   _env.define('OPIS',    MS.name(UD_SCH,'OPIS'),    1,,MS.comment(UD_SCH,'OPIS'));
   _env.define('SYSTEM',  MS.name(UD_SCH,'SYSTEM'),  0,,MS.comment(UD_SCH,'SYSTEM'));
   _env.define('BLOKADA', MS.name(UD_SCH,'BLOKADA'), 0,,MS.comment(UD_SCH,'BLOKADA'));
   _env.define('DOMYSLNY',MS.name(UD_SCH,'DOMYSLNY'),0,,MS.comment(UD_SCH,'DOMYSLNY'));
   _env.define('AKTYWNY', MS.name(UD_SCH,'AKTYWNY'), 0,,MS.comment(UD_SCH,'AKTYWNY'));
   _env.define('DATA',    MS.name(UD_SCH,'DATA'),    0,,MS.comment(UD_SCH,'DATA'));
   _env.define('UWAGI',   MS.name(UD_SCH,'UWAGI'),   1,,MS.comment(UD_SCH,'UWAGI'));
   _env.define('UD_SCH',  MS.name(UD_SCH,'UD_SCH'),  0,,MS.comment(UD_SCH,'UD_SCH'),   type_of(''));
   ~~
";

: eksport, weryfikacja, zapis i wybór danych
_def.EXPORT:="exec('export_sch','xls_schemat',_a,_b)";
_def.VALIDATE:="exec('validate_sch','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_sch','xls_schemat',_a,_b,_c)";
_def.SELECT:="exec('select_sch','xls_schemat',_a)";
~~


\export_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca informacje do zapisania w arkuszu Excel.
::   WE: _a [OBJECT] - środowisko mechanizmu
::       _b [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::   WY: 0/1 - pomiń/zapisz wiersz
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_env:=_a;
_buf:=_b;

_buf.UD_TYP.VALUE:=UD_SCH.UD_TYP().SYMBOL;
_buf.SYMBOL.VALUE:=UD_SCH.SYMBOL;
_buf.OPIS.VALUE:=UD_SCH.OPIS;
_buf.SYSTEM.VALUE:=UD_SCH.SYSTEM;
_buf.BLOKADA.VALUE:=UD_SCH.BLOKADA;
_buf.DOMYSLNY.VALUE:=UD_SCH.DOMYSLNY;
_buf.AKTYWNY.VALUE:=UD_SCH.AKTYWNY;
_buf.DATA.VALUE:=UD_SCH.DATA;
_buf.UWAGI.VALUE:=UD_SCH.UWAGI;
_buf.UD_SCH.VALUE:='';

: aktywny schemat
UD_SCH.cntx_psh();
UD_SCH.prefix();
{? UD_SCH.seek(UD_SCH.UD_SCH,)
|| _buf.UD_SCH.VALUE:=UD_SCH.SYMBOL
?};
UD_SCH.cntx_pop();

: schematy podrzędne
UD_SCH.cntx_psh();
UD_SCH.index('UD_SCH');
UD_SCH.prefix(#UD_SCH.ref());
_loop:=UD_SCH.first();
{!
|? _loop
|! _env.write_async('UD_SCH',UD_SCH.ref());
   _loop:=UD_SCH.next()
!};
UD_SCH.cntx_pop();

: typ danych
_env.write_async('UD_TYP',UD_SCH.UD_TYP);

1


\validate_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UD_TYP=''   || 'UD_TYP'
   |? _buf.SYMBOL=''   || 'SYMBOL'
   |? _buf.OPIS=''     || 'OPIS'
   |? _buf.SYSTEM=''   || 'SYSTEM'
   |? _buf.BLOKADA=''  || 'BLOKADA'
   |? _buf.DOMYSLNY='' || 'DOMYSLNY'
   |? _buf.AKTYWNY=''  || 'AKTYWNY'
   |? _buf.UWAGI=''    || 'UWAGI'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? ('TN'*_buf.SYSTEM)=0
|| _val.msg_inset('SYSTEM','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.BLOKADA)=0
|| _val.msg_inset('BLOKADA','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.DOMYSLNY)=0
|| _val.msg_inset('DOMYSLNY','T','N');
   _val.RESULT:=0;
   return()

|? ('TN'*_buf.AKTYWNY)=0
|| _val.msg_inset('AKTYWNY','T','N');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.UD_TYP>_max
|| _val.msg_length('UD_TYP',_max);
   _buf.UD_TYP:=_max+_buf.UD_TYP
?};
_max:=MS.fld_len(UD_SCH,'SYMBOL');
{? +_buf.SYMBOL>_max
|| _val.msg_length('SYMBOL',_max);
   _buf.SYMBOL:=_max+_buf.SYMBOL
?};
_max:=MS.fld_len(UD_SCH,'OPIS');
{? +_buf.OPIS>_max
|| _val.msg_length('OPIS',_max);
   _buf.OPIS:=_max+_buf.OPIS
?};
_max:=MS.fld_len(UD_SCH,'UWAGI');
{? +_buf.UWAGI>_max
|| _val.msg_length('UWAGI',_max);
   _buf.UWAGI:=_max+_buf.UWAGI
?};
_max:=MS.fld_len(UD_SCH,'SYMBOL');
{? +_buf.UD_SCH>_max
|| _val.msg_length('UD_SCH',_max);
   _buf.UD_SCH:=_max+_buf.UD_SCH
?};

: weryfikacja spójności referencyjnej
{? (_typ:=exec('szukaj_ud_typ','schemat',_buf.UD_TYP))=null
|| _val.msg_norec('UD_TYP');
   _val.RESULT:=0;
   return()
?};
_sch:=null;
{? _buf.UD_SCH<>''
|| {? (_sch:=exec('szukaj_ud_sch','schemat',_typ,_buf.UD_SCH))=null
   || _val.msg_norec('UD_SCH');
      _val.RESULT:=0;
      return()
   ?}
?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UD_SCH','UD_TYP','UD_NAD','to_str');
_obj.to_str:="'%1: %2 - %3'[_a.UD_TYP,_a.SYMBOL,_a.OPIS]";
_obj.UD_SCH:=exec('szukaj_ud_sch','schemat',_typ,_buf.SYMBOL);
_obj.UD_TYP:=_typ;
_obj.UD_NAD:=_sch;

{? _obj.UD_SCH=null
|| _val.ACTION:='add'
|| _val.ACTION:='put'
?};
~~


\import_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UD_TYP:=_c.UD_TYP;
   _a.SYMBOL:=_b.SYMBOL;
   _a.OPIS:=_b.OPIS;
   _a.SYSTEM:=_b.SYSTEM;
   _a.BLOKADA:=_b.BLOKADA;
   _a.DOMYSLNY:=_b.DOMYSLNY;
   _a.AKTYWNY:=_b.AKTYWNY;
   _a.DATA:=_b.DATA;
   _a.UWAGI:=_b.UWAGI;
   _a.UD_SCH:=_c.UD_NAD
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UD_SCH.seek(_obj.UD_SCH)
   || _set(UD_SCH,_buf,_obj);
      {? ~UD_SCH.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UD_SCH.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UD_SCH.blank();
   _set(UD_SCH,_buf,_obj);
   {? ~UD_SCH.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\select_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu.
::   WE: _a [TABLE] - tabela tymczasowa z kolumną REF, którą należy wypełnić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_SEL:=_a;

_SCH:=tab_tmp(2,
   'UD_TYP','STRING[%1]'[$MS.fld_len(UD_TYP,'SYMBOL')],'Typ',
   'SYMBOL','STRING[%1]'[$MS.fld_len(UD_SCH,'SYMBOL')],'Symbol',
   'OPIS','STRING[%1]'[$MS.fld_len(UD_SCH,'OPIS')],'Opis',
   'SELECTED','STRING[1]','Wybrany',
   'REF','STRING[16]','SQL ref'
);

UD_SCH.cntx_psh();
UD_SCH.prefix();
_loop:=UD_SCH.first();
{!
|? _loop
|! {? UD_SCH.AKTYWNY='T'
   || _SCH.blank();
      _SCH.UD_TYP:=UD_SCH.UD_TYP().SYMBOL;
      _SCH.SYMBOL:=UD_SCH.SYMBOL;
      _SCH.OPIS:=UD_SCH.OPIS;
      _SCH.SELECTED:='N';
      _SCH.REF:=$UD_SCH.ref();
      _SCH.add()
   ?};
   _loop:=UD_SCH.next()
!};
UD_SCH.cntx_pop();

{? exec('select_action','#table',_SCH,'UD_TYP,SYMBOL,OPIS',20,'Wybór schematów do eksportu'@,1)>0
|| _key:=_SCH.ndx_tmp(,,'SELECTED',,,'UD_TYP',,,'SYMBOL',,);
   _SEL.erase();
   _SCH.index(_key);
   _SCH.prefix('T');
   _loop:=_SCH.first();
   {!
   |? _loop
   |! _SEL.blank();
      _SEL.REF:=_SCH.REF;
      _SEL.add();
      _loop:=_SCH.next()
   !};
   1
?}


\init_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UD_POZ';
_def.FUNPAR:='ZWS_PAR_RSCH';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Poziomy drzew=1,1';
_def.NAME:='Schematy danych - poziomy drzew'@;
_def.DESC:='Schematy danych: poziomy drzew';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UD_POZ";

: prolog
_def.BEFORE:="
   UD_SCH.cntx_psh();
   UD_POZ.cntx_psh();
   UD_POZ.index('NUMER');
   UD_POZ.prefix()
";
: epilog
_def.AFTER:="
   UD_POZ.cntx_pop();
   UD_SCH.cntx_pop()
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UD_TYP',MS.name(UD_SCH,'UD_TYP'),0,,MS.comment(UD_SCH,'UD_TYP'));
   _env.define('UD_SCH',MS.name(UD_POZ,'UD_SCH'),0,,MS.comment(UD_POZ,'UD_SCH'));
   _env.define('NUMER', MS.name(UD_POZ,'NUMER'), 1,,MS.comment(UD_POZ,'NUMER'),,0);
   _env.define('OPIS',  MS.name(UD_POZ,'OPIS'),  1,,MS.comment(UD_POZ,'OPIS'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.UD_TYP.VALUE:=UD_POZ.UD_SCH().UD_TYP().SYMBOL;
   _buf.UD_SCH.VALUE:=UD_SCH.SYMBOL;
   _buf.NUMER.VALUE:=UD_POZ.NUMER;
   _buf.OPIS.VALUE:=UD_POZ.OPIS;
   _env.write_async('UD_SCH',UD_POZ.UD_SCH);
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_poz','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_poz','xls_schemat',_a,_b,_c)";
~~


\validate_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UD_TYP='' || 'UD_TYP'
   |? _buf.UD_SCH='' || 'UD_SCH'
   |? _buf.OPIS=''   || 'OPIS'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? _buf.NUMER<0
|| _val.msg_range('NUMER',0);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.UD_TYP>_max
|| _val.msg_length('UD_TYP',_max);
   _buf.UD_TYP:=_max+_buf.UD_TYP
?};
_max:=MS.fld_len(UD_SCH,'SYMBOL');
{? +_buf.UD_SCH>_max
|| _val.msg_length('UD_SCH',_max);
   _buf.UD_SCH:=_max+_buf.UD_SCH
?};
_max:=MS.fld_len(UD_POZ,'OPIS');
{? +_buf.OPIS>_max
|| _val.msg_length('OPIS',_max);
   _buf.OPIS:=_max+_buf.OPIS
?};

: weryfikacja spójności referencyjnej
{? (_sch:=exec('szukaj_ud_sch','schemat',_buf.UD_TYP,_buf.UD_SCH))=null
|| _val.msg_norec('UD_SCH');
   _val.RESULT:=0;
   return()
?};

_rzN:={? UD_POZ.find_tab(,'UD_SCH',,'=',_sch,'NUMER',,'=',_buf.NUMER) || UD_POZ.ref() || null ?};
_rzO:={? UD_POZ.find_tab(,'UD_SCH',,'=',_sch,'OPIS',,'=',_buf.OPIS) || UD_POZ.ref() || null ?};

: dla uniknięcia powtórnych wyszukiwań
_obj:=_val.OBJ:=obj_new('UD_POZ','UD_SCH','to_str');
_obj.to_str:="'%1/%2: %3 - %4'[_a.UD_TYP,_a.UD_SCH,$_a.NUMER,_a.OPIS]";
_obj.UD_POZ:={? UD_POZ.find_tab(,'UD_SCH',,'=',_sch,'NUMER',,'=',_buf.NUMER) || UD_POZ.ref() || null ?};
_obj.UD_SCH:=_sch;

{? _rzN=null
|| {? _rzO=null
   || _val.ACTION:='add'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
|| {? _rzO=null | _rzO=_rzN
   || _val.ACTION:='put'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\import_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UD_SCH:=_c.UD_SCH;
   _a.NUMER:=_b.NUMER;
   _a.OPIS:=_b.OPIS
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UD_POZ.seek(_obj.UD_POZ)
   || _set(UD_POZ,_buf,_obj);
      {? ~UD_POZ.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UD_POZ.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UD_POZ.blank();
   _set(UD_POZ,_buf,_obj);
   {? ~UD_POZ.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UD_DEF';
_def.FUNPAR:='ZWS_PAR_RSCH';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Struktury drzew=1,1';
_def.NAME:='Schematy danych - struktura drzew'@;
_def.DESC:='Schematy danych: struktura drzew';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UD_DEF";

: prolog
_def.BEFORE:="
   UD_TYP.cntx_psh();
   UD_SCH.cntx_psh();
   UD_POZ.cntx_psh();
   UD_DEF.cntx_psh();
   {? _a.is_export()
   || exec('def_read','xls_schemat');
      UD_DEF.index(UD_DEF.ndx_tmp(,,'IDPUT',,))
   || UD_DEF.index('PODTEC')
   ?};
   UD_DEF.prefix()
";

: epilog
_def.AFTER:="
   _key:=UD_DEF.index('?');
   UD_DEF.cntx_pop();
   UD_POZ.cntx_pop();
   UD_SCH.cntx_pop();
   UD_TYP.cntx_pop();
   UD_DEF.ndx_drop(_key)
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UD_TYP',MS.name(UD_SCH,'UD_TYP'),0,,MS.comment(UD_SCH,'UD_TYP'));
   _env.define('UD_SCH',MS.name(UD_DEF,'UD_SCH'),0,,MS.comment(UD_DEF,'UD_SCH'));
   _env.define('UD_DEF',MS.name(UD_DEF,'UD_DEF'),1,,MS.comment(UD_DEF,'UD_DEF'),type_of(''));
   _env.define('UD_SKL',MS.name(UD_DEF,'UD_SKL'),1,,MS.comment(UD_DEF,'UD_SKL'));
   _env.define('UD_POZ',MS.name(UD_DEF,'UD_POZ'),1,,MS.comment(UD_DEF,'UD_POZ'),type_of(0),0);
   _env.define('ZN_AGR','Znacznik agregacji',1,'Znacznik agregacji: +,-,*,/,~');
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.UD_TYP.VALUE:=UD_DEF.UD_SCH().UD_TYP().SYMBOL;
   _buf.UD_SCH.VALUE:=UD_SCH.SYMBOL;
   _buf.UD_SKL.VALUE:=UD_DEF.UD_SKL().SYMBOL;
   _buf.UD_DEF.VALUE:='';
   UD_DEF.cntx_psh();
   UD_DEF.prefix();
   {? UD_DEF.seek(UD_DEF.UD_DEF,)
   || _buf.UD_DEF.VALUE:=UD_DEF.UD_SKL().SYMBOL
   ?};
   UD_DEF.cntx_pop();
   _buf.ZN_AGR.VALUE:=UD_DEF.ZN_AGR;
   _buf.UD_POZ.VALUE:=UD_DEF.UD_POZ().NUMER;
   _env.write_async('UD_SCH',UD_DEF.UD_SCH);
   _env.write_async('UD_SKL',UD_DEF.UD_SKL);
   _env.write_async('UD_POZ',UD_DEF.UD_POZ);
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_def','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_def','xls_schemat',_a,_b,_c)";
~~


\validate_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UD_TYP='' || 'UD_TYP'
   |? _buf.UD_SCH='' || 'UD_SCH'
   |? _buf.UD_SKL='' || 'UD_SKL'
   |? _buf.ZN_AGR='' || 'ZN_AGR'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? _buf.UD_POZ<0
|| _val.msg_range('UD_POZ',0);
   _val.RESULT:=0;
   return()
|? '+-*/~'*_buf.ZN_AGR=0
|| _val.msg_inset('ZN_AGR','+','-','*','/','~');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.UD_TYP>_max
|| _val.msg_length('UD_TYP',_max);
   _buf.UD_TYP:=_max+_buf.UD_TYP
?};
_max:=MS.fld_len(UD_SCH,'SYMBOL');
{? +_buf.UD_SCH>_max
|| _val.msg_length('UD_SCH',_max);
   _buf.UD_SCH:=_max+_buf.UD_SCH
?};
_max:=MS.fld_len(UD_SKL,'SYMBOL');
{? +_buf.UD_SKL>_max
|| _val.msg_length('UD_SKL',_max);
   _buf.UD_SKL:=_max+_buf.UD_SKL
?};
_max:=MS.fld_len(UD_SKL,'SYMBOL');
{? +_buf.UD_DEF>_max
|| _val.msg_length('UD_DEF',_max);
   _buf.UD_DEF:=_max+_buf.UD_DEF
?};

: weryfikacja spójności referencyjnej
{? (_sch:=exec('szukaj_ud_sch','schemat',_buf.UD_TYP,_buf.UD_SCH))=null
|| _val.msg_norec('UD_SCH');
   _val.RESULT:=0;
   return()
?};
{? (_skl:=exec('szukaj_ud_skl','schemat',_buf.UD_TYP,_buf.UD_SKL))=null
|| _val.msg_norec('UD_SKL');
   _val.RESULT:=0;
   return()
?};
_poz:=null;
{? _buf.UD_POZ>0
|| {? ~UD_POZ.find_tab(,'UD_SCH',,'=',_sch,'NUMER',,'=',_buf.UD_POZ)
   || _val.msg_norec('UD_POZ');
      _val.RESULT:=0;
      return()
   || _poz:=UD_POZ.ref()
   ?}
?};

: dla uniknięcia powtórnych wyszukiwań
_obj:=_val.OBJ:=obj_new('UD_DEF','UD_SCH','UD_SKL','UD_POZ','UD_NAD','ZN_AGR','to_str');
_obj.to_str:="'%1/%2: %3'[_a.UD_TYP,_a.UD_SCH,_a.UD_SKL]";
_obj.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
_obj.UD_SCH:=_sch;
_obj.UD_SKL:=_skl;
_obj.UD_POZ:=_poz;
_obj.UD_NAD:=0;
_obj.ZN_AGR:=_buf.ZN_AGR;

{? _buf.UD_DEF<>''
|| {? (_skl:=exec('szukaj_ud_skl','schemat',_buf.UD_TYP,_buf.UD_DEF))=null
   || _val.msg_norec('UD_DEF');
      _val.RESULT:=0;
      return()
   ?};
   {? (_def:=exec('szukaj_ud_def','schemat',_sch,_skl).REF)=null
   || _val.msg_norec('UD_DEF');
      _val.RESULT:=0;
      return()
   ?};
   _obj.UD_NAD:=#_def
?};

{? _obj.UD_DEF=null
|| _val.ACTION:='add'
|| _val.ACTION:='put'
?};
~~


\import_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UD_SCH:=_b.UD_SCH;
   _a.UD_SKL:=_b.UD_SKL;
   _a.UD_POZ:=_b.UD_POZ;
   _a.UD_DEF:=_b.UD_NAD
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UD_DEF.seek(_obj.UD_DEF)
   || _set(UD_DEF,_obj);
      {? ~UD_DEF.put()
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UD_DEF.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UD_DEF.blank();
   _set(UD_DEF,_obj);
   {? ~UD_DEF.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UDB_GRP';
_def.FUNPAR:='ZWS_UPR_RUPR';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Grupy dziedzin=1,1';
_def.NAME:='Schematy danych - grupy dziedzin'@;
_def.DESC:='Schematy danych: grupy dziedzin';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UDB_GRP";

: prolog
_def.BEFORE:="
   UDB_GRP.cntx_psh();
   UDB_GRP.f_clear();
   UDB_GRP.index('SYMBOL');
   UDB_GRP.prefix()
";

: epilog
_def.AFTER:="
   UDB_GRP.cntx_pop()
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('SYMBOL',MS.name(UDB_GRP,'SYMBOL'),0,,MS.comment(UDB_GRP,'SYMBOL'));
   _env.define('OPIS',  MS.name(UDB_GRP,'OPIS'),  1,,MS.comment(UDB_GRP,'OPIS'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.SYMBOL.VALUE:=UDB_GRP.SYMBOL;
   _buf.OPIS.VALUE:=UDB_GRP.OPIS;
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_grp','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_grp','xls_schemat',_a,_b,_c)";
~~


\validate_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.SYMBOL='' || 'SYMBOL'
   |? _buf.OPIS=''   || 'OPIS'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UDB_GRP,'SYMBOL');
{? +_buf.SYMBOL>_max
|| _val.msg_length('SYMBOL',_max);
   _buf.SYMBOL:=_max+_buf.SYMBOL
?};
_max:=MS.fld_len(UDB_GRP,'OPIS');
{? +_buf.OPIS>_max
|| _val.msg_length('OPIS',_max);
   _buf.OPIS:=_max+_buf.OPIS
?};

_rzS:={? UDB_GRP.find_tab(,'SYMBOL',,'=',_buf.SYMBOL) || UDB_GRP.ref() || null ?};
_rzO:={? UDB_GRP.find_tab(,'OPIS',,'=',_buf.OPIS) || UDB_GRP.ref() || null ?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UDB_GRP','to_str');
_obj.to_str:="'%1 - %2'[_a.SYMBOL,_a.OPIS]";
_obj.UDB_GRP:=_rzS;

{? _rzS=null
|| {? _rzO=null
   || _val.ACTION:='add'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
|| {? _rzO=null | _rzO=_rzS
   || _val.ACTION:='put'
   || _val.msg_unique(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\import_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.SYMBOL:=_b.SYMBOL;
   _a.OPIS:=_b.OPIS
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UDB_GRP.seek(_obj.UDB_GRP)
   || _set(UDB_GRP,_buf);
      {? ~UDB_GRP.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UDB_GRP.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UDB_GRP.blank();
   _set(UDB_GRP,_buf);
   {? ~UDB_GRP.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UDB_DOM';
_def.FUNPAR:='ZWS_UPR_RUPR';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Dziedziny grupy=1,1';
_def.NAME:='Schematy danych - dziedziny grupy'@;
_def.DESC:='Schematy danych: dziedziny grupy';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UDB_DOM";

: prolog
_def.BEFORE:="
   UDB_GRP.cntx_psh();
   UDB_GRP.prefix();
   UDB_DOM.cntx_psh();
   UDB_DOM.f_clear();
   UDB_DOM.index('SYMBOL');
   UDB_DOM.prefix()
";

: epilog
_def.AFTER:="
   UDB_DOM.cntx_pop();
   UDB_GRP.cntx_pop()
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UDB_GRP', MS.name(UDB_DOM,'UDB_GRP'), 0,,MS.comment(UDB_DOM,'UDB_GRP'));
   _env.define('B_DOMAIN',MS.name(UDB_DOM,'B_DOMAIN'),0,,MS.comment(UDB_DOM,'B_DOMAIN'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.UDB_GRP.VALUE:=UDB_DOM.UDB_GRP().SYMBOL;
   _buf.B_DOMAIN.VALUE:=UDB_DOM.B_DOMAIN().SYMBOL;
   _env.write_async('UDB_GRP',UDB_DOM.UDB_GRP);
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_dom','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_dom','xls_schemat',_a,_b,_c)";
~~


\validate_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UDB_GRP=''  || 'UDB_GRP'
   |? _buf.B_DOMAIN='' || 'B_DOMAIN'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UDB_GRP,'SYMBOL');
{? +_buf.UDB_GRP>_max
|| _val.msg_length('UDB_GRP',_max);
   _buf.UDB_GRP:=_max+_buf.UDB_GRP
?};
_max:=MS.fld_len(B_DOMAIN,'SYMBOL');
{? +_buf.B_DOMAIN>_max
|| _val.msg_length('B_DOMAIN',_max);
   _buf.B_DOMAIN:=_max+_buf.B_DOMAIN
?};

: weryfikacja spójności referencyjnej
{? ~UDB_GRP.find_tab(,'SYMBOL',,'=',_buf.UDB_GRP)
|| _val.msg_norec('UDB_GRP');
   _val.RESULT:=0;
   return()
|| _grp:=UDB_GRP.ref()
?};
{? (_dom:=exec('domain_ref','#b_domain',_buf.B_DOMAIN))=null
|| _val.msg_norec('B_DOMAIN');
   _val.RESULT:=0;
   return()
?};

_ref:={? UDB_DOM.find_tab(,'B_DOMAIN',,'=',_dom) || UDB_DOM.ref() || null ?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UDB_DOM','UDB_GRP','B_DOMAIN','to_str');
_obj.to_str:="'%1: %2'[_a.UDB_GRP,_a.B_DOMAIN]";
_obj.UDB_DOM:=_ref;
_obj.UDB_GRP:=_grp;
_obj.B_DOMAIN:=_dom;

{? _ref=null
|| _val.ACTION:='add'
|| _val.ACTION:='put'
?};
~~


\import_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UDB_GRP:=_b.UDB_GRP;
   _a.B_DOMAIN:=_b.B_DOMAIN
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UDB_DOM.seek(_obj.UDB_DOM)
   || _set(UDB_DOM,_obj);
      {? ~UDB_DOM.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UDB_DOM.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UDB_DOM.blank();
   _set(UDB_DOM,_obj);
   {? ~UDB_DOM.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UDB_SYS';
_def.FUNPAR:='ZWS_UPR_RUPR';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Typy dla grupy=1,1';
_def.NAME:='Schematy danych - typy dla grupy'@;
_def.DESC:='Schematy danych: typy dla grupy';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UDB_SYS";

: prolog
_def.BEFORE:="
   UDB_GRP.cntx_psh();
   UDB_GRP.prefix();
   UD_TYP.cntx_psh();
   UD_TYP.prefix();
   UDB_SYS.cntx_psh();
   UDB_SYS.f_clear();
   UDB_SYS.index('TYP_SYM');
   UDB_SYS.prefix();
   ~~
";

: epilog
_def.AFTER:="
   UDB_SYS.cntx_pop();
   UD_TYP.cntx_pop();
   UDB_GRP.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UDB_GRP',MS.name(UDB_SYS,'UDB_GRP'),0,,MS.comment(UDB_SYS,'UDB_GRP'));
   _env.define('UD_TYP', MS.name(UDB_SYS,'UD_TYP'), 0,,MS.comment(UDB_SYS,'UD_TYP'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.UDB_GRP.VALUE:=UDB_SYS.UDB_GRP().SYMBOL;
   _buf.UD_TYP.VALUE:=UDB_SYS.UD_TYP().SYMBOL;
   _env.write_async('UDB_GRP',UDB_SYS.UDB_GRP);
   _env.write_async('UD_TYP',UDB_SYS.UD_TYP);
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_sys','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_sys','xls_schemat',_a,_b,_c)";
~~


\validate_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UDB_GRP='' || 'UDB_GRP'
   |? _buf.UD_TYP=''  || 'UD_TYP'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UDB_GRP,'SYMBOL');
{? +_buf.UDB_GRP>_max
|| _val.msg_length('UDB_GRP',_max);
   _buf.UDB_GRP:=_max+_buf.UDB_GRP
?};
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.UD_TYP>_max
|| _val.msg_length('UD_TYP',_max);
   _buf.UD_TYP:=_max+_buf.UD_TYP
?};

: weryfikacja spójności referencyjnej
{? ~UDB_GRP.find_tab(,'SYMBOL',,'=',_buf.UDB_GRP)
|| _val.msg_norec('UDB_GRP');
   _val.RESULT:=0;
   return()
|| _grp:=UDB_GRP.ref()
?};
{? (_typ:=exec('szukaj_ud_typ','schemat',_buf.UD_TYP))=null
|| _val.msg_norec('UD_TYP');
   _val.RESULT:=0;
   return()
?};

_ref:={? UDB_SYS.find_tab(,'UDB_GRP',,'=',_grp,'UD_TYP',,'=',_typ) || UDB_SYS.ref() || null ?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UDB_SYS','UDB_GRP','UD_TYP','to_str');
_obj.to_str:="'%1: %2'[_a.UDB_GRP,_a.UD_TYP]";
_obj.UDB_SYS:=_ref;
_obj.UDB_GRP:=_grp;
_obj.UD_TYP:=_typ;

{? _ref=null
|| _val.ACTION:='add'
|| _val.ACTION:='put'
?};
~~


\import_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UDB_GRP:=_b.UDB_GRP;
   _a.UD_TYP:=_b.UD_TYP
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UDB_SYS.seek(_obj.UDB_SYS)
   || _set(UDB_SYS,_obj);
      {? ~UDB_SYS.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UDB_SYS.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UDB_SYS.blank();
   _set(UDB_SYS,_obj);
   {? ~UDB_SYS.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\init_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='UDB_UPR';
_def.FUNPAR:='ZWS_UPR_RUPR';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Uprawnienia=1,1';
_def.NAME:='Schematy danych - uprawnienia'@;
_def.DESC:='Schematy danych: uprawnienia';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="UDB_UPR";

: prolog
_def.BEFORE:="
   UD_SKL.cntx_psh();
   UDB_SYS.cntx_psh();
   UDB_SYS.prefix();
   UDB_UPR.cntx_psh();
   UDB_UPR.prefix();
   UDB_UPR.f_set(
      'USERS(KOD)',
      'join USERS',
      'USERS.AKT=\'\'T\'\' and (USERS.JTERM=\'\'T\'\' or USERS.EKIOSK=\'\'T\'\')'
   );
   USERS.cntx_psh();
   USERS.index('USR_AKOD');
   USERS.prefix('T');
   _loop:=USERS.first();
   {!
   |? _loop
   |! {? USERS.JTERM='T' | USERS.EKIOSK='T'
::       ustaw semafor operacji hurtowej
      || exec('add','#bulk',USERS,'add',$USERS.ref())
      ?};
      _loop:=USERS.next()
   !};
   USERS.prefix();
   ~~
";

: epilog
_def.AFTER:="
   USERS.index('USR_AKOD');
   USERS.prefix('T');
   _loop:=USERS.first();
   {!
   |? _loop
   |! {? USERS.JTERM='T' | USERS.EKIOSK='T'
      || UDB_UPR.index('FK_USR');
         UDB_UPR.prefix(USERS.ref());
::       usuń semafor hurtowego przetwarzania
         exec('del','#bulk',USERS,'add',$USERS.ref());
         {? UDB_UPR.first()<>0
::          aktualizuj redundantne informacje
         || exec('udb_upr_zmien','schemat')
         ?}
      ?};
      _loop:=USERS.next()
   !};
   UDB_UPR.f_clear();
   UDB_UPR.cntx_pop();
   UDB_SYS.cntx_pop();
   UD_SKL.cntx_pop();
   USERS.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('UDB_GRP',MS.name(UDB_SYS,'UDB_GRP'),0,,MS.comment(UDB_SYS,'UDB_GRP'));
   _env.define('UD_TYP', MS.name(UDB_SYS,'UD_TYP'), 0,,MS.comment(UDB_SYS,'UD_TYP'));
   _env.define('UD_SKL', MS.name(UDB_UPR,'UD_SKL'), 1,,MS.comment(UDB_UPR,'UD_SKL'));
   _env.define('USERS',  MS.name(UDB_UPR,'USERS'),  1,,MS.comment(UDB_UPR,'USERS'));
   _env.define('DOSTEP', MS.name(UDB_UPR,'DOSTEP'), 1,,MS.comment(UDB_UPR,'DOSTEP'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   {? UDB_UPR.USERS().AKT<>'T' | UDB_UPR.USERS().JTERM<>'T' | UDB_UPR.DOSTEP='?'
   || return(0)
   ?};
   _buf.UDB_GRP.VALUE:=UDB_UPR.UDB_SYS().UDB_GRP().SYMBOL;
   _buf.UD_TYP.VALUE:=UDB_UPR.UDB_SYS().UD_TYP().SYMBOL;
   _buf.UD_SKL.VALUE:=UDB_UPR.UD_SKL().SYMBOL;
   _buf.USERS.VALUE:=UDB_UPR.USERS().KOD;
   _buf.DOSTEP.VALUE:=UDB_UPR.DOSTEP;
   _env.write_async('UDB_GRP',UDB_UPR.UDB_SYS().UDB_GRP);
   _env.write_async('UD_TYP',UDB_UPR.UDB_SYS().UD_TYP);
   _env.write_async('UD_SKL',UDB_UPR.UD_SKL);
   _env.write_async('USERS',UDB_UPR.USERS);
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate_upr','xls_schemat',_a,_b,_c)";
_def.IMPORT:="exec('import_upr','xls_schemat',_a,_b,_c)";
~~


\validate_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.UDB_GRP='' || 'UDB_GRP'
   |? _buf.UD_TYP=''  || 'UD_TYP'
   |? _buf.UD_SKL=''  || 'UD_SKL'
   |? _buf.USERS=''   || 'USERS'
   |? _buf.DOSTEP=''  || 'DOSTEP'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? ('TN?'*_buf.DOSTEP)=0
|| _val.msg_inset('DOSTEP','T','N','?');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(UDB_GRP,'SYMBOL');
{? +_buf.UDB_GRP>_max
|| _val.msg_length('UDB_GRP',_max);
   _buf.UDB_GRP:=_max+_buf.UDB_GRP
?};
_max:=MS.fld_len(UD_TYP,'SYMBOL');
{? +_buf.UD_TYP>_max
|| _val.msg_length('UD_TYP',_max);
   _buf.UD_TYP:=_max+_buf.UD_TYP
?};
_max:=MS.fld_len(UD_SKL,'SYMBOL');
{? +_buf.UD_SKL>_max
|| _val.msg_length('UD_SKL',_max);
   _buf.UD_SKL:=_max+_buf.UD_SKL
?};
_max:=MS.fld_len(USERS,'KOD');
{? +_buf.USERS>_max
|| _val.msg_length('USERS',_max);
   _buf.USERS:=_max+_buf.USERS
?};

: weryfikacja spójności referencyjnej
{? (_typ:=exec('szukaj_ud_typ','schemat',_buf.UD_TYP))=null
|| _val.msg_norec('UD_TYP');
   _val.RESULT:=0;
   return()
?};
{? (_skl:=exec('szukaj_ud_skl','schemat',_typ,_buf.UD_SKL))=null
|| _val.msg_norec('UD_SKL');
   _val.RESULT:=0;
   return()
?};
{? ~USERS.find_tab(,'KOD',,'=',_buf.USERS)
|| _val.msg_norec('USERS');
   _val.RESULT:=0;
   return()
|| {? USERS.AKT<>'T' | (USERS.JTERM<>'T' & USERS.EKIOSK<>'T')
   || _val.MSG:='Ustawienie uprawnień niemożliwe.';
      _val.RESULT:=0;
      return()
   ?};
   _usr:=USERS.ref()
?};
{? ~UDB_SYS.find_tab(,'UDB_GRP','SYMBOL','=',_buf.UDB_GRP,'UD_TYP',,'=',_typ)
|| _val.msg_norec('UDB_SYS');
   _val.RESULT:=0;
   return()
|| _sys:=UDB_SYS.ref()
?};

_ref:=null;
{? UDB_UPR.find_tab(,
      'UDB_SYS',,'=',_sys,
      'UD_SKL',,'=',_skl,
      'USERS',,'=',_usr
   )
|| _ref:=UDB_UPR.ref()
?};

: optymalizacja importu i standaryzacja kodu
_obj:=_val.OBJ:=obj_new('UDB_UPR','UDB_SYS','UD_SKL','USERS','to_str');
_obj.to_str:="'%1/%2: %3 - %4'[_a.UDB_GRP,_a.UD_TYP,_a.UD_SKL,_a.USERS]";
_obj.UDB_UPR:=_ref;
_obj.UDB_SYS:=_sys;
_obj.UD_SKL:=_skl;
_obj.USERS:=_usr;

{? _ref=null
|| _val.ACTION:='add'
|| _val.ACTION:='put'
?};
~~


\import_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;

_set:="
   _a.UDB_SYS:=_c.UDB_SYS;
   _a.UD_SKL:=_c.UD_SKL;
   _a.USERS:=_c.USERS;
   _a.DOSTEP:=_b.DOSTEP
";

{? _val.ACTION='put' & _mod
:  włączono tryb nadpisywania
|| {? UDB_UPR.seek(_obj.UDB_UPR)
   || _set(UDB_UPR,_buf,_obj);
      {? ~UDB_UPR.put(1)
      || _val.msg_update(_obj.to_str(_buf));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,UDB_SYS.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| UDB_UPR.blank();
   _set(UDB_UPR,_buf,_obj);
   {? ~UDB_UPR.add(1)
   || _val.msg_insert(_obj.to_str(_buf));
      _val.RESULT:=0
   ?}
?};
~~


\def_read
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Aktualizuje znaczniki czasowe w tabeli UD_DEF.
::   WE:
::   WY: 0/1 - porażka/sukces w wypełnieniu bufora
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
UD_TYP.cntx_psh();
UD_TYP.index('SYMBOL');
UD_SCH.cntx_psh();
UD_DEF.cntx_psh();
UD_SKL.cntx_psh();
UD_POZ.cntx_psh();
UD_DEF.trig_off('*','*');

UD_TYP.prefix();
_loop:=UD_TYP.first();
{!
|? _loop
|! UD_SCH.index('SYMBOL');
   UD_SCH.prefix(UD_TYP.ref());
   _loop:=UD_SCH.first();
   {!
   |? _loop
   |! _ret:=exec('def_tree','xls_schemat',UD_SCH.ref(),0);
      _loop:=(_ret & UD_SCH.next())
   !};
   _loop:=(_ret & UD_TYP.next())
!};

UD_DEF.trig_on('*','*');
UD_POZ.cntx_pop();
UD_SKL.cntx_pop();
UD_DEF.cntx_pop();
UD_SCH.cntx_pop();
UD_TYP.cntx_pop();
_ret


\def_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Aktualizuje znaczniki czasowe w tabeli UD_DEF dla danego schematu.
::   WE: _a [_UD_SCH] - wskazanie wiersza tabeli UD_SCH
::       _b [INTEGER] - numer wiersza nadrzędnego
::   WY: 0/1 - porażka/sukces w wypełnieniu bufora
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_sch:=_a;
_def:=_b;

_ret:=1;
UD_DEF.cntx_psh();
UD_DEF.index('SYMBOL');
UD_DEF.prefix(_sch,_def);
_loop:=UD_DEF.first();
{!
|? _loop
|! {? UD_DEF.put(,1)
   || _ret:=exec('def_tree','xls_schemat',_sch,#UD_DEF.ref())
   || _ret:=0
   ?};
   _loop:=(_ret & UD_DEF.next())
!};
UD_DEF.cntx_pop();
_ret


\def_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Testowe wypełnienie tabeli pośredniej schematów i prezentacja wyników.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('def_read','xls_schemat');
_BUF:=sql('select * from UD_DEF order by IDPUT');
_acr:=_BUF.mk_sel(,'P',1,,,,,,'U');
_BUF.win_act(_acr,,'Kolejność');
_BUF.win_sel(_acr);
_BUF.select();
~~

:Sign Version 2.0 jowisz:1045 2024/02/05 14:04:07 b37bdcc3a82263f70f21200d0e0c20281ee1d95e2cb4a3fe049fc86f05bdd9d9a7ae27ed36cc5fb407c0df2257f9674a5e8f1cb0128900cb5f0a95d66eee6dc9d0333d5bb51a1c63f5ee93e61221f0a686b5add44671c692659becb4d4b252b8abbbfcd7805bac1d186cc3cedcb432fdef97ca4c35bddce53383d10eb3f0bf4e
