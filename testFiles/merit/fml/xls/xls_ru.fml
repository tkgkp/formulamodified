:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_ru.fml
:: Utworzony: 26.09.2018
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły do obsługi danych związanych z rodzajami umów: o pracę i cywilnoprawnych.
::======================================================================================================================



\def_common
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Wspólna część definicji.
::   WE: _a [OBJECT] - Środowisko mechanizmu.
::   WY: Nazwa pliku z rozszerzeniem.
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.FILE:='personel_typy_umow.xlsx';
_def.MULTIFIR:='T';

~~


::======================================================================================================================


\init_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Inicjowanie mechanizmu.
::   WE: _a [OBJECT] - Środowisko mechanizmu.
::       _b [STRING] - Typ umów: [P/Z].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_typ:=_b;

exec('def_common','xls_ru',_def);

_def.ID:='RU_'+_typ;
_def.FUNPAR:='ZWS_PAR_PTSL';

{? _typ='P'
|| _def.DOMAIN:=exec('name','#b_domain','PKD');
   _def.NAME:='Typy umów o pracę'@;
   _def.SHEET:='Typy umów o pracę'@+'=1,1';
   _def.DESC:='Typy umów o pracę'@
|? _typ='Z'
|| _def.DOMAIN:=exec('name','#b_domain','PPL');
   _def.NAME:='Typy umów cywilnoprawnych'@;
   _def.SHEET:='Typy umów cywilnoprawnych'@+'=1,1';
   _def.DESC:='Typy umów cywilnoprawnych'@
?};

_def.TABLE:="RU";

_def.BEFORE:=$("
   SLO_TYP.cntx_psh();
   _slo_typ:=exec('slo_typ','ext_slo','"+{? _typ='P' || 'UMPRAC' || 'UMZLEC'?}+"');
   RU.cntx_psh();
   RU.index('K');
   RU.prefix(_slo_typ)
");

_def.AFTER:="
   RU.cntx_pop();
   SLO_TYP.cntx_pop()
";

_def.FIELDS:=$("
   _fld:=_a;

   _fl:=""MS.name(RU,_a)"";
   _fc:=""MS.comment(RU,_a)"";
   _fd:=""MS.fld_len(RU,_a)"";

   _fld.define('K',_fl('K'),,,_fc('K')+' (max. %1 zn.)'@ [$_fd('K')]);
   _fld.define('O',_fl('O'),,,_fc('O')+' (max. %1 zn.)'@ [$_fd('O')]);"+
{? _typ='Z'
|| "
   _fld.define('RKU',_fl('RKU'),,,_fc('RKU')+' (max. %1 zn.)'@ [$_fd('RKU')]);
   _fld.define('PKU',_fl('PKU'),,,_fc('PKU')+' (liczba nieujemna)'@);
   _fld.define('PPD',_fl('PPD'),,,_fc('PPD')+' (liczba nieujemna)'@);
   _fld.define('ZWPOD',_fl('ZWPOD'),,,_fc('ZWPOD')+' (max. %1 zn.)'@ [$_fd('ZWPOD')]);
   _fld.define('BEZPOD',_fl('BEZPOD'),,,_fc('BEZPOD')+' (max. %1 zn.)'@ [$_fd('BEZPOD')]);
   _fld.define('PTPZP',_fl('PTPZP'),,,_fc('PTPZP')+' (max. %1 zn.)'@ [$_fd('PTPZP')]);
   _fld.define('UP',_fl('UP'),,,_fc('UP')+' (max. %1 zn.)'@ [$_fd('UP')]);
   _fld.define('WRKU50',_fl('WRKU50'),,,_fc('WRKU50')+' (max. %1 zn.)'@ [$_fd('WRKU50')]);"
|| ""
?}+"
   ~~
");

_def.EXPORT:=$("
   _excel:=_a;
   _buf:=_b;
   _buf.K.VALUE:=RU.K;
   _buf.O.VALUE:=RU.O;"+
{? _typ='Z'
|| "
   _buf.RKU.VALUE:=RU.RKU;
   _buf.PKU.VALUE:=RU.PKU;
   _buf.PPD.VALUE:=RU.PPD;
   _buf.ZWPOD.VALUE:=RU.ZWPOD;
   _buf.BEZPOD.VALUE:=RU.BEZPOD;
   _buf.PTPZP.VALUE:=RU.PTPZP;
   _buf.UP.VALUE:=RU.UP;
   _buf.WRKU50.VALUE:=RU.WRKU50;
   _excel.write_async('SLO_TYP',exec('slo_typ','ext_slo','UMZLEC'));"
|| "
   _excel.write_async('SLO_TYP',exec('slo_typ','ext_slo','UMPRAC'));"
?}+"
   1
");

_def.VALIDATE:=$("exec('validate_u','xls_ru',_a,_b,_c,'"+_typ+"')");
_def.IMPORT:=$("exec('import_u','xls_ru',_a,_b,_c,'"+_typ+"')");

~~


\validate_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła sprawdza, czy można poprawić/dodać rekord.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::       _d [NUMBER] - Typ umów: [P/Z].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;
_typ:=_d;

:: Błędy krytyczne
_fld:=
   {? _buf.K=''
   || 'K'
   |? _buf.O=''
   || 'O'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_empty(_fld);
   _validate.RESULT:=0;
   return()
?};

{? _typ='Z'
|| _fld:=
      {? _buf.PKU<0 | _buf.PKU>100
      || 'PKU'
      |? _buf.PPD<0 | _buf.PPD>100
      || 'PPD'
      |? _buf.ZWPOD=''
      || 'ZWPOD'
      |? _buf.BEZPOD=''
      || 'BEZPOD'
      |? _buf.PTPZP=''
      || 'PTPZP'
      |? _buf.UP=''
      || 'UP'
      |? _buf.WRKU50=''
      || 'WRKU50'
      || ''
      ?};
   {? _fld<>''
   || _validate.msg_range(_fld,0,100);
      _validate.RESULT:=0;
      return()
   ?};
   _fld:=
      {? _buf.RKU=''
      || 'RKU'
      || ''
      ?};
   {? _fld<>''
   || _validate.msg_empty(_fld);
      _validate.RESULT:=0;
      return()
   ?}
?};

:: Błędne wartości
{? _typ='Z'
|| {? ('PK'*_buf.RKU)=0
   || _validate.msg_inset('RKU','P','K');
      _validate.RESULT:=0;
      return()
   ?};
   {? _buf.RKU='K' & _buf.PKU<>0
   || _validate.msg_value('PKU',
         'Dla wybranego rodzaju w polu "%1" wartość nie może być większa od 0.'[MS.name(RU,'RKU')]);
      _validate.RESULT:=0;
      return()
   ?}
?};

:: Ostrzeżenia
_dl:=MS.fld_len(RU,'K');
{? +_buf.K>_dl
|| _validate.msg_length('K',_dl)
?};
_dl:=MS.fld_len(RU,'O');
{? +_buf.O>_dl
|| _validate.msg_length('O',_dl)
?};

{? _typ='Z'
|| _dl:=MS.fld_len(RU,'ZWPOD');
   {? +_buf.ZWPOD>_dl
   || _validate.msg_length('ZWPOD',_dl)
   ?};
   _dl:=MS.fld_len(RU,'RKU');
   {? +_buf.RKU>_dl
   || _validate.msg_length('RKU',_dl)
   ?};
   _dl:=MS.fld_len(RU,'BEZPOD');
   {? +_buf.BEZPOD>_dl
   || _validate.msg_length('BEZPOD',_dl)
   ?};
   _dl:=MS.fld_len(RU,'PTPZP');
   {? +_buf.PTPZP>_dl
   || _validate.msg_length('PTPZP',_dl)
   ?};
   _dl:=MS.fld_len(RU,'UP');
   {? +_buf.UP>_dl
   || _validate.msg_length('UP',_dl)
   ?};
   _dl:=MS.fld_len(RU,'WRKU50');
   {? +_buf.WRKU50>_dl
   || _validate.msg_length('WRKU50',_dl)
   ?}
?};

:: Wybór akcji
{? RU.find_key(_buf.K,)
|| {? _update
   || {? RU.O<>_buf.O |
         (_typ='Z' & (
            RU.PKU<>_buf.PKU | RU.PPD<>_buf.PPD | RU.ZWPOD<>_buf.ZWPOD | RU.RKU<>_buf.RKU | RU.BEZPOD<>_buf.BEZPOD |
            RU.PTPZP<>_buf.PTPZP | RU.UP<>_buf.UP | RU.WRKU50<>_buf.WRKU50)
         )
      || _validate.ACTION:='put'
      ?}
   || _validate.RESULT:=0
   ?}
|| _validate.ACTION:='add'
?};

~~


\import_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiedzialna za utworzenie lub aktualizację rekordu.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::       _d [NUMBER] - Typ umów: [P/Z].
::   WY: Status operacji: 0/1
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;
_typ:=_d;

_ret:=1;

_key:='%1 - %2' [_buf.K,_buf.O];
{? _validate.ACTION='add'
|| RU.blank();
   RU.TYP:=exec('slo_typ','ext_slo',{? _typ='P' || 'UMPRAC' || 'UMZLEC'?});
   RU.K:=_buf.K;
   RU.O:=_buf.O;
   {? _typ='Z'
   || RU.RKU:=_buf.RKU;
      RU.PKU:=_buf.PKU;
      RU.PPD:=_buf.PPD;
      RU.ZWPOD:=_buf.ZWPOD;
      RU.BEZPOD:=_buf.BEZPOD;
      RU.PTPZP:=_buf.PTPZP;
      RU.UP:=_buf.UP;
      RU.WRKU50:=_buf.WRKU50
   ?};
   {? ~RU.add(1)
   || _ret:=0;
      _validate.msg_insert(_key)
   ?}

|? _validate.ACTION='put'
|| RU.O:=_buf.O;
   {? _typ='Z'
   || RU.RKU:=_buf.RKU;
      RU.PKU:=_buf.PKU;
      RU.PPD:=_buf.PPD;
      RU.ZWPOD:=_buf.ZWPOD;
      RU.BEZPOD:=_buf.BEZPOD;
      RU.PTPZP:=_buf.PTPZP;
      RU.UP:=_buf.UP;
      RU.WRKU50:=_buf.WRKU50
   ?};
   {? ~RU.put(1)
   || _ret:=0;
      _validate.msg_update(_key)
   ?}
?};

_ret


::======================================================================================================================


\init_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Inicjowanie mechanizmu.
::   WE: _a [OBJECT] - Środowisko mechanizmu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

exec('def_common','xls_ru',_def);

_def.ID:='RU_DEKL';
_def.FUNPAR:='ZWS_PAR_PDZC';
_def.DOMAIN:=exec('name','#b_domain','PPL');
_def.NAME:='Typy umów dla deklaracji'@;
_def.SHEET:='Typy umów dla deklaracji'@+'=1,1';
_def.DESC:='Parametryzacja prezentacji kwot z umów cywilnoprawnych na deklaracjach podatkowych'@;

_def.TABLE:="RU_DEKL";

_def.BEFORE:="
   RU.cntx_psh();
   RU.index('K');
   RU.prefix();
   VAT_VER.cntx_psh();
   VAT_VER.index('VER_OD');
   VAT_VER.prefix();
   RU_DEKL.cntx_psh();
   RU_DEKL.index('RU_DEKL');
   RU_DEKL.prefix()
";

_def.AFTER:="
   RU_DEKL.cntx_pop();
   VAT_VER.cntx_pop();
   RU.cntx_pop()
";

_def.FIELDS:="
   _fld:=_a;

   _fl:=""MS.name(_a,_b)"";
   _fc:=""MS.comment(_a,_b)"";
   _fd:=""MS.fld_len(_a,_b)"";

   _fld.define('RU',_fl(RU,'K'),0,,_fc(RU_DEKL,'RU')+' (max. %1 zn.)'@ [$_fd(RU,'K')]);

   _fld.define('SYSTEM','Dziedzina'@,0,,'Kod dziedziny'@+' (max. %1 zn.)'@ [$_fd(VAT_VER,'SYSTEM')]);
   _fld.define('NAZWA',_fl(VAT_VER,'NAZWA'),0,,_fc(VAT_VER,'NAZWA')+' (max. %1 zn.)'@ [$_fd(VAT_VER,'NAZWA')]);
   _fld.define('NR',_fl(VAT_VER,'NR'),0,,_fc(VAT_VER,'NR'),type_of(0),0);
   _fld.define('OD',_fl(VAT_VER,'OD'),0,,_fc(VAT_VER,'OD'),type_of(date()));

   _fld.define('WIERSZ',_fl(RU_DEKL,'WIERSZ'),,,_fc(RU_DEKL,'WIERSZ'),type_of(''));
   ~~
";

_def.EXPORT:="
   _excel:=_a;
   _buf:=_b;

   RU_DEKL.RU();
   RU_DEKL.DEKL();

   _buf.RU.VALUE:=RU.K;
   _excel.write_async('RU_Z',RU.ref());

   _buf.SYSTEM.VALUE:=VAT_VER.SYSTEM;
   _buf.NAZWA.VALUE:=VAT_VER.NAZWA;
   _buf.NR.VALUE:=VAT_VER.NR;
   _buf.OD.VALUE:=VAT_VER.OD;
   _excel.write_async('VAT_VER_PPL',VAT_VER.ref());

   _buf.WIERSZ.VALUE:=$RU_DEKL.WIERSZ;

   1
";

_def.VALIDATE:="exec('validate_d','xls_ru',_a,_b,_c)";
_def.IMPORT:="exec('import_d','xls_ru',_a,_b,_c)";

~~


\validate_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła sprawdza, czy można poprawić/dodać rekord.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

:: Błędy krytyczne
_fld:=
   {? _buf.RU=''
   || 'RU'
   |? _buf.SYSTEM=''
   || 'SYSTEM'
   |? _buf.NAZWA=''
   || 'NAZWA'
   |? _buf.OD=date(0,0,0)
   || 'OD'
   |? _buf.NR=0
   || 'NR'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_empty(_fld);
   _validate.RESULT:=0;
   return()
?};

{? ~RU.find_key(exec('slo_typ','ext_slo','UMZLEC'),_buf.RU)
|| _validate.msg_norec('RU');
   _validate.RESULT:=0;
   return()
?};
{? ~VAT_VER.find_key(_buf.SYSTEM,_buf.NAZWA,_buf.NAZWA,_buf.OD,_buf.NR)
|| _validate.MSG:='Odnalezienie wersji deklaracji nie powiodło sie.';
   _validate.RESULT:=0;
   return()
?};

{? _buf.WIERSZ<>'' & $#_buf.WIERSZ<>_buf.WIERSZ
|| _validate.msg_value('WIERSZ','"%1" nie jest poprawnym numerem wiersza.'@ [_buf.WIERSZ]);
   _validate.RESULT:=0;
   return()
?};

{? #_buf.WIERSZ<>0 & VAT_VER.WIERSZ*(','+_buf.WIERSZ+',')=0
|| _validate.msg_value('WIERSZ',
      'Numer wiersza (%1) poza obsługiwanym zakresem (%2).'@ [_buf.WIERSZ,1-VAT_VER.WIERSZ-1]
   );
   _validate.RESULT:=0;
   return()
?};

:: Jeżeli doszliśmy tutaj, to oznacza, że udało się znaleźć odpowiednie pozycje RU i VAT_VER.
_validate.OBJ:=obj_new('RU','DEKL');
_validate.OBJ.RU:=RU.ref();
_validate.OBJ.DEKL:=VAT_VER.ref();

:: Wybór akcji
{? RU_DEKL.find_key(_validate.OBJ.RU,_validate.OBJ.DEKL)
|| {? _update & RU_DEKL.WIERSZ<>#_buf.WIERSZ
   || _validate.ACTION:='put'
   ?}
|| _validate.ACTION:='add'
?};

~~


\import_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiedzialna za utworzenie lub aktualizację rekordu.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::   WY: Status operacji: 0/1
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

_ret:=1;

{? _validate.ACTION='add'
|| RU_DEKL.blank();
   RU_DEKL.RU:=_validate.OBJ.RU;
   RU_DEKL.DEKL:=_validate.OBJ.DEKL;
   RU_DEKL.WIERSZ:=#_buf.WIERSZ;
   RU_DEKL.AUTO:='I';
   RU_DEKL.DATAMOD:=date();
   {? ~RU_DEKL.add(1)
   || _ret:=0;
      _validate.msg_insert()
   ?}

|? _validate.ACTION='put'
|| RU_DEKL.WIERSZ:=#_buf.WIERSZ;
   RU_DEKL.AUTO:='I';
   RU_DEKL.DATAMOD:=date();
   {? ~RU_DEKL.put(1)
   || _ret:=0;
      _validate.msg_update()
   ?}
?};

_ret

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 45fc092626c922c4c770139765a0bf60c800fe279debb96f36aced09d66479b7483d0dc670fb4a7dd9b06dd5b499661ef267416c355b4a9b56d5018315f9d2ebd8442a5d6dee225e027910a6b6cb9158330e8796e9937a96d0b883c96b0376127d57f3d1e96cbd4e92baff9e2f0c12e15693344a758dbcc3da0ab6243b0579ea
