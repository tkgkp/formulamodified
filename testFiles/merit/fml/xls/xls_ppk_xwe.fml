:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_ppk_xwe.fml
:: Utworzony: 07.07.2020
:: Autor: IS
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu wersji plików PPK
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='PPK_XWE';
_def.FUNPAR:='ZWS_PAR_PXWE';
_def.DOMAIN:=exec('name','#b_domain','PPK');
_def.FILE:=exec('def_per_ppk_xlsx','xls__init');
_def.SHEET:='Wersje pliku PPK'@+'=1,1';
_def.NAME:='Wersje pliku PPK'@;
_def.DESC:='Wersje pliku PPK'@;
_def.ADD_ROWS:=0;
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="PPK_XWE";

: prolog
_def.BEFORE:="
   PPK_XWE.cntx_psh();
   PPK_XWE.index('NUMER');
   PPK_XWE.prefix();
   PPK_XRA.cntx_psh();
   PPK_XRA.index('UNIQUE');
   PPK_XEL.cntx_psh();
   PPK_XEL.index('SYMBOL');
   PPK_XEL.prefix();
   ~~
";

: epilog
_def.AFTER:="
   _env:=_a;
:: Eksport całej kartoteki PPK_XEL. Wszytskie elementy są istotne dla raportów:
   {? _env.KIND='EXPORT' & PPK_XEL.first()
   || {!
      |? _env.excel.write_async('PPK_XEL',PPK_XEL.ref());

         PPK_XEL.next()
      !}
   ?};
   PPK_XEL.cntx_pop();
   PPK_XRA.cntx_pop();
   PPK_XWE.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('NUMER', MS.name(PPK_XWE,'NUMER'),0,, MS.comment(PPK_XWE,'NUMER'));
   _env.define('DATA',  MS.name(PPK_XWE,'DATA'),0,,  MS.comment(PPK_XWE,'DATA'));
   _env.define('UWAGI', MS.name(PPK_XWE,'UWAGI'),0,, MS.comment(PPK_XWE,'UWAGI'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.NUMER.VALUE:=PPK_XWE.NUMER;
   _buf.DATA.VALUE:=PPK_XWE.DATA;
   _buf.UWAGI.VALUE:=PPK_XWE.memo_txt(,1,'UWAGI');

   PPK_XRA.prefix(PPK_XWE.ref());
   {? PPK_XRA.first()
   || {!
      |? _env.write_async('PPK_XRA',PPK_XRA.ref());

         PPK_XRA.next()
      !}
   ?};

   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_ppk_xwe',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_ppk_xwe',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.NUMER=''         || 'NUMER'
   |? _buf.DATA=date(0,0,0) || 'DATA'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};
_ref:=null;
{? PPK_XWE.find_key(_buf.NUMER)
|| _ref:=PPK_XWE.ref();
   PPK_XWE.cntx_psh();
   _refData:=null;
:: Sprawdzenie drugiego unikalnego indeksu (DATA)
:: Jeśli jest w systemie rekrd o tożsamym numerze oraz inny rekord o tożsamej dacie - błąd krytyczny, nie jesteśmy
:: w stanie zaimportować takich zmian (naruszałoby to któryś z unikalnych indeksów)
   {? PPK_XWE.find_tab(,'DATA',,'=',_buf.DATA)
   || _refData:=PPK_XWE.ref()
   ?};
   PPK_XWE.cntx_pop();
   {? _ref<>_refData
   || _val.msg_unique('W systemie istnieją dwa różne zapisy o tożsamym numerze i tożsamej dacie.'@);
      _val.RESULT:=0;
      return()
   ?}
?};

: ostrzeżenia
_max:=MS.fld_len(PPK_XWE,'NUMER');
{? +_buf.NUMER>_max
|| _val.msg_length('NUMER',_max);
   _buf.NUMER:=_max+_buf.NUMER
?};

: wybór akcji
{? _ref
|| _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1'[$_a.NUMER]"
);
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,PPK_XWE,"
   _a.NUMER:=_b.NUMER;
   _a.DATA:=_b.DATA;
   _a.memo_set(_b.UWAGI,'UWAGI');
   ~~
",'UWAGI');
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:12 bfd8c67e53f78b5be19612a291285666cdde41cd8051988f6d3a2a525470dcf6781c56f871ea6d6b1dde1f147ed921c8e38eae0820d65bf8333d743ea281cdfd9a4f6ac0a80cd2370e83b0cdec316dcf313e02e457278f7c6dc6bee8f87e1df539ace0e264f777eeee6f8de5a2b4ce4f112c211f9abbfbdd559c83dd29698733
