:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_ppk_wrd.fml
:: Utworzony: 03.07.2019
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu rodzajów wniosków PPK.
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='PPK_WRD';
_def.FUNPAR:='ZWS_PAR_PWNU';
_def.DOMAIN:=exec('name','#b_domain','PPK');
_def.FILE:=exec('def_per_ppk_xlsx','xls__init');
_def.SHEET:='Rodzaje wniosków PPK=1,1';
_def.NAME:='Rodzaje wniosków PPK'@;
_def.DESC:='Rodzaje wniosków PPK';
_def.ADD_ROWS:=0;

: źródło danych
_def.TABLE:="PPK_WRD";

: prolog
_def.BEFORE:=
   "  PPK_WRD.cntx_psh();
      PPK_WRD.index('SYMBOL');
      PPK_WRD.prefix();
      ~~
   ";

: epilog
_def.AFTER:=
   "  PPK_WRD.cntx_pop();
      ~~
   ";

: definicja kolumn

_def.FIELDS:=
   "  _env:=_a;
      _env.define('RODZAJ', MS.name(PPK_WRD,'RODZAJ'), 0,,MS.comment(PPK_WRD,'RODZAJ'));
      _env.define('SYMBOL', MS.name(PPK_WRD,'SYMBOL'), 0,,MS.comment(PPK_WRD,'SYMBOL'));
      _env.define('OPIS',   MS.name(PPK_WRD,'OPIS'),   1,,MS.comment(PPK_WRD,'OPIS'));
      _env.define('RAP_ZEW',MS.name(PPK_WRD,'RAP_ZEW'),0,,MS.comment(PPK_WRD,'RAP_ZEW'));
      _env.define('KOD',    MS.name(PPK_WRD,'KOD'),    0,,MS.comment(PPK_WRD,'KOD'));
      _env.define('WER_WYM',MS.name(PPK_WRD,'WER_WYM'),1,,MS.comment(PPK_WRD,'WER_WYM'));
      _env.define('SYSTEM', MS.name(PPK_WRD,'SYSTEM'), 0,,MS.comment(PPK_WRD,'SYSTEM'));
      ~~
   ";

: zawartość wiersza
_def.EXPORT:=
   "  _env:=_a;
      _buf:=_b;
      _buf.RODZAJ.VALUE:=PPK_WRD.RODZAJ;
      _buf.SYMBOL.VALUE:=PPK_WRD.SYMBOL;
      _buf.OPIS.VALUE:=PPK_WRD.OPIS;
      _buf.RAP_ZEW.VALUE:=PPK_WRD.RAP_ZEW;
      _buf.KOD.VALUE:=PPK_WRD.KOD;
      _buf.WER_WYM.VALUE:=PPK_WRD.WER_WYM;
      _buf.SYSTEM.VALUE:=PPK_WRD.SYSTEM;
      1
   ";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_ppk_wrd',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_ppk_wrd',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

: błędy krytyczne
_fld:=
   {? _buf.RODZAJ=''  || 'RODZAJ'
   |? _buf.SYMBOL=''  || 'SYMBOL'
   |? _buf.OPIS=''    || 'OPIS'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_empty(_fld);
   _validate.RESULT:=0;
   return()
?};

: weryfikacja długości
_arr:=spli_str('RODZAJ,SYMBOL,OPIS,RAP_ZEW,KOD,WER_WYM,SYSTEM',',');
{! _lp:=1 .. obj_len(_arr)
|! _acr:=_arr[_lp];
   _max:=MS.fld_len(PPK_WRD,_acr);
   {? ($('{? +_a.%1>_b || _a.%1:=_b+_a.%1; 1 ?}' [_acr]))(_buf,_max)
   || _validate.msg_length(_acr,_max)
   ?}
!};
obj_del(_arr);

{? 'OU'*_buf.RODZAJ=0
|| _validate.msg_inset('RODZAJ','O','U');
   _validate.RESULT:=0;
   return()
?};

: pola z wartościami T/N
_arr:=spli_str('RAP_ZEW,WER_WYM,SYSTEM',',');
{! _lp:=1 .. obj_len(_arr)
|! _acr:=_arr[_lp];
   _val:=($('{? _a.%1=\'\' || _a.%1:=\'N\' || _a.%1 ?}' [_acr]))(_buf);
   {? 'TN'*_val=0
   || _validate.msg_inset(_acr,'T','N');
      _validate.RESULT:=0;
      return()
   ?}
!};
obj_del(_arr);

{? _buf.RAP_ZEW='T' & _buf.KOD=''
|| _validate.msg_empty('KOD');
   _validate.RESULT:=0;
   return()
?};

: wybór akcji
_ref:=null();
{? PPK_WRD.find_key(_buf.RODZAJ,_buf.SYMBOL)
|| _ref:=PPK_WRD.ref();
   {? _update
   || _validate.ACTION:='put'
   || _validate.RESULT:=0
   ?}
|| _validate.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_validate.OBJ:=exec('write_obj','xls__util',_ref,"'%1: %2 - %3'[_a.RODZAJ,_a.SYMBOL,_a.OPIS]");

~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

exec('write','xls__util',_buf,_update,_validate,PPK_WRD,
   "  _a.RODZAJ:=_b.RODZAJ;
      _a.SYMBOL:=_b.SYMBOL;
      _a.OPIS:=_b.OPIS;
      _a.RAP_ZEW:=_b.RAP_ZEW;
      _a.KOD:=_b.KOD;
      _a.WER_WYM:=_b.WER_WYM;
      _a.SYSTEM:=_b.SYSTEM;
      ~~
   "
);
~~

:Sign Version 2.0 jowisz:1028 2019/10/14 09:22:00 47524df901f2d69d46e846979d17c5a46369664aae7382ab27444a3fe524a1bde7929fb5cad0df353ebac56af9b8ca1ff0ed823b288a12d99f688849c8aca0c4e948bf088eb4a45c493ef1f0c6349b8cd3e4fa4989d8bc60103daa9e6f708cabdf6b85d0dee125c245d505cea26f0e3561eaf88f39cb38b9b7126669352e69b8
