:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_proc.fml
:: Utworzony: 27.08.2018
:: Autor: WH
:: Systemy:
::======================================================================================================================
:: Zawartość:
::======================================================================================================================

\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - obiekt z definicją, który należy zasilić - wynik działania exec('args_init','#excel_imex')
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='B_PROC';
_def.DOMAIN:=exec('name','#b_domain','ZPR');
::_def.ADD_ROWS:=100;
_def.FILE:='procesy.xlsx';
_def.SHEET:='Procesy'@+'=1,3';
_def.NAME:='Procesy'@;
_def.DESC:='Procesy'@;

_def.PREFIX:="exec('prefix','xls_proc')";
_def.TABLE:="exec('table','xls_proc',_a,_b)";
_def.TAB_IMP:="B_PROC";
_def.FIELDS:="exec('fields','xls_proc',_a)";

_def.BEFORE:="exec('before','xls_proc',_a)";
_def.AFTER:="exec('after','xls_proc',_a)";
_def.SELECT:="exec('select','xls_proc',_a,_b)";

_def.EXPORT:="exec('export','xls_proc',_a,_b)";
_def.VALIDATE:="exec('validate','xls_proc',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_proc',_a,_b,_c)";
_def.DETAILS:="exec('details','xls_proc',_a,_b)";

VAR_DEL.delete('ENV_IMEX');
VAR_DEL.delete('XLS_PROC_KOMM');
VAR_DEL.delete('EX_ENV');
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca eksportowane pola tabeli i ich atrybuty w excel
::   WE: _a - obiekt z definicją pól który należy zasilić - wynik działania exec('args_fields','#excel_imex')
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

::_tooltip:=MS.name(B_PROC,'SYMBOL')+' '+'(max. %1 znaków). '@[$MS.fld_len(B_PROC,'SYMBOL')];
::_tooltip+='Wymagane.'@;
::_def.define('SYMBOL','Symbol'@,1,,_tooltip);
::
::_tooltip:=MS.name(B_PROC,'NAME')+' '+'(max. %1 znaków). '@[$MS.fld_len(B_PROC,'NAME')];
::_tooltip+='Wymagane.'@;
::_def.define('NAME','Nazwa'@,1,,_tooltip);
::
::_tooltip:=MS.name(B_PROC,'VER')+' '+'(max. %1 znaków). '@[$MS.fld_len(B_PROC,'VER')];
::_tooltip+='Wymagane.'@;
::_def.define('VER','Wersja'@,1,,_tooltip);
::
::_tooltip:=MS.name(B_PROC,'TARGET')+' '+'(max. %1 znaków). '@['32 tys'];
::_def.define('TARGET','Cel'@,1,,_tooltip);
::
::_tooltip:=MS.name(B_PROC,'DESC')+' '+'(max. %1 znaków). '@['32 tys'];
::_def.define('DESC','Opis'@,1,,_tooltip);

_tooltip:='Nazwa pliku .graphml. Wymagane.'@;
_def.define('FILE','Plik'@,1,,_tooltip);
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól tabeli MacroBASE
::                      każdy obiekt ma taką strukturę:
::                        _obj_bridge.NAZWA_POLA.VALUE - wartość która będzie zapisana w EXCEL
::                        _obj_bridge.NAZWA_POLA.EDITABLE - czy komórka będzie edytowalna
::                        _obj_bridge.NAZWA_POLA.COLOR - kolor w formacie html czyli #ffffff
::                      Aktualny wewnętrzny obiekt można podejrzeć tu: exec('filler_obj_core','#excel_imex')
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_obj_bridge:=_b;
_result:=0;
_tab:=_excel.table();
{? _tab.SELECTED='' | _tab.SELECTED='T'
||
   _result:=1;
::   _obj_bridge.SYMBOL.VALUE:=_tab.SYMBOL;
::   _obj_bridge.NAME.VALUE:=_tab.NAME;
::   _obj_bridge.VER.VALUE:=_tab.VER;
   _obj_bridge.FILE.VALUE:=_tab.FILE;
::   _memo:=_tab.memo_txt(,1,'TARGET');
::   _obj_bridge.TARGET.VALUE:=_memo;
::   _memo:=_tab.memo_txt(,1,'DESC');
::   _obj_bridge.DESC.VALUE:=_memo
   ~~
?};
_result


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER   - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obj_new() - obiekt z resultem, wynik działania exec('args_valid','#excel_imex').
::                        Obiekt ten jest przekazywany do formuły na IMPORT. Pole RESULT decyduje czy formuła
::                        na import się wykona. Pole MSG służy to odpisania komunikatu
::----------------------------------------------------------------------------------------------------------------------

_obj:=_a;
_mode:=_b;
_result:=_c;

_can_continue:=1;
_result.RESULT:=1;
:: Walidacja wartości z Excel, czy są w nim pola których się spodziewam i czy mają dobre wartości
::{? _obj.SYMBOL=''
::|| _can_continue:=0;
::   _result.msg_empty('SYMBOL')
::?};
::{? _obj.NAME=''
::|| _can_continue:=0;
::   _result.msg_empty('NAME')
::?};
::{? _obj.VER=''
::|| _can_continue:=0;
::   _result.msg_empty('VER')
::?};
::{? _can_continue>0
::|| _max:=MS.fld_len(B_PROC,'SYMBOL');
::   {? +_obj.SYMBOL>_max
::   || _result.msg_length('SYMBOL',_max);
::      _obj.SYMBOL:=_max+_obj.SYMBOL
::   ?}
::?};
::{? _can_continue>0
::|| _max:=MS.fld_len(B_PROC,'NAME');
::   {? +_obj.NAME>_max
::   || _result.msg_length('NAME',_max);
::      _obj.NAME:=_max+_obj.NAME
::   ?}
::?};
::{? _can_continue>0
::|| _max:=MS.fld_len(B_PROC,'VER');
::   {? +_obj.VER>_max
::   || _result.msg_length('VER',_max);
::      _obj.VER:=_max+_obj.VER
::   ?}
::?};
_dir_on_server:=_result.env.DIR_ON_SERVER;
_obj.FILE:=form(_obj.FILE);

_sep:=exec('sep','#file',_dir_on_server);
_filepath:=_result.dir()+_sep+_obj.FILE;
{? _can_continue>0
||
   {? +_filepath>255
   || _can_continue:=0;
      _result.MSG:='Ścieżka do pliku (katalog i nazwa) nie może być dłuższa niż 255 znaków.'@
   ?}
?};
{? _can_continue>0
|| {? _obj.FILE*'\\'>0 |
      _obj.FILE*'/'>0 |
      _obj.FILE*'<'>0 |
      _obj.FILE*'>'>0 |
      _obj.FILE*':'>0 |
      _obj.FILE*'*'>0 |
      _obj.FILE*'?'>0 |
      _obj.FILE*'\"'>0
   || _can_continue:=0;
      _result.MSG:='Nazwa pliku zawiera niedozwolone znaki.'@
   ?}
?};

{? _can_continue>0
|| _fpath:=_filepath;
   {? _dir_on_server=0
   || _fpath:='@'+_filepath
   ?};
   {? fexists(_fpath,0)=0
   || _can_continue:=0;
      _result.MSG:='Plik: %1 nie istnieje.'@[_filepath]
   ?}
?};

{? _can_continue>0
||
   _env_imex:=ENV_IMEX;
   _env_modeler:=EX_ENV;
   params_set('env_imex',_env_imex,'env',_env_modeler);
   _tab_proc:=_env_imex.TAB_PROC;
   _tab_proc.cntx_psh();
   _tab_proc.index(_env_imex.NDX_PROC_FILE);
   _tab_proc.prefix(_obj.FILE,);
   {? _tab_proc.first()
   ||
      {? _tab_proc.FAST<>'T'
      || _can_continue:=0;
         _result.MSG:='Proces: %1 (%2) został wyeksportowany systemem: %3 w wersji 19.42 lub niższej. '
                      'Jego import jest możliwy wyłącznie z obszaru: %4.'@[_tab_proc.SYMBOL,_tab_proc.VER,exec('nazwa','#system'),'Obsługa procesów'@]
      ?};

      {? _can_continue>0
      ||
         {? _result.env.IMP_PROC=2
         || {? _tab_proc.CRUCIAL='T'
            || _tab_proc.SELECTED:='T'
            ?}
         || _tab_proc.SELECTED:='T'
         ?};

         {? _tab_proc.SELECTED='T'
         ||
            B_PROC.index('SYM');
            B_PROC.prefix('N',REF.FIRMA,_tab_proc.SYMBOL,_tab_proc.VER,);
            {? B_PROC.first()
            || _can_continue:=0;
               _result.MSG:='Proces: %1 w wersji %2 już istnieje.'@[_tab_proc.SYMBOL,_tab_proc.VER];
               ~~
            || _result.ACTION:='add';
               _tab_proc.EXISTS:='N';
               _tab_proc.FILEPATH:=_filepath;
               _tab_proc.FILENAME:=_obj.FILE;
               _can_continue:=_tab_proc.put();
               ~~
            ?}
         ?}
      ?}
   ?};
   _tab_proc.cntx_pop();
   ~~
?};
{? _can_continue=0
|| _result.RESULT:=0
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt z resultem walidatora i resultem importu, wynik działania exec('args_valid','#excel_imex')
::----------------------------------------------------------------------------------------------------------------------

_obj:=_a;
_mode:=_b;
_result:=_c;
_env_imex:=ENV_IMEX;
_env_modeler:=EX_ENV;
params_set('env_imex',_env_imex,'env',_env_modeler);
_can_continue:=1;

{? _result.ACTION='add'
||
   _tab:=_env_imex.TAB_PROC;
   _tab.cntx_psh();
   _tab.index(_env_imex.NDX_PROC_FILE);
   _tab.prefix(_obj.FILE,'T',);
   {? _tab.first()
   || _b_proc:=exec('import_group_single','#b_export',_result.env.DIR_ON_SERVER);
      {? _b_proc<>null()
      || _tab.prefix(_obj.FILE,'T',);
         {? _tab.first()
         || _tab.REF:=$_b_proc;
            _can_continue:=_tab.put()
         || _can_continue:=0
         ?};
         {? _can_continue=0
         || _result.MSG:='Nie udało się zaimportować procesu: %1'@[_obj.FILE]
         ?}
      || _can_continue:=0;
         _result.MSG:='Nie udało się zaimportować procesu: %1'@[_obj.FILE]
      ?}
   ?};
   _tab.cntx_pop();
   ~~
|? _result.ACTION='put'
|| ~~
?};
{? _can_continue=0
|| _result.RESULT:=0
?};
~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - obj_new - środowisko mechanizmu
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_excel:=_b;

_result:=0;

_b_proc:=_excel.table();

_ndx:=_b_proc.ndx_tmp(,,'SELECTED',,,'SYMBOL',,,'NAME',,);
_ndx2:=_b_proc.ndx_tmp(,,'SYMBOL',,,'VER',,);

_b_proc.cntx_psh();
_b_proc.prefix();

_b_proc.index(_ndx2);
{? _b_proc.first()
|| {!
   |?
      _selected.prefix($_b_proc.ref());
      {? _selected.first()
      || _b_proc.SELECTED:='T'
      ?};
      _b_proc.put();
      _b_proc.next()
   !}
?};
_b_proc.first();
_result:=exec('select_action','#table',_b_proc,'ACCEPTED[TN],SYMBOL,NAME,VER',30,'Wybór procesów do eksportu'@);
{? _result>0
||
   _selected.erase();

   _b_proc.index(_ndx);
   _b_proc.prefix('T');
   {? _b_proc.first()
   || {!
      |?
         _selected.prefix($_b_proc.ref());
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=$_b_proc.ref();
            _selected.add()
         ?};
         _b_proc.next()
      !}
   ?};
   _selected.prefix();
   {? _selected.size()>0
   ||
::    Jeżeli coś zaznaczyłem, to resztę niezaznaczonych rekordów stempluję
::    jako SELECTED='N' bo eksportują się również takie SELECTED=''
      _b_proc.prefix();
      {? _b_proc.first()
      || {!
         |? _next:=0;
            _ref_nxt:=null();
            _b_proc.cntx_psh();
            {? _b_proc.next()
            || _ref_nxt:=_b_proc.ref()
            ?};
            _b_proc.cntx_pop();

            _b_proc.prefix();
            {? _b_proc.SELECTED=''
            || _b_proc.SELECTED:='N'
            ?};
            _can_continue:=_b_proc.put();

            {? _ref_nxt<>null()
            || _next:=_b_proc.seek(_ref_nxt)
            ?};
            _next>0 & _can_continue>0
         !}
      ?}
   ||
::    Jeśli nic nie wybrano to wszystkie rekordy ustawiam jako SELECTED='' (stan domyślny)
      _b_proc.prefix();
      {? _b_proc.first()
      || {!
         |? _b_proc.SELECTED:='';
            _can_continue:=_b_proc.put();
            _b_proc.next()
         !}
      ?}
   ?}
?};
_b_proc.ndx_drop(_ndx);
_b_proc.ndx_drop(_ndx2);
_b_proc.cntx_pop();
_result


\table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Przygotowuję tabelkę tymczasową procesów do eksportu
::   WE: _a - INTEGER - 1/2/3 - tryb działania: 1 - eksport wszystkiego
::                                              2 - eksport asynchroniczny jednego rekordu
::                                              3 - eksport wybranych rekordów
::       [_b] - INTEGER - [0]/1 - czy formuła wykonana w czasie inicjalizacji i weryfikacji
::       [_c] - obj_new - środowisko mechanizmu
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=~~;

_mode:=1;
{? var_pres('_a')=type_of(0)
|| _mode:=_a
?};
_init:=0;
{? var_pres('_b')=type_of(0)
|| _init:=_b
?};
_env_excel:=~~;
{? var_pres('_c')>100
|| _env_excel:=_c
?};

{? _init=0
||
   {? var_pres('EX_ENV')<100
   || _env:=exec('env','#b_design');
      EX_ENV:=_env
   || _env:=EX_ENV
   ?};
   _tab:=_env.EXCEL_SEL
?};
{? type_of(_tab)<=0
||
   _tab:=tab_tmp(3,
      'SELECTED','STRING[1]','Wybrano?'
      ,'SYMBOL','STRING[100]','Symbol'@
      ,'NAME','STRING[100]','Nazwa'@
      ,'VER','STRING[30]','Wersja'@
      ,'REF','STRING[16]','SQL Ref'
      ,'ACCEPTED','STRING[1]','Zaakceptowany?'@
      ,'OPIS','STRING[255]','Symbol, nazwa, wersja'
      ,'FILE','STRING[255]','Plik'
      ,'TARGET','SYS_MEMO'   ,'Cel'@
      ,'DESC'  ,'SYS_MEMO'   ,'Opis'@
      ,'UIDREF','STRING[48]' ,'Identyfikator rekordu'
   );
   {? _init=0
   ||
      B_PROC.cntx_psh();
      exec('prefix','xls_proc');
      {? B_PROC.first()
      || {!
         |?
            {? B_PROC.GRAPHMLZ<>null()
            ||
               _tab.blank();
               _tab.REF:=$B_PROC.ref();
               _tab.SYMBOL:=B_PROC.SYMBOL;
               _tab.NAME:=B_PROC.NAME;
               _tab.VER:=B_PROC.VER;
               _tab.ACCEPTED:=B_PROC.ACCEPTED;
               _memo:=B_PROC.memo_txt(,1,'TARGET');
               _tab.memo_set(_memo,'TARGET');
               _memo:=B_PROC.memo_txt(,1,'DESC');
               _tab.memo_set(_memo,'DESC');
               _tab.OPIS:=exec('B_PROC','#to_string');
               _tab.UIDREF:=B_PROC.uidref();
               {? _tab.add()>0
               || _tab.memo_put(,'TARGET');
                  _tab.memo_put(,'DESC')
               ?}
            || {? type_of(_env_excel)>0
               || _msg:='Proces: %1 nie został wyeksportowany ponieważ jest pusty.'@[exec('B_PROC','#to_string')];
                  exec('history_add_exp','#excel_imex',B_PROC,0,'T',_env_excel,_msg)
               ?}
            ?};
            B_PROC.next()
         !}
      ?};
      B_PROC.cntx_pop();
      _env.EXCEL_SEL:=_tab
   ?}
?};
_tab


\prefix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Formuła na prefix
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
B_PROC.index('FIRMA');
B_PROC.prefix(REF.FIRMA,'T');
~~


\before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Formuła przed importem/exportem
::   WE: _a - obj_new - argumenty wejściowe - wynik działania exec('args_before','#excel_imex')
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_result:=0;
_can_continue:=1;
VAR.GRUPA:='T';

VAR_DEL.delete('ENV_IMEX');
VAR_DEL.delete('XLS_PROC_KOMM');
XLS_PROC_KOMM:=obj_new(@.CLASS.JCQ);
{? _args.is_export()>0
||
   exec('table','xls_proc',,,_args.excel);
   _env_modeler:=EX_ENV;
   params_set('env',_env_modeler);
   _env_modeler.EXPORT_SERVER_DIR:='';
   _env_modeler.EXPORT_DIR:=_args.dir();
   {? var_pres('EXPORT_SEL',_env_modeler)>100
   || obj_del(_env_modeler.EXPORT_SEL)
   ?};
   _env_modeler.EXPORT_SEL:=tab_tmp(2
      ,'SYMBOL','STRING[100]','Symbol'
      ,'VER','STRING[30]','Wersja'
      ,'REF','STRING[16]','SQL Ref'
      ,'FILE','STRING[255]','Nazwa plików'
   );

:: Zasilam tablicę tymczasową procesów do eksportu
   _tab:=_env_modeler.EXCEL_SEL;
   _tab.cntx_psh();
   _ndx:=_tab.ndx_tmp(,,'SELECTED',,);
   _ndx2:=_tab.ndx_tmp(,,'REF',,);
   _tab.index(_ndx);
   _tab.prefix();
   {? _tab.first()
   || {!
      |? {? _tab.SELECTED='T' | _tab.SELECTED=''
         ||
            _env_modeler.EXPORT_SEL.blank();
            _env_modeler.EXPORT_SEL.SYMBOL:=_tab.SYMBOL;
            _env_modeler.EXPORT_SEL.VER:=_tab.VER;
            _env_modeler.EXPORT_SEL.REF:=_tab.REF;
            _env_modeler.EXPORT_SEL.add()
         ?};
         _tab.next()
      !}
   ?};

::   _env_modeler.sel4export();
   _client:=1;
   {? _args.dir_on_server()
   || _client:=0
   ?};
   _progress_mode:=0;
   {? _args.excel.PROGRESS>0
   || _progress_mode:=2
   ?};

   {? _can_continue>0
   || _can_continue:=exec('export_new','#b_export',_env_modeler,_progress_mode,_client,0,_args.excel.ARGSPROG)
   ?};

   {? _can_continue>0
   ||
      _tab.index(_ndx2);
      _tab_export:=_env_modeler.EXPORT_SEL;
      {? _tab_export.first()
      || {!
         |? _tab.prefix(_tab_export.REF,);
            {? _tab.first()
            || _tab.FILE:=_tab_export.FILE;
               _tab.put()
            ?};
            _tab_export.next()
         !}
      ?};
      _tab.ndx_drop(_ndx)
   ?};
   _tab.cntx_pop();
   ~~
?};
{? _args.is_import()
||
   KOMM.init(250,,'Import procesów z Excel'@);
   _env:=exec('env','#b_design');
   EX_ENV:=_env;
   _env_imex:=exec('env_imex','#b_export','env',EX_ENV);
   ENV_IMEX:=_env_imex;
   params_set('env_imex',_env_imex,'env',_env);
:: Wczytuję zawartość katalogu
   _dir:=_args.dir()+exec('sep','#file',_args.dir_on_server());
   _can_continue:=exec('import_group_prepare2','#b_export',_dir,1,_env_imex,_args.excel.IMP_PROC,_args.excel.ARGSPROG,,_args.dir_on_server());
   {? _args.excel.PROGRESS>0
   ||
::    Resetuję drugi pasek postępu, bo po wczytaniu plików jest zapełniony
      _args.excel.ARGSPROG.ph_start(2)
   ?};
   ~~
?};
{? _can_continue>0
|| _result:=1
?};
_args.CONTINUE:=_result;
~~


\after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Formuła po imporcie/eksporcie
::   WE: _a - obj_new - argumenty wejściowe - wynik działania exec('args_after','#excel_imex')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_can_continue:=1;

{? _args.is_import()
||
   _env_imex:=ENV_IMEX;
   _env_modeler:=EX_ENV;
   params_set('env_imex',_env_imex,'env',_env_modeler);
   {? _can_continue>0
   ||
::      KOMM.init(250,,'Import procesów z Excel'@);
::      exec('import_group_accept','#b_export',0,0,_close,_args.excel.ARGSPROG,1,_args.dir_on_server());
::    Uruchamiam akceptację procesów ważnych
      exec('accept_crucial','#b_export',0);

      {? var_pres('__IMP_BREAK')>0 & __IMP_BREAK>0
      || _args.MSG:='Import procesów został przerwany przez użytkownika. Należy usunąć wszystkie procesy i wykonać import ponownie.'@
      |? KOMM.empty()=0
      || _args.MSG_DETAILS:=1;
         _args.MSG:='Podczas importu procesów powstały komunikaty lub błędy. Więcej informacji w akcji \'Szczegóły\'.'@
      ?};
      VAR_DEL.delete('XLS_PROC_KOMM');
      XLS_PROC_KOMM:=KOMM;
      VAR_DEL.delete('KOMM');
      KOMM:=obj_new(@.CLASS.JCQ);
      VAR_DEL.delete('__IMP_BREAK');
      ~~
   ?};
   ~~
?};
VAR_DEL.delete('ENV_IMEX');
~~


\details
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Formuła na szczegóły dla komunikaty
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - STRING - treść komunikatu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('XLS_PROC_KOMM')>100
|| XLS_PROC_KOMM.select()
|| FUN.emsg('Szczegóły niedostępne.'@)
?};
~~


\fix_cel_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.02]
:: OPIS: Z katalogu danych wzorcowych z plikiem procesy.proc nanosi pola Cel i Opis na istniejące procesy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_fun:=obj_new(1);
_fun[1]:='b_proc_fix';
_fml:='exec(\'init_alt\',\'xls_proc_fix\',_a)';
exec('import_init','#excel_imex',_fun,_fml);
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 c24d97bd836b1474c90e50a3562ae32cb60cd4efec5d2f5cab4919a919662540c103f9a96b616dd79caf03773654e59d817462413da9566f70de4045ea87b489fbaa04b9087e4a2449ea5add7d16f19bb068345d2384067071b581e37118821e27a674268674a684ee6a422741dacdb584ceb0dbaf081cf2e17dce9df6eb15d3
