:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_ppsft.fml
:: Utworzony: 10.06.2021
:: Autor: DG
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu typów pracy poza siedzibą firmy
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='PPSFT';
_def.FUNPAR:='ZWS_PAR_PPSF';
_def.DOMAIN:=exec('name','#b_domain','PRC');
_def.FILE:=exec('def_per_dict_xlsx','xls__init');
_def.SHEET:='Typy pracy poza siedzibą firmy=1,1';
_def.NAME:='Typy pracy poza siedzibą firmy'@;
_def.DESC:='Typy pracy poza siedzibą firmy';

: źródło danych
_def.TABLE:="PPSFT";

: prolog
_def.BEFORE:="
   {? exec('is_pzd01','ppsf')
   || PPSF_NO.cntx_psh();
      PPSF_NO.prefix();
      PPSFR.cntx_psh();
      PPSFR.prefix();
      R.cntx_psh();
      R.prefix()
   ?};
   PPSFT.cntx_psh();
   PPSFT.index('NAZWA');
   PPSFT.prefix(exec('ref_firma','ustawienia'));
   ~~
";

: epilog
_def.AFTER:="
   PPSFT.cntx_pop();
   {? exec('is_pzd01','ppsf')
   || R.cntx_pop();
      PPSFR.cntx_pop();
      PPSF_NO.cntx_pop()
   ?};
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _pzd01:=exec('is_pzd01','ppsf');
   {? _pzd01
   || _env.define('PPSFR', MS.name(PPSFT,'PPSFR'),1,, MS.comment(PPSFT,'PPSFR'),,0)
   || _env.define('SLO_KOD', MS.name(PPSFT,'SLO_KOD'),1,, MS.comment(PPSFT,'SLO_KOD'),,0)
   ?};
   _env.define('OPIS',    MS.name(PPSFT,'OPIS'),1,,    MS.comment(PPSFT,'OPIS'),,0);
   _env.define('SKL_WN',  MS.name(PPSFT,'SKL_WN'),1,,  MS.comment(PPSFT,'SKL_WN'),,0);
   _env.define('PARTDAY', MS.name(PPSFT,'PARTDAY'),1,, MS.comment(PPSFT,'PARTDAY'),,0);
   _env.define('GEN_G',   MS.name(PPSFT,'GEN_G'),1,,   MS.comment(PPSFT,'GEN_G'),,0);
   _env.define('OSW_WYM', MS.name(PPSFT,'OSW_WYM'),1,, MS.comment(PPSFT,'OSW_WYM'),,0);
   {? ~_pzd01
   || _env.define('OSW_TRE', MS.name(PPSFT,'OSW_TRE'),1,, MS.comment(PPSFT,'OSW_TRE'),,0)
   ?};
   _env.define('SYSTEM',  MS.name(PPSFT,'SYSTEM'),1,,  MS.comment(PPSFT,'SYSTEM'),,0);
   {? _pzd01
   || _env.define('R',       MS.name(PPSFT,'R'),1,,       MS.comment(PPSFT,'R'),1,0);
      _env.define('SKL_RCP', MS.name(PPSFT,'SKL_RCP'),1,, MS.comment(PPSFT,'SKL_RCP'),,0);
      _env.define('PPSF_NO', MS.name(PPSFT,'PPSF_NO'),1,, MS.comment(PPSFT,'PPSF_NO'),,0);
      _env.define('OSW_WZA', MS.name(PPSFT,'OSW_WZA'),1,, MS.comment(PPSFT,'OSW_WZA'),,0)
   ?};
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _pzd01:=exec('is_pzd01','ppsf');
   {? _pzd01
   || _buf.PPSFR.VALUE:=PPSFT.PPSFR().KOD
   || _buf.SLO_KOD.VALUE:=PPSFT.SLO_KOD().KOD
   ?};
   _buf.OPIS.VALUE:=PPSFT.OPIS;
   _buf.SKL_WN.VALUE:=PPSFT.SKL_WN;
   _buf.PARTDAY.VALUE:=PPSFT.PARTDAY;
   _buf.GEN_G.VALUE:=PPSFT.GEN_G;
   _buf.OSW_WYM.VALUE:=PPSFT.OSW_WYM;
   {? ~_pzd01
   || _buf.OSW_TRE.VALUE:=PPSFT.memo_txt(0,1,'OSW_TRE')
   ?};
   _buf.SYSTEM.VALUE:=PPSFT.SYSTEM;
   {? _pzd01
   || _buf.R.VALUE:=PPSFT.R().RN;
      _buf.SKL_RCP.VALUE:=PPSFT.SKL_RCP;
      _buf.PPSF_NO.VALUE:=PPSFT.PPSF_NO().KOD;
      _buf.OSW_WZA.VALUE:=PPSFT.OSW_WZA;
      _env.write_async('PPSFR',PPSFT.PPSFR);
      _env.write_async('RUBRYKI',exec('r','xls__util'));
      _env.write_async('PPSF_NO',PPSFT.PPSF_NO)
   || _env.write_async('SLO_KOD',PPSFT.SLO_KOD)
   ?};
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_ppsft',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_ppsft',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

_pzd01:=exec('is_pzd01','ppsf');
: wychwyć błędy krytyczne
_fld:=
   {? ~_pzd01 & _buf.SLO_KOD='' || 'SLO_KOD'
   |? _pzd01 & _buf.PPSFR=''   || 'PPSFR'
   |? _buf.OPIS=''    || 'OPIS'
   |? _buf.SKL_WN=''  || 'SKL_WN'
   |? _buf.PARTDAY='' || 'PARTDAY'
   |? _buf.GEN_G=''   || 'GEN_G'
   |? _buf.SYSTEM=''  || 'SYSTEM'
   |? _pzd01 & _buf.OSW_WYM=''   || 'OSW_WYM'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: błędne wartości
{? ('NT'*_buf.SKL_WN)=0
|| _val.msg_inset('SKL_WN','N','T');
   _val.RESULT:=0;
   return()
|? ('NT'*_buf.PARTDAY)=0
|| _val.msg_inset('PARTDAY','N','T');
   _val.RESULT:=0;
   return()
|? ('BGW'*_buf.GEN_G)=0
|| _val.msg_inset('GEN_G','B','G','W');
   _val.RESULT:=0;
   return()
|? ('NT'*_buf.SYSTEM)=0
|| _val.msg_inset('SYSTEM','N','T');
   _val.RESULT:=0;
   return()
|? _pzd01 & ('NT'*_buf.OSW_WYM)=0
|| _val.msg_inset('OSW_WYM','N','T');
   _val.RESULT:=0;
   return()
|? _pzd01 & +_buf.SKL_RCP & ('NT'*_buf.SKL_RCP)=0
|| _val.msg_inset('SKL_RCP','N','T');
   _val.RESULT:=0;
   return()
|? _pzd01 & +_buf.OSW_WZA & ('NT'*_buf.OSW_WZA)=0
|| _val.msg_inset('OSW_WZA','N','T');
   _val.RESULT:=0;
   return()
?};
::{? _buf.LIM<0
::|| _val.msg_range('LIM',0);
::   _val.RESULT:=0;
::   return()
::?};

: ostrzeżenia
{? _pzd01
|| _max:=MS.fld_len(PPSFR,'KOD');
   {? +_buf.PPSFR>_max
   || _val.msg_length('PPSFR',_max);
      _buf.PPSFR:=_max+_buf.PPSFR
   ?};
   _max:=MS.fld_len(PPSF_NO,'KOD');
   {? +_buf.PPSF_NO>_max
   || _val.msg_length('PPSF_NO',_max);
      _buf.PPSF_NO:=_max+_buf.PPSF_NO
   ?};
   {? ~+_buf.SKL_RCP
   || _val.msg_value('SKL_RCP','Niewypełnione pole. Zostanie wypełnione wartością początkową: N.');
      _buf.SKL_RCP:='N'
   ?};
   {? ~+_buf.OSW_WZA
   || _val.msg_value('OSW_WZA','Niewypełnione pole. Zostanie wypełnione wartością początkową: N.');
      _buf.OSW_WZA:='N'
   ?}
|| _max:=MS.fld_len(SLO_KOD,'KOD');
   {? +_buf.SLO_KOD>_max
   || _val.msg_length('SLO_KOD',_max);
      _buf.SLO_KOD:=_max+_buf.SLO_KOD
   ?}
?};
_max:=MS.fld_len(PPSFT,'OPIS');
{? +_buf.OPIS>_max
|| _val.msg_length('OPIS',_max);
   _buf.OPIS:=_max+_buf.OPIS
?};
{? _pzd01
|| _firma:=exec('firma','ustawienia');
   _ppsfr:=null();
   {? _buf.PPSFR<>''
   || {? ~PPSFR.find_tab(,
            'FIRMA',,'=',_firma,
            'KOD',,'=',_buf.PPSFR
         )
      || _val.msg_norec('PPSFR');
         _val.RESULT:=0;
         return()
      || _ppsfr:=PPSFR.ref()
      ?}
   ?};
   _rub:=null();
   {? _buf.R<>0
   || {? ~R.find_tab(,
            'RN',,'=',_buf.R
         )
      || _val.msg_norec('R');
         _val.RESULT:=0;
         return()
      || _rub:=R.ref()
      ?}
   ?};
   _ppsfNo:=null();
   {? _buf.PPSF_NO<>''
   || {? ~PPSF_NO.find_tab(,
            'FIRMA',,'=',_firma,
            'KOD',,'=',_buf.PPSF_NO
         )
      || _val.msg_norec('PPSF_NO');
         _val.RESULT:=0;
         return()
      || _ppsfNo:=PPSF_NO.ref()
      ?}
   ?};
: weryfikacja spójności referencyjnej
   _ref:=null;
   {? PPSFT.find_tab(,
            'FIRMA',,'=',_firma,
         'OPIS',,'=',_buf.OPIS,
            'PPSFR',,'=',_ppsfr,
            'PARTDAY',,'=',_buf.PARTDAY
      )
   || _ref:=PPSFT.ref();
      _val.ACTION:='put'
   || _val.ACTION:='add'
   ?};

: optymalizacja importu i standaryzacja kodu
   _val.OBJ:=exec('write_obj','xls__util',_ref,
      "'%1 %2'[_a.PPSFR,_a.OPIS]",
      'PPSFR',_ppsfr,
      'PPSF_NO',_ppsfNo,
      'R',_rub
   )
|| _max:=exec('osw_tre_ln','ppsf');
   {? +_buf.OSW_TRE>_max
   || _val.msg_length('OSW_TRE',_max);
      _buf.OSW_TRE:=_max+_buf.OSW_TRE
   ?};

   {? (_kod:=exec('kod','ext_slo','PPSFT',_buf.SLO_KOD))=null
   || _val.msg_norec('SLO_KOD');
      _val.RESULT:=0;
      return()
   ?};

: weryfikacja spójności referencyjnej
   _ref:=null;
   {? PPSFT.find_tab(,
         'OPIS',,'=',_buf.OPIS,
         'SLO_KOD',,'=',_kod
      )
   || _ref:=PPSFT.ref();
      _val.ACTION:='put'
   || _val.ACTION:='add'
   ?};

: optymalizacja importu i standaryzacja kodu
   _val.OBJ:=exec('write_obj','xls__util',_ref,
      "'%1 %2'[_a.SLO_KOD,_a.OPIS]",
      'SLO_KOD',_kod
   )
?};

~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,PPSFT,"
   _pzd01:=exec('is_pzd01','ppsf');
   {? _pzd01
   || _a.PPSFR:=_c.PPSFR
   || _a.SLO_KOD:=_c.SLO_KOD
   ?};
   _a.OPIS:=_b.OPIS;
   _a.SKL_WN:=_b.SKL_WN;
   _a.PARTDAY:=_b.PARTDAY;
   _a.GEN_G:=_b.GEN_G;
   _a.OSW_WYM:=_b.OSW_WYM;
   {? ~_pzd01
   || _a.memo_set(_b.OSW_TRE,'OSW_TRE')
   ?};
   _a.SYSTEM:=_b.SYSTEM;
   {? _pzd01
   || _a.R:=_c.R;
      _a.SKL_RCP:=_b.SKL_RCP;
      _a.PPSF_NO:=_c.PPSF_NO;
      _a.OSW_WZA:=_b.OSW_WZA
   ?};
   ~~
",{? ~exec('is_pzd01','ppsf') || 'OSW_TRE' || '' ?});
~~

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:34 e089567465829472fa7de2d1aa6750c1ada442db2e87f9750106adc9793292b27db1187b1f16626f0f1c2a4c9f8d57a50f4f09d412934f3f87ab8a53d72050f250aa6e3d31fac9d2b9d099fafd609c7af92f144678659bd5a84cd8a42210e205ef0eb1ad5c8a7e160a9765fec0ca50ee268dd8cc22ca325f45ed7b05015c0be2
