:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_toper.fml
:: Utworzony: 11.08.2020
:: Autor: AKUL
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu operacji kart technologicznych
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TOPER';
_def.DOMAIN:=exec('name','#b_domain','TTE');
_def.FUNPAR:='TKTL';
_def.HIDDEN:='T';
_def.SKIP:='T';
_def.ADD_ROWS:=0;

_def.FILE:='produkcja_technologie.xlsx';
_def.SHEET:='Operacje'@+'=1,1';
_def.NAME:='Operacje technologiczne'@;
_def.DESC:='Operacje/czynności procesu technologicznego'@;

_def.PREFIX:="TOPER.index('ANNN'); TOPER.prefix()";
_def.TABLE:="TOPER";
_def.FIELDS:="exec('fields','xls_toper',_a)";

_def.BEFORE:="TOPER.cntx_psh()";
_def.AFTER:="
   {? _a.is_import()
   || exec('tktl_import_clear','tech_common',_a.excel);
::    Odtworzenie powiązań pomiędzy operacjami
      {? __NASTOPER.size()>0 & __NASTOPER.first()
      || NASTOPER.cntx_psh();
         TOPER.cntx_psh();
         NASTOPER.index('OPER');
         NASTOPER.prefix();
         {!
         |?
            _tktl:=exec('FindAndGet','#table','TKTL',__NASTOPER.TKTL,,,null());
            _toper:=exec('FindAndGet','#table','TOPER',__NASTOPER.TOPER,,,null());
            _nastoper:=exec('FindInSet','#table','TOPER','UNROP',__NASTOPER.NASTOPER,,,,,null());
            {? _tktl<>null() & _toper<>null() & _nastoper<>null()
            || NASTOPER.blank();
               NASTOPER.KTL:=_tktl;
               NASTOPER.OPER:=_toper;
               NASTOPER.NRNAST:=_nastoper;
               NASTOPER.ACT='T';
               NASTOPER.SCIEZKA:=exec('get_oper_nr','tech_oper',NASTOPER.NRNAST().UNROP);
               NASTOPER.add(1)
            ?};
            __NASTOPER.next()
         !};
         TOPER.cntx_pop();
         NASTOPER.cntx_pop()
      ?}
   ?};
   TOPER.cntx_pop()
";
::_def.SELECT:="exec('select','xls_toper',_a)";

_def.EXPORT:="exec('export','xls_toper',_a,_b)";
_def.VALIDATE:="exec('validate','xls_toper',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_toper',_a,_b,_c)";
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
::_dokl_czas:=exec('get','#params',500604,1);
_edit:=0;
_def.define('TKTL_NRK','Nr karty'@,_edit);
_def.define('TKTL_WER','Wersja karty'@,_edit);
_def.define('NROP','Nr operacji'@,_edit,,,,0);
_def.define('UNROP','Unikalny numer operacji'@,_edit,,,type_of(''));
_def.define('NRNOP','Nr operacji nadrzędnej'@,_edit,,,type_of(''));
_def.define('OPER','Operacja'@,_edit);
_def.define('NA','Nazwa operacji'@,_edit);
_def.define('PLACE','Stanowisko'@,_edit);
_def.define('PLNX','Płaca na XJM'@,_edit,,'Płaca na x jednostek miar wykonanego wyrobu',,4);
_def.define('PLNH','Płaca na godzinę'@,_edit,,,,4);
_def.define('NTIME','Norma czasowa'@,_edit,,,type_of(''));
_def.define('TPZ','TPZ'@,_edit,,'Czy operacja jest Czasem Przygotowawczo Zakończeniowym (TPZ) - [T]/[N]');
_def.define('PZ','Prosta/Złożona'@,_edit,,'[P]/[Z]');
_def.define('COEF','Współczynnik'@,_edit,,'Współczynnik PLN / godzinę',type_of(''));
_def.define('BRYG','Brygada'@,_edit,,'Znacznik czy operację wykonuje brygada - [T]/[N]');
_def.define('ALL','Równolegle'@,_edit,,'Znacznik czy operacja jest wykonywana równolegle? - [T]/[N]');
_def.define('EXIST','Warunek'@,_edit,,'Warunek obecności operacji w procesie technologicznym');
_def.define('FCOEF','Formuła na Współczynnik'@,_edit);
_def.define('FNTIME','Formuła na normę czasową'@,_edit);
_def.define('WEW','Wewnętrzna'@,_edit,,'Operacja wewnętrzna - [T], lub na zewnątrz (kooperacja) - [N]');
_def.define('CENA','Cena/XJM'@,_edit,,'Cena operacji wykonywanej na zewnątrz (w kooperacji)',,4);
_def.define('FCENA','Formuła na cenę'@,_edit,,'Znacznik czy operację wykonuje brygada - [T]/[N]');
_def.define('PFAZ','Faza produkcji'@,_edit);
_def.define('MTIME','Czas maszynowy'@,_edit,,,type_of(''));
_def.define('FMTIME','Formuła na czas maszynowy'@,_edit);
_def.define('KH','Koszt godz. stanow.'@,_edit,,'Koszt godziny pracy stanowiska',,4);
_def.define('KX','Koszt pracy stanowiska'@,_edit,,,,4);
_def.define('OPIS','Opis'@,_edit);
_def.define('TTOUT','Operacja zewnętrzna'@,_edit,,'Taryfikator operacji zewnętrznych (kooperacji)');
_def.define('DOK','Dokument'@,_edit,,'Typ dokumentu tworzonego po operacji');
_def.define('TTM','Czas odczekania'@,_edit,,'Czas o ile operacja będzie odsunięta od poprzedniej'
            ,type_of(''));
_def.define('FTTM','Formuła na czas odczekania'@,_edit);
_def.define('NKO','Nakładkowanie operacji'@,_edit,,'O ile można nałożyć tą operację na poprzednią',type_of(''));
_def.define('FNKO','Formuła na nakładkowanie'@,_edit);
_def.define('ACT','Aktualny'@,_edit,,'Znacznik aktualności elementu - [T]/[N]');
_def.define('CRE_TIME','Czas powołania elementu'@,_edit,,,type_of(''));
_def.define('OD','Obowiązuje od'@,_edit);
_def.define('USER','Zmieniał'@,_edit,,'Operator, który zmieniał element');
_def.define('CAUSE','Powód zmiany'@,_edit);
_def.define('GRPOJ','Grupa/pojedyncze'@,_edit,,'Grupa stanowisk (gniazdo) - [G], pojedyncze stanowisko - [S]');
_def.define('GRUPA','Gniazdo produkcyjne'@,_edit);
_def.define('TWRKPLG','Element domyślny gniazda'@,_edit);
_def.define('TPZREF','Nr operacji TPZ'@,_edit,,'Unikalny numer operacji do której przypisujemy TPZ',type_of(''));
_def.define('ZAW','Zawód do TPZ'@,_edit,,'Typ dokumentu tworzonego po operacji');
_def.define('CIAGLA','Ciągła'@,_edit);
_def.define('OPISMEMO','Opis szczegółowy'@,_edit);
_def.define('DAYS_K','Ilość dni na kooperację'@,_edit,,'Szacunkowa ilość dni na kooperację',,0);
_def.define('PX_KONT','Zasób planistyczny'@,_edit);
_def.define('KONTRAH','Kontrahent'@,_edit);
_def.define('PL_GRP','Grupowe planowanie'@,_edit,,'Operacja może być planowana grupowo - [T]/[N]');
_def.define('SRW','Sposób rejestracji wykonania'@,_edit,,'Sposób rejestracji wykonania [M]agazyn, [S]tandardowo');
_def.define('MOD_TIME','Czas modyfikacji elementu'@,_edit,,,type_of(''));
_def.define('KONTROLA','Operacja kontrola jakości'@,_edit,,'Czy operacja jest kontrolą jakości - [T]/[N]');
_def.define('KJ_BAD','Kontrola jakości - badania'@,_edit,
   ,'Sposób potwierdzania kontroli jakości: Brak - [N], Potwierdzanie ilości - [P], Zestaw badań - [B]');
_def.define('BADSEH','Kontrola jakości - zestaw badań'@,_edit);
_def.define('FIX_NORM','Stała norma czasowa'@,_edit,,'Czy stała norma czasowa niezależna od ilości - [T]/[N]');
_def.define('NASTOPER','Następniki'@,_edit,,'Lista unikalnych numerów operacji następników oddzielonych przecinkiem');
_def.define('BAD_OP','Wykonywanie operacji - zestaw badań'@,_edit
            ,,'Zestaw badań używany w trakcie wykonywania operacji');
_def.define('WHERE','Miejsce występowania'@,_edit
            ,,'Operacja na przewodniku: [P] - Tylko pierwszym, [O] - tylko ostatnim, [W] - wszystkich');
_def.define('WYK_FAST','Szybka rejestracja'@,_edit,,'Operacja będzie rejestrowana w szybki sposób - [T]/[N]');
_def.define('NO_START','Pomiń start'@,_edit,,'Operacja na e-kiosku będzie rejestrowana bez startowania - [T]/[N]');
~~


\record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
TOPER.prefix();
{? _validate.ACTION='add'
|| TOPER.blank();
   TOPER.UNROP:=#_obj.UNROP
?};
TOPER.NRK:=_validate.OBJ.NRK;
TOPER.NROP:=_obj.NROP;
TOPER.NRNOP:=#_obj.NRNOP;
TOPER.OPER:=_validate.OBJ.OPER;
TOPER.NA:=_obj.NA;
TOPER.PLACE:=_validate.OBJ.PLACE;
TOPER.PLNX:=_obj.PLNX;
TOPER.PLNH:=_obj.PLNH;
TOPER.NTIME:=exec('str2real','#convert',_obj.NTIME); TOPER.NTIME_T:=exec('float2time','#convert',TOPER.NTIME);
TOPER.TPZ:=_obj.TPZ;
TOPER.PZ:=_obj.PZ;
TOPER.COEF:=exec('str2real','#convert',_obj.COEF);
TOPER.BRYG:=_obj.BRYG;
TOPER.ALL:=_obj.ALL;
TOPER.EXIST:=_obj.EXIST;
TOPER.FCOEF:=_obj.FCOEF;
TOPER.FNTIME:=_obj.FNTIME;
TOPER.WEW:=_obj.WEW;
TOPER.CENA:=_obj.CENA;
TOPER.FCENA:=_obj.FCENA;
TOPER.PFAZ:=_validate.OBJ.PFAZ;
TOPER.MTIME:=exec('str2real','#convert',_obj.MTIME); TOPER.MTIME_T:=exec('float2time','#convert',TOPER.MTIME);
TOPER.FMTIME:=_obj.FMTIME;
TOPER.KH:=_obj.KH;
TOPER.KX:=_obj.KX;
TOPER.OPIS:=_obj.OPIS;
TOPER.TTOUT:=_validate.OBJ.TTOUT;
TOPER.DOK:=_validate.OBJ.DOK;
TOPER.TTM:=exec('str2real','#convert',_obj.TTM); TOPER.TTM_T:=exec('float2time','#convert',TOPER.TTM);
TOPER.FTTM:=_obj.FTTM;
TOPER.NKO:=exec('str2real','#convert',_obj.NKO); TOPER.NKO_T:=exec('float2time','#convert',TOPER.NKO);
TOPER.FNKO:=_obj.FNKO;
TOPER.ACT:=_obj.ACT;
TOPER.CRE_TIME:=#_obj.CRE_TIME;
TOPER.OD:=_obj.OD;
TOPER.USER:=_validate.OBJ.USER;
TOPER.CAUSE:=_validate.OBJ.CAUSE;
TOPER.GRPOJ:=_obj.GRPOJ;
TOPER.GRUPA:=_validate.OBJ.GRUPA;
TOPER.TWRKPLG:=_validate.OBJ.TWRKPLG;
TOPER.TPZREF:=#_obj.TPZREF;
TOPER.ZAW:=_validate.OBJ.ZAW;
TOPER.CIAGLA:=_obj.CIAGLA;
TOPER.memo_set(_obj.OPISMEMO,'OPISMEMO');
TOPER.DAYS_K:=_obj.DAYS_K;
TOPER.PX_KONT:=_validate.OBJ.PX_KONT;
TOPER.KONTRAH:=_validate.OBJ.KONTRAH;
TOPER.PL_GRP:=_obj.PL_GRP;
TOPER.SRW:=_obj.SRW;
TOPER.MOD_TIME:=#_obj.MOD_TIME;
TOPER.KONTROLA:=_obj.KONTROLA;
TOPER.KJ_BAD:=_obj.KJ_BAD;
TOPER.BADSEH:=_validate.OBJ.BADSEH;
TOPER.FIX_NORM:=_obj.FIX_NORM;
TOPER.BAD_OP:=_validate.OBJ.BAD_OP;
TOPER.TKTL_KTM:=exec('FindAndGet','#table',TKTL,TOPER.NRK,,"KTM",null());
TOPER.WHERE:=_obj.WHERE;
TOPER.WYK_FAST:=_obj.WYK_FAST;
TOPER.NO_START:=_obj.NO_START;
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.TKTL_NRK.VALUE:=TOPER.NRK().NRK;
_table.TKTL_WER.VALUE:=TOPER.NRK().WER;
_table.NROP.VALUE:=TOPER.NROP;
:: Generuję nowy unikalny nr operacji oraz mapuję go z bieżącym
_table.UNROP.VALUE:={? ~__TOPER_MAP.find_key(TOPER.UNROP)
                    || _unrop:=TOPER.tm_stamp();
                       __TOPER_MAP.OLD:=TOPER.UNROP;
                       __TOPER_MAP.NEW:=_unrop;
                       __TOPER_MAP.add();
                       $_unrop
                    || $__TOPER_MAP.NEW
                    ?};
_table.NRNOP.VALUE:={? __TOPER_MAP.find_key(TOPER.NRNOP)
                    || $__TOPER_MAP.NEW
                    |? TOPER.NRNOP<>0
                    ||
::                      Generuję nowy unikalny nr operacji oraz mapuję go z bieżącym
                        _unrop:=TOPER.tm_stamp();
                       __TOPER_MAP.OLD:=TOPER.NRNOP;
                       __TOPER_MAP.NEW:=_unrop;
                       __TOPER_MAP.add();
                       $_unrop
                    || '0'
                    ?};
_table.OPER.VALUE:=TOPER.OPER().KOD;
_table.NA.VALUE:=TOPER.NA;
_table.PLACE.VALUE:=TOPER.PLACE().KOD;
_table.PLNX.VALUE:=TOPER.PLNX;
_table.PLNH.VALUE:=TOPER.PLNH;
_table.NTIME.VALUE:=exec('to_string','#convert',TOPER.NTIME);
_table.TPZ.VALUE:=TOPER.TPZ;
_table.PZ.VALUE:=TOPER.PZ;
_table.COEF.VALUE:=exec('to_string','#convert',TOPER.COEF);
_table.BRYG.VALUE:=TOPER.BRYG;
_table.ALL.VALUE:=TOPER.ALL;
_table.EXIST.VALUE:=TOPER.EXIST;
_table.FCOEF.VALUE:=TOPER.FCOEF;
_table.FNTIME.VALUE:=TOPER.FNTIME;
_table.WEW.VALUE:=TOPER.WEW;
_table.CENA.VALUE:=TOPER.CENA;
_table.FCENA.VALUE:=TOPER.FCENA;
_table.PFAZ.VALUE:=TOPER.PFAZ().KOD;
_table.MTIME.VALUE:=exec('to_string','#convert',TOPER.MTIME);
_table.FMTIME.VALUE:=TOPER.FMTIME;
_table.KH.VALUE:=TOPER.KH;
_table.KX.VALUE:=TOPER.KX;
_table.OPIS.VALUE:=TOPER.OPIS;
_table.TTOUT.VALUE:=TOPER.TTOUT().KOD;
_table.DOK.VALUE:=TOPER.DOK().T;
_table.TTM.VALUE:=exec('to_string','#convert',TOPER.TTM);
_table.FTTM.VALUE:=TOPER.FTTM;
_table.NKO.VALUE:=exec('to_string','#convert',TOPER.NKO);
_table.FNKO.VALUE:=TOPER.FNKO;
_table.ACT.VALUE:=TOPER.ACT;
_table.CRE_TIME.VALUE:=$TOPER.CRE_TIME;
_table.OD.VALUE:=TOPER.OD;
_table.USER.VALUE:=TOPER.USER().KOD;
_table.CAUSE.VALUE:=TOPER.CAUSE().NAZ;
_table.GRPOJ.VALUE:=TOPER.GRPOJ;
_table.GRUPA.VALUE:=TOPER.GRUPA().SYMBOL;
_table.TWRKPLG.VALUE:=TOPER.TWRKPLG().KOD_;
:: Wyszukuje nowy nr operacji z tablicy mapującej
_table.TPZREF.VALUE:={? __TOPER_MAP.find_key(TOPER.TPZREF)
                    || $__TOPER_MAP.NEW
                    |? TOPER.TPZREF<>0
                    ||
::                      Generuję nowy unikalny nr operacji oraz mapuję go z bieżącym
                        _unrop:=TOPER.tm_stamp();
                       __TOPER_MAP.OLD:=TOPER.TPZREF;
                       __TOPER_MAP.NEW:=_unrop;
                       __TOPER_MAP.add();
                       $_unrop
                    || '0'
                    ?};
_table.ZAW.VALUE:=TOPER.ZAW().ZD;
_table.CIAGLA.VALUE:=TOPER.CIAGLA;
_table.OPISMEMO.VALUE:=TOPER.memo_txt(,1,'OPISMEMO');
_table.DAYS_K.VALUE:=TOPER.DAYS_K;
_table.PX_KONT.VALUE:=TOPER.PX_KONT().SYMBOL;
_table.KONTRAH.VALUE:=TOPER.KONTRAH().KOD;
_table.PL_GRP.VALUE:=TOPER.PL_GRP;
_table.SRW.VALUE:=TOPER.SRW;
_table.MOD_TIME.VALUE:=$TOPER.MOD_TIME;
_table.KONTROLA.VALUE:=TOPER.KONTROLA;
_table.KJ_BAD.VALUE:=TOPER.KJ_BAD;
_table.BADSEH.VALUE:=TOPER.BADSEH().N;
_table.FIX_NORM.VALUE:=TOPER.FIX_NORM;
_table.BAD_OP.VALUE:=TOPER.BAD_OP().N;
_table.WHERE.VALUE:=TOPER.WHERE;
_table.WYK_FAST.VALUE:=TOPER.WYK_FAST;
_table.NO_START.VALUE:=TOPER.NO_START;

:: Następniki operacji
_nastoper:='';
TOPER.cntx_psh();
NASTOPER.cntx_psh();
NASTOPER.use('txnst___');
NASTOPER.cntx_psh();
NASTOPER.index('OPER');
NASTOPER.prefix('T',TOPER.NRK,TOPER.ref);
{? NASTOPER.first()
||
   {!
   |?
      {? __TOPER_MAP.find_key(NASTOPER.NRNAST().UNROP)
      || _nastoper+=$__TOPER_MAP.NEW+','
      || _unrop:=TOPER.tm_stamp();
         __TOPER_MAP.OLD:=NASTOPER.NRNAST().UNROP;
         __TOPER_MAP.NEW:=_unrop;
         __TOPER_MAP.add();
         _nastoper+=$_unrop+','
      ?};
      NASTOPER.next()
   !}
?};
NASTOPER.cntx_pop();
NASTOPER.cntx_pop();
TOPER.cntx_pop();
_table.NASTOPER.VALUE:=_nastoper-1;

:: Zamienniki stanowisk
TOPER.cntx_psh();
TECHZAMS.cntx_psh();
TECHZAMS.use('txzms___');
TECHZAMS.cntx_psh();
TECHZAMS.index('ATTL');
TECHZAMS.prefix('T',TOPER.NRK,TOPER.ref);
{? TECHZAMS.first()
||
   {!
   |?
      _excel.write_async('TECHZAMS',TECHZAMS.ref());
      TECHZAMS.next()
   !}
?};
TECHZAMS.cntx_pop();
TECHZAMS.cntx_pop();
TOPER.cntx_pop();

:: Atrybuty operacji
TOPER.cntx_psh();
UAT.cntx_psh();
UAT.index('TR');
UAT.prefix('TOPER*',#TOPER.ref,'txope___');
{? UAT.first()
||
   {!
   |?
      _excel.write_async('TUAT',UAT.ref());
      UAT.next()
   !}
?};
UAT.cntx_pop();
TOPER.cntx_pop();

_result


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('NRK','OPER','PLACE','PFAZ','TTOUT','DOK','USER','CAUSE','GRUPA','TWRKPLG','ZAW','PX_KONT'
                     ,'KONTRAH','BADSEH','BAD_OP');
_imp_err:=0;
_check:=1;

:: Sprawdzam czy do karty zgłoszony został błąd
{? __TKTL_ERR.find_key(_obj.TKTL_NRK,_obj.TKTL_WER,)
|| _imp_err:=1
?};
:: Jeżeli wcześniej został zgłoszony błąd to wychodzę wcześniej bez dodatkowej walidacji
{? _imp_err>0
|| _result.RESULT:=0
||
:: Wyszukanie refów powiązanych rekordów
   _result.OBJ.NRK:={? _obj.TKTL_NRK='' | _obj.TKTL_WER=''
                    || null()
                    || exec('FindInSet','#table','TKTL','NRK',_obj.TKTL_WER,'T',,1,_obj.TKTL_NRK,null())
                    ?};
   _result.OBJ.OPER:={? _obj.OPER=''
                     || null()
                     || exec('FindInSet','#table','TTOPER','KOD',_obj.OPER,,,1,,null())
                     ?};
   _result.OBJ.PLACE:={? _obj.PLACE=''
                      || null()
                      || exec('FindInSet','#table','TWRKPLC','KOD',_obj.PLACE,,,1,,null())
                      ?};
   _result.OBJ.PFAZ:={? _obj.PFAZ=''
                     || null()
                     || exec('FindInSet','#table','PFAZ','KOD',_obj.PFAZ,,,1,,null())
                     ?};
   _result.OBJ.TTOUT:={? _obj.TTOUT=''
                      || null()
                      || exec('FindInSet','#table','TTOUT','KOD',_obj.TTOUT,,,1,,null())
                      ?};
   _result.OBJ.DOK:={? _obj.DOK=''
                     || null()
                     || exec('FindInSet','#table','TYPYDOK','TYP',_obj.DOK,,,1,,null())
                     ?};
   _result.OBJ.USER:={? _obj.USER=''
                     || null()
                     || exec('FindInSet','#table','USERS','USR_KKOD',_obj.USER,,,1,,null())
                     ?};
   _result.OBJ.CAUSE:={? _obj.CAUSE=''
                      || null()
                      || exec('FindInSet','#table','TTXCAUSE','NAZ',_obj.CAUSE,,,1,,null())
                      ?};
   _result.OBJ.GRUPA:={? _obj.GRUPA=''
                      || null()
                      || exec('FindInSet','#table','TWRKZBR','SYM',_obj.GRUPA,,,1,,null())
                      ?};
   _result.OBJ.TWRKPLG:={? _obj.TWRKPLG='' | _result.OBJ.GRUPA=null()
                        || null()
                        || _place:=exec('FindInSet','#table','TWRKPLC','KOD',_obj.TWRKPLG,,,1,,null());
                           exec('FindInSet','#table','TWRKZPO','GRUPA',_place,_result.OBJ.GRUPA,,,,null())
                        ?};
   _result.OBJ.ZAW:={? _obj.ZAW=''
                    || null()
                    || exec('FindInSet','#table','ZAW','ZAWODNAZ',_obj.ZAW,,,1,,null())
                    ?};
   _result.OBJ.PX_KONT:={? _obj.PX_KONT=''
                        || null()
                        || _ver:=exec('get_mainversion','px_ver');
                           exec('FindInSet','#table','PX_KONT','ACT',_obj.PX_KONT,'T',,1,_ver,null())
                        ?};
   _result.OBJ.KONTRAH:={? _obj.KONTRAH=''
                        || null()
                        || exec('FindInSet','#table','KH','KOD',_obj.KONTRAH,2,,1,,null())
                        ?};
   _result.OBJ.BADSEH:={? _obj.BADSEH=''
                       || null()
                       || exec('FindInSet','#table','BADSEH','NN',_obj.BADSEH,,,1,,null())
                       ?};
   _result.OBJ.BAD_OP:={? _obj.BAD_OP=''
                       || null()
                       || exec('FindInSet','#table','BADSEH','NN',_obj.BAD_OP,,,1,,null())
                       ?};
:: Ostrzeżenia
   {? _obj.USER<>'' & _result.OBJ.USER=null()
   || _result.msg_norec('USER')
   ?};

:: Błędy
   {? _result.OBJ.NRK=null()
   || _result.msg_norec('TKTL_NRK');
      _result.RESULT:=0
   ?};
   {? _obj.OPER<>'' & _result.OBJ.OPER=null()
   || _result.msg_norec('OPER');
      _result.RESULT:=0
   ?};
   {? _obj.PLACE<>'' & _result.OBJ.PLACE=null()
   || _result.msg_norec('PLACE');
      _result.RESULT:=0
   ?};
   {? _obj.PFAZ<>'' & _result.OBJ.PFAZ=null()
   || _result.msg_norec('PFAZ');
      _result.RESULT:=0
   ?};
   {? _obj.TTOUT<>'' & _result.OBJ.TTOUT=null()
   || _result.msg_norec('TTOUT');
      _result.RESULT:=0
   ?};
   {? _obj.DOK<>'' & _result.OBJ.DOK=null()
   || _result.msg_norec('DOK');
      _result.RESULT:=0
   ?};
   {? _obj.CAUSE<>'' & _result.OBJ.CAUSE=null()
   || _result.msg_norec('CAUSE');
      _result.RESULT:=0
   ?};
   {? _obj.GRUPA<>'' & _result.OBJ.GRUPA=null()
   || _result.msg_norec('GRUPA');
      _result.RESULT:=0
   ?};
   {? _obj.TWRKPLG<>'' & _result.OBJ.TWRKPLG=null()
   || _result.msg_norec('TWRKPLG');
      _result.RESULT:=0
   ?};
   {? _obj.ZAW<>'' & _result.OBJ.ZAW=null()
   || _result.msg_norec('ZAW');
      _result.RESULT:=0
   ?};
   {? _obj.PX_KONT<>'' & _result.OBJ.PX_KONT=null()
   || _result.msg_norec('PX_KONT');
      _result.RESULT:=0
   ?};
   {? _obj.KONTRAH<>'' & _result.OBJ.KONTRAH=null()
   || _result.msg_norec('KONTRAH');
      _result.RESULT:=0
   ?};
   {? _obj.BADSEH<>'' & _result.OBJ.BADSEH=null()
   || _result.msg_norec('BADSEH');
      _result.RESULT:=0
   ?};
   {? _obj.BAD_OP<>'' & _result.OBJ.BAD_OP=null()
   || _result.msg_norec('BAD_OP');
      _result.RESULT:=0
   ?};
   {? +_obj.TPZ=0 | 'TN'*_obj.TPZ=0
   || _result.msg_inset('TN','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.PZ=0 | 'PZ'*_obj.PZ=0
   || _result.msg_inset('PZ','P','Z');
      _result.RESULT:=0
   ?};
   {? +_obj.BRYG=0 | 'TN'*_obj.BRYG=0
   || _result.msg_inset('BRYG','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.ALL=0 | 'TN'*_obj.ALL=0
   || _result.msg_inset('ALL','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.WEW=0 | 'TN'*_obj.WEW=0
   || _result.msg_inset('WEW','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.ACT=0 | 'TN'*_obj.ACT=0
   || _result.msg_inset('ACT','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.GRPOJ=0 | 'GS'*_obj.GRPOJ=0
   || _result.msg_inset('GRPOJ','G','S');
      _result.RESULT:=0
   ?};
   {? +_obj.PL_GRP=0 | 'TN'*_obj.PL_GRP=0
   || _result.msg_inset('PL_GRP','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.SRW=0 | 'MS'*_obj.SRW=0
   || _result.msg_inset('SRW','M','S');
      _result.RESULT:=0
   ?};
   {? +_obj.KONTROLA=0 | 'TN'*_obj.KONTROLA=0
   || _result.msg_inset('KONTROLA','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.KJ_BAD=0 | 'PNB'*_obj.KJ_BAD=0
   || _result.msg_inset('KJ_BAD','P','N','B');
      _result.RESULT:=0
   ?};
   {? +_obj.FIX_NORM=0 | 'TN'*_obj.FIX_NORM=0
   || _result.msg_inset('FIX_NORM','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.WHERE=0 | 'POW'*_obj.WHERE=0
   || _result.msg_inset('WHERE','P','O','W');
      _result.RESULT:=0
   ?};
   {? +_obj.WYK_FAST=0 | 'TN'*_obj.WYK_FAST=0
   || _result.msg_inset('WYK_FAST','T','N');
      _result.RESULT:=0
   ?};
   {? +_obj.NO_START=0 | 'TN'*_obj.NO_START=0
   || _result.msg_inset('NO_START','T','N');
      _result.RESULT:=0
   ?}
?};

:: OK
{? _result.RESULT>0
|| TOPER.index('UNROP');
   TOPER.prefix(#_obj.UNROP);
   {? TOPER.first()
   || {? _mode=0
      || _result.RESULT:=0;
         _check:=0;
         _result.MSG:='Operacja technologiczna o unikalnym numerze \'%1\' już istnieje.'@[_obj.UNROP]
      || _result.ACTION:='put';
         exec('record','xls_toper',_obj,_mode,_result);
         exec('start_tpar','tech_param',exec('FindAndGet','#table','TKTL',TOPER.NRK,,"TKTL.KTM",null()));
         {? exec('topearec','tech_oper',1)<>''
         || _result.RESULT:=0
         ?}
      ?}
   || _result.ACTION:='add';
      exec('record','xls_toper',_obj,_mode,_result);
      exec('start_tpar','tech_param',exec('FindAndGet','#table','TKTL',TOPER.NRK,,"TKTL.KTM",null()));
      {? exec('topearec','tech_oper',1)<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
{? _result.RESULT<=0 & _check>0 & _imp_err=0
||
:: Jak błąd to ustawiam znacznik błędu na karcie technologicznej
   {? _result.OBJ.NRK<>null()
   || TKTL.cntx_psh();
      TKTL.prefix();
      {? TKTL.seek(_result.OBJ.NRK)
      || TKTL.IMP_ERR:='T';
         TKTL.put();
         _result.MSG+='\nKarta %1 (wer. %2) oraz wszystkie jej elementy, które zostały do tej pory zaimportowane '
                      'zostaną usunięte.'@[TKTL.NRK,TKTL.WER];
::       Dodaję kartę do listy ignorowanych kart przy imporcie
         __TKTL_ERR.NRK:=_obj.TKTL_NRK;
         __TKTL_ERR.WER:=_obj.TKTL_WER;
         __TKTL_ERR.add()
      ?};
      TKTL.cntx_pop()
   ?}
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| EXCEL_ENV.ID_GRP:=$TOPER.NRK;
   {? _validate.ACTION='add'
   || _result:=TOPER.add(1) & TOPER.memo_put(,'OPISMEMO');
::    Dodanie rekordów to tabeli __NASTOPER - po imporcie na jej podstawie odtwarzane są powiązania między operacjami
      {? var_press('NASTOPER',_obj)=type_of('') &  _obj.NASTOPER<>''
      || {? var_press('_tmp')>100 || obj_del(_tmp) ?};
         _tmp:=spli_str(_obj.NASTOPER,',');
         {? obj_len(_tmp)>0
         || {! _ii:=1..obj_len(_tmp)
            |! {? _tmp[_ii]<>''
               || __NASTOPER.TKTL:=$TOPER.NRK;
                  __NASTOPER.TOPER:=$TOPER.ref();
                  __NASTOPER.NASTOPER:=#_tmp[_ii];
                  __NASTOPER.add()
               ?}
            !}
         ?}
      ?}
   |? _validate.ACTION='put'
   || _result:=TOPER.put(1) & TOPER.memo_put(,'OPISMEMO')
   ?}
|| EXCEL_ENV.ID_GRP:=''
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie operacji o numerze %3 dla karty technologicznej %1 (%2) nie powiodło się.'@
                     [_obj.TKTL_NRK,_obj.TKTL_WER,_obj.UNROP]
   || _validate.MSG:='Poprawa operacji o numerze %3 dla karty technologicznej %1 (%2) nie powiodła się.'@
                     [_obj.TKTL_NRK,_obj.TKTL_WER,_obj.UNROP]
   ?}
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 cade75b4dfabbcc0f5c5e670c9239fa93f910bcfb49a4fbeb9ea0911a58238b080b3b2103cd4e02c61d15eb916095371f6a5eba64aeb756039fb13bdcd505895103f24cbf8f5bb927629f18becbc8b799b74a2ef8c6bc37d96d9abf156101b0a64cf3779c3dbc4187f149ac0c423324579dbaa910f4fc2dd7b197aa514d53528
