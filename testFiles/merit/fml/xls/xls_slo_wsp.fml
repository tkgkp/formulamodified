:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_slo_wsp.fml
:: Utworzony: 14.08.2018
:: Autor: JK
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu wspólne słowniki
::======================================================================================================================

\PARAMS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PARAMS';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_PAR_D_LISTA_PARA';
_def.FILE:=exec('def_xlsx','xls__init');
_def.SHEET:='Lista parametrów'@+'=1,1';
_def.NAME:='Lista parametrów'@;
_def.DESC:='Lista parametrów'@;
_def.ADD_ROWS:=0;
::_def.HIDDEN:='T';

_def.PREFIX:="PARAMS.index('UNIQ'); PARAMS.prefix()";
_def.TABLE:="exec('PARAMS_tab','xls_slo_wsp',_a)";
_def.TAB_IMP:="PARAMS";
_def.FIELDS:="exec('PARAMS_fld','xls_slo_wsp',_a)";

_def.BEFORE:="PARAMS.cntx_psh()";
_def.AFTER:="PARAMS.cntx_pop()";

_def.EXPORT:="exec('PARAMS_exp','xls_slo_wsp',_a,_b)";
_def.VALIDATE:="exec('PARAMS_valid','xls_slo_wsp',_a,_b,_c)";
_def.IMPORT:="exec('PARAMS_imp','xls_slo_wsp',_a,_b,_c)";
_def.SELECT:="exec('PARAMS_select','xls_slo_wsp',_a)";
~~


\PARAMS_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'NUMER','INTEGER','Numer'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'TRESC','STRING[20]','Treść'
   ,'OPIS','STRING[120]','Opis');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NUMER',,);

PARAMS.cntx_psh();
PARAMS.index('UNIQ');
PARAMS.prefix();
{? PARAMS.first()
|| {!
   |?
      {? PARAMS.FIRMA=null | PARAMS.FIRMA=REF.FIRMA
      ||
      _tab.blank();
      _tab.REF:=$PARAMS.ref();
      _selected.prefix($PARAMS.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.NUMER:=PARAMS.NUMER;
      _tab.TRESC:=PARAMS.TRESC;
      _tab.OPIS:=PARAMS.OPIS;
      _tab.add()
      ?};
      PARAMS.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NUMER,TRESC,OPIS',20,'Wybór parametrów do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
PARAMS.cntx_pop();

_result


\PARAMS_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Zwraca tabelę do eksportu listy parametrów bieżącej firmy
::   WE: _a - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| sql('select PARAMS.REFERENCE as REF, NUMER, (\':\' || PARAMS.IDADD || PARAMS.REFERENCE) as UIDREF from PARAMS where (PARAMS.FIRMA=:_a OR PARAMS.FIRMA IS NULL) ORDER BY NUMER',REF.FIRMA)
|| PARAMS
?}


\PARAMS_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NUMER','Numer',0,,'11 cyfrowy numer'@,,0);
_def.define('TRESC','Treść parametru',0,,'20 znakowy treść'@);
_def.define('OPIS','Opis',0,,'150 znakowy opis'@);
_def.define('LOKALNY','Globalny/Lokalny',0,,'Tylko globalny - 0, Dopuszczalny lokalny - 1'@,type_of(0),0);
_def.define('FIRMA','Firma',0,,'4 znakowy symbol firmy'@,,0);
~~


\PARAMS_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();

_result:=1;
{? _tab=PARAMS |  PARAMS.seek(_tab.REF)
|| _table.NUMER.VALUE:=PARAMS.NUMER;
   _table.TRESC.VALUE:=PARAMS.TRESC;
   _table.OPIS.VALUE:=PARAMS.OPIS;
   _table.LOKALNY.VALUE:=PARAMS.LOKALNY;
   _table.FIRMA.VALUE:=PARAMS.FIRMA().SYMBOL
?};
_result


\PARAMS_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

{? _result.env.SINGLEFIRM>0 & _result.env.FIRM_SRC<>'' & _table.FIRMA=_result.env.FIRM_SRC
|| _table.FIRMA:=REF.FIRMA().SYMBOL
|? _result.env.SINGLEFIRM>0 & _result.env.FIRM_SRC<>'' & ~(_table.FIRMA=_result.env.FIRM_SRC)
|| _result.RESULT:=0; return(~~)
?};

{? _table.FIRMA<>''
|| _firma:=exec('FindInSet','#table','FIRMA','SYMBOL',_table.FIRMA,,,1)
|| _firma:=null
?};

PARAMS.index('UNIQ'); PARAMS.prefix(_table.NUMER,_firma);
{? PARAMS.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || PARAMS.blank() ?};
   PARAMS.NUMER:=_table.NUMER;
   PARAMS.TRESC:=_table.TRESC;
   PARAMS.OPIS:=_table.OPIS;
   PARAMS.FIRMA:=_firma;
   PARAMS.LOKALNY:=_table.LOKALNY
?};
~~


\PARAMS_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PARAMS.add(1)
   |? _validate.ACTION='put'
   || _result:=PARAMS.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie parametru %1 nie powiodło się.'@[$_obj.NUMER]
   || _validate.MSG:='Poprawa parametru %1 nie powiodła się.'@[$_obj.NUMER]
   ?}
?};
_result


\US
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='US';
_def.FUNPAR:='ZWS_PAR_KURZ';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:='urzedy_skarbowe.xlsx';
_def.SHEET:='Urzędy skarbowe'@+'=1,1';
_def.NAME:='Urzędy skarbowe'@;
_def.DESC:='Urzędy skarbowe'@;
_def.MULTIFIR:='T';

_def.PREFIX:="US.index('URZSKNAZ'); US.prefix()";
_def.TABLE:="US";
_def.FIELDS:="exec('US_fld','xls_slo_wsp',_a)";

_def.BEFORE:="US.cntx_psh()";
_def.AFTER:="US.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('US_exp','xls_slo_wsp',_a,_b)";
_def.VALIDATE:="exec('US_valid','xls_slo_wsp',_a,_b,_c)";
_def.IMPORT:="exec('US_imp','xls_slo_wsp',_a,_b,_c)";
_def.SELECT:="exec('US_select','xls_slo_wsp',_a)";
~~


\US_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'NAZWA','STRING[50]','Nazwa');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NAZWA',,);

US.cntx_psh();
US.index('URZSKNAZ');
US.prefix();
{? US.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$US.ref();
      _selected.prefix($US.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.NAZWA:=US.NU;
      _tab.add();
      US.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NAZWA',50,'Wybór urzędów skarbowych i celnych do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
US.cntx_pop();
_result


\US_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('SYM','Symbol urzędu',1,,'8 znakowy symbol'@);
_def.define('NU','Nazwa urzędu',1,,'50 znakowa nazwa urzędu'@);
_def.define('MU','Miasto',1,,'40 znakowa nazwa miasta'@);
_def.define('UU','Ulica',1,,'50 znakowa nazwa ulicy'@);
_def.define('UK','Poczta',1,,'30 znakowy kod pocztowy'@);
_def.define('BANK','Bank',1,,'Wskazanie banku prowadzącego rachunki@');
_def.define('B3','Nr konta',1,,'50 znakowy numer konta'@);
_def.define('EDEK_SYM','Symbol urzędu skarbowego dla e-Deklaracji',1,,'8 znakowy symbol'@);
~~


\US_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;
US.prefix();
{? _tab=US |  US.seek(_tab.REF)
|| _table.SYM.VALUE:=US.SYM;
   _table.NU.VALUE:=US.NU;
   _table.MU.VALUE:=US.MU;
   _table.UU.VALUE:=US.UU;
   _table.UK.VALUE:=US.UK;
   _table.BANK.VALUE:=US.BANK().NUMER; _excel.write_async('B',US.BANK);
   _table.B3.VALUE:=US.B3;
   _table.EDEK_SYM.VALUE:=US.EDEK_SYM;

   SKID_RBK.cntx_psh();
   SKID_RBK.index('TAB');
   SKID_RBK.prefix(null,'US','US',#US.ref());

   {? SKID_RBK.first()
   || {!
      |? _excel.write_async('SKID_RBKUS',SKID_RBK.ref());
         SKID_RBK.next()
      !}
   ?};
   SKID_RBK.cntx_pop()
?};
_result


\US_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.NU='' || 'NU'
   || ''
   ?};
::  katastrofa
{? _fld<>''
|| _result.msg_empty(_fld);
   _result.RESULT:=0
?};

::  Ostrzeżenia
_max:=MS.fld_len(US,'SYM');
{? +_table.SYM>_max
|| _result.msg_length('SYM',_max);
   _table.SYM:=_max+_table.SYM
?};

{? +_table.B3 & ~exec('iban_ok','#id',_table.B3,1)
|| _result.MSG:='Wprowadzony numer konta nie jest zgodny z formatem IBAN'
?};

US.index('URZSKNAZ');
US.prefix(_table.NU,);
{? US.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add';
   {? _result.RESULT=1
   || {? _result.ACTION='add' || US.blank() ?};
      US.SYM:=_table.SYM;
      US.NU:=_table.NU;
      US.MU:=_table.MU;
      US.UU:=_table.UU;
      US.UK:=_table.UK;
      US.BANK:=exec('FindInSet','#table','B','BANKID',_table.BANK,,,1);
      US.B3:=_table.B3;
      US.EDEK_SYM:=form(_table.EDEK_SYM)
   ?}
?};
~~


\US_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=US.add(1)
   |? _validate.ACTION='put'
   || _result:=US.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie urzędu skarbowego/celnego %1 nie powiodło się.'@[_obj.NU]
   || _validate.MSG:='Poprawa urzędu skarbowego/celnego %1 nie powiodła się.'@[_obj.NU]
   ?}
?};
_result


\KK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='KK';
_def.FUNPAR:='ZWS_PAR_FTZK';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls__init');
_def.SHEET:='Konta kosztowe'@+'=1,1';
_def.NAME:='Konta kosztowe'@;
_def.DESC:='Konta kosztowe'@;

_def.PREFIX:="KK.index('UNIK'); KK.prefix()";
_def.TABLE:="KK";
_def.FIELDS:="exec('KK_fld','xls_slo_wsp',_a)";

_def.BEFORE:="KK.cntx_psh()";
_def.AFTER:="KK.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('KK_exp','xls_slo_wsp',_a,_b)";
_def.VALIDATE:="exec('KK_valid','xls_slo_wsp',_a,_b,_c)";
_def.IMPORT:="exec('KK_imp','xls_slo_wsp',_a,_b,_c)";
~~


\KK_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('SYM','Symbol',1,,'35 znakowy symbol'@);
_def.define('NAZWA','Nazwa',1,,'60 znakowa nazwa symbolu konta'@);
_def.define('SYSTEM','System',1,,'20 znakowy system'@);
_def.define('ROK_F','Plan kont z roku',1,,'Wskazanie na plan kont z roku'@);
~~


\KK_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;

_table.SYM.VALUE:=KK.SYM;
_table.NAZWA.VALUE:=KK.NAZWA;
_table.SYSTEM.VALUE:=KK.SYSTEM;
_table.ROK_F.VALUE:=KK.ROK_F().NAZ; _excel.write_async('ROK_F',KK.ROK_F);
_result


\KK_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

{? _table.ROK_F<>''
|| _rok:=exec('FindInSet','#table','ROK_F','NAZWA',_table.ROK_F,REF.FIRMA,,1);
   {? _rok=null
   || _result.MSG:='Nie znaleziono roku o nazwie: %1.'@[_table.ROK_F];
      _result.RESULT:=0
   ?}
|| _rok:=null
?};

KK.index('UNIK');
KK.prefix(REF.FIRMA,_table.SYSTEM,_rok,_table.SYM,);
{? KK.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};

{? _result.RESULT=1
|| {? _result.ACTION='add' || KK.blank() ?};
   KK.SYM:=_table.SYM;
   KK.NAZWA:=_table.NAZWA;
   KK.SYSTEM:=_table.SYSTEM;
   KK.ROK_F:=_rok;
   KK.FIRMA:=REF.FIRMA;
   {? exec('chk_kon','konto',_result.ACTION='add')<>''
   || _result.RESULT:=0
   ?}
?};
~~


\KK_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=KK.add(1)
   |? _validate.ACTION='put'
   || _result:=KK.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie konta kosztowego %1 do roku %2 nie powiodło się.'@[_obj.SYM,_obj.ROK_F]
   || _validate.MSG:='Poprawa konta kosztowego %1 w roku %2 nie powiodła się.'@[_obj.SYM,_obj.ROK_F]
   ?}
?};
_result


\NIPY
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='NIPY';
_def.FUNPAR:='ZWS_PAR_ALIC';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:='licencjobiorca.xlsx';
_def.SHEET:='Symbole NIP'@+'=1,1';
_def.NAME:='Symbole NIP'@;
_def.DESC:='Symbole NIP'@;

_def.PREFIX:="NIPY.index('SNIP'); NIPY.prefix(null)";
_def.TABLE:="exec('NIPY_tab','xls_slo_wsp',_a)";
_def.TAB_IMP:="NIPY";
_def.FIELDS:="exec('NIPY_fld','xls_slo_wsp',_a)";

_def.BEFORE:="__NIPYF:='INFO'; NIPY.cntx_psh()";
_def.AFTER:="NIPY.cntx_pop(); VAR_DEL.delete('__NIPYF')";

_def.EXPORT:="exec('NIPY_exp','xls_slo_wsp',_a,_b)";
_def.VALIDATE:="exec('NIPY_valid','xls_slo_wsp',_a,_b,_c)";
_def.IMPORT:="exec('NIPY_imp','xls_slo_wsp',_a,_b,_c)";
_def.SELECT:="exec('NIPY_select','xls_slo_wsp',_a)";
~~


\NIPY_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,'KRAJ','STRING[2]','Kraj'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'NIP','STRING[12]','Nip');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NIP',,);

NIPY.cntx_psh();
NIPY.index('SNIP');
NIPY.prefix(null);
{? NIPY.first()
|| {!
   |? {? NIPY.FIRMA=REF.FIRMA
      ||
      _tab.blank();
      _tab.REF:=$NIPY.ref();
      _selected.prefix($NIPY.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.KRAJ:=NIPY.KRAJ().KOD;
      _tab.NIP:=NIPY.NIP;
      _tab.add()
      ?};
      NIPY.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'KRAJ,NIP',20,'Wybór NIP do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
NIPY.cntx_pop();
_result


\NIPY_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Zwraca tabelę do eksportu NIPÓW bieżącej firmy
::   WE: _a - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| sql('select NIPY.REFERENCE as REF, (\':\' || NIPY.IDADD || NIPY.REFERENCE) as UIDREF from NIPY where NIPY.FIRMA=:_a',REF.FIRMA)
|| NIPY
?}


\NIPY_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KRAJ','Kraj',1,,'8 znakowy symbol kraju opodatkowania');
_def.define('NIP','Numer identyfikacji',1,,'12 znakowy Symbol NIP');
~~


\NIPY_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();

_result:=1;
{? _tab=NIPY |  NIPY.seek(_tab.REF)
|| _table.KRAJ.VALUE:=NIPY.KRAJ().KOD; _excel.write_async('SLO',NIPY.KRAJ);
   _table.NIP.VALUE:=NIPY.NIP
?};
_result


\NIPY_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.NIP='' || 'NIP'
   |? _table.KRAJ='' || 'KRAJ'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

_kraj:=exec('FindInSet','#table','SLO','KOD',_table.KRAJ,,,1);

{? _kraj=null
|| _result.MSG:='Nie poprawny kod kraju'; _result.RESULT:=0
?};
_snip:=_table.KRAJ+exec('niptostr','#string',_table.NIP);

NIPY.index('SNIP'); NIPY.prefix(null,_snip);
{? NIPY.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || NIPY.blank() ?};
   NIPY.KRAJ:=_kraj;
   NIPY.NIP:=_table.NIP;
   NIPY.FIRMA:=REF.FIRMA;
   NIPY.SNIP:=_snip;
   {? exec('chk_nipy','nipyue',_result.ACTION='add')<>''
   || _result.RESULT:=0
   ?}
?};
~~


\NIPY_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=NIPY.add(1)
   |? _validate.ACTION='put'
   || _result:=NIPY.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie NIP o numerze %1 nie powiodło się.'@[_obj.NIP]
   || _validate.MSG:='Poprawa NIP o numerze %1 nie powiodła się.'@[_obj.NIP]
   ?}
?};
_result


\RS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='RS';
_def.FUNPAR:='ZWS_PAR_RS_DEF';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:='slowniki_uzytkownika.xlsx';
_def.SHEET:='Rodzaje wzorców'@+'=1,1';
_def.NAME:='Rodzaje wzorców'@;
_def.DESC:='Rodzaje wzorców'@;
_def.ADD_ROWS:=0;
_def.MULTIFIR:='T';

_def.PREFIX:="RS.index('RS'); RS.prefix()";
_def.TABLE:="RS";
_def.FIELDS:="exec('RS_fld','xls_slo_wsp',_a)";

_def.BEFORE:="RS.cntx_psh()";
_def.AFTER:="RS.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('RS_exp','xls_slo_wsp',_a,_b)";
_def.VALIDATE:="exec('RS_valid','xls_slo_wsp',_a,_b,_c)";
_def.IMPORT:="exec('RS_imp','xls_slo_wsp',_a,_b,_c)";
_def.SELECT:="exec('RS_select','xls_slo_wsp',_a)";
~~


\RS_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;
_tab:=tab_tmp(1,'WZ','STRING[20]','Wzorzec'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'WZ',,);

RS.cntx_psh();
RS.index('RS');
RS.prefix();
{? RS.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$RS.ref();
      _selected.prefix($RS.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.WZ:=RS.WZ;
      _tab.add();
      RS.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'SYM,WZ',20,'Wybór wzorców słownikowych do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
RS.cntx_pop();

_result


\RS_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('WZ','Wzorzec',0,,'20 znakowa nazwa wzorca'@);
_def.define('TAB','Tabela',0,,'8 znakowy arkonim tabeli'@);
_def.define('KOD','Kod',0,,'8 znakowy akronim pola'@);
_def.define('TR','Treść',0,,'40 znakowy akronim lub formuła'@);
_def.define('UD_TYP','Typ',0,,'wskazanie na typ'@);
_def.define('UD_SCH','Schemat',0,,'wskazanie na schemat drzewa'@);
_def.define('F_ZATR','Forma zatrudnienia',0,,'wskazanie na formę zatrudnienia'@);
~~


\RS_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();

_result:=1;
{? _tab=RS |  RS.seek(_tab.REF)
|| _table.WZ.VALUE:=RS.WZ;
   _table.TAB.VALUE:=RS.TAB;
   _table.KOD.VALUE:=RS.KOD;
   _table.TR.VALUE:=RS.TR;
   _table.UD_TYP.VALUE:=RS.UD_TYP().SYMBOL; _excel.write_async('UD_TYP',RS.UD_TYP);
   _table.UD_SCH.VALUE:=RS.UD_SCH().SYMBOL; _excel.write_async('UD_SCH',RS.UD_SCH);
   _table.F_ZATR.VALUE:=RS.F_ZATR().KOD; _excel.write_async('F_ZATR',RS.F_ZATR)
?};
_result


\RS_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
_kod:='';

{? _table.TAB<>''
|| {? exec('tab_wz','slo_slu',_table.TAB)=0
   || _result.MSG:='Brak tabeli "%1" na liście tabel dostępnych do wyboru.'@[_table.TAB]; _result.RESULT:=0
   ?};
   _kod:=exec('pol_wz','slo_slu',_table.TAB)
?};

RS.index('RS');
RS.prefix(_table.WZ);
{? RS.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || RS.blank() ?};
   RS.WZ:=_table.WZ;
   RS.TAB:=_table.TAB;
   RS.KOD:={? _kod<>'' || _kod || _table.KOD ?};
   RS.TR:=_table.TR;
   RS.UD_TYP:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYP,,,1);
   RS.UD_SCH:=exec('FindInSet','#table','UD_SCH','SYMBOLS',_table.UD_SCH,,,1);
   RS.F_ZATR:=exec('FindInSet','#table','F_ZATR','UNIQUE',_table.F_ZATR,,,1)
?};
~~


\RS_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KS_ZEST_import/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=RS.add(1)
   |? _validate.ACTION='put'
   || _result:=RS.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie wzorca słownikowego %1 nie powiodło się.'@[_obj.WZ]
   || _validate.MSG:='Poprawa wzorca słownikowego %1 nie powiodła się.'@[_obj.WZ]
   ?}
?};
_result


\SKID_RBKUS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  OLD: \SKID_RBK/xls_rblic.fml
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKID_RBKUS';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls__init');
_def.SHEET:='Rachunki bankowe US=1,1';
_def.NAME:='Rachunki bankowe US';
_def.DESC:='Rachunki bankowe US';
_def.FUNPAR:='ZWS_PAR_KURZ';
_def.HIDDEN:='T';

_def.PREFIX:="SKID_RBK.index('TAB'); SKID_RBK.prefix()";
_def.TABLE:="exec('SKID_RBKUS_tab','xls_slo_wsp',_a)";
_def.TAB_IMP:="SKID_RBK";
_def.FIELDS:="exec('SKID_RBKUS_fld','xls_slo_wsp',_a)";

_def.BEFORE:="exec('RB','object'); SKID_RBK.cntx_psh(); US.cntx_psh()";
_def.AFTER:="SKID_RBK.cntx_pop(); US.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('SKID_RBKUS_exp','xls_slo_wsp',_a,_b)";
_def.VALIDATE:="exec('SKID_RBKUS_valid','xls_slo_wsp',_a,_b,_c)";
_def.IMPORT:="exec('SKID_RBKUS_imp','xls_slo_wsp',_a,_b,_c)";
~~


\SKID_RBKUS_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  OLD: \SKID_RBK_fld/xls_rblic.fml
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('N','Numer rachunku bank.',1,,'50 znakowy nr rachunku'@);
_def.define('BANK','Bank',1,,'8 znakowy kod banku'@);
_def.define('KRAJ','Kraj banku',1,,'8 znakowy kod'@);
_def.define('WAL','Waluta rachunku',1,,'8 znakowy kod'@);
_def.define('OPIS','Opis',1,,'255 opis rachunku bankowego'@);
_def.define('SLU','Słownik użytkownika',1,,'20 znakowa nazwa słownika'@);
_def.define('SLO','Pozycja w słowniku',1,,'8 znakowy kod tabeli'@);
_def.define('NU','Nazwa urzędu',1,,'50 znakowa nazwa urzędu'@);
~~


\SKID_RBKUS_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [18.42]
:: OPIS: Zwraca tabelę do eksportu aktywnych rachunków bankowych licencjobiorcy dla bieżącej firmy
::   WE: _a - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::  OLD: \SKID_RBK_tab/xls_rblic.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| sql('select SKID_RBK.REFERENCE as REF, (\':\' || SKID_RBK.IDADD || SKID_RBK.REFERENCE) as UIDREF from SKID_RBK where TAB=\':_a\'','US')
|| SKID_RBK
?}


\SKID_RBKUS_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async()l
::  OLD: \SKID_RBK_exp/xls_rblic.fml
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;
{? _tab=SKID_RBK | SKID_RBK.seek(_tab.REF)
|| _table.NU.VALUE:={? US.seek(SKID_RBK.REF) || US.NU || '' ?};
   _table.SLU.VALUE:=SKID_RBK.SLU().NAZ; _excel.write_async('SLU',SKID_RBK.SLU);
   _table.SLO.VALUE:=SKID_RBK.SLO().KOD; _excel.write_async('SLO',SKID_RBK.SLO);
   _table.N.VALUE:=SKID_RBK.N;
   _table.BANK.VALUE:=SKID_RBK.BANK().NUMER; _excel.write_async('B',SKID_RBK.BANK);
   _table.KRAJ.VALUE:=SKID_RBK.KRAJ().SYM; _excel.write_async('KRAJE',SKID_RBK.KRAJ);
   _table.WAL.VALUE:=SKID_RBK.WAL().KOD; _excel.write_async('SLO',SKID_RBK.WAL);
   _table.OPIS.VALUE:=SKID_RBK.OPIS
?};
_result


\SKID_RBKUS_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukcml
::  OLD: \SKID_RBK_imp/xls_rblic.fml
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SKID_RBK.add(1)
   |? _validate.ACTION='put'
   || _result:=SKID_RBK.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie rachunku bankowego US %1 nie powiodło się.'@[_obj.N]
   || _validate.MSG:='Poprawa rachunku bankowego US %1 nie powiodła się.'@[_obj.N]
   ?}
?};
_result


\SKID_RBKUS_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.SLO='' || 'SLO'
   |? _table.N='' || 'N'
   |? _table.NU='' || 'NU'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

{? _table.SLU<>''
|| _slu:=exec('FindInSet','#table','SLU','NAZ',_table.SLU,,,1);
   {? _slu=null
   || _result.MSG:='Nie odnaleziono słownika użytkownika'@;
      _result.RESULT:=0
   ?};
   {? _table.SLO <> ''
   || _slo:=exec('FindInSet','#table','SLO','SL',_table.SLO,_slu,,1);
      {? _slo=null
      || _result.MSG:='Nie odnaleziono pozycji w słowniku użytkownika'@;
         _result.RESULT:=0
      ?}
   ?}
|| _result.MSG:='Nie odnaleziono słownika użytkownika'@;
   _result.RESULT:=0
?};

_ref:=exec('FindInSet','#table','US','URZSKNAZ',_table.NU,,,1);
{? _ref=null
|| _result.MSG:='Nie odnaleziono danych urzędu skarbowego lub celnego'@;
   _result.RESULT:=0
?};

{? _slo<>null
|| SKID_RBK.index('TAB');
   SKID_RBK.prefix(null,'US','US',#_ref,_slo,_table.N,_table.N);
   {? SKID_RBK.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?}
?};

{? _result.RESULT=1
|| {? _result.ACTION='add' || SKID_RBK.blank() ?};
   SKID_RBK.TAB:='US';
   SKID_RBK.N:=_table.N;
   SKID_RBK.REF:=#_ref;
   SKID_RBK.SLO:=_slo;
   SKID_RBK.SLU:=_slu;
   SKID_RBK.BANK:=exec('FindInSet','#table','B','BANKID',_table.BANK,,,1);
   SKID_RBK.KRAJ:=exec('FindInSet','#table','KRAJE','KRAJE',_table.KRAJ,,,1);
   SKID_RBK.WAL:=exec('FindInSet','#table','WAL','WAL_KOD',_table.WAL,,,1);
   SKID_RBK.OPIS:=_table.OPIS
?};
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 4a4f8e9026647acd403faaedbb3a431956d4ed26b93031509314fc72fbf7a080cbc388a3b5ec27a5e1ed59f7bb846fc930b3ae6e02dce1a948ee5c5418323ad9205a87bfa9214859c22b1fa2214ea7a47dadf975c027c4f8ea40070d28011b302e3b869f3d17a77679633ec67125b9c663250f42e95cc7535bd418e790adb1e9
