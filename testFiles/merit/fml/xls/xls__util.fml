:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls__util.fml
:: Utworzony: 23.08.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły pomocnicze dla realizacji eksportu/importu.
::======================================================================================================================


\write
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Dodaje/modyfikuje wiersz wskazanej tabeli.
::UWAGA: Do poprawnego działania niezbędne jest utworzenie tablicy nazwanej o odpowiedniej strukturze i przekazanie jej
::       w polu OBJ obiektu z rezultatem walidatora (patrz exec('args_valid','#excel_imex')). Tablica może być szybko
::       utworzona i wypełniona przez wywołanie exec('write_obj','xls__util',...).
::   WE:  _a  [ARRAY]   - tablica nazwana z wartościami pól wiersza pliku wymiany
::        _b  [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::        _c  [ARRAY]   - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::        _d  [TABLE]   - alias tabeli, której dane mają być zmodyfikowane
::        _e  [RULE]    - treść formuły ustawiającej wartości pól
::       [_f] [STRING]  - opcjonalnie lista pól typu SYS_MEMO do zapisu
::       [_g] [RULE]    - opcjonalna formuła wykonywana po poprawnieniu lub dołączeniu rekordu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;
_obj:=_c.OBJ;
_TAB:=_d;
_set:=_e;
_fld:={? var_pres('_f')=type_of('') & _f<>'' || spli_str(_f,',') || ~~ ?};
_after_update:={? var_pres('_g')=type_of("") || _g || "1" ?};

{? (_val.ACTION='put' | _obj.REF<>null) & _mod
:  włączono tryb nadpisywania
|| {? _TAB.seek(_obj.REF)
   || _set(_TAB,_buf,_obj);
      {? ~(_TAB.put(1) & _after_update(_buf,_obj)) | ~exec('write_memo','xls__util',_TAB,_fld)
      || _val.msg_update(_obj.to_str(_buf,_obj));
         _val.RESULT:=0
      ?}
   || _val.msg_norec(,_TAB.comment());
      _val.RESULT:=0
   ?}

|? _val.ACTION='add'
:  brak ograniczeń
|| _TAB.blank();
   _set(_TAB,_buf,_obj);
   {? ~(_TAB.add(1) & _after_update(_buf,_obj)) | ~exec('write_memo','xls__util',_TAB,_fld)
   || _val.msg_insert(_obj.to_str(_buf,_obj));
      _val.RESULT:=0
   ?}
?};
~~


\write_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy tablicę, na której opiera się działanie formuły write.
::   WE: _a [REFERENCE] - wskazanie na wiersz dowolnej tabeli
::       _b [RULE] - formuła zwracająca tekstową reprezentację wiersza
::       _c [STRING] - identyfikator dodatkowego pola
::       _d [ANY] - wartość dodatkowego pola
::       ...
::   WY: referencja utworzonej tablicy
::----------------------------------------------------------------------------------------------------------------------
: przygotuj treść formuły tworzącej obiekt
_create:="_obj:=obj_new('REF','to_str'";
: dodaj opcjonalne pola
{? _>2
|| {! _ii:=3//2..(_-1)
   |! {? type_of(_[_ii])=type_of('')
      || _create+=',\'%1\''[_[_ii]]
      ?}
   !}
?};
: koniec
_create+=");
   _obj.REF:=_a;
   _obj.to_str:=_b;
   _obj
";

: utwórz obiekt
_obj:=($_create)(_a,_b);
: ustaw opcjonalne pola
{? _>2
|| {! _ii:=4//2.._
   |! _obj[_ii/2+1]:=_[_ii]
   !}
?};

: wynik
_obj


\write_memo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zapisuje wartości podanych pól notatnikowych
::   WE: _a [TABLE] - alias tabeli, której pola notatnikowe mają być zapisane
::       _b [ARRAY/VOID] - tablica zawierająca akronimy pól lub wartość pusta
::   WY: 0 - wystąpił błąd / 1 - zapis zakończony sukcesem
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_fld:=_b;

: czy należy zapisać jakiekolwiek pola?
{? type_of(_fld)=type_of(~~)
|| return(1)
?};

: zapisz wszystkie notatki
{! _ii:=1..obj_len(_fld)
|! {? var_pres(_fld[_ii],_TAB)=36
   || {? ~_TAB.memo_put(,_fld[_ii])
      || return(0)
      ?}
   ?}
!};

1


\r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Formuła zwraca ref-a pierwszej rubryki płacowej.
::       W związku ze zmianą sposobu przechowywania informacji o rubrykach płacowych w danych wzorcowych, chcemy aby
::       zapis asynchroniczny dotyczył ZAWSZE tej samej rubryki.
::       Obecnie wszystkie rubryki są zapisywane nie w samym arkuszu kalkulacyjnym, ale w pliku tekstowym (dokładniej:
::       XML). Nie ma więc potrzeby zapisu asynchronicznego konkretnej rubryki.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R.cntx_psh();
R.index('RUBLP');
R.prefix();
_ret:={? R.first() || R.ref() || null() ?};
R.cntx_pop();
_ret


\ra_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Formuła zwraca ref-a pierwszego atrybutu płacowego.
::       W związku ze zmianą sposobu przechowywania informacji o atrybutach płacowych w danych wzorcowych, chcemy aby
::       zapis asynchroniczny dotyczył ZAWSZE tego samego atrybutu.
::       Obecnie wszystkie atrybuty są zapisywane nie w samym arkuszu kalkulacyjnym, ale w pliku tekstowym (dokładniej:
::       XML). Nie ma więc potrzeby zapisu asynchronicznego konkretnego atrybutu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RA_DEF.cntx_psh();
RA_DEF.index('RA_DEF');
RA_DEF.prefix();
_ret:={? RA_DEF.first() || RA_DEF.ref() || null() ?};
RA_DEF.cntx_pop();
_ret

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:43 36124e62327f9b974f0074eb2bed98398d57bff2471b158c7b122f679d5fcc703013905c90d3ddbd48509612e1d29e2be90d3f4264f04b7539b2efd29767e97e38e183c56a0f1454bfe44d9ae275f097503b9fcb34a1f3368d2b67f8722456acf0d6d0f543c61e14764c14ea05709bb5d04286bb2d2d58a19f5f5e49836b274d
