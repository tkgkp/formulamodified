:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_urz.fml
:: Utworzony: 03.09.2018
:: Autor: AF
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu urządzeń
::======================================================================================================================


\filename
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Nazwa pliku do eksportu
::----------------------------------------------------------------------------------------------------------------------
'urządzenia.xlsx'


\URZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ';
_def.FUNPAR:='ZWS_URZ_LISTA';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Lista urządzeń'@+'=1,1';
_def.NAME:='Urządzenie'@;
_def.DESC:='Urządzenie'@;
_def.MULTIFIR:='T';

_def.PREFIX:="URZ.index('URZ'); URZ.prefix()";
_def.TABLE:="URZ";
_def.FIELDS:="exec('URZ_fld','xls_urz',_a)";

_def.BEFORE:="URZ.cntx_psh()";
_def.AFTER:="URZ.cntx_pop()";
_def.SELECT:="exec('URZ_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_imp','xls_urz',_a,_b,_c)";
~~


\URZ_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZWA','Nazwa',1,,'30 znakowa nazwa urządzenia',2);
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa kategoria urządzenia',2);
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem',2);
_def.define('PORT','Port',1,,'100 znakowa nazwa portu lub adres urządzenia',2);
_def.define('RODZPODL','Rodzaj podłączenia',1,,'1 znakowy rodzaj podłączenia urządzenia',2);
_def.define('TYPPODL','Typ komunikacji z drukarką',1,,'1 znakowy B - bezpośrednie przez port S - poprzez sterownik drukarki',2);
_def.define('DRIVER','Sterownik',1,,'100 znakowa nazwa sterownika drukarki',2);
~~


\URZ_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'NAZWA','STRING[30]','Nazwa'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'PORT','STRING[100]','Port'
   ,'URZ_KAT','STRING[30]','Kategoria urządzenia'
   ,'URZ_KOM','STRING[30]','Protokół komunikacji urządzenia'
   ,'DRIVER','STRING[100]','Sterownik');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NAZWA',,,'DRIVER',,,'URZ_KAT',,,'URZ_KOM',,);

URZ.cntx_psh();
URZ.index('URZ');
URZ.prefix();
{? URZ.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ.ref();
      _selected.prefix($URZ.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.PORT:=URZ.PORT;
      _tab.DRIVER:=URZ.DRIVER;
      _tab.NAZWA:=URZ.NAZWA;
      _tab.URZ_KAT:=URZ.URZ_KAT().NAZWA;
      _tab.URZ_KOM:=URZ.URZ_KOM().KOD;
      _tab.add();

      URZ.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NAZWA,PORT,DRIVER,URZ_KAT,URZ_KOM',40,'Wybór Nagłówków sprawozdań do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ.cntx_pop();
_result


\URZ_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZWA.VALUE:=URZ.NAZWA;
_table.URZ_KAT.VALUE:=URZ.URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ.URZ_KOM().KOD;
_excel.write_async('URZ_KOM',URZ.URZ_KOM);
_excel.write_async('URZ_PORT',URZ.PORT);
_table.PORT.VALUE:=URZ.PORT;
_table.RODZPODL.VALUE:=URZ.RODZPODL;
_table.TYPPODL.VALUE:=URZ.TYPPODL;
_table.DRIVER.VALUE:=URZ.DRIVER;

{? URZ.URZ_KAT().NAZWA='DRUKARKA'
||
   URZ_LAB.cntx_psh();
   URZ_LAB.index('URZ_LAB');
   URZ_LAB.prefix(URZ.URZ_KOM,);
   {? URZ_LAB.first()
   || {!
      |? _excel.write_async('URZ_LAB',URZ_LAB.ref());
         URZ_LAB.next()
      !}
   ?};
   URZ_LAB.cntx_pop()
?};
_result


\URZ_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|| _result.RESULT:=1;
   URZ.index('URZ');
   URZ.prefix(_devcat,_devprotcom,_table.NAZWA,);
   {? URZ.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ.blank() ?};
      URZ.NAZWA:=_table.NAZWA;
      URZ.URZ_KAT:=_devcat;
      URZ.URZ_KOM:=_devprotcom;
      URZ.PORT:=_table.PORT;
      URZ.RODZPODL:=_table.RODZPODL;
      URZ.TYPPODL:=_table.TYPPODL;
      URZ.DRIVER:=_table.DRIVER;
      {? exec('chk_urz','urzadzenia',{? _result.ACTION='add' || 'D' || 'P' ?})<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
~~


\URZ_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie urządzenia o nazwie %1 nie powiodło się.'@[_table.NAZWA]
   || _validate.MSG:='Poprawa urządzenia o nazwie %1 nie powiodła się.'@[_table.NAZWA]
   ?}
?};
_result


\URZ_KOM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_KOM';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Metody komunikacji'@+'=1,1';
_def.NAME:='Metoda komunikacji'@;
_def.DESC:='Metoda komunikacji'@;

_def.PREFIX:="URZ_KOM.index('KATKOD'); URZ_KOM.prefix()";
_def.TABLE:="URZ_KOM";
_def.FIELDS:="exec('URZ_KOM_fld','xls_urz',_a)";

_def.BEFORE:="URZ_KOM.cntx_psh()";
_def.AFTER:="URZ_KOM.cntx_pop()";
_def.SELECT:="exec('URZ_KOM_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_KOM_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_KOM_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_KOM_imp','xls_urz',_a,_b,_c)";
~~


\URZ_KOM_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzeń',1,,'30 znakowa nazwa kategorii urządzenia');
_def.define('KOD','Kod',1,,'20 znakowy kod metody komunikacji z urządzeniem');
_def.define('OPIS','Opis',1,,'100 znakowy opis metody komunikacji z urządzeniem');
~~


\URZ_KOM_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'URZ_KAT','STRING[30]','Kategoria urządzeń'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'KOD','STRING[100]','Kod'
   ,'OPIS','STRING[100]','Opis');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'URZ_KAT',,,'KOD',,,'OPIS',,);

URZ_KOM.cntx_psh();
URZ_KOM.index('KATKOD');
URZ_KOM.prefix();
{? URZ_KOM.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_KOM.ref();
      _selected.prefix($URZ_KOM.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.URZ_KAT:=URZ_KOM.URZ_KAT().NAZWA;
      _tab.KOD:=URZ_KOM.KOD;
      _tab.OPIS:=URZ_KOM.OPIS;
      _tab.add();

      URZ_KOM.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'URZ_KAT,KOD,OPIS',40,'Wybór metod komunikacji z urządzeniami do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_KOM.cntx_pop();
_result


\URZ_KOM_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_KOM.URZ_KAT().NAZWA;
_table.KOD.VALUE:=URZ_KOM.KOD;
_table.OPIS.VALUE:=URZ_KOM.OPIS;
_excel.write_async('URZ_KAT',URZ_KOM.URZ_KAT);
_result


\URZ_KOM_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|| _result.RESULT:=1;
   URZ_KOM.index('KATKOD');
   URZ_KOM.prefix(_devcat,_table.KOD,);

   {? URZ_KOM.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_KOM.blank() ?};
      URZ_KOM.URZ_KAT:=_devcat;
      URZ_KOM.KOD:=_table.KOD;
      URZ_KOM.OPIS:=_table.OPIS;
      {? exec('chk_urz_kom','urzadzenia',{? _result.ACTION='add' || 'D' || 'P' ?})<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
~~


\URZ_KOM_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_KOM.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_KOM.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie protokołu komunikacji o nazwie %1 nie powiodło się.'@[_table.KOD]
   || _validate.MSG:='Poprawa protokołu komunikacji o nazwie %1 nie powiodła się.'@[_table.KOD]
   ?}
?};
_result


\URZ_PORT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_PORT';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Porty'@+'=1,1';
_def.NAME:='Porty'@;
_def.DESC:='Porty'@;

_def.PREFIX:="URZ_PORT.index('NAZWA'); URZ_PORT.prefix()";
_def.TABLE:="URZ_PORT";
_def.FIELDS:="exec('URZ_PORT_fld','xls_urz',_a)";

_def.BEFORE:="URZ_PORT.cntx_psh()";
_def.AFTER:="URZ_PORT.cntx_pop()";
_def.SELECT:="exec('URZ_PORT_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_PORT_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_PORT_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_PORT_imp','xls_urz',_a,_b,_c)";
~~


\URZ_PORT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZWA','Nazwa',0,,'100 znakowa nazwa portu');
~~


\URZ_PORT_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'NAZWA','STRING[100]','Nazwa'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NAZWA',,);

URZ_PORT.cntx_psh();
URZ_PORT.index('NAZWA');
URZ_PORT.prefix();
{? URZ_PORT.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_PORT.ref();
      _selected.prefix($URZ_PORT.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.NAZWA:=URZ_PORT.NAZWA;
      _tab.add();

      URZ_PORT.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NAZWA',40,'Wybór portu urządzenia'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_PORT.cntx_pop();
_result


\URZ_PORT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.NAZWA.VALUE:=URZ_PORT.NAZWA;
_result


\URZ_PORT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

URZ_PORT.index('NAZWA');
URZ_PORT.prefix(_table.NAZWA,);

{? URZ_PORT.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || URZ_PORT.blank() ?};
   URZ_PORT.NAZWA:=_table.NAZWA;
   {? exec('chk_urz_port','urzadzenia')<>''
   || _result.RESULT:=0
   ?}
?};
~~


\URZ_PORT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_PORT.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_PORT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie portu o nazwie %1 nie powiodło się.'@[_table.NAZWA]
   || _validate.MSG:='Poprawa portu o nazwie %1 nie powiodła się.'@[_table.NAZWA]
   ?}
?};
_result


\URZ_LAB
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_LAB';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Lista etykiet'@+'=1,1';
_def.NAME:='Etykieta'@;
_def.DESC:='Etykieta'@;

_def.PREFIX:="URZ_LAB.index('URZ_LAB'); URZ_LAB.prefix()";
_def.TABLE:="URZ_LAB";
_def.FIELDS:="exec('URZ_LAB_fld','xls_urz',_a)";

_def.BEFORE:="URZ_LAB.cntx_psh()";
_def.AFTER:="URZ_LAB.cntx_pop()";
_def.SELECT:="exec('URZ_LAB_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_LAB_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_LAB_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_LAB_imp','xls_urz',_a,_b,_c)";
~~


\URZ_LAB_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa nazwa kategorii urządzenia',2);
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem',2);
_def.define('KOD','Kod etykiety',1,,'35 znakowy kod etykiety',2);
_def.define('OPIS','Opis',1,,'255 znakowy opis etykiety',2);
_def.define('ROZM_X','Rozmiar X',1,,'27 znakowa szerokość etykiety w mm',1);
_def.define('ROZM_Y','Rozmiar Y',1,,'27 znakowy wysokość etykiety w mm',1);
_def.define('ODSTEP','Odstęp',1,,'27 znakowy odstęp między etykietami',1);
_def.define('TRYB','Tryb drfiniowania etykiet',1,,'1 znakowy Tryb P - Prosty Z - Zaawansowany',2);
_def.define('TEMPERAT','Temperatura głowicy',1,,'11 znakowa temperatura głowicy',1,0);
~~


\URZ_LAB_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'KOD','STRING[35]','Kod etykiety'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'URZ_KOM','STRING[30]','Protokół komunikacji urządzenia'
   ,'OPIS','STRING[255]','Opis etykiety');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,,'URZ_KOM',,,'OPIS',,);

URZ_LAB.cntx_psh();
URZ_LAB.index('URZ_LAB');
URZ_LAB.prefix();
{? URZ_LAB.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_LAB.ref();
      _selected.prefix($URZ_LAB.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.KOD:=URZ_LAB.KOD;
      _tab.OPIS:=URZ_LAB.OPIS;
      _tab.URZ_KOM:=URZ_LAB.URZ_KOM().KOD;
      _tab.add();

      URZ_LAB.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'KOD,URZ_KOM,OPIS',40,'Wybór etykiet do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_LAB.cntx_pop();
_result


\URZ_LAB_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_LAB.URZ_KOM().URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ_LAB.URZ_KOM().KOD;
_table.KOD.VALUE:=URZ_LAB.KOD;
_table.OPIS.VALUE:=URZ_LAB.OPIS;
_table.ROZM_X.VALUE:=URZ_LAB.ROZM_X;
_table.ROZM_Y.VALUE:=URZ_LAB.ROZM_Y;
_table.ODSTEP.VALUE:=URZ_LAB.ODSTEP;
_table.TRYB.VALUE:=URZ_LAB.TRYB;
_table.TEMPERAT.VALUE:=URZ_LAB.TEMPERAT;
_excel.write_async('URZ_KOM',URZ_LAB.URZ_KOM);
_excel.write_async('URZ_KAT',URZ_LAB.URZ_KOM().URZ_KAT);

{? URZ_LAB.TRYB = 'P'
|| URZ_LABP.cntx_psh();
   URZ_LABP.index('URZ_LABP');
   URZ_LABP.prefix(URZ_LAB.ref(),);
   {? URZ_LABP.first()
   || {!
      |? _excel.write_async('URZ_LABP',URZ_LABP.ref());
         URZ_LABP.next()
      !}
   ?};
   URZ_LABP.cntx_pop()
|| URZ_LABZ.cntx_psh();
   URZ_LABZ.index('URZ_LABZ');
   URZ_LABZ.prefix(URZ_LAB.ref(),);
   {? URZ_LABZ.first()
   || {!
      |? _excel.write_async('URZ_LABZ',URZ_LABZ.ref());
         URZ_LABZ.next()
      !}
   ?};
   URZ_LABZ.cntx_pop()
?};
_result


\URZ_LAB_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|| _result.RESULT:=1;
   URZ_LAB.index('URZ_LAB');
   URZ_LAB.prefix(_devprotcom,_table.KOD,);

   {? URZ_LAB.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_LAB.blank() ?};
      URZ_LAB.URZ_KOM:=_devprotcom;
      URZ_LAB.KOD:=_table.KOD;
      URZ_LAB.OPIS:=_table.OPIS;
      URZ_LAB.ROZM_X:=_table.ROZM_X;
      URZ_LAB.ROZM_Y:=_table.ROZM_Y;
      URZ_LAB.ODSTEP:=_table.ODSTEP;
      URZ_LAB.TRYB:=_table.TRYB;
      URZ_LAB.TEMPERAT:=_table.TEMPERAT;
      {? exec('chk_urz_lab','urzadzenia',{? _result.ACTION='add' || 'D' || 'P' ?})<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
~~


\URZ_LAB_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_LAB.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_LAB.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie etykiety o nazwie %1 nie powiodło się.'@[_table.KOD]
   || _validate.MSG:='Poprawa etykiety o nazwie %1 nie powiodła się.'@[_table.KOD]
   ?}
?};
_result


\URZ_TAG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_TAG';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Lista tagów'@+'=1,1';
_def.NAME:='Tag'@;
_def.DESC:='Tag'@;

_def.PREFIX:="URZ_TAG.index('URZ_TAG'); URZ_TAG.prefix()";
_def.TABLE:="URZ_TAG";
_def.FIELDS:="exec('URZ_TAG_fld','xls_urz',_a)";

_def.BEFORE:="URZ_TAG.cntx_psh()";
_def.AFTER:="URZ_TAG.cntx_pop()";
_def.SELECT:="exec('URZ_TAG_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_TAG_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_TAG_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_TAG_imp','xls_urz',_a,_b,_c)";
~~


\URZ_TAG_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KOD','Kod',1,,'30 znakowy kod zamiennika');
_def.define('FORMULA','Formuła',1,,'255 znakowa formuła wyznaczająca zawartość zamiennika');
_def.define('OPIS','Opis',1,,'255 znakowy opis zamiennika');
_def.define('RODZAJ','Rodzaj',1,
,'2 znakowy rodzaj tagu T-Techniczny DW-Dane:wspólne DF-Dane:finansowe DL-Dane:logistyczne DN-Dane:nieokreślone');
~~


\URZ_TAG_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'KOD','STRING[35]','Kod zamiennika'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'OPIS','STRING[255]','Opis zamiennika');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,,'OPIS',,);

URZ_TAG.cntx_psh();
URZ_TAG.index('URZ_TAG');
URZ_TAG.prefix();
{? URZ_TAG.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_TAG.ref();
      _selected.prefix($URZ_TAG.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.KOD:=URZ_TAG.KOD;
      _tab.OPIS:=URZ_TAG.OPIS;
      _tab.add();

      URZ_TAG.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'KOD,OPIS',40,'Wybór etykiet do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_TAG.cntx_pop();
_result


\URZ_TAG_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.KOD.VALUE:=URZ_TAG.KOD;
_table.FORMULA.VALUE:=URZ_TAG.FORMULA;
_table.OPIS.VALUE:=URZ_TAG.OPIS;
_table.RODZAJ.VALUE:=URZ_TAG.RODZAJ;
_result


\URZ_TAG_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

URZ_TAG.index('URZ_TAG');
URZ_TAG.prefix(_table.KOD,);

{? URZ_TAG.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.ACTION <> ''
|| {? _result.ACTION='add' || URZ_TAG.blank() ?};
   URZ_TAG.KOD:=_table.KOD;
   URZ_TAG.FORMULA:=_table.FORMULA;
   URZ_TAG.OPIS:=_table.OPIS;
   URZ_TAG.RODZAJ:=_table.RODZAJ;
   {? exec('chk_urz_tag','urzadzenia')<>''
   || _result.RESULT:=0
   || _result.RESULT:=1
   ?}
?};
~~


\URZ_TAG_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_TAG.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_TAG.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie tagu o nazwie %1 nie powiodło się.'@[_table.KOD]
   || _validate.MSG:='Poprawa tagu o nazwie %1 nie powiodła się.'@[_table.KOD]
   ?}
?};
_result


\URZ_BAR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_BAR';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Rodzaje kodów kreskowych'@+'=1,1';
_def.NAME:='Kod kreskowy'@;
_def.DESC:='Kod kreskowy'@;

_def.PREFIX:="URZ_BAR.index('URZ_BAR'); URZ_BAR.prefix()";
_def.TABLE:="URZ_BAR";
_def.FIELDS:="exec('URZ_BAR_fld','xls_urz',_a)";

_def.BEFORE:="URZ_BAR.cntx_psh()";
_def.AFTER:="URZ_BAR.cntx_pop()";
_def.SELECT:="exec('URZ_BAR_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_BAR_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_BAR_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_BAR_imp','xls_urz',_a,_b,_c)";
~~


\URZ_BAR_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa kategoria urządzenia');
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem');
_def.define('KOD','Kod',1,,'30 znakowy kod kodu kreskowego');
_def.define('SYMBOL','Symbol',1,,'10 znakowy symbol w języku drukarki');
~~


\URZ_BAR_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'URZ_KOM','STRING[35]','Język drukarki'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'KOD','STRING[30]','Kod kodu kreskowego'
   ,'SYMBOL','STRING[10]','Symbol w języku drukarki');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,,'SYMBOL',,);

URZ_BAR.cntx_psh();
URZ_BAR.index('URZ_BAR');
URZ_BAR.prefix();
{? URZ_BAR.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_BAR.ref();
      _selected.prefix($URZ_BAR.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.KOD:=URZ_BAR.KOD;
      _tab.SYMBOL:=URZ_BAR.SYMBOL;
      _tab.add();

      URZ_BAR.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'KOD,SYMBOL',40,'Wybór etykiet do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_BAR.cntx_pop();
_result


\URZ_BAR_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_BAR.URZ_KOM().URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ_BAR.URZ_KOM().KOD;
_table.KOD.VALUE:=URZ_BAR.KOD;
_table.SYMBOL.VALUE:=URZ_BAR.SYMBOL;
_excel.write_async('URZ_KOM',URZ_BAR.URZ_KOM);
_excel.write_async('URZ_KAT',URZ_BAR.URZ_KOM().URZ_KAT);
_result


\URZ_BAR_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|| _result.RESULT:=1;
   URZ_BAR.index('URZ_BAR');
   URZ_BAR.prefix(_devprotcom,_table.KOD,);

   {? URZ_BAR.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_BAR.blank() ?};
      URZ_BAR.URZ_KOM:=_devprotcom;
      URZ_BAR.KOD:=_table.KOD;
      URZ_BAR.SYMBOL:=_table.SYMBOL
   ?}
?};
~~


\URZ_BAR_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_BAR.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_BAR.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie kodu kreskowego o nazwie %1 nie powiodło się.'@[_table.KOD]
   || _validate.MSG:='Poprawa kodu kreskowego o nazwie %1 nie powiodła się.'@[_table.KOD]
   ?}
?};
_result


\URZ_BARH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_BARH';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Wysokości kodów kreskowych'@+'=1,1';
_def.NAME:='Kod kreskowy'@;
_def.DESC:='Kod kreskowy'@;

_def.PREFIX:="URZ_BARH.index('URZ_BARH'); URZ_BARH.prefix()";
_def.TABLE:="URZ_BARH";
_def.FIELDS:="exec('URZ_BARH_fld','xls_urz',_a)";

_def.BEFORE:="URZ_BARH.cntx_psh()";
_def.AFTER:="URZ_BARH.cntx_pop()";
_def.SELECT:="exec('URZ_BARH_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_BARH_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_BARH_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_BARH_imp','xls_urz',_a,_b,_c)";
~~


\URZ_BARH_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa kategoria urządzenia');
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem');
_def.define('KOD','Kod',1,,'3 znakowy kod wysokości w j. DPL od 000 do 999');
_def.define('WYS','Wysokość w mm',1,,'20 znakowa wysokość w mm');
~~


\URZ_BARH_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'URZ_KOM','STRING[35]','Język drukarki'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'KOD','STRING[30]','Kod kodu kreskowego'
   ,'WYS','STRING[20]','Wysokość w mm');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,,'WYS',,);

URZ_BARH.cntx_psh();
URZ_BARH.index('URZ_BARH');
URZ_BARH.prefix();
{? URZ_BARH.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_BARH.ref();
      _selected.prefix($URZ_BARH.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.KOD:=URZ_BARH.KOD;
      _tab.WYS:=URZ_BARH.WYS;
      _tab.add();

      URZ_BARH.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'KOD,WYS',40,'Wybór etykiet do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_BARH.cntx_pop();
_result


\URZ_BARH_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_BARH.URZ_KOM().URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ_BARH.URZ_KOM().KOD;
_table.KOD.VALUE:=URZ_BARH.KOD;
_table.WYS.VALUE:=URZ_BARH.WYS;
_excel.write_async('URZ_KOM',URZ_BARH.URZ_KOM);
_excel.write_async('URZ_KAT',URZ_BARH.URZ_KOM().URZ_KAT);
_result


\URZ_BARH_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|| _result.RESULT:=1;
   URZ_BARH.index('URZ_BARH');
   URZ_BARH.prefix(_devprotcom,_table.KOD,);

   {? URZ_BARH.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_BARH.blank() ?};
      URZ_BARH.URZ_KOM:=_devprotcom;
      URZ_BARH.KOD:=_table.KOD;
      URZ_BARH.WYS:=_table.WYS
   ?}
?};
~~


\URZ_BARH_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_BARH.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_BARH.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie wysokości kodu kreskowego o nazwie %1 nie powiodło się.'@[_table.KOD]
   || _validate.MSG:='Poprawa wysokości kodu kreskowego o nazwie %1 nie powiodła się.'@[_table.KOD]
   ?}
?};
_result


\URZ_LABP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_LABP';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Pozycje etykiet prostych'@+'=1,1';
_def.NAME:='Pozycja etykiet prostych'@;
_def.DESC:='Pozycja etykiet prostych'@;
_def.HIDDEN:='T';

_def.PREFIX:="URZ_LABP.index('URZ_LABP'); URZ_LABP.prefix()";
_def.TABLE:="URZ_LABP";
_def.FIELDS:="exec('URZ_LABP_fld','xls_urz',_a)";

_def.BEFORE:="URZ_LABP.cntx_psh()";
_def.AFTER:="URZ_LABP.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('URZ_LABP_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_LABP_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_LABP_imp','xls_urz',_a,_b,_c)";
~~


\URZ_LABP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa kategoria urządzenia');
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem');
_def.define('URZ_LAB','Etykieta',1,,'35 znakowy kod etykiety');
_def.define('URZ_LABT','Typ pola',1,,'30 znakowy typ pola');
_def.define('POZ_X','Pozycja poziomo',1,,'27 znakowa pozycja poziomo w mm',1);
_def.define('POZ_Y','Pozycja pionowo',1,,'27 znakowa pozycja pionowo w mm',1);
_def.define('ROTACJA','Rotacja',1,,'1 znakowa rotacja 1 - 0 stopni 2 - 90 st. 3 - 180 st. 4 - 270 st.');
_def.define('FONTSIZE','Wielkość fontu',1,,'8 znakowa wielkość fontu');
_def.define('TXT_RODZ','Rodzaj tekstu',1,,'27 rodzaj tekstu T - Tag, W - Stałe pole');
_def.define('TEKST','Tekst',1,,'255 znakowa wartość pola tekstowego');
_def.define('URZ_TAG','Tag',1,,'30 znakowy kod zamiennika');
_def.define('BARCODE','Rodzaj kodu',1,,'30 znakowy kod kodu kreskowego');
_def.define('URZ_BARH','Wysokość kodu',1,,'3 kod wysokości w j. DPL od 000 do 999');
_def.define('PODPIS','Druk podpisu pod kodem',1,,'1 znakowy czy drukować wartość kodu czytelnie pod kodem kreskowym T - Tak N - Nie');
~~


\URZ_LABP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_LABP.URZ_LAB().URZ_KOM().URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ_LABP.URZ_LAB().URZ_KOM().KOD;
_table.URZ_LAB.VALUE:=URZ_LABP.URZ_LAB().KOD;
_table.URZ_LABT.VALUE:=URZ_LABP.URZ_LABT().TYP;
_table.POZ_X.VALUE:=URZ_LABP.POZ_X;
_table.POZ_Y.VALUE:=URZ_LABP.POZ_Y;
_table.ROTACJA.VALUE:=URZ_LABP.ROTACJA;
_table.FONTSIZE.VALUE:=URZ_LABP.FONTSIZE().KOD;
_table.TXT_RODZ.VALUE:=URZ_LABP.TXT_RODZ;
_table.TEKST.VALUE:=URZ_LABP.TEKST;
_table.URZ_TAG.VALUE:=URZ_LABP.URZ_TAG().KOD;
_table.BARCODE.VALUE:=URZ_LABP.BARCODE().KOD;
_table.URZ_BARH.VALUE:=URZ_LABP.URZ_BARH().KOD;
_table.PODPIS.VALUE:=URZ_LABP.PODPIS;
_excel.write_async('URZ_LAB',URZ_LABP.URZ_LAB);
_excel.write_async('URZ_LABT',URZ_LABP.URZ_LABT);
_excel.write_async('URZ_FONT',URZ_LABP.FONTSIZE);
_excel.write_async('URZ_TAG',URZ_LABP.URZ_TAG);
_excel.write_async('URZ_BAR',URZ_LABP.BARCODE);
_excel.write_async('URZ_BARH',URZ_LABP.URZ_BARH);
_result


\URZ_LABP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;
_barcode:='';
_urzbarh:='';

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|? (_urzlab:=exec('FindInSet','#table','URZ_LAB','URZ_LAB',_table.URZ_LAB,_devprotcom,,1))=null
|| _result.MSG:='Nie znaleziono etykiety: %1.'@[_table.URZ_LAB]
|? (_urzlabt:=exec('FindInSet','#table','URZ_LABT','URZ_LABT',_table.URZ_LABT,_table.URZ_LABT,,1))=null
|| _result.MSG:='Nie znaleziono typu pola: %1.'@[_table.URZ_LABT]
|? (_fontsize:=exec('FindInSet','#table','URZ_FONT','URZ_KOD',_table.FONTSIZE,_devprotcom,,1,_table.FONTSIZE))=null
|| _result.MSG:='Nie znaleziono rozmiaru fontu: %1.'@[_table.FONTSIZE]
|? (_tag:=exec('FindInSet','#table','URZ_TAG','URZ_TAG',_table.URZ_TAG,_table.URZ_TAG,,1))=null
|| _result.MSG:='Nie znaleziono tagu: %1.'@[_table.URZ_TAG]
|? _table.URZ_LABT='KOD KRESKOWY'||
   {? (_barcode:=exec('FindInSet','#table','URZ_BAR','URZ_BAR',_table.BARCODE,_devprotcom,,1,_table.BARCODE))=null
   || _result.MSG:='Nie znaleziono kodu kreskowego dla etykiety: %1.'@[_table.URZ_LAB]
   |? (_urzbarh:=exec('FindInSet','#table','URZ_BARH','URZ_BARH',_table.URZ_BARH,_devprotcom,,1))=null
   ||_result.MSG:='Nie znaleziono wysokości kodu kreskowego: %1.'@[_table.URZ_BARH]
   ?}
|| _result.RESULT:=1;
   URZ_LABP.index('URZ_LABP');
   URZ_LABP.prefix(_urzlab,_table.POZ_Y);

   {? URZ_LABP.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_LABP.blank() ?};
      URZ_LABP.URZ_LAB:=_urzlab;
      URZ_LABP.URZ_LABT:=_urzlabt;
      URZ_LABP.POZ_X:=_table.POZ_X;
      URZ_LABP.POZ_Y:=_table.POZ_Y;
      URZ_LABP.ROTACJA:=_table.ROTACJA;
      URZ_LABP.FONTSIZE:=_fontsize;
      URZ_LABP.TXT_RODZ:=_table.TXT_RODZ;
      URZ_LABP.TEKST:=_table.TEKST;
      URZ_LABP.URZ_TAG:=_tag;
      {? _barcode <> '' & _urzbarh <> ''
      || URZ_LABP.BARCODE:=_barcode;
         URZ_LABP.URZ_BARH:=_urzbarh
      ?};
      URZ_LABP.PODPIS:=_table.PODPIS
::   {? exec('chk_urz_lab','urzadzenia',{? _result.ACTION='add' || 'D' || 'P' ?})<>''
::   || _result.RESULT:=0
::   ?}
   ?}
?};
~~


\URZ_LABP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_LABP.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_LABP.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie pozycji etykiety prostej o nazwie %1 nie powiodło się.'@[_table.URZ_LAB]
   || _validate.MSG:='Poprawa pozycji etykiety prostej o nazwie %1 nie powiodła się.'@[_table.URZ_LAB]
   ?}
?};
_result


\URZ_LABZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_LABZ';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Pozycje etykiet zaawansowanych'@+'=1,1';
_def.NAME:='Pozycja etykiety zaawansowanej'@;
_def.DESC:='Pozycja etykiety zaawansowanej'@;
_def.HIDDEN:='T';

_def.PREFIX:="URZ_LABZ.index('URZ_LABZ'); URZ_LABZ.prefix()";
_def.TABLE:="URZ_LABZ";
_def.FIELDS:="exec('URZ_LABZ_fld','xls_urz',_a)";

_def.BEFORE:="URZ_LABZ.cntx_psh()";
_def.AFTER:="URZ_LABZ.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('URZ_LABZ_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_LABZ_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_LABZ_imp','xls_urz',_a,_b,_c)";
~~


\URZ_LABZ_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa kategoria urządzenia',2);
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem',2);
_def.define('URZ_LAB','Etykieta',1,,'35 znakowy kod etykiety',2);
_def.define('POZ','Pozycja etykiety',1,,'255 znakowa pozycja etykiety (kod w języku drukarki)',2);
_def.define('LP','Lp',1,,'11 znakowa liczba porządkowa',1,0);
~~


\URZ_LABZ_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_LABZ.URZ_LAB().URZ_KOM().URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ_LABZ.URZ_LAB().URZ_KOM().KOD;
_table.URZ_LAB.VALUE:=URZ_LABZ.URZ_LAB().KOD;
_table.POZ.VALUE:=URZ_LABZ.POZ;
_table.LP.VALUE:=URZ_LABZ.LP;
_excel.write_async('URZ_LAB',URZ_LABZ.URZ_LAB);

URZ_TAG.cntx_psh();
URZ_TAG.index('URZ_TAG');
URZ_TAG.prefix();
{? URZ_TAG.first()
|| {! |?
      {? URZ_LABZ.POZ*URZ_TAG.KOD>0
      || _excel.write_async('URZ_TAG',URZ_TAG.ref())
      ?};
      URZ_TAG.next()
   !}
?};
URZ_TAG.cntx_pop();
_result


\URZ_LABZ_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|? (_urzlab:=exec('FindInSet','#table','URZ_LAB','URZ_LAB',_table.URZ_LAB,_devprotcom,,1))=null
|| _result.MSG:='Nie znaleziono etykiety: %1.'@[_table.URZ_LAB]
|| _result.RESULT:=1;
   URZ_LABZ.index('URZ_LABZ');
   URZ_LABZ.prefix(_urzlab,_table.LP);

   {? URZ_LABZ.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_LABZ.blank() ?};
      URZ_LABZ.URZ_LAB:=_urzlab;
      URZ_LABZ.POZ:=_table.POZ;
      URZ_LABZ.LP:=_table.LP;
      {? exec('chk_urz_labz','urzadzenia')<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
~~


\URZ_LABZ_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_LABZ.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_LABZ.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie pozycji etykiety zaawansowanej o nazwie %1 nie powiodło się.'@[_table.URZ_LAB]
   || _validate.MSG:='Poprawa pozycji etykiety zaawansowanej o nazwie %1 nie powiodła się.'@[_table.URZ_LAB]
   ?}
?};
_result


\URZ_LABT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_LABT';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Lista typów pól prostych'@+'=1,1';
_def.NAME:='Typ pola prosty'@;
_def.DESC:='Typ pola prosty'@;
_def.HIDDEN:='T';

_def.PREFIX:="URZ_LABT.index('URZ_LABT'); URZ_LABT.prefix()";
_def.TABLE:="URZ_LABT";
_def.FIELDS:="exec('URZ_LABT_fld','xls_urz',_a)";

_def.BEFORE:="URZ_LABT.cntx_psh()";
_def.AFTER:="URZ_LABT.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('URZ_LABT_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_LABT_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_LABT_imp','xls_urz',_a,_b,_c)";
~~


\URZ_LABT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('TYP','Typ pola',0,,'30 znakowy typ pola');
~~


\URZ_LABT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.TYP.VALUE:=URZ_LABT.TYP;
_result


\URZ_LABT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

URZ_LABT.index('URZ_LABT');
URZ_LABT.prefix(_table.TYP,);

{? URZ_LABT.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
URZ_LABT.TYP:=_table.TYP;
~~


\URZ_LABT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_LABT.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_LABT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie typu pola o nazwie %1 nie powiodło się.'@[_table.TYP]
   || _validate.MSG:='Poprawa typu pola o nazwie %1 nie powiodła się.'@[_table.TYP]
   ?}
?};
_result


\URZ_FONT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_FONT';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Lista wielkości fontów'@+'=1,1';
_def.NAME:='Wielkość fontu'@;
_def.DESC:='Wielkość fontu'@;

_def.PREFIX:="URZ_FONT.index('URZ_KOD'); URZ_FONT.prefix()";
_def.TABLE:="URZ_FONT";
_def.FIELDS:="exec('URZ_FONT_fld','xls_urz',_a)";

_def.BEFORE:="URZ_FONT.cntx_psh()";
_def.AFTER:="URZ_FONT.cntx_pop()";
_def.SELECT:="exec('URZ_FONT_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_FONT_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_FONT_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_FONT_imp','xls_urz',_a,_b,_c)";
~~


\URZ_FONT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa kategoria urządzenia');
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem');
_def.define('SIZE','Wielkość',1,,'8 znakowa wielkość fontu');
_def.define('KOD','Kod',1,,'10 znakowy kod w języku programowania drukarki');
~~


\URZ_FONT_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'URZ_KOM','STRING[35]','Język drukarki'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'SIZE','STRING[8]','Wielkość fontu'
   ,'KOD','INTEGER[10]','Kod');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'URZ_KOM',,,'SIZE',,,'KOD',,);

URZ_FONT.cntx_psh();
URZ_FONT.index('URZ_KOD');
URZ_FONT.prefix();
{? URZ_FONT.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_FONT.ref();
      _selected.prefix($URZ_FONT.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.URZ_KOM:=URZ_FONT.URZ_KOM().KOD;
      _tab.SIZE:=URZ_FONT.SIZE;
      _tab.KOD:=URZ_FONT.KOD;
      _tab.add();

      URZ_FONT.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'URZ_KOM,SIZE,KOD',40,'Wybór wielkości fontu do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_FONT.cntx_pop();
_result


\URZ_FONT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_FONT.URZ_KOM().URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ_FONT.URZ_KOM().KOD;
_table.SIZE.VALUE:=URZ_FONT.SIZE;
_table.KOD.VALUE:=URZ_FONT.KOD;
_excel.write_async('URZ_KOM',URZ_FONT.URZ_KOM);
_excel.write_async('URZ_KAT',URZ_FONT.URZ_KOM().URZ_KAT);
_result


\URZ_FONT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|| _result.RESULT:=1;
   URZ_FONT.index('URZ_KOD');
   URZ_FONT.prefix(_devprotcom,_table.KOD,);

   {? URZ_FONT.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_FONT.blank() ?};
      URZ_FONT.URZ_KOM:=_devprotcom;
      URZ_FONT.SIZE:=_table.SIZE;
      URZ_FONT.KOD:=_table.KOD
   ?}
?};
~~


\URZ_FONT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_FONT.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_FONT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie wielkości fontu o rozmiarze %1 nie powiodło się.'@[_table.SIZE]
   || _validate.MSG:='Poprawa wielkości fontu o rozmiarze %1 nie powiodła się.'@[_table.SIZE]
   ?}
?};
_result


\URZ_HLP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_HLP';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Lista podpowiedzi'@+'=1,1';
_def.NAME:='Podpowiedź'@;
_def.DESC:='Podpowiedź'@;

_def.PREFIX:="URZ_HLP.index('URZ_HLP'); URZ_HLP.prefix()";
_def.TABLE:="URZ_HLP";
_def.FIELDS:="exec('URZ_HLP_fld','xls_urz',_a)";

_def.BEFORE:="URZ_HLP.cntx_psh()";
_def.AFTER:="URZ_HLP.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('URZ_HLP_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_HLP_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_HLP_imp','xls_urz',_a,_b,_c)";
~~


\URZ_HLP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('URZ_KAT','Kategoria urządzenia',1,,'30 znakowa kategoria urządzenia');
_def.define('URZ_KOM','Protokół urządzenia',1,,'20 znakowy kod metody komunikacji z urządzeniem');
_def.define('KOD','Kod polecenia',1,,'50 znakowy kod polecenia w języku drukarki drukarki');
_def.define('TRESC','Treść objaśnień',1,,'30 znakowa treść objaśnień');
~~


\URZ_HLP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.URZ_KAT.VALUE:=URZ_HLP.URZ_KOM().URZ_KAT().NAZWA;
_table.URZ_KOM.VALUE:=URZ_HLP.URZ_KOM().KOD;
_table.TRESC.VALUE:=URZ_HLP.memo_txt(,1,'TRESC');
_table.KOD.VALUE:=URZ_HLP.KOD;
_excel.write_async('URZ_KOM',URZ_HLP.URZ_KOM);
_excel.write_async('URZ_KAT',URZ_HLP.URZ_KOM().URZ_KAT);
_result


\URZ_HLP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;

{? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.URZ_KAT,_table.URZ_KAT,,1))=null
|| _result.MSG:='Nie znaleziono kategorii: %1.'@[_table.URZ_KAT]
|? (_devprotcom:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.URZ_KOM,_devcat,,1))=null
|| _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.URZ_KOM]
|| _result.RESULT:=1;
   URZ_HLP.index('URZ_HLP');
   URZ_HLP.prefix(_devprotcom,_table.KOD,);

   {? URZ_HLP.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || URZ_HLP.blank() ?};
      URZ_HLP.URZ_KOM:=_devprotcom;
      URZ_HLP.KOD:=_table.KOD
   ?}
?};
~~


\URZ_HLP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_HLP.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_HLP.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie podpowiedzi %1 o kodzie %2 w języku drukarki nie powiodło się.'@[_table.TRESC,_table.KOD]
   || _validate.MSG:='Poprawa podpowiedzi %1 o kodzie %2 w języku drukarki nie powiodło się.'@[_table.TRESC,_table.KOD]
   ?}
|| URZ_HLP.memo_set(_table.TRESC,'TRESC');
   URZ_HLP.memo_put(,'TRESC');
   URZ_HLP.put()
?};
_result


\URZ_KAT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='URZ_KAT';
_def.FUNPAR:='ZWS_URZ_DEF';
_def.MULTIFIR:='T';

_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Lista kategorii urządzeń'@+'=1,1';
_def.NAME:='Kategoria'@;
_def.DESC:='Kategoria'@;
_def.ADD_ROWS:=0;

_def.PREFIX:="URZ_KAT.index('NAZWA'); URZ_KAT.prefix()";
_def.TABLE:="URZ_KAT";
_def.FIELDS:="exec('URZ_KAT_fld','xls_urz',_a)";

_def.BEFORE:="URZ_KAT.cntx_psh()";
_def.AFTER:="URZ_KAT.cntx_pop()";
_def.SELECT:="exec('URZ_KAT_select','xls_urz',_a)";

_def.EXPORT:="exec('URZ_KAT_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('URZ_KAT_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('URZ_KAT_imp','xls_urz',_a,_b,_c)";
~~


\URZ_KAT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZWA','Nazwa',0,,'30 znakowa nazwa kategorii urządzeń');
~~


\URZ_KAT_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'NAZWA','STRING[30]','Nazwa'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NAZWA',,);

URZ_KAT.cntx_psh();
URZ_KAT.index('NAZWA');
URZ_KAT.prefix();
{? URZ_KAT.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$URZ_KAT.ref();
      _selected.prefix($URZ_KAT.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.NAZWA:=URZ_KAT.NAZWA;
      _tab.add();

      URZ_KAT.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NAZWA',30,'Wybór nazwy do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
URZ_KAT.cntx_pop();
_result


\URZ_KAT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.NAZWA.VALUE:=URZ_KAT.NAZWA;
_result


\URZ_KAT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

URZ_KAT.index('NAZWA');
URZ_KAT.prefix(_table.NAZWA,);

{? URZ_KAT.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
URZ_KAT.NAZWA:=_table.NAZWA;
~~


\URZ_KAT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=URZ_KAT.add(1)
   |? _validate.ACTION='put'
   || _result:=URZ_KAT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie kategorii urządzenia o nazwie %1 nie powiodło się.'@[_table.NAZWA]
   || _validate.MSG:='Poprawa kategorii urządzenia o nazwie %1 nie powiodła się.'@[_table.NAZWA]
   ?}
?};
_result


\FILE_PAR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='FILE_PAR';
_def.FUNPAR:='ZWS_URZ_FRM';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Formaty parametrów plików'@+'=1,1';
_def.NAME:='Format parametrów pliku'@;
_def.DESC:='Format parametrów pliku'@;

_def.PREFIX:="FILE_PAR.index('FRMKOD'); FILE_PAR.prefix()";
_def.TABLE:="FILE_PAR";
_def.FIELDS:="exec('FILE_PAR_fld','xls_urz',_a)";

_def.BEFORE:="FILE_PAR.cntx_psh()";
_def.AFTER:="FILE_PAR.cntx_pop()";
_def.SELECT:="exec('FILE_PAR_select','xls_urz',_a)";

_def.EXPORT:="exec('FILE_PAR_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('FILE_PAR_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('FILE_PAR_imp','xls_urz',_a,_b,_c)";
~~


\FILE_PAR_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('FILE_FRM','Format',0,,'40 znakowy kod formatu pliku',2);
_def.define('KOD','Kod parametru',0,,'25 znakowy kod parametru',2);
_def.define('WARTOSC','Wartość',0,,'11 znakowa wartość parametru (nr kolumny lub długość pola)',1,0);
_def.define('LP','Lp',0,,'11 znakowa liczba porządkowa',1,0);
~~


\FILE_PAR_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'FILE_FRM','STRING[30]','Format'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'KOD','STRING[25]','Kod parametru');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'FILE_FRM',,,'KOD',,);

FILE_PAR.cntx_psh();
FILE_PAR.index('FRMKOD');
FILE_PAR.prefix();
{? FILE_PAR.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$FILE_PAR.ref();
      _selected.prefix($FILE_PAR.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.FILE_FRM:=FILE_PAR.FILE_FRM().KOD;
      _tab.KOD:=FILE_PAR.KOD;
      _tab.add();

      FILE_PAR.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'FILE_FRM,KOD',30,'Wybór parametrów formatów pliku do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
FILE_PAR.cntx_pop();
_result


\FILE_PAR_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.FILE_FRM.VALUE:=FILE_PAR.FILE_FRM().KOD;
_table.KOD.VALUE:=FILE_PAR.KOD;
_table.WARTOSC.VALUE:=FILE_PAR.WARTOSC;
_table.LP.VALUE:=FILE_PAR.LP;
_excel.write_async('FILE_FRM',FILE_PAR.FILE_FRM);
_result


\FILE_PAR_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

{? (_fileformat:=exec('FindInSet','#table','FILE_FRM','KOD',_table.FILE_FRM,_table.FILE_FRM,,1))=null
|| _result.MSG:='Nie znaleziono formatu %1 pliku dla parametru %2 i jego wartości %3.'@[_table.FILE_FRM, _table.KOD, $_table.WARTOSC]
|| _result.RESULT:=1;
   FILE_PAR.index('FRMKOD');
   FILE_PAR.prefix(_fileformat,_table.KOD,);

   {? FILE_PAR.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || FILE_PAR.blank() ?};
      FILE_PAR.FILE_FRM:=_fileformat;
      FILE_PAR.KOD:=_table.KOD;
      FILE_PAR.WARTOSC:=_table.WARTOSC;
      FILE_PAR.LP:=_table.LP
   ?}
?};

~~


\FILE_PAR_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=FILE_PAR.add(1)
   |? _validate.ACTION='put'
   || _result:=FILE_PAR.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie formatu %1 pliku do parametru o nazwie %2 nie powiodło się.'@[_table.FILE_FRM,_table.KOD]
   || _validate.MSG:='Poprawa formatu %1 pliku do parametru o nazwie %2 nie powiodło się.'@[_table.FILE_FRM,_table.KOD]
   ?}
?};
_result


\FILE_FRM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='FILE_FRM';
_def.FUNPAR:='ZWS_URZ_FRM';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Formaty plików arkuszy danych'@+'=1,1';
_def.NAME:='Format pliku'@;
_def.DESC:='Format pliku'@;

_def.PREFIX:="FILE_FRM.index('KOD'); FILE_FRM.prefix()";
_def.TABLE:="FILE_FRM";
_def.FIELDS:="exec('FILE_FRM_fld','xls_urz',_a)";

_def.BEFORE:="FILE_FRM.cntx_psh()";
_def.AFTER:="FILE_FRM.cntx_pop()";
_def.SELECT:="exec('FILE_FRM_select','xls_urz',_a)";

_def.EXPORT:="exec('FILE_FRM_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('FILE_FRM_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('FILE_FRM_imp','xls_urz',_a,_b,_c)";
~~


\FILE_FRM_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KOD','Kod',0,,'40 znakowy kod formatu pliku');
_def.define('OPIS','Opis',0,,'255 znakowy opis formatu pliku');
_def.define('R_PLIK','Rodzaj pliku',0,,'3 znakowy plik binarny - BIN tekstowy - TXT');
_def.define('EXT','Rozszerzenie pliku',0,,'3 znakowe rozszerzenie pliku');
_def.define('SEP','Separator',0,,'1 znakowy separator pól');
_def.define('PLIK_ZAM','Plik zamienników',0,,'255 znakowa nazwa pliku z zamiennikami');
~~


\FILE_FRM_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'KOD','STRING[40]','Kod'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'OPIS','STRING[255]','Opis'
   ,'EXT','STRING[3]','Rozszerzenie pliku');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,,'OPIS',,,'EXT',,);

FILE_FRM.cntx_psh();
FILE_FRM.index('KOD');
FILE_FRM.prefix();
{? FILE_FRM.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$FILE_FRM.ref();
      _selected.prefix($FILE_FRM.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.KOD:=FILE_FRM.KOD;
      _tab.OPIS:=FILE_FRM.OPIS;
      _tab.EXT:=FILE_FRM.EXT;
      _tab.add();

      FILE_FRM.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'KOD,OPIS,EXT',30,'Wybór formatu pliku do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
FILE_FRM.cntx_pop();
_result


\FILE_FRM_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.KOD.VALUE:=FILE_FRM.KOD;
_table.OPIS.VALUE:=FILE_FRM.OPIS;
_table.R_PLIK.VALUE:=FILE_FRM.R_PLIK;
_table.EXT.VALUE:=FILE_FRM.EXT;
_table.SEP.VALUE:=FILE_FRM.SEP;
_table.PLIK_ZAM.VALUE:=FILE_FRM.PLIK_ZAM;
_result


\FILE_FRM_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

FILE_FRM.index('KOD');
FILE_FRM.prefix(_table.KOD,);

{? FILE_FRM.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
FILE_FRM.KOD:=_table.KOD;
FILE_FRM.OPIS:=_table.OPIS;
FILE_FRM.R_PLIK:=_table.R_PLIK;
FILE_FRM.EXT:=_table.EXT;
FILE_FRM.SEP:=_table.SEP;
FILE_FRM.PLIK_ZAM:=_table.PLIK_ZAM;
~~


\FILE_FRM_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=FILE_FRM.add(1)
   |? _validate.ACTION='put'
   || _result:=FILE_FRM.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie formatu pliku o nazwie %1 nie powiodło się.'@[_table.EXT]
   || _validate.MSG:='Poprawa formatu pliku o nazwie %1 nie powiodła się.'@[_table.EXT]
   ?}
?};
_result


\PARWYD_dr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PARWYDR';
_def.FUNPAR:='ZWS_PAR_WYDG_OG';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Globalne parametry wydruków'@+'=1,1';
_def.NAME:='Globalne parametry wydruków'@;
_def.DESC:='Parametr'@;
_def.ADD_ROWS:=0;

_def.PREFIX:="PARWYD.index('USER'); PARWYD.prefix(null)";
_def.TABLE:="PARWYD";
_def.FIELDS:="exec('PARWYD_dr_fld','xls_urz',_a)";

_def.BEFORE:="PARWYD.cntx_psh()";
_def.AFTER:="PARWYD.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('PARWYD_dr_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('PARWYD_dr_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('PARWYD_dr_imp','xls_urz',_a,_b,_c)";
~~


\PARWYD_dr_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('MIEJSC','Miejscowość',1,,'20 znakowa nazwa miejscowości',2);
_def.define('HEAD','Nagłówek',1,,'1 znakowy czy drukować nagłówek 1 - Tak 0 - Nie',1,0);
_def.define('SIGN','Sygnatura',1,,'1 znakowy czy drukować sygnaturę 1 - Tak 0 - Nie',1,0);
_def.define('NUM','Numeracja stron',1,,'1 znakowy czy drukować numerację stron 1 - Tak 0 - Nie',1,0);
_def.define('CZAS','Czas',1,,'1 znakowy czy drukować datę i czas generowania raportów 1 - Tak 0 - Nie',1,0);
_def.define('LOGO','Logo',1,,'1 znakowy czy drukować logo licencjobiorcy 1 - Tak 0 - Nie',1,0);
_def.define('RSEP','Separator rekordów',1,,'1 znakowy czy drukować dodatkowy separator rekordów 1 - Tak 0 - Nie',1,0);
_def.define('SHAD','Wyszarzenie',1,,'3 znakowy procent wyszarzenia',1,0);
_def.define('FONTW','Tekst wolny',1,,'60 znakowa czcionka tekstu wolnego',2);
_def.define('FONTTAB','Tekst tabeli',1,,'60 znakowa czcionka tekstu w tabeli',2);
~~


\PARWYD_dr_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.MIEJSC.VALUE:=PARWYD.MIEJSC;
_table.HEAD.VALUE:=PARWYD.HEAD;
_table.SIGN.VALUE:=PARWYD.SIGN;
_table.NUM.VALUE:=PARWYD.NUM;
_table.CZAS.VALUE:=PARWYD.CZAS;
_table.LOGO.VALUE:=PARWYD.LOGO;
_table.RSEP.VALUE:=PARWYD.RSEP;
_table.SHAD.VALUE:=PARWYD.SHAD;
_table.FONTW.VALUE:=PARWYD.FONTW;
_table.FONTTAB.VALUE:=PARWYD.FONTTAB;
_result


\PARWYD_dr_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

PARWYD.index('USER');
PARWYD.prefix(null);

{? PARWYD.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};

PARWYD.MIEJSC:=_table.MIEJSC;
PARWYD.HEAD:=_table.HEAD;
PARWYD.SIGN:=_table.SIGN;
PARWYD.NUM:=_table.NUM;
PARWYD.CZAS:=_table.CZAS;
PARWYD.LOGO:=_table.LOGO;
PARWYD.RSEP:=_table.RSEP;
PARWYD.SHAD:=_table.SHAD;
PARWYD.FONTW:=_table.FONTW;
PARWYD.FONTTAB:=_table.FONTTAB;
~~


\PARWYD_dr_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PARWYD.add(1)
   |? _validate.ACTION='put'
   || _result:=PARWYD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie globalnych parametrów wydruków nie powiodło się.'
   || _validate.MSG:='Poprawa globalnych parametrów wydruków nie powiodła się.'
   ?}
?};
_result


\PARWYD_urz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PARURZ';
_def.FUNPAR:='ZWS_PAR_WYDG_UR';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('filename','xls_urz');
_def.SHEET:='Globalne parametry urządzeń'@+'=1,1';
_def.NAME:='Globalne parametry urządzeń'@;
_def.DESC:='Parametr'@;
_def.ADD_ROWS:=0;

_def.PREFIX:="PARWYD.index('USER'); PARWYD.prefix(null)";
_def.TABLE:="PARWYD";
_def.FIELDS:="exec('PARWYD_urz_fld','xls_urz',_a)";

_def.BEFORE:="PARWYD.cntx_psh()";
_def.AFTER:="PARWYD.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('PARWYD_urz_exp','xls_urz',_a,_b)";
_def.VALIDATE:="exec('PARWYD_urz_valid','xls_urz',_a,_b,_c)";
_def.IMPORT:="exec('PARWYD_urz_imp','xls_urz',_a,_b,_c)";
~~


\PARWYD_urz_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('DR_KAT','Kategoria drukarki',1,,'30 znakowa kategoria drukarki',2);
_def.define('DR_KOM','Protokół drukarki',1,,'20 znakowy kod metody komunikacji z urządzeniem',2);
_def.define('DR_NAZ','Nazwa drukarki',1,,'30 znakowy nazwa drukarki',2);

_def.define('KOL_KAT','Kategoria kolektora',1,,'30 znakowa kategoria kolektora',2);
_def.define('KOL_KOM','Protokół kolektora',1,,'20 znakowy kod metody komunikacji z urządzeniem',2);
_def.define('KOL_NAZ','Nazwa kolektora',1,,'30 znakowy nazwa kolektora',2);

_def.define('FONTKRES','Czcionka kodu kreskowego',1,,'60 znakowa nazwa fontu z kodem kreskowym',2);
_def.define('DRIVER','Drajwer dla JETCAPS',1,,'20 znakowy drajwer dla JETCAPS',2);
_def.define('FILEFIND','Pliki na serwerze',1,,'1 znakowy 1 - plik z kolektora danych na serwerze 0 - plik lokalny',1,0);
_def.define('KATALOG','Katalog lokalny',1,,'100 znakowy katalog lokalny na pliki z kolektora danych',2);

_def.define('URZ_LAB','Etykieta',1,,'35 znakowy kod etykiety',2);
_def.define('FILE_FRM','Format pliku',1,,'40 znakowy kod formatu pliku',2);
_def.define('KODKRESK','Format czcionki kreskowej',1,,'Format czcionki kodu kreskowego',2);
~~


\PARWYD_urz_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async(ml
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;

_table.DR_KAT.VALUE:=PARWYD.TYPDR().URZ_KAT().NAZWA;
_table.DR_KOM.VALUE:=PARWYD.TYPDR().URZ_KOM().KOD;
_table.DR_NAZ.VALUE:=PARWYD.TYPDR().NAZWA;
_excel.write_async('URZ',PARWYD.TYPDR);

_table.KOL_KAT.VALUE:=PARWYD.TYPKOL().URZ_KAT().NAZWA;
_table.KOL_KOM.VALUE:=PARWYD.TYPKOL().URZ_KOM().KOD;
_table.KOL_NAZ.VALUE:=PARWYD.TYPKOL().NAZWA;
_excel.write_async('URZ',PARWYD.TYPKOL);

_table.FONTKRES.VALUE:=PARWYD.FONTKRES;
_table.DRIVER.VALUE:=PARWYD.DRIVER;
_table.FILEFIND.VALUE:=PARWYD.FILEFIND;
_table.KATALOG.VALUE:=PARWYD.KATALOG;

_table.URZ_LAB.VALUE:=PARWYD.URZ_LAB().KOD;
_excel.write_async('URZ_LAB',PARWYD.URZ_LAB);

_table.FILE_FRM.VALUE:=PARWYD.FILE_FRM().KOD;
_excel.write_async('FILE_FRM',PARWYD.FILE_FRM);
_table.KODKRESK.VALUE:=PARWYD.KODKRESK;
_result


\PARWYD_urz_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla impofml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;
_devprot:=null;

{? _table.DR_KAT <> ''
|| {? (_devcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.DR_KAT,_table.DR_KAT,,1))=null
   || _result.MSG:='Nie znaleziono kategorii drukarki: %1.'@[_table.DR_KAT];_result.RESULT:=1
   |? (_devprot:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.DR_KOM,_devcat,,1))=null
   || _result.MSG:='Nie znaleziono protokołu komunikacji: %1.'@[_table.DR_KOM];_result.RESULT:=1
   |? (_typdr:=exec('FindInSet','#table','URZ','URZ',_table.DR_NAZ,_devcat,,1,_devprot))=null
   || _result.MSG:='Nie znaleziono typu drukarki: %1.'@[_table.DR_NAZ];_result.RESULT:=1
   || _result.RESULT:=1
   ?}
|| _result.RESULT:=1
?};

{? _result.RESULT=1
|| {? _table.KOL_KAT <> ''
   || {? (_kdevcat:=exec('FindInSet','#table','URZ_KAT','NAZWA',_table.KOL_KAT,_table.KOL_KAT,,1))=null
      || _result.MSG:='Nie znaleziono kategorii kolektora: %1.'@[_table.KOL_KAT];_result.RESULT:=1
      |? (_kdevprot:=exec('FindInSet','#table','URZ_KOM','KATKOD',_table.KOL_KOM,_kdevcat,,1))=null
      || _result.MSG:='Nie znaleziono protokołu komunikacji kolektora: %1.'@[_table.KOL_KOM];_result.RESULT:=1
      |? (_typkol:=exec('FindInSet','#table','URZ','URZ',_table.KOL_NAZ,_kdevcat,,1,_kdevprot))=null
      || _result.MSG:='Nie znaleziono typu kolektora: %1.'@[_table.KOL_NAZ];_result.RESULT:=1
      ?}
   || _result.RESULT:=1
   ?}
?};

{? _result.RESULT=1
|| {? _table.URZ_LAB <> '' & _devprot <> null
   || {? (_urzlab:=exec('FindInSet','#table','URZ_LAB','URZ_LAB',_table.URZ_LAB,_devprot,,1))=null
      || _result.MSG:='Nie znaleziono etykiety: %1.'@[_table.URZ_LAB];_result.RESULT:=1
      ?}
   || _result.RESULT:=1
   ?};
   {? _table.FILE_FRM <> ''
   || {? (_fileformat:=exec('FindInSet','#table','FILE_FRM','KOD',_table.FILE_FRM,_table.FILE_FRM,,1))=null
      || _result.MSG:='Nie znaleziono formatu %1 pliku dla parametrów urządzeń.'@[_table.FILE_FRM];_result.RESULT:=1
      ?}
   || _result.RESULT:=1
   ?}
?};

{? _result.RESULT=1
||
   PARWYD.index('USER');
   PARWYD.prefix(null);

   {? PARWYD.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};

   PARWYD.FONTKRES:=_table.FONTKRES;
   {? var_press('_typdr')>0 || PARWYD.TYPDR:=_typdr || PARWYD.TYPDR:=null ?};
   {? var_press('_typkol')>0 || PARWYD.TYPKOL:=_typkol ?};
   PARWYD.DRIVER:=_table.DRIVER;
   PARWYD.FILEFIND:=_table.FILEFIND;
   PARWYD.KATALOG:=_table.KATALOG;
   {? var_press('_urzlab')>0 || PARWYD.URZ_LAB:=_urzlab ?};
   {? var_press('_fileformat')>0 || PARWYD.FILE_FRM:=_fileformat ?};
   PARWYD.KODKRESK:=_table.KODKRESK
?};
~~


\PARWYD_urz_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AF [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - su.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;

{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PARWYD.add(1)
   |? _validate.ACTION='put'
   || _result:=PARWYD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie globalnych parametrów urządzeń nie powiodło się.'
   || _validate.MSG:='Poprawa globalnych parametrów urządzeń nie powiodła się.'
   ?}
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 2ddaa3d25bc0e048d3ae3c343669e5108308627104cee0e6d7329aaef50a2e8e39ad381630e72480656c964e0e2b9ee93137da97cf0b21dde48990e5494b0eae3658d46b565d93772b546bc41947a4f574d0b4a288dd0255b30818bb133cb8bb319ab12e4bc166f43b933fa190e0d11edb34642e2eead848577e274b648808cd
