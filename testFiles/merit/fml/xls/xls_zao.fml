:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_zao.fml
:: Utworzony: 25.09.2018
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły do obsługi danych związanych z załącznikami danych osobowych.
::======================================================================================================================


\def_common
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Wspólna część definicji.
::   WE: _a [OBJECT] - Środowisko mechanizmu.
::       _b STRING] - Zakres eksportu (Załączniki / Dokumentacja pracownicza).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_zakres:=_b;

{? _zakres=exec('zaoh_path','zalacz','G0Z')
|| _def.FUNPAR:='ZWS_PAR_POZA';
   _def.DOMAIN:=exec('name','#b_domain','PKD')
|| _def.FUNPAR:='ZWS_PAR_PPED';
   _def.DOMAIN:=exec('name','#b_domain','PED')
?};
_def.FILE:='personel_zalaczniki.xlsx';

_def.ADD_ROWS:=0;

~~


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła dla bieżącego rekordu tabeli ZAOH zwraca informacje pozwalające na identyfikację.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('PATH','PREV','NEXT');
{! _lp:=1 .. obj_len(_ret)
|! _ret[_lp]:=''
!};

ZAOH.cntx_psh();
ZAOH.index('LP');
ZAOH.prefix();
{!
|? ZAOH.seek(ZAOH.ZAOH,)
|! _ret.PATH:=ZAOH.NAZWA+'\t'+_ret.PATH
!};
{? _ret.PATH+1='\t'
|| _ret.PATH:=_ret.PATH-1
?};
ZAOH.cntx_pop();

_ref:=ZAOH.ref();
ZAOH.cntx_psh();
ZAOH.index('LP');
ZAOH.prefix(ZAOH.ZAOH);
{? ZAOH.first()
|| _pb:=1;
   {!
   |? {? ZAOH.ref()=_ref
      || _pb:=0
      |? _pb
      || _ret.PREV+='\t'+ZAOH.NAZWA
      || _ret.NEXT+='\t'+ZAOH.NAZWA
      ?};
      ZAOH.next()
   !};
   _ret.PREV:=1-_ret.PREV;
   _ret.NEXT:=1-_ret.NEXT
?};
ZAOH.cntx_pop();

_ret


::======================================================================================================================


\init_zaoh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Inicjowanie mechanizmu.
::   WE:  _a  [OBJECT] - Środowisko mechanizmu.
::       [_b] [STRING] - Zakres eksportu (*Załączniki / Dokumentacja pracownicza).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_sep:=exec('zaoh_path','zalacz','SEP');
_g0d:=exec('zaoh_path','zalacz','G0D');
_g0z:=exec('zaoh_path','zalacz','G0Z');

_zakres:={? var_pres('_b')=type_of('') & (_b=_g0z | _b=_g0d) || _b || _g0z ?};

exec('def_common','xls_zao',_def,_zakres);
{? _zakres=_g0z
|| _def.ID:='ZAOH_Z';
   _def.SHEET:='Struktura akt osobowych=1,1';
   _def.NAME:='Struktura akt osobowych'@;
   _def.DESC:='Definicja hierarchicznej struktury akt osobowych'@
|| _def.ID:='ZAOH_D';
   _def.SHEET:='Struktura dokumentacji prac.=1,1';
   _def.NAME:='Struktura dokumentacji pracowniczej'@;
   _def.DESC:='Definicja hierarchicznej struktury dokumentacji pracowniczej'@
?};

_def.TABLE:="ZAOH";
_def.BEFORE:=$("
   ZAOH.cntx_psh();
   {? _a.is_export()
   || ZAOH.prefix();
      ZAOH.f_set('ZAOH,LP',,'""ZAOH"".PATH like \\'"+_zakres+_sep+"%\\'')
   || ZAOH.index('NAZWA');
      ZAOH.prefix()
   ?};
   ZAOH.prefix()
");
_def.PREFIX:="";
_def.AFTER:="
   ZAOH.f_clear();
   ZAOH.cntx_pop()
";
_def.FIELDS:="exec('fields_zaoh','xls_zao',_a)";
_def.EXPORT:="exec('export_zaoh','xls_zao',_a,_b)";
_def.VALIDATE:="exec('validate_zaoh','xls_zao',_a,_b,_c)";
_def.IMPORT:=$("exec('import_zaoh','xls_zao',_a,_b,_c,'"+_zakres+"')");

~~


\fields_zaoh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła definiuje eksportowane/importowane pola.
::   WE: _a [OBJECT] - Obiekt do obsługi pól.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fld:=_a;

_fl:="MS.name(ZAOH,_a)";
_fc:="MS.comment(ZAOH,_a)";

_fld.define('NAZWA',_fl('NAZWA'),0,,_fc('NAZWA'));
_fld.define('SYSTEM',_fl('SYSTEM'),0,,_fc('SYSTEM'));
_fld.define('OPIS',_fl('OPIS'),1,,_fc('OPIS'));
_fld.define('PATH','Ścieżka'@,0,,'Pole technicze - pokazuje pełną ścieżkę dostępu do elementu'@);
_fld.define('PREV','Poprzedniki'@,0,,'Lista poprzedników (pole techniczne)'@);
_fld.define('NEXT','Następniki'@,0,,'Lista następników (pole techniczne)'@);

~~


\export_zaoh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła wypełnia bufor, na podstawie które wykonany zostanie zapis danych w arkuszu.
::   WE: _a [OBJECT] - Środowisko mechanizmu.
::       _b [OBJECT] - Obiekt bufora.
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_buf:=_b;

_info:=exec('info','xls_zao');

_buf.NAZWA.VALUE:=ZAOH.NAZWA;
_buf.SYSTEM.VALUE:=ZAOH.SYSTEM;
_buf.OPIS.VALUE:=ZAOH.memo_txt(0,1,'OPIS');
_buf.PATH.VALUE:=_info.PATH;
_buf.PREV.VALUE:=_info.PREV;
_buf.NEXT.VALUE:=_info.NEXT;

1


\validate_zaoh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła sprawdza, czy można poprawić/dodać rekord.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

:: Błędy krytyczne
_fld:=
   {? _buf.NAZWA=''
   || 'NAZWA'
   |? _buf.SYSTEM=''
   || 'SYSTEM'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_empty('NAZWA');
   _validate.RESULT:=0;
   return()
?};

{? +_buf.SYSTEM<>1 | 'TN'*_buf.SYSTEM=0
|| _validate.msg_inset('SYSTEM','T','N');
   _validate.RESULT:=0;
   return()
?};

:: Szukamy rodzica.
_parent:=0;
{? _buf.PATH=''
|| _paths:=''
|| _paths:=gsub(_buf.PATH,'\t','/');
   _ok:=1;
   _apath:=spli_str(_buf.PATH,'\t');
   {! _lp:=1 .. obj_len(_apath)
   |? _ok
   |! {? _apath[_lp]<>''
      || {? ZAOH.find_key(_parent,_apath[_lp],)
         || _parent:=#ZAOH.ref()
         || _ok:=0
         ?}
      ?}
   !};
   {? ~_ok
   || _validate.msg_value('NAZWA','Brak dostępu do ścieżki: %1'@ [_paths]);
      _validate.RESULT:=0;
      return()
   ?}
?};

_validate.OBJ:=obj_new('PARENT','PATH');
_validate.OBJ.PARENT:=_parent;
_validate.OBJ.PATH:=_paths;

{? ZAOH.find_key(_parent,_buf.NAZWA,)
|| {? _update
   || _validate.ACTION:='put'
   || _validate.RESULT:=0
   ?}
|| _validate.ACTION:='add'
?};

~~


\import_zaoh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiedzialna za utworzenie lub aktualizację rekordu.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::       _d] [STRING] - Zakres eksportu (Załączniki / Dokumentacja pracownicza).
::   WY: Status operacji: 0/1
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;
_zakres:=_d;

_ret:=1;

_key:='%1 [%2]' [_buf.NAZWA,_validate.OBJ.PATH];

{? _validate.ACTION='add'
|| _curLP:=-1;
:: Jakie powinno być nowe LP?
   _newLP:=0;

   ZAOH.cntx_psh();
   ZAOH.prefix(_validate.OBJ.PARENT);
   {? _buf.NEXT<>''
::    Jeżeli podane są następniki, to szukamy pozycji (LP) pierwszego z nich, który istnieje.
   || _anext:=spli_str(_buf.NEXT,'\t');
      {! _lp:=1 .. obj_len(_anext)
      |? _newLP=0
      |! {? ZAOH.find_key(_anext[_lp],)
         || _newLP:=ZAOH.LP
         ?}
      !}
   ?};
   {? _newLP=0
::    LP wciąż nieustalone: albo nie było następników, albo żaden z nich nie występuje (jeszcze) w ZAOH.
::    Oznacza to, że dodajemy element na końcu.
   || ZAOH.index('LP');
      ZAOH.prefix(_validate.OBJ.PARENT);
      _newLP:={? ZAOH.last() || ZAOH.LP ?}+1
   ?};
   ZAOH.cntx_pop();

   {? _curLP<>_newLP
::    Zakładamy, że bieżąca numeracja jest prawidłowa. Musimy zatem przygotować miejsce na nowy rekord.
   || ZAOH.cntx_psh();
      ZAOH.index('LP');
      ZAOH.prefix(_validate.OBJ.PARENT);
      {? ZAOH.last()
      || {!
         |? {? ZAOH.LP>=_newLP
            || ZAOH.LP+=1;
               ZAOH.put();
               ZAOH.prev()
            ?}
         !}
      ?};
      ZAOH.cntx_pop()
   ?};

   ZAOH.blank();
   ZAOH.ZAOH:=_validate.OBJ.PARENT;
   ZAOH.LP:=_newLP;
   ZAOH.NAZWA:=_buf.NAZWA;
   ZAOH.SYSTEM:=_buf.SYSTEM;
   {? ZAOH.ZAOH=0
   || ZAOH.CZESC:={? _zakres='Z' || exec('zaoh_path','zalacz','G0Z') || exec('zaoh_path','zalacz','G0D') ?}
   ?};
   ZAOH.memo_set(_buf.OPIS,'OPIS');
   {? ~(ZAOH.add(1) & ZAOH.memo_put(,'OPIS'))
   || _ret:=0;
      _validate.msg_insert(_key)
   ?}

|? _validate.ACTION='put'
|| _curLP:=ZAOH.LP;
:: Jakie powinno być nowe LP?
   _newLP:=0;

   ZAOH.cntx_psh();
   {? _buf.PREV<>''
::    Jeżeli podane są poprzedniki, to szukamy pozycji (LP) pierwszego z nich, który istnieje.
   || ZAOH.index('NAZWA');
      ZAOH.prefix(_validate.OBJ.PARENT);
      _aprev:=spli_str(_buf.PREV,'\t');
      {! _lp:=obj_len(_aprev) // -1 .. 1
      |? _newLP=0
      |! {? ZAOH.find_key(_aprev[_lp])
         || _newLP:=ZAOH.LP+1
         ?}
      !}
   ?};
   {? _newLP=0
::    LP wciąż nieustalone: albo nie było poprzedników, albo żaden z nich nie występuje (jeszcze) w ZAOH.
::    Oznacza to, że dodajemy element na początku. Zakładamy, że arkusz nie może byc zmieniany.
   || _newLP:=1
   ?};
   ZAOH.cntx_pop();

   {? _curLP<>_newLP
   ||
::    Najpierw "odkładamy na bok" bieżący element.
      ZAOH.LP:=-1;
      ZAOH.put();

      ZAOH.cntx_psh();
      ZAOH.index('LP');
      ZAOH.prefix(_validate.OBJ.PARENT);

      {? _curLP<_newLP
      || {? ZAOH.find_key(_curLP+1)
         || {!
            |? ZAOH.LP-=1;
               ZAOH.put();
               ZAOH.next() & ZAOH.LP<=_newLP
            !}
         || _validate.msg_update('Przenumerowanie nie powiodło się. [1]');
            _ret:=0
         ?}
      || {? ZAOH.find_key(_curLP-1)
         || {!
            |? ZAOH.LP+=1;
               ZAOH.put();
               ZAOH.prev() & ZAOH.LP>=_newLP
            !}
         || _validate.msg_update('Przenumerowanie nie powiodło się. [2]');
            _ret:=0
         ?}
      ?};
      ZAOH.cntx_pop()

   ?};

   {? ZAOH.LP<>_newLP | ZAOH.SYSTEM<>_buf.SYSTEM | ZAOH.memo_txt(0,0,'OPIS')<>_buf.OPIS
   || ZAOH.LP:=_newLP;
      ZAOH.SYSTEM:=_buf.SYSTEM;
      ZAOH.memo_set(_buf.OPIS,'OPIS');
      {? ~(ZAOH.put(1) & ZAOH.memo_put(,'OPIS'))
      || _ret:=0;
         _validate.msg_update(_key)
      ?}
   ?}

?};

_ret


::======================================================================================================================


\init_zaots
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Inicjowanie mechanizmu.
::   WE:  _a  [OBJECT] - Środowisko mechanizmu.
::       [_b] [STRING] - Zakres eksportu (*Załączniki / Dokumentacja pracownicza).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_sep:=exec('zaoh_path','zalacz','SEP');
_g0d:=exec('zaoh_path','zalacz','G0D');
_g0z:=exec('zaoh_path','zalacz','G0Z');

_zakres:={? var_pres('_b')=type_of('') & (_b=_g0z | _b=_g0d) || _b || _g0z ?};

exec('def_common','xls_zao',_def,_zakres);
{? _zakres=_g0z
|| _def.ID:='ZAOTS_Z';
   _def.SHEET:='Typy załącz. w strukturze akt=1,1';
   _def.NAME:='Typy załączników w strukturze akt'@;
   _def.DESC:='Dostępność typów załączników w strukturze akt osobowych'@
|| _def.ID:='ZAOTS_D';
   _def.SHEET:='Typy załącz. w dok. prac.=1,1';
   _def.NAME:='Typy załączników w dok. prac.'@;
   _def.DESC:='Dostępność typów załączników w strukturze dok. prac.'@
?};

_def.TABLE:="ZAOTS";
_def.BEFORE:=$("
   ZAOH.cntx_psh();
   ZAOH.index('NAZWA');
   ZAOH.prefix();
   SLO_NAZ.cntx_psh();
   SLO_NAZ.index('NAZWA');
   SLO_NAZ.prefix();
   SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');
   SLO_KOD.prefix();
   ZAOTS.cntx_psh();
   {? _a.is_export()
   || ZAOTS.prefix();
      ZAOTS.f_set('ZAOH,SLO_NAZ(NAZWA)',,'""ZAOTS"".G=\\'"+_zakres+"\\'')
   || ZAOTS.index('SLO_NAZ');
      ZAOTS.prefix()
   ?}
");
_def.AFTER:="
   ZAOTS.f_clear();
   ZAOTS.cntx_pop();
   SLO_KOD.cntx_pop();
   SLO_NAZ.cntx_pop();
   ZAOH.cntx_pop()
";
_def.FIELDS:="exec('fields_zaots','xls_zao',_a)";
_def.EXPORT:=$("exec('export_zaots','xls_zao',_a,_b,'"+_zakres+"')");
_def.VALIDATE:=$("exec('validate_zaots','xls_zao',_a,_b,_c,'"+_zakres+"')");
_def.IMPORT:=$("exec('import_zaots','xls_zao',_a,_b,_c,'"+_zakres+"')");

~~


\fields_zaots
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła definiuje eksportowane/importowane pola.
::   WE: _a [OBJECT] - Obiekt do obsługi pól.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fld:=_a;

_fld.define('ZAOH','Element'@,0,,'Nazwa element struktury'@);
_fld.define('SLO_NAZ','Załącznik'@,0,,'Typ załącznika'@);
_fld.define('SLO_KOD','Rodzaj'@,0,,'Rodzaj dokumentu'@);
_fld.define('PATH','Ścieżka'@,0,,'Pole technicze - pokazuje pełną ścieżkę dostępu do elementu'@);

~~


\export_zaots
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła wypełnia bufor, na podstawie które wykonany zostanie zapis danych w arkuszu.
::   WE: _a [OBJECT] - Środowisko mechanizmu.
::       _b [OBJECT] - Obiekt bufora.
::       _c [STRING] - Zakres eksportu (Załączniki / Dokumentacja pracownicza).
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_buf:=_b;
_zakres:=_c;

ZAOTS.ZAOH();
ZAOTS.SLO_NAZ();
ZAOTS.SLO_KOD();

_info:=exec('info','xls_zao');

_buf.ZAOH.VALUE:=ZAOH.NAZWA;
_buf.SLO_NAZ.VALUE:=SLO_NAZ.NAZWA;
_buf.SLO_KOD.VALUE:=SLO_KOD.KOD;
_buf.PATH.VALUE:=_info.PATH;

_excel.write_async('ZAOH_'+_zakres,ZAOH.ref());
_excel.write_async('SLO_NAZ',SLO_NAZ.ref());
_excel.write_async('SLO_KOD',SLO_KOD.ref());

1


\validate_zaots
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła sprawdza, czy można poprawić/dodać rekord.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::       _d [STRING] - Zakres eksportu (Załączniki / Dokumentacja pracownicza).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;
_zakres:=_d;

:: Błędy krytyczne
_fld:=
   {? _buf.ZAOH=''
   || 'ZAOH'
   |? _buf.SLO_NAZ=''
   || 'SLO_NAZ'
   |? _buf.PATH=''
::    W programie nie można przywiązać załącznika do elementu "głównego", tak więc element z załącznikiem musi mieć
::    rodzica - ścieżka nie może być pusta.
   || 'PATH'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_empty(_fld);
   _validate.RESULT:=0;
   return()
?};

_path:=_buf.PATH+'\t'+_buf.ZAOH;
_paths:=gsub(_path,'\t','/');
_apathi:=spli_str(_path,'\t');

_ok:=1;
_parent:=0;
{! _lp:=1 .. obj_len(_apathi)
|? _ok
|! {? _apathi[_lp]<>''
   || {? ZAOH.find_key(_parent,_apathi[_lp],)
      || _parent:=#ZAOH.ref()
      || _ok:=0
      ?}
   ?}
!};

{? ~_ok
|| _validate.msg_value('ZAOH','Brak dostępu do ścieżki: %1'@ [_paths]);
   _validate.RESULT:=0;
   return()
?};

{? ~SLO_NAZ.find_key(exec('slo_typ','ext_slo','ZAL'),_buf.SLO_NAZ,)
|| _validate.msg_value('SLO_NAZ');
   _validate.RESULT:=0;
   return()
?};

_slo_kod:=null();
{? _buf.SLO_KOD<>''
|| _apath:=exec('zaoh_path','zalacz','OBJ');
   _rodzaj:=exec('zaots_rodzaj','zalacz',_apath);
   {? _rodzaj<>''
   || {? SLO_KOD.find_key(exec('slo_typ','ext_slo',_rodzaj),_buf.SLO_KOD,)
      || _slo_kod:=SLO_KOD.ref()
      || _validate.msg_value('SLO_KOD');
         _validate.RESULT:=0;
         return()
      ?}
   ?}
?};

:: Jeżeli doszliśmy tutaj, to oznacza, że udało się znaleźć odpowiednie pozycje w ZAOH, SLO_NAZ i ewentualnie SLO_KOD.
_validate.OBJ:=obj_new('PATH','ZAOH','SLO_NAZ','SLO_KOD');
_validate.OBJ.PATH:=_paths;
_validate.OBJ.ZAOH:=ZAOH.ref();
_validate.OBJ.SLO_NAZ:=SLO_NAZ.ref();
_validate.OBJ.SLO_KOD:=_slo_kod;

{? ZAOTS.find_key(_validate.OBJ.SLO_NAZ,_zakres,)
|| _bz:=ZAOTS.ZAOH=_validate.OBJ.ZAOH & ZAOTS.SLO_KOD=_validate.OBJ.SLO_KOD;
   {? _update
   || {? ~_bz
      || _validate.ACTION:='put'
      ?}
   |? ~_bz
   || _validate.msg_unique('Załącznik "%1" występuje już w innej gałęzi'@ [_buf.SLO_NAZ]);
      _validate.RESULT:=0
   ?}
|| _validate.ACTION:='add'
?};

~~


\import_zaots
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiedzialna za utworzenie lub aktualizację rekordu.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::       _d [STRING] - Zakres eksportu (Załączniki / Dokumentacja pracownicza).
::   WY: Status operacji: 0/1
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;
_zakres:=_d;

_ret:=1;

_key:='%1 [%2]' [_validate.OBJ.PATH,_buf.SLO_NAZ];

{? _validate.ACTION='add'
|| ZAOTS.blank();
   ZAOTS.ZAOH:=_validate.OBJ.ZAOH;
   ZAOTS.SLO_NAZ:=_validate.OBJ.SLO_NAZ;
   ZAOTS.SLO_KOD:=_validate.OBJ.SLO_KOD;
   ZAOTS.G:=_zakres;
   {? ~ZAOTS.add(1)
   || _ret:=0;
      _validate.msg_insert(_key)
   ?}
|? _validate.ACTION='put'
|| ZAOTS.ZAOH:=_validate.OBJ.ZAOH;
   ZAOTS.SLO_KOD:=_validate.OBJ.SLO_KOD;
   {? ~ZAOTS.put(1)
   || _ret:=0;
      _validate.msg_update(_key)
   ?}
?};

_ret


::======================================================================================================================


\init_zaotm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Inicjowanie mechanizmu.
::   WE:  _a  [OBJECT] - Środowisko mechanizmu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='ZAOTM';
exec('def_common','xls_zao',_def,exec('zaoh_path','zalacz','G0Z'));

_def.SHEET:='Typy załącz. w miejscach użycia=1,1';
_def.NAME:='Typy załączników w miejscach użycia'@;
_def.DESC:='Dostępność typów załączników w miejscach użycia'@;

_def.TABLE:="ZAOTM";
_def.BEFORE:="
   SLO_NAZ.cntx_psh();
   SLO_NAZ.index('NAZWA');
   SLO_NAZ.prefix();
   ZAOTM.cntx_psh();
   ZAOTM.index('MIEJSCE');
   ZAOTM.prefix()

";
_def.AFTER:="
   ZAOTM.cntx_pop();
   SLO_NAZ.cntx_pop()
";
_def.FIELDS:="exec('fields_zaotm','xls_zao',_a)";
_def.EXPORT:="exec('export_zaotm','xls_zao',_a,_b)";
_def.VALIDATE:="exec('validate_zaotm','xls_zao',_a,_b,_c)";
_def.IMPORT:="exec('import_zaotm','xls_zao',_a,_b,_c)";

~~


\fields_zaotm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła definiuje eksportowane/importowane pola.
::   WE: _a [OBJECT] - Obiekt do obsługi pól.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fld:=_a;

_fl:="MS.name(ZAOTM,_a)";
_fc:="MS.comment(ZAOTM,_a)";

_fld.define('MIEJSCE',_fl('MIEJSCE'),0,,_fc('MIEJSCE'));
_fld.define('SLO_NAZ',_fl('SLO_NAZ'),0,,_fc('SLO_NAZ'));

~~


\export_zaotm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła wypełnia bufor, na podstawie które wykonany zostanie zapis danych w arkuszu.
::   WE: _a [OBJECT] - Środowisko mechanizmu.
::       _b [OBJECT] - Obiekt bufora.
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_buf:=_b;

ZAOTM.SLO_NAZ();

_buf.MIEJSCE.VALUE:=ZAOTM.MIEJSCE;
_buf.SLO_NAZ.VALUE:=SLO_NAZ.NAZWA;

_excel.write_async('SLO_NAZ',SLO_NAZ.ref());

1


\validate_zaotm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła sprawdza, czy można poprawić/dodać rekord.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

:: Błędy krytyczne
_fld:=
   {? _buf.MIEJSCE=''
   || 'MIEJSCE'
   |? _buf.SLO_NAZ=''
   || 'SLO_NAZ'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_empty(_fld);
   _validate.RESULT:=0;
   return()
?};
_slo_naz:=null();
_fld:=
   {? ~exec('kod','ext_slo','ZAOM',_buf.MIEJSCE,1)
   || 'MIEJSCE'
   |? (_slo_naz:=exec('slo_naz','ext_slo','ZAL',_buf.SLO_NAZ,1))=null()
   || 'SLO_NAZ'
   || ''
   ?};
{? _fld<>''
|| _validate.msg_value(_fld);
   _validate.RESULT:=0;
   return()
?};

:: Jeżeli doszliśmy tutaj, to oznacza, że udało się znaleźć odpowiednią pozycję SLO_NAZ.
_validate.OBJ:=obj_new('SLO_NAZ');
_validate.OBJ.SLO_NAZ:=_slo_naz;

{? ~ZAOTM.find_key(_buf.MIEJSCE,_buf.SLO_NAZ,)
|| _validate.ACTION:='add'
?};

~~


\import_zaotm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiedzialna za utworzenie lub aktualizację rekordu.
::   WE: _a [OBJECT] - Obiekt z polami odczytami z Excela.
::       _b [NUMBER] - Tryb aktualizacji: 0 - nie (dodawane są tylko nowe rekordy) / 1 - tak.
::       _c [OBJECT] - Obiekt (RESULT, ACTION, OBJ) - wynik walidacji.
::   WY: Status operacji: 0/1
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_update:=_b;
_validate:=_c;

_ret:=1;

_key:='%1 [%2]' [_buf.MIEJSCE,_buf.SLO_NAZ];

{? _validate.ACTION='add'
|| ZAOTM.blank();
   ZAOTM.MIEJSCE:=_buf.MIEJSCE;
   ZAOTM.SLO_NAZ:=_validate.OBJ.SLO_NAZ;
   {? ~ZAOTM.add(1)
   || _ret:=0;
      _validate.msg_insert(_key)
   ?}
?};

_ret

:Sign Version 2.0 jowisz:1028 2019/10/14 09:22:02 b5bbad54c5f61910104b7bdd908d90ea7af35f742b7d271a56c17fb4191c20cf93a86048ebbe37484c36263e86ee14eb1676a2c5ef5594426add6b3455abec8dc4036e327fd575ac7aa5ca1e0c4e05f8d475955ecc44bd46b2d4d1e97cd99ff5562637c5d2ebbee4f29690f0a1a5b20389e2aaaeae591dd7f363c760c43c8f32
