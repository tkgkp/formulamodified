:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_st.fml
:: Utworzony: 23.08.2018
:: Autor: AMK
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi środków trwałych
::======================================================================================================================


\TAB_KRST
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAB_KRST';
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Tabele klasyfikacji ŚT=1,1';
_def.NAME:='Tabela wariantów klasyfikacji środków trwałych';
_def.DESC:='Tabela wariantów klasyfikacji środków trwałych';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FUNPAR:='ZWS_PAR_FTGR';
_def.MULTIFIR:='T';

_def.PREFIX:="TAB_KRST.index('TAB_KRST'); TAB_KRST.prefix()";
_def.TABLE:="TAB_KRST";
_def.FIELDS:="exec('TAB_KRST_fld','xls_st',_a)";

_def.BEFORE:="TAB_KRST.cntx_psh()";
_def.AFTER:="TAB_KRST.cntx_pop()";
_def.SELECT:="exec('TAB_KRST_select','xls_st',_a)";

_def.EXPORT:="exec('TAB_KRST_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('TAB_KRST_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('TAB_KRST_imp','xls_st',_a,_b,_c)";
~~


\filename
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.42]
:: OPIS: Nazwa pliku do eksportu okresów
::----------------------------------------------------------------------------------------------------------------------
'srodki_trwale.xlsx'


\TAB_KRST_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'KST','STRING[2]','Symbol'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'O','STRING[60]','Opis');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KST',,);

TAB_KRST.cntx_psh();
TAB_KRST.index('TAB_KRST');
TAB_KRST.prefix();
{? TAB_KRST.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$TAB_KRST.ref();
      _selected.prefix($TAB_KRST.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.KST:=TAB_KRST.KST;
      _tab.O:=TAB_KRST.O;
      _tab.add();
      TAB_KRST.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'KST,O',20,'Wybór tabel klasyfikacji środków do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
TAB_KRST.cntx_pop();

_result


\TAB_KRST_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KST','Symbol klasyfikacji',1,,'1 znakowy Symbol wariantu klasyfikacji środków');
_def.define('O','Opis',1,,'60 znakowy Opis');
_def.define('AR','Od roku',1,,'Od roku (4 cyfrowy rok)',,0);
~~


\TAB_KRST_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.KST.VALUE:=TAB_KRST.KST;
_table.O.VALUE:=TAB_KRST.O;
_table.AR.VALUE:=TAB_KRST.AR;

:: eksport pozycji tabeli klasyfikacji środków
TAM.cntx_psh();
TAM.index('KST'); TAM.prefix(TAB_KRST.ref());
{? TAM.first()
|| {!
   |? _excel.write_async('TAM',TAM.ref());
      TAM.next()
   !}
?};
TAM.cntx_pop();

_result


\TAB_KRST_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
TAB_KRST.index('TAB_KRST'); TAB_KRST.prefix(_table.KST,);
{? TAB_KRST.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'; menu_txt(,'Popraw')
   ?}
|| _result.ACTION:='add'; menu_txt(,'Dołącz')
?};
{? _result.RESULT
|| {? _result.ACTION='add' || TAB_KRST.blank() ?};
   TAB_KRST.KST:=_table.KST;
   TAB_KRST.O:=_table.O;
   TAB_KRST.AR:=_table.AR;
   {? exec('chk_tab_krst','fst_kst')<>''
   || _result.RESULT:=0
   ?}
?};
~~


\TAB_KRST_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAB_KRST.add(1)
   |? _validate.ACTION='put'
   || _result:=TAB_KRST.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie tabeli wariantów klasyfikacji środków trwałych %1 nie powiodło się.'@[_table.KST]
   || _validate.MSG:='Poprawa tabeli wariantów klasyfikacji środków trwałych %1 nie powiodła się.'@[_table.KST]
   ?}
?};
_result


\MA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='MA';
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Metody amortyzacji ŚT=1,1';
_def.NAME:='Tabela metod amortyzacji środków trwałych';
_def.DESC:='Tabela metod amortyzacji środków trwałych';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FUNPAR:='ZWS_PAR_FTTM';
_def.MULTIFIR:='T';

_def.PREFIX:="MA.index('MA'); MA.prefix()";
_def.TABLE:="MA";
_def.FIELDS:="exec('MA_fld','xls_st',_a)";

_def.BEFORE:="MA.cntx_psh()";
_def.AFTER:="MA.cntx_pop()";
_def.SELECT:="exec('MA_select','xls_st',_a)";

_def.EXPORT:="exec('MA_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('MA_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('MA_imp','xls_st',_a,_b,_c)";
~~


\MA_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'K','STRING[3]','Kod'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'N','STRING[40]','Nazwa');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'K',,);

MA.cntx_psh();
MA.index('MA');
MA.prefix();
{? MA.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$MA.ref();
      _selected.prefix($MA.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.K:=MA.K;
      _tab.N:=MA.N;
      _tab.add();
      MA.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'K,N',20,'Wybór metod amortyzacji do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
MA.cntx_pop();

_result


\MA_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('K','Kod',1,,'3 znakowy Kod metody amortyzacji');
_def.define('N','Nazwa',1,,'40 znakowa Nazwa metody amortyzacji');
_def.define('T','Typ',1,,'20 znakowy Typ metody amortyzacji');
_def.define('PD','Podstawa degresywna',1,,'80 znakowa Podstawa dla metody degresywnej');
_def.define('PL','Podstawa innej metody',1,,'80 znakowa Podstawa dla metod innych - niedegresywnych');
_def.define('MP','Miesiąc początkowy',1,,'Miesiąc początkowy amortyzacji (liczba 0/1)');
_def.define('PDM','Uwzględnianie dni',1,,'1 znakowy znacznik: Uwzględnianie dni (niepełnych miesięcy) - T/N');
_def.define('CZESTO','Częstotliwość',1,,'1 znakowa Częstotliwość amortyzacji');
_def.define('CZESTO_O','Opis częstotliwości',1,,'30 znakowy Opis częstotliwości');
_def.define('RODZAJ','Rodzaj',1,,'1 znakowy Rodzaj amortyzacji');
_def.define('NISKO','Dla niskocennych',1,,'1 znak: Czy metoda dostępna dla środków niskocennych (T/N)');
_def.define('LIN','Liniowa D-L',1,,'3 znakowy Kod metody liniowej do przejścia D->L');
_def.define('NOSEZON','Ignoruj sezonowość',1,,'1 znak: Znacznik, czy uwzględniać sezony amortyzacji dla środka (T/N)');
~~


\MA_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.K.VALUE:=MA.K;
_table.N.VALUE:=MA.N;
_table.T.VALUE:=MA.T;
_table.PD.VALUE:=MA.PD;
_table.PL.VALUE:=MA.PL;
_table.MP.VALUE:=MA.MP;
_table.PDM.VALUE:=MA.PDM;
_table.CZESTO.VALUE:=MA.CZESTO;
_table.CZESTO_O.VALUE:=MA.CZESTO_O;
_table.RODZAJ.VALUE:=MA.RODZAJ;
_table.NISKO.VALUE:=MA.NISKO;
_table.LIN.VALUE:=MA.LIN;
_table.NOSEZON.VALUE:=MA.NOSEZON;
_result


\MA_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
MA.index('MA');
MA.prefix(_table.K,);
{? MA.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'; menu_txt(,'Popraw')
   ?}
|| _result.ACTION:='add'; menu_txt(,'Dołącz')
?};

{? _result.RESULT
|| {? _result.ACTION='add' || MA.blank() ?};

   MA.K:=_table.K;
   MA.N:=_table.N;
   MA.T:=_table.T;
   MA.PD:=_table.PD;
   MA.PL:=_table.PL;
   MA.MP:=_table.MP;
   MA.PDM:=_table.PDM;
   MA.CZESTO:=_table.CZESTO;
   MA.CZESTO_O:=_table.CZESTO_O;
   MA.RODZAJ:=_table.RODZAJ;
   MA.NISKO:=_table.NISKO;
   MA.LIN:=_table.LIN;
   MA.NOSEZON:=_table.NOSEZON;

   {? MA.K=''
   || _result.MSG:='Nie wprowadzono kodu metody.'@;
      _result.RESULT:=0
   |? MA.N=''
   || _result.MSG:='Nie wprowadzono nazwy metody.'@;
      _result.RESULT:=0
   |? MA.T=''
   || _result.MSG:='Nie wprowadzono typu metody.'@;
      _result.RESULT:=0
   |? MA.RODZAJ<>'F' & MA.T='Naturalna'
   || _result.MSG:='Metoda %1 ma określony typ: Naturalna, który może występować tylko dla metod '
                   'o rodzaju: Bilansowa.'@[MA.K];
      _result.RESULT:=0
   |? 1+MA.T='D' & MA.LIN=''
   || _result.MSG:='Dla metody degresywnej %1 należy wskazać metodę liniową, '
                   'która będzie obowiązywać po przejściu obliczania amortyzacji na sposób liniowy.'@[MA.K];
      _result.RESULT:=0
   ?}
?};
~~


\MA_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=MA.add(1)
   |? _validate.ACTION='put'
   || _result:=MA.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie metody amortyzacji środków trwałych %1 nie powiodło się.'@[_table.K]
   || _validate.MSG:='Poprawa metody amortyzacji środków trwałych %1 nie powiodła się.'@[_table.K]
   ?}
?};
_result


\ROZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ROZ';
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Rodzaje rozchodów ŚT=1,1';
_def.NAME:='Rodzaje rozchodów środków trwałych';
_def.DESC:='Słownik rodzajów rozchodów środków trwałych';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FUNPAR:='ZWS_PAR_FTSL';
_def.MULTIFIR:='T';

_def.PREFIX:="ROZ.index('ROZCHODR'); ROZ.prefix()";
_def.TABLE:="ROZ";
_def.FIELDS:="exec('ROZ_fld','xls_st',_a)";

_def.BEFORE:="ROZ.cntx_psh()";
_def.AFTER:="ROZ.cntx_pop()";
_def.SELECT:="exec('ROZ_select','xls_st',_a)";

_def.EXPORT:="exec('ROZ_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('ROZ_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('ROZ_imp','xls_st',_a,_b,_c)";
~~


\ROZ_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'R','STRING[15]','Kod'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'OPIS','STRING[120]','Opis');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'R',,);

ROZ.cntx_psh();
ROZ.index('ROZCHODR');
ROZ.prefix();
{? ROZ.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$ROZ.ref();
      _selected.prefix($ROZ.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.R:=ROZ.R;
      _tab.OPIS:=ROZ.OPIS;
      _tab.add();
      ROZ.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'R,OPIS',20,'Wybór rodzajów rozchodu do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
ROZ.cntx_pop();

_result


\ROZ_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('R','Kod rodzaju',1,,'15 znakowy Kod rodzaju rozchodu');
_def.define('OPIS','Opis',1,,'120 znakowy Opis rodzaju rozchodu');
_def.define('STANDARD','Standard',1,,'Czy standardowa pozycja słownika (1/0)');
~~


\ROZ_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.R.VALUE:=ROZ.R;
_table.OPIS.VALUE:=ROZ.OPIS;
_table.STANDARD.VALUE:=ROZ.STANDARD;
_result


\ROZ_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
ROZ.index('ROZCHODR');
ROZ.prefix(_table.R,_table.R);
{? ROZ.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'; menu_txt(,'Popraw')
   ?}
|| _result.ACTION:='add'; menu_txt(,'Dołącz')
?};

{? _result.RESULT
|| {? _result.ACTION='add' || ROZ.blank() ?};
   ROZ.R:=_table.R;
   ROZ.OPIS:=_table.OPIS;
   ROZ.STANDARD:=_table.STANDARD;
   {? ROZ.R=''
   || _result.MSG:='Nie wprowadzono kodu rodzaju rozchodu.'@;
      _result.RESULT:=0
   ?}
?};
~~


\ROZ_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ROZ.add(1)
   |? _validate.ACTION='put'
   || _result:=ROZ.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie pozycji słownika rodzajów rozchodów %1 nie powiodło się.'@[_table.R]
   || _validate.MSG:='Poprawa pozycji słownika rodzajów rozchodów %1 nie powiodła się.'@[_table.R]
   ?}
?};
_result


\PRZYCHOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PRZYCHOD';
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Rodzaje przychodów ŚT=1,1';
_def.NAME:='Rodzaje przychodów środków trwałych';
_def.DESC:='Słownik rodzajów przychodów środków trwałych';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FUNPAR:='ZWS_PAR_FTSL';
_def.MULTIFIR:='T';

_def.PREFIX:="PRZYCHOD.index('PRZYCHOR'); PRZYCHOD.prefix()";
_def.TABLE:="PRZYCHOD";
_def.FIELDS:="exec('PRZYCHOD_fld','xls_st',_a)";

_def.BEFORE:="PRZYCHOD.cntx_psh()";
_def.AFTER:="PRZYCHOD.cntx_pop()";
_def.SELECT:="exec('PRZYCHOD_select','xls_st',_a)";

_def.EXPORT:="exec('PRZYCHOD_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('PRZYCHOD_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('PRZYCHOD_imp','xls_st',_a,_b,_c)";
~~


\PRZYCHOD_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'R','STRING[15]','Kod'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'OPIS','STRING[120]','Opis');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'R',,);

PRZYCHOD.cntx_psh();
PRZYCHOD.index('PRZYCHOR');
PRZYCHOD.prefix();
{? PRZYCHOD.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$PRZYCHOD.ref();
      _selected.prefix($PRZYCHOD.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.R:=PRZYCHOD.R;
      _tab.OPIS:=PRZYCHOD.OPIS;
      _tab.add();
      PRZYCHOD.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'R,OPIS',20,'Wybór rodzajów przychodu do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
PRZYCHOD.cntx_pop();

_result


\PRZYCHOD_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('R','Kod rodzaju',1,,'15 znakowy Rodzaj przychodu');
_def.define('OPIS','Opis',1,,'120 znakowy Opis rodzaju przychodu');
_def.define('STANDARD','Standardowy',1,,'Czy rodzaj przychodu jest rodzajem standardowym? (1/0)');
~~


\PRZYCHOD_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.R.VALUE:=PRZYCHOD.R;
_table.OPIS.VALUE:=PRZYCHOD.OPIS;
_table.STANDARD.VALUE:=PRZYCHOD.STANDARD;

_result


\PRZYCHOD_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
PRZYCHOD.index('PRZYCHOR');
PRZYCHOD.prefix(_table.R,_table.R);
{? PRZYCHOD.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || PRZYCHOD.blank() ?};
   PRZYCHOD.R:=_table.R;
   PRZYCHOD.OPIS:=_table.OPIS;
   PRZYCHOD.STANDARD:=_table.STANDARD;
   {? PRZYCHOD.R=''
   || _result.MSG:='Nie wprowadzono kodu rodzaju przychodu.'@;
      _result.RESULT:=0
   ?}
?};
~~


\PRZYCHOD_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PRZYCHOD.add(1)
   |? _validate.ACTION='put'
   || _result:=PRZYCHOD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie pozycji słownika przychodów %1 nie powiodło się.'[_table.R]
   || _validate.MSG:='Poprawa pozycji słownika przychodów %1 nie powiodła się.'[_table.R]
   ?}
?};
_result


\SRDT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SRDT';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Typy dokumentów ŚT=1,1';
_def.NAME:='Typy dokumentów modyfikujących środki trwałe';
_def.DESC:='Typy dokumentów modyfikujących środki trwałe';
_def.FUNPAR:='ZWS_PAR_FTTD';

_def.PREFIX:="SRDT.index('TYP'); SRDT.prefix()";
_def.TABLE:="SRDT";
_def.FIELDS:="exec('SRDT_fld','xls_st',_a)";

_def.BEFORE:="SRDT.cntx_psh(); exec('maski','srodobj')";
_def.AFTER:="SRDT.cntx_pop()";
_def.SELECT:="exec('SRDT_select','xls_st',_a)";

_def.EXPORT:="exec('SRDT_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('SRDT_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('SRDT_imp','xls_st',_a,_b,_c)";
~~


\SRDT_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'TYP','STRING[2]','Typ'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'NAZWA','STRING[30]','Nazwa');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'TYP',,);

SRDT.cntx_psh();
exec('maski','srodobj');
SRDT.index('SRDT');
SRDT.prefix();
{? SRDT.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$SRDT.ref();
      _selected.prefix($SRDT.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.TYP:=SRDT.TYP;
      _tab.NAZWA:=SRDT.NAZWA;
      _tab.add();
      SRDT.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'TYP,NAZWA',20,'Wybór typów dokumentów ŚT do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
SRDT.cntx_pop();

_result


\SRDT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('TYP','Symbol typu',1,,'2 znakowy Symbol typu dokumentu');
_def.define('NAZWA','Nazwa typu',1,,'30 znakowy Nazwa typu dokumentu');
_def.define('RODZ','Rodzaj zmiany',1,,'1 znakowy (P)rzyjęcie, (W)artość, (L)Właściwość, (M)etoda, (I)nna');
_def.define('O_RODZ','Opis rodzaju zmiany',1,,'20 znakowy Opis rodzaju zmiany');
_def.define('WYDRUK','Wydruk',1,,'50 znakowy Nazwa wydruku (rpm) dla typu');
_def.define('MASK_SYM','Maska symbolu',1,,'20 znakowy Maska symbolu dokumentu');
_def.define('P','Przychód/Rozchód/Inny',1,,'1 znakowy Przychód(+), Rozchód(-), Inny (?)');
_def.define('PRZYCHOD','Rodzaj przychodu',1,,'15 znakowy kod rodzaju przychodu');
_def.define('ROZ','Rozchód',1,,'15 znakowy kod rodzaj rozchodu');
_def.define('Z','Skreślający?',1,,'1 znakowy Czy dokument skreślający środek z ewidencji?');
_def.define('WARP','Wartość podatkowa',1,,'1 znakowy Czy obsługuje pole Wartość podatkowa (T/N)');
_def.define('WARF','Wartość bilansowa',1,,'1 znakowy Czy obsługuje pole Wartość bilansowa (T/N)');
_def.define('WARD','Wartość dodatkowa',1,,'1 znakowy Czy obsługuje pole Wartość dodatkowa (T/N)');
_def.define('UMOP','Umorzenie podatkowe',1,,'1 znakowy Czy obsługuje pole Umorzenie podatkowe (T/N)');
_def.define('UMOF','Umorzenie bilansowe',1,,'1 znakowy Czy obsługuje pole Umorzenie bilansowe (T/N)');
_def.define('UMOD','Umorzenie dodatkowe',1,,'1 znakowy Czy obsługuje pole Umorzenie dodatkowe (T/N)');
_def.define('WP','Współczynnik przeszacowania',1,,'1 znakowy Czy obsługuje pole Współczynnik przeszacowania (T/N)');
_def.define('OSTATEK','Wartość rezydualna',1,,'1 znakowy Wartość rezydualna (T/N)');
_def.define('OKE','Liczba okresów',1,,'1 znakowy Czy obsługuje pole Liczba okresów eksploatacji (T/N)');
_def.define('MAX','Liczba jednostek',1,,'1 znakowy Czy obsługuje pole Liczba jednostek eksploatacji (T/N)');
_def.define('MP','Metoda podatkowa',1,,'1 znakowy Czy obsługuje pole Metoda podatkowa (T/N)');
_def.define('MF','Metoda bilansowa',1,,'1 znakowy Czy obsługuje pole Metoda bilansowa (T/N)');
_def.define('MD','Metoda dodatkowa',1,,'1 znakowy Czy obsługuje pole Metoda dodatkowa (T/N)');
_def.define('STAP','Stawka podatkowa',1,,'1 znakowy Czy obsługuje pole Stawka podatkowa (T/N)');
_def.define('STAF','Stawka bilansowa',1,,'1 znakowy Czy obsługuje pole Stawka bilansowa (T/N)');
_def.define('STAD','Stawka dodatkowa',1,,'1 znakowy Czy obsługuje pole Stawka dodatkowa (T/N)');
_def.define('WKP','Korekta stawki podatkowej',1,,'1 znakowy Czy obsługuje pole Korekta stawki podatkowej (T/N)');
_def.define('WKF','Korekta stawki bilansowej',1,,'1 znakowy Czy obsługuje pole Korekta stawki bilansowej (T/N)');
_def.define('WKD','Korekta stawki dodatkowej',1,,'1 znakowy Czy obsługuje pole Korekta stawki dodatkowej (T/N)');
_def.define('ULWK','Korekta stawki z tytyłu ulgi',1,,'1 znakowy Czy obsługuje pole Korekta stawki z tytułu ulgi (T/N)');
_def.define('SEZONOWY','Sezonowy?',1,,'1 znakowy Czy obsługuje pola dotyczące amortyzacji sezonowej (T/N)');
_def.define('KONPOD','Zestaw podatkowy',1,,'1 znakowy Czy obsługuje pole Zestaw kont podatkowych (T/N)');
_def.define('KONFIN','Zestaw bilansowy',1,,'1 znakowy Czy obsługuje pole Zestaw kont bilansowych (T/N)');
_def.define('KONDOD','Zestaw dodatkowy',1,,'1 znakowy Czy obsługuje pole Zestaw kont dodatkowych (T/N)');
_def.define('JORG','Jednostka organizacyjna',1,,'1 znakowy Czy obsługuje pole Jednostka organizacyjna (T/N)');
_def.define('ODD','Jednostka księgowa',1,,'1 znakowy Czy obsługuje pole Jednostka księgowa (T/N)');
_def.define('OSOBA','Użytownik',1,,'1 znakowy Czy obsługuje pole Użytkownik (T/N)');
_def.define('POM','Pomieszczenie',1,,'1 znakowy Czy obsługuje pole Pomieszczenie (T/N)');
_def.define('NRI','Numer inwentarzowy',1,,'1 znakowy Czy obsługuje pole Numer inwentarzowy (T/N)');
_def.define('R','Rodzaj środka',1,,'1 znakowy Czy obsługuje pole Rodzaj środka');
_def.define('NST','Nazwa środka',1,,'1 znakowy Czy obsługuje pole Nazwa środka (T/N)');
_def.define('GR','Grupa',1,,'1 znakowy Grupa środka');
_def.define('ZESTAW','Zestaw środków',1,,'1 znakowy Czy obsługuje przenoszenie elementu?');
_def.define('WART_ZB','Wartość zbycia',1,,'1 znakowy Wartość zbycia w grupie kapitałowej');
_def.define('RODZ_NUM','Rodzaj numeracji',1,,'1 znakowy Czy symbole dokumentów standardowe czy nie? (S/N)');
_def.define('FORM_SYM','Formuła na symbol',1,,'100 znakowy Formuła na niestandardowy symbol dokumentu');
_def.define('AKT_SYM','Uaktualnienie symbolu',1,,'1 znakowy Czy uaktualniać symbol dokumentu po zmianie numeru (T/N)');

~~


\SRDT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.TYP.VALUE:=SRDT.TYP;
_table.NAZWA.VALUE:=SRDT.NAZWA;
_table.RODZ.VALUE:=SRDT.RODZ;
_table.O_RODZ.VALUE:=SRDT.O_RODZ;
_table.WYDRUK.VALUE:=SRDT.WYDRUK;
_table.MASK_SYM.VALUE:=SRDT.MASK_SYM;
_table.P.VALUE:=SRDT.P;
_table.PRZYCHOD.VALUE:=SRDT.PRZYCHOD().R; _excel.write_async('PRZYCHOD',PRZYCHOD.ref());
_table.ROZ.VALUE:=SRDT.ROZ().R; _excel.write_async('ROZ',ROZ.ref());
_table.Z.VALUE:=SRDT.Z;
_table.WARP.VALUE:=SRDT.WARP;
_table.WARF.VALUE:=SRDT.WARF;
_table.WARD.VALUE:=SRDT.WARD;
_table.UMOP.VALUE:=SRDT.UMOP;
_table.UMOF.VALUE:=SRDT.UMOF;
_table.UMOD.VALUE:=SRDT.UMOD;
_table.WP.VALUE:=SRDT.WP;
_table.OSTATEK.VALUE:=SRDT.OSTATEK;
_table.OKE.VALUE:=SRDT.OKE;
_table.MAX.VALUE:=SRDT.MAX;
_table.MP.VALUE:=SRDT.MP;
_table.MF.VALUE:=SRDT.MF;
_table.MD.VALUE:=SRDT.MD;
_table.STAP.VALUE:=SRDT.STAP;
_table.STAF.VALUE:=SRDT.STAF;
_table.STAD.VALUE:=SRDT.STAD;
_table.WKP.VALUE:=SRDT.WKP;
_table.WKF.VALUE:=SRDT.WKF;
_table.WKD.VALUE:=SRDT.WKD;
_table.ULWK.VALUE:=SRDT.ULWK;
_table.SEZONOWY.VALUE:=SRDT.SEZONOWY;
_table.KONPOD.VALUE:=SRDT.KONPOD;
_table.KONFIN.VALUE:=SRDT.KONFIN;
_table.KONDOD.VALUE:=SRDT.KONDOD;
_table.JORG.VALUE:=SRDT.JORG;
_table.ODD.VALUE:=SRDT.ODD;
_table.OSOBA.VALUE:=SRDT.OSOBA;
_table.POM.VALUE:=SRDT.POM;
_table.NRI.VALUE:=SRDT.NRI;
_table.R.VALUE:=SRDT.R;
_table.NST.VALUE:=SRDT.NST;
_table.GR.VALUE:=SRDT.GR;
_table.ZESTAW.VALUE:=SRDT.ZESTAW;
_table.WART_ZB.VALUE:=SRDT.WART_ZB;
_table.RODZ_NUM.VALUE:=SRDT.RODZ_NUM;
_table.FORM_SYM.VALUE:=SRDT.FORM_SYM;
_table.AKT_SYM.VALUE:=SRDT.AKT_SYM;

_result


\SRDT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
SRDT.index('TYP');
SRDT.prefix(_table.TYP,);
{? SRDT.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SRDT.blank() ?};
   SRDT.TYP:=_table.TYP;
   SRDT.NAZWA:=_table.NAZWA;
   SRDT.RODZ:=_table.RODZ;
   SRDT.O_RODZ:=_table.O_RODZ;
   SRDT.WYDRUK:=_table.WYDRUK;
   SRDT.MASK_SYM:=_table.MASK_SYM;
   SRDT.P:=_table.P;
   SRDT.PRZYCHOD:=exec('FindInSet','#table','PRZYCHOD','PRZYCHOR',_table.PRZYCHOD,,,1);
   SRDT.ROZ:=exec('FindInSet','#table','ROZ','ROZCHODR',_table.ROZ,,,1);
   SRDT.Z:=_table.Z;
   SRDT.WARP:=_table.WARP;
   SRDT.WARF:=_table.WARF;
   SRDT.WARD:=_table.WARD;
   SRDT.UMOP:=_table.UMOP;
   SRDT.UMOF:=_table.UMOF;
   SRDT.UMOD:=_table.UMOD;
   SRDT.WP:=_table.WP;
   SRDT.OSTATEK:=_table.OSTATEK;
   SRDT.OKE:=_table.OKE;
   SRDT.MAX:=_table.MAX;
   SRDT.MP:=_table.MP;
   SRDT.MF:=_table.MF;
   SRDT.MD:=_table.MD;
   SRDT.STAP:=_table.STAP;
   SRDT.STAF:=_table.STAF;
   SRDT.STAD:=_table.STAD;
   SRDT.WKP:=_table.WKP;
   SRDT.WKF:=_table.WKF;
   SRDT.WKD:=_table.WKD;
   SRDT.ULWK:=_table.ULWK;
   SRDT.SEZONOWY:=_table.SEZONOWY;
   SRDT.KONPOD:=_table.KONPOD;
   SRDT.KONFIN:=_table.KONFIN;
   SRDT.KONDOD:=_table.KONDOD;
   SRDT.JORG:=_table.JORG;
   SRDT.ODD:=_table.ODD;
   SRDT.OSOBA:=_table.OSOBA;
   SRDT.POM:=_table.POM;
   SRDT.NRI:=_table.NRI;
   SRDT.R:=_table.R;
   SRDT.NST:=_table.NST;
   SRDT.GR:=_table.GR;
   SRDT.ZESTAW:=_table.ZESTAW;
   SRDT.WART_ZB:=_table.WART_ZB;
   SRDT.RODZ_NUM:=_table.RODZ_NUM;
   SRDT.FORM_SYM:=_table.FORM_SYM;
   SRDT.AKT_SYM:=_table.AKT_SYM;
   {? SRDT.TYP=''
   || _result.MSG:='Nie wprowadzono symbolu typu dokumentu.'@;
      _result.RESULT:=0
   |? SRDT.NAZWA=''
   || _result.MSG:='Nie wprowadzono nazwa typu dokumentu.'@;
      _result.RESULT:=0
   ?}
?};
~~


\SRDT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SRDT.add(1)
   |? _validate.ACTION='put'
   || _result:=SRDT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie typu dokumentu %1 nie powiodło się.'[_table.TYP]
   || _validate.MSG:='Poprawa typu dokumentu %1 nie powiodła się.'[_table.TYP]
   ?}
?};
_result


\SEZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SEZ';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Schematy sezonów amortyzacji ŚT=1,1';
_def.NAME:='Schematy sezonów amortyzacji ŚT';
_def.DESC:='Znaczniki naliczania amortyzacji środków sezonowych';
_def.FUNPAR:='ZWS_PAR_FTTS';

_def.PREFIX:="SEZ.index('KOD'); SEZ.prefix()";
_def.TABLE:="SEZ";
_def.FIELDS:="exec('SEZ_fld','xls_st',_a)";

_def.BEFORE:="SEZ.cntx_psh()";
_def.AFTER:="SEZ.cntx_pop()";
_def.SELECT:="exec('SEZ_select','xls_st',_a)";

_def.EXPORT:="exec('SEZ_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('SEZ_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('SEZ_imp','xls_st',_a,_b,_c)";
~~


\SEZ_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,'KOD','STRING[15]','Kod'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'OPIS','STRING[40]','Opis');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,);

SEZ.cntx_psh();
SEZ.index('KOD');
SEZ.prefix(REF.FIRMA);
{? SEZ.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$SEZ.ref();
      _selected.prefix($SEZ.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.KOD:=SEZ.KOD;
      _tab.OPIS:=SEZ.OPIS;
      _tab.add();
      SEZ.next()
   !}
?};
_result:=exec('select_action','#table',_tab,'KOD,OPIS',20,'Wybór schematów sezonów amortyzacji do eksportu'@,1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
SEZ.cntx_pop();

_result


\SEZ_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('M1','I',1,,'1 znakowy Znacznik nalicznia amortyzacji dla I');
_def.define('M2','II',1,,'1 znakowy Znacznik nalicznia amortyzacji dla II');
_def.define('M3','III',1,,'1 znakowy Znacznik nalicznia amortyzacji dla III');
_def.define('M4','IV',1,,'1 znakowy Znacznik nalicznia amortyzacji dla IV');
_def.define('M5','V',1,,'1 znakowy Znacznik nalicznia amortyzacji dla V');
_def.define('M6','VI',1,,'1 znakowy Znacznik nalicznia amortyzacji dla VI');
_def.define('M7','VII',1,,'1 znakowy Znacznik nalicznia amortyzacji dla VII');
_def.define('M8','VIII',1,,'1 znakowy Znacznik nalicznia amortyzacji dla VIII');
_def.define('M9','IX',1,,'1 znakowy Znacznik nalicznia amortyzacji dla IX');
_def.define('M10','X',1,,'1 znakowy Znacznik nalicznia amortyzacji dla X');
_def.define('M11','XI',1,,'1 znakowy Znacznik nalicznia amortyzacji dla XI');
_def.define('M12','XII',1,,'1 znakowy Znacznik nalicznia amortyzacji dla XII');
_def.define('LM','Liczba miesięcy',1,,'3 znakowy Liczba mięsięcy amortyzacji sezonowej');
_def.define('KOD','Kod schematu',1,,'15 znakowy Kod schematu aktywnych miesięcy dla śr. amort. sezonowo');
_def.define('OPIS','Opis schematu',1,,'40 znakowy Opis schematu aktywnych miesięcy dla śr. amort. sezonowo');
~~


\SEZ_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.M1.VALUE:=SEZ.M1;
_table.M2.VALUE:=SEZ.M2;
_table.M3.VALUE:=SEZ.M3;
_table.M4.VALUE:=SEZ.M4;
_table.M5.VALUE:=SEZ.M5;
_table.M6.VALUE:=SEZ.M6;
_table.M7.VALUE:=SEZ.M7;
_table.M8.VALUE:=SEZ.M8;
_table.M9.VALUE:=SEZ.M9;
_table.M10.VALUE:=SEZ.M10;
_table.M11.VALUE:=SEZ.M11;
_table.M12.VALUE:=SEZ.M12;
_table.LM.VALUE:=SEZ.LM;
_table.KOD.VALUE:=SEZ.KOD;
_table.OPIS.VALUE:=SEZ.OPIS;

_result


\SEZ_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
SEZ.index('KOD');
SEZ.prefix(REF.FIRMA,_table.KOD,);
{? SEZ.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SEZ.blank() ?};
   SEZ.M1:=_table.M1;
   SEZ.M2:=_table.M2;
   SEZ.M3:=_table.M3;
   SEZ.M4:=_table.M4;
   SEZ.M5:=_table.M5;
   SEZ.M6:=_table.M6;
   SEZ.M7:=_table.M7;
   SEZ.M8:=_table.M8;
   SEZ.M9:=_table.M9;
   SEZ.M10:=_table.M10;
   SEZ.M11:=_table.M11;
   SEZ.M12:=_table.M12;
   SEZ.LM:=_table.LM;
   SEZ.KOD:=_table.KOD;
   SEZ.OPIS:=_table.OPIS;
   SEZ.FIRMA:=REF.FIRMA;
   {? SEZ.KOD=''
   || _result.MSG:='Nie wprowadzono kodu schematu.'@;
      _result.RESULT:=0
   |? SEZ.LM=0
   || _result.MSG:='Liczba miesięcy w schemacie musi być > 0.'@;
      _result.RESULT:=0
   ?}
?};
~~


\SEZ_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SEZ.add(1)
   |? _validate.ACTION='put'
   || _result:=SEZ.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie schematu sezonów amortyzacji %1 nie powiodło się.'[_table.KOD]
   || _validate.MSG:='Poprawa schematu sezonów amortyzacji %1 nie powiodła się.'[_table.KOD]
   ?}
?};
_result


\TAM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAM';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Grupy ŚT=1,1';
_def.NAME:='Grupy środków trwałych';
_def.DESC:='Grupy środków trwałych ze stawkami amortyzacyjnymi';
_def.FUNPAR:='ZWS_PAR_FTGR';
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

_def.PREFIX:="TAM.index('KST'); TAM.prefix()";
_def.TABLE:="TAM";
_def.FIELDS:="exec('TAM_fld','xls_st',_a)";

_def.BEFORE:="TAM.cntx_psh()";
_def.AFTER:="TAM.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('TAM_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('TAM_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('TAM_imp','xls_st',_a,_b,_c)";
~~


\TAM_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('GR','Grupa',1,,'15 znakowy Symbol grupy środków');
_def.define('NGS','Nazwa grupy środków',1,,'255 znakowy Nazwa grupy środków');
_def.define('S','Stawka',1,,'6 znakowy Stawka amortyzacji bilansowej');
_def.define('WD','Wsp. degres.',1,,'6 znakowy Współczynnik degresji');
_def.define('BIL','Pozycja bilansu',1,,'2 znakowy Symbol pozycji bilansowej');
_def.define('KST','Klasyfikacja',1,,'1 znakowy Symbol klasyfikacji');
_def.define('GR1','Grupa1',1,,'1 znakowy Pierwszy znak symbolu grupy');
~~


\TAM_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.GR.VALUE:=TAM.GR;
_table.NGS.VALUE:=TAM.NGS;
_table.S.VALUE:=TAM.S;
_table.WD.VALUE:=TAM.WD;
_table.BIL.VALUE:=TAM.BIL().POZ; _excel.write_async('TAB',TAM.BIL);
_table.KST.VALUE:=TAM.KST().KST; _excel.write_async('TAB_KRST',TAM.KST);
_table.GR1.VALUE:=TAM.GR1;

_result


\TAM_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_kst:=exec('FindInSet','#table','TAB_KRST','TAB_KRST',_table.KST,,,1);
TAM.index('KST');
TAM.prefix(_kst,_table.GR,);
{? TAM.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || TAM.blank() ?};
   TAM.GR:=_table.GR;
   TAM.NGS:=_table.NGS;
   TAM.S:=_table.S;
   TAM.WD:=_table.WD;
   TAM.BIL:=exec('FindInSet','#table','TAB','POZ',_table.BIL,,,1);
   TAM.KST:=_kst;
   TAM.GR1:=_table.GR1;

   {? TAM.GR=''
   || _result.MSG:='Nie wprowadzono symbolu grupy środków.'@;
      _result.RESULT:=0
   |? TAM.NGS=''
   || _result.MSG:='Nie wprowadzono nazwy grupy środków.'@;
      _result.RESULT:=0
   ?}
?};
~~


\TAM_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAM.add(1)
   |? _validate.ACTION='put'
   || _result:=TAM.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie grupy środków trwałych %1 nie powiodło się.'[_table.GR]
   || _validate.MSG:='Poprawa grupy środków trwałych %1 nie powiodła się.'[_table.GR]
   ?}
?};
_result


\TAB
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAB';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Pozycje bilansowe ŚT=1,1';
_def.NAME:='Pozycje bilansowe ŚT';
_def.DESC:='Tabela grupująca grupy rodzajowe w pozycje bilansowe';
_def.FUNPAR:='ZWS_PAR_FTGR';
_def.MULTIFIR:='T';

_def.PREFIX:="TAB.index('POZ'); TAB.prefix()";
_def.TABLE:="TAB";
_def.FIELDS:="exec('TAB_fld','xls_st',_a)";

_def.BEFORE:="TAB.cntx_psh()";
_def.AFTER:="TAB.cntx_pop()";
_def.SELECT:="exec('TAB_select','xls_st',_a)";

_def.EXPORT:="exec('TAB_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('TAB_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('TAB_imp','xls_st',_a,_b,_c)";
~~


\TAB_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'POZ','STRING[2]','Pozycja'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'O','STRING[50]','Opis');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'POZ',,);

TAB.cntx_psh();
TAB.index('POZ');
TAB.prefix();
{? TAB.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$TAB.ref();
      _selected.prefix($TAB.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.POZ:=TAB.POZ;
      _tab.O:=TAB.O;
      _tab.add();
      TAB.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'POZ,O',20,'Wybór pozycji bilansowych do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
TAB.cntx_pop();

_result


\TAB_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('POZ','Pozycja',1,,'2 znakowy Pozycja');
_def.define('O','Opis',1,,'50 znakowy Opis');
~~


\TAB_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.POZ.VALUE:=TAB.POZ;
_table.O.VALUE:=TAB.O;
_result


\TAB_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
TAB.index('POZ');
TAB.prefix(_table.POZ,);
{? TAB.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || TAB.blank() ?};

   TAB.POZ:=_table.POZ;
   TAB.O:=_table.O;

   {? TAB.POZ=''
   || _result.MSG:='Nie wprowadzono nazwy pozycji bilansowej.'@;
      _result.RESULT:=0
   |? TAB.O=''
   || _result.MSG:='Nie wprowadzono opisu pozycji bilansowej.'@;
      _result.RESULT:=0
   ?}
?};
~~


\TAB_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAB.add(1)
   |? _validate.ACTION='put'
   || _result:=TAB.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie pozycji bilansowej %1 nie powiodło się.'[_table.POZ]
   || _validate.MSG:='Poprawa pozycji bilansowej %1 nie powiodła się.'[_table.POZ]
   ?}
?};
_result


\SIED
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SIED';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Siedziby ŚT=1,1';
_def.NAME:='Siedziby';
_def.DESC:='Siedziby';
_def.FUNPAR:='ZWS_PAR_FTSS';

_def.PREFIX:="SIED.index('UNIK'); SIED.prefix()";
_def.TABLE:="SIED";
_def.FIELDS:="exec('SIED_fld','xls_st',_a)";

_def.BEFORE:="ODD.f_clear();SIED.cntx_psh()";
_def.AFTER:="SIED.cntx_pop()";
_def.SELECT:="exec('SIED_select','xls_st',_a)";

_def.EXPORT:="exec('SIED_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('SIED_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('SIED_imp','xls_st',_a,_b,_c)";
~~


\SIED_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'S','STRING[10]','Skrót'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'N','STRING[40]','Nazwa');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'S',,);

SIED.cntx_psh();
SIED.index('UNIK');
SIED.prefix(REF.FIRMA);
{? SIED.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$SIED.ref();
      _selected.prefix($SIED.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.S:=SIED.S;
      _tab.N:=SIED.N;
      _tab.add();
      SIED.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'S,N',20,'Wybór siedzib do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
SIED.cntx_pop();

_result


\SIED_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('S','Skrót',1,,'10 znakowy Skrót');
_def.define('N','Nazwa',1,,'40 znakowy Nazwa siedziby');
_def.define('AM','Miasto',1,,'30 znakowy Miasto');
_def.define('KP','Kod pocztowy',1,,'6 znakowy Kod pocztowy');
_def.define('AU','Ulica',1,,'50 znakowy Ulica');
_def.define('TEL','Telefon',1,,'20 znakowy Telefon');
_def.define('ODD','Jednostka księgowa',1,,'8 znakowy symbol jednostkę księgową.');
~~


\SIED_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.S.VALUE:=SIED.S;
_table.N.VALUE:=SIED.N;
_table.AM.VALUE:=SIED.AM;
_table.KP.VALUE:=SIED.KP;
_table.AU.VALUE:=SIED.AU;
_table.TEL.VALUE:=SIED.TEL;
_table.ODD.VALUE:=SIED.ODD().OD; _excel.write_async('ODD',SIED.ODD);

:: eksport pomieszczeń przypisanych do siedziby
POMI.cntx_psh();
POMI.index('UNIK'); POMI.prefix(REF.FIRMA,SIED.ODD,SIED.ref());
{? POMI.first()
|| {!
   |? _excel.write_async('POMI',POMI.ref());
      POMI.next()
   !}
?};
POMI.cntx_pop();

_result


\SIED_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_odd:=exec('FindInSet','#table','ODD','ODDZIALY',_table.ODD,REF.FIRMA,,1);
SIED.index('UNIK');
SIED.prefix(REF.FIRMA,_odd,_table.S,);
{? SIED.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SIED.blank() ?};

   SIED.FIRMA:=REF.FIRMA;
   SIED.S:=_table.S;
   SIED.N:=_table.N;
   SIED.AM:=_table.AM;
   SIED.KP:=_table.KP;
   SIED.AU:=_table.AU;
   SIED.TEL:=_table.TEL;
   SIED.ODD:=_odd;

   {? SIED.S=''
   || _result.MSG:='Nie wprowadzono nazwy skróconej siedziby.'@;
      _result.RESULT:=0
   |? SIED.ODD=null
   || _result.MSG:='Nie przypisano jednostki księgowej do siedziby.'@;
      _result.RESULT:=0
   ?}
?};
~~


\SIED_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SIED.add(1)
   |? _validate.ACTION='put'
   || _result:=SIED.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie siedziby %1 nie powiodło się.'[_table.S]
   || _validate.MSG:='Poprawa siedziby %1 nie powiodła się.'[_table.S]
   ?}
?};
_result


\POMI
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='POMI';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Pomieszczenia ŚT=1,1';
_def.NAME:='Pomieszczenia';
_def.DESC:='Poieszczenia w siedzibach';
_def.FUNPAR:='ZWS_PAR_FTSS';
_def.HIDDEN:='T';

_def.PREFIX:="POMI.index('UNIK'); POMI.prefix()";
_def.TABLE:="POMI";
_def.FIELDS:="exec('POMI_fld','xls_st',_a)";

_def.BEFORE:="POMI.cntx_psh()";
_def.AFTER:="POMI.cntx_pop()";
_def.SELECT:="exec('POMI_select','xls_st',_a)";

_def.EXPORT:="exec('POMI_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('POMI_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('POMI_imp','xls_st',_a,_b,_c)";
~~


\POMI_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'S','STRING[10]','Skrót'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'O','STRING[40]','Opis');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'S',,);

POMI.cntx_psh();
POMI.index('UNIK');
POMI.prefix(REF.FIRMA);
{? POMI.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$POMI.ref();
      _selected.prefix($POMI.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.S:=POMI.S;
      _tab.O:=POMI.O;
      _tab.add();
      POMI.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'S,O',20,'Wybór pomieszczeń do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
POMI.cntx_pop();

_result


\POMI_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('S','Skrót',1,,'10 znakowy Skrót');
_def.define('O','Opis',1,,'40 znakowy Opis');
_def.define('SIED','Siedziba',1,,'10 znakowy Skrót nazwy siedziby');
_def.define('ODD','Jednostka księgowa',1,,'8 znakowy symbol jednostki księgowej.');
~~


\POMI_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.S.VALUE:=POMI.S;
_table.O.VALUE:=POMI.O;
_table.SIED.VALUE:=POMI.SIED().S; _excel.write_async('SIED',POMI.SIED);
_table.ODD.VALUE:=POMI.ODD().OD; _excel.write_async('ODD',POMI.ODD);

_result


\POMI_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_odd:=exec('FindInSet','#table','ODD','ODDZIALY',_table.ODD,REF.FIRMA,,1);
_sied:=exec('FindInSet','#table','SIED','UNIK',_table.SIED,REF.FIRMA,,1,_odd);
POMI.index('UNIK');
POMI.prefix(REF.FIRMA,_odd,_sied,_table.S);
{? POMI.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || POMI.blank() ?};

   POMI.FIRMA:=REF.FIRMA;
   POMI.S:=_table.S;
   POMI.O:=_table.O;
   POMI.SIED:=_sied;
   POMI.ODD:=_odd;

   {? POMI.S=''
   || _result.MSG:='Nie wprowadzono nazwy skróconej pomieszczenia.'@;
      _result.RESULT:=0
   |? POMI.ODD=null
   || _result.MSG:='Nie przypisano jednostki księgowej do pomieszczenia.'@;
      _result.RESULT:=0
   |? POMI.SIED=null
   || _result.MSG:='Nie przypisano siedziby do pomieszczenia.'@;
      _result.RESULT:=0
   ?}
?};
~~


\POMI_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=POMI.add(1)
   |? _validate.ACTION='put'
   || _result:=POMI.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie Pomieszczenia %1 nie powiodło się.'[_table.S]
   || _validate.MSG:='Poprawa Pomieszczenia %1 nie powiodła się.'[_table.S]
   ?}
?};
_result


\ZSKON
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ZSKON';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Zestaw kont kosztowych ŚT=1,1';
_def.NAME:='Zestaw kont kosztowych';
_def.DESC:='Zestaw kont kosztowych';
_def.FUNPAR:='ZWS_PAR_FTZK';

_def.PREFIX:="ZSKON.index('KOD'); ZSKON.prefix()";
_def.TABLE:="ZSKON";
_def.FIELDS:="exec('ZSKON_fld','xls_st',_a)";

_def.BEFORE:="ZSKON.cntx_psh()";
_def.AFTER:="ZSKON.cntx_pop()";
_def.SELECT:="exec('ZSKON_select','xls_st',_a)";

_def.EXPORT:="exec('ZSKON_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('ZSKON_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('ZSKON_imp','xls_st',_a,_b,_c)";
~~


\ZSKON_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_result:=0;

_tab:=tab_tmp(1,'KOD','STRING[35]','Kod'
               ,'REF','STRING[16]','SQL ref'
               ,'SELECTED','STRING[1]','Czy wybrano'
               ,'KOM','STRING[70]','Komentarz'
               ,'RODZ','STRING[3]','Rodzaj dekretacji');
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,);
ZSKON.cntx_psh();
ZSKON.index('KOD');
ZSKON.prefix(REF.FIRMA);
{? ZSKON.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$ZSKON.ref();
      _selected.prefix($ZSKON.ref());
      {? _selected.first() || _tab.SELECTED:='T' || _tab.SELECTED:='N' ?};
      _tab.KOD:=ZSKON.KOD;
      _tab.KOM:=ZSKON.KOM;
      _tab.RODZ:=ZSKON.RODZ;
      _tab.add();
      ZSKON.next()
   !}
?};

_result:=exec('select_action','#table',_tab,'KOD,KOM,RODZ',20,'Wybór zestawów kont kosztowych do eksportu'@,1);

{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {! |? _selected.prefix(_tab.REF);
            {? _selected.first()=0
            || _selected.blank();
               _selected.REF:=_tab.REF;
               _selected.add()
            ?};
            _tab.next()
      !}
   ?}
?};
ZSKON.cntx_pop();

_result


\ZSKON_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KOD','Kod zestawu',1,,'35 znakowy Kod zestawu kont');
_def.define('KOM','Komentarz',1,,'70 znakowy Opis zestawu kont');
_def.define('RODZ','Rodzaj dekretacji',1,,'1 znakowy Rodzaj zestawu kont - (F)inansowe, (P)odatkowe, (D)odatkowe');
~~


\ZSKON_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.KOD.VALUE:=ZSKON.KOD;
_table.KOM.VALUE:=ZSKON.KOM;
_table.RODZ.VALUE:=ZSKON.RODZ;

:: eksport kont kosztowych przypisanych do zestawu kont
KKOSZ.cntx_psh();
KKOSZ.index('KONTO'); KKOSZ.prefix(ZSKON.ref());
{? KKOSZ.first()
|| {!
   |? _excel.write_async('KKOSZ',KKOSZ.ref());
      KKOSZ.next()
   !}
?};
KKOSZ.cntx_pop();

_result


\ZSKON_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
ZSKON.index('KOD');
ZSKON.prefix(REF.FIRMA,_table.RODZ,_table.KOD);
{? ZSKON.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || ZSKON.blank() ?};

   ZSKON.KOD:=_table.KOD;
   ZSKON.KOM:=_table.KOM;
   ZSKON.RODZ:=_table.RODZ;

   {? ZSKON.KOD=''
   || _result.MSG:='Nie wprowadzono kodu zestawu kont kosztowych.'@;
      _result.RESULT:=0
   |? ZSKON.RODZ=''
   || _result.MSG:='Nie wprowadzono rodzaju dekretacji dla zestawu kont kosztowych %1.'@[ZSKON.KOD];
      _result.RESULT:=0
   |? ZSKON.RODZ<>'P' & ZSKON.RODZ<>'F' & ZSKON.RODZ<>'D'
   || _result.MSG:='Niepoprawny rodzaj dekretacji (%1) dla zestawu kont kosztowych %2.'@[ZSKON.RODZ,ZSKON.KOD];
      _result.RESULT:=0
   ?}

?};
~~


\ZSKON_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=ZSKON.add(1)
   |? _validate.ACTION='put'
   || _result:=ZSKON.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie Zestawu kont kosztowych %1 nie powiodło się.'[_table.KOD]
   || _validate.MSG:='Poprawa Zestawu kont kosztowych %1 nie powiodła się.'[_table.KOD]
   ?}
?};
_result


\KKOSZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='KKOSZ';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Konta kosztowe ŚT=1,1';
_def.NAME:='Konta kosztowe ŚT';
_def.DESC:='Konta kosztowe dla środków trwałych';
_def.FUNPAR:='ZWS_PAR_FTZK';
_def.HIDDEN:='T';

_def.PREFIX:="KKOSZ.index('KONTO'); KKOSZ.prefix()";
_def.TABLE:="KKOSZ";
_def.FIELDS:="exec('KKOSZ_fld','xls_st',_a)";

_def.BEFORE:="KKOSZ.cntx_psh()";
_def.AFTER:="KKOSZ.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('KKOSZ_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('KKOSZ_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('KKOSZ_imp','xls_st',_a,_b,_c)";
~~


\KKOSZ_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('ZESTAW','Zestaw',1,,'35 znakowy Kod zestawu kont kosztowych');
_def.define('ZSKON_R','Rodzaj zestawu',1,,'1 znakowy rodzaj zestawu kont kosztowych');
_def.define('KONTO','Konto',1,,'35 znakowy symbol konta kosztowego');
_def.define('KONTO_R','Rok konta',1,,'Nazwa roku dla konta kosztowego');
_def.define('PR','Udział w procentach',1,,'Udział w %');

~~


\KKOSZ_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.ZESTAW.VALUE:=KKOSZ.ZESTAW().KOD; _excel.write_async('ZSKON',KKOSZ.ZESTAW);
_table.ZSKON_R.VALUE:=KKOSZ.ZESTAW().RODZ;
_table.KONTO.VALUE:=KKOSZ.KONTO().SYM; _excel.write_async('KK',KKOSZ.KONTO);
_table.KONTO_R.VALUE:=KKOSZ.KONTO().ROK_F().NAZ;
_table.PR.VALUE:=KKOSZ.PR;

_result


\KKOSZ_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_zestaw:=exec('FindInSet','#table','ZSKON','KOD',_table.ZESTAW,REF.FIRMA,,1,_table.ZSKON_R);

KK.cntx_psh();
KK.index('UNIK');
_kk:=_rok:=null;
{? _table.KONTO_R<>''
|| ROK_F.cntx_psh();
   ROK_F.index('NAZWA');
   ROK_F.prefix(REF.FIRMA,_table.KONTO_R,);
   {? ROK_F.first() || _rok:=ROK_F.ref() ?};
   ROK_F.cntx_pop()
?};
KK.prefix(REF.FIRMA,'FST',_rok,_table.KONTO);
{? KK.first() || _kk:=KK.ref() ?};
KK.cntx_pop();

KKOSZ.index('KONTO');
KKOSZ.prefix(_zestaw,_table.KONTO,_table.KONTO);
{? KKOSZ.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || KKOSZ.blank() ?};

   KKOSZ.ZESTAW:=_zestaw;
   KKOSZ.KONTO:=_kk;
   KKOSZ.PR:=_table.PR;

   {? KKOSZ.KONTO=null
   || _result.MSG:='Nie znaleziono konta kosztowego (KK).'@;
      _result.RESULT:=0
   |? KKOSZ.ZESTAW=null
   || _result.MSG:='Nie wprowadzono wskazania na zestaw kont kosztowych.'@;
      _result.RESULT:=0
   ?}
?};
~~


\KKOSZ_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=KKOSZ.add(1)
   |? _validate.ACTION='put'
   || _result:=KKOSZ.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie konta kosztowego %1 nie powiodło się.'[_table.KONTO]
   || _validate.MSG:='Poprawa konta kosztowego %1 nie powiodła się.'[_table.KONTO]
   ?}
?};
_result


\DEFAULT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='DEFAULT';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Wartości domyślne ŚT=1,1';
_def.NAME:='Wartości domyślne dla środków trwałych';
_def.DESC:='Wartości domyślne dla środków trwałych';
_def.FUNPAR:='ZWS_PAR_FTWD';

_def.PREFIX:="DEFAULT.index('DEFAULT'); DEFAULT.prefix()";
_def.TABLE:="DEFAULT";
_def.FIELDS:="exec('DEFAULT_fld','xls_st',_a)";

_def.BEFORE:="DEFAULT.cntx_psh(); UdTyp:=exec('FindInSet','#table','UD_TYP','SYMBOL','PODZORG',,,1)";
_def.AFTER:="DEFAULT.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('DEFAULT_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('DEFAULT_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('DEFAULT_imp','xls_st',_a,_b,_c)";
~~


\DEFAULT_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('R','Rodzaj środków',1,,'1 znakowy Rodzaj środków: trwałe czy niskocenne');
_def.define('JORG','Jednostka organizacyjna',1,,'16 znakowy symbol domyślnej jednostki organizacyjnej');
_def.define('MAP','Metoda amortyzacji podatkowej',1,,'3 znakowy kod metody amortyzacji podatkowej');
_def.define('MAF','Metoda amortyzacji finansowej',1,,'3 znakowy kod metody amortyzacji bilansowej');
_def.define('MAD','Metoda amortyzacji dodatkowej',1,,'3 znakowy kod metody amortyzacji dodatkowej');
_def.define('KONPOD','Podatkowy zestaw kont',1,,'35 znakowy kod podatkowego zestawu kont');
_def.define('KONFIN','Finansowy zestaw kont',1,,'35 znakowy kod finansowego zestawu kont');
_def.define('KONDOD','Dodatkowy zestaw kont',1,,'35 znakowy kod dodatkowego zestawu kont');
_def.define('PRZYCHOD','Rodzaj przychodu',1,,'15 znakowy Kod rodzaj przychodu');
_def.define('ACTIV','Podpowiedź aktywna?',1,,'1 znakowy Czy podpowiedź jest aktywna?');
~~


\DEFAULT_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.R.VALUE:=DEFAULT.R;
_table.JORG.VALUE:=DEFAULT.JORG().SYMBOL; _excel.write_async('UD_SKL',DEFAULT.JORG);
_table.MAP.VALUE:=DEFAULT.MAP().K; _excel.write_async('MA',DEFAULT.MAP);
_table.MAF.VALUE:=DEFAULT.MAF().K; _excel.write_async('MA',DEFAULT.MAF);
_table.MAD.VALUE:=DEFAULT.MAD().K; _excel.write_async('MA',DEFAULT.MAD);
_table.KONPOD.VALUE:=DEFAULT.KONPOD().KOD; _excel.write_async('ZSKON',DEFAULT.KONPOD);
_table.KONFIN.VALUE:=DEFAULT.KONFIN().KOD; _excel.write_async('ZSKON',DEFAULT.KONFIN);
_table.KONDOD.VALUE:=DEFAULT.KONDOD().KOD; _excel.write_async('ZSKON',DEFAULT.KONDOD);
_table.PRZYCHOD.VALUE:=DEFAULT.PRZYCHOD().R; _excel.write_async('PRZYCHOD',DEFAULT.PRZYCHOD);
_table.ACTIV.VALUE:=DEFAULT.ACTIV;

_result


\DEFAULT_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
{? var_pres('UdTyp')>0 & UdTyp<>null
|| _jorg:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.JORG,UdTyp,,1);
   {? _jorg<>null
   || DEFAULT.index('DEFAULT');
      DEFAULT.prefix(_table.R,_jorg);
      {? DEFAULT.first()
      || {? _mode=0
         || _result.RESULT:=0
         || _result.ACTION:='put'
         ?}
      || _result.ACTION:='add'
      ?};
      {? _result.RESULT=1
      || {? _result.ACTION='add' || DEFAULT.blank() ?};

         DEFAULT.R:=_table.R;
         DEFAULT.JORG:=_jorg;
         DEFAULT.MAP:=exec('FindInSet','#table','MA','MA',_table.MAP,,,1);
         DEFAULT.MAF:=exec('FindInSet','#table','MA','MA',_table.MAF,,,1);
         DEFAULT.MAD:=exec('FindInSet','#table','MA','MA',_table.MAD,,,1);
         DEFAULT.KONPOD:=exec('FindInSet','#table','ZSKON','KOD',_table.KONPOD,REF.FIRMA,,1,'P');
         DEFAULT.KONFIN:=exec('FindInSet','#table','ZSKON','KOD',_table.KONFIN,REF.FIRMA,,1,'F');
         DEFAULT.KONDOD:=exec('FindInSet','#table','ZSKON','KOD',_table.KONDOD,REF.FIRMA,,1,'D');
         DEFAULT.PRZYCHOD:=exec('FindInSet','#table','PRZYCHOD','PRZYCHOR',_table.PRZYCHOD,_table.PRZYCHOD,,1);
         DEFAULT.ACTIV:=_table.ACTIV;

         {? DEFAULT.R=''
         || _result.MSG:='Nie wprowadzono rodzaju środków dla definicji wartości domyślnych.'@;
            _result.RESULT:=0
         |? DEFAULT.JORG=null
         || _result.MSG:='Nie wprowadzono wskazania na jednostkę organizacyjną.'@;
            _result.RESULT:=0
         ?}
      ?}
   || _result.msg_norec('JORG');
      _result.RESULT:=0
   ?}
|| _result.MSG:='Nie znaleziono typu danych: PODZORG.';
   _result.RESULT:=0
?};
~~


\DEFAULT_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=DEFAULT.add(1)
   |? _validate.ACTION='put'
   || _result:=DEFAULT.put(1)
   ?}
?};
{? _result=0
|| _txt:=_table.R+' - '+_table.JORG;
   {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie definicji wartości domyślnych dla środków trwałych (%1) nie powiodło się.'[_txt]
   || _validate.MSG:='Poprawa definicji wartości domyślnych dla środków trwałych (%1) nie powiodła się.'[_txt]
   ?}
?};
_result


\CDDEF
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='CDDEF_SR';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Informacje dodatkowe ŚT=1,1';
_def.NAME:='Informacje dodatkowe dla środków trwałych';
_def.DESC:='Informacje dodatkowe dla środków trwałych';
_def.FUNPAR:='ZWS_PAR_CDDEF';
_def.MULTIFIR:='T';

_def.PREFIX:="CDDEF.index('CDDEF'); CDDEF.prefix(CdTabRef)";
_def.TABLE:="CDDEF";
_def.FIELDS:="exec('CDDEF_fld','xls_st',_a)";

_def.BEFORE:="CDDEF.cntx_psh(); CdTabRef:=exec('FindInSet','#table','CDTAB','CDTAB','SRSR',,,1)";
_def.AFTER:="CDDEF.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('CDDEF_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('CDDEF_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('CDDEF_imp','xls_st',_a,_b,_c)";
~~


\CDDEF_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KOL','Kolumna',1,,'11 znakowy Numer porzadkowy kolumny w ramach schematu');
_def.define('TAT','Atrybut',1,,'Numer Atrybutu',2);
_def.define('WYMAG','Czy wymagane?',1,,'1 znakowy Czy wypełnienie pola jest wymagane');
_def.define('SLOPOLE','Pole słownika',1,,'1 znakowe Z którego pola pobierać wartość słownika (K - kod, T - treść)');
_def.define('DEF_KIND','Sposób nadawania wartości domyślnej',1,,'1 znakowy Nadawanie wg.: W - podana wartość, F - wyliczana formułą');
_def.define('DEFAULT','Wartość domyślna',1,,'80 znakowy Wartość domyślna');
_def.define('SLO','Wskazanie na element słownika',1,,'8 znakowy Kod pozycji słownika dla wartości domyślnej');
_def.define('SLU','Wskazanie na słownik',1,,'20 znakowa Nazwa słownika dla wartości domyślnej');
_def.define('UD_SKL','Element struktury',1,,'16 znakowy symbol element struktury wartości domyślnej',2);
_def.define('UD_TYP','Typ drzewa struktury',1,,'8 znakowy symbol typu drzewa struktury wartości domyślnej');
_def.define('DEF_FORM','Formuła na wyliczenie wartości początkowej',1,,'100 znakowy Formuła wyliczająca wartośc poczatkową');
_def.define('EDIT','Blokada edycji',1,,'1 znakowy Blokada edycji');
_def.define('AE','Formuła po edycji',1,,'100 znakowy Formuła po edycji');
_def.define('OPIS','Nagłówek',1,,'30 znakowy Nagłówek sekcji atrybutów');
_def.define('TAB','Akronim tabeli powiązanej ze słownikiem',1,,'8 znakowy Akronim tabeli powiązanej ze słownikiem');
_def.define('TSLO','Formuła na słownik tymczasowy',1,,'100 znakowy Formuła na słownik tymczasowy');
_def.define('DOPIS','Rozszerzony długi opis',1,,'30 znakowy Rozszerzony długi opis');
_def.define('CZY_ZERO','Zerowa wartość liczbowa',1,,'1 znakowy Czy zero jest wartością pustą czy dopuszczalną wartością.');

~~


\CDDEF_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.KOL.VALUE:=CDDEF.KOL;
_table.TAT.VALUE:=CDDEF.TAT().NA; _excel.write_async('TAT',CDDEF.TAT);
_table.WYMAG.VALUE:=CDDEF.WYMAG;
_table.SLOPOLE.VALUE:=CDDEF.SLOPOLE;
_table.DEF_KIND.VALUE:=CDDEF.DEF_KIND;
_table.DEFAULT.VALUE:=CDDEF.DEFAULT;
_table.SLO.VALUE:=CDDEF.SLO().KOD; _excel.write_async('SLO',CDDEF.SLO);
_table.SLU.VALUE:=CDDEF.SLO().SLU().NAZ; _excel.write_async('SLU',CDDEF.SLO().SLU);
_table.UD_SKL.VALUE:=CDDEF.UD_SKL().SYMBOL; _excel.write_async('UD_SKL',CDDEF.UD_SKL);
_table.UD_TYP.VALUE:=CDDEF.UD_SKL().UD_TYP().SYMBOL; _excel.write_async('UD_TYP',CDDEF.UD_SKL().UD_TYP);
_table.DEF_FORM.VALUE:=CDDEF.DEF_FORM;
_table.EDIT.VALUE:=CDDEF.EDIT;
_table.AE.VALUE:=CDDEF.AE;
_table.OPIS.VALUE:=CDDEF.memo_txt(,1,'OPIS');
_table.TAB.VALUE:=CDDEF.TAB;
_table.TSLO.VALUE:=CDDEF.TSLO;
_table.DOPIS.VALUE:=CDDEF.memo_txt(,1,'DOPIS');
_table.CZY_ZERO.VALUE:=CDDEF.CZY_ZERO;

_result


\CDDEF_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;

{? var_pres('CdTabRef')>0 & CdTabRef<>null
|| CDDEF.index('CDKOL');
   CDDEF.prefix(CdTabRef,_table.KOL);
   {? CDDEF.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || CDDEF.blank(1) ?};
      CDDEF.CDTAB:=CdTabRef;
      CDDEF.KOL:=_table.KOL;
      CDDEF.TAT:=exec('FindInSet','#table','TAT','NA',_table.TAT,,,1);
      CDDEF.WYMAG:=_table.WYMAG;
      CDDEF.SLOPOLE:=_table.SLOPOLE;
      CDDEF.DEF_KIND:=_table.DEF_KIND;
      CDDEF.DEFAULT:=_table.DEFAULT;
      _slu:=exec('FindInSet','#table','SLU','NAZ',_table.SLU,,,1);
      CDDEF.SLO:=exec('FindInSet','#table','SLO','SL',_table.SLO,_slu,,1);
      _ud_typ:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYP,_table.UD_TYP,,1);
      CDDEF.UD_SKL:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.UD_SKL,_ud_typ,,1);
      CDDEF.DEF_FORM:=_table.DEF_FORM;
      CDDEF.EDIT:=_table.EDIT;
      CDDEF.AE:=_table.AE;
      CDDEF.TAB:=_table.TAB;
      CDDEF.TSLO:=_table.TSLO;
      CDDEF.CZY_ZERO:=_table.CZY_ZERO;

      {? CDDEF.TAT=null
      || _result.MSG:='Nie wprowadzono wskazania na atrybut.'@;
         _result.RESULT:=0
      |? CDDEF.KOL=0
      || _result.MSG:='Nie wprowadzono numeru porządkowego kolumny.'@;
         _result.RESULT:=0
      ?}
   ?}
|| _result.MSG:='Nie znaleziono zapisu zapisu o obsłudze informacji dodatkowych dla tabeli.';
   _result.RESULT:=0
?};
~~


\CDDEF_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=CDDEF.add(1)
   |? _validate.ACTION='put'
   || _result:=CDDEF.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie definicji informacji dodatkowej nie powiodło się.'
   || _validate.MSG:='Poprawa definicji informacji dodatkowej nie powiodła się.'
   ?}
|| CDDEF.memo_set(_table.OPIS,'OPIS');
   CDDEF.memo_put(,'OPIS');
   CDDEF.memo_set(_table.DOPIS,'DOPIS');
   CDDEF.memo_put(,'DOPIS');
   CDDEF.put()
?};
_result


\SKIDXODD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKIDXODD';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xlsx','xls_schemat');
_def.SHEET:='Powiązanie j. księgowych i org.=1,1';
_def.NAME:='Powiązanie j. księgowych i org.';
_def.DESC:='Powiązanie j. księgowych i org.';
_def.FUNPAR:='ZWS_PAR_RSCH';
_def.HIDDEN:='T';

_def.PREFIX:="SKIDXODD.index('UD_SKL'); SKIDXODD.prefix()";
_def.TABLE:="SKIDXODD";
_def.FIELDS:="exec('SKIDXODD_fld','xls_st',_a)";

_def.BEFORE:="SKIDXODD.cntx_psh()";
_def.AFTER:="SKIDXODD.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('SKIDXODD_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('SKIDXODD_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('SKIDXODD_imp','xls_st',_a,_b,_c)";
~~


\SKIDXODD_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilil
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('UD_SKL','Symbol j. organizacyjnej',1,,'16 znakowy Symbol jednostki organizacyjnej');
_def.define('UD_TYP','Typ drzewa',1,,'8 znakowy Symbol typu drzewa');
_def.define('ODD','Symbol j. księgowej',1,,'8 znakowy Symbol j. księgowej');
_def.define('FODD','Firma j. księgowej',1,,'4 znakowy symbol firmy j. księgowej');
~~


\SKIDXODD_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async(ml
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.UD_SKL.VALUE:=SKIDXODD.UD_SKL().SYMBOL; _excel.write_async('UD_SKL',SKIDXODD.UD_SKL);
_table.UD_TYP.VALUE:=SKIDXODD.UD_SKL().UD_TYP().SYMBOL;
_table.ODD.VALUE:=SKIDXODD.ODD().OD; _excel.write_async('ODD',SKIDXODD.ODD);
_table.FODD.VALUE:=ODD.FIRMA().SYMBOL;

_result


\SKIDXODD_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla impofml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;

_ud_typ:=_ud_skl:=_odd:=null;
_ud_typ:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYP,_table.UD_TYP,,1);
{? _table.FODD=''
|| _firma:=REF.FIRMA
|| _firma:=exec('FindInSet','#table','FIRMA','SYMBOL',_table.FODD,_table.FODD,,1,,null)
?};
_odd:=exec('FindInSet','#table','ODD','ODDZIALY',_table.ODD,_firma,,1,_table.ODD);
{? _ud_typ || _ud_skl:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.UD_SKL,_ud_typ,,1) ?};

{? _ud_skl=null
|| _result.MSG:='Brak wskazania na j. organizacyjną, powiązanie niemożliwe.'@;
   _result.RESULT:=0
|? _table.FODD<>'' & _firma=null
|| _result.MSG:='Nie znaleziono firmy: %1, powiązanie niemożliwe.'@[_table.FODD];
   _result.RESULT:=0
|? _odd=null
|| _result.MSG:='Brak wskazania na j. księgową, powiązanie niemożliwe.'@;
   _result.RESULT:=0
?};

{? _result.RESULT=1
|| SKIDXODD.index('UD_SKL');
   SKIDXODD.prefix(_ud_skl);
   {? SKIDXODD.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || SKIDXODD.blank() ?};
      SKIDXODD.UD_SKL:=_ud_skl;
      SKIDXODD.ODD:=_odd
   ?}
?};
~~


\SKIDXODD_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - su.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SKIDXODD.add(1)
   |? _validate.ACTION='put'
   || _result:=SKIDXODD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie powiązania j. organizacyjnej %1 z księgową nie powiodło się.'[_table.UD_SKL]
   || _validate.MSG:='Poprawa powiązania j. organizacyjnej %1 z ksiegową nie powiodła się.'[_table.UD_SKL]
   ?}
?};
_result


\TAB_KONW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='TAB_KONW';
_def.DOMAIN:=exec('name','#b_domain','FST');
_def.FILE:=exec('filename','xls_st');
_def.SHEET:='Tabele konwersji grup ŚT=1,1';
_def.NAME:='Tabele konwersji grup ŚT';
_def.DESC:='Tabele konwersji grup ŚT';
_def.FUNPAR:='ZWS_PAR_FTGR';
_def.HIDDEN:='N';
_def.MULTIFIR:='T';

_def.PREFIX:="TAB_KONW.index('SGR'); TAB_KONW.prefix()";
_def.TABLE:="TAB_KONW";
_def.FIELDS:="exec('TAB_KONW_fld','xls_st',_a)";

_def.BEFORE:="TAB_KONW.cntx_psh()";
_def.AFTER:="TAB_KONW.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('TAB_KONW_exp','xls_st',_a,_b)";
_def.VALIDATE:="exec('TAB_KONW_valid','xls_st',_a,_b,_c)";
_def.IMPORT:="exec('TAB_KONW_imp','xls_st',_a,_b,_c)";
~~


\TAB_KONW_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('AR','Rok zmiany',1,,'4 cyfrowy rok zmiany grupy środków',,0);
_def.define('SGR','Symbol starej grupy',1,,'15 znakowy symbol starej grupy środków');
_def.define('GR','Symbol nowej grupy',1,,'15 znakowy symbol nowej grupy środków');
_def.define('SKST','Stara KŚT',1,,'1 znakowy symbol starej klasyfikacji środków');
_def.define('KST','Nowa KŚT',1,,'1 znakowy Symbol nowej klasyfikacji środków');
~~


\TAB_KONW_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async()l
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.AR.VALUE:=TAB_KONW.AR;
_table.SGR.VALUE:=TAB_KONW.SGR().GR;
_table.GR.VALUE:=TAB_KONW.GR().GR;
_table.SKST.VALUE:=TAB_KONW.SGR().KST().KST; _excel.write_async('TAB_KRST',TAB_KONW.SGR().KST);
_table.KST.VALUE:=TAB_KONW.GR().KST().KST; _excel.write_async('TAB_KRST',TAB_KONW.GR().KST);

_result


\TAB_KONW_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla imporml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;

:: jeżeli tabela konwersji obowiązuje dla tego samego roku od którego obowiazuje tabela grup środków trwałych
:: o symbolu zgodnym ze "starą" klasyfikacją w tabeli konwersji to należy pominąć import tabeli konwersji
:: gdyż system zawiera już nową klasyfikację i import tabeli konwersji nie będzie możliwy (np. brak oczekiwanych grup
:: środków
_skip:=0;
TAB_KRST.cntx_psh();
TAB_KRST.index('TAB_KRST');
TAB_KRST.prefix(_table.SKST);
{? TAB_KRST.first() & TAB_KRST.AR=_table.AR || _skip:=1 ?};
TAB_KRST.cntx_pop();

{? ~_skip
|| _skst:=exec('FindInSet','#table','TAB_KRST','TAB_KRST',_table.SKST,,,1);
   _kst:=exec('FindInSet','#table','TAB_KRST','TAB_KRST',_table.KST,,,1);
   _sgr:=exec('FindInSet','#table','TAM','KST',_table.SGR,_skst,,1);
   _gr:=exec('FindInSet','#table','TAM','KST',_table.GR,_kst,,1);
   TAB_KONW.index('TAB_KONW');
   TAB_KONW.prefix(_table.AR,_sgr);
   {? TAB_KONW.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || TAB_KONW.blank() ?};
      TAB_KONW.AR:=_table.AR;
      TAB_KONW.SGR:=_sgr;
      TAB_KONW.GR:=_gr;

      {? TAB_KONW.AR=0
      || _result.MSG:='Nie wprowadzono roku zmiany grupy środków.'@;
         _result.RESULT:=0
      |? TAB_KONW.SGR=null
      || _result.MSG:='Nie wprowadzono starej grupy środków.'@;
         _result.RESULT:=0
      ?}
   ?}
|| _result.RESULT:=2
?};

~~


\TAB_KONW_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukfml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=TAB_KONW.add(1)
   |? _validate.ACTION='put'
   || _result:=TAB_KONW.put(1)
   ?}
|? _validate.RESULT=2
|| _result:=1
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie pozycji %2 do tabeli konwersji grup od roku %1 nie powiodło się.'[$_table.AR,_table.SGR]
   || _validate.MSG:='Poprawa pozycji %2 do tabeli konwersji grup od roku %1 nie powiodła się.'[$_table.AR,_table.SGR]
   ?}
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:12 bf0d9438c18fd2aa63ade670911f3788d8090f22f953c610f8550441b593fa65d3a051c2bdee60d08be1e71e5e2717c96efb197b6e3b47265ac8fea509fbff67210b8dfcadb3a4576accaeea28f09c2e3ffb3fe242e08c9b48efff3bf3aa06e912eb5ac692de2088448bd14a92bf697202dae3e1fd538d31040a077f418ad38e
