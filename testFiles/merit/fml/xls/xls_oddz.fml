:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_oddz.fml
:: Utworzony: 11.07.2018
:: Autor: Mario
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu oddziałów
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='ODDZ';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_DEF_ODDZ';

_def.FILE:='parametryzacja.xlsx';
_def.SHEET:='Oddziały=1,1';
_def.NAME:='Oddziały'@;
_def.DESC:='Oddziały';

_def.PREFIX:="exec('prefix','xls_oddz')";
_def.TABLE:="ODDZ";
_def.FIELDS:="exec('fields','xls_oddz',_a)";

_def.BEFORE:="ODDZ.cntx_psh()";
_def.AFTER:="ODDZ.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('export','xls_oddz',_a,_b)";
_def.VALIDATE:="exec('validate','xls_oddz',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_oddz',_a,_b,_c)";
_def.SELECT:="exec('select','xls_oddz',_a)";
~~


\prefix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Określa zakres eksportowanych danych
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
ODDZ.index('KOD');
ODDZ.prefix();
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('KOD','Kod',1,,'1 znakowy kod, dozwolone małe litery lub cyfry',type_of(''));
_def.define('NAZ','Nazwa',1,,'40 znakowa nazwa',type_of(''));
_def.define('WW','Czy wielowalutowość?',0,,
'(*) - jest stosowana
 brak - nie jest stosowana',type_of(''));
_def.define('TW','Typ wielowalutowości',0,,'',type_of(''));
_def.define('ODD','Oddział finansowy',0,,'Symbol Jednostki Księgowej',type_of(''));
:: KSTE
_def.define('B',MS.name(KSTE,'B'),1,,MS.comment(KSTE,'B'),type_of(''));
_def.define('CT',MS.name(KSTE,'CT'),1,,MS.comment(KSTE,'CT'),type_of(''));
_def.define('NAZ1',MS.name(KSTE,'NAZ'),1,,MS.comment(KSTE,'NAZ'),type_of(''));
_def.define('MIA',MS.name(KSTE,'MIA'),1,,MS.comment(KSTE,'MIA'),type_of(''));
_def.define('UL',MS.name(KSTE,'UL'),1,,MS.comment(KSTE,'UL'),type_of(''));
_def.define('NR_D',MS.name(KSTE,'NR_D'),1,,MS.comment(KSTE,'NR_D'),type_of(''));
_def.define('NR_L',MS.name(KSTE,'NR_L'),1,,MS.comment(KSTE,'NR_L'),type_of(''));
_def.define('KOD_P',MS.name(KSTE,'KOD_P'),1,,MS.comment(KSTE,'KOD_P'),type_of(''));
_def.define('POCZ',MS.name(KSTE,'POCZ'),1,,MS.comment(KSTE,'POCZ'),type_of(''));
_def.define('TEL',MS.name(KSTE,'TEL'),1,,MS.comment(KSTE,'TEL'),type_of(''));
_def.define('KRAJ',MS.name(KSTE,'KRAJ'),1,,MS.comment(KSTE,'KRAJ'),type_of(''));
_def.define('WAL_SLU','Słownik walut',1,,'Słownik walut',type_of(''));
_def.define('WAL',MS.name(KSTE,'WAL'),1,,MS.comment(KSTE,'WAL'),type_of(''));
_def.define('GLN',MS.name(KSTE,'GLN'),1,,MS.comment(KSTE,'GLN'),type_of(''));
_def.define('DT',MS.name(KSTE,'DT'),1,,MS.comment(KSTE,'DT'),type_of(''));
_def.define('BANKRSLU','Słownik banków',1,,'Słownik banków',type_of(''));
_def.define('BANKRS',MS.name(KSTE,'BANKRS'),1,,MS.comment(KSTE,'BANKRS'),type_of(''));
_def.define('TYPKRS',MS.name(KSTE,'TYPKRS'),1,,MS.comment(KSTE,'TYPKRS'),type_of(0),0);
~~


\record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

ODDZ.prefix();
{? _validate.ACTION='add'
||
   ODDZ.blank();
   ODDZ.KOD:=_obj.KOD
?};

ODDZ.NAZ:=_obj.NAZ;
ODDZ.WW:=_obj.WW;
ODDZ.TW:=_obj.TW;
ODDZ.ODD:=_validate.OBJ.ODD;
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.KOD.VALUE:=ODDZ.KOD;
_table.NAZ.VALUE:=ODDZ.NAZ;
_table.WW.VALUE:=ODDZ.WW;
_table.TW.VALUE:=ODDZ.TW;
_table.ODD.VALUE:=ODDZ.ODD().OD; _excel.write_async('ODD',ODDZ.ODD);

KSTE.cntx_psh();
KSTE.use(KSTE.name()-1+ODDZ.KOD);
KSTE.prefix();
{? KSTE.first()
||
   _table.B.VALUE:=KSTE.B;
   _table.CT.VALUE:=KSTE.CT;
   _table.NAZ1.VALUE:=KSTE.NAZ;
   _table.MIA.VALUE:=KSTE.MIA;
   _table.UL.VALUE:=KSTE.UL;
   _table.NR_D.VALUE:=KSTE.NR_D;
   _table.NR_L.VALUE:=KSTE.NR_L;
   _table.KOD_P.VALUE:=KSTE.KOD_P;
   _table.POCZ.VALUE:=KSTE.POCZ;
   _table.TEL.VALUE:=KSTE.TEL;
   _table.KRAJ.VALUE:=KSTE.KRAJ().KOD;  _excel.write_async('SLO',KSTE.KRAJ);
   _table.WAL_SLU.VALUE:=KSTE.WAL().SLU().NAZ;
   _table.WAL.VALUE:=KSTE.WAL().KOD;  _excel.write_async('SLO',KSTE.WAL);
   _table.GLN.VALUE:=KSTE.GLN;
   _table.DT.VALUE:=KSTE.DT;
   _table.BANKRSLU.VALUE:=KSTE.BANKRS().SLU().NAZ;
   _table.BANKRS.VALUE:=KSTE.BANKRS().KOD;  _excel.write_async('SLO',KSTE.BANKRS);
   _table.TYPKRS.VALUE:=KSTE.TYPKRS
?};
KSTE.cntx_pop();

_result


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;

{? (+_obj.KOD)<>1 | ~(exec('isLetter','#string',_obj.KOD,1) | exec('isDigit','#string',_obj.KOD))
|| _result.msg_inset('KOD','mała litera','cyfra'); _result.RESULT:=0
?};
{? (+_obj.WW)>1 | ~(_obj.WW='' | _obj.WW='*') || _result.msg_inset('WW','*','pusty napis'); _result.RESULT:=0 ?};

_result.OBJ:=obj_new('ODD','KRAJ','WAL','BANKRS');
_result.OBJ.ODD:=null;
_result.OBJ.KRAJ:=null();
_result.OBJ.WAL:=null();
_result.OBJ.BANKRS:=null();

:: zakładamy że jednostka księgowa ma być w bieżącej firmie
{? _obj.ODD<>''
||
   ODD.index('ODDZIALY');
   ODD.prefix(REF.FIRMA,_obj.ODD,);
   {? ODD.first()
   ||
      _result.OBJ.ODD:=ODD.ref
   ||
      _result.MSG:='Nie znaleziono jednostki księgowej o kodzie %1.'@[_obj.ODD]
   ?}
?};

{? _result.RESULT
||
   {? _obj.KRAJ=''
   ||
      _result.msg_empty('KRAJ');
      _result.RESULT:=0
   ||
      SLU.cntx_psh();
      SLU.index('NAZ');
      SLU.prefix();
      {? SLU.find_key('~KRAJE UE')
      ||
         _result.OBJ.KRAJ:=exec('FindInSet','#table','SLO','SL',_obj.KRAJ,SLU.ref(),,1,,null());
         {? _result.OBJ.KRAJ=null()
         ||
            _result.msg_norec('KRAJ');
            _result.RESULT:=0
         ?}
      ||
         _result.MSG:='Nie znaleziono słownika ~KRAJE UE';
         _result.RESULT:=0
      ?};
      SLU.cntx_pop()
   ?}
?};

{? _result.RESULT
||
   {? _obj.WAL_SLU=''
   ||
      _result.msg_empty('WAL_SLU');
      _result.RESULT:=0

   |? _obj.WAL=''
   ||
      _result.msg_empty('WAL');
      _result.RESULT:=0
   ||
      SLU.cntx_psh();
      SLU.index('NAZ');
      SLU.prefix();
      {? SLU.find_key(_obj.WAL_SLU)
      ||
         _result.OBJ.WAL:=exec('FindInSet','#table','SLO','SL',_obj.WAL,SLU.ref(),,1,,null());
         {? _result.OBJ.WAL=null()
         ||
            _result.msg_norec('WAL');
            _result.RESULT:=0
         ?}
      ||
         _result.msg_norec('WAL_SLU');
         _result.RESULT:=0
      ?};
      SLU.cntx_pop()
   ?}
?};

{? _result.RESULT
||
   {? _obj.BANKRSLU='' & _obj.BANKRS<>''
   ||
      _result.msg_empty('BANKRSLU')

   |? _obj.BANKRSLU<>''
   ||
      SLU.cntx_psh();
      SLU.index('NAZ');
      SLU.prefix();
      {? SLU.find_key(_obj.BANKRSLU)
      ||
         _result.OBJ.WAL:=exec('FindInSet','#table','SLO','SL',_obj.BANKRS,SLU.ref(),,1,,null());
         {? _result.OBJ.BANKRS=null()
         ||
            _result.msg_norec('BANKRS');
            _result.RESULT:=0
         ?}
      ||
         _result.msg_norec('BANKRSLU');
         _result.RESULT:=0
      ?};
      SLU.cntx_pop()
   ?}
?};

ODDZ.index('KOD');
ODDZ.prefix(_obj.KOD,);
{? ODDZ.first()
||
   {? _mode=0
   || _result.RESULT:=0
   ||
      _result.ACTION:='put';
      exec('record','xls_oddz',_obj,_mode,_result);
      {? exec('chk_oddz','oddzialy','put')<>''
      ||
         _result.RESULT:=0
      ?}
   ?}
||
   _result.ACTION:='add';
   exec('record','xls_oddz',_obj,_mode,_result);
   {? exec('chk_oddz','oddzialy','add')<>''
   || _result.RESULT:=0
   ?}
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
||
   {? _validate.ACTION='add'
   ||
      _result:=ODDZ.add(1)
   |? _validate.ACTION='put'
   ||
      _result:=ODDZ.put(1)
   ?};
   {? _result
   ||
      _var:=obj_new('KSTE_SET');
      _var.KSTE_SET:=1;
      params_set('var',_var);
      exec('kste_set','oddzialy');
      KSTE.B:=_obj.B;
      KSTE.CT:=_obj.CT;
      KSTE.NAZ:=_obj.NAZ1;
      KSTE.MIA:=_obj.MIA;
      KSTE.UL:=_obj.UL;
      KSTE.NR_D:=_obj.NR_D;
      KSTE.NR_L:=_obj.NR_L;
      KSTE.KOD_P:=_obj.KOD_P;
      KSTE.POCZ:=_obj.POCZ;
      KSTE.TEL:=_obj.TEL;
      KSTE.KRAJ:=_validate.OBJ.KRAJ;
      KSTE.WAL:=_validate.OBJ.WAL;
      KSTE.GLN:=_obj.GLN;
      KSTE.DT:=_obj.DT;
      KSTE.BANKRS:=_validate.OBJ.BANKRS;
      KSTE.TYPKRS:=_obj.TYPKRS;
      KSTE.put()
   ?}
?};
{? _result=0
||
   {? _validate.ACTION='add'
   ||
      _validate.MSG:='Dodanie oddziału o kodzie %1 nie powiodło się.'@[_obj.KOD]
   ||
      _validate.MSG:='Poprawa oddziału o kodzie %1 nie powiodło się.'@[_obj.KOD]
   ?}
?};
_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,'KOD','STRING[20]','Kod'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'NAZ','STRING[60]','Nazwa');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NAZ',,);

ODDZ.cntx_psh();
ODDZ.index('KOD');
ODDZ.prefix();
{? ODDZ.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$ODDZ.ref();
      _selected.prefix($ODDZ.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.KOD:=ODDZ.KOD;
      _tab.NAZ:=ODDZ.NAZ;
      _tab.add();
      ODDZ.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NAZ,KOD',20,'Wybór oddziału do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
ODDZ.cntx_pop();

_result

:Sign Version 2.0 jowisz:1028 2019/06/07 16:01:49 ab602d122a62994e533bf7068d2de230511f325a6fbc8e8ab7fd8e47931b3bdfb182b57c0624894687ed281537071bcf8735f947ca88b69559018103eabc850aa7c901d804367293ef54d3d65776675a3a21a60c5df824ee9bad391d12e05793f6065ef282fc0f31c99b08a3e942831fb54bfc378192685777657d401a21604a
