:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_mbn.fml
:: Utworzony: 05.09.2018
:: Autor: MB
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu modeli danych
::======================================================================================================================


\filename
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Nazwa pliku do eksportu modeli danych
::----------------------------------------------------------------------------------------------------------------------
'model_danych.xlsx'


\funpar_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: ID z parametryzatora dla definicji modeli
::----------------------------------------------------------------------------------------------------------------------
'ZWS_PAR_CMOD'


\funpar_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: ID z parametryzatora dla definicji uprawnień do modeli
::----------------------------------------------------------------------------------------------------------------------
'ZWS_PAR_PODZ'


\SKID_MBG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKID_MBG';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Grupy modeli danych=1,1';
_def.NAME:='Grupy modeli danych';
_def.DESC:='Grupy modeli danych';
_def.MULTIFIR:='T';

_def.PREFIX:="SKID_MBG.index('NAZ'); SKID_MBG.prefix()";
_def.TABLE:="SKID_MBG";
_def.FIELDS:="exec('SKID_MBG_fld','xls_mbn',_a)";

_def.BEFORE:="SKID_MBG.cntx_psh()";
_def.AFTER:="SKID_MBG.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('SKID_MBG_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('SKID_MBG_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('SKID_MBG_imp','xls_mbn',_a,_b,_c)";
~~


\SKID_MBG_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZ','Nazwa',1,,'40 znakowa nazwa');
~~


\SKID_MBG_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZ.VALUE:=SKID_MBG.NAZ;
_result


\SKID_MBG_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
SKID_MBG.index('NAZ');
SKID_MBG.prefix(_table.NAZ,);
{? SKID_MBG.first()
|| _result.RESULT:=0
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| SKID_MBG.blank(1);
   SKID_MBG.NAZ:=_table.NAZ
?};
~~


\SKID_MBG_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| _result:=SKID_MBG.add(1)
?};
{? _result=0
|| _validate.MSG:='Dodanie grupy modeli: %1 nie powiodło się.'[_table.NAZ]
?};
_result


\SKID_MBN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKID_MBN';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FUNPAR:='ZWS_OBE_BUDZ_MOD';
_def.FILE:=exec('filename','xls_mbn');
_def.SHEET:='Modele danych=1,1';
_def.NAME:='Modele danych';
_def.DESC:='Modele danych';
_def.MULTIFIR:='T';

_def.PREFIX:="SKID_MBN.index('TREE'); SKID_MBN.prefix()";
_def.TABLE:="exec('SKID_MBN_tab','xls_mbn',_a)";
_def.TAB_IMP:="SKID_MBN";
_def.FIELDS:="exec('SKID_MBN_fld','xls_mbn',_a)";

_def.BEFORE:="SKID_MBN.cntx_psh()";
_def.AFTER:="SKID_MBN.cntx_pop()";
_def.SELECT:="exec('SKID_MBN_select','xls_mbn',_a)";

_def.EXPORT:="exec('SKID_MBN_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('SKID_MBN_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('SKID_MBN_imp','xls_mbn',_a,_b,_c)";
~~


\SKID_MBN_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KOD','Kod',1,,'8 znakowy kod modelu danych',2);
_def.define('NAZ','Nazwa',1,,'60 znakowa nazwa modelu danych',2);
_def.define('SKID_MBN','Nadrzędny',1,,'8 znakowy kod modelu nadrzędnego',2);
_def.define('CZY_OFZ','Obiegi',1,,'1 znakowy znacznik czy model opisuje faktury zakupu i zapotrzebowania: T-tak, N-nie',2);
_def.define('TYP','Typ',1,,
   '1 znakowy typ modelu: \n'
   'O - ogólny\n'
   'P - personelowy',2
);
_def.define('EWID','Do ewidencji',1,,'1 znakowy znacznik, czy model wykorzystywany w ewidencji: T-tak, N-nie',2);
_def.define('CZY_DOK','Dokumenty',1,,'1 znakowy znacznik, czy kostka będzie zawierała dokumenty: T-tak N-nie',2);
_def.define('CZY_LIST','Lista płac',1,,'1 znakowy znacznik, czy kostka będzie zawierała też dane z listy płac: T-tak N-nie',2);
_def.define('CZY_NAR','Dokumenty narastająco',1,,'1 znakowy znacznik, czy dokumenty narastająco: T-tak N-nie',2);
_def.define('WART_NAR','Wartości narastająco',1,,'1 znakowy znacznik, czy wartości narastająco dla kostki: T-tak N-nie',2);
_def.define('KLIK','Qlik Sense',1,,'1 znakowy znacznik czy model dla Qlik Sense: T-tak N-nie',2);
_def.define('CZY_SPR','Sprawozdania',1,,'1 znakowy znacznik, czy model dla sprawozdań definiowalnych: T-tak, N-nie',2);
_def.define('W_SCH','Schemat grupy',1,,'40 znakowy schemat grupy kapitałowej',2);
_def.define('KONTROLA','Kontrola',1,,'1 znakowy znacznik, czy model używany do kontroli budżetu',2);
_def.define('LW','Lat wstecz',1,,'Ile lat wstecz dokonywana jest kontrola',1);
_def.define('SKID_MBG','Grupa',1,,'40 znakowy grupa modeli',2);
_def.define('KONTRPOZ','Poziom kontroli',1,,
   '1 znakowy znacznik poziomu kontroli: \n'
   'N - brak kontroli\n'
   'F - firma\n'
   'G - grupa',2
);
~~


\SKID_MBN_tab
:----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Zwraca tabelę do eksportu modelu danych
::   WE: _a - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| _tab:=tab_tmp(1,
      'LP','INTEGER','LP',
      'REF','STRING[16]','REF',
      'UIDREF','STRING[48]','Identyfikator'
   );
   _lp:=0;
   SKID_MBN.cntx_psh();
   SKID_MBN.index('TREE'); SKID_MBN.prefix(0);
   {? SKID_MBN.first()
   || {!
      |? _tab.LP:=(_lp+=1);
         _tab.REF:=$SKID_MBN.ref();
         _tab.UIDREF:=SKID_MBN.uidref();
         _tab.add();
         SKID_MBN.cntx_psh();
         SKID_MBN.prefix(#SKID_MBN.ref());
         {? SKID_MBN.first()
         || {!
            |? _tab.LP:=(_lp+=1);
               _tab.REF:=$SKID_MBN.ref();
               _tab.UIDREF:=SKID_MBN.uidref();
               _tab.add();
               SKID_MBN.next()
            !}
         ?};
         SKID_MBN.cntx_pop();
         SKID_MBN.next()
      !}
   ?};
   SKID_MBN.cntx_pop();
   _tab
|| SKID_MBN
?}


\SKID_MBN_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,
   'KOD','STRING[8]','Kod',
   'NAZ','STRING[60]','Nazwa',
   'REF','STRING[16]','ref',
   'SELECTED','STRING[1]','sel'
);

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'KOD',,);

SKID_MBN.cntx_psh();
SKID_MBN.index('KOD'); SKID_MBN.prefix();
{? SKID_MBN.first()
|| {!
   |? _tab.blank(1);
      _tab.KOD:=SKID_MBN.KOD;
      _tab.NAZ:=SKID_MBN.NAZ;
      _tab.REF:=$SKID_MBN.ref();
      _tab.SELECTED:={? _selected.find_key(_tab.REF,) || 'T' || 'N' ?};
      _tab.add();
      SKID_MBN.next()
   !}
?};
SKID_MBN.cntx_pop();

_result:=exec('select_action','#table',_tab,'KOD[8],NAZ[60]',10,'Wybór modeli danych do eksportu',1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |? _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
_result


\SKID_MBN_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();

_result:=0;
SKID_MBN.cntx_psh();
SKID_MBN.prefix();
{? _tab=SKID_MBN | SKID_MBN.seek(_tab.REF)
|| _table.KOD.VALUE:=SKID_MBN.KOD;
   _table.NAZ.VALUE:=SKID_MBN.NAZ;
   _table.CZY_OFZ.VALUE:=SKID_MBN.CZY_OFZ;
   {? _tab=SKID_MBN
   || SKID_MBN.cntx_psh();
      SKID_MBN.prefix();
      {? SKID_MBN.SKID_MBN & SKID_MBN.seek(SKID_MBN.SKID_MBN,)
      || _excel.write_async('SKID_MBN',SKID_MBN.ref())
      ?};
      SKID_MBN.cntx_pop()
   ?};
   _table.SKID_MBN.VALUE:=exec('FindAndGet','#table',SKID_MBN,SKID_MBN.SKID_MBN,SKID_MBN.name(),'KOD','');
   _table.TYP.VALUE:=SKID_MBN.TYP;
   _table.EWID.VALUE:=SKID_MBN.EWID;
   exec('k_insmbn','konsolidacja',SKID_MBN.ref());
   _table.CZY_DOK.VALUE:=K_INSMBN.CZY_DOK;
   _table.CZY_LIST.VALUE:=K_INSMBN.CZY_LIST;
   _table.CZY_NAR.VALUE:=K_INSMBN.CZY_NAR;
   _table.WART_NAR.VALUE:=K_INSMBN.WART_NAR;
   _table.KLIK.VALUE:=K_INSMBN.KLIK;
   _table.CZY_SPR.VALUE:=SKID_MBN.CZY_SPR;
   _table.W_SCH.VALUE:=SKID_MBN.W_SCH().NAZ; {? SKID_MBN.W_SCH || _excel.write_async('W_SCH',SKID_MBN.W_SCH) ?};
   _table.KONTROLA.VALUE:=SKID_MBN.KONTROLA;
   _table.LW.VALUE:=SKID_MBN.LW;
   _table.SKID_MBG.VALUE:=SKID_MBN.SKID_MBG().NAZ; {? SKID_MBN.SKID_MBG || _excel.write_async('SKID_MBG',SKID_MBG.ref()) ?};
   _table.KONTRPOZ.VALUE:=SKID_MBN.KONTRPOZ;

   SKID_MBP.cntx_psh();
   SKID_MBP.index('LP'); SKID_MBP.prefix(SKID_MBN.ref());
   {? SKID_MBP.first()
   || {!
      |? _excel.write_async('SKID_MBP',SKID_MBP.ref());
         SKID_MBP.next()
      !}
   ?};
   SKID_MBP.cntx_pop();

   _result:=1
?};
SKID_MBN.cntx_pop();
_result


\SKID_MBN_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=0;
_nad:=_gr:=_sch:=null;
{? _table.KOD=''
|| _result.msg_empty('KOD')
|| _result.RESULT:=1;
   SKID_MBN.index('KOD');
   SKID_MBN.prefix(_table.KOD,);
   {? SKID_MBN.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?}
?};
{? _result.RESULT=1
|| _result.RESULT:=0;
   {? _table.SKID_MBN<>'' & (_nad:=exec('FindInSet','#table','SKID_MBN','KOD',_table.SKID_MBN,,,1))=null
   || _result.msg_norec('SKID_MBN')
   |? _table.SKID_MBG<>'' & (_gr:=exec('FindInSet','#table','SKID_MBG','NAZ',_table.SKID_MBG,,,1))=null
   || _result.msg_norec('SKID_MBG')
   |? _table.CZY_OFZ=''
   || _result.msg_empty('CZY_OFZ')
   |? 'TN'*_table.CZY_OFZ<=0
   || _result.msg_inset('CZY_OFZ','T','N')
   |? _table.TYP=''
   || _result.msg_empty('TYP')
   |? 'OP'*_table.TYP<=0
   || _result.msg_inset('TYP','O','P')
   |? _table.W_SCH<>'' & (_sch:=exec('FindInSet','#table','W_SCH','NAZ',_table.W_SCH,,,1))=null
   || _result.msg_norec('W_SCH')
   |? _table.KONTROLA=''
   || _result.msg_empty('KONTROLA')
   |? 'TN'*_table.KONTROLA<=0
   || _result.msg_inset('KONTROLA','T','N')
   |? 'NFG'*_table.KONTRPOZ<=0
   || _result.msg_inset('KONTRPOZ','N','F','G')
   || _result.RESULT:=1
   ?}
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SKID_MBN.blank(1) ?};
   SKID_MBN.KOD:=_table.KOD;
   SKID_MBN.NAZ:=_table.NAZ;
   SKID_MBN.CZY_OFZ:=_table.CZY_OFZ;
   SKID_MBN.SKID_MBN:=#_nad;
   SKID_MBN.TYP:=_table.TYP;
   SKID_MBN.EWID:=_table.EWID;
   SKID_MBN.CZY_SPR:=_table.CZY_SPR;
   SKID_MBN.W_SCH:=_sch;
   SKID_MBN.KONTROLA:=_table.KONTROLA;
   SKID_MBN.LW:=_table.LW;
   SKID_MBN.SKID_MBG:=_gr;
   SKID_MBN.KONTRPOZ:=_table.KONTRPOZ;
   {? exec('chk_skid_mbn','control',_result.ACTION='put')<>''
   || _result.RESULT:=0
   ?}
?};
~~


\SKID_MBN_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SKID_MBN.add(1)
   |? _validate.ACTION='put'
   || exec('k_insmbn','konsolidacja',SKID_MBN.ref());
      _result:=SKID_MBN.put(1)
   ?}
?};
{? _result=1
|| {? exec('k_insmbn','konsolidacja',SKID_MBN.ref())
   || K_INSMBN.CZY_DOK:=_table.CZY_DOK;
      K_INSMBN.CZY_LIST:=_table.CZY_LIST;
      K_INSMBN.CZY_NAR:=_table.CZY_NAR;
      K_INSMBN.WART_NAR:=_table.WART_NAR;
      K_INSMBN.KLIK:=_table.KLIK;
      K_INSMBN.put()
   ?}
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie modelu %1 nie powiodło się.'[_table.KOD]
   || _validate.MSG:='Poprawa modelu %1 nie powiodła się.'[_table.KOD]
   ?}
?};
_result


\SKID_MBP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKID_MBP';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Pozycje modelu danych=1,1';
_def.NAME:='Pozycje modelu danych';
_def.DESC:='Pozycje modelu danych';
_def.MULTIFIR:='T';

_def.PREFIX:="SKID_MBP.index('LP'); SKID_MBP.prefix()";
_def.TABLE:="SKID_MBP";
_def.FIELDS:="exec('SKID_MBP_fld','xls_mbn',_a)";

_def.BEFORE:="SKID_MBP.cntx_psh()";
_def.AFTER:="SKID_MBP.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('SKID_MBP_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('SKID_MBP_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('SKID_MBP_imp','xls_mbn',_a,_b,_c)";
~~


\SKID_MBP_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('SKID_MBN','Model',1,,'8 znakowy kod modelu');
_def.define('LP','Lp.',1,,'Liczba porządkowa');
_def.define('UD_TYP','Typ schematu',1,,'8 znakowy symbol typu schematu');
_def.define('UD_SCH','Schemat',1,,'8 znakowy symbol schemat');
_def.define('NAZ','Nazwa',1,,'30 znakowy nazwa');
_def.define('KONTROLA','Kontrola',1,,'1 znakowy Znacznik, czy pozycja modelu używana w kontroli budżetu: T-tak, N-nie');
~~


\SKID_MBP_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.SKID_MBN.VALUE:=SKID_MBP.SKID_MBN().KOD;
_table.LP.VALUE:=SKID_MBP.LP;
_table.UD_TYP.VALUE:=SKID_MBP.UD_SCH().UD_TYP().SYMBOL; _excel.write_async('UD_TYP',SKID_MBP.UD_SCH().UD_TYP);
_table.UD_SCH.VALUE:=SKID_MBP.UD_SCH().SYMBOL; _excel.write_async('UD_SCH',SKID_MBP.UD_SCH);
_table.NAZ.VALUE:=SKID_MBP.NAZ;
_table.KONTROLA.VALUE:=SKID_MBP.KONTROLA;

UD_CECH.cntx_psh();
UD_CECH.index('UNIK'); UD_CECH.prefix(SKID_MBP.UD_SCH);
{? UD_CECH.first()
|| {!
   |? _excel.write_async('UD_CECH',UD_CECH.ref());
      UD_CECH.next()
   !}
?};
UD_CECH.cntx_pop();
UD_DEF.cntx_psh();
UD_DEF.index('SCHSYM'); UD_DEF.prefix(SKID_MBP.UD_SCH);
{? UD_DEF.first()
|| {!
   |? _excel.write_async('UD_DEF',UD_DEF.ref());
      {? SKID_MBP.LP=1
      || SKIDXDUD.cntx_psh();
         SKIDXDUD.index('POZ'); SKIDXDUD.prefix(UD_DEF.UD_SKL);
         {? SKIDXDUD.first()
         || _excel.write_async('SKIDXDUD',SKIDXDUD.ref())
         ?};
         SKIDXDUD.cntx_pop();
         K_FORM.cntx_psh();
         K_FORM.index('K_W_OBL'); K_FORM.prefix(UD_DEF.ref());
         {? K_FORM.first()
         || {!
            |? _excel.write_async('K_FORM',K_FORM.ref());
               K_FORM.next()
            !}
         ?};
         K_FORM.cntx_pop()
      ?};
      UD_DEF.next()
   !}
?};
UD_DEF.cntx_pop();

_result


\SKID_MBP_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
{? (_model:=exec('FindInSet','#table','SKID_MBN','KOD',_table.SKID_MBN,,,1))=null
|| _result.RESULT:=0;
   _result.msg_norec('SKID_MBN')
|| _result.RESULT:=1;
   SKID_MBP.index('LP');
   SKID_MBP.prefix(_model,_table.LP);
   {? SKID_MBP.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? (_ud_typ:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYP,,,1))=null
      || _result.RESULT:=0;
         _result.msg_norec('UD_TYP')
      |? (_ud_sch:=exec('FindInSet','#table','UD_SCH','SYMBOL',_table.UD_SCH,_ud_typ,,1))=null
      || _result.RESULT:=0;
         _result.msg_norec('UD_SCH')
      ?};
      {? _result.RESULT=1 & exec('spr_wyk_model','control',_model)
      || {? _result.ACTION='add' || SKID_MBP.blank(1) ?};
         SKID_MBP.SKID_MBN:=_model;
         SKID_MBP.LP:=_table.LP;
         SKID_MBP.UD_SCH:=_ud_sch;
         SKID_MBP.NAZ:=_table.NAZ;
         SKID_MBP.KONTROLA:=_table.KONTROLA;
         {? exec('chk_skid_mbp','control',_result.ACTION='put')<>''
         || _result.RESULT:=0
         ?}
      ?}
   ?}
?};
~~


\SKID_MBP_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SKID_MBP.add(1)
   |? _validate.ACTION='put'
   || _result:=SKID_MBP.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie pozycji: %1 modelu: %2 nie powiodło się.'@[$_table.LP,_table.SKID_MBN]
   || _validate.MSG:='Poprawa pozycji: %1 modelu: %2 nie powiodła się.'@[$_table.LP,_table.SKID_MBN]
   ?}
?};
_result


\SKIDXDUD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKIDXDUD';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Definicje pozycji budżetowych=1,1';
_def.NAME:='Definicje pozycji budżetowych';
_def.DESC:='Definicje pozycji budżetowych';
_def.MULTIFIR:='T';

_def.PREFIX:="SKIDXDUD.index('POZ'); SKIDXDUD.prefix()";
_def.TABLE:="SKIDXDUD";
_def.FIELDS:="exec('SKIDXDUD_fld','xls_mbn',_a)";

_def.BEFORE:="
   SKIDXDUD.cntx_psh();
   UdTyp:=exec('FindInSet','#table','UD_TYP','SYMBOL','POZ_BUD',,,1);
   exec('czytaj','#stalesys',,XINFO,'SLWAL')
";
_def.AFTER:="SKIDXDUD.cntx_pop(); VAR_DEL.delete('UdTyp')";
_def.SELECT:="";

_def.EXPORT:="exec('SKIDXDUD_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('SKIDXDUD_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('SKIDXDUD_imp','xls_mbn',_a,_b,_c)";
~~


\SKIDXDUD_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('POZ_BUD','Pozycja budżetowa',1,,'16 znakowy symbol pozycji budżetowej');
_def.define('WART_IL','Wartość/Ilość',1,,'1 znakowy znacznik: W-wartość, I-ilość');
_def.define('JM','Jednostka miary',1,,'10 znakowa jednostka miary');
_def.define('PREC','Dokładność',1,,'Dokładność (miejsca dziesiętne)');
_def.define('STR','Strona księgowa',1,,'2 znakowy Strona księgowa');
_def.define('WSK_WAL','Walutowa',1,,'1 znakowy znacznik walutowości: T-tak, N-nie');
_def.define('WAL','Waluta domyślna',1,,'3 znakowy symbol waluty');
_def.define('ONLY_L','Tylko liście',1,,'1 znakowy znacznik, czy operacja dla OLAP wykonywać tylko na liściach: T-tak, N-nie');
_def.define('TYP_NAR','Sposób obliczania narastająco',1,,
   '1 znakowy znacznik sposobu naliczania wartości narastająco:\n'
   'F - Formuły, sumy po okresach\n'
   'S - Suma po okresach, formuły'
);
_def.define('F_NAR','Formuła - narastająco',1,,'8 znakowy skrót formuły zmieniająca wartość narastająco');
_def.define('B_GET','Formuła - przed pobraniem',1,,'8 znakowy skrót formułt wykonywanej przed pobraniem wartości do excela');
_def.define('DONTSAVE','Zapisywać',1,,'1 znakowy znacznik, czy nie zapisywać wartość z arkusza budżetowego: T-tak, N-nie',type_of(''));
_def.define('A_SEND','Formuła - po wysłaniu',1,,'8 znakowy skrót formuły wykonywanej po wysłaniu wartości z excela');
~~


\SKIDXDUD_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.POZ_BUD.VALUE:=SKIDXDUD.POZ_BUD().SYMBOL; _excel.write_async('UD_SKL',SKIDXDUD.POZ_BUD);
_table.WART_IL.VALUE:=SKIDXDUD.WART_IL;
_table.JM.VALUE:=SKIDXDUD.JM().KOD;              {? SKIDXDUD.JM || _excel.write_async('JM',SKIDXDUD.JM) ?};
_table.PREC.VALUE:=SKIDXDUD.PREC;
_table.STR.VALUE:=SKIDXDUD.STR;
_table.WSK_WAL.VALUE:=SKIDXDUD.WSK_WAL;
_table.WAL.VALUE:=SKIDXDUD.WAL().KOD;            {? SKIDXDUD.WAL || _excel.write_async('SLO',SKIDXDUD.WAL) ?};
_table.ONLY_L.VALUE:={? SKIDXDUD.ONLY_L='' || 'N' || SKIDXDUD.ONLY_L ?};
_table.TYP_NAR.VALUE:={? SKIDXDUD.TYP_NAR='' || 'F' || SKIDXDUD.TYP_NAR ?};
_table.F_NAR.VALUE:=SKIDXDUD.F_NAR().SKROT;      {? SKIDXDUD.F_NAR || _excel.write_async('FORMULA',SKIDXDUD.F_NAR) ?};
_table.B_GET.VALUE:=SKIDXDUD.B_GET().SKROT;      {? SKIDXDUD.B_GET || _excel.write_async('FORMULA',SKIDXDUD.B_GET) ?};
_table.DONTSAVE.VALUE:={? SKIDXDUD.DONTSAVE || 'N' || 'T' ?};
_table.A_SEND.VALUE:=SKIDXDUD.A_SEND().SKROT;    {? SKIDXDUD.A_SEND || _excel.write_async('FORMULA',SKIDXDUD.A_SEND) ?};
_result


\SKIDXDUD_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_poz_bud:=null;
_result.RESULT:=0;
{? _table.POZ_BUD=''
|| _result.msg_empty('POZ_BUD')
|? UdTyp=null
|| _result.MSG:='Nie znaleziono typu danych: POZ_BUD.'
|? (_poz_bud:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.POZ_BUD,UdTyp,,1) )=null
|| _result.msg_norec('POZ_BUD')
|| _result.RESULT:=1
?};
{? _result.RESULT=1
|| SKIDXDUD.index('POZ');
   SKIDXDUD.prefix(_poz_bud);
   {? SKIDXDUD.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put'
      ?}
   || _result.ACTION:='add'
   ?};
   {? _result.RESULT=1
   || {? _table.WART_IL='' || _fld:='WART_IL'
      |? _table.STR='' || _fld:='STR'
      |? _table.WSK_WAL='' || _fld:='WSK_WAL'
      |? _table.ONLY_L='' || _fld:='ONLY_L'
      |? _table.TYP_NAR='' || _fld:='TYP_NAR'
      |? _table.DONTSAVE='' || _fld:='DONTSAVE'
      || _fld:=''
      ?};
      {? _fld<>''
      || _result.msg_empty(_fld);
         _result.RESULT:=0
      ?}
   ?};
   {? _result.RESULT=1
   || _result.RESULT:=0;
      _f_nar:=_b_get:=_a_send:=_wal:=null;
      {? 'WI'*_table.WART_IL=0 || _result.msg_inset('WART_IL','W','I')
      |? ',Wn,Ma,'*(','+_table.STR+',')=0 || _result.msg_inset('STR','Wn','Ma')
      |? 'TN'*_table.WSK_WAL=0 || _result.msg_inset('WSK_WAL','T','N')
      |? 'TN'*_table.ONLY_L=0 || _result.msg_inset('ONLY_L','T','N')
      |? 'FS'*_table.TYP_NAR=0 || _result.msg_inset('TYP_NAR','F','S')
      |? 'TN'*_table.DONTSAVE=0 || _result.msg_inset('DONTSAVE','T','N')
      |? _table.WAL<>'' & (_wal:=exec('find_slo_slu','slo_slu',XINFO.SLWAL,_table.WAL))=null
      || _result.msg_norec('WAL')
      |? _table.F_NAR<>'' & (_f_nar:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.F_NAR,'C',,1))=null
      || _result.msg_norec('F_NAR')
      |? _table.B_GET<>'' & (_b_get:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.B_GET,'C',,1))=null
      || _result.msg_norec('B_GET')
      |? _table.A_SEND<>'' & (_a_send:=exec('FindInSet','#table','FORMULA','FORMULA4',_table.A_SEND,'C',,1))=null
      || _result.msg_norec('A_SEND')
      || _result.RESULT:=1
      ?}
   ?};
   {? _result.RESULT=1
   || {? _result.ACTION='add' || SKIDXDUD.blank(1) ?};
      SKIDXDUD.POZ_BUD:=_poz_bud;
      SKIDXDUD.WART_IL:=_table.WART_IL;
      SKIDXDUD.JM:=exec('FindInSet','#table','JM','KOD',_table.JM,,,1);
      SKIDXDUD.PREC:=_table.PREC;
      SKIDXDUD.STR:=_table.STR;
      SKIDXDUD.WSK_WAL:=_table.WSK_WAL;
      SKIDXDUD.WAL:=_wal;
      SKIDXDUD.CIW:=SKIDXDUD.WART_IL;
      SKIDXDUD.ONLY_L:=_table.ONLY_L;
      SKIDXDUD.TYP_NAR:=_table.TYP_NAR;
      SKIDXDUD.F_NAR:=_f_nar;
      SKIDXDUD.B_GET:=_b_get;
      SKIDXDUD.DONTSAVE:={? _table.DONTSAVE='N' || 1 ?};
      SKIDXDUD.A_SEND:=_a_send
   ?}
?};
~~


\SKIDXDUD_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SKIDXDUD.add(1)
   |? _validate.ACTION='put'
   || _result:=SKIDXDUD.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie SKIDXDUD %1 nie powiodło się.'[_table.OD]
   || _validate.MSG:='Poprawa SKIDXDUD %1 nie powiodła się.'[_table.OD]
   ?}
?};
_result


\UD_CECH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='UD_CECH';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Definicje cech schematów danych=1,1';
_def.NAME:='Definicje cech schematów danych';
_def.DESC:='Definicje cech schematów danych';
_def.MULTIFIR:='T';

_def.PREFIX:="UD_CECH.index('UNIK'); UD_CECH.prefix()";
_def.TABLE:="UD_CECH";
_def.FIELDS:="exec('UD_CECH_fld','xls_mbn',_a)";

_def.BEFORE:="UD_CECH.cntx_psh()";
_def.AFTER:="UD_CECH.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('UD_CECH_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('UD_CECH_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('UD_CECH_imp','xls_mbn',_a,_b,_c)";
~~


\UD_CECH_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('UD_TYPWE','Typ schematu wejściowego',1,,'8 znakowy symbol typu schematu wejściowego',2);
_def.define('UD_SCHWE','Schemat wejściowy',1,,'8 znakowy symbol schematu wejściowego',2);
_def.define('NAZWA','Nazwa',1,,'100 znakowa nazwa ',2);
_def.define('UD_TYPWY','Typ schematu wyjściowego',1,,'8 znakowy symbol typu schematu wyjściowego',2);
_def.define('UD_SCHWY','Schemat wyjściowy',1,,'8 znakowy symbol schematu wyjściowego',2);
~~


\UD_CECH_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZWA.VALUE:=UD_CECH.NAZWA;
_table.UD_TYPWE.VALUE:=UD_CECH.UD_SCHWE().UD_TYP().SYMBOL;  _excel.write_async('UD_TYP',UD_TYP.ref());
_table.UD_SCHWE.VALUE:=UD_CECH.UD_SCHWE().SYMBOL;           _excel.write_async('UD_SCH',UD_CECH.UD_SCHWE);
_table.UD_TYPWY.VALUE:=UD_CECH.UD_SCHWY().UD_TYP().SYMBOL;  _excel.write_async('UD_TYP',UD_TYP.ref());
_table.UD_SCHWY.VALUE:=UD_CECH.UD_SCHWY().SYMBOL;           _excel.write_async('UD_SCH',UD_CECH.UD_SCHWY);

UD_WCECH.cntx_psh();
UD_WCECH.index('CECHA'); UD_WCECH.prefix(UD_CECH.ref());
{? UD_WCECH.first()
|| {!
   |? _excel.write_async('UD_WCECH',UD_WCECH.ref());
      UD_WCECH.next()
   !}
?};
UD_WCECH.cntx_pop();
_result


\UD_CECH_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.UD_TYPWE='' || _fld:='UD_TYPWE'
|? _table.UD_SCHWE='' || _fld:='UD_SCHWE'
|? _table.NAZWA=''    || _fld:='NAZWA'
|? _table.UD_TYPWY='' || _fld:='UD_TYPWY'
|? _table.UD_TYPWY='' || _fld:='UD_SCHWY'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld);
   return()
?};
{? (_twe:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYPWE,,,1))=null
|| _result.msg_norec('UD_TYPWE');
   return()
|? (_swe:=exec('FindInSet','#table','UD_SCH','SYMBOL',_table.UD_SCHWE,_twe,,1))=null
|| _result.msg_norec('UD_SCHWE');
   return()
|? (_twy:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYPWY,,,1))=null
|| _result.msg_norec('UD_TYPWY');
   return()
|? (_swy:=exec('FindInSet','#table','UD_SCH','SYMBOL',_table.UD_SCHWY,_twy,,1))=null
|| _result.msg_norec('UD_SCHWY');
   return()
?};
_result.RESULT:=1;
UD_CECH.index('UNIK');
UD_CECH.prefix(_swe,_swy);
{? UD_CECH.first()
|| {? _mode=0
   || _result.RESULT:=0;
      return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};

_result.RESULT:=1;
{? _result.ACTION='add' || UD_CECH.blank(1) ?};
UD_CECH.NAZWA:=_table.NAZWA;
UD_CECH.UD_SCHWE:=_swe;
UD_CECH.UD_SCHWY:=_swy;
~~


\UD_CECH_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=UD_CECH.add(1)
   |? _validate.ACTION='put'
   || _result:=UD_CECH.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie definicji cechy dla schematu nie powiodło się.'@
   || _validate.MSG:='Poprawa definicji cechy dla schematu nie powiodła się.'@
   ?}
?};
_result


\UD_WCECH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='UD_WCECH';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Elementy wyjściowe cechy=1,1';
_def.NAME:='Elementy wyjściowe cechy';
_def.DESC:='Elementy wyjściowe cechy';

_def.PREFIX:="UD_WCECH.index('CECHA'); UD_WCECH.prefix()";
_def.TABLE:="UD_WCECH";
_def.FIELDS:="exec('UD_WCECH_fld','xls_mbn',_a)";

_def.BEFORE:="UD_WCECH.cntx_psh()";
_def.AFTER:="UD_WCECH.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('UD_WCECH_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('UD_WCECH_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('UD_WCECH_imp','xls_mbn',_a,_b,_c)";
~~


\UD_WCECH_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('UD_TYPWE','Typ schematu wejściowego',1,,'8 znakowy symbol typu schematu wejściowego',2);
_def.define('UD_SCHWE','Schemat wejściowy',1,,'8 znakowy symbol schematu wejściowego',2);
_def.define('UD_SKLWE','Element wejściowy',1,,'8 znakowy symbol element wejściowy',2);
_def.define('UD_TYPWY','Typ schematu wyjściowego',1,,'8 znakowy symbol typu schematu wyjściowego',2);
_def.define('UD_SCHWY','Schemat wyjściowy',1,,'8 znakowy symbol schematu wyjściowego',2);
_def.define('UD_SKLWY','Element wyjściowy',1,,'8 znakowy symbol element wyjściowy',2);
_def.define('ROK_F','Rok bilansowy',1,,'20 znakowa nazwa roku bilansowy',2);
_def.define('OKRO_F','Okres obrachunkowy',1,,'Numer okres obrachunkowego',1);
~~


\UD_WCECH_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;
_table.UD_TYPWE.VALUE:=UD_WCECH.UD_CECH().UD_SCHWE().UD_TYP().SYMBOL; _excel.write_async('UD_TYP',UD_TYP.ref());
_table.UD_SCHWE.VALUE:=UD_SCH.SYMBOL;                                 _excel.write_async('UD_SCH',UD_SCH.ref());
_table.UD_TYPWY.VALUE:=UD_WCECH.UD_CECH().UD_SCHWY().UD_TYP().SYMBOL; _excel.write_async('UD_TYP',UD_TYP.ref());
_table.UD_SCHWY.VALUE:=UD_SCH.SYMBOL;                                 _excel.write_async('UD_SCH',UD_SCH.ref());
_table.UD_SKLWE.VALUE:=UD_WCECH.UD_SKLWE().SYMBOL;                    _excel.write_async('UD_SKL',UD_SKL.ref());
_table.UD_SKLWY.VALUE:=UD_WCECH.UD_SKLWY().SYMBOL;                    _excel.write_async('UD_SKL',UD_SKL.ref());
_table.ROK_F.VALUE:=UD_WCECH.ROK_F().NAZ;                             _excel.write_async('ROK_F',ROK_F.ref());
_table.OKRO_F.VALUE:=UD_WCECH.OKRO_F().NR;                            _excel.write_async('OKRO_F',OKRO_F.ref());
_result


\UD_WCECH_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.UD_TYPWE='' || _fld:='UD_TYPWE'
|? _table.UD_SCHWE='' || _fld:='UD_SCHWE'
|? _table.UD_TYPWY='' || _fld:='UD_TYPWY'
|? _table.UD_TYPWY='' || _fld:='UD_SCHWY'
|? _table.UD_SKLWE='' || _fld:='UD_SKLWE'
|? _table.UD_SKLWY='' || _fld:='UD_SKLWY'
|? _table.ROK_F=''    || _fld:='ROK_F'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld);
   return()
?};
{? (_twe:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYPWE,,,1))=null
|| _result.msg_norec('UD_TYPWE');
   return()
|? (_swe:=exec('FindInSet','#table','UD_SCH','SYMBOL',_table.UD_SCHWE,_twe,,1))=null
|| _result.msg_norec('UD_SCHWE');
   return()
|? (_twy:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYPWY,,,1))=null
|| _result.msg_norec('UD_TYPWY');
   return()
|? (_swy:=exec('FindInSet','#table','UD_SCH','SYMBOL',_table.UD_SCHWY,_twy,,1))=null
|| _result.msg_norec('UD_SCHWY');
   return()
|? (_cech:=exec('FindInSet','#table','UD_CECH','UNIK',_swy,_swe,,0))=null
|| _result.MSG:='Nie znaleziono definicji cech.'@;
   return()
|? (_ewe:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.UD_SKLWE,_twe,,1))=null
|| _result.msg_norec('UD_SKLWE');
   return()
|? (_ewy:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.UD_SKLWY,_twy,,1))=null
|| _result.msg_norec('UD_SKLWY');
   return()
|? (_rok:=exec('FindInSet','#table','ROK_F','NAZWA',_table.ROK_F,REF.FIRMA,,1))=null
|| _result.msg_norec('ROK_F');
   return()
|? (_okro_f:=exec('FindInSet','#table','OKRO_F','ROK',_table.OKRO_F,_rok,,0))=null
|| _result.msg_norec('OKRO_F');
   return()
?};
UD_WCECH.index('UNIK');
UD_WCECH.prefix(_cech,_ewe,_rok,_okro_f);
{? UD_WCECH.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
_result.RESULT:=1;
{? _result.ACTION='add' || UD_WCECH.blank(1) ?};
UD_WCECH.UD_CECH:=_cech;
UD_WCECH.UD_SKLWE:=_ewe;
UD_WCECH.UD_SKLWY:=_ewy;
UD_WCECH.ROK_F:=_rok;
UD_WCECH.OKRO_F:=_okro_f;
~~


\UD_WCECH_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=UD_WCECH.add(1)
   |? _validate.ACTION='put'
   || _result:=UD_WCECH.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie elementu wyjściowego cechy nie powiodło się.'@
   || _validate.MSG:='Poprawa elementu wyjściowego cechy nie powiodła się.'@
   ?}
?};
_result


\K_W_OBL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='K_W_OBL';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Wariant obliczeń=1,1';
_def.NAME:='Wariant obliczeń';
_def.DESC:='Wariant obliczeń';
_def.MULTIFIR:='T';

_def.PREFIX:="K_W_OBL.index('NAZ'); K_W_OBL.prefix()";
_def.TABLE:="K_W_OBL";
_def.FIELDS:="exec('K_W_OBL_fld','xls_mbn',_a)";

_def.BEFORE:="K_W_OBL.cntx_psh()";
_def.AFTER:="K_W_OBL.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('K_W_OBL_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('K_W_OBL_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('K_W_OBL_imp','xls_mbn',_a,_b,_c)";
~~


\K_W_OBL_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NAZ','Nazwa',1,,'20 znakowa nazwa');
~~


\K_W_OBL_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZ.VALUE:=K_W_OBL.NAZ;
_result


\K_W_OBL_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
K_W_OBL.index('NAZ');
K_W_OBL.prefix(_table.NAZ);
{? K_W_OBL.first()
|| return()
|| _result.ACTION:='add'
?};
_result.RESULT:=1;
K_W_OBL.blank(1);
K_W_OBL.NAZ:=_table.NAZ;
~~


\K_W_OBL_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| _result:=K_W_OBL.add(1)
?};
{? _result=0
|| _validate.MSG:='Dodanie wariantu obliczeń: %1 nie powiodło się.'[_table.NAZ]
?};
_result


\K_FORM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='K_FORM';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Definicja obliczeń=1,1';
_def.NAME:='Definicja obliczeń';
_def.DESC:='Definicja obliczeń';
_def.MULTIFIR:='T';

_def.PREFIX:="K_FORM.index('S1'); K_FORM.prefix()";
_def.TABLE:="K_FORM";
_def.FIELDS:="exec('K_FORM_fld','xls_mbn',_a)";

_def.BEFORE:="K_FORM.cntx_psh()";
_def.AFTER:="K_FORM.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('K_FORM_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('K_FORM_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('K_FORM_imp','xls_mbn',_a,_b,_c)";
~~


\K_FORM_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('UD_TYP','Typ schematu danych',1,,'16 znakowy typ schematu danych');
_def.define('UD_SCH','Schemat danych',1,,'16 znakowy symbol schematu danych');
_def.define('UD_DEF','Element schematu danych',1,,'16 znakowy symbol element schematu danych');
_def.define('K_W_OBL','Wariant obliczeń',1,,'20 znakowa nazwa wariantu obliczeń');
_def.define('TYP','Typ',1,,
   '1 znakowy typu formuły:\n'
   'S - suma\n'
   'W - wejści\n'
   'F - formuła'
);
_def.define('F','Treść formuły',1,,'Treść formuły');
~~


\K_FORM_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.UD_TYP.VALUE:=K_FORM.UD_DEF().UD_SCH().UD_TYP().SYMBOL; _excel.write_async('UD_TYP',UD_TYP.ref());
_table.UD_SCH.VALUE:=UD_SCH.SYMBOL;                            _excel.write_async('UD_SCH',UD_SCH.ref());
_table.UD_DEF.VALUE:=UD_DEF.SYMBOL;                            _excel.write_async('UD_DEF',UD_DEF.ref());
_table.K_W_OBL.VALUE:=K_FORM.K_W_OBL().NAZ;                    _excel.write_async('K_W_OBL',K_W_OBL.ref());
_table.TYP.VALUE:=K_FORM.TYP;
_table.F.VALUE:=K_FORM.memo_txt(,1,'F');
_result


\K_FORM_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.UD_SCH='' || _fld:='UD_SCH'
|? _table.UD_DEF='' || _fld:='UD_DEF'
|? _table.K_W_OBL='' || _fld:='K_W_OBL'
|? _table.TYP='' || _fld:='TYP'
|? _table.TYP='F' & _table.F='' || _fld:='F'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld);
   return()
?};
{? (_ud_typ:=exec('FindInSet','#table','UD_TYP','SYMBOL',_table.UD_TYP,,,1))=null
|| _result.msg_norec('UD_TYP');
   return()
|? (_ud_sch:=exec('FindInSet','#table','UD_SCH','SYMBOL',_table.UD_SCH,_ud_typ,,1))=null
|| _result.msg_norec('UD_SCH');
   return()
|? (_ud_def:=exec('FindInSet','#table','UD_DEF','SCHSYM',_table.UD_DEF,_ud_sch,,1))=null
|| _result.msg_norec('UD_DEF');
   return()
|? (_k_w_obl:=exec('FindInSet','#table','K_W_OBL','NAZ',_table.K_W_OBL,,,1))=null
|| _result.msg_norec('K_W_OBL');
   return()
?};
K_FORM.index('K_W_OBL');
K_FORM.prefix(_ud_def,_k_w_obl);
{? K_FORM.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? 'SWF'*_table.TYP=0
|| _result.msg_inset('TYP','S','W','F');
   return()
?};
_result.RESULT:=1;
{? _result.ACTION='add' || K_FORM.blank(1) ?};
K_FORM.UD_DEF:=_ud_def;
K_FORM.K_W_OBL:=_k_w_obl;
K_FORM.TYP:=_table.TYP;
{? _table.F<>''
|| K_FORM.memo_set(_table.F,'F')
?};
{? exec('chk_kfom','control',_result.ACTION='put',_table.F)<>''
|| _result.RESULT:=0
?};
~~


\K_FORM_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=K_FORM.add(1)
   |? _validate.ACTION='put'
   || _result:=K_FORM.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie definicji obliczeńnie powiodło się.'@
   || _validate.MSG:='Poprawa definicji obliczeń nie powiodła się.'@
   ?}
|| K_FORM.memo_put(,'F')
?};
_result


\K_WERSJE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='K_WERSJE';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FUNPAR:=exec('funpar_mod','xls_mbn');
_def.FILE:=exec('filename','xls_mbn');
_def.SHEET:='Wersje planów=1,1';
_def.NAME:='Wersje planów';
_def.DESC:='Wersje planów';
_def.MULTIFIR:='T';

_def.PREFIX:="K_WERSJE.index('SYM'); K_WERSJE.prefix()";
_def.TABLE:="K_WERSJE";
_def.FIELDS:="exec('K_WERSJE_fld','xls_mbn',_a)";

_def.BEFORE:="K_WERSJE.cntx_psh()";
_def.AFTER:="K_WERSJE.cntx_pop()";
_def.SELECT:="exec('K_WERSJE_select','xls_mbn',_a)";

_def.EXPORT:="exec('K_WERSJE_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('K_WERSJE_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('K_WERSJE_imp','xls_mbn',_a,_b,_c)";
~~


\K_WERSJE_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('SYM','Symbol',1,,'20 znakowy symbol planu');
_def.define('K_W_OBL','Wariant obliczeń',1,,'20 znakowy wariant obliczeń');
_def.define('OPIS','Opis',1,,'60 znakowy Opis wersji planu');
_def.define('CZY_KALK','Wersja kalkulowana',1,,'1 znakowy znacznik, czy wersja jest kalkulowana: T-tak, N-nie');
_def.define('MDX','Formuła',1,,'Psełdo formuła MDX na obliczenie wartości wersji');
~~


\K_WERSJE_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,
   'SYM','STRING[20]','Symbol',
   'OPIS','STRING[60]','Opis',
   'K_W_OBL','STRING[20]','Wariant obliczeń',
   'REF','STRING[16]','ref',
   'SELECTED','STRING[1]','sel'
);

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'SYM',,);

K_WERSJE.cntx_psh();
K_WERSJE.index('SYM'); K_WERSJE.prefix();
{? K_WERSJE.first()
|| {!
   |? _tab.blank(1);
      _tab.SYM:=K_WERSJE.SYM;
      _tab.OPIS:=K_WERSJE.OPIS;
      _tab.K_W_OBL:=K_WERSJE.K_W_OBL().NAZ;
      _tab.REF:=$K_WERSJE.ref();
      _tab.SELECTED:={? _selected.find_key(_tab.REF,) || 'T' || 'N' ?};
      _tab.add();
      K_WERSJE.next()
   !}
?};
K_WERSJE.cntx_pop();

_result:=exec('select_action','#table',_tab,'SYM[20],OPIS[60],K_W_OBL[20]',10,'Wybór wersji planów do eksportu',1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |? _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
_result


\K_WERSJE_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.SYM.VALUE:=K_WERSJE.SYM;
_table.K_W_OBL.VALUE:=K_WERSJE.K_W_OBL().NAZ; _excel.write_async('K_W_OBL',K_W_OBL.ref());
_table.OPIS.VALUE:=K_WERSJE.OPIS;
_table.CZY_KALK.VALUE:=K_WERSJE.CZY_KALK;
_table.MDX.VALUE:=K_WERSJE.memo_txt(,1,'MDX');
_result


\K_WERSJE_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.SYM='' || _fld:='SYM'
|? _table.CZY_KALK='' || _fld:='CZY_KALK'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld);
   return()
?};
K_WERSJE.index('SYM');
K_WERSJE.prefix(_table.SYM,);
{? K_WERSJE.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? 'TN'*_table.CZY_KALK=0
|| _result.msg_inset('CZY_KALK','T','N');
   return()
?};
{? _result.ACTION='add'
|| K_WERSJE.blank(1);
   K_WERSJE.CZY_SYS:='N'
?};
{? K_WERSJE.CZY_SYS='N'
|| {? _table.K_W_OBL=''
   || _result.msg_empty('K_W_OBL');
      return()
   |? _table.OPIS=''
   || _result.msg_empty('OPIS');
      return()
   ?}
?};
_result.RESULT:=1;
K_WERSJE.SYM:=_table.SYM;
K_WERSJE.K_W_OBL:={? _table.K_W_OBL<>'' || exec('FindInSet','#table','K_W_OBL','NAZ',_table.K_W_OBL,,,1) ?};
K_WERSJE.OPIS:=_table.OPIS;
{? K_WERSJE.CZY_SYS='N'
|| K_WERSJE.CZY_KALK:=_table.CZY_KALK;
   K_WERSJE.memo_set(_table.MDX,'MDX')
?};
{? exec('chk_k_wersje','control',_result.ACTION='put',_table.MDX)<>''
|| _result.RESULT:=0
?};
~~


\K_WERSJE_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=K_WERSJE.add(1)
   |? _validate.ACTION='put'
   || _result:=K_WERSJE.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie wersji %1 nie powiodło się.'@[_table.SYM]
   || _validate.MSG:='Poprawa wersji %1 nie powiodła się.'@[_table.SYM]
   ?}
|? K_WERSJE.CZY_SYS='N'
|| K_WERSJE.memo_put(,'MDX')
?};
_result


\K_ROLE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='K_ROLE';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FUNPAR:=exec('funpar_upr','xls_mbn');
_def.FILE:=exec('filename','xls_mbn');
_def.SHEET:='Zakres danych=1,1';
_def.NAME:='Zakres danych';
_def.DESC:='Zakres danych';

_def.PREFIX:="K_ROLE.index('NAZWA'); K_ROLE.prefix(REF.FIRMA)";
_def.TABLE:="K_ROLE";
_def.FIELDS:="exec('K_ROLE_fld','xls_mbn',_a)";

_def.BEFORE:="K_ROLE.cntx_psh()";
_def.AFTER:="K_ROLE.cntx_pop()";
_def.SELECT:="exec('K_ROLE_select','xls_mbn',_a)";

_def.EXPORT:="exec('K_ROLE_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('K_ROLE_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('K_ROLE_imp','xls_mbn',_a,_b,_c)";
~~


\K_ROLE_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('AREA','Obszar',1,,'3 znakowy obszar zakresu danych: CTR lub OBG');
_def.define('NAZWA','Nazwa',1,,'100 znakowa nazwa roli');
_def.define('TYPE','Typ',1,,'Znacznik czy uprawnienie dla \'O\'lap, \'Q\'sense czy o\'B\'iegów');
~~


\K_ROLE_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,
   'NAZWA','STRING[100]','Nazwa',

   'REF','STRING[16]','ref',
   'SELECTED','STRING[1]','sel'
);

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NAZWA',,);

K_ROLE.cntx_psh();
K_ROLE.index('TYPE'); K_ROLE.prefix(REF.FIRMA);
{? K_ROLE.first()
|| {!
   |? _tab.blank(1);
      _tab.NAZWA:=K_ROLE.NAZWA;

      _tab.REF:=$K_ROLE.ref();
      _tab.SELECTED:={? _selected.find_key(_tab.REF,) || 'T' || 'N' ?};
      _tab.add();
      K_ROLE.next()
   !}
?};
K_ROLE.cntx_pop();

_result:=exec('select_action','#table',_tab,'NAZWA[100]',10,'Wybór zakresu danych do eksportu',1);
{? _result>0
|| _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |? _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
_result


\K_ROLE_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.NAZWA.VALUE:=K_ROLE.NAZWA;
_table.TYPE.VALUE:=K_ROLE.TYPE;
_table.AREA.VALUE:=K_ROLE.AREA;

K_ROLE_D.cntx_psh();
K_ROLE_D.index('K_ROLE'); K_ROLE_D.prefix(K_ROLE.ref());
{? K_ROLE_D.first()
|| {!
   |? _excel.write_async('K_ROLE_D',K_ROLE_D.ref());
      K_ROLE_D.next()
   !}
?};
K_ROLE_D.cntx_pop();
K_ROLE_U.cntx_psh();
K_ROLE_U.index('K_ROLE'); K_ROLE_U.prefix(K_ROLE.ref());
{? K_ROLE_U.first()
|| {!
   |? _excel.write_async('K_ROLE_U',K_ROLE_U.ref());
      K_ROLE_U.next()
   !}
?};
K_ROLE_U.cntx_pop();
_result


\K_ROLE_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.AREA='' || _fld:='AREA'
|? _table.NAZWA='' || _fld:='NAZWA'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld); return()
?};
{? 'OQB'*_table.TYPE=0
|| _result.msg_inset('TYPE','O','Q','B'); return()
|? ',CTR,OBG,'*(','+_table.AREA+',')=0
|| _result.msg_inset('AREA','CTR','OBG'); return()
|? _table.AREA='CTR' & _table.TYPE='B'
|| _result.MSG:='Dla obszaru \'%1\' dozwolony jest typ: \'%2\'.'['CTR','OQ']
|? _table.AREA='OBG' & _table.TYPE<>'B'
|| _result.MSG:='Dla obszaru \'%1\' dozwolony jest typ: \'%2\'.'['OBG','B']
?};
K_ROLE.index('TYPE');
K_ROLE.prefix(REF.FIRMA,_table.TYPE,_table.NAZWA,);
{? K_ROLE.first()
|| {? _mode=0
   || return()
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _table.TYPE=''
|| _result.msg_empty('TYPE'); return()
?};
_result.RESULT:=1;
{? _result.ACTION='add' || K_ROLE.blank(1) ?};
K_ROLE.FIRMA:=REF.FIRMA;
K_ROLE.NAZWA:=_table.NAZWA;
K_ROLE.TYPE:=_table.TYPE;
K_ROLE.AREA:=_table.AREA;
~~


\K_ROLE_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=K_ROLE.add(1)
   |? _validate.ACTION='put'
   || _result:=K_ROLE.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie uprawnień do modelu nie powiodło się.'@
   || _validate.MSG:='Poprawa uprawnień do modelu nie powiodła się.'@
   ?}
?};
_result


\K_ROLE_U
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='K_ROLE_U';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_upr','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Użytkownicy zakresu danych=1,1';
_def.NAME:='Użytkownicy zakresu danych';
_def.DESC:='Użytkownicy zakresu danych';

_def.PREFIX:="K_ROLE_U.index('FIRMA'); K_ROLE_U.prefix(REF.FIRMA)";
_def.TABLE:="K_ROLE_U";
_def.FIELDS:="exec('K_ROLE_U_fld','xls_mbn',_a)";

_def.BEFORE:="K_ROLE_U.cntx_psh()";
_def.AFTER:="K_ROLE_U.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('K_ROLE_U_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('K_ROLE_U_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('K_ROLE_U_imp','xls_mbn',_a,_b,_c)";
~~


\K_ROLE_U_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('K_ROLE','Zakres danych',1,,'100 znakowa nazwa zakresu danych');
_def.define('TYPE','Typ',1,,'1 znakowy typ zakresu danych: O-olap, Q-qlicksense, B-obiegi');
_def.define('USERS','Użytkownik',1,,'10 znakowy kod użytkownika');
~~


\K_ROLE_U_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.TYPE.VALUE:=K_ROLE_U.K_ROLE().TYPE;     _excel.write_async('K_ROLE',K_ROLE_U.K_ROLE);
_table.K_ROLE.VALUE:=K_ROLE_U.K_ROLE().NAZWA;
_table.USERS.VALUE:=K_ROLE_U.USERS().KOD;      _excel.write_async('USERS',K_ROLE_U.USERS);
_result


\K_ROLE_U_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.TYPE='' || _fld:='TYPE'
|? _table.K_ROLE='' || _fld:='K_ROLE'
|? _table.USERS='' || _fld:='USERS'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld); return()
?};
{? 'OQB'*_table.TYPE=0
|| _result.msg_inset('TYPE','O','Q','B'); return()
|? (_k_role:=exec('FindInSet','#table','K_ROLE','TYPE',_table.K_ROLE,REF.FIRMA,,1,_table.TYPE))=null
|| _result.msg_norec('K_ROLE'); return()
?};
{? USERS.f_active() || USERS.f_clear() ?};
{? (_users:=exec('FindInSet','#table','USERS','USR_KKOD',_table.USERS,,,1))=null
|| _result.msg_norec('USERS'); return()
?};
K_ROLE_U.index('K_ROLE');
K_ROLE_U.prefix(_k_role,_table.USERS,);
{? K_ROLE_U.first()
|| return()
|| _result.ACTION:='add'
?};
K_ROLE_U.blank(1);
K_ROLE_U.K_ROLE:=_k_role;
K_ROLE_U.USERS:=_users;
_return:=0;
USERS.cntx_psh();
USERS.prefix();
{? USERS.seek(K_ROLE_U.USERS)
|| {? exec('user_has_pass','control')=0
   || _return:=1
   ?}
?};
USERS.cntx_pop();
{? _return || return() ?};
_result.RESULT:=1;
~~


\K_ROLE_U_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| _result:=K_ROLE_U.add(1)
?};
{? _result=0
|| _validate.MSG:='Dodanie zakresu danych: %1 użytkownikowi: %2 nie powiodło się.'@[_table.K_ROLE,_table.USERS]
?};
_result


\K_ROLE_D
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='K_ROLE_D';
_def.DOMAIN:=exec('name','#b_domain','CTR');
_def.FILE:=exec('filename','xls_mbn');
_def.FUNPAR:=exec('funpar_upr','xls_mbn');
_def.HIDDEN:='T';
_def.SHEET:='Definicja zakresu danych=1,1';
_def.NAME:='Definicja zakresu danych';
_def.DESC:='Definicja zakresu danych';

_def.PREFIX:="K_ROLE_D.index('FIRMA'); K_ROLE_D.prefix(REF.FIRMA)";
_def.TABLE:="K_ROLE_D";
_def.FIELDS:="exec('K_ROLE_D_fld','xls_mbn',_a)";

_def.BEFORE:="K_ROLE_D.cntx_psh()";
_def.AFTER:="K_ROLE_D.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('K_ROLE_D_exp','xls_mbn',_a,_b)";
_def.VALIDATE:="exec('K_ROLE_D_valid','xls_mbn',_a,_b,_c)";
_def.IMPORT:="exec('K_ROLE_D_imp','xls_mbn',_a,_b,_c)";
~~


\K_ROLE_D_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('K_ROLE','Zakres danych',1,,'100 znakowy zakres danych',2);
_def.define('TYPE','Typ zakresu danych',1,,'1 znakowy typ zakres danych: O-olap, Q-qlicksense, B-obiegi',2);
_def.define('SKID_MBN','Model danych',1,,'8 znakowy kod modelu danych',2);
_def.define('LP','Wymiar',1,,'Numer pozycji modelu danych',1);
_def.define('UD_SKL','Pozycja schematu danych',1,,'16 znakowy symbol pozycje schematu danych',2);
~~


\K_ROLE_D_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.K_ROLE.VALUE:=K_ROLE_D.K_ROLE().NAZWA;               _excel.write_async('K_ROLE',K_ROLE_D.K_ROLE);
_table.TYPE.VALUE:=K_ROLE_D.K_ROLE().TYPE;
_table.SKID_MBN.VALUE:=K_ROLE_D.SKID_MBP().SKID_MBN().KOD;
_table.LP.VALUE:=K_ROLE_D.SKID_MBP().LP;                    _excel.write_async('SKID_MBP',SKID_MBP.ref());
_table.UD_SKL.VALUE:=K_ROLE_D.UD_SKL().SYMBOL;              _excel.write_async('UD_SKL',UD_SKL.ref());
_result


\K_ROLE_D_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=0;
{? _table.K_ROLE='' || _fld:='K_ROLE'
|? _table.TYPE='' || _fld:='TYPE'
|? _table.SKID_MBN='' || _fld:='SKID_MBN'
|? _table.UD_SKL='' || _fld:='UD_SKL'
|| _fld:=''
?};
{? _fld<>''
|| _result.msg_empty(_fld); return()
?};
{? 'OQB'*_table.TYPE=0
|| _result.msg_inset('TYPE','O','Q','B'); return()
|? (_k_role:=exec('FindInSet','#table','K_ROLE','TYPE',_table.K_ROLE,REF.FIRMA,,1,_table.TYPE))=null
|| _result.msg_norec('K_ROLE'); return()
|? (_skid_mbn:=exec('FindInSet','#table','SKID_MBN','KOD',_table.SKID_MBN,,,1))=null
|| _result.msg_norec('SKID_MBN'); return()
|? (_skid_mbp:=exec('FindInSet','#table','SKID_MBP','LP',_table.LP,_skid_mbn))=null
|| _result.msg_norec('LP'); return()
?};
SKID_MBP.prefix();
SKID_MBP.seek(_skid_mbp);
_typ:=SKID_MBP.UD_SCH().UD_TYP;
{? (_ud_skl:=exec('FindInSet','#table','UD_SKL','SYMBOL',_table.UD_SKL,_typ,,1))=null
|| _result.msg_norec('UD_SKL'); return()
?};
K_ROLE_D.index('K_ROLE');
K_ROLE_D.prefix(_k_role,_skid_mbp,_ud_skl);
{? K_ROLE_D.first()
|| return()
|| _result.ACTION:='add'
?};
{? _result.ACTION='add' || K_ROLE_D.blank(1) ?};
K_ROLE_D.K_ROLE:=_k_role;
K_ROLE_D.SKID_MBP:=_skid_mbp;
K_ROLE_D.UD_SKL:=_ud_skl;
_result.RESULT:=1;
~~


\K_ROLE_D_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| _result:=K_ROLE_D.add(1)
?};
{? _result=0
|| _validate.MSG:='Dodanie definicji zakresu danych %1 nie powiodło się.'[_table.K_ROLE]
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:12 3fa090c60a04d7dddc0e484cc4b84719e670fcde2956af97a79b0dbcd15a226eaf4a355604375ad4ef8a110ca689bbdcface2f4abe15e0445a1b294efb574b3a6d48a5cb9bb640c2639cd1f7130cb2f656afbe5ef0b75da00cbd09ba18da657229a3f573d5aeed9cae3bc5ba959b4854fdf620590d8f9e9d110d56c268125092
