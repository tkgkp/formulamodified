:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_synchro.fml
:: Utworzony: 31.07.2018
:: Autor: [rr]
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu mechanizmu wymiany danych z innymi systemami
::======================================================================================================================


\init_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SYNC_PD';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_PAR_DOK_SYNCHRO';
_def.MULTIFIR:='T';

_def.FILE:='wymiana_danych.xlsx';
_def.SHEET:='Wym.danych-przeznaczenie=1,1';
_def.NAME:='Wymiana danych - Przeznaczenie'@;
_def.DESC:='Wymiana danych - Przeznaczenie'@;

_def.PREFIX:="exec('prefix_pd','xls_synchro')";
_def.TABLE:="exec('table_pd','xls_synchro')";
_def.FIELDS:="exec('fields_pd','xls_synchro',_a)";

_def.BEFORE:="SYNC_PD.cntx_psh()";
_def.AFTER:="SYNC_PD.cntx_pop()";
_def.SELECT:="exec('select_pd','xls_synchro',_a)";

_def.EXPORT:="exec('export_pd','xls_synchro',_a,_b)";
_def.IMPORT:="exec('import_pd','xls_synchro',_a,_b,_c)";
_def.VALIDATE:="exec('validate_pd','xls_synchro',_a,_b,_c)";
~~


\prefix_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa zakres eksportowanych danych
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
SYNC_PD.index('SYM');
SYNC_PD.prefix();
~~


\table_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
SYNC_PD


\fields_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('SYM','Symbol',0,,exec('hint_pd','xls_synchro'));
_def.define('RODZAJ','Rodzaj danych',0,,
'Rodzaj danych:
I - Komunikacja z innymi systemami
R - Raportowanie
M - Magazyn mobilny
');
~~


\record_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

SYNC_PD.index('SYM');
SYNC_PD.prefix();
{? _validate.ACTION='add'
||
   SYNC_PD.blank();
   SYNC_PD.SYM:=_obj.SYM
?};

SYNC_PD.RODZAJ:=_obj.RODZAJ;
~~


\export_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.SYM.VALUE:=SYNC_PD.SYM;
_table.RODZAJ.VALUE:=SYNC_PD.RODZAJ;
_result


\validate_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
{? ~(+_obj.SYM)              || _result.msg_empty('SYM'); _result.RESULT:=0 ?};
{? ~(+_obj.RODZAJ)           || _result.msg_empty('RODZAJ'); _result.RESULT:=0
|? ~((';IRM'*_obj.RODZAJ)>1) || _result.msg_inset('RODZAJ','I','R','M'); _result.RESULT:=0
?};

{? _result.RESULT=1
||
   SYNC_PD.index('SYM');
   SYNC_PD.prefix(_obj.SYM,);
   {? SYNC_PD.first()
   || {? _mode=0
      || _result.ACTION:='nothing'
      || _result.ACTION:='put';
         exec('record_pd','xls_synchro',_obj,_mode,_result)
      ?}
   || _result.ACTION:='add';
      exec('record_pd','xls_synchro',_obj,_mode,_result)
   ?}
?};
~~


\import_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SYNC_PD.add(1)
   |? _validate.ACTION='put'
   || _result:=SYNC_PD.put(1)
   |? _validate.ACTION='nothing'
   || _result:=1
   ?}
?};
{? _result=0
|| _validate.MSG:={? _validate.ACTION='add'
                  || 'Dodanie przeznaczenia danych %1 nie powiodło się.'@[SYNC_PD.SYM]
                  || 'Modyfikacja przeznaczenia danych %1 nie powiodła się.'@[SYNC_PD.SYM]
                  ?}
|? _result & exec('FindInSet','#table','SYNC_DEF','TREE',SYNC_PD.SYM,null(),,1,,null())=null()
|| SYNC_DEF.cntx_psh();
   SYNC_DEF.prefix();
   SYNC_DEF.blank();
   SYNC_DEF.REKORD:=null();
   SYNC_DEF.SYNC_PD:=SYNC_PD.ref();
   _result:=SYNC_DEF.add(1);
   SYNC_DEF.cntx_pop()
?};
_result


\select_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,'SYM','STRING[20]','Przeznaczenie danych'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'RODZAJ','STRING[1]','Rodzaj');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'SYM',,);

SYNC_PD.cntx_psh();
SYNC_PD.index('SYM');
SYNC_PD.prefix();
{? SYNC_PD.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$SYNC_PD.ref();
      _selected.prefix($SYNC_PD.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.SYM:=SYNC_PD.SYM;
      _tab.RODZAJ:=SYNC_PD.RODZAJ;
      _tab.add();
      SYNC_PD.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'SYM,RODZAJ',20,'Wybór przeznaczenia danych do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SYNC_PD.cntx_pop();
_result


\init_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - SYNC_PD.SYM albo puste
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};

_def:=_a;
{? _pd=''
|| _def.ID:='SYNC_DEF'
|| _def.ID:='SYNC_DEF_'+_pd
?};
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_PAR_DOK_SYNCHRO';
_def.MULTIFIR:='T';

{? _pd=''
|| _def.FILE:='wymiana_danych.xlsx'
|| _def.FILE:='wymiana_danych_'+_pd+'.xlsx'
?};
_def.SHEET:='Wym.danych-definicja=1,1';
_def.NAME:='Wymiana danych - Definicja'@;
_def.DESC:='Wymiana danych - Definicja'@;
{? _pd<>''
|| _def.NAME:=_def.NAME+' '+_pd;
   _def.DESC:=_def.DESC+' '+_pd
?};

{? _pd=''
|| _def.PREFIX:="exec('prefix_def','xls_synchro')"
|| _def.PREFIX:=$("exec('prefix_def','xls_synchro',"+'\''+_pd+'\''+")")
?};
_def.TABLE:="exec('table_def','xls_synchro')";
_def.FIELDS:="exec('fields_def','xls_synchro',_a)";

_def.BEFORE:=$("exec('before_def','xls_synchro',_a,"+'\''+_pd+'\''+")");
_def.AFTER:=$("exec('after_def','xls_synchro',_a,"+'\''+_pd+'\''+")");
{? _pd=''
|| _def.SELECT:="exec('select_def','xls_synchro',_a)"
|| _def.SELECT:=$("exec('select_def','xls_synchro',_a,"+'\''+_pd+'\''+")")
?};

{? _pd=''
|| _def.EXPORT:="exec('export_def','xls_synchro',_a,_b,1)"
|| _def.EXPORT:="exec('export_def','xls_synchro',_a,_b)"
?};
_def.IMPORT:="exec('import_def','xls_synchro',_a,_b,_c)";
_def.VALIDATE:="exec('validate_def','xls_synchro',_a,_b,_c)";
~~


\prefix_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa zakres eksportowanych danych
::   WE: _a - SYNC_PD.SYM albo puste
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd_sym:='';
{? var_pres('_a')=type_of('')
|| _pd_sym:=_a
?};
SYNC_DEF.index('PDNR1');
{? _pd_sym=''
|| SYNC_DEF.prefix()
|| SYNC_DEF.prefix(_pd_sym,)
?};
~~


\table_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
SYNC_DEF


\fields_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('SYNC_PD','Przeznaczenie danych',0,,exec('hint_pd','xls_synchro'));
_def.define('ACR_TAB','Akronim tabeli',0,,'Akronim tabeli - 8 znaków');
_def.define('ACR_FLD','Akronim pola',0,,'Akronim pola - 8 znaków');
_def.define('FORM','Formuła',1,,'Formuła zwracająca wartość pola');
_def.define('AKT','Aktywne',1,,'Czy definicja jest aktywna? - (T/N)');
_def.define('LP','Numer pola',1,,'Numer pola',,0);
_def.define('TYP','Typ danych',1,,
'Typ danych:
(S) - tekst
(N) - liczba
(D) - data
(T) - czas
');
_def.define('FIR','Czy dla firmy',1,,'Czy dane dotyczą firmy lub czy są wspólne? (T/N)');
_def.define('WAR_FORM','Warunek zmian',1,,'Warunek decyduje o zapisie');
_def.define('FLD_REP','Pole replikacji',1,,'Akronim pola oznaczającego numer replikacji');
_def.define('TR_ADD','Trigger dodania',1,,'Czy włączony trigger dodawania? (T/N)');
_def.define('TR_PUT','Trigger modyfikacji',1,,'Czy włączony trigger modyfikacji? (T/N)');
_def.define('TR_DEL','Trigger usunięcia',1,,'Czy włączony trigger usunięcia? (T/N)');
_def.define('FLD_UPR','Uprawnienia do pola',1,,'Kontrola uprawnień do pola');
_def.define('LABEL','Etykieta',1,,'Etykieta pola dla ES');
_def.define('LBL_KOL','Kolor',1,,'Kolor zakładki wyników wyszukiwania ES');
_def.define('REF_TAB','Tabela dołączona',1,,'Tabela dołączona do indeksu w ES');
_def.define('REF_FLD','Wartość klucza',1,,'Formuła zwracająca wartość pola klucza');
_def.define('LBL_TAB','Etykieta tabeli',1,,'Etykieta tabeli w wynikach ES');
_def.define('WGIDPUT','Dane wg IDPUT',1,,'Czy pobierać dane wg znacznika modyfikacji rekordu');
~~


\before_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: ISTDEF - before
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - przeznaczenie danych
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_pd:=_b;
{? _env.is_import() & _pd<>''
||
   __SYNC_DEF:=tab_tmp(1
      ,'REF','STRING[16]','$ISTDEF.ref()'
      ,'CRC','INTEGER','Akronim tabeli'
   );
   __RESET:=tab_tmp(1
      ,'ACR','STRING[8]','Akronim tabeli'
      ,'NULL','STRING[1]','Reset niepotrzebny bo nowe przeznaczenie danych'
   );
   _sync_pd:=exec('FindInSet','#table','SYNC_PD','SYM',_pd,,,1,,null());
   SYNC_DEF.cntx_psh();
   SYNC_DEF.index('PD');
   SYNC_DEF.prefix(_sync_pd);
   {? SYNC_DEF.first() & ~SYNC_DEF.next()
   ||
:: brak definicji więc niepotrzebne sprawdzenie czy została zmodyfikowana
      __RESET.blank();
      __RESET.NULL:='T';
      __RESET.add()
   ?};
   SYNC_DEF.cntx_pop()
?};
SYNC_DEF.cntx_psh()


\after_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: ISTDEF - after
::   WE:  _a - obj_new - środowisko mechanizmu
::       _b - przeznaczenie danych
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_pd:=_b;
{? _env.is_import() & _pd<>''
      &
   __RESET.first() & __RESET.NULL=''
||
   _sync_pd:=exec('FindInSet','#table','SYNC_PD','SYM',_pd,,,1,,null());
   _overwrite:=_env.excel.IMP_MODE=1;
:: Usunięcie brakujących definicji
   {? _overwrite
   ||
      SYNC_DEF.cntx_psh();
      SYNC_DEF.index('PD');
      SYNC_DEF.prefix(_sync_pd);
      _loop:=SYNC_DEF.first();
      {!
      |? _loop
      |!
         _del:=0;
         {? SYNC_DEF.ACR_TAB<>'' & ~__SYNC_DEF.find_key($SYNC_DEF.ref())
         ||
            _del:=1;
            {? ~__RESET.find_key(SYNC_DEF.ACR_TAB,)
            ||
               __RESET.blank();
               __RESET.ACR:=SYNC_DEF.ACR_TAB;
               __RESET.add()
            ?}
         ?};
         _loop:={? _del || SYNC_DEF.del() || SYNC_DEF.next()  ?}
      !};
      SYNC_DEF.cntx_pop()
   ?};
:: Reset znacznika synchronizacji
   _ndx:=SYNCNIDP.ndx_tmp(,,'SYNC_PD',,,'ACR',,);
   _maski:=SYNC.names();
   _loop:=__RESET.first();
   {!
   |? _loop
   |!
:: usunięcie SYNC
      {? _maski.first()
      ||
         {!
         |?
            SYNC.use(_maski[1]);
            SYNC.index('SYNC_PD');
            SYNC.prefix(_sync_pd,__RESET.ACR);
            {? SYNC.first() || {! |? SYNC.del() !} ?};
            _maski.next()
         !}
      ?};
:: usunięcie SYNC_IDP
      SYNCNIDP.cntx_psh();
      SYNCNIDP.index(_ndx);
      SYNCNIDP.prefix(_sync_pd,__RESET.ACR,);
      _loop:=SYNCNIDP.first();
      {!
      |? _loop
      |!
         _loop:=SYNCNIDP.del()
      !};
      SYNCNIDP.cntx_pop();
      _loop:=__RESET.next()
   !};
   SYNCNIDP.ndx_drop(_ndx)
?};
VAR_DEL.delete('__SYNC_DEF','__RESET');
SYNC_DEF.cntx_pop()


\record_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

SYNC_DEF.index('PDNR');
SYNC_DEF.prefix();
{? _validate.ACTION='add'
||
   SYNC_DEF.blank();
   SYNC_DEF.REKORD:=_validate.OBJ.REKORD;
   SYNC_DEF.SYNC_PD:=_validate.OBJ.SYNC_PD;
   SYNC_DEF.ACR_TAB:=_obj.ACR_TAB;
   SYNC_DEF.LP:=_obj.LP
?};

SYNC_DEF.ACR_FLD:=_obj.ACR_FLD;
SYNC_DEF.FORM:=_obj.FORM;
SYNC_DEF.AKT:=_obj.AKT;
SYNC_DEF.TYP:=_obj.TYP;
SYNC_DEF.FIR:=_obj.FIR;
SYNC_DEF.WAR_FORM:=_obj.WAR_FORM;
SYNC_DEF.FLD_REP:=_obj.FLD_REP;
SYNC_DEF.TR_ADD:=_obj.TR_ADD;
SYNC_DEF.TR_PUT:=_obj.TR_PUT;
SYNC_DEF.TR_DEL:=_obj.TR_DEL;
SYNC_DEF.FLD_UPR:=_obj.FLD_UPR;
SYNC_DEF.LABEL:=_obj.LABEL;
SYNC_DEF.LBL_KOL:=_obj.LBL_KOL;
SYNC_DEF.REF_TAB:=_obj.REF_TAB;
SYNC_DEF.REF_FLD:=_obj.REF_FLD;
SYNC_DEF.LBL_TAB:=_obj.LBL_TAB;
SYNC_DEF.WGIDPUT:=_obj.WGIDPUT;
~~


\export_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::       _c - czy sprawdzać brak przeznaczenia w tablicy __PD_STALE
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_spr_pd_stale:=0;
{? var_pres('_c')=type_of(0)
|| _spr_pd_stale:=_c
?};

_result:=1;
_pd:=SYNC_DEF.SYNC_PD().SYM;
{? SYNC_DEF.REKORD<>null() & _pd <> '' & (~_spr_pd_stale | exec('pd_stale_nr','xls_synchro',_pd)=0)
|| _table.SYNC_PD.VALUE:=SYNC_DEF.SYNC_PD().SYM; _excel.write_async('SYNC_PD',SYNC_DEF.SYNC_PD);
   _table.ACR_TAB.VALUE:=SYNC_DEF.ACR_TAB;
   _table.LP.VALUE:=SYNC_DEF.LP;
   _table.ACR_FLD.VALUE:=SYNC_DEF.ACR_FLD;
   _table.FORM.VALUE:=SYNC_DEF.FORM;
   _table.AKT.VALUE:=SYNC_DEF.AKT;
   _table.TYP.VALUE:=SYNC_DEF.TYP;
   _table.FIR.VALUE:=SYNC_DEF.FIR;
   _table.WAR_FORM.VALUE:=SYNC_DEF.WAR_FORM;
   _table.FLD_REP.VALUE:=SYNC_DEF.FLD_REP;
   _table.TR_ADD.VALUE:=SYNC_DEF.TR_ADD;
   _table.TR_PUT.VALUE:=SYNC_DEF.TR_PUT;
   _table.TR_DEL.VALUE:=SYNC_DEF.TR_DEL;
   _table.FLD_UPR.VALUE:=SYNC_DEF.FLD_UPR;
   _table.LABEL.VALUE:=SYNC_DEF.LABEL;
   _table.LBL_KOL.VALUE:=SYNC_DEF.LBL_KOL;
   _table.REF_TAB.VALUE:=SYNC_DEF.REF_TAB;
   _table.REF_FLD.VALUE:=SYNC_DEF.REF_FLD;
   _table.LBL_TAB.VALUE:=SYNC_DEF.LBL_TAB;
   _table.WGIDPUT.VALUE:=SYNC_DEF.WGIDPUT
|| _result:=0
?};
_result


\validate_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('SYNC_PD','REKORD');

_result.OBJ.SYNC_PD:={? _obj.SYNC_PD=''
                     || null()
                     || exec('FindInSet','#table','SYNC_PD','SYM',_obj.SYNC_PD,,,1,,null())
                     ?};
{? _result.OBJ.SYNC_PD=null()
|| _result.MSG:='Nie znaleziono przeznaczenia danych %1.'@[_obj.SYNC_PD];
   _result.RESULT:=0
|| _result.OBJ.REKORD:=exec('FindInSet','#table','SYNC_DEF','TREE',_obj.SYNC_PD,null(),,1,,null());
   {? _result.OBJ.REKORD=null()
   || _result.MSG:='Nie znaleziono rekordu nadrzędnego przeznaczenia danych %1.'@[_obj.SYNC_PD];
      _result.RESULT:=0
   ?}
?};

{? (+_obj.AKT)<>1 | ~((';TN'*_obj.AKT)>1) || _result.msg_inset('AKT','T','N'); _result.RESULT:=0 ?};
{? (+_obj.FIR)<>1 | ~((';TNF'*_obj.FIR)>1) || _result.msg_inset('FIR','T','N','F'); _result.RESULT:=0 ?};
{? (+_obj.TYP)<>1 | ~((';SNDTBM'*_obj.TYP)>1) || _result.msg_inset('TYP','S','N','D','T'); _result.RESULT:=0 ?};
{? (+_obj.TR_ADD)<>1 | ~((';TN'*_obj.TR_ADD)>1) || _result.msg_inset('TR_ADD','T','N'); _result.RESULT:=0 ?};
{? (+_obj.TR_PUT)<>1 | ~((';TN'*_obj.TR_PUT)>1) || _result.msg_inset('TR_PUT','T','N'); _result.RESULT:=0 ?};
{? (+_obj.TR_DEL)<>1 | ~((';TN'*_obj.TR_DEL)>1) || _result.msg_inset('TR_DEL','T','N'); _result.RESULT:=0 ?};
{? (+_obj.WGIDPUT)<>1 | ~((';TN'*_obj.WGIDPUT)>1) || _result.msg_inset('WGIDPUT','T','N'); _result.RESULT:=0 ?};

{? _result.RESULT=1
||
   SYNC_DEF.index('PDNR');
   SYNC_DEF.prefix(_result.OBJ.SYNC_PD,_obj.ACR_TAB,_obj.LP);
   {? SYNC_DEF.first()
   ||
      {? var_pres('__SYNC_DEF')>100
      ||
:: crc rekordu przed zmianą
         __SYNC_DEF.blank(); __SYNC_DEF.REF:=$SYNC_DEF.ref(); __SYNC_DEF.CRC:=SYNC_DEF.crc();
         __SYNC_DEF.add()
      ?};
      {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record_def','xls_synchro',_obj,_mode,_result);
         {? exec('chksync_def','synchro',_result.ACTION)<>'' || _result.RESULT:=0 ?}
      ?}
   || _result.ACTION:='add';
      exec('record_def','xls_synchro',_obj,_mode,_result);
      {? exec('chksync_def','synchro',_result.ACTION)<>'' || _result.RESULT:=0 ?}
   ?}
?};
~~


\import_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SYNC_DEF.add(1);
      {? _result & var_pres('__SYNC_DEF')>100 & (~__RESET.first() | __RESET.NULL='')
      ||
         __SYNC_DEF.blank(); __SYNC_DEF.REF:=$SYNC_DEF.ref();
         {? __SYNC_DEF.add()
         ||
            {? ~__RESET.find_key(SYNC_DEF.ACR_TAB) || __RESET.blank(); __RESET.ACR:=SYNC_DEF.ACR_TAB; __RESET.add() ?}
         ?}
      ?}
   |? _validate.ACTION='put'
   ||
:: crc rekordu po zmianie
      _crc:=SYNC_DEF.crc();
      _result:=SYNC_DEF.put(1);
      {? var_pres('__SYNC_DEF')>100
            &
         __SYNC_DEF.find_key($SYNC_DEF.ref()) & __SYNC_DEF.CRC<>_crc
      ||
         {? ~__RESET.find_key(SYNC_DEF.ACR_TAB) || __RESET.blank(); __RESET.ACR:=SYNC_DEF.ACR_TAB; __RESET.add() ?}
      ?}
   ?}
?};
{? _result=0
|| _validate.MSG:={? _validate.ACTION='add'
                  || 'Dodanie definicji dla danych nie powiodło się.'@
                  || 'Modyfikacja definicji dla danych nie powiodła się.'@
                  ?}
?};
_result


\select_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - SYNC_PD.SYM albo puste
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};
_npd:=exec('pd_stale_nr','xls_synchro',_pd);

_result:=0;

_tab:=tab_tmp(3,'SYNC_PD','STRING[20]','Przeznaczenie danych'
   ,'ACR_TAB','STRING[8]','Akronim tabeli'
   ,'LP','INTEGER','Lp'
   ,'ACR_FLD','STRING[20]','Akronim pola'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'FORM','STRING[255]','Formuła pola');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'SYNC_PD',,,'ACR_TAB',,,'LP',,);

SYNC_PD.cntx_psh();
SYNC_DEF.cntx_psh();
SYNC_DEF.index('TREE');
SYNC_DEF.prefix();
{? SYNC_DEF.first()
|| {!
   |?
      {? SYNC_DEF.REKORD<>null() & SYNC_DEF.SYNC_PD().SYM<>''
         & exec('pd_stale_nr','xls_synchro',SYNC_DEF.SYNC_PD().SYM)=_npd
      || _tab.blank();
         _tab.REF:=$SYNC_DEF.ref();
         _selected.prefix($SYNC_DEF.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.SYNC_PD:=SYNC_DEF.SYNC_PD().SYM;
         _tab.ACR_TAB:=SYNC_DEF.ACR_TAB;
         _tab.ACR_FLD:=SYNC_DEF.ACR_FLD;
         _tab.LP:=SYNC_DEF.LP;
         _tab.FORM:=SYNC_DEF.FORM;
         _tab.add()
      ?};
      SYNC_DEF.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'SYNC_PD,ACR_TAB,LP,ACR_FLD,FORM',20,'Wybór definicji dla przeznaczenia danych do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SYNC_PD.cntx_pop();
SYNC_DEF.cntx_pop();
_result


\init_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - SYNC_PD.SYM
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};

_def:=_a;
{? _pd=''
|| _def.ID:='SYNC_FLD'
|| _def.ID:='SYNC_FLD_'+_pd
?};
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_PAR_DOK_SYNCHRO';
_def.MULTIFIR:='T';

{? _pd=''
|| _def.FILE:='wymiana_danych.xlsx'
|| _def.FILE:='wymiana_danych_'+_pd+'.xlsx'
?};
_def.SHEET:='Wym.danych-pola zmian=1,1';
_def.NAME:='Wymiana danych - Pola, których zmiana wpływa na synchronizację'@;
_def.DESC:='Wymiana danych - Pola, których zmiana wpływa na synchronizację'@;

{? _pd=''
|| _def.PREFIX:="exec('prefix_fld','xls_synchro')"
|| _def.PREFIX:=$("exec('prefix_fld','xls_synchro',"+'\''+_pd+'\''+")")
?};
_def.TABLE:="exec('table_fld','xls_synchro')";
_def.FIELDS:="exec('fields_fld','xls_synchro',_a)";

_def.BEFORE:="SYNC_FLD.cntx_psh()";
_def.AFTER:="SYNC_FLD.cntx_pop()";
{? _pd=''
|| _def.SELECT:="exec('select_fld','xls_synchro',_a)"
|| _def.SELECT:=$("exec('select_fld','xls_synchro',_a,"+'\''+_pd+'\''+")")
?};

{? _pd=''
|| _def.EXPORT:="exec('export_fld','xls_synchro',_a,_b,1)"
|| _def.EXPORT:="exec('export_fld','xls_synchro',_a,_b)"
?};
_def.IMPORT:="exec('import_fld','xls_synchro',_a,_b,_c)";
_def.VALIDATE:="exec('validate_fld','xls_synchro',_a,_b,_c)";
~~


\prefix_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa zakres eksportowanych danych
::   WE: _a - SYNC_PD.SYM albo puste
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd_sym:='';
{? var_pres('_a')=type_of('')
|| _pd_sym:=_a
?};
SYNC_FLD.index('TAB1');
{? _pd_sym=''
|| SYNC_FLD.prefix()
|| SYNC_FLD.prefix(_pd_sym,)
?};
~~


\table_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
SYNC_FLD


\fields_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('SYNC_PD','Przeznaczenie danych',0,,exec('hint_pd','xls_synchro'));
_def.define('ACR_TAB','Akronim tabeli',0,,'Akronim tabeli - 8 znaków');
_def.define('ACR_FLD','Akronim pola',0,,'Akronim pola - 8 znaków');
_def.define('AKT','Aktywne',1,,'Czy aktywne zapisywanie zmian? - (T/N)');
~~


\record_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

SYNC_FLD.index('NR');
SYNC_FLD.prefix();
{? _validate.ACTION='add'
||
   SYNC_FLD.blank();
   SYNC_FLD.SYNC_PD:=_validate.OBJ.SYNC_PD;
   SYNC_FLD.ACR_TAB:=_obj.ACR_TAB;
   SYNC_FLD.ACR_FLD:=_obj.ACR_FLD
?};

SYNC_FLD.AKT:=_obj.AKT;
~~


\export_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::       _c - czy sprawdzać brak przeznaczenia w tablicy __PD_STALE
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_spr_pd_stale:=0;
{? var_pres('_c')=type_of(0)
|| _spr_pd_stale:=_c
?};

_result:=1;

_pd:=SYNC_FLD.SYNC_PD().SYM;
_akt:=SYNC_FLD.AKT;
{? _pd<>'' & (~_spr_pd_stale | exec('pd_stale_nr','xls_synchro',_pd)=0) & (_akt='N' | _akt='T')
|| _wgidput:='';
   SYNC_DEF.cntx_psh();
   SYNC_DEF.index('PDACR');
   SYNC_DEF.prefix(SYNC_FLD.SYNC_PD,SYNC_FLD.ACR_TAB,SYNC_FLD.ACR_TAB,);
   {? SYNC_DEF.first()
   || _wgidput:=SYNC_DEF.WGIDPUT
   ?};
   SYNC_DEF.cntx_pop();
   {? _wgidput='N'
   || _table.SYNC_PD.VALUE:=SYNC_FLD.SYNC_PD().SYM; _excel.write_async('SYNC_PD',SYNC_FLD.SYNC_PD);
      _table.ACR_TAB.VALUE:=SYNC_FLD.ACR_TAB;
      _table.ACR_FLD.VALUE:=SYNC_FLD.ACR_FLD;
      _table.AKT.VALUE:=SYNC_FLD.AKT
   || _result:=0
   ?}
|| _result:=0
?};
_result


\validate_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('SYNC_PD');

_result.OBJ.SYNC_PD:={? _obj.SYNC_PD=''
                     || null()
                     || exec('FindInSet','#table','SYNC_PD','SYM',_obj.SYNC_PD,,,1,,null())
                     ?};
{? _result.OBJ.SYNC_PD=null()
|| _result.MSG:='Nie znaleziono przeznaczenia danych %1.'@[_obj.SYNC_PD];
   _result.RESULT:=0
?};
{? (+_obj.AKT)<>1 | ~((';TN'*_obj.AKT)>1) || _result.msg_inset('AKT','T','N'); _result.RESULT:=0 ?};

{? _result.RESULT=1
||
   SYNC_FLD.index('TAB');
   SYNC_FLD.prefix(_result.OBJ.SYNC_PD,_obj.ACR_TAB,_obj.ACR_FLD,);
   {? SYNC_FLD.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record_fld','xls_synchro',_obj,_mode,_result)
      ?}
   || _result.ACTION:='add';
      exec('record_fld','xls_synchro',_obj,_mode,_result)
   ?}
?};
~~


\import_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SYNC_FLD.add(1)
   |? _validate.ACTION='put'
   || _result:=SYNC_FLD.put(1)
   ?}
?};
{? _result=0
|| _validate.MSG:={? _validate.ACTION='add'
                  || 'Dodanie zmian pól dla danych nie powiodło się.'@
                  || 'Modyfikacja zmian pól dla danych nie powiodła się.'@
                  ?}
?};
_result


\select_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - SYNC_PD.SYM albo puste
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};
_npd:=exec('pd_stale_nr','xls_synchro',_pd);

_result:=0;

_tab:=tab_tmp(3,'SYNC_PD','STRING[20]','Przeznaczenie danych'
   ,'ACR_TAB','STRING[8]','Akronim tabeli'
   ,'NR','INTEGER','Numer'
   ,'ACR_FLD','STRING[20]','Akronim pola'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'SYNC_PD',,,'ACR_TAB',,,'NR',,);

SYNC_PD.cntx_psh();
SYNC_FLD.cntx_psh();
SYNC_FLD.index('NR');
SYNC_FLD.prefix();
{? SYNC_FLD.first()
|| {!
   |? {? SYNC_FLD.SYNC_PD().SYM<>'' & exec('pd_stale_nr','xls_synchro',SYNC_FLD.SYNC_PD().SYM)=_npd
      || _tab.blank();
         _tab.REF:=$SYNC_FLD.ref();
         _selected.prefix($SYNC_FLD.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.SYNC_PD:=SYNC_FLD.SYNC_PD().SYM;
         _tab.ACR_TAB:=SYNC_FLD.ACR_TAB;
         _tab.ACR_FLD:=SYNC_FLD.ACR_FLD;
         _tab.NR:=SYNC_FLD.NR;
         _tab.add()
      ?};
      SYNC_FLD.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'SYNC_PD,ACR_TAB,ACR_FLD,NR',20,'Wybór zmian pól dla przeznaczenia danych do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SYNC_PD.cntx_pop();
SYNC_FLD.cntx_pop();
_result


\init_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - SYNC_PD.SYM
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};

_def:=_a;
{? _pd=''
|| _def.ID:='SYNC_FIR'
|| _def.ID:='SYNC_FIR_'+_pd
?};
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_PAR_DOK_SYNCHRO';
_def.MULTIFIR:='T';

{? _pd=''
|| _def.FILE:='wymiana_danych.xlsx'
|| _def.FILE:='wymiana_danych_'+_pd+'.xlsx'
?};
_def.SHEET:='Wym.danych-firmy zmian=1,1';
_def.NAME:='Wymiana danych - Firmy, dla których mają być rejestrowane zmiany'@;
_def.DESC:='Wymiana danych - Firmy, dla których mają być rejestrowane zmiany'@;

{? _pd=''
|| _def.PREFIX:="exec('prefix_fir','xls_synchro')"
|| _def.PREFIX:=$("exec('prefix_fir','xls_synchro',"+'\''+_pd+'\''+")")
?};
_def.TABLE:="exec('table_fir','xls_synchro')";
_def.FIELDS:="exec('fields_fir','xls_synchro',_a)";

_def.BEFORE:="SYNC_FIR.cntx_psh()";
_def.AFTER:="SYNC_FIR.cntx_pop()";
{? _pd=''
|| _def.SELECT:="exec('select_fir','xls_synchro',_a)"
|| _def.SELECT:=$("exec('select_fir','xls_synchro',_a,"+'\''+_pd+'\''+")")
?};

{? _pd=''
|| _def.EXPORT:="exec('export_fir','xls_synchro',_a,_b,1)"
|| _def.EXPORT:="exec('export_fir','xls_synchro',_a,_b)"
?};
_def.IMPORT:="exec('import_fir','xls_synchro',_a,_b,_c)";
_def.VALIDATE:="exec('validate_fir','xls_synchro',_a,_b,_c)";
~~


\prefix_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa zakres eksportowanych danych
::   WE: _a - SYNC_PD.SYM albo puste
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd_sym:='';
{? var_pres('_a')=type_of('')
|| _pd_sym:=_a
?};
SYNC_FIR.index('PDTAC');
{? _pd_sym=''
|| SYNC_FIR.prefix()
|| SYNC_FIR.prefix(_pd_sym,)
?};
~~


\table_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
SYNC_FIR


\fields_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('SYNC_PD','Przeznaczenie danych',0,,exec('hint_pd','xls_synchro'));
_def.define('ACR_TAB','Akronim tabeli',0,,'Akronim tabeli - 8 znaków');
_def.define('FIRMA','Symbol firmy',0,,'Symbol firmy - 4 znaki');
~~


\record_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

SYNC_FIR.index('S1');
SYNC_FIR.prefix();
{? _validate.ACTION='add'
||
   SYNC_FIR.blank();
   SYNC_FIR.PD:=_validate.OBJ.SYNC_PD;
   SYNC_FIR.ACR_TAB:=_obj.ACR_TAB
?};

SYNC_FIR.FIRMA:=_validate.OBJ.FIRMA;
~~


\export_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::       _c - czy sprawdzać brak przeznaczenia w tablicy __PD_STALE
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_spr_pd_stale:=0;
{? var_pres('_c')=type_of(0)
|| _spr_pd_stale:=_c
?};

_result:=1;
_pd:=SYNC_FIR.PD().SYM;
{? _pd<>'' & (~_spr_pd_stale | exec('pd_stale_nr','xls_synchro',_pd)=0)
|| _table.SYNC_PD.VALUE:=SYNC_FIR.PD().SYM; _excel.write_async('SYNC_PD',SYNC_FIR.PD);
   _table.ACR_TAB.VALUE:=SYNC_FIR.ACR_TAB;
   _table.FIRMA.VALUE:=SYNC_FIR.FIRMA().SYMBOL
|| _result:=0
?};
_result


\validate_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('SYNC_PD','FIRMA');

_result.OBJ.SYNC_PD:={? _obj.SYNC_PD=''
                     || null()
                     || exec('FindInSet','#table','SYNC_PD','SYM',_obj.SYNC_PD,,,1,,null())
                     ?};
{? _result.OBJ.SYNC_PD=null()
|| _result.MSG:='Nie znaleziono przeznaczenia danych %1.'@[_obj.SYNC_PD];
   _result.RESULT:=0
?};

_result.OBJ.FIRMA:={? _obj.FIRMA=''
                   || null()
                   || exec('FindInSet','#table','FIRMA','SYMBOL',_obj.FIRMA,,,1,,null())
                   ?};
{? _result.OBJ.FIRMA=null()
|| _result.MSG:='Nie znaleziono firmy o symbolu %1.'@[_obj.FIRMA];
   _result.RESULT:=0
?};

{? _result.RESULT=1
||
   SYNC_FIR.index('PDTAB');
   SYNC_FIR.prefix(_result.OBJ.SYNC_PD,_obj.ACR_TAB,_obj.ACR_TAB,_obj.FIRMA,);
   {? SYNC_FIR.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record_fir','xls_synchro',_obj,_mode,_result)
      ?}
   || SYNC_DEF.cntx_psh();
      SYNC_DEF.index('PDTAB');
      SYNC_DEF.prefix(_obj.ACR_TAB,_result.OBJ.SYNC_PD);
      {? SYNC_DEF.first()
      || _result.ACTION:='add';
         exec('record_fir','xls_synchro',_obj,_mode,_result)
      || _result.MSG:='Aktualnie brak w definicji przeznaczenia danych %2 tabeli %1.'@[_obj.ACR_TAB,_obj.SYNC_PD];
         _result.RESULT:=0
      ?};
      SYNC_DEF.cntx_pop()
   ?}
?};
~~


\import_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SYNC_FIR.add(1)
   |? _validate.ACTION='put'
   || _result:=SYNC_FIR.put(1)
   ?}
?};
{? _result=0
|| _validate.MSG:={? _validate.ACTION='add'
                  || 'Dodanie zmian firmy dla danych nie powiodło się.'@
                  || 'Modyfikacja zmian firmy dla danych nie powiodła się.'@
                  ?}
?};
_result


\select_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - SYNC_PD.SYM albo puste
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};
_npd:=exec('pd_stale_nr','xls_synchro',_pd);

_result:=0;

_tab:=tab_tmp(3,'SYNC_PD','STRING[20]','Przeznaczenie danych'
   ,'ACR_TAB','STRING[8]','Akronim tabeli'
   ,'FIRMA','STRING[4]','Symbol firmy'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'SYNC_PD',,,'ACR_TAB',,,'FIRMA',,);

SYNC_PD.cntx_psh();
SYNC_FIR.cntx_psh();
SYNC_FIR.index('S1');
SYNC_FIR.prefix();
{? SYNC_FIR.first()
|| {!
   |? {? SYNC_FIR.PD().SYM<>'' & exec('pd_stale_nr','xls_synchro',SYNC_FIR.PD().SYM)=_npd
      || _tab.blank();
         _tab.REF:=$SYNC_FIR.ref();
         _selected.prefix($SYNC_FIR.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.SYNC_PD:=SYNC_FIR.PD().SYM;
         _tab.ACR_TAB:=SYNC_FIR.ACR_TAB;
         _tab.FIRMA:=SYNC_FIR.FIRMA().SYMBOL;
         _tab.add()
      ?};
      SYNC_FIR.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'SYNC_PD,ACR_TAB,FIRMA',20,'Wybór zmian w firmie dla przeznaczenia danych do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SYNC_PD.cntx_pop();
SYNC_FIR.cntx_pop();
_result


\init_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - SYNC_PD.SYM
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};

_def:=_a;
{? _pd=''
|| _def.ID:='SYNC_REP'
|| _def.ID:='SYNC_REP_'+_pd
?};
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_PAR_DOK_SYNCHRO';
_def.MULTIFIR:='T';

{? _pd=''
|| _def.FILE:='wymiana_danych.xlsx'
|| _def.FILE:='wymiana_danych_'+_pd+'.xlsx'
?};
_def.SHEET:='Wym.danych-replikacje=1,1';
_def.NAME:='Wymiana danych - Replikacje, dla których mają być rejestrowane zmiany'@;
_def.DESC:='Wymiana danych - Replikacje, dla których mają być rejestrowane zmiany'@;

{? _pd=''
|| _def.PREFIX:="exec('prefix_rep','xls_synchro')"
|| _def.PREFIX:=$("exec('prefix_rep','xls_synchro',"+'\''+_pd+'\''+")")
?};
_def.TABLE:="exec('table_rep','xls_synchro')";
_def.FIELDS:="exec('fields_rep','xls_synchro',_a)";

_def.BEFORE:="SYNC_REP.cntx_psh()";
_def.AFTER:="SYNC_REP.cntx_pop()";
{? _pd=''
|| _def.SELECT:="exec('select_rep','xls_synchro',_a)"
|| _def.SELECT:=$("exec('select_rep','xls_synchro',_a,"+'\''+_pd+'\''+")")
?};

{? _pd=''
|| _def.EXPORT:="exec('export_rep','xls_synchro',_a,_b,1)"
|| _def.EXPORT:="exec('export_rep','xls_synchro',_a,_b)"
?};
_def.IMPORT:="exec('import_rep','xls_synchro',_a,_b,_c)";
_def.VALIDATE:="exec('validate_rep','xls_synchro',_a,_b,_c)";
~~


\prefix_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa zakres eksportowanych danych
::   WE: _a - SYNC_PD.SYM albo puste
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd_sym:='';
{? var_pres('_a')=type_of('')
|| _pd_sym:=_a
?};
SYNC_REP.index('PDNR1');
{? _pd_sym=''
|| SYNC_REP.prefix()
|| SYNC_REP.prefix(_pd_sym,)
?};
~~


\table_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
SYNC_REP


\fields_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.define('SYNC_PD','Przeznaczenie danych',0,,exec('hint_pd','xls_synchro'));
_def.define('NAZ','Nazwa repliki',0,,'Nazwa replikacji - 30 znaków');
_def.define('NR','Numer',0,,'Unikalny numer replikacji');
_def.define('AKT','Czy aktywna',1,,'Czy replikacja jest aktywna? - (T/N)');
~~


\record_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

SYNC_REP.index('PDNR');
SYNC_REP.prefix();
{? _validate.ACTION='add'
||
   SYNC_REP.blank();
   SYNC_REP.SYNC_PD:=_validate.OBJ.SYNC_PD;
   SYNC_REP.NR:=_obj.NR
?};

SYNC_REP.NAZ:=_obj.NAZ;
SYNC_REP.AKT:=_obj.AKT;
~~


\export_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::       _c - czy sprawdzać brak przeznaczenia w tablicy __PD_STALE
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_spr_pd_stale:=0;
{? var_pres('_c')=type_of(0)
|| _spr_pd_stale:=_c
?};

_result:=1;
_pd:=SYNC_REP.SYNC_PD().SYM;
{? _pd <> '' & (~_spr_pd_stale | exec('pd_stale_nr','xls_synchro',_pd)=0)
|| _table.SYNC_PD.VALUE:=SYNC_REP.SYNC_PD().SYM; _excel.write_async('SYNC_PD',SYNC_REP.SYNC_PD);
   _table.NR.VALUE:=SYNC_REP.NR;
   _table.NAZ.VALUE:=SYNC_REP.NAZ;
   _table.AKT.VALUE:=SYNC_REP.AKT
|| _result:=0
?};
_result


\validate_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('SYNC_PD');

_result.OBJ.SYNC_PD:={? _obj.SYNC_PD=''
                     || null()
                     || exec('FindInSet','#table','SYNC_PD','SYM',_obj.SYNC_PD,,,1,,null())
                     ?};
{? _result.OBJ.SYNC_PD=null()
|| _result.MSG:='Nie znaleziono przeznaczenia danych %1.'@[_obj.SYNC_PD];
   _result.RESULT:=0
?};

{? _obj.NR<=0 || _result.msg_range('NR',,0); _result.RESULT:=0 ?};
{? ~((';TN'*_obj.AKT)>1) || _result.msg_inset('AKT','T','N'); _result.RESULT:=0 ?};

{? _result.RESULT=1
||
   SYNC_REP.index('PDNR');
   SYNC_REP.prefix(_result.OBJ.SYNC_PD,_obj.NR);
   {? SYNC_REP.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record_rep','xls_synchro',_obj,_mode,_result)
      ?}
   || _result.ACTION:='add';
      exec('record_rep','xls_synchro',_obj,_mode,_result)
   ?}
?};
~~


\import_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SYNC_REP.add(1)
   |? _validate.ACTION='put'
   || _result:=SYNC_REP.put(1)
   ?}
?};
{? _result=0
|| _validate.MSG:={? _validate.ACTION='add'
                  || 'Dodanie replikacji dla danych nie powiodło się.'@
                  || 'Modyfikacja replikacji dla danych nie powiodła się.'@
                  ?}
?};
_result


\select_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - SYNC_PD.SYM albo puste
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};
_npd:=exec('pd_stale_nr','xls_synchro',_pd);

_result:=0;

_tab:=tab_tmp(3,'SYNC_PD','STRING[20]','Przeznaczenie danych'
   ,'NR','INTEGER','Akronim tabeli'
   ,'NAZ','STRING[20]','Symbol firmy'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'SYNC_PD',,,'NR',,,'NAZ',,);

SYNC_PD.cntx_psh();
SYNC_REP.cntx_psh();
SYNC_REP.index('PDNR');
SYNC_REP.prefix();
{? SYNC_REP.first()
|| {!
   |? {? SYNC_REP.SYNC_PD().SYM<>'' & exec('pd_stale_nr','xls_synchro',SYNC_REP.SYNC_PD().SYM)=_npd
      || _tab.blank();
         _tab.REF:=$SYNC_REP.ref();
         _selected.prefix($SYNC_REP.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.SYNC_PD:=SYNC_REP.SYNC_PD().SYM;
         _tab.NR:=SYNC_REP.NR;
         _tab.NAZ:=SYNC_REP.NAZ;
         _tab.add()
      ?};
      SYNC_REP.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'SYNC_PD,NR,NAZ',20,'Wybór replikacji dla przeznaczenia danych do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SYNC_PD.cntx_pop();
SYNC_REP.cntx_pop();
_result


\init_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - SYNC_PD.SYM
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};

_def:=_a;
{? _pd=''
|| _def.ID:='SYNC_MWA'
|| _def.ID:='SYNC_MWA_'+_pd
?};
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FUNPAR:='ZWS_PAR_DOK_SYNCHRO';
_def.MULTIFIR:='T';

{? _pd=''
|| _def.FILE:='wymiana_danych.xlsx'
|| _def.FILE:='wymiana_danych_'+_pd+'.xlsx'
?};
_def.SHEET:='Wym.danych-definicje z zew. API=1,1';
_def.NAME:='Wymiana danych - Definicje synchronizacji z zewnętrznymi API'@;
_def.DESC:='Wymiana danych - Definicje synchronizacji z zewnętrznymi API'@;

{? _pd=''
|| _def.PREFIX:="exec('prefix_mwa','xls_synchro')"
|| _def.PREFIX:=$("exec('prefix_mwa','xls_synchro',"+'\''+_pd+'\''+")")
?};
_def.TABLE:="exec('table_mwa','xls_synchro')";
_def.FIELDS:="exec('fields_mwa','xls_synchro',_a)";

_def.BEFORE:="
   VAR_DEL.delete('__SYNC_MWA_TAB');
   __SYNC_MWA_TAB:=sql('select PARENT,max(LP) as ILE  from SYNC_MWA group by PARENT');
   SYNC_MWA.cntx_psh()
";
_def.AFTER:="VAR_DEL.delete('__SYNC_MWA_TAB');SYNC_MWA.cntx_pop();exec('sync_mwa_licz','synchro')";
{? _pd=''
|| _def.SELECT:="exec('select_mwa','xls_synchro',_a)"
|| _def.SELECT:=$("exec('select_mwa','xls_synchro',_a,"+'\''+_pd+'\''+")")
?};

{? _pd=''
|| _def.EXPORT:="exec('export_mwa','xls_synchro',_a,_b,1)"
|| _def.EXPORT:="exec('export_mwa','xls_synchro',_a,_b)"
?};
_def.IMPORT:="exec('import_mwa','xls_synchro',_a,_b,_c)";
_def.VALIDATE:="exec('validate_mwa','xls_synchro',_a,_b,_c)";
~~


\prefix_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Określa zakres eksportowanych danych
::   WE: _a - SYNC_PD.SYM albo puste
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd_sym:='';
{? var_pres('_a')=type_of('')
|| _pd_sym:=_a
?};
SYNC_MWA.index('PD_LP');
{? _pd_sym=''
|| SYNC_MWA.prefix()
|| SYNC_MWA.prefix(_pd_sym,)
?};
~~


\table_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Określa uchwyt do tabeli
::   WY: uchwyt do eksportowanej tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
SYNC_MWA


\fields_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('SYNC_PD','Przeznaczenie danych',0,,'Symbol przeznaczenia danych');
_def.define('MWAC','Definicja API',0,,'Definicja API (plik MWAC)');
_def.define('TYPE','Typ obsługi',0,,'(Wysyłanie/Odbieranie/Usuwanie)');
_def.define('TAB_ACR','Akronim tabeli',0,,'Akronim tabeli - 8 znaków');
_def.define('METHOD','Metoda API',0,,);
_def.define('AKT','Aktywne',1,,'Czy definicja jest aktywna? - (T/N)');
_def.define('LP','Numer pola',1,,'Numer pola',,0);
_def.define('F_PARAM','Formuła parametrów',1,,);
_def.define('F_PARSE','Formuła parsująca',1,,);
_def.define('F_CLIENT','Dodatkowa formuła dla klienta',1,,'Dodatkowa formuła dla klienta, np. autoryzacja, nagłówki');
_def.define('F_METHOD','Dodatkowa formuła dla metody',1,,'Dodatkowa formuła dla metody, np. włączenie logowania');
_def.define('DESC','Opis',1);
_def.define('F_INIT','Formuła inicjująca',1,,);
_def.define('F_INET','Dodatkowa formuła dla obiektu INET',1,,);
_def.define('PACK','Wysyłka zbiorcza',1,,'Wysyłanie zbiorów rekordów podczas inicjowania danych: 0 - Nie, 1 - Tak',,0);
_def.define('SYNC_REP','Replika',1,,'Numer replikacji danych',type_of(0),0);
~~


\record_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

SYNC_MWA.index('PD_API');
SYNC_MWA.prefix();
{? _validate.ACTION='add'
||
   SYNC_MWA.blank();
   SYNC_MWA.PARENT:=_validate.OBJ.PARENT;
   SYNC_MWA.SYNC_PD:=_validate.OBJ.SYNC_PD;
   SYNC_MWA.MWAC:=_obj.MWAC;
   SYNC_MWA.TAB_ACR:=_obj.TAB_ACR;
   SYNC_MWA.TYPE:=_obj.TYPE;
   SYNC_MWA.METHOD:=_obj.METHOD;
   {? SYNC_MWA.PARENT=null() || SYNC_MWA.LOGLEVEL:=2 || SYNC_MWA.LOGLEVEL:=-1 ?}
?};
SYNC_MWA.LP:={? SYNC_MWA.PARENT=null()
             ||
::              Jeżeli dodawana definicja to LP zawsze jest zerem
                0
             |? _mode>0
             ||
::              Jeżeli dodaje/modyfikuje rekord z opcją zastępowania istniejących wartości to numeracja brana z pliku
                _obj.LP
             ||
::              Jeżeli dodaje rekord z opcją nie zastępowania istniejących wartości to dopisuje pozycje na samym końcu
::              (nie zostaje zachwiana dotyczasowa kolejność pozycji)
                _nr:=1;
                {? __SYNC_MWA_TAB.find_tab(,'PARENT',,'=',SYNC_MWA.PARENT)
                ||
::                 Sprawdzam jaki numer miała do tej (przed importem) ostatnia pozycja dla danej definicji
::                 i do liczby dodaję numeracje z pliku.
::                 Dzięki temu zostaje zachowana kolejność w jakiej mają sie dopisać na koniec listy brakujące pozycje
                   _lp:={? _obj.LP<0 || 0 || _obj.LP ?};
                   _nr:=__SYNC_MWA_TAB.ILE+_lp+1
                ||
::                 Nie było do tej pory danej definicji więc numeracja brana z pliku
                   _nr:=_obj.LP
                ?};
                _nr
             ?};
SYNC_MWA.AKT:=_obj.AKT;
SYNC_MWA.F_PARAM:=_obj.F_PARAM;
SYNC_MWA.F_PARSE:=_obj.F_PARSE;
SYNC_MWA.F_CLIENT:=_obj.F_CLIENT;
SYNC_MWA.F_METHOD:=_obj.F_METHOD;
SYNC_MWA.F_INIT:=_obj.F_INIT;
SYNC_MWA.F_INET:=_obj.F_INET;
SYNC_MWA.PACK:={? SYNC_MWA.PARENT=null() | SYNC_MWA.TYPE<>exec('mwac_type_send','synchro')
               ||
::                Jeżeli nagłówek lub pozycja ma typ inny niż wysyłanie to zawsze 0
                  0
               || _obj.PACK
               ?};
SYNC_MWA.SYNC_REP:=_validate.OBJ.SYNC_REP;
~~


\export_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::       _c - czy sprawdzać brak przeznaczenia w tablicy __PD_STALE
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_spr_pd_stale:=0;
{? var_pres('_c')=type_of(0)
|| _spr_pd_stale:=_c
?};

_result:=1;

_pd:=SYNC_MWA.SYNC_PD().SYM;
{? _pd <> '' & (~_spr_pd_stale | exec('pd_stale_nr','xls_synchro',_pd)=0)
|| _table.SYNC_PD.VALUE:=SYNC_MWA.SYNC_PD().SYM; _excel.write_async('SYNC_PD',SYNC_MWA.SYNC_PD);
   _table.TAB_ACR.VALUE:=SYNC_MWA.TAB_ACR;
   _table.LP.VALUE:=SYNC_MWA.LP;
   _table.AKT.VALUE:=SYNC_MWA.AKT;
   _table.TYPE.VALUE:=SYNC_MWA.TYPE;
   _table.F_PARAM.VALUE:=SYNC_MWA.F_PARAM;
   _table.F_PARSE.VALUE:=SYNC_MWA.F_PARSE;
   _table.F_CLIENT.VALUE:=SYNC_MWA.F_CLIENT;
   _table.F_METHOD.VALUE:=SYNC_MWA.F_METHOD;
   _table.MWAC.VALUE:=SYNC_MWA.MWAC;
   _table.METHOD.VALUE:=SYNC_MWA.METHOD;
   _table.DESC.VALUE:=SYNC_MWA.memo_txt(0,1,'DESC');
   _table.F_INIT.VALUE:=SYNC_MWA.F_INIT;
   _table.F_INET.VALUE:=SYNC_MWA.F_INET;
   _table.PACK.VALUE:=SYNC_MWA.PACK;
   _table.SYNC_REP.VALUE:=SYNC_MWA.SYNC_REP().NR;
   {? _table.SYNC_REP.VALUE<>0 || _excel.write_async('SYNC_REP',SYNC_MWA.SYNC_REP) ?}
|| _result:=0
?};

_result


\validate_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;

_result.RESULT:=1;
_result.OBJ:=obj_new('SYNC_PD','PARENT','SYNC_REP');

_result.OBJ.SYNC_PD:={? _obj.SYNC_PD=''
                     || null()
                     || exec('FindInSet','#table','SYNC_PD','SYM',_obj.SYNC_PD,,,1,,null())
                     ?};

_result.OBJ.SYNC_REP:={? _obj.SYNC_REP=0
                      || null()
                      || exec('sync_repl_ref','synchro',_result.OBJ.SYNC_PD,_obj.SYNC_REP)
                      ?};

{? _result.OBJ.SYNC_PD=null()
|| _result.MSG:='Nie znaleziono przeznaczenia danych o symbolu %1.'@[_obj.SYNC_PD];
   _result.RESULT:=0

|? _obj.SYNC_REP<>0 & _result.OBJ.SYNC_REP=null()
|| _result.MSG:='Nie znaleziono replikacji %1.'@[$_obj.SYNC_REP];
   _result.RESULT:=0

||
   {? _obj.TYPE='' & _obj.TAB_ACR='' & _obj.METHOD=''
   ||
::    nagłówek
      _result.OBJ.PARENT:=null()
   ||
::    pozycja
      _result.OBJ.PARENT:=exec('FindInSet','#table','SYNC_MWA','TREE',_obj.SYNC_PD,null(),,1,,null());
      {? _result.OBJ.PARENT=null()
      || _result.MSG:='Nie znaleziono rekordu nadrzędnego przeznaczenia danych %1.'@[_obj.SYNC_PD];
         _result.RESULT:=0
      ?}
   ?}
?};

_int:=int(_obj.LP);
{? _int<exec('minint','#math') | _int>exec('maxint','#math')
|| _result.msg_range('LP',exec('minint','#math'),exec('maxint','#math'));
   _result.RESULT:=0
?};
{? _int<>_obj.LP
|| _result.msg_int('LP')
?};
{? (+_obj.AKT)<>1 | ~((';TN'*_obj.AKT)>1) || _result.msg_inset('AKT','T','N'); _result.RESULT:=0 ?};
{? _result.OBJ.PARENT<>null()
   & _obj.TYPE<>exec('mwac_type_delete','synchro') & _obj.TYPE<>exec('mwac_type_receive','synchro')
   & _obj.TYPE<>exec('mwac_type_send','synchro') & _obj.TYPE<>exec('mwac_type_exec','synchro')
|| _result.msg_inset('TYPE',exec('mwac_type_delete','synchro'),exec('mwac_type_receive','synchro')
                           ,exec('mwac_type_send','synchro'),exec('mwac_type_exec','synchro'));
   _result.RESULT:=0
?};

{? _obj.PACK<0 | _obj.PACK>1
|| _result.msg_inset('PACK','0','1');
   _result.RESULT:=0
?};

_chk:="
:: _type: 0 - nagłówek , 1 - pozycja
   _type:={? var_pres('_a')=type_of(0) || _a || 0 ?};

   _chk:=__CHK.record(SYNC_MWA,,'SYNC_PD','MWAC');
   {? _type & _chk='' & SYNC_MWA.TYPE=exec('mwac_type_exec','synchro')
   || _chk:=__CHK.record(SYNC_MWA,,'TYPE','METHOD')
   |? _type & _chk=''
   || _chk:=__CHK.record(SYNC_MWA,,'TYPE','TAB_ACR','METHOD')
   ?};
   _chk
";

{? _result.RESULT=1
||
   {? _result.OBJ.PARENT=null()
   ||
::    Nagłówek
      SYNC_MWA.index('TREE');
      SYNC_MWA.prefix(null(),exec('FindAndGet','#table',SYNC_PD,_result.OBJ.SYNC_PD,,"SYNC_PD.SYM",''),)
   ||
::    Pozycja
      SYNC_MWA.index('PD_API');
      SYNC_MWA.prefix(_result.OBJ.SYNC_PD,_obj.MWAC,_obj.METHOD,_obj.TAB_ACR,_obj.TYPE)
   ?};
   {? SYNC_MWA.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record_mwa','xls_synchro',_obj,_mode,_result)
::         {? exec('chkSYNC_MWA','synchro',_result.ACTION)<>'' || _result.RESULT:=0 ?}
      ?}
   || _result.ACTION:='add';
      exec('record_mwa','xls_synchro',_obj,_mode,_result);
      _res:='';
      {? SYNC_MWA.PARENT=null()
      || _res:=_chk(0)
      || _res:=_chk(1)
      ?};
      {? _res<>''
      || _result.RESULT:=0
      ?}
   ?}

?};
~~


\import_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SYNC_MWA.add(1)
   |? _validate.ACTION='put'
   || _result:=SYNC_MWA.put(1)
   ?};
   SYNC_MWA.memo_set(_obj.DESC,'DESC');
   SYNC_MWA.memo_put()
?};
{? _result=0
|| _validate.MSG:={? _validate.ACTION='add'
                  || 'Dodanie definicji dla danych nie powiodło się.'@
                  || 'Modyfikacja definicji dla danych nie powiodła się.'@
                  ?}
?};
_result


\select_mwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [20.14]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::       _b - SYNC_PD.SYM albo puste
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_pd:='';
{? var_pres('_b')=type_of('')
|| _pd:=_b
?};
_npd:=exec('pd_stale_nr','xls_synchro',_pd);

_result:=0;

_tab:=tab_tmp(3
   ,'TREE','TREE_REF','Ref rekordu nadrzędnego'
   ,'SYNC_PD','STRING[20]','Przeznaczenia danych'
   ,'MWAC','STRING[50]','Definicja API (plik MWAC)'
   ,'TYPE','STRING[10]','Typ obsługi'
   ,'TAB_ACR','STRING[8]','Akronim tabeli'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'METHOD','STRING[50]','Metoda API'
   ,'AKT','STRING[1]','Aktywna'
);

_ndx:=_tab.ndx_tmp(,,'TREE',,,'SYNC_PD',,,'MWAC',,,'TAB_ACR',,);
_ndx2:=_tab.ndx_tmp(,,'TREE',,,'SYNC_PD',,);
_ndx3:=_tab.ndx_tmp(,,'SELECTED',,,'SYNC_PD',,,'MWAC',,,'TAB_ACR',,);

SYNC_PD.cntx_psh();
SYNC_MWA.cntx_psh();
SYNC_MWA.index('TREE');
SYNC_MWA.prefix();
{? SYNC_MWA.first()
|| {!
   |? {? SYNC_MWA.SYNC_PD().SYM<>'' & exec('pd_stale_nr','xls_synchro',SYNC_MWA.SYNC_PD().SYM)=_npd
      || _tab.blank();
         _tab.REF:=$SYNC_MWA.ref();
         _selected.prefix($SYNC_MWA.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.SYNC_PD:=SYNC_MWA.SYNC_PD().SYM;
         _tab.TAB_ACR:=SYNC_MWA.TAB_ACR;
         _tab.TYPE:=SYNC_MWA.TYPE;
         _tab.MWAC:=SYNC_MWA.MWAC;
         _tab.METHOD:=SYNC_MWA.METHOD;
         _tab.AKT:=SYNC_MWA.AKT;
         {? SYNC_MWA.PARENT=null
         || _tab.TREE:=null;
            _tab.add()
         || _tree:=null;
            _tab.cntx_psh();
            _tab.index(_ndx2);
            _tab.prefix(null,_tab.SYNC_PD);
            {? _tab.first()
            || _tree:=#_tab.ref()
            ?};
            _tab.cntx_pop();
            _tab.TREE:=_tree;
            _tab.add()
         ?}
      ?};
      SYNC_MWA.next()
   !}
?};
::_result:=exec('select_action','#table',_tab
:: ,'SYNC_PD,TYPE,TAB_ACR,MWAC,METHOD,AKT',20,'Wybór definicji dla przeznaczenia danych do eksportu'@,1);
_result:=exec('select_action','xls_synchro',_tab);

{? _result>0
||
   _selected.erase();

   _tab.index(_ndx3);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};

SYNC_PD.cntx_pop();
SYNC_MWA.cntx_pop();
_result


\select_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Wyświetla okno z możliwością wybierania rekordów do eksportu z tabeli SYNC_MWA (widok z drzewem)
::   WE: _a - TABLE - uchwyt do tabeli
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik zatwierdził wybór
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

_title:='Wybór rekordów'@;

_result:=0;

_sel:=_tab.mk_sel(_title,'P',,('#selact'+_tab.name()),,,,1);
_tab.win_fld(_sel,,'SELECTED',,,,,1,'Zaznaczony?'@,,'Czy wybrano rekord? (T/N)'@,2,,"'T'","'N'");
_tab.win_fld(_sel,,'SYNC_PD');
_tab.win_fld(_sel,,'TYPE');
_tab.win_fld(_sel,,'TAB_ACR');
_tab.win_fld(_sel,,'MWAC');
_tab.win_fld(_sel,,'METHOD');
_tab.win_fld(_sel,,'AKT',,,,,,,,'Czy pozycja aktywna? (T/N)'@,2,,"'T'","'N'");

:: Zaznacz
_fb:="
   _tab:=cur_tab();
   _tab.SELECTED:='T';
   _tab.put();
:: Zaznaczenie powiązanego rekordu nadrzędnego
   {? _tab.TREE<>null
   || _tab.cntx_psh();
      {? _tab.seek(_tab.TREE)
      || {? _tab.SELECTED='N'
         || _tab.SELECTED:='T';
            _tab.put()
         ?}
      ?};
      _tab.cntx_pop()
   ?}
";
_gr1:="
   sel_nchk();
   1
";
_gr2:="
   ~~
";
_tab.win_act(_sel,,'Formuła','&Zaznacz'@@,,'Zaznacz użytkownika'@,_fb,,,1,_gr1,_gr2,'Z');

:: Odznacz
_fb:="
   _tab:=cur_tab();
   _tab.SELECTED:='N';
   _tab.put();
:: Odnaczenie podrzędnych rekordów
   {? _tab.TREE=null()
   || _tab.cntx_psh();
      _ndx:=_tab.ndx_tmp(,,'TREE',,);
      _tab.index(_ndx);
      _tab.prefix(#_tab.ref());
      {? _tab.first()
      ||  {!
          |?
             _tab.SELECTED:='N';
             _tab.put();
             _tab.next
          !}
      ?};
      _tab.ndx_drop(_ndx);
      _tab.cntx_pop()
   ?}
";
_tab.win_act(_sel,,'Formuła','&Odznacz'@@,,'Odznacz użytkownika'@,_fb,,,1,_gr1,_gr2,'O');

:: Akceptuj
_fb:="
   sel_exit()
";
_tab.win_act(_sel,,'Formuła','&Akceptuj'@@,,,_fb,,,,,,'A');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=bottom,align=end'['&Akceptuj'@],'menu:A',,,,,,'noempty');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=bottom,align=end'['A&nuluj'@],'key:Esc');

:: Rekord
_fb:="
   _lastdraw:=1;
   {? var_pres('_a')=type_of(0)
   || _lastdraw:=_a
   ?};
   _grayed:='';
   _tab:=cur_tab();
   _sel:=cur_win();

   {? _lastdraw>0
   ||
      {? _tab.sel_size()=0
      ||
::       Pojedyncze zaznaczenie
         {? _tab.SELECTED='T'
         || _tab.actions(_sel,,'O',1);
            _grayed+='Z'
         |? _tab.SELECTED='N' | _tab.SELECTED=''
         || _tab.actions(_sel,,'Z',1);
            _grayed+='O'
         ?}
      ||
::       Zaznaczenie grupowe
         _tab.actions(_sel,,'Z',1)
      ?};

      _anyselected:=0;
      _current:=_tab.ref();
      _tab.first();
      {!
      |? _anyselected:=(_tab.SELECTED='T');
         _tab.next() & ~_anyselected
      !};
      _tab.seek(_current);
      _tab.actions_grayed(_sel,_grayed)

   ?}
";
_tab.win_act(_sel,,'Rekord',,,,_fb);
_tab.tr_fml(_sel,,"{? _a=-1 || 1 || _a ?}");
_tab.win_sel(_sel);
{? _tab.select()
|| _result:=1
?};
_result


\pd_stale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [20.42]
:: OPIS: Tablica stałych przeznaczeń
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__PD_STALE')<>0
|| VAR_DEL.delete('__PD_STALE')
?};
__PD_STALE:=spli_str(
   'ABSTOREB2B.ABSTOREB2C.BASELINKER.ELASTIC.LOTUS.QLIK.'
   'PORTAL.PORTAL_WNIOSKI.PORTAL_CFG.PORTAL_HR_CFG.PORTAL_INTERNAL.PORTAL_CUSTOM.'
   'BLMT.BLMT_INTERNAL.'
   'PORTAL_SEOD_CFG.PORTAL_SEOD'
   ,'.'
);
~~


\pd_stale_nr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [20.42]
:: OPIS: Zwraca numer w tablicy stałych przeznaczeń
::   WE: _a - symbol przeznaczenia
::   WY: numer w tablicy stałych przeznaczeń albo 0
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_pd:='';
{? var_pres('_a')=type_of('')
|| _pd:=_a
?};
_nr:=0;
{? _pd<>'' & var_pres('__PD_STALE')>0
|| _len:=obj_len(__PD_STALE);
   {! _nn:=1.._len
   |? {? __PD_STALE[_nn]=_pd
      || _nr:=_nn
      ?};
      _nr=0
   !}
?};
_nr


\hint_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Podpowiedź dla pola 'przeznaczenie danych'
::----------------------------------------------------------------------------------------------------------------------
'Symbol przeznaczenia danych:
LOTUS
QLIK
ABSTOREB2B
ABSTOREB2C
BASELINKER
ELASTIC
PORTAL
PORTAL_WNIOSKI
PORTAL_CFG
PORTAL_HR_CFG
PORTAL_INTERNAL
PORTAL_CUSTOM
BLMT
BLMT_INTERNAL
'

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:12 9317990bb0764d43c98291540ff4851ce3f1a7454a7feb611fc3e283415637c92251302700a5d14f1fc835743d54abe45ca8d0e741b9b19122a314f31bc67a8bd1e95e26527437510778b2727a71d0658f624e5c6192cfcfe3c19eea7a73ee44317b22e6deff949becc958a52282389dc355cda7ab57dd4db9055f4b33927195
