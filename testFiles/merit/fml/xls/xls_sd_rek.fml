:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_sd_rek.fml
:: Utworzony: 11.03.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu konfiguracji
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='SD_REK';
_def.FUNPAR:='ZWS_PAR_ASDD';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_sd_def_xlsx','xls__init');
_def.SHEET:='Dane szablonów=1,1';
_def.NAME:='Zestawy danych szablonu dokumentów'@;
_def.DESC:='Zestawy danych szablonu dokumentów';
_def.ADD_ROWS:=0;
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="SD_REK";

: prolog
_def.BEFORE:="
   SD_REK.cntx_psh();
   SD_REK.f_clear();
   SD_REK.index('KOD');
   SD_REK.clear();
   SD_WREK.cntx_psh();
   SD_WREK.index('KOD');
   SD_WREK.prefix();
   SD_XSLO.cntx_psh();
   SD_XSLO.index('KOD');
   SD_XSLO.prefix();
   SD_DOK.cntx_psh();
   SD_DOK.index('KOD');
   SD_DOK.prefix();
   ~~
";

: epilog
_def.AFTER:="
   SD_REK.cntx_pop();
   SD_WREK.cntx_pop();
   SD_XSLO.cntx_pop();
   SD_DOK.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('SYSTEM', MS.name(SD_REK,'SYSTEM'),0,, MS.comment(SD_REK,'SYSTEM'));
   _env.define('KOD',    MS.name(SD_REK,'KOD'),0,,    MS.comment(SD_REK,'KOD'));
   _env.define('SD_DOK', MS.name(SD_REK,'SD_DOK'),0,, MS.comment(SD_REK,'SD_DOK'),type_of(''));
   _env.define('SD_XSLO',MS.name(SD_REK,'SD_XSLO'),0,,MS.comment(SD_REK,'SD_XSLO'),type_of(''));
   _env.define('NUMER',  MS.name(SD_REK,'NUMER'),0,,  MS.comment(SD_REK,'NUMER'),,0);
   _env.define('SD_WREK',MS.name(SD_REK,'SD_WREK'),0,,MS.comment(SD_REK,'SD_WREK'),type_of(''));
   _env.define('GLOWNY', MS.name(SD_REK,'GLOWNY'),0,, MS.comment(SD_REK,'GLOWNY'));
   _env.define('ROZWIN', MS.name(SD_REK,'ROZWIN'),0,, MS.comment(SD_REK,'ROZWIN'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="exec('export','xls_sd_rek',_a,_b)";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_sd_rek',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_sd_rek',_a,_b,_c)";
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Ustawia wartości w polach bufora danych i asynchronicznie zapisuje powiązane dane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_buf:=_b;
_buf.SYSTEM.VALUE:=SD_REK.SYSTEM;
_buf.KOD.VALUE:=SD_REK.KOD;
_buf.SD_DOK.VALUE:=SD_REK.SD_DOK().KOD;
_buf.SD_XSLO.VALUE:=SD_REK.SD_XSLO().KOD;
_buf.NUMER.VALUE:=SD_REK.NUMER;
_buf.SD_WREK.VALUE:=SD_REK.SD_WREK().KOD;
_buf.GLOWNY.VALUE:=SD_REK.GLOWNY;
_buf.ROZWIN.VALUE:=SD_REK.ROZWIN;

:: zapis wykorzystywanych danych
_env.write_async('SD_WREK',SD_REK.SD_WREK);

1


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.SYSTEM=''  || 'SYSTEM'
   |? _buf.KOD=''     || 'KOD'
   |? _buf.SD_DOK=''  || 'SD_DOK'
   |? _buf.SD_XSLO='' || 'SD_XSLO'
   |? _buf.NUMER<=0   || 'NUMER'
   |? _buf.SD_WREK='' || 'SD_WREK'
   |? _buf.GLOWNY=''  || 'GLOWNY'
   |? _buf.ROZWIN=''  || 'ROZWIN'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

:: błędne wartości
{? ('TN'*(1+_buf.SYSTEM))=0
|| _val.msg_inset('SYSTEM','T','N');
   _val.RESULT:=0;
   return()
|? ('TN'*(1+_buf.GLOWNY))=0
|| _val.msg_inset('GLOWNY','T','N');
   _val.RESULT:=0;
   return()
|? ('TN'*(1+_buf.ROZWIN))=0
|| _val.msg_inset('ROZWIN','T','N');
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(SD_REK,'SYSTEM');
{? +_buf.SYSTEM>_max
|| _val.msg_length('SYSTEM',_max);
   _buf.SYSTEM:=_max+_buf.SYSTEM
?};
_max:=MS.fld_len(SD_REK,'KOD');
{? +_buf.KOD>_max
|| _val.msg_length('KOD',_max);
   _buf.KOD:=_max+_buf.KOD
?};
_max:=MS.fld_len(SD_DOK,'KOD');
{? +_buf.SD_DOK>_max
|| _val.msg_length('SD_DOK',_max);
   _buf.SD_DOK:=_max+_buf.SD_DOK
?};
_max:=MS.fld_len(SD_XSLO,'KOD');
{? +_buf.SD_XSLO>_max
|| _val.msg_length('SD_XSLO',_max);
   _buf.SD_XSLO:=_max+_buf.SD_XSLO
?};
_max:=MS.fld_len(SD_WREK,'KOD');
{? +_buf.SD_WREK>_max
|| _val.msg_length('SD_WREK',_max);
   _buf.SD_WREK:=_max+_buf.SD_WREK
?};

: weryfikacja spójności referencyjnej
_dok:=null;
{? SD_DOK.find_key(_buf.SD_DOK,)
|| _dok:=SD_DOK.ref()
|| _val.msg_norec('SD_DOK');
   _val.RESULT:=0;
   return()
?};
_slo:=null;
{? SD_XSLO.find_key(_buf.SD_XSLO,)
|| _slo:=SD_XSLO.ref()
|| _val.msg_norec('SD_XSLO');
   _val.RESULT:=0;
   return()
?};
_rek:=null;
{? SD_WREK.find_key(_buf.SD_WREK,)
|| _rek:=SD_WREK.ref()
|| _val.msg_norec('SD_WREK');
   _val.RESULT:=0;
   return()
?};

_ref:=null;
{? (SD_REK.index('KOD'); SD_REK.find_key(_buf.KOD,)) |
   (SD_REK.index('UNIQUE'); SD_REK.find_key(_dok,_slo,_rek))
|| _ref:=SD_REK.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1'[_a.KOD]",
   'SD_DOK',_dok,
   'SD_XSLO',_slo,
   'SD_WREK',_rek
);
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,SD_REK,"
   _a.SYSTEM:=_b.SYSTEM;
   _a.KOD:=_b.KOD;
   _a.SD_DOK:=_c.SD_DOK;
   _a.SD_XSLO:=_c.SD_XSLO;
   _a.NUMER:=_b.NUMER;
   _a.SD_WREK:=_c.SD_WREK;
   _a.GLOWNY:=_b.GLOWNY;
   _a.ROZWIN:=_b.ROZWIN;
   ~~
");
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 58eae1373904f97906de6a75b0ae869314a290f4476a9a46a446b63a573e7cdf5347b3f26e46fe0aff7ca3dc43dd365a4e39bcc6657ee98aea7437db68e587f2d0b4b63036d55c2e38daca6ddeb8b327edfb51e3c7802e1f081ea4ebc78f37587a5dc8c8bc98eac94314eb3c6bdf3040d16ef7987bc2c70d6d31664cb34d5d18
