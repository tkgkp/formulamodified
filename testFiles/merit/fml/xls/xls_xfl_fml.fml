:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_xfl_fml.fml
:: Utworzony: 04.02.2018
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu konfiguracji
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_def:=_a;

_def.ID:='XFL_FML';
_def.FUNPAR:='ZWS_PAR_XFL';
_def.DOMAIN:=exec('name','#b_domain','ZWS');
_def.FILE:=exec('def_xfl_xlsx','xls__init');
_def.SHEET:='Formuły parametrów=1,1';
_def.NAME:='Formuły parametrów'@;
_def.DESC:='Formuły parametrów';
_def.ADD_ROWS:=0;
_def.HIDDEN:='N';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="XFL_FML";

: prolog
_def.BEFORE:="
   XFL_FML.cntx_psh();
   XFL_FML.f_clear();
   XFL_FML.clear();
   XFL_FML.index('KOD');
   XFL_PAR.cntx_psh();
   XFL_PAR.clear();
   XFL_PAR.index('KOD');
   SLO_KOD.cntx_psh();
   SLO_KOD.clear();
   SLO_KOD.index('KOD');
   {? _a.is_import()
   || exec('init_fld_fml','ext_slo')
   ?};
   ~~
";

: epilog
_def.AFTER:="
   XFL_PAR.cntx_pop();
   SLO_KOD.cntx_pop();
   XFL_FML.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('KOD',    MS.name(XFL_FML,'KOD'),0,,    MS.comment(XFL_FML,'KOD'));
   _env.define('XFL_PAR',MS.name(XFL_FML,'XFL_PAR'),0,,MS.comment(XFL_FML,'XFL_PAR'),type_of(''));
   _env.define('SLO_KOD',MS.name(XFL_FML,'SLO_KOD'),0,,MS.comment(XFL_FML,'SLO_KOD'),type_of(''));
   _env.define('TRESC',  MS.name(XFL_FML,'TRESC'),0,,  MS.comment(XFL_FML,'TRESC'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.KOD.VALUE:=XFL_FML.KOD;
   _buf.XFL_PAR.VALUE:=XFL_FML.XFL_PAR().KOD;
   _buf.SLO_KOD.VALUE:=XFL_FML.SLO_KOD().KOD;
   _buf.TRESC.VALUE:=XFL_FML.memo_txt(,1,'TRESC');
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_xfl_fml',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_xfl_fml',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.KOD=''     || 'KOD'
   |? _buf.XFL_PAR='' || 'XFL_PAR'
   |? _buf.SLO_KOD='' || 'SLO_KOD'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(XFL_FML,'KOD');
{? +_buf.KOD>_max
|| _val.msg_length('KOD',_max);
   _buf.KOD:=_max+_buf.KOD
?};
_max:=MS.fld_len(XFL_PAR,'KOD');
{? +_buf.XFL_PAR>_max
|| _val.msg_length('XFL_PAR',_max);
   _buf.XFL_PAR:=_max+_buf.XFL_PAR
?};
_max:=MS.fld_len(SLO_KOD,'KOD');
{? +_buf.SLO_KOD>_max
|| _val.msg_length('SLO_KOD',_max);
   _buf.SLO_KOD:=_max+_buf.SLO_KOD
?};

: weryfikacja spójności referencyjnej
_par:=null;
{? XFL_PAR.find_key(_buf.XFL_PAR,)
|| _par:=XFL_PAR.ref()
|| _val.msg_norec('XFL_PAR');
   _val.RESULT:=0;
   return()
?};
{? (_slo:=exec('kod','ext_slo','FLD_FML',_buf.SLO_KOD))=null
|| _val.msg_norec('SLO_KOD');
   _val.RESULT:=0;
   return()
?};

_ref:=null;
{? (XFL_FML.index('KOD'); XFL_FML.find_key(_buf.KOD,)) |
   (XFL_FML.index('UNIQUE'); XFL_FML.find_key(_slo,_par))
|| _ref:=XFL_FML.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1'[_a.KOD]",
   'XFL_PAR',_par,
   'SLO_KOD',_slo
);
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,XFL_FML,"
   _a.KOD:=_b.KOD;
   _a.XFL_PAR:=_c.XFL_PAR;
   _a.SLO_KOD:=_c.SLO_KOD;
   _a.memo_set(_b.TRESC,'TRESC');
   ~~
",'TRESC');
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:12 6e58ec5ae43d5e44f2ffe31b81e0883f4a930db144dd874febdf28811644529798813e96b0662d454404f7151375a0a846ce032ae71cc34c33cffe0cfdb3aa7361b80af7562aeb20dec36ccbab8ede5ffa9e05ab4787b4255d518e7eda97f3c58ba781b53e2859f57116f273ba231461c78cad9a24e349dd92af141996d1ccf4
