:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_ppk_xra.fml
:: Utworzony: 08.07.2020
:: Autor: IS
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu typów raportów PPK
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Inicjalizuje mechanizm importu/eksportu.
::   WE: _a [OBJECT] - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;

_def.ID:='PPK_XRA';
_def.FUNPAR:='ZWS_PAR_PXWE';
_def.DOMAIN:=exec('name','#b_domain','PPK');
_def.FILE:=exec('def_per_ppk_xlsx','xls__init');
_def.SHEET:='Typy raportów PPK'@+'=1,1';
_def.NAME:='Typy raportów PPK'@;
_def.DESC:='Typy raportów PPK'@;
_def.ADD_ROWS:=0;
_def.HIDDEN:='T';
_def.MULTIFIR:='T';

: źródło danych
_def.TABLE:="PPK_XRA";

: prolog
_def.BEFORE:="
   PPK_XRA.cntx_psh();
   PPK_XRA.index('UNIQUE');
   PPK_XRA.prefix();
   PPK_XWE.cntx_psh();
   PPK_XWE.index('NUMER');
   PPK_XWE.prefix();
   PPK_XEL.cntx_psh();
   PPK_XEL.index('SYMBOL');
   PPK_XEL.prefix();
   ~~
";

: epilog
_def.AFTER:="
   PPK_XEL.cntx_pop();
   PPK_XWE.cntx_pop();
   PPK_XRA.cntx_pop();
   ~~
";

: definicja kolumn
_def.FIELDS:="
   _env:=_a;
   _env.define('PPK_XWE',MS.name(PPK_XRA,'PPK_XWE'),0,,MS.comment(PPK_XRA,'PPK_XWE'),type_of(''));
   _env.define('PPK_XEL',MS.name(PPK_XRA,'PPK_XEL'),0,,MS.comment(PPK_XRA,'PPK_XEL'),type_of(''));
   _env.define('OPIS',   MS.name(PPK_XRA,'OPIS'),0,,   MS.comment(PPK_XRA,'OPIS'));
   ~~
";

: zawartość wiersza
_def.EXPORT:="
   _env:=_a;
   _buf:=_b;
   _buf.PPK_XWE.VALUE:=PPK_XRA.PPK_XWE().NUMER;
   _buf.PPK_XEL.VALUE:=PPK_XRA.PPK_XEL().SYMBOL;
   _buf.OPIS.VALUE:=PPK_XRA.OPIS;
:: Cała kartoteka PPK_XEL jest eksportowana podczas eksportu PPK_XWE - zapis asynchroniczny nie jest konieczny:
::   _env.write_async('PPK_XEL',PPK_XEL.ref());
   1
";

: weryfikacja i zapis wiersza odczytanego z pliku wymiany
_def.VALIDATE:="exec('validate','xls_ppk_xra',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_ppk_xra',_a,_b,_c)";
~~


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Weryfikuje poprawność wiersza odczytanego z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_buf:=_a;
_mod:=_b;
_val:=_c;

: wychwyć błędy krytyczne
_fld:=
   {? _buf.PPK_XWE='' || 'PPK_XWE'
   |? _buf.PPK_XEL='' || 'PPK_XEL'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _val.msg_empty(_fld);
   _val.RESULT:=0;
   return()
?};

: ostrzeżenia
_max:=MS.fld_len(PPK_XWE,'NUMER');
{? +_buf.PPK_XWE>_max
|| _val.msg_length('PPK_XWE',_max);
   _buf.PPK_XWE:=_max+_buf.PPK_XWE
?};
_max:=MS.fld_len(PPK_XEL,'SYMBOL');
{? +_buf.PPK_XEL>_max
|| _val.msg_length('PPK_XEL',_max);
   _buf.PPK_XEL:=_max+_buf.PPK_XEL
?};
_max:=MS.fld_len(PPK_XRA,'OPIS');
{? +_buf.OPIS>_max
|| _val.msg_length('OPIS',_max);
   _buf.OPIS:=_max+_buf.OPIS
?};

: weryfikacja spójności referencyjnej
_xwe:=null;
{? PPK_XWE.find_key(_buf.PPK_XWE,)
|| _xwe:=PPK_XWE.ref()
|| _val.msg_norec('PPK_XWE');
   _val.RESULT:=0;
   return()
?};

_xel:=null;
{? PPK_XEL.find_key(_buf.PPK_XEL,)
|| _xel:=PPK_XEL.ref()
|| _val.msg_norec('PPK_XEL');
   _val.RESULT:=0;
   return()
?};

_ref:=null;
{? PPK_XRA.find_key(_xwe,_xel)
|| _ref:=PPK_XRA.ref();
   _val.ACTION:='put'
|| _val.ACTION:='add'
?};

: optymalizacja importu i standaryzacja kodu
_val.OBJ:=exec('write_obj','xls__util',_ref,
   "'%1 - %2'[_a.PPK_XWE,_a.PPK_XEL]",
   'PPK_XWE',_xwe,
   'PPK_XEL',_xel
);
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Tworzy lub modyfikuje wiersze na podstawie wartości odczytanych z pliku wymiany.
::   WE: _a [OBJECT] - tablica nazwana z wartościami pól wiersza pliku wymiany
::       _b [INTEGER] - tryb pracy: 0 - zachowaj istniejące, 1 - nadpisywać istniejące
::       _c [OBJECT] - rezultat walidacji i importu, patrz exec('args_valid','#excel_imex')
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('write','xls__util',_a,_b,_c,PPK_XRA,"
   _a.PPK_XWE:=_c.PPK_XWE;
   _a.PPK_XEL:=_c.PPK_XEL;
   _a.OPIS:=_b.OPIS;
   ~~
");
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 26e4b2451ed0631c1599778c04cda2bff64049386b88da4bd14313c344920caf162fe265c56350d27f6c4d7c59d7fe2b1732c0d6af4a7bcf9b7cc2036eb2cc4dbea277be379a1f80aa81758e406ba97908c7cc6b83de410315be84d0f870f67408ed1a41cb4dc262ffc09283dd5377a8a92953e32d3f4581ec9a53c5e20040fb
