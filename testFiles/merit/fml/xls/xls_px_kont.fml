:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_pl_kont.fml
:: Utworzony: 09.08.2018
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu zasobów planu strategicznego
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PX_KONT';
_def.DOMAIN:=exec('name','#b_domain','TPP');
_def.FUNPAR:='ZWS_PAR_DZAS';

_def.FILE:='produkcja_planowanie.xlsx';
_def.SHEET:='Zasoby planu strateg.'@+'=1,1';
_def.NAME:='Zasoby planu strategicznego'@;
_def.DESC:='Zasoby planu strategicznego'@;

_def.PREFIX:="PX_KONT.index('ACT'); PX_KONT.prefix('T',exec('get_mainversion','px_ver'))";
_def.TABLE:="PX_KONT";
_def.FIELDS:="exec('fields','xls_px_kont',_a)";

_def.BEFORE:="PX_KONT.cntx_psh()";
_def.AFTER:="PX_KONT.cntx_pop()";
_def.SELECT:="exec('select','xls_px_kont',_a)";

_def.EXPORT:="exec('export','xls_px_kont',_a,_b)";
_def.VALIDATE:="exec('validate','xls_px_kont',_a,_b,_c)";
_def.IMPORT:="exec('import','xls_px_kont',_a,_b,_c)";
~~


\fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_dim:=exec('il_wym','px_param');

_def.define('PL_RES',MS.name(PX_KONT,'PL_RES'),0,,MS.name(PX_KONT,'PL_RES'));
_def.define('SYMBOL',MS.name(PX_KONT,'SYMBOL'),,,MS.name(PX_KONT,'SYMBOL'));
_def.define('NAZWA',MS.name(PX_KONT,'NAZWA'),,,MS.name(PX_KONT,'NAZWA'));
_def.define('IL_WYM',MS.name(PX_KONT,'IL_WYM'),,,MS.name(PX_KONT,'IL_WYM'),,0);
{! _it:=1.. _dim |! _def.define('JM'+$_it,MS.name(PX_KONT,'JM'+$_it),,,MS.name(PX_KONT,'JM'+$_it)) !};
{! _it:=1.. _dim |! _def.define('MINEQ'+$_it,MS.name(PX_KONT,'MINEQ'+$_it),,,MS.name(PX_KONT,'MINEQ'+$_it)) !};
{! _it:=1.. _dim |! _def.define('MAXEQ'+$_it,MS.name(PX_KONT,'MAXEQ'+$_it),,,MS.name(PX_KONT,'MAXEQ'+$_it)) !};
_def.define('CUPEQ',MS.name(PX_KONT,'CUPEQ'),,,MS.name(PX_KONT,'CUPEQ'));
_def.define('CUP_IN',MS.name(PX_KONT,'CUP_IN'),,,MS.name(PX_KONT,'CUP_IN'));
_def.define('CUP_OUT',MS.name(PX_KONT,'CUP_OUT'),,,MS.name(PX_KONT,'CUP_OUT'));
{! _it:=1.. _dim |! _def.define('PREC'+$_it,MS.name(PX_KONT,'PREC'+$_it),,,MS.name(PX_KONT,'PREC'+$_it),,0) !};
{! _it:=1.. _dim |! _def.define('CAP_INF'+$_it,MS.name(PX_KONT,'CAP_INF'+$_it),,,MS.name(PX_KONT,'CAP_INF'+$_it),,0) !};
_def.define('GRP_MODE',MS.name(PX_KONT,'GRP_MODE'),,,MS.name(PX_KONT,'GRP_MODE'));
_def.define('A',MS.name(PX_KONT,'A'),,,MS.name(PX_KONT,'A'));
_def.define('NAKL_PRC',MS.name(PX_KONT,'NAKL_PRC'),,,MS.name(PX_KONT,'NAKL_PRC'));
_def.define('MAX_CDUR',MS.name(PX_KONT,'MAX_CDUR'),,,MS.name(PX_KONT,'MAX_CDUR'));
_def.define('OFFSET',MS.name(PX_KONT,'OFFSET'),,,MS.name(PX_KONT,'OFFSET'),5);
_def.define('PX_SET',MS.name(PX_KONT,'PX_SET'),,,MS.name(PX_KONT,'PX_SET'));
_def.define('PARALLEL',MS.name(PX_KONT,'PARALLEL'),,,MS.name(PX_KONT,'PARALLEL'));
~~


\record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Uzupełnia bufor tabeli wartościami obiektu
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_dim:=exec('il_wym','px_param');

PX_KONT.prefix();
{? _validate.ACTION='add'
|| PX_KONT.blank();
   PX_KONT.PX_VER:=exec('get_mainversion','px_ver');
   PX_KONT.PL_RES:=_validate.OBJ.PL_RES;
   PX_KONT.KAL:=PX_KONT.PL_RES().KAL_NAZW;
:: PX_KONT.UID wypełniany jest na blank
   PX_KONT.KIND:='R'
?};
PX_KONT.SYMBOL:=_obj.SYMBOL;
PX_KONT.NAZWA:=_obj.NAZWA;
PX_KONT.IL_WYM:=_obj.IL_WYM;
{! _it:=1.. _dim |! ($('PX_KONT.JM%1:=_a.OBJ.JM%1'[$_it]))(_validate) !};
{! _it:=1.. _dim |! ($('PX_KONT.MINEQ%1:=_a.OBJ.MINEQ%1'[$_it]))(_validate) !};
{! _it:=1.. _dim |! ($('PX_KONT.MAXEQ%1:=_a.OBJ.MAXEQ%1'[$_it]))(_validate) !};
PX_KONT.CUPEQ:=_validate.OBJ.CUPEQ;
PX_KONT.CUP_IN:=_validate.OBJ.CUP_IN;
PX_KONT.CUP_OUT:=_validate.OBJ.CUP_OUT;
{! _it:=1.. _dim |! ($('PX_KONT.PREC%1:=_a.PREC%1'[$_it]))(_obj) !};
{! _it:=1.. _dim |! ($('PX_KONT.CAP_INF%1:=_a.OBJ.CAP_INF%1'[$_it]))(_validate) !};
PX_KONT.GRP_MODE:=_obj.GRP_MODE;
PX_KONT.A:=_obj.A;
PX_KONT.NAKL_PRC:=_obj.NAKL_PRC;
PX_KONT.MAX_CDUR:=_obj.MAX_CDUR;
PX_KONT.PX_SET:=_validate.OBJ.PX_SET;
PX_KONT.OFFSET:=_obj.OFFSET;
PX_KONT.PARALLEL:=_obj.PARALLEL;
~~


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_dim:=exec('il_wym','px_param');

_result:=1;
_table.PL_RES.VALUE:=PX_KONT.PL_RES().SYM; _excel.write_async('PL_RES',PX_KONT.PL_RES);
_table.SYMBOL.VALUE:=PX_KONT.SYMBOL;
_table.NAZWA.VALUE:=PX_KONT.NAZWA;
_table.IL_WYM.VALUE:=PX_KONT.IL_WYM;
{! _it:=1.. _dim
|! ($('_b.JM%1.VALUE:=PX_KONT.JM%1().KOD; _a.write_async(\'JM\',PX_KONT.JM%1)'[$_it]))(_excel,_table)
!};
{! _it:=1.. _dim
|! ($('_b.MINEQ%1.VALUE:=PX_KONT.MINEQ%1().SYMBOL; _a.write_async(\'PX_RULES\',PX_KONT.MINEQ%1)'[$_it]))(_excel,_table)
!};
{! _it:=1.. _dim
|! ($('_b.MAXEQ%1.VALUE:=PX_KONT.MAXEQ%1().SYMBOL; _a.write_async(\'PX_RULES\',PX_KONT.MAXEQ%1)'[$_it]))(_excel,_table)
!};
_table.CUPEQ.VALUE:=PX_KONT.CUPEQ().SYMBOL; _excel.write_async('PX_RULES',PX_KONT.CUPEQ);
_table.CUP_IN.VALUE:=PX_KONT.CUP_IN().SYMBOL; _excel.write_async('PX_RULES',PX_KONT.CUP_IN);
_table.CUP_OUT.VALUE:=PX_KONT.CUP_OUT().SYMBOL; _excel.write_async('PX_RULES',PX_KONT.CUP_OUT);
{! _it:=1.. _dim |! ($('_a.PREC%1.VALUE:=PX_KONT.PREC%1'[$_it]))(_table) !};
{! _it:=1.. _dim |! ($('_a.CAP_INF%1.VALUE:=PX_KONT.CAP_INF%1'[$_it]))(_table) !};
_table.GRP_MODE.VALUE:=PX_KONT.GRP_MODE;
_table.A.VALUE:=PX_KONT.A;
_table.NAKL_PRC.VALUE:=PX_KONT.NAKL_PRC;
_table.MAX_CDUR.VALUE:=PX_KONT.MAX_CDUR;
_table.PX_SET.VALUE:=PX_KONT.PX_SET().SYMBOL; _excel.write_async('PX_SET',PX_KONT.PX_SET);
_table.OFFSET.VALUE:=PX_KONT.OFFSET;
_parallel:=PX_KONT.PARALLEL;
{? _parallel=''
|| _parallel:='0'
?};
_table.PARALLEL.VALUE:=_parallel;
_result


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;
_dim:=exec('il_wym','px_param');

_result.RESULT:=1;

exec('mainversion_chk','px_ver');

_fml:="obj_new('SYMBOL','IL_WYM','PL_RES','KAL',";
{! _it:=1.. _dim |! _fml:=_fml+"'JM"+$_it+"'," !};
{! _it:=1.. _dim |! _fml:=_fml+"'MINEQ"+$_it+"'," !};
{! _it:=1.. _dim |! _fml:=_fml+"'MAXEQ"+$_it+"'," !};
{! _it:=1.. _dim |! _fml:=_fml+"'CAP_INF"+$_it+"'," !};
_fml:=_fml+"'CUPEQ','CUP_IN','CUP_OUT','PX_SET')";

_result.OBJ:=($_fml)();

:: Pola: SYMBOL, ILWYM, JM, CAP_INF potrzebne do \chk_dimension_kont/px_kont
_result.OBJ.SYMBOL:=_obj.SYMBOL;
_result.OBJ.IL_WYM:=_obj.IL_WYM;
_result.OBJ.PL_RES:=exec('FindInSet','#table','PL_RES','SYMSYM',_obj.PL_RES,,"PL_RES.ref()",1);
{! _it:=1.. _dim
|! ($('_a.OBJ.CAP_INF%1:=_b.CAP_INF%1'[$_it]))(_result,_obj);
   ($('_a.OBJ.MINEQ%1:=exec(\'FindInSet\',\'#table\',\'PX_RULES\',\'TYP\',_b.MINEQ%1,\'CAP\',"PX_RULES.ref()",1)'
      [$_it]))(_result,_obj);
   ($('_a.OBJ.MAXEQ%1:=exec(\'FindInSet\',\'#table\',\'PX_RULES\',\'TYP\',_b.MAXEQ%1,\'CAP\',"PX_RULES.ref()",1)'
      [$_it]))(_result,_obj);
   ($('_a.OBJ.JM%1:=exec(\'FindInSet\',\'#table\',\'JM\',\'KOD\',_b.JM%1,,"JM.ref()",1)'[$_it]))(_result,_obj)
!};
_result.OBJ.CUPEQ:=exec('FindInSet','#table','PX_RULES','TYP',_obj.CUPEQ,'CUP',"PX_RULES.ref()",1);
_result.OBJ.CUP_IN:=exec('FindInSet','#table','PX_RULES','TYP',_obj.CUP_IN,'IN',"PX_RULES.ref()",1);
_result.OBJ.CUP_OUT:=exec('FindInSet','#table','PX_RULES','TYP',_obj.CUP_OUT,'OUT',"PX_RULES.ref()",1);
_result.OBJ.PX_SET:=exec('FindInSet','#table','PX_SET','SYMBOL',_obj.PX_SET,,"PX_SET.ref()",1);

:: Błędy
{? _obj.IL_WYM<0 | _obj.IL_WYM>5
|| _result.msg_range('IL_WYM',0,5);
   _result.RESULT:=0
?};
_nast_time:=exec('is_oper_nast_time','px_param');
{? _result.RESULT>0
||
   {! _it:=1.. _obj.IL_WYM
   |! {? ($('_a.OBJ.CAP_INF%1<>0 & _a.OBJ.CAP_INF%1<>1'[$_it]))(_result)
      || _result.msg_inset('CAP_INF'+$_it,'0','1');
         _result.RESULT:=0
      ?};
      {? ($('_a.OBJ.CAP_INF%1=0 & _a.OBJ.MINEQ%1=null()'[$_it]))(_result)
      || _result.msg_norec('MINEQ'+$_it);
         _result.RESULT:=0
      ?};
      {? ($('_a.OBJ.CAP_INF%1=0 & _a.OBJ.MAXEQ%1=null()'[$_it]))(_result)
      || _result.msg_norec('MAXEQ'+$_it);
         _result.RESULT:=0
      ?};
      {? ($('_a.OBJ.JM%1=null()'[$_it]))(_result)
      || _result.msg_norec('JM'+$_it);
         _result.RESULT:=0
      ?};
      {? _nast_time=1
      || {? ($('_a.OBJ.CAP_INF%1=0 | _a.OBJ.CAP_INF%1=1'[$_it]))(_result)
         || _jm1:=exec('get','#params',500380);
            _jm2:=exec('get','#params',500381);

            _jm_array:=obj_new(2);
            {? _jm1<>''
            || _jm_array[1]:=_jm1
            || _jm_array[1]:=''
            ?};
            {? _jm2<>''
            || _jm_array[2]:=_jm2
            || _jm_array[2]:=''
            ?};
            _spr:=exec('chk_dimension_kont','px_kont',_jm_array,0,,0,_result.OBJ);
            {? _spr=0
            || _result.MSG:='Włączono następstwo operacji metodą proporcji czasowej (parametr 500370).\n'
                     'Zasób w planie musi mieć przynajmniej jeden wymiar skończony w jednostce \'%1\' lub \'%2\''@[_jm1,_jm2];
               _result.RESULT:=0
            ?};
            obj_del(_jm_array)
         ?}
      ?};
      {? ($('_a.PREC%1>999999999 | _a.PREC%1<0'[$_it]))(_obj)
      || _result.msg_range('PREC'+$_it,0,999999999);
         _result.RESULT:=0
      ?}
   !}
?};
{? _result.OBJ.CUPEQ=null()
|| _result.msg_norec('CUPEQ');
   _result.RESULT:=0
?};
::{? _result.OBJ.CUP_IN=null()
::|| _result.msg_norec('CUP_IN');
::   _result.RESULT:=0
::?};
::{? _result.OBJ.CUP_OUT=null()
::|| _result.msg_norec('CUP_OUT');
::   _result.RESULT:=0
::?};
{? +_obj.GRP_MODE=0 | 'SR'*_obj.GRP_MODE=0
|| _result.msg_inset('GRP_MODE','S','R');
   _result.RESULT:=0
?};
{? +_obj.A=0 | 'TN'*_obj.A=0
|| _result.msg_inset('A','T','N');
   _result.RESULT:=0
?};
{? +_obj.PARALLEL=0 | '10'*_obj.PARALLEL=0
|| _result.msg_inset('PARALLEL','1','0');
   _result.RESULT:=0
?};
{? +_obj.MAX_CDUR=0 | 'DTM'*_obj.MAX_CDUR=0
|| _result.msg_inset('MAX_CDUR','D','T','M');
   _result.RESULT:=0
?};
{? _obj.OFFSET~1>23
|| _result.MSG('Godzina rozpoczęcia pojemników nie może być większa niż %1.'@['23']);
   _result.RESULT:=0
?};

:: Ostrzeżenia
{? +_obj.SYMBOL>60
|| _result.msg_length('SYMBOL',20)
?};
{? +_obj.NAZWA>80
|| _result.msg_length('NAZWA',100)
?};

:: OK
{? _result.RESULT>0
|| PX_KONT.index('ACT');
   PX_KONT.prefix('T',exec('get_mainversion','px_ver'),_obj.SYMBOL,);
   {? PX_KONT.first()
   || {? _mode=0
      || _result.RESULT:=0
      || _result.ACTION:='put';
         exec('record','xls_px_kont',_obj,_mode,_result);
         {? exec('px_kont_arec','px_kont',,1)<>''
         || _result.RESULT:=0
         ?}
      ?}
   || _result.ACTION:='add';
      exec('record','xls_px_kont',_obj,_mode,_result);
      {? exec('px_kont_arec','px_kont',,0)<>''
      || _result.RESULT:=0
      ?}
   ?}
?};
~~


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;

_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PX_KONT.add(1)
   |? _validate.ACTION='put'
   || _result:=PX_KONT.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie zasobu %1 nie powiodło się.'@[_obj.SYMBOL]
   || _validate.MSG:='Poprawa zasobu %1 nie powiodła się.'@[_obj.SYMBOL]
   ?}
?};
_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(2
   ,'SYMBOL','STRING[60]',MS.name(PX_KONT,'SYMBOL')
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'@
   ,'NAZWA','STRING[80]',MS.name(PX_KONT,'NAZWA')
);
_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'SYMBOL',,);

PX_KONT.cntx_psh();
PX_KONT.index('ACT');
PX_KONT.prefix('T',exec('get_mainversion','px_ver'));
{? PX_KONT.first()
|| {!
   |? _tab.blank();
      _tab.REF:=$PX_KONT.ref();
      _selected.prefix($PX_KONT.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.SYMBOL:=PX_KONT.SYMBOL;
      _tab.NAZWA:=PX_KONT.NAZWA;
      _tab.add();
      PX_KONT.next()
   !}
?};
_result:=exec('select_action','#table',_tab,'SYMBOL,NAZWA',30,'Wybór zasobów planu strategicznego do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |? _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
PX_KONT.cntx_pop();
_result

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:42 5a19b1ce848b9aa04c92ae9775ec46a811f084370d4a2083ec81058a0aca7a61f0b4c9c2af97d9b28f8fb47ae8fd09b9bee7b00bdced284cebc89fa6e0ff1b9db79e9d1accc312485512b8d3ab24d2640ada94f4e957821bdc3a2a5d7f983bc21e927c4c37e5cfa7300e38c4f1d965b4395bb346f3705c73bd2b82272faad7e5
