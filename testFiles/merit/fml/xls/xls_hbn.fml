:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xls_hbn.fml
:: Utworzony: 21.08.2018
:: Autor: JK
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi eksportu/importu płatności elektronicznych
::======================================================================================================================


\filename
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Nazwa pliku do eksportu
::----------------------------------------------------------------------------------------------------------------------
'platnosci_elektroniczne.xlsx'


\SKID_RBKZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='SKID_RBKZ';
_def.FUNPAR:='ZWS_PAR_ZUSRACH';
_def.DOMAIN:=exec('name','#b_domain','HBN');
_def.FILE:=exec('filename','xls_hbn');
_def.SHEET:='Rachunki bankowe ZUS'@+'=1,1';
_def.NAME:='Rachunki bankowe ZUS'@;
_def.DESC:='Rachunki bankowe ZUS'@;

_def.PREFIX:="SKID_RBK.index('TAB'); SKID_RBK.prefix()";
_def.TABLE:="exec('SKID_RBKZ_tab','xls_hbn',_a)";
_def.TAB_IMP:="SKID_RBK";
_def.FIELDS:="exec('SKID_RBKZ_fld','xls_hbn',_a)";

_def.BEFORE:="exec('RB','object'); SKID_RBK.cntx_psh()";
_def.AFTER:="SKID_RBK.cntx_pop()";

_def.EXPORT:="exec('SKID_RBKZ_exp','xls_hbn',_a,_b)";
_def.VALIDATE:="exec('SKID_RBKZ_valid','xls_hbn',_a,_b,_c)";
_def.IMPORT:="exec('SKID_RBKZ_imp','xls_hbn',_a,_b,_c)";
_def.SELECT:="exec('SKID_RBKZ_select','xls_hbn',_a)";
~~


\SKID_RBKZ_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;

_tab:=tab_tmp(1,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'TAB','STRING[8]','Tab'
   ,'SLO','STRING[80]','Treść'
   ,'N','STRING[50]','Numer');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'TAB',,);

SKID_RBK.cntx_psh();
SKID_RBK.index('TAB');
SKID_RBK.prefix();
{? SKID_RBK.first()
|| {!
   |?
      {? (SKID_RBK.FIRMA=REF.FIRMA | SKID_RBK.FIRMA=null) & SKID_RBK.TAB='ZUS'
      || _tab.blank();
         _tab.REF:=$SKID_RBK.ref();
         _selected.prefix($SKID_RBK.ref());
         {? _selected.first()
         || _tab.SELECTED:='T'
         || _tab.SELECTED:='N'
         ?};
         _tab.TAB:=SKID_RBK.TAB;
         _tab.SLO:=SKID_RBK.SLO().TR;
         _tab.N:=SKID_RBK.N;
         _tab.add()
      ?};
      SKID_RBK.next()
   !}
?};
_result:=exec('select_action','#table',_tab,'TAB,SLO,N',30,'Wybór rachunków ZUS do eksportu'@,1);
{? _result>0
||
   _selected.erase();

   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
SKID_RBK.cntx_pop();
_result


\SKID_RBKZ_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Zwraca tabelę do eksportu listy parametrów bieżącej firmy
::   WE: _a - tryb pracy: 1-eksport wszystkiego, 2-eksport jednego rekordu
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| sql('select SKID_RBK.REFERENCE as REF,N, OPIS, (\':\' || SKID_RBK.IDADD || SKID_RBK.REFERENCE) as UIDREF from SKID_RBK where TAB=\':_a\' AND (SKID_RBK.FIRMA=:_b OR SKID_RBK.FIRMA IS NULL)','ZUS',REF.FIRMA)
|| SKID_RBK
?}


\SKID_RBKZ_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('TAB','Akronim tabeli',1,,'8 znakowy akronim tabeli'@,2);
_def.define('REF_T','Ref',1,,'27 cyfrowy nr rekordu'@,1);
_def.define('SLU','Slu',1,,'20 znakowa nazwa słownika'@,2);
_def.define('SLO','Slo',1,,'8 znakowy kod tabeli'@,2);
_def.define('N','Numer rachunku bank.',1,,'50 znakowy nr rachunku'@,2);
_def.define('KOD','Kod księgowy',1,,'8 znakowy kod banku'@,2);
_def.define('BANK','Bank',1,,'8 znakowy kod banku'@,2);
_def.define('RD','Rachunek domyślny',1,,'Czy rachunek domyślny? T/N'@,2);
_def.define('SKID_RBK','Nadrzędny SKID_RBK',1,,'27 cyfrowy numer'@,1);
_def.define('KRAJ','Kraj banku',1,,'8 znakowy kod'@,2);
_def.define('WAL','Waluta rachunku',1,,'8 znakowy kod'@,2);
_def.define('INNWAL','Płatności w innej walucie',1,,'Znacznik płatności w walucie'@,2);
_def.define('RS','Rachunek dla subkont',1,,'Czy rachunek wiodący?'@,2);
_def.define('NRS','Numer dla subkont',1,,'10 znakowy symbol'@,2);
_def.define('AKTYWNY','Aktywny',1,,'Czy rachunek aktywny?'@,2);
_def.define('OPIS','Opis',1,,'255 opis rachunku bankowego'@,2);
_def.define('SWIFT','SWIFT',1,,'11 znakowy swift'@,2);
_def.define('VAT','VAT',1,,'Czy rachunek na VAT?'@,2);
_def.define('FIRMA','Firma',1,,'Wskazanie na firmę?'@,2);
~~


\SKID_RBKZ_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_tab:=_excel.table();
_result:=1;
{? _tab=SKID_RBK | SKID_RBK.seek(_tab.REF)
|| _table.TAB.VALUE:=SKID_RBK.TAB;
   _table.REF_T.VALUE:=SKID_RBK.REF;
   _table.SLU.VALUE:=SKID_RBK.SLU().NAZ; _excel.write_async('SLU',SKID_RBK.SLU);
   _table.SLO.VALUE:=SKID_RBK.SLO().KOD; _excel.write_async('SLO',SKID_RBK.SLO);
   _table.N.VALUE:=SKID_RBK.N;
   _table.KOD.VALUE:=SKID_RBK.KOD;
   _table.BANK.VALUE:=SKID_RBK.BANK().NUMER; _excel.write_async('B',SKID_RBK.BANK);
   _table.RD.VALUE:=SKID_RBK.RD;
   _table.SKID_RBK.VALUE:=SKID_RBK.SKID_RBK;
   _table.KRAJ.VALUE:=SKID_RBK.KRAJ().SYM; _excel.write_async('KRAJE',SKID_RBK.KRAJ);
   _table.WAL.VALUE:=SKID_RBK.WAL().KOD; _excel.write_async('SLO',SKID_RBK.WAL);
   _table.INNWAL.VALUE:=SKID_RBK.INNWAL;
   _table.RS.VALUE:=SKID_RBK.RS;
   _table.NRS.VALUE:=SKID_RBK.NRS;
   _table.AKTYWNY.VALUE:=SKID_RBK.AKTYWNY;
   _table.OPIS.VALUE:=SKID_RBK.OPIS;
   _table.SWIFT.VALUE:=SKID_RBK.SWIFT;
   _table.VAT.VALUE:=SKID_RBK.VAT;
   _table.FIRMA.VALUE:=SKID_RBK.FIRMA().SYMBOL
?};
_result


\SKID_RBKZ_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

{? _table.SLU <> ''
|| _slu:=exec('FindInSet','#table','SLU','NAZ',_table.SLU,,,1);
   {? _slu=null
   || _result.MSG:='Nie odnaleziono słownika użytkownika'@;
      _result.RESULT:=0
   ?};
   {? _table.SLO <> ''
   || _slo:=exec('FindInSet','#table','SLO','SL',_table.SLO,_slu,,1);
      {? _slo=null
      || _result.MSG:='Nie odnaleziono pozycji w słowniku użytkownika'@;
         _result.RESULT:=0
      ?}
   ?}
|| _slu:=null;
   _slo:=null
?};

{? _table.FIRMA<>''
|| _firma:=exec('FindInSet','#table','FIRMA','SYMBOL',_table.FIRMA,,,1)
|| _firma:=null
?};

SKID_RBK.index('TAB');
SKID_RBK.prefix(_firma,_table.TAB,_table.TAB,_table.REF_T,_slo,_table.N,_table.N);
{? SKID_RBK.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || SKID_RBK.blank() ?};
   SKID_RBK.KOD:=_table.KOD;
   SKID_RBK.TAB:=_table.TAB;
   SKID_RBK.REF:=_table.REF_T;
   SKID_RBK.SLU:=_slu;
   SKID_RBK.SLO:=_slo;
   SKID_RBK.N:=_table.N;
   SKID_RBK.KOD:=_table.KOD;
   SKID_RBK.BANK:=exec('FindInSet','#table','B','BANKID',_table.BANK,,,1);
   SKID_RBK.RD:=_table.RD;
   SKID_RBK.SKID_RBK:=_table.SKID_RBK;
   SKID_RBK.KRAJ:=exec('FindInSet','#table','KRAJE','KRAJE',_table.KRAJ,,,1);
   SKID_RBK.WAL:=exec('FindInSet','#table','WAL','WAL_KOD',_table.WAL,,,1);
   SKID_RBK.INNWAL:=_table.INNWAL;
   SKID_RBK.RS:=_table.RS;
   SKID_RBK.NRS:=_table.NRS;
   SKID_RBK.AKTYWNY:=_table.AKTYWNY;
   SKID_RBK.OPIS:=_table.OPIS;
   SKID_RBK.SWIFT:=_table.SWIFT;
   SKID_RBK.VAT:=_table.VAT;
   SKID_RBK.FIRMA:=_firma
?};
~~


\SKID_RBKZ_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=SKID_RBK.add(1)
   |? _validate.ACTION='put'
   || _result:=SKID_RBK.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie rachunku banku %1 nie powiodło się.'@[_obj.TAB]
   || _validate.MSG:='Poprawa rachunku banku %1 nie powiodła się.'@[_obj.TAB]
   ?}
?};
_result


\PL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='PL';
_def.FILE:=exec('filename','xls_hbn');
_def.FUNPAR:='ZWS_PAR_STDPL';
_def.DOMAIN:=exec('name','#b_domain','HBN');
_def.SHEET:='Standardy polskich liter'@+'=1,1';
_def.NAME:='Standardy polskich liter'@;
_def.DESC:='Standardy polskich liter'@;
_def.MULTIFIR:='T';

_def.PREFIX:="PL.index('KOD'); PL.prefix()";
_def.TABLE:="PL";
_def.FIELDS:="exec('PL_fld','xls_hbn',_a)";

_def.BEFORE:="PL.cntx_psh()";
_def.AFTER:="PL.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('PL_exp','xls_hbn',_a,_b)";
_def.VALIDATE:="exec('PL_valid','xls_hbn',_a,_b,_c)";
_def.IMPORT:="exec('PL_imp','xls_hbn',_a,_b,_c)";

~~


\PL_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KDPL','Kod',1,,'3 znakowy symbol');
_def.define('NPL','Nazwa',1,,'20 znakowa nazwa standardu');
_def.define('AD','Ą ->',1,,'3 liczbowy kod',,0);
_def.define('CD','Ć ->',1,,'3 liczbowy kod',,0);
_def.define('ED','Ę ->',1,,'3 liczbowy kod',,0);
_def.define('LD','Ł ->',1,,'3 liczbowy kod',,0);
_def.define('ND','Ń ->',1,,'3 liczbowy kod',,0);
_def.define('OD','Ó ->',1,,'3 liczbowy kod',,0);
_def.define('SD','Ś ->',1,,'3 liczbowy kod',,0);
_def.define('ZID','Ź ->',1,,'3 liczbowy kod',,0);
_def.define('ZD','Ż ->',1,,'3 liczbowy kod',,0);
_def.define('AM','ą ->',1,,'3 liczbowy kod',,0);
_def.define('CM','ć ->',1,,'3 liczbowy kod',,0);
_def.define('EM','ę ->',1,,'3 liczbowy kod',,0);
_def.define('LM','ł ->',1,,'3 liczbowy kod',,0);
_def.define('NM','ń ->',1,,'3 liczbowy kod',,0);
_def.define('OM','ó ->',1,,'3 liczbowy kod',,0);
_def.define('SM','ś ->',1,,'3 liczbowy kod',,0);
_def.define('ZIM','ź ->',1,,'3 liczbowy kod',,0);
_def.define('ZM','ż ->',1,,'3 liczbowy kod',,0);
_def.define('SYS','Funkcja',1,,'255 znakowa funkcja dekodująca');
~~


\PL_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;

_result:=1;
_table.KDPL.VALUE:=PL.KDPL;
_table.NPL.VALUE:=PL.NPL;
_table.AD.VALUE:=PL.AD;
_table.CD.VALUE:=PL.CD;
_table.ED.VALUE:=PL.ED;
_table.LD.VALUE:=PL.LD;
_table.ND.VALUE:=PL.ND;
_table.OD.VALUE:=PL.OD;
_table.SD.VALUE:=PL.SD;
_table.ZID.VALUE:=PL.ZID;
_table.ZD.VALUE:=PL.ZD;
_table.AM.VALUE:=PL.AM;
_table.CM.VALUE:=PL.CM;
_table.EM.VALUE:=PL.EM;
_table.LM.VALUE:=PL.LM;
_table.NM.VALUE:=PL.NM;
_table.OM.VALUE:=PL.OM;
_table.SM.VALUE:=PL.SM;
_table.ZIM.VALUE:=PL.ZIM;
_table.ZM.VALUE:=PL.ZM;
_table.SYS.VALUE:=PL.SYS;

_result


\PL_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _table.KDPL='' || 'KDPL'
   |? _table.NPL='' || 'NPL'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

_fld:=
   {? _table.AD>255 | _table.AD<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.CD>255 | _table.CD<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.ED>255 | _table.ED<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.LD>255 | _table.LD<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.ND>255 | _table.ND<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.OD>255 | _table.OD<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.SD>255 | _table.SD<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.ZID>255 | _table.ZID<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.ZD>255 | _table.ZD<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.AM>255 | _table.AM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.CM>255 | _table.CM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.EM>255 | _table.EM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.LM>255 | _table.LM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.NM>255 |  _table.NM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.OM>255 | _table.OM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.SM>255 | _table.SM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.ZIM>255 | _table.ZIM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   |? _table.ZM>255 | _table.ZM<0 || _result.MSG:='Pole z kodem znaku musi być z przedziału <0;256)'@; _result.RESULT:=0
   ?};

PL.index('KOD');
PL.prefix(_table.KDPL,_table.NPL);
{? PL.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || PL.blank() ?};
   PL.KDPL:=_table.KDPL;
   PL.NPL:=_table.NPL;
   PL.AD:=_table.AD;
   PL.CD:=_table.CD;
   PL.ED:=_table.ED;
   PL.LD:=_table.LD;
   PL.ND:=_table.ND;
   PL.OD:=_table.OD;
   PL.SD:=_table.SD;
   PL.ZID:=_table.ZID;
   PL.ZD:=_table.ZD;
   PL.AM:=_table.AM;
   PL.CM:=_table.CM;
   PL.EM:=_table.EM;
   PL.LM:=_table.LM;
   PL.NM:=_table.NM;
   PL.OM:=_table.OM;
   PL.SM:=_table.SM;
   PL.ZIM:=_table.ZIM;
   PL.ZM:=_table.ZM;
   PL.SYS:=_table.SYS;
   {? exec('chk_rec_pl','homebank',_result.ACTION='add')<>''
   || _result.RESULT:=0
   ?}
?};
~~


\PL_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=PL.add(1)
   |? _validate.ACTION='put'
   || _result:=PL.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie standardu polskich znaków o kodzie %1 nie powiodło się.'@[_obj.KDPL]
   || _validate.MSG:='Poprawa standardu polskich znaków o kodzie %1 nie powiodła się.'@[_obj.KDPL]
   ?}
?};
_result


\HBPKI
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='HBPKI';
_def.FUNPAR:='ZWS_PAR_SPCBANK';
_def.FILE:=exec('filename','xls_hbn');
_def.DOMAIN:=exec('name','#b_domain','HBN');
_def.SHEET:='Specyfikacje bankowe'@+'=1,1';
_def.NAME:='Specyfikacje bankowe - specyfikacje importu/exportu'@;
_def.DESC:='Specyfikacje bankowe - specyfikacje importu/exportu'@;
_def.ADD_ROWS:=0;
_def.MULTIFIR:='T';

_def.PREFIX:="HBPKI.index('HBPKIBT'); HBPKI.prefix()";
_def.TABLE:="HBPKI";
_def.FIELDS:="exec('HBPKI_fld','xls_hbn',_a)";

_def.BEFORE:="HBPKI.cntx_psh()";
_def.AFTER:="HBPKI.cntx_pop()";
_def.SELECT:="exec('HBPKI_select','xls_hbn',_a)";

_def.EXPORT:="exec('HBPKI_exp','xls_hbn',_a,_b)";
_def.VALIDATE:="1";
_def.IMPORT:="exec('HBPKI_imp','xls_hbn',_a,_b,_c)";
~~


\HBPKI_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('NUMER','Numer banku',0,,'8 znakowy kod banku'@);
_def.define('NB','Nazwa banku',0,,'80 znakowa nazwa banku'@);
_def.define('TPK','Typ pliku',0,,'50 znakowa nazwa spcyfikacji'@);
_def.define('RODZ','Rodzaj specyfikacji',0,,'1 znakowy rodzaj specyfikacji'@);
_def.define('PD','Nazwa pliku',0,,'Nazwa pliku z rozszerzeniem'@);
~~


\HBPKI_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_excel.DIR;

_result:=1;
_table.NUMER.VALUE:=HBPKI.KDB().NUMER; _excel.write_async('B',HBPKI.KDB);
_table.NB.VALUE:=HBPKI.KDB().NB;
_table.TPK.VALUE:=HBPKI.TPK;
_table.RODZ.VALUE:={? HBPKI.RODZ='K' || 'Import kursów'
                   |? HBPKI.RODZ='E' || 'Eksport przelewów'
                   |? HBPKI.RODZ='I' || 'Import wyciągów'
                   |? HBPKI.RODZ='S' || 'Zapytanie o saldo'
                   || ''
                   ?};
HBP.cntx_psh();
_table.PD.VALUE:=HBPKI.KDB().NUMER+'_'+STR.maz2nop(HBPKI.TPK)+'.fsp';
exec('spc_exp','homebank',_excel.DIR,_excel.DIR_ON_SERVER);
HBP.cntx_pop();
_result


\HBPKI_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;

_fld:=
   {? _obj.PD='' || 'PD'
   || ''
   ?};
{? _fld<>''
:  katastrofa
|| _result.msg_empty(_fld);
   _result.RESULT:=0;
   return()
?};

_file:={? EXCEL_ENV.DIR_ON_SERVER || '' || '@' ?}+EXCEL_ENV.DIR+'/'+_obj.PD;
{? fexists(_file)
|| exec('spc_imp','homebank',_file,1,1,1)
|| _result.MSG:='Błąd przy próbie odczytywania pliku: %1'@[_obj.PD]; _result.RESULT:=0
?};
~~


\HBPKI_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Umożliwia wybór rekordów do eksportu
::   WE: _a - tab_tmp - tabela tymczasowa z polem REF którą należy zasilić
::   WY: 0 - użytkownik zrezygnował z wyboru
::       1 - użytkownik potwierdził wybór
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;

_result:=0;
_tab:=tab_tmp(1,'NUMER','STRING[8]','Rachunek'
   ,'REF','STRING[16]','SQL ref'
   ,'SELECTED','STRING[1]','Czy wybrano'
   ,'NB','STRING[80]','Bank'
   ,'TPK','STRING[50]','Typ pliku'
   ,'RODZ','STRING[39]','Rodzaj');

_ndx:=_tab.ndx_tmp(,,'SELECTED',,,'NUMER',,);

HBPKI.cntx_psh();
HBPKI.index('HBPKIBT');
HBPKI.prefix();
{? HBPKI.first()
|| {!
   |?
      _tab.blank();
      _tab.REF:=$HBPKI.ref();
      _selected.prefix($HBPKI.ref());
      {? _selected.first()
      || _tab.SELECTED:='T'
      || _tab.SELECTED:='N'
      ?};
      _tab.NUMER:=HBPKI.KDB().NUMER;
      _tab.NB:=HBPKI.KDB().NB;
      _tab.RODZ:={? HBPKI.RODZ='K' || 'Import kursów'
                 |? HBPKI.RODZ='E' || 'Eksport przelewów'
                 |? HBPKI.RODZ='I' || 'Import wyciągów'
                 |? HBPKI.RODZ='S' || 'Zapytanie o saldo'
                 || ''
                 ?};
      _tab.TPK:=HBPKI.TPK;
      _tab.add();
      HBPKI.next()
   !}
?};
_result:=exec('select_action','#table',_tab
 ,'NUMER,NB,RODZ,TPK',20,'Wybór specyfikacji bankowych do eksportu'@,1);
{? _result>0
||
   _selected.erase();
   _tab.index(_ndx);
   _tab.prefix('T');
   {? _tab.first()
   || {!
      |?
         _selected.prefix(_tab.REF);
         {? _selected.first()=0
         || _selected.blank();
            _selected.REF:=_tab.REF;
            _selected.add()
         ?};
         _tab.next()
      !}
   ?}
?};
HBPKI.cntx_pop();
_result


\HBKN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Inicjalizuje mechanizm importu/eksportu do Excel
::   WE: _a - obj_new - środowisko mechanizmu
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.ID:='HBKN';
_def.FUNPAR:='ZWS_PAR_SPCBANK';
_def.DOMAIN:=exec('name','#b_domain','HBN');
_def.FILE:=exec('filename','xls_hbn');
_def.SHEET:='Kody pól'@+'=1,1';
_def.NAME:='Specyfikacje bankowe - kody pól'@;
_def.DESC:='Specyfikacje bankowe - kody pól'@;
_def.MULTIFIR:='T';

_def.PREFIX:="HBKN.index('HBKOD'); HBKN.prefix()";
_def.TABLE:="HBKN";
_def.FIELDS:="exec('HBKN_fld','xls_hbn',_a)";

_def.BEFORE:="HBKN.cntx_psh()";
_def.AFTER:="HBKN.cntx_pop()";
_def.SELECT:="";

_def.EXPORT:="exec('HBKN_exp','xls_hbn',_a,_b)";
_def.VALIDATE:="exec('HBKN_valid','xls_hbn',_a,_b,_c)";
_def.IMPORT:="exec('HBKN_imp','xls_hbn',_a,_b,_c)";
_def.SELECT:="";
~~


\HBKN_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Określa pola tabeli
::   WE: _a - obiekt z definicją pól który należy zasilić
::----------------------------------------------------------------------------------------------------------------------
_def:=_a;
_def.define('KD','Kod',1,,'1 znakowy kod pola'@);
_def.define('NP','Nazwa pola',1,,'20 znakowa nazwa pola'@);
~~


\HBKN_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Wypełnia obiekt który zapisze w Excel wiersz danymi z rekordu
::       Użycie: export
::   WE: _a - obj_new - środowisko mechanizmu
::       _b - obj_new - obiekt który zasilić wartościami z pól
::   WY: ANY - dowolny wynik (zwracany przez _excel.write_async())
::----------------------------------------------------------------------------------------------------------------------
_excel:=_a;
_table:=_b;
_result:=1;
_table.KD.VALUE:=HBKN.KD;
_table.NP.VALUE:=HBKN.NP;
_result


\HBKN_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Waliduje czy można poprawić/dodać rekord
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów do przekazania dla import)
::  OLD: \KS_ZEST_valid/xls_ks.fml
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_mode:=_b;
_result:=_c;
_result.RESULT:=1;
HBKN.index('HBKOD');
HBKN.prefix(_table.KD);
{? HBKN.first()
|| {? _mode=0
   || _result.RESULT:=0
   || _result.ACTION:='put'
   ?}
|| _result.ACTION:='add'
?};
{? _result.RESULT=1
|| {? _result.ACTION='add' || HBKN.blank() ?};
   HBKN.KD:=_table.KD;
   HBKN.NP:=_table.NP
?};
~~


\HBKN_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [18.42]
:: OPIS: Tworzy lub modyfikuje rekord na podstawie wartości odczytanych z Excel
::       Użycie: import
::   WE: _a - obj_new() - tablica nazwana z polami odczytanymi z excel
::       _b - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::       _c - obiekt Result, zawiera .RESULT, .ACTION, .OBJ (własna tablica parametrów)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_mode:=_b;
_validate:=_c;
_result:=0;
{? _validate.RESULT=1
|| {? _validate.ACTION='add'
   || _result:=HBKN.add(1)
   |? _validate.ACTION='put'
   || _result:=HBKN.put(1)
   ?}
?};
{? _result=0
|| {? _validate.ACTION='add'
   || _validate.MSG:='Dodanie kodu pola %1 nie powiodło się.'@[_obj.KD]
   || _validate.MSG:='Poprawa kodu pola %1 nie powiodła się.'@[_obj.KD]
   ?}
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:17:11 a999b7a94a0a999945191059bd5a787ac66b84551920ad5362a0a003dcbb573479b0ac7961648951574192f553aee67e2feb4d3d0170a264e679cb4ecf2ec7f03e28a84a35537ec685ccd5d1f3b0bc0c4610da5ab04b06875bf81b909b7b32a6fd7fdb79de96a737d4dcaf8d7123dbcca6c9031da5a3ee60142f7c5f6861f7b9
