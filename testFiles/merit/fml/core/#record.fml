:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #record.fml
:: Utworzony: 2014/12/17
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Deklaracja obiektu i funkcje pomocnicze do sprawdzania poprawności danych (wypełnienie, unikalność)
::            Wykorzystywane w opisach pojęcie "uchwyt tabeli" oznacza akronim tabeli lub zmiennej strukturalnej podany
::            wprost np.: P, OSOBA, a nie w postaci ciągu znaków (odpowiednio: 'P', 'OSOBA')
::======================================================================================================================


\CHECK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Deklaracja klasy obiektu sprawdzającego poprawność danych i unikalność kluczy.
::----------------------------------------------------------------------------------------------------------------------
: zakończ, jeśli klasa została już zadeklarowana
{? var_pres('CHECK',@.CLASS)>0 || return ?};

obj_decl('CHECK',
   obj_fld('empty',~~),

   obj_meth('__init',"
      .empty:=obj_new(7);
      .empty[1]:=0;
      .empty[2]:='';
      .empty[3]:=$'';
      .empty[4]:=date(0,0,0);
      .empty[5]:=time(0,0,0);
      .empty[7]:=null
   "),

   obj_meth('field',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza wypełnienie pola tabeli / zmiennej strukturalnej
::   WE: _a - uchwyt tabeli / zmiennej, której pole ma być sprawdzane
::       _b - akronim sprawdzanego pola
::   WY: 1 - pole jest wypełnione, 0 - pole jest puste
::  OLD: \chk_fld/util.fml
::  OLD: \chk_fld/skid_app.fml
::UWAGA: funkcja nie sprawdza, czy dane pole istnieje w schemacie tabeli, jeśli podany zostanie akronim nieistniejącego
::       pola, spowoduje to wystąpienie błędu składni
::----------------------------------------------------------------------------------------------------------------------
   "  _vp:=var_pres(_b,_a);
      {? _vp=36
:        Pola typu SYS_MEMO wymagają specjalnej obsługi.
      || return(($('_a.memo_txt(,,_b)'))(_a,_b)<>'')
      ?};

      _data:=($('_a.'+_b))(_a);
      {? _vp=33
:        Pola typu BLOB wymagają specjalnej obsługi.
      || ($('_a.bl_file(_b)'))(_a,_b)<>'' | _data<>null()
      || _data<>.empty[type_of(_data)]
      ?}
   ",type_of(SYSLOG),type_of('')),


   obj_meth('in_set',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy pole zawiera dopuszczalną wartość.
::   WE: _a - uchwyt tabeli, której pole będzie sprawdzane
::       _b - akronim pola
::       _c - wyświetlanie komunikatu o niewypełnieniu pola
::            wyłączona - dowolna wartość typu liczbowego
::            włączona - pominięty lub typu nie liczbowego
::       ... - dopuszczalne wartości pola
::  OLD: \test_set/util.fml
::----------------------------------------------------------------------------------------------------------------------
   "  _value:=($('_a.'+_b))(_a);
      {! _arg:=4.._
      |! {? var_pres('_['+$_arg+']')=type_of(_value)
         || {? _value=_[_arg]
            || return(1)
            ?}
         ?}
      !};
      {? var_pres('_c')<>type_of(0)
::       Jeżeli sprawdzana wartość jest typu napisowego, to $_value będzie typu formułowego, a parametr powinien być
::       typu napisowego. Dlatego wymuszamy zmianę typu dodając pusty napis do napisu lub formuły.
      || .err_msg('Pole \"%1\" nie akceptuje wartości %2.'@ [_b,''+$_value])
      ?};
      0
   ",type_of(SYSLOG),type_of('')),

   obj_meth('not_null',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Metoda narzędziowa dla wyzwalaczy. Sprawdza, czy podane pola zostały wypełnione. Jeżeli lista pól jest pusta,
::       to sprawdzane są wszystkie pola.
::   WE:  _a  [TABLE]  - Uchwyt tabeli.
::       [_b] [STRING] - Akronim pola.
::       [_c] [STRING] - Akronim pola.
::       [_d] [STRING] - Akronim pola.
::       [_e] [STRING] - Akronim pola.
::       [_f] [STRING] - Akronim pola.
::   WY: 1 - Wszystkie pola są wypełnione.
::       0 - Co najmniej jedno pole nie zostało wypełnione.
::  OLD: \not_null/util.fml
::----------------------------------------------------------------------------------------------------------------------
   "  {? var_pres('_a')=type_of(SYSLOG)
      || _TAB:=_a
      || return(0)
      ?};

      _empty:='';
      _ts:=type_of('');
      {? _>1
      || {! _lp:=2 .. _
         |? _empty=''
         |! _fld:=_[_lp];
            {? type_of(_fld)=_ts
            || {? ~.field(_TAB,_fld)
               || _empty:=_fld
               ?}
            ?}
         !}
      || _empty:=.record(_TAB,1)
      ?};
      {? _empty=''
      || 1
      || .err_msg('Pole %1 nie akceptuje wartości pustej.'@ [2-!_TAB+'.'+_empty]);
         0
      ?}
   ",type_of(SYSLOG)),

   obj_meth('record',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza wypełnienie określonych pól tabeli / zmiennej strukturalnej.
::   WE: _a - uchwyt tabeli / zmiennej, której pola będą sprawdzane
::       _b - wyświetlanie komunikatu o niewypełnieniu pola
::            wyłączona - dowolna wartość typu liczbowego
::            włączona - pominięty lub typu nie liczbowego
::       _c - akronim pola do sprawdzenia, jeśli do akronimu pola dodany zostanie znak '!', to dla tego pola zostanie
::            odwrócone znaczenie argumentu _b
::       .. -          --- || ---
::       _? -          --- || ---
::   WY: jeśli pola są wypełnione pusty ciąg znaków, w przeciwnym wypadku, akronim pierwszego pustego pola
::  OLD: \chk_rec/util.fml
::  OLD: \chk_rec/skid_app.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  _b:=(var_pres('_b')<>type_of(0));
      _idadd_acr:=_a.idadd_acr();
      _idput_acr:=_a.idput_acr();

      {? _<3
      || {! _num:=1.._a.fld_num
         |! _acr:=_a.fld_acr(_num);
            {? _acr<>_idadd_acr & _acr<>_idput_acr
            || {? ~.field(_a,_acr)
               || {? _b
                  || .err_fld(_a,_acr)
                  ?};
                  return(_acr)
               ?}
            ?}
         !}
      || {! _arg:=3.._
         |! _fld_id:=_[_arg]-(_[_arg]+1='!');
            _found:=0;
            {! _num:=1.._a.fld_num
            |? ~_found
            |! {? _fld_id<>_idadd_acr & _fld_id<>_idput_acr & _fld_id=_a.fld_acr(_num)
               || _found:=1;
                  {? ~.field(_a,_fld_id)
                  || {? {? _[_arg]+1='!' || ~_b || _b ?}
                     || .err_fld(_a,_fld_id)
                     ?};
                     return(_fld_id)
                  ?}
               ?}
            !}
         !}
      ?};
      ''
   ",type_of(SYSLOG)),

   obj_meth('record2',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Sprawdza wypełnienie określonych pól tabeli / zmiennej strukturalnej.
::   WE: _a - uchwyt tabeli / zmiennej, której pola będą sprawdzane
::       _b - akronim pola do sprawdzenia
::       _c - nazwa pola
::       pary akronim i nazwa
::       -- || --
::   WY: jeśli pola są wypełnione pusty ciąg znaków, w przeciwnym wypadku, akronim pierwszego pustego pola
::----------------------------------------------------------------------------------------------------------------------
   "  {! _arg:=1..(_-1)/2
      |! {! _num:=1.._a.fld_num()
         |! _acr:=_a.fld_acr(_num);
            {? _acr=_[_arg*2] & ~.field(_a,_acr)
            || _naz:={? _[_arg*2+1]=~~ || _a.fld_name(_num) || _[_arg*2+1] ?};
               .err_empty(_naz);
               return(_acr)
            ?}
         !}
      !};
      ''
   ",type_of(SYSLOG)),

   obj_meth('record3',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Sprawdza wypełnienie określonych pól tabeli / zmiennej strukturalnej.
::   WE: _a - uchwyt tabeli / zmiennej, której pola będą sprawdzane
::       _b - akronim pola do sprawdzenia
::       _c - nazwa pola
::       trójki: uchwyt tabeli, akronim i nazwa pola
::       -- || --
::   WY: jeśli pola są wypełnione pusty ciąg znaków, w przeciwnym wypadku, akronim pierwszego pustego pola
::----------------------------------------------------------------------------------------------------------------------
   "  {! _arg:=1.._/3
      |! _tab:=_[_arg*3-2];
         {! _num:=1.._tab.fld_num()
         |! _acr:=_tab.fld_acr(_num);
            {? _acr=_[_arg*3-1] & ~.field(_tab,_acr)
            || _naz:={? _[_arg*3]=~~ || _tab.fld_name(_num) || _[_arg*3] ?};
               .err_empty(_naz);
               return(_acr)
            ?}
         !};
         &_tab
      !};
      ''
   ",type_of(SYSLOG)),

   obj_meth('index',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy klucz indeksowy nie został naruszony
::   WE: _a - tabela, której klucze mają być przetestowane
::       _b - specyfikacja testu (0 - dołączanie, nie 0 - poprawianie)
::       _c - wyświetlanie komunikatów
::            wyłączone - dowolna wartość typu liczbowego
::            włączone - pominięty lub typu nie liczbowego
::   WY: akronim naruszonego klucza / tekst pusty jeśli test przebiegł pomyślnie
::  OLD: \chk_ndx/util.fml
::----------------------------------------------------------------------------------------------------------------------
   "  {! _ndx_num:=1.._a.ndx_num
      |! {? _a.ndx_uniq(_ndx_num)<>0
         || _acr:=_a.ndx_acr(_ndx_num);

            _test:=
               '_ref:={? _b || _a.ref || null ?}; '+
               '{| _a |! cntx_psh; index(_c); prefix; '+
               '_ret:=find_key(';
            _lfld:='';
            {! _fld_num:=1.._a.ndx_nfld(_ndx_num)
            |! _lfld:=_a.ndx_afld(_ndx_num,_fld_num);
               _link:=_a.ndx_jfld(_ndx_num,_fld_num);
               _test+=_lfld;
               {? _link<>''
               || _test+='().'+_link
               ?};
               _test+=','
            !};
            {? var_pres(_lfld,_a)<>27
            || _test:=_test-1
            ?};
            _test+=') & ref<>_ref; cntx_pop |}; _ret';

            {? ($(_test))(_a,_b,_acr)
            || {? var_pres('_c')<>type_of(0)
               || .err_ndx(_a,_acr,_b)
               ?};
               return(_acr)
            ?}
         ?}
      !};
      ''
   ",type_of(SYSLOG),type_of(0)),

   obj_meth('index',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
::  MOD: MicKoc [20.42]
:: OPIS: Sprawdza, czy klucz indeksowy nie został naruszony
::   WE: _a - tabela, której klucze mają być przetestowane
::       _b - akronim indeksu do sprawdzenia, wymuszenie sprawdzenia unikalności wg wskazanego indeksu
::       _c - specyfikacja testu (0 - dołączanie, nie 0 - poprawianie)
::       _d - wyświetlanie komunikatów
::            wyłączone - dowolna wartość typu liczbowego
::            włączone - pominięty lub typu nie liczbowego
::   WY: akronim naruszonego klucza / tekst pusty jeśli test przebiegł pomyślnie
::  OLD: \chk_ndx/util.fml
::----------------------------------------------------------------------------------------------------------------------
   "  {? _ndx_num:=_a.ndx_no(_b)
      || _acr:=_b;
         _test:=
            '_ref:={? _b || _a.ref || null ?}; '+
            '{| _a |! cntx_psh; index(_c); prefix; '+
            '_ret:=find_key(';
         _lfld:='';
         {! _fld_num:=1.._a.ndx_nfld(_ndx_num)
         |! _lfld:=_a.ndx_afld(_ndx_num,_fld_num);
            _link:=_a.ndx_jfld(_ndx_num,_fld_num);
            _test+=_lfld;
            {? _link<>''
            || _test+='().'+_link
            ?};
            _test+=','
         !};
         {? var_pres(_lfld,_a)<>27
         || _test:=_test-1
         ?};
         _test+=') & ref<>_ref; cntx_pop |}; _ret';

         {? ($(_test))(_a,_c,_acr)
         || {? var_pres('_d')<>type_of(0)
            || .err_ndx(_a,_acr,_c)
            ?};
            return(_acr)
         ?}
      ?};
      ''
   ",type_of(SYSLOG),type_of(''), type_of(0)),

   obj_meth('table',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza wypełnienie wszystkich pól tabeli i unikalność kluczy
::   WE: _a - uchwyt tabeli, której pola i indeksy będą sprawdzane
::       _b - specyfikacja testu (0 - dołączanie, nie 0 - poprawianie)
::       _c - wyświetlanie komunikatów
::            wyłączona - dowolna wartość typu liczbowego
::            włączona - pominięty lub typu nie liczbowego
::       .. - opcjonalnie akronimy pól do sprawdzenia
::   WY: wynik przeprowadzonego testu
::       - akronim pustego pola, jeśli wymagane pole nie zostało wypełnione
::       - 0 jeśli zapis naruszałby unikalne klucze
::       - 1 jeśli rekord został uznany za poprawny
::  OLD: \chk_tab/util.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  _flds:='';
      _c:={? var_pres('_c')=type_of(0) || _c || ~~ ?};
      {? _>3 || {! _arg:=4.._ |! _flds+=',\\\''+_[_arg]+'\\\'' !} ?};
      {? (_chk:=($('_a.record(_b,_c'+_flds+')'))(.,_a,_c))=''
      || ($('_a.index(_b,_c,_d)'))(.,_a,_b,_c)=''
      || _chk
      ?}
   ",type_of(SYSLOG),type_of(0)),

   obj_meth('err_fld',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla komunikat o niewypełnionym polu tabeli / zmiennej.
::   WE: _a - uchwyt tabeli / zmiennej, której pola będą sprawdzane
::       _b - akronim pola, dla którego ma być wyświetlony komunikat
::       _c - (opcjonalny) rodzaj komunikatu 0 - (domyślnie) pusta wartość pola, 1 - błędna wartość pola
::       _d - (opcjonalny) dodatkowy komunikat do doklejenia w przypadku gdy parametr _c=1
::  OLD: \fld_err/util.fml
::  OLD: \fld_err/skid_app.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  _c:={? var_pres('_c')=type_of(0) || _c || 0 ?};
      {! _num:=1.._a.fld_num
      |! {? _a.fld_acr(_num)=_b
         || {? _c
            || {? do_state()=0
               || .err_incorrect(_a.fld_name(_num),{? var_pres('_d')=type_of('') || _d || '' ?})
               || .err_incorrect(_a,_a.fld_name(_num),{? var_pres('_d')=type_of('') || _d || '' ?})
               ?}
            || {? do_state()=0
               || .err_empty(_a.fld_name(_num))
               || .err_empty(_a,_a.fld_name(_num))
               ?}
            ?};
            return(_b)
         ?}
      !};
      ~~
   ",type_of(SYSLOG),type_of('')),

   obj_meth('empty_msg',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca treść komunikatu o braku wypełnienia pola.
::   WE: _a - nazwa pola, dla którego ma być wyświetlony komunikat
::       _b - (opcjonalny) jeśli różny od zera doklejony nowy wiersz o treści 'Należy uzupełnić brakujące informacje.'
::            w każdym innym przypadku ignorowany
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  'Pole \"%1\" musi być wypełnione.'@ [_a]+
      {? var_pres('_b')=type_of(0) & _b<>0
      || '\n'+'Należy uzupełnić brakujące informacje.'@
      || ''
      ?}
   ",type_of('')),

   obj_meth('empty_msg',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Metoda zwraca treść komunikatu o braku wypełnienia pola.
::   WE: _a - alias tabeli
::       _b - nazwa pola, dla którego ma być wyświetlony komunikat
::       _c - (opcjonalny) jeśli różny od zera doklejony nowy wiersz o treści 'Należy uzupełnić brakujące informacje.'
::            w każdym innym przypadku ignorowany
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  'Pole \"%2\" tabeli %1 musi być wypełnione.'@[2-!_a,_b]+
      {? var_pres('_c')=type_of(0) & _c<>0
      || '\n'+'Należy uzupełnić brakujące informacje.'@
      || ''
      ?}
   ",type_of(SYSLOG),type_of('')),

   obj_meth('err_empty',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla komunikat o niewypełnionym polu tabeli / zmiennej.
::   WE: _a - nazwa pola, dla którego ma być wyświetlony komunikat
::  OLD: \fld_err/util.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  .err_msg(.empty_msg(_a,1))
   ",type_of('')),

   obj_meth('err_empty',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Wyświetla komunikat o niewypełnionym polu tabeli / zmiennej.
::   WE: _a - alias tabeli
::       _b - nazwa pola, dla którego ma być wyświetlony komunikat
::  OLD: \fld_err/util.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  .err_msg(.empty_msg(_a,_b,1))
   ",type_of(SYSLOG),type_of('')),

   obj_meth('err_incorrect',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wyświetla komunikat o niepoprawnej wartości pola tabeli / zmiennej.
::   WE: _a - nazwa pola, dla którego ma być wyświetlony komunikat
::       _b - (opcjonalny) dodatkowy komunikat doklejany na końcu
::  OLD: \fld_err/util.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  .err_msg(.incorrect_msg(_a,{? var_pres('_b')=type_of('') || _b || '' ?}))
   ",type_of('')),

   obj_meth('err_incorrect',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Wyświetla komunikat o niepoprawnej wartości pola tabeli / zmiennej.
::   WE: _a - alias tabeli
::       _b - nazwa pola, dla którego ma być wyświetlony komunikat
::       _c - (opcjonalny) dodatkowy komunikat doklejany na końcu
::  OLD: \fld_err/util.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  .err_msg(.incorrect_msg(_a,_b,{? var_pres('_c')=type_of('') || _c || '' ?}))
   ",type_of(SYSLOG),type_of('')),

    obj_meth('incorrect_msg',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Metoda zwraca treść komunikatu o błędnej wartości wypełnienia pola.
::   WE: _a - nazwa pola, dla którego ma być wyświetlony komunikat
::       _b - (opcjonalny) dodatkowy komunikat doklejany na końcu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  'Nieprawidłowa wartość pola: \"%1\".'@ [_a]+
      {? var_pres('_b')=type_of('')
      || '\n'+_b
      || ''
      ?}
   ",type_of('')),

    obj_meth('incorrect_msg',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Metoda zwraca treść komunikatu o błędnej wartości wypełnienia pola.
::   WE: _a - alias tabeli
::       _b - nazwa pola, dla którego ma być wyświetlony komunikat
::       _c - (opcjonalny) dodatkowy komunikat doklejany na końcu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  'Nieprawidłowa wartość pola: \"%2\" tabeli %1.'@[2-!_a,_b]+
      {? var_pres('_c')=type_of('')
      || '\n'+_c
      || ''
      ?}
   ",type_of(SYSLOG),type_of('')),

   obj_meth('err_ndx',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla informacje o powieleniu klucza indeksowego
::   WE: _a - uchwyt tabeli / zmiennej, której pola będą sprawdzane
::       _b - akronim naruszonego unikalnego klucza
::       _c - specyfikacja akcji (0 - dołączanie, nie 0 - poprawianie), jeśli pominięty, to tak jak dla 0
::  OLD: \ndx_msg/util.fml
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  _ndx:=_a.ndx_no(_b);
      _cnt:=_a.ndx_nfld(_ndx);
      _det:='\n\n';
      _fld:=
         '{! _ni:=1.._a.fld_num() '
         '|! {? _a.fld_acr(_ni)=_b '
         '   || return(_a.fld_name(_ni)) '
         '   ?} '
         '!};'
         '\\'\\'';
      {? _cnt=1
      || _acr:=_a.ndx_afld(_ndx,1);
         _det+='Powielono informację \"%1\".'@[($_fld)(_a,_acr)]

      |? _cnt>1
      || _det+='Powielone informacje:'@;
         {! _num:=1.._cnt
         |! _acr:=_a.ndx_afld(_ndx,_num);
            _det+='\n%1. %2'[$_num,($_fld)(_a,_acr)]
         !}
      ?};
      .err_msg(
         {? var_pres('_c')=type_of(0) & _c
         || 'Poprawienie zapisu nie jest możliwe.'@+'\n'+'Znaleziono rekord o podanym kluczu.'@
         || 'Dołączenie zapisu nie jest możliwe.'@+'\n'+'Znaleziono rekord o podanym kluczu.'@
         ?}+
         _det
      )
   ",type_of(SYSLOG),type_of('')),

   obj_meth('err_msg',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla komunikat o podanej treści. Jeśli przetwarzanie odbywa się w transakcji, to zostanie ona zakończona.
::   WE: _a - treść wyświetlanego komunikatu
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
   "  {? var_pres('__XLS_VALID')>100
      || __XLS_VALID.MSG:='Uwaga: %1'@[gsub(_a,'\n',' ')]
      |? do_state=0
      || FUN.emsg(_a)
      || undo(_a)
      ?}
   ",type_of('')),

   obj_meth('validate',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wykonuje formuły sprawdzające. Do formuł zostaną przekazane argumenty: _a - referencja do obiektu klasy CHECK,
::       _b - alias do tabeli / zmiennej podany w argumencie wywołania validate
::   WE: _a - alias tabeli / zmiennej
::       ... - treści formuł do wykonania
::   WY: zależnie od miejsca wykorzystania i wyniku zwracanego przez formuły
::       w transakcji
::          1 tylko w przypadku, gdy formuły zwróciły wartości liczbowe, niezerowe lub puste ciągi znaków (wartości
::          innych typów są ignorowane), 0 w pozostałych przypadkach
::       poza transakcją
::          niepusty tekst zwrócony przez którąkolwiek formułę, 0 jeśli którakolwiek formuła zwróciła 0 (inne typy
::          wartości zwracanych przez formuły są ignorowane), 1 w pozostałych przypadkach
::  OLD: \validate/util.fml
::----------------------------------------------------------------------------------------------------------------------
   "  {! _arg:=2.._
      |! {? type_of(_[_arg])=type_of($'')
         || _ret_val:=_[_arg](.,_a);
            {? type_of(_ret_val)=type_of('') & _ret_val<>''
            || return({? do_state=0 || _ret_val || 0 ?})
            |? type_of(_ret_val)=type_of(0) & _ret_val=0
            || return(0)
            ?}
         ?}
      !};
      1
   ",type_of(SYSLOG))
)


\disp_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2006]
:: OPIS: wyświetla okienko podglądu na danym rekordzie
::   WE: _a - tabela
::       _b - okienko
::       _c - ref
::   WY: 1
::  OLD: \disp_tab/find_rad.fml
::----------------------------------------------------------------------------------------------------------------------
{? _b<>''
|| _tab:=($_a)();
   {| _tab
   |! cntx_psh();
      clear();
      {? seek(_c,form(8+_c)) || ($(_a+'.win_edit(\''+_b+'\')'))(); display() ?};
      cntx_pop()
   |}
?};
1


\sel_nchk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: wylaczenie kontroli zmiany rekordu
::  OLD: \sel_nchk/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
sel_nchk()


\lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: zapisuje identyfikator sesji w polu _b tabeli _a dla bieżącego rekordu
::   WE: _a - akronim tabeli
::       _b - akronim pola
::       _c - ref rekordu
::       [_d] - 0-bez komunikatów, 1-z komunikatami
::   WY: 1 - zapis id sesji powiodł się, 0-wpp
::  OLD: \lock/podstawy.fml
::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_d')<>type_of(1) || _d:=1 ?};

_wyn:=1;

_Tab:=($_a)();

_Tab.cntx_psh;
_Tab.use(ref_name(_c));
_Tab.clear;

{? _Tab.seek(_c)
||
   {? _Tab.r_lock(1,1,1)
   ||
      _pole:=$(_a+'.'+_b);
      _ses_id:=_pole();
      _put:=1;
      {? _ses_id<>'' & _Tab.ses_info(_ses_id,'') & _ses_id<>_Tab.ses_id
      ||
         _Tab.r_unlock();
         _wyn:=0;
         {? _d
         ||
            FUN.info(
               'Obiekt blokowany przez użytkownika %1 na końcówce %2.'@
               [_Tab.ses_info(_ses_id,'log_name'),_Tab.ses_info(_ses_id,'log_tty')]
            )
         ?};
         _put:=0
      ?};
      {? _put
      ||
         _pole():=_Tab.ses_id;
         _Tab.put;
         _Tab.r_unlock()
      ?}
   ||
      _wyn:=0;
      {? _d || FUN.info('Obiekt blokowany przez innego użytkownika.'@) ?}
   ?}
||
   _wyn:=0;
   {? _d || FUN.info('Nie znaleziono obiektu.'@) ?}
?};

_Tab.cntx_pop;

_wyn


\unlock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: usuwa identyfikator sesji z pola _b tabeli _a
::   WE: _a - akronim tabeli
::       _b - akronim pola
::       _c - ref rekordu
::  OLD: \unlock/podstawy.fml
::----------------------------------------------------------------------------------------------------------------------

_Tab:=($_a)();

_Tab.cntx_psh;
_Tab.use(ref_name(_c));
_Tab.clear;

{? _Tab.seek(_c) & _Tab.r_lock(1,1,1)
||
   _pole:=$(_a+'.'+_b);
   _ses_id:=$_pole();

   {? _ses_id=_Tab.ses_id
   ||
      _pole():='';
      _Tab.put
   ?};
   _Tab.r_unlock
?};

_Tab.cntx_pop;
~~


\exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Sprawdza czy istnieje jeszcze bieżący rekord - wykorzystywana w webTermie
::   WE: [_a] [DICT]    - tabela, na rzecz której dokonujemy sprawdzenia
::       [_b] [INTEGER] - czy odświeżać okno na wierzchu (0/1 - domyślnie 1)
::   WY: 0/1
::  TAG: <WEBTERM>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
    _tab:={? var_pres('_a')=118 || _a || web_top_tab(,1) ?};
_refresh:={? var_pres('_b')=1   || _b || 1               ?};

{? _tab.get() & _tab.ref()
|| _result:=1
|| FUN.emsg('[%1] Rekord nie istnieje. Prawdopodobnie został usunięty przez innego użytkownika.'@ [2-!_tab]);
   {? _refresh
   || _kind:=web_top_kind(,1);
      {? ',g,s,'*_kind
      || web_top_refresh()
      |? ',e,'*_kind
      || web_top_update()
      ?}
   ?}
?};
_result


\testlink
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Sprawdzenie wykorzystania rekordu tabeli. Wyswietlenie okienka z opisem powiazanych tabel i liczby rekordow.
::   WE: _a  [DICT]  - alias tabeli
::      [_b] [NUMBER] - czy wyświetlać komunikaty informacyjne [domyślnie nie]
::   WY: 0/1
::  OLD: \b_del/util.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_TAB:={? var_pres('_a')=type_of(SYSLOG) || _a || return(_result) ?};
_msg:={? var_pres('_b')=type_of(0)      || _b || 0               ?};

_TAB.get();
_tab:=_TAB.testlink();
{? _tab.first()
|| _result:=1;
   {? _msg & FUN.ask('Rekord tabeli \'%1\' posiada powiązane dane.'@[_TAB.comment()]+'\n'+
                     'Czy wyświetlić informacje techniczne o powiązaniach?'@)
   || _tab2:=sql('select TABELA, count(*) ILE from :_a group by TABELA',_tab);
      _tab1:=tab_tmp(1,'TABELA','STRING[50]','Nazwa tabeli'@,
                       'MASKA' ,'STRING[8]' ,'Akronim tabeli'@,
                       'ILE'   ,'INTEGER'   ,'Liczba odwołań'@);
      {? _tab2.first()
      || {!
         |? _tab1.TABELA:=($(_tab2.TABELA+'.comment'))();
            _tab1.MASKA:=_tab2.TABELA;
            _tab1.ILE:=_tab2.ILE;
            _tab1.add();
            _tab2.next()
         !};
         _tab1.win_sel(_tab1.mk_sel('Powiązane wystąpienia w tabelach'@,,1));
         _tab1.select()
      ?}
   ?}
?};
_result


\hash
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła dla wskazanej tabeli oblicza hash bieżącego rekordu (bufora). W przypadku standardowej metody .crc()
::       klasy TABLE suma kontrolna jest liczona na podstawie binarnej reprezentacji bufora tabeli. Oznacza to, że
::       nawet wydłużenie pola (bez zmiany jego zawartości) zmienia sumę kontrolną.
::   WE:  _a  [TABLE]  - Uchwyt do tabeli.
::       [_b] [STRING] - Lista pól (rozdzielana przecinkami), które będą brane pod uwagę. Pusta lista oznacza wszystkie
::                       pola.
::       [_c] [NUMBER] - Czy treść pól typu SYS_MEMO pobierać z bazy danych:
::                         0 - nie (treść z bufora) [domyślnie];
::                         1 - tak (treść z dysku.
::   WY: Tablica elementów nazwanych:
::          hash - suma kontrolna;
::          flds - lista pól uwzględniona w algorytmie.
::  OLD: \hash/util.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('hash','pola');
_ret.hash:='';
_ret.pola:='';

{? var_pres('_a')=type_of(SYSLOG)
|| _TAB:=_a
|| return(_ret)
?};

_TAB.cntx_psh();

_flds:=',';
{! _lp:=1 .. _TAB.fld_num()
|! _flds+=_TAB.fld_acr(_lp)+','
!};

_pola:=spli_str({? var_pres('_b')=type_of('') || gsub(_b,' ','') || _flds ?},',');
_dysk:=var_pres('_c')=type_of(0) & _c;

_fh:=fopen(null(),'uw',,,1);
::_fh:=fopen('buff.txt','uw',1,1,1);
{? _fh.is_open()
|| {! _lp:=1 .. obj_len(_pola)
   |! _acr:=_pola[_lp];
      {? _acr<>'' & _flds*(','+_acr+',')
      || _ret.pola+=_acr+',';
         _val:=($('_a.'+_acr))(_TAB);
         _vp:=var_pres(_acr,_TAB);
         {? _vp=27 | _vp=38 | _vp=39 | _vp=40
::          STRING, IDTIME, IDADD, IDPUT
         || _vs:=_val
         |? _vp=29
::          TIME
         || _vs:=_val$3
         |? _vp=36
::          SYS_MEMO
         || _vs:=_TAB.memo_txt(0,_dysk,_acr)
::          Wszystkie inne, te znane na dzień dzisiejszy (REAL, DATE, INTEGER, typ złączeniowy, REFERENCE, TREE_REF,
::          BLOBRAW), jak i te, których jeszcze nie znamy - spróbujmy standardowo
         || _vs:=$_val
         ?};
         _fh.fwrite(form(_acr,8)+'|'+form(_vp,2,0,'9.')+'|'+_vs)
      ?}
   !};
   _ret.pola:=_ret.pola-1;
   _ret.hash:=hash(_fh)
?};
obj_del(_fh);

_TAB.cntx_pop();

_ret

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 d4378174b85f29f653701c6cae0bbac2f23161edcb355ac4543ed3be6c42871633dfd02ac6aa85eaf62dda2e847b548c0572fde316175ae0571383c20546941dca29777961f5802d7900c673f20af48e44bfdd0c1bf5af941cc23c6b5674c63a18e4290c31c2dd6f6c21b3bbac2a5577c266786d4111dc4f7a6a7265f0f18fae
