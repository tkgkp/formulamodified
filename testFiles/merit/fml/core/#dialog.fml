:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #dialog.fml
:: Utworzony: 04.03.2015
:: Autor: PJ
::======================================================================================================================
:: Zawartość:
::                                    Klasa DIALOG
:: Klasa udostępnia systemowe okienka dialogowe, umożliwiające wybór fontu i
:: koloru oraz pliku do zapisu i odczytu.
::
:: Zadeklarowanie
:: klasy             : exec(,'#dialog');
:: Powołanie obiektu
:: klasy             : myDIALOG:=obj_new(@.CLASS.DIALOG);
::
:: Wykorzystanie     :
::                   myDIALOG.GetFont(font) - zwraca nazwe wybranego fontu
::                                            lub ''
::                   parametry : font(string) - domyślny font do podświetlenia
::                                              na liście np. 'Arial'
::
::
::                   myDIALOG.OpenFile(filtr, [folder_startowy], [domyślna_nazwa_pliku])
::                   zwraca wybrany plik lub ''
::                   parametry : filtr(string) - filtr plików np.
::                               'Pliki tekstowe (*.txt)|*.txt|Pliki (*.dat)|*.dat'
::
::                               folder_startowy - ściezka do folderu na który ustawi
::                               się okienko, np. 'd:\\macrobase', jeśli brak parametru
::                               przyjmuje wartość '' i ustawia się w ostatnio otwartym
::                               folderze. Sciezkę można podawać w formacie UNC. np.:
::                               '\\BATORY\Katalog\Podkatalog'
::
::                               domyślna_nazwa_pliku - jeśli podano parametr - pojawi sie
::                               w polu "Nazwa pliku" okienka Otworz plik
::
::
::                   myDIALOG.SaveFile(filtr, [folder_startowy], [domyslna_nazwa_pliku])
::                   zwraca wybrany plik lub ''
::                   parametry : filtr(string) - filtr plikow np.
::                               'Pliki tekstowe (*.txt)|*.txt|Pliki (*.dat)|*.dat'
::
::                               folder_startowy - ściezka do folderu na który ustawi
::                               sie okienko, np. 'd:\\macrobase', jeśli brak parametru
::                               przyjmuje wartość '' i ustawia się w ostatnio otwartym
::                               folderze. Ściezkę można podawać w formacie UNC. np.:
::                               '\\BATORY\Katalog\Podkatalog'
::
::                               domyślna_nazwa_pliku - jeśli podano parametr - pojawi się
::                               w polu "Nazwa pliku" okienka Zapisz plik
::
::
::                   myDIALOG.SimpleGetFont(font) - zwraca nazwe wybranego fontu
::                                            lub '' (wersja uproszczona GetFont)
::                   parametry : font(string) - domyślny font do podświetlenia
::                                              na liscie np. 'Arial'
::
::                   myDIALOG.FindFont(font) - sprawdza czy font o podanej nazwie
::                                            istnieje w systemie użytkownika, jeśli tak
::                                            zwraca 1, jesli nie: 0
::                   parametry : font(string) - nazwa fontu do sprawdzenia np. 'Arial'
::                                              (wielkość liter nie ma znaczenia)
::
::                   myDIALOG.GetFolder([tytul], [domyślna_ścieżka]) - zwraca wybrany folder lub ''
::                   parametry : tytuł(string) - jeśli podano parametr - tekst pojawiający się
::                                             u góry okienka np. 'Wybierz folder dla plików *.aui'
::                                             jeśli nie podano parametru, przyjęta zostanie wartosc ''.
::
::                               domyslna_ścieżka(string) - jeśli podano parametr - ścieżka
::                                                        iniciujaca okienko wyboru folderu, drzewo
::                                                        folderów rozwinie się do wskaznej ścieżki,
::                                                        jeśli parametru nie podano przyjęta zostanie
::                                                        sciezka 'c:\\'.
::
:: Usunięcie obiektu
:: klasy            : obj_del(myDIALOG);
::======================================================================================================================

{? var_pres('DIALOG', @.CLASS) < 0
|| obj_decl('DIALOG',

   obj_fld('LIB',   "PRIVATE: uchwyt do biblioteki dll";0),
   obj_fld('LIB2',  "PRIVATE: uchwyt do biblioteki dll";0),
   obj_fld('hFONT', "PRIVATE: uchwyt funkcji wywołującej okienko fontów";0),

   obj_fld('hOPEN', "PRIVATE: uchwyt funkcji wywołującej okienko Otworz";0),
   obj_fld('hSAVE', "PRIVATE: uchwyt funkcji wywołującej okienko Zapisz";0),
   obj_fld('hFOLDER', "PRIVATE: uchwyt funkcji wywołującej okienko WybierzFolder";0),
   obj_fld('hSFONT',"PRIVATE: uchwyt funkcji wywołującej okienko SimpleFont";0),
   obj_fld('hFINDFONT',"PRIVATE: uchwyt funkcji sprawdzajacej czy font jest w systemie";0),

   obj_meth('__init',"
   _t1:='Nie udało się poprawnie zadeklarować funkcji '@;
   _t2:='Nie udało się poprawnie zainicjować biblioteki '@;
   {? var_pres('KNV')<0 || KNV:=obj_new(@.CLASS.STRING) ?};

   _a.LIB:=lib_load('mbutil.dll',1);
   {? _a.LIB<>0
   || _a.hFONT:=lib_decl(_a.LIB,,'String','GetFont','String');
      ~~
   || FUN.emsg(_t2 + 'mbutil.dll!')
   ?};

   _a.LIB2:=lib_load('filedlg.dll',1);
   {? _a.LIB2<>0
   || _a.hOPEN:=lib_decl(_a.LIB2,,'String','OpenDlg','String', 'String', 'String');
      {? _a.hOPEN=0 || FUN.emsg(_t1 + 'OpenDlg') ?};
      _a.hSAVE:=lib_decl(_a.LIB2,,'String','SaveDlg','String', 'String', 'String');
      {? _a.hSAVE=0 || FUN.emsg(_t1 + 'SaveDlg') ?};
      _a.hFOLDER:=lib_decl(_a.LIB2,,'String','FolderDlg','String', 'String');
      {? _a.hFOLDER=0 || FUN.emsg(_t1 + 'FolderDlg') ?};
      _a.hSFONT:=lib_decl(_a.LIB2,,'String','SimpleGetFont','String');
      {? _a.hSFONT=0 || FUN.emsg(_t1 + 'SimpleGetFont') ?};
      _a.hFINDFONT:=lib_decl(_a.LIB2,,'int','FindFont','String');
      {? _a.hFINDFONT=0 || FUN.emsg(_t1 + 'FindFont') ?}
   || FUN.emsg(_t2 + 'filedlg.dll!')
   ?}
"),

   obj_meth('__done',"
     {? .LIB<>0 || lib_free(.LIB) ?};
     {? .LIB2<>0 || lib_free(.LIB2) ?}
     "),

   obj_meth('GetFont',"PUBLIC";"
     lib_call(.hFONT, KNV.maz2w95(_a))
     ", type_of('')),

   obj_meth('OpenFile',"PUBLIC";"
     {? _=1 || _b:=''; _c:=''
     |? _=2 || _c:=''
     ?}; lib_call(.hOPEN, KNV.maz2w95(_a), KNV.maz2w95(_b), KNV.maz2w95(_c))
     "),

   obj_meth('SaveFile',"PUBLIC";"
     {? _=1 || _b:=''; _c:=''
     |? _=2 || _c:=''
     ?}; lib_call(.hSAVE, KNV.maz2w95(_a), KNV.maz2w95(_b), KNV.maz2w95(_c))
     "),

   obj_meth('GetFolder',"PUBLIC";"
     {? _=0 || _a:=''; _b:=''
     |? _=1 || _b:=''
     ?}; lib_call(.hFOLDER, KNV.maz2w95(_a), KNV.maz2w95(_b))
     "),

   obj_meth('SimpleGetFont',"PUBLIC";"
     lib_call(.hFONT, KNV.maz2w95(_a))
     ", type_of('')),

   obj_meth('FindFont',"PUBLIC";"
     lib_call(.hFINDFONT, KNV.maz2w95(_a))
     ", type_of(''))
   )
?}

:Sign Version 2.0 jowisz:1045 2021/09/17 15:17:04 1b07379628577618a09f642d0f035fa734efcda48047701461a3c9c9f1381428f4d1953fbe9adf3a16038446504248d2d5bfd7e01a215547ff66fac061b28a9d59bec1e015a51e59d413db9f58f18b5eed72af40fd770dd64e60ffc717957e00f458223e253a50b7ea941172e4772aba5dbac36de2ab1147fe5f58a95261c0a9
