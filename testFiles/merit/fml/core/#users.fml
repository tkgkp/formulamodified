:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: #users.fml.fml [17.00]
:: Utworzony: 21.91.2016
:: Autor: AMK
::======================================================================================================================
:: Zawartość: Obsługa tabeli USERS
::======================================================================================================================


\operatorKod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Kod zalogowanego usera
::----------------------------------------------------------------------------------------------------------------------
_kod:=app_info('app_user');
:: Podmiana usera w przypadku uruchamiania przez CGI
{? _kod='html'
|| _service_user:=exec('get','#params',100901,2);
   {? _service_user=''
   || _kod:='admin'
   || _aktywny:=exec('FindInSet','#table','USERS','USR_KKOD',_service_user,_service_user,"USERS.AKT",1);
      {? _aktywny='T'
      || _kod:=_service_user
      || _kod:='admin'
      ?}
   ?}
?};
_kod


\users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: zwraca USERS.ref() dla loginu
::   WE: _a - login
::   WY: USERS.ref()
::  OLD: \users/portal.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
USERS.cntx_psh();
USERS.index('USR_AKOD'); USERS.prefix('T',_a,);
{? USERS.first() || _wyn:=USERS.ref() ?};
USERS.cntx_pop();
_wyn


\operatorUser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zalogowany user
::   WY: USERS.ref()
::  OLD: \bl_user/firma.fml
::       \oz_us/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
OPERATOR.USER


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje podany rekord tabeli USERS (wykonywane w transakcji!!!)
::   WE: _a - USERS.ref()
::   WY: >0 - rekord usuniety
::      <=0 - problem z usunięciem rekordu:
::                                           -3 - nie udała się funkcja del
::                                           -2 - nie udało się czyszczenie powiązań
::                                           -1 - nie można usunąć danego rekordu
::                                            0 - nie znaleziono podanego rekordu
::UWAGA: Parametry bez [] sa wymagane, formuła moze nie sprawdzac czy zostały podane i może wystąpic błąd.
::  OLD: \delete/users.fml
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
USERS.cntx_psh(); USERS.clear();
{? USERS.seek(_ref)
||
:: Czyszcze ewentualne powiązania
   {? exec('clean','#users',_ref)>0
   ||
::    Sprawdzam czy można usunąć
      {? exec('can_delete','#users')
      || {? USERS.del(,1)>0
         || _result:=1
         || _result:=-3
         ?}
      ||
::       Jeżeli po usunięciu dozwolonych powiązań zostały jakieś powiązania
::       to nie można usunąć rekordu
         _result:=0
      ?}
   || _result:=-1
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

USERS.cntx_pop();
{? _mydo || end() ?};
_result


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy można usunąć danego USERSa
::   WE: [_a] - USERS.ref
::   WY: 0 - nie można usunąć, są powiązania
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.clear();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| {? USERS.count()=0
   || _result:=1
   ?}
?};
USERS.cntx_pop();
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli USERS
::   WE: _a - USERS.ref()
::   WY: >0 -wyczyszczone,
:: <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formuła moze nie sprawdzać czy zostały podane i może wystapić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};

USR_SESS.cntx_psh();
USR_SESS.index('ALL');
USR_SESS.prefix(_ref);
{? USR_SESS.first()
|| {!
   |? _can_continue:=USR_SESS.del(,1);
      USR_SESS.first() & _can_continue>0
   !}
?};
USR_SESS.cntx_pop();

BI_COUNT.cntx_psh();
{? BI_COUNT.name()='' || BI_COUNT.use('bi_d____') ?};
BI_COUNT.index('COUNT');
BI_COUNT.prefix(_ref);
{? BI_COUNT.first()
|| {!
   |? _can_continue:=BI_COUNT.del(,1);
      BI_COUNT.first() & _can_continue>0
   !}
?};
BI_COUNT.cntx_pop();

BUFMG.cntx_psh();
BUFMG.index('US');
BUFMG.prefix(_ref);
{? BUFMG.first()
|| {!
   |? _can_continue:=BUFMG.del(,1);
      BUFMG.first() & _can_continue>0
   !}
?};
BUFMG.cntx_pop();

{? _can_continue>0
|| _can_continue:=exec('clean_role','#users',_ref)
?};
{? _can_continue>0
|| _can_continue:=exec('del_ndx','#table',UDB_UPR,'FK_USR',USERS.ref())
?};

{? _can_continue>0
|| BI_PROB.cntx_psh();
   BI_PROB.index('USERS');
   BI_PROB.prefix(_ref);
   {? BI_PROB.first()
   || {!
      |? _can_continue:=BI_PROB.del(,1);
         BI_PROB.first() & _can_continue>0
      !}
   ?};
   BI_PROB.cntx_pop()
?};

{? _can_continue>0
||
   B_PROTU.cntx_psh();
   B_PROTU.index('USERS');
   B_PROTU.prefix(_ref);
   {? B_PROTU.first()
   || {!
      |? _can_continue:=B_PROTU.del(,1);
         B_PROTU.first() & _can_continue>0
      !}
   ?};
   B_PROTU.cntx_pop()
?};

{? _can_continue>0
|| _can_continue:=exec('clean_zws_params','#params',USERS.ref())
?};

{? _can_continue>0
|| _can_continue:=exec('upr_usr_del','schemat',USERS.ref())
?};

:: --- wszystkie powiązania usunięte? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\clean_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czyści uprawnienia do ról dla danego użytkownika
::   WE: [_a] - USERS.ref
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.clear();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_USRROL.cntx_psh();
   B_USRROL.index('USER');
   B_USRROL.prefix(REF.FIRMA,USERS.ref());
   {? B_USRROL.first()
   || {!
      |? _can_continue:=exec('delete','#b_usrrol',B_USRROL.ref());
         B_USRROL.first() & _can_continue>0
      !}
   ?};
   B_USRROL.cntx_pop();

   {? _can_continue>0
   || USERS.XPERTIS:='N';
      _can_continue:=exec('users_put','#users')
   ?}
?};
USERS.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\users_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Poprawianie rekordu w USERS
::----------------------------------------------------------------------------------------------------------------------
USERS.USERID:=USERS.KOD;
USERS.NAME:=USERS.DANE;
USERS.put()


\user_list_megad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Lista mega dziedzin dla podanego użytkownika w bieżącej firmie. Na podstawie przypisanych kolorów
::   WE: _a - kod użytkownika
::       _b - M jterm/ W webterm
::   WY: string z nazwami mega dziedzin
::----------------------------------------------------------------------------------------------------------------------
_user:=_a;
_canal:=_b;
_wyn:='';

{? +app_info('web_sesid')
||
   REF.FIRMA:=exec('firma_ref','#firma',app_info('app_ident'))
?};
::_md_lst:=sql('
::   select distinct B_DOMAIN.SYMBOL,B_DOMAIN.REFERENCE as DOM_REF,B_DOMAIN.COLOR as COLOR from B_USRROL
::   join USERS join B_ACTROL using(B_USRROL.B_ROLE, B_ACTROL.B_ROLE) join B_ACTION
::   join B_DOMAIN
::   where B_ACTION.AKT=\'T\' and B_ACTION.PROC=\'T\' and USERS.KOD=\':_a\' and B_USRROL.FIRMA=:_b '+
::         ' and ( B_ACTION.B_CAN=\'B\' or B_ACTION.B_CAN=\':_c\') ', _a, REF.FIRMA, _b);
::
::_fin:=_per:=_log:=_zaz:=0;
::
::{? _md_lst.first
::||
::   {!
::   |?
::      _megad:=exec('domain_megad','#b_domain',_md_lst.DOM_REF);
::      {? _wyn*_megad=0 || _wyn+=_megad+'|' ?};
::      _md_lst.next
::   !}
::?};

_can_continue:=1;
USERS.cntx_psh();
USERS.index('USR_KKOD');
USERS.prefix(_user,);
{? USERS.first()
||
   B_USRDOM.cntx_psh();
   {? _canal='M'
   || B_USRDOM.index('CAN_J');
      B_USRDOM.prefix(REF.FIRMA,USERS.ref(),'T')
   |? _canal='W'
   || B_USRDOM.index('CAN_W');
      B_USRDOM.prefix(REF.FIRMA,USERS.ref(),'T')
   |? _canal='B'
   || B_USRDOM.index('CAN_B');
      B_USRDOM.prefix(REF.FIRMA,USERS.ref(),'T','T')
   |? _canal='Q'
   || B_USRDOM.index('CAN_Q');
      B_USRDOM.prefix(REF.FIRMA,USERS.ref(),'T')
   || _can_continue:=0
   ?};

   {? _can_continue>0
   ||
      {? B_USRDOM.first()
      || {!
         |? _megad:=exec('domain_megad','#b_domain',B_USRDOM.B_DOMAIN);
            {? _wyn*_megad=0
            || _wyn+=_megad+'|'
            ?};
            B_USRDOM.next()
         !}
      ?}
   ?};
   B_USRDOM.cntx_pop();
   ~~
?};
USERS.cntx_pop();
_wyn


\username
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [8.70]
:: OPIS: Zwraca uzytkownika zalogowanego w systemie (bez tyld)
::  OLD: \username/i_o.fml
::----------------------------------------------------------------------------------------------------------------------
{? username()*'~' || (username()*'~'-1)+username() || 10+username() ?}


\user_app_ident
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Zapamiętuje bieżącą aplikację (identyfikator) dla bieżącego użytkownika
::----------------------------------------------------------------------------------------------------------------------
_user:=exec('operatorKod','#users');
_aiden:=app_info('app_ident');
USERS.cntx_psh(); USERS.index('USR_AKOD');
USERS.prefix('T',_user,_user);
{? USERS.first() & _aiden<>USERS.APP_IDEN
|| {? USERS.r_lock(1,1,1)
   || USERS.get();
      USERS.APP_IDEN:=_aiden;
      USERS.put();
      USERS.r_unlock()
   ?}
?};
USERS.cntx_pop();
~~


\user_ident_desktop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Szuka użytkownika i podaje informacje (używane przy przygotowaniu pulpitów)
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new('DANE','STAN');
USERS.index('USR_AKOD');
USERS.prefix('T',app_info('app_user'),app_info('app_user'));
{? USERS.first()
||
   {? USERS.JTERM='N' & +app_info('web_sesid')
   || _obj.DANE:=USERS.WEBLOGIN
   || _obj.DANE:=USERS.KOD
   ?};
:: docelowo stanowisko (Kadry)
   _obj.STAN:=USERS.DANE
||
   _obj.DANE:=~-app_info('app_user');
   _obj.STAN:=SYSSUSER.DESCR
?};
_obj


\user_ident_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Szuka użytkownika webowego w tabeli users i zwraca ref
::   WY: USERS.ref()
::----------------------------------------------------------------------------------------------------------------------
exec('users','#users',app_info('web_user'))


\users_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Zwraca USERS.ref() dla loginu webowego
::   WE: _a - login webowy
::   WY: USERS.ref()
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();
USERS.index('USR_AWEB');
USERS.prefix('T',_a,);
{? USERS.first() || _wyn:=USERS.ref() ?};
_wyn


\login
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja wywoływana na starcie aplikacji - dopisuje rekord do sesji użytkownika i usuwa stare sesje
::   WE: _a - USERS.ref -  użytkownik który się zalogował
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_user:=_a;

_can_continue:=1;

:: Najpierw wycinam nieaktywne sesje
USR_SESS.cntx_psh();
USR_SESS.index('USERS');
USR_SESS.prefix(REF.FIRMA,_user);
{? USR_SESS.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      USR_SESS.cntx_psh();
      {? USR_SESS.next()
      || _ref_nxt:=USR_SESS.ref()
      ?};
      USR_SESS.cntx_pop();

      _can_delete:=0;

      {? SYSLOG.ses_info(USR_SESS.SES_ID,'exist')<>1
      || USR_SESS.del(,1)
      ?};
      {? _ref_nxt<>null()
      || _next:=USR_SESS.seek(_ref_nxt)
      ?};
      _next>0
   !}
?};
USR_SESS.cntx_pop();

:: Dodaję nowe ID sesji
USR_SESS.blank();
USR_SESS.FIRMA:=REF.FIRMA;
USR_SESS.USERS:=_user;
USR_SESS.SES_ID:=SYSLOG.ses_id(1);
USR_SESS.add(1);

:: Zapamiętuję na użytkowniku datę ostatniego logowania
USERS.cntx_psh();
USERS.prefix();
{? USERS.seek(_user)
|| {? USERS.r_lock(1,1,1)
::    Przy jednoczesnym uruchamianiu kilku zakładek przez tego samego użytkownika bardzo często towarzyszy temu
::    komunikat:
::    "Próba modyfikacji rekordu tabeli USERS poprawionego wcześniej przez innego użytkownika.
::     Rekord został już poprawiony."
::    Spróbujmy więc uszeregować te wywołania, blokując rekord przed jego modyfikacją.
   || USERS.get();
      USERS.LOGIN_D:=date();
      USERS.LOGIN_T:=time();
      USERS.put();
      USERS.r_unlock()
   ?}
?};
USERS.cntx_pop();
~~


\is_logged
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy użytkownik jest aktualnie zalogowany w systemie
::   WE: _a - USERS.ref - użytkownik
::       [_b] - INTEGER - [1]/2 - 1 - sprawdzac tylko w bieżącej firmie (domyślnie)
::                                2 - sprawdzać we wszystkich firmach
::   WY: 0 - nie jest
::       1 - jest
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_user:=_a;
_mode:=1;
{? var_pres('_b')=type_of(0)
|| _mode:=_b
?};

_result:=0;
USR_SESS.cntx_psh();
{? _mode=1
|| USR_SESS.index('USERS');
   USR_SESS.prefix(REF.FIRMA,_user)
|? _mode=2
|| USR_SESS.index('ALL');
   USR_SESS.prefix(_user)
?};
{? USR_SESS.first()
|| {!
   |? {? SYSLOG.ses_info(USR_SESS.SES_ID,'exist')=1
      || _result:=1
      ?};
      USR_SESS.next()
   !}
?};
USR_SESS.cntx_pop();
_result


\zastepujacy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyszukuje zastępstwa dla wskazanego użytkownika, w ramach konkretnej czynności.
::
::       Obecność użytkownika.
::       W przypadku gdy zastępstwo dotyczy jedynie okresu nieobecności, musimy ustalić, czy UŻYTKOWNIK jest obecny.
::        - Jeżeli użytkownik nie ma przypisanej osoby (USERS.OSOBA=null()), to uznajemy, że nie dysposnujemy
::          informacjami o nieobecności użytkownika i przyjmujemy, że użytkownik jest obecny.
::        - Przez nieobecność rozumiany jest dowolny zapis w kartotece nieobecności, bez względu na jej kod.
::        - Jeżeli osoba ma kilka etatów, to wystarczy nieobecność na jednym z nich, aby przyjąć, że użytkownik jest
::          nieobecny.
::
::   WE: [_a] [REFERENCE] - Wskazanie firmy [domyślnie:'bieżąca'].
::        _b  [REFERENCE] - Wskazanie użytkownika, dla którego poszukiwany będzie zastępstwo.
::        _c  [REFERENCE] - Wskazanie czynności, dla której poszukiwane będzie zastępstwo.
::       [_d] [DATE]      - Data zastępstwa [domyśnie:date()].
::        _e  [REFERENCE] - null/Wskazanie na rolę, dla której poszukiwane będzie zastępstwo.
::   WY: Tablica elementów nazwanych:
::          ERR  - Treść komunikatu o błędzie lub '' w przypadku sukcesu.
::          USER - Wskazanie użytkownika. Może to być:
::             - użytkownik zastępowany, jeżeli w danym dniu jest w pracy i sam może wykonywać określone obowiązki;
::             - użytkownik zastępujący;
::             - null(), jeżeli podczas przetwarzania wystąpił błąd (parametry wywołania, cykliczność danych).
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('ERR','USER');
_ret.ERR:='';
_ret.USER:=null();

_firma:=
   {? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=FIRMA
   || _a
   || exec('ref_firma','#firma')
   ?};
{? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=USERS
|| _user:=_b
|| _ret.ERR:='Nieprawidłowy typ parametru wywołania [%1].'@ ['USER'];
   return(_ret)
?};
{? var_pres('_c')=type_of(null()) & _c<>null() & ref_tab(_c)=B_ACTION
|| _act:=_c
|| _ret.ERR:='Nieprawidłowy typ parametru wywołania [%1].'@ ['ACTION'];
   return(_ret)
?};
_dt:=date();
{? var_pres('_d')=type_of(_dt)
|| _dt:=_d
?};
{? var_pres('_e')=type_of(null()) & (_e=null() | ref_tab(_e)=B_ROLE)
|| _b_role:=_e
|| _ret.ERR:='Nieprawidłowy typ parametru wywołania [%1].'@ ['ROLE'];
   return(_ret)
?};

_ret.USER:=_user;

_obecny:=
   "  _firma:=_a;
      _user:=_b;
      _dt:=_c;
      {? USERS.seek(_user) & USERS.OSOBA<>null()
      || N.prefix('N',_firma,USERS.OSOBA);
         ~(N.find_le(_dt) & _dt<=N.DO)
      || 1
      ?}
   ";

_d0:=date(0,0,0);
_TAB:=tab_tmp(1,'REF','STRING[16]','SQL-ref');

USERS.cntx_psh();
USERS.prefix();
N.cntx_psh();
N.index('NIOSOBOD');
ZAST_NAG.cntx_psh();
ZAST_NAG.prefix();
ZAST_POZ.cntx_psh();
ZAST_POZ.index('FIND');
{!
|? _ref:=$_ret.USER;
   {? _TAB.find_key(_ref)
   || _ret.ERR:='Ustalenie zastępstwa nie jest możliwe - układ danych cyklicznych.';
      _ret.USER:=null();
      0
   || _TAB.REF:=_ref;
      _TAB.add();

      _dalej:=0;
      _spr:=0;
      _vobecny:=0;
      ZAST_POZ.prefix(_firma,_ret.USER,'T','T',_act);
      {? ZAST_POZ.last()
      || {!
         |? {? (ZAST_POZ.ZAST_NAG().DATA_DO=_d0 | _dt<=ZAST_NAG.DATA_DO) & ZAST_NAG.DATA_OD<=_dt &
               (ZAST_NAG.ZASTNIEO='N' | (_spr=0 & (_spr:=1;_vobecny:=~_obecny(_firma,_ret.USER,_dt)) | _spr=1 & _vobecny))&
               (_b_role=null() | _b_role=ZAST_NAG.B_ROLE)
            || _ret.USER:=ZAST_POZ.USERS;
               _dalej:=1;
               0
            || ZAST_POZ.prev()
            ?}
         !}
      ?};
      _dalej
   ?}
!};
ZAST_POZ.cntx_pop();
ZAST_NAG.cntx_pop();
N.cntx_pop();
USERS.cntx_pop();

_ret


\getWebUser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia użytkownika na podstawie loginu internetowego
::   WE: _a - login webowy
::   WY: czy udało się znaleźć użytkownika
::  OLD: \getWebUser/users.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_sys:=exec(,'__sysusr',1);
{? var_pres('_sys')>0
|| _u:=_sys.getWebUser(_a);
   {? var_pres('_u')>0
   || USERS.index('USR_GUID'); USERS.prefix(_u.Guid,);
      _ok:=USERS.first()
   ?}
?};
_ok


\lang
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Język użytkownika
::   WE:
::   WY: dwu znakowy identyfikator języka
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')='' || lang_language(1) || app_info('web_lang') ?}


\user_lang
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Język użytkownika wg USERS.LANG
::   WE:
::   WY: język
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
_res:=OPERATOR.USER().LANG;
USERS.cntx_pop();
_res


\user_lang_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Inicjowanie wersji językowej
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
USERS.prefix();
{? USERS.seek(OPERATOR.USER) & USERS.LANG=''
||
   _lang:=exec('lang','#users');
   {? _lang<>USERS.LANG
   || {? USERS.r_lock(1,1,1)
      || USERS.get();
         USERS.LANG:=_lang;
         USERS.put();
         USERS.r_unlock()
      ?}
   ?}
?};
USERS.cntx_pop()


\can_mod_superuser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Sprawdza czy mogę modyfikować superużytkownika
::   WE: [_a] - STRING - treść do komunikatu: co jest modyfikowane
::   WY: obj_new()
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_what:='innego użytkownika specjalnego'@;
{? var_pres('_a')=type_of('')
|| _what:=_a
?};
_obj:=obj_new('RESULT','MSG');
_obj.RESULT:=0;
_obj.MSG:='';

{? OPERATOR.USER().KOD='admin'
||
:: Admin może wszystko
   _obj.RESULT:=1
||
   _cfg:=cfg_info('sysuser_poweruser_mode');
   _superuser:=sec_superuser();
   {? type_of(_cfg)=type_of('') & _cfg='2'
   ||
::    Jeżeli parametr konfiguracyjny 'sysuser_poweruser_mode' ma wartość 2 to superuserów
::    mogą modyfikować również inni superuserzy
      {? _superuser>0
      || _obj.RESULT:=1
      || _obj.MSG:='Tylko \'%1\' lub użytkownik specjalny może modyfikować %2.'@['admin',_what]
      ?}
   || {? _superuser>0
      || _obj.MSG:='Aby modyfikować %1 należy ustawić parametr konfiguracyjny: %2'@[_what,'sysuser_poweruser_mode=2']
      || _obj.MSG:='Tylko \'%1\' może modyfikować %2.'@['admin',_what]
      ?}
   ?}
?};
_obj

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 2e68e7074077e79eef442a91b2815d384c78b32b78be65e04f8c828928257e6235a850a8f5e5932c3bbc2ae85aea583d38e9b59589e3f344979f0708011001eb88c744b07915641733e5675d2b4a34e1adb98f6776f4874d846adc0e77a5e5926eb17fb88a373eae466a7a8897c54b8e6bc8afb6f727ad9f534d86586a16cfd5
