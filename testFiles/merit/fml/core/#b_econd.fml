:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_econd.fml
:: Utworzony: 22.02.2016
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa zdarzeń warunkowych
::======================================================================================================================


\valid_property
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy element procesu ma ustawione wymagane własności
::   WE: _a - B_PREL.ref()
::   WY: 1 - własności nie są wymagane, albo wymagane własności są ustawione
::       0 - wymagane własności nie są ustawione
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_result:=1;

B_PREL.cntx_psh();
B_PREL.prefix();
{? B_PREL.seek(_b_prel)
||
:: Zdarzenie warunkowe
   {? exec('is_event','#b_event',B_PREL.B_ELE,,exec('kind_condition','#b_event'))>0
   || {? B_PREL.B_WORKER=null()
      || _result:=0
      |? B_PREL.FCOND=''
      || _result:=0
      |? ~exec('valid_formula','#field',B_PREL.FCOND)
      || _result:=0
      ?}
   ?}
?};
B_PREL.cntx_pop();
_result


\run_condition
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uruchamia obsługę formuły zdarzenia warunkowego
::   WE: _a - B_PREL.ref()/$B_PREL.ref
::   WY: _res.RES - wynik formuły warunku, który powinien być >0 (ok), <=0 (nie idzie dalej)
::       _res.OK - kod błędu, 1 - prawidłowe wywołanie
::                            liczby ujemne (błędy): -1 - błąd w interpretacji formuły warunku
::                                                   -2 - formuła warunku zwróciła tekst
::                                                        - interpretujemy go jako opis błędu
::                                                   -3 - błędny typ wyniku formuły warunku
::                                                   -4 - błędna wartość wejściowego parametru złączeniowego
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;

_b_prel:=_a;

:: Wynik
_res:=obj_new('RES','OK');
_res.RES:=0;
_res.OK:=1;

B_PREL.cntx_psh();
B_PREL.prefix();
{? B_PREL.seek(_b_prel)
||
:: Sprawdzenie, czy we wszystkich portach złączeniowych są wartości inne niż ~~
   _ports_ok:=1;
   {? B_PREL.COND_CHK<>'N'
   || B_PORT.cntx_psh();
      B_PORT.index('UNIK');
      B_PORT.prefix(null(),exec('FindAndGet','#table',B_PREL,_b_prel,,"ref()",null()),null(),exec('kind_in','#b_port'),);
      {? B_PORT.first()
      || {!
         |? _val:=($('_a.'+B_PORT.SYMBOL))(_in);
            {? B_PORT.B_TYPE().TYPE=exec('type_joined','#b_type') & type_of(_val)=0 || _ports_ok:=0 ?};
            _ports_ok & B_PORT.next()
         !}
      ?};
      B_PORT.cntx_pop()
   ?};

   {? _ports_ok
   ||
::    Formuła warunku
      on_error(2);
      _ret:=($B_PREL.FCOND)(_in,_int,_out);
      {? in_error()
      || _res.RES:=0; _res.OK:=-1
      |? type_of(_ret)=type_of('')
      || _res.RES:=_ret; _res.OK:=-2
      |? type_of(_ret)<>type_of(0)
      || _res.RES:=0; _res.OK:=-3
      || _res.RES:=_ret; _res.OK:=1
      ?};
      on_error(0)
   || _res.RES:=0; _res.OK:=-4
   ?}
?};
B_PREL.cntx_pop();
_res


\save_condition
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Zachowuje wartość portu wyjściowego zdarzenia warunkowego (dla zdarzenia startowego)
::   WE: _a - obiekt menadżera procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=_a;
_sig_val:=_mp.sigVal;
{? type_of(_sig_val)=type_of(~~)
|| _result:=1
|| _result:=_mp.save(exec('kind_out','#b_port'),'OUT',_sig_val)
?};
_result


\trig_formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Formuła trigera "przed put" lub "przed del" dla tabeli obsługiwanej w zdarzeniach warunkowych
::   WE: _a - alas tabeli
::       _b - typ trigera: 'put' - przed put, 'del' - przed del
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_typ:=_b;

BI_PORT.cntx_psh(); B_PORT.cntx_psh(); _tab.cntx_psh();
BI_PORT.index('EVALUE');
BI_PORT.prefix(_tab.uidref(),'T');
{? BI_PORT.first()
|| {!
   |? exec('FindAndGet','#table',BI_PREL,BI_PORT.BI_PREL,,"BI_PREL.C_DELAY:=0;BI_PREL.put()",~~);
      BI_PORT.next()
   !}
?};
BI_PORT.cntx_pop(); B_PORT.cntx_pop(); _tab.cntx_pop();

1


\trig
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Ustawienie trigerów dla tabel obsługiwanych w zdarzeniach warunkowych
::----------------------------------------------------------------------------------------------------------------------
:: Porty wejściowe złączeniowe zdarzeń warunkowych oznaczone do obsługi
_tab:=tab_tmp(1,'ACR','STRING[8]','Tabela');
B_PORT.cntx_psh();
_ndx:=B_PORT.ndx_tmp(,,'C_EVENT',,,'B_TYPE','SYMBOL',);
B_PORT.index(_ndx);
B_PORT.prefix('T','_');
{? B_PORT.lock(,1)
|| {? B_PORT.first()
   || {!
      |? _acr:=1-B_PORT.B_TYPE().SYMBOL;
         _tab.prefix(_acr,);
         {? ~_tab.first() || _tab.ACR:=_acr; _tab.add() ?};
         B_PORT.next()
      !}
   ?};
   B_PORT.unlock()
:: Jeśli nie można pobrać, to ładowane są domyślne tabele
|| _arr:=spli_str('DOK,EANN,EDOKUM,ND,PAR_NAG,ZK_N,ZL',',');
   {! _it:=1.. obj_len(_arr)
   |! _tab.ACR:=_arr[_it]; _tab.add()
   !}
?};
B_PORT.ndx_drop(_ndx);
B_PORT.cntx_pop();
_tab.prefix();

{? _tab.first()
|| {!
   |? _formula:=$('exec(\'trig_formula\',\'#b_econd\',%1,\'put\')'[_tab.ACR]);
      ($_tab.ACR)().trig_b('put',_formula,'b_econd');
      _formula:=$('exec(\'trig_formula\',\'#b_econd\',%1,\'del\')'[_tab.ACR]);
      ($_tab.ACR)().trig_b('del',_formula,'b_econd');
      _tab.next()
   !}
?};
~~


\event_delayed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Odłożenie zdarzenia warunkowego do późniejszej obsługi
::   WE: _a - BI_PREL.ref()
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;

BI_PREL.cntx_psh();
BI_PREL.prefix();
{? BI_PREL.seek(_bi_prel)
||
:: Pętla po portach wejściowych zdarzenia - sprawdzenie, czy są oznaczonone
   _ok:=0;
   BI_PORT.cntx_psh(); B_PORT.cntx_psh();
   BI_PORT.index('PRELRODZ');
   BI_PORT.prefix(BI_PREL.ref(),exec('kind_in','#b_port'));
   {? BI_PORT.first()
   || {!
      |? {? BI_PORT.B_PORT().C_EVENT='T'
         || _ok:=1
         ?};
         BI_PORT.next()
      !}
   ?};
   BI_PORT.cntx_pop(); B_PORT.cntx_pop();

   {? _ok
   || BI_PREL.C_DELAY:=1;
      BI_PREL.put()
   ?}
?};
BI_PREL.cntx_pop();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 d62eaeee6b6f504540d10b7161ddeec4b5972af0b8e0821bd63e1de09d43875351d61274bb0747aab62712be0df0b1099bc9091d42b20862f78f27ff2eb6b72da732c6bceffdd8450df2593947724f8a88651c981bbf104ceadd53660c63e232b6af86e262da946ed53258f7f08e8a8e2867bfffce5902d75540481d1a370e9a
