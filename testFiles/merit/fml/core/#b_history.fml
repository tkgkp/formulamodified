:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_history.fml
:: Utworzony: 04.07.2016
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły do obsługi historii wywołań, uprawnień itp w mechanizmie procesowości
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Inicjuje wszystkim tabelom B_ACTROL i B_USRROL znaczniki czasowe od których liczymy moment nadania
::   WE: [_a] - REAL - tm_stamp startu systemu, jeżeli nie podany to 2016/01/01
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_start:=0;

{? var_pres('_a')=type_of(0)
|| _start:=_a
|| _start:=exec('create','#tm_stamp',date(2016,1,1),time(0,0,0))
?};


_fml:='
   B_ACTROL.TM_START:='+$_start+';
   B_ACTROL.STARTD:=exec(\'tm_stamp2date\',\'#tm_stamp\','+$_start+');
   B_ACTROL.STARTT:=exec(\'tm_stamp2time\',\'#tm_stamp\','+$_start+');
   B_ACTROL.put()
';
_fml:=$_fml;
exec('for_each','#table',B_ACTROL,_fml);

_fml:='
   B_USRROL.TM_START:='+$_start+';
   B_USRROL.STARTD:=exec(\'tm_stamp2date\',\'#tm_stamp\','+$_start+');
   B_USRROL.STARTT:=exec(\'tm_stamp2time\',\'#tm_stamp\','+$_start+');
   B_USRROL.put()
';
_fml:=$_fml;
exec('for_each','#table',B_USRROL,_fml);
~~


\demo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS:
::   WE: _a - USERS.ref
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_user:=_a;

_can_continue:=1;

USERS.cntx_psh();
USERS.prefix();
B_ACTION.cntx_psh();
B_ACTION.prefix();
B_ROLE.cntx_psh();
B_ROLE.prefix();
{? USERS.seek(_user)
||
   _buf_usrrol:=exec('buffer','#b_usrrol');
   _buf_actrol:=exec('B_ACTROL','#buffer');

:: Kierownik
   _rola:=exec('FindInSet','#table','B_ROLE','UNIK','Kierownik',REF.FIRMA);

   {? _rola<>null()
   ||

      _buf_usrrol.B_ROLE:=_rola;
      _buf_usrrol.FIRMA:=REF.FIRMA;
      _buf_usrrol.USERS:=_user;
      _buf_usrrol.TM_START:=exec('create','#tm_stamp',date(2015,06,01),time(0,0,0));

      _can_continue:=exec('add_urhis','#b_history',_buf_usrrol,exec('create','#tm_stamp',date(2015,06,16),time(0,0,0)));

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','BIQ_FKS_RAPA');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,01),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,08),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','CTR_HBD_DDEF');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,07),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,16),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','TPP_GOP_DRED');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,20),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,07,02),time(0,0,0)))

      || _can_continue:=0
      ?}

   || _can_continue:=0
   ?};

:: Magazynier
   _rola:=exec('FindInSet','#table','B_ROLE','UNIK','Magazynier',REF.FIRMA);

   {? _can_continue>0 & _rola<>null()
   ||
      _buf_usrrol.B_ROLE:=_rola;
      _buf_usrrol.FIRMA:=REF.FIRMA;
      _buf_usrrol.USERS:=_user;
      _buf_usrrol.TM_START:=exec('create','#tm_stamp',date(2015,06,07),time(0,0,0));

      _can_continue:=exec('add_urhis','#b_history',_buf_usrrol,exec('create','#tm_stamp',date(2015,06,21),time(0,0,0)));

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','LMG_BAD_DWYK');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,07),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,08),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','LMG_INT_DAIN');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,15),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,07,02),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','LMG_MAG_AREO');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,01),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,18),time(0,0,0)))

      || _can_continue:=0
      ?}

   || _can_continue:=0
   ?};

:: Księgowy

   _rola:=exec('FindInSet','#table','B_ROLE','UNIK','Księgowy',REF.FIRMA);

   {? _can_continue>0 & _rola<>null()
   ||
      _buf_usrrol.B_ROLE:=_rola;
      _buf_usrrol.FIRMA:=REF.FIRMA;
      _buf_usrrol.USERS:=_user;
      _buf_usrrol.TM_START:=exec('create','#tm_stamp',date(2015,06,17),time(0,0,0));

      _can_continue:=exec('add_urhis','#b_history',_buf_usrrol,exec('create','#tm_stamp',date(2015,07,02),time(0,0,0)));

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','FKS_DKS_DARK');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,15),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,18),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','FKS_DKS_DLTS');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,01),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,08),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','FKS_KSP_ZSPR');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,07,01),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2016,02,02),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','BIQ_FKS_RAPA');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,01),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,21),time(0,0,0)))

      || _can_continue:=0
      ?}

   || _can_continue:=0
   ?};

:: Sprzedaż

   _rola:=exec('FindInSet','#table','B_ROLE','UNIK','Sprzedaż',REF.FIRMA);

   {? _can_continue>0 & _rola<>null()
   ||
      _buf_usrrol.B_ROLE:=_rola;
      _buf_usrrol.FIRMA:=REF.FIRMA;
      _buf_usrrol.USERS:=_user;
      _buf_usrrol.TM_START:=exec('create','#tm_stamp',date(2015,05,01),time(0,0,0));

      _can_continue:=exec('add_urhis','#b_history',_buf_usrrol,exec('create','#tm_stamp',date(2016,02,02),time(0,0,0)));

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','LSP_CEN_PCGR');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,01),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,02),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','LSP_FAK_AASP');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,15),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,18),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','LSP_OFE_DOFE');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,20),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,07,02),time(0,0,0)))

      || _can_continue:=0
      ?};

      _action:=exec('FindInSet','#table','B_ACTION','UNIK','BIQ_FKS_RAPA');

      {? _can_continue>0 & _action<>null()
      || _buf_actrol.B_ACTION:=_action;
         _buf_actrol.B_ROLE:=_rola;
         _buf_actrol.FIRMA:=REF.FIRMA;
         _buf_actrol.MANUAL:='T';
         _buf_actrol.TM_START:=exec('create','#tm_stamp',date(2015,06,01),time(0,0,0));

         _can_continue:=exec('add_arhis','#b_history',_buf_actrol,exec('create','#tm_stamp',date(2015,06,21),time(0,0,0)))

      || _can_continue:=0
      ?}
   || _can_continue:=0
   ?};
   ~~
?};
USERS.cntx_pop();
B_ROLE.cntx_pop();
B_ACTION.cntx_pop();
~~


\clear_history
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czyści rekordy B_URHIS i B_ARHIS we wszystkich maskach dla wszystkich użytkowników i wszystkich ról
::   WE: [_a] - FIRMA.ref - firma w której historię wyczyścić, jeżeli nie podana to we wszystkich
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_firma:=REF.FIRMA;
{? var_pres('_a')=type_of(FIRMA.ref())
|| _firma:=_a
?};

_result:=0;
_can_continue:=1;

B_URHIS.cntx_psh();
B_ARHIS.cntx_psh();
_fml:="
   _firma:=_b;
   _result:=0;
   _can_continue:=1;
   B_URHIS.cntx_psh();
   B_URHIS.index('TM_START');
   {? _firma<>null()
   || B_URHIS.prefix(_firma)
   || B_URHIS.prefix()
   ?};
   {? B_URHIS.first()
   || {!
      |?
         _can_continue:=B_URHIS.del(,1);
         B_URHIS.first() & _can_continue>0
      !}
   ?};
   B_URHIS.cntx_pop();
   {? _can_continue>0
   || _result:=1
   ?};
   _result
";

_can_continue:=exec('for_each_mask','#table',B_URHIS,_fml,,,_firma,1);

{? _can_continue>0
||
   _fml:="
      _firma:=_b;
      _result:=0;
      _can_continue:=1;
      B_ARHIS.cntx_psh();
      B_ARHIS.index('TM_START');
      {? _firma<>null()
      || B_ARHIS.prefix(_firma)
      || B_ARHIS.prefix()
      ?};
      {? B_ARHIS.first()
      || {!
         |?
            _can_continue:=B_ARHIS.del(,1);
            B_ARHIS.first() & _can_continue>0
         !}
      ?};
      B_ARHIS.cntx_pop();
      {? _can_continue>0
      || _result:=1
      ?};
      _result
   ";
   _can_continue:=exec('for_each_mask','#table',B_ARHIS,_fml,,,_firma,1)
?};
B_URHIS.cntx_pop();
B_ARHIS.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\add_urhis_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja dodająca rekord do tabeli B_URHIS
::   WE: _a - bufor tabeli B_URHIS
::   WY: B_URHIS.ref lub null
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('B_URHIS','#buffer')
         ?};
_result:=null();

B_URHIS.cntx_psh(); B_URHIS.clear();
B_URHIS.blank();
_buffer.set();
{? B_URHIS.add()>0
|| _result:=B_URHIS.ref()
?};
B_URHIS.cntx_pop();
_result


\add_arhis_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja dodająca rekord do tabeli B_ARHIS
::   WE: _a - bufor tabeli B_ARHIS
::   WY: B_ARHIS.ref lub null
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('B_ARHIS','#buffer')
         ?};
_result:=null();

B_ARHIS.cntx_psh(); B_ARHIS.clear();
B_ARHIS.blank();
_buffer.set();
{? B_ARHIS.add()>0
|| _result:=B_ARHIS.ref()
?};
B_ARHIS.cntx_pop();
_result


\add_urhis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Na podstawie bufora tabeli B_USRROL który został już usunięty zakłada nowy rekord w tabeli z historią
::       uprawnień dla użytkownika
::   WE: _a - obj_new - bufor tabeli B_USRROL - usunięty rekord
::       [_b] - REAL - koniec obowiazywania uprawnienia, jeśli nie podane to bieżąca chwila
::       [_c] - STRING - maska do której ładować rekord z historią, jeśli nie podana to dwie ostatnie cyfry z końca
::                       obowiązywania uprawnienia
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_buffer:=_a;

_tm_end:=0;
{? var_pres('_b')=type_of(0)
|| _tm_end:=_b
|| _tm_end:=B_URHIS.tm_stamp()
?};
_mask:='';
{? var_pres('_c')=type_of('')
|| _mask:=_c
|| _endd:=exec('tm_stamp2date','#tm_stamp',_tm_end);
   _mask:=($(_endd~1))+2
?};

_result:=0;

B_URHIS.cntx_psh();
:: Otwarcie właściwej maski
B_URHIS.use(6+B_URHIS.name()+_mask);

:: Uzupełnienie bufora tabeli B_URHIS
_buf_urhis:=exec('B_URHIS','#buffer');
_buf_urhis.FIRMA:=_buffer.FIRMA;
_buf_urhis.B_ROLE:=_buffer.B_ROLE;
_buf_urhis.U1_KOD:=_buffer.U1_KOD;
_buf_urhis.U1_DANE:=_buffer.U1_DANE;
USERS.cntx_psh();
USERS.prefix();
{? USERS.seek(_buffer.USERS)
|| _buf_urhis.USR_KOD:=USERS.KOD;
   _buf_urhis.USR_GUID:=USERS.GUID;
   _buf_urhis.USR_DANE:=USERS.DANE
?};
USERS.cntx_pop();

_buf_urhis.TM_START:=_buffer.TM_START;
_buf_urhis.TM_END:=_tm_end;
_buf_urhis.U2_KOD:=exec('username','#users');
_buf_urhis.U2_DANE:=userdata();

:: Dodawanie rekordu
{? exec('add_urhis_core','#b_history',_buf_urhis)<>null()
|| _result:=1
?};

B_URHIS.cntx_pop();
_result


\add_arhis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Na podstawie bufora tabeli B_ACTROL który został już usunięty zakłada nowy rekord w tabeli z historią
::       uprawnień dla roli
::   WE: _a - obj_new - bufor tabeli B_ACTROL - usunięty rekord
::       [_b] - REAL - koniec obowiazywania uprawnienia, jeśli nie podane to bieżąca chwila
::       [_c] - STRING - maska do której ładować rekord z historią, jeśli nie podana to dwie ostatnie cyfry z końca
::                       obowiązywania uprawnienia
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_buffer:=_a;

_tm_end:=0;
{? var_pres('_b')=type_of(0)
|| _tm_end:=_b
|| _tm_end:=B_URHIS.tm_stamp()
?};
_mask:='';
{? var_pres('_c')=type_of('')
|| _mask:=_c
|| _endd:=exec('tm_stamp2date','#tm_stamp',_tm_end);
   _mask:=($(_endd~1))+2
?};


_result:=0;

B_ARHIS.cntx_psh();
:: Otwarcie właściwej maski
B_ARHIS.use(6+B_ARHIS.name()+_mask);

:: Uzupełnienie bufora tabeli B_ARHIS
_buf_arhis:=exec('B_ARHIS','#buffer');
_buf_arhis.FIRMA:=_buffer.FIRMA;
_buf_arhis.B_ROLE:=_buffer.B_ROLE;
_buf_arhis.U1_KOD:=_buffer.U1_KOD;
_buf_arhis.U1_DANE:=_buffer.U1_DANE;
B_ACTION.cntx_psh();
B_ACTION.prefix();
{? B_ACTION.seek(_buffer.B_ACTION)
|| _buf_arhis.ACT_UID:=B_ACTION.UID;
   _buf_arhis.ACT_NAME:=B_ACTION.NAME
?};
B_ACTION.cntx_pop();

_buf_arhis.TM_START:=_buffer.TM_START;
_buf_arhis.MANUAL:=_buffer.MANUAL;
_buf_arhis.TM_END:=_tm_end;
_buf_arhis.U2_KOD:=exec('username','#users');
_buf_arhis.U2_DANE:=userdata();

:: Dodawanie rekordu
{? exec('add_arhis_core','#b_history',_buf_arhis)<>null()
|| _result:=1
?};
B_ARHIS.cntx_pop();
_result


\zak_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła po redagowaniu pola zmiennej BPMN.ZAK_KIND
::   WE: [_a] - INTEGER - 0/[1] - czy wykonywać win_disp
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=1;

_win_disp:=1;
{? var_pres('_a')=type_of(1)
|| _win_disp:=_a
?};

{? BPMN.ZAK_KIND='S'
|| BPMN.efld_opt('ZAK_HIS','enable=1',,'ZAK_DATA');
   BPMN.efld_opt('ZAK_HIS','enable=0',,'ZAK_OD');
   BPMN.efld_opt('ZAK_HIS','enable=0',,'ZAK_DO');
   ~~
|? BPMN.ZAK_KIND='Z'
|| BPMN.efld_opt('ZAK_HIS','enable=0',,'ZAK_DATA');
   BPMN.efld_opt('ZAK_HIS','enable=1',,'ZAK_OD');
   BPMN.efld_opt('ZAK_HIS','enable=1',,'ZAK_DO');
   ~~
?};

{? _win_disp>0
|| win_disp()
?};
_result


\define_zakres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno z definicją zakresu. Zwraca obiekt nazwany z dwoma polami: TM_START i TM_END
::   WE: [_a] - STRING - rodzaj zakresu: 'S' - jeden dzien
::                                       'Z' - zakres od do
::       [_b] - STRING - czego dotyczą komunikaty podczas walidacji (domyślnie 'Historia')
::       [_c] - DATA - data pojedyńcza
::       [_d] - DATA - data od
::       [_e] - DATA - data do
::   WY: obj_new()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_kind:='S';
{? var_pres('_a')=type_of('')
|| _kind:=_a
?};
_what:='Historia';
{? var_pres('_b')=type_of('')
|| _what:=_b
?};
_zak_data:=date();
{? var_pres('_c')=type_of(date())
|| _zak_data:=_c
?};
_zak_od:=date()-30;
{? var_pres('_d')=type_of(date())
|| _zak_od:=_d
?};
_zak_do:=date();
{? var_pres('_e')=type_of(date())
|| _zak_do:=_e
?};

_result:=obj_new('TM_START','TM_END');
_result.TM_START:=0;
_result.TM_END:=0;

BPMN.ZAK_KIND:=_kind;
BPMN.ZAK_DATA:=_zak_data;
BPMN.ZAK_OD:=_zak_od;
BPMN.ZAK_DO:=_zak_do;

exec('zak_ae','#b_history',0);

BPMN.win_edit('ZAK_HIS');

_validate:="
   _result:='';
   {? BPMN.ZAK_KIND='S'
   ||
      {? BPMN.ZAK_DATA=date(0,0,0)
      || FUN.emsg('Data musi być podana.'@);
         _result:='ZAK_DATA'
      ?};
      {? BPMN.ZAK_DATA>date()
      || FUN.emsg('"+_what+" nie może być pobierana z przyszłości.'@);
         _result:='ZAK_DATA'
      ?};
      ~~
   |? BPMN.ZAK_KIND='Z'
   ||
      {? _result='' & BPMN.ZAK_OD>date()
      || FUN.emsg('"+_what+"  nie może być pobierana z przyszłości.'@);
         _result:='ZAK_OD'
      ?};
      {? _result='' & BPMN.ZAK_DO>date()
      || FUN.emsg('"+_what+"  nie może być pobierana z przyszłości.'@);
         _result:='ZAK_DO'
      ?};

      {? BPMN.ZAK_OD>BPMN.ZAK_DO
      || FUN.emsg('Data początkowa nie może być większa od daty końcowej.'@);
         _result:='ZAK_OD'
      ?};

      {? BPMN.ZAK_DO=date(0,0,0)
      || FUN.emsg('Data końcowa musi być podana.'@);
         _result:='ZAK_DO'
      ?};
      ~~
   ?};
   _result
";
_validate:=$_validate;

{? BPMN.edit(_validate)>0
|| {? BPMN.ZAK_KIND='S'
   || _result.TM_START:=exec('create','#tm_stamp',BPMN.ZAK_DATA,time(0,0,0));
      _result.TM_END:=exec('create','#tm_stamp',BPMN.ZAK_DATA+1,time(0,0,0))
   |? BPMN.ZAK_KIND='Z'
   || _result.TM_START:=exec('create','#tm_stamp',BPMN.ZAK_OD,time(0,0,0));
      _result.TM_END:=exec('create','#tm_stamp',BPMN.ZAK_DO+1,time(0,0,0))
   ?}
?};
_result


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Środowisko modułu historii uprawnień
::   WY: obj_new()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
::UWAGA: _fld, i _mth to formułki pomocnicze, zeby wygodniej tworzyć tablicę i komentować poszczególne jej elementy
::       powiedzmy, że to będzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to będzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
   _fld('MODE','Tryb wyświetlania: USER - od strony użytkownika, ACTION - od strony czynności')

   ,_fld('TM_START','Zakres od pobieranych danych z historii')
   ,_fld('TM_END','Zakres do pobieranych danych z historii')

   ,_fld('USER','Użytkownik dla którego pobierać dane z historii')
   ,_fld('USR_GUID','Użytkownik dla którego pobierać dane z historii')
   ,_fld('USR_KOD','Użytkownik dla którego pobierać dane z historii')
   ,_fld('USR_DANE','Użytkownik dla którego pobierać dane z historii')

   ,_fld('B_ACTION','Czynnność dla której pobierać dane z historii')
   ,_fld('ACT_UID','Czynnność dla której pobierać dane z historii')
   ,_fld('ACT_NAME','Czynnność dla której pobierać dane z historii')

   ,_fld('ROLE','Rola dla której pobierać dane z historii')
   ,_fld('ROLE_SQL','Rola dla której pobierać dane z historii')

   ,_fld('USER_ADDED','Czy dla danej roli dodano jakiegokolwiek użytkownika')

:: obsługa kontekstu okien
   ,_fld('SEL_ROLE','Rola na której stoję')
   ,_fld('SEL_USER','Użytkownik na którym stoję')
   ,_fld('SEL_ACTION','Czynność na której stoję')

:: tabele tymczasowe
   ,_fld('TAB_ROLE','Tabelka tymczasowa z rolami')
   ,_fld('TAB_ACTIONS','Tabelka tymczasowa z czynnościami')
   ,_fld('TAB_ACT_TREE','Tabelka tymczasowa z czynnościami')
   ,_fld('TAB_USERS','Tabelka tymczasowa z użytkownikami')

:: indeksy tabel
   ,_fld('NDX_ACT_UID','Indeks tabeli tymczasowej .TAB_ACT_TREE')
   ,_fld('NDX_ACT_UNIQ','Indeks tabeli tymczasowej .TAB_ACT_TREE')

   ,_fld('NDX_USR_UID','Indeks tabeli tymczasowej .TAB_USERS')
   ,_fld('NDX_USR_UNIQ','Indeks tabeli tymczasowej .TAB_USERS')

:: Okna
   ,_fld('WIN_MAIN','Główne okno grupowe')
   ,_fld('WIN_ROLE','Okno wertowania ról użytkownika')
   ,_fld('WIN_USERS','Okno wertowania użytkowników przypisanych do roli')
   ,_fld('WIN_ACT_ALL','Okno wertowania wszystkich czynności')
   ,_fld('WIN_ACT_ROLE','Okno wertowania czynności do roli')

:: Identyfikatory okien
   ,_fld('wid_main','Identyfikator okna')
   ,_fld('wid_main2','Identyfikator okna')
   ,_fld('wid_role','Identyfikator okna')
   ,_fld('wid_users','Identyfikator okna')
   ,_fld('wid_act_all','Identyfikator okna')
   ,_fld('wid_act_role','Identyfikator okna')

   ,_fld('tit_main','Tytuł głównego okienka')

:: metody
   ,_mth('select','uruchamia wertowanie okna')
   ,_mth('clear','czyści zmienne')
   ,_mth('load','ładuje dane')
   ,_mth('reload','przeładowuje zawartość okna')

);
_env.MODE:='USER';
_env.TM_START:=0;
_env.TM_END:=0;

_env.USER:=null();
_env.USR_GUID:='';
_env.USR_KOD:='';
_env.USR_DANE:='';
_env.ROLE:=null();
_env.ROLE_SQL:='';
_env.USER_ADDED:=0;

_env.ACT_UID:='';
_env.ACT_NAME:='';

_env.SEL_ROLE:=null();
_env.SEL_USER:=null();
_env.SEL_ACTION:=null();

_env.TAB_ROLE:=~~;
_env.TAB_ACTIONS:=~~;
_env.TAB_ACT_TREE:=~~;
_env.TAB_USERS:=~~;

_env.WIN_MAIN:='';
_env.WIN_ROLE:='';
_env.WIN_USERS:='';
_env.WIN_ACT_ROLE:='';
_env.WIN_ACT_ALL:='';

_env.wid_main:='#hist_main_usr';
_env.wid_main2:='#hist_main_role';
_env.wid_role:='#hist_role';
_env.wid_users:='#hist_users';
_env.wid_act_all:='#hist_act_all';
_env.wid_act_role:='#hist_act_role';

_env.tit_main:='Historia uprawnień';

_env.clear:="
   params_set(params_get());
   .WIN_MAIN:='';

   {? var_pres('TAB_ROLE',.)>100
   || .TAB_ROLE.erase()
   ?};
   {? var_pres('TAB_ACTIONS',.)>100
   || .TAB_ACTIONS.erase()
   ?};
   {? var_pres('TAB_ACT_TREE',.)>100
   || exec('tree_del','#tree',.TAB_ACT_TREE,0)
   ?};
   {? var_pres('TAB_USERS',.)>100
   || .TAB_USERS.erase()
   ?};
   .SEL_ROLE:=null();
   .SEL_USER:=null();
   .SEL_ACTION:=null();
   ~~
";

_env.load:="
   params_set(params_get());
   {? .MODE='ACTION'
   ||
::    Ładujemy dane
      exec('load_action','#b_history',.);
       ~~
   |? .MODE='USER'
   ||
::    Ładujemy dane
      exec('load_user','#b_history',.);
      ~~
   ?};
   ~~
";


_env.select:="
   params_set(params_get());
   B_ROLE.cntx_psh();
   B_ACTION.cntx_psh();
   USERS.cntx_psh();
   params_set(params_get());

:: Tworzymy tabele tymczasowe
   exec('tab_role','#b_history',.);
   exec('tab_actions','#b_history',.);
   exec('tab_actions_tree','#b_history',.);
   exec('tab_users','#b_history',.);

   _result:=0;
   {!
   |?
      .reload();

      {? .MODE='ACTION'
      ||
         .tit_main:='Historia uprawnień - widok od strony czynności';

::       Tworzymy okna składowe

         .WIN_USERS:=exec('win_users','#b_history',.,.wid_users);
         .WIN_ROLE:=exec('win_role','#b_history',.,.wid_role);

::       Tworzymy okno główne
         .WIN_MAIN:=exec('grp_make_act','#b_history',.);

::       Ustawiamy kontekst
         .SEL_ACTION:=.B_ACTION;

::       Pokazujemy okno
         _result:=.TAB_ROLE.select();
         ~~
      |? .MODE='USER'
      ||
         .tit_main:='Historia uprawnień - widok od strony użytkownika';

::       Tworzymy okna składowe
         .WIN_ROLE:=exec('win_role','#b_history',.,.wid_role);
         .WIN_ACT_ROLE:=exec('win_actions','#b_history',.,.wid_act_role,.TAB_ACTIONS);
         .WIN_ACT_ALL:=exec('win_actions_tree','#b_history',.,.wid_act_all,.TAB_ACT_TREE);

::       Tworzymy okno główne
         .WIN_MAIN:=exec('grp_make_usr','#b_history',.);

::       Ustawiamy kontekst
         .SEL_USER:=.USER;

::       Pokazujemy okno
         _result:=.TAB_ROLE.select()
      ?};
      .clear();
      _result<>0
   !};

   B_ACTION.cntx_pop();
   USERS.cntx_pop();
   B_ROLE.cntx_pop();
   _result
";

_env.reload:="
   params_set(params_get());
:: _a - INTEGER - [0]/1 - czy robić grp_disp głównego okna?
   _grp_disp:=0;
   {? var_pres('_a')=type_of(0)
   || _grp_disp:=_a
   ?};

   .clear();
   .load();

   {? _grp_disp>0
   || {? .MODE='ACTION'
      ||
         ~~
      |? .MODE='USER'
      || grp_disp(.TAB_ROLE,.WIN_ROLE,1);
         ~~
      ?}
   ?};
   ~~
";
_env


\tab_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy tabelkę ról w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_env.TAB_ROLE:=tab_tmp(3,
:: 'POLE','TYP','Nazwa w oknie',
   'ROLE_SQL','STRING[16]','Ref SQL roli',
   'STRSTART','STRING[19]','Obowiązywała od',
   'STREND','STRING[19]','Obowiązywała do',
   'ROLE','STRING[100]','Nazwa roli',
   'AKT','STRING[1]','Aktualna?',
   'USR_GUID','IDTIME','Unikalny identyfikator użytkownika',
   'MANUAL','STRING[1]','Czy uprawnienie nadane ręcznie czy przez proces',
   'U1','STRING[60]','Użytkownik przypisujący',
   'U2','STRING[60]','Użytkownik odbierający'
);
~~


\win_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania ról w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::       _b - STRING - identyfikator okna
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_env:=_a;
_wid:=_b;

_tab:=_env.TAB_ROLE;

_title:='Role';

{? _env.MODE='USER' & _env.USR_DANE<>''
|| _title+=' użytkownika: %1 w okresie %2 - %3'@[_env.USR_DANE,exec('to_string','#tm_stamp',_env.TM_START,1),exec('to_string','#tm_stamp',_env.TM_END,1)]
|? _env.MODE='ACTION' & _env.ACT_UID<>''
|| _title+=' uprawniające do czynności: %1 - %2 w okresie %3 - %4'@[_env.ACT_UID,_env.ACT_NAME,exec('to_string','#tm_stamp',_env.TM_START,1),exec('to_string','#tm_stamp',_env.TM_END,1)]
?};

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');

_tab.win_fld(_wer,,'AKT'     ,,,5,,,'Aktualna?'@,0,,2,,"\'T\'","\'N\'");
_tab.win_fld(_wer,,'ROLE'     ,,,20,,,'Nazwa'@,0);
_tab.win_fld(_wer,,'STRSTART',,,14,,,'Obowiązywała od'@,0);
_tab.win_fld(_wer,,'STREND'  ,,,14,,,'Obowiązywała do'@,0);
{? _env.MODE='ACTION'
|| _tab.win_fld(_wer,,'MANUAL',,,-5,,,'Przez proces?'@,0,'Czy uprawnienie zostało nadane za pomocą procesu?'@,2,,"\'N\'","\'T\'")
?};
_tab.win_fld(_wer,,'U1' ,,,12,,,'Przypisujący'@,0);
_tab.win_fld(_wer,,'U2' ,,,12,,,'Odbierający'@,0);

{? __develop>0 & _env.MODE='USER'
||
   _fb:="
      params_set(params_get());
      _env:=params_get().env;
      {? FUN.ask('Inicjalizować dane demo?')>0
      || exec('demo','#b_history',_env.USER);
         _env.reload(1)
      ?};
      1
   ";
   _tab.win_act(_wer,0,'Formuła','Demo',,,_fb);
   _tab.win_act(_wer,1,'Formuła','Demo',,,_fb);

   _fb:="
      params_set(params_get());
      _env:=params_get().env;
      {? FUN.ask('Czyścić historię?')>0
      || exec('clear_history','#b_history');
         _env.reload(1)
      ?};
      1
   ";
   _tab.win_act(_wer,0,'Formuła','Czyść historię',,,_fb);
   _tab.win_act(_wer,1,'Formuła','Czyść historię',,,_fb);
   ~~
?};

_fb:="exec('legenda','color','@B_HISTORY#01')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_fb);

_tab.win_act(_wer,,'Kolejność');
_tab.win_act(_wer,,'Rekord',,,,"exec('colorizer','#b_history')");

_tab.win_sel(_wer);
_wer


\tab_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy tabelkę użytkowników w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_env.TAB_USERS:=tab_tmp(4,
:: 'POLE','TYP','Nazwa w oknie',
   'TREE','TREE_REF','Drzewo',
   'SYMBOL','STRING[100]','Symbol',
   'NAME','STRING[100]','Nazwa',
   'USR_KOD','STRING[10]','Kod użytkownika',
   'USR_DANE','STRING[50]','Dane użytkownika',
   'STRSTART','STRING[19]','Obowiązywał od',
   'STREND','STRING[19]','Obowiązywał do',
   'AKT','STRING[1]','Aktualny?',
   'USR_GUID','IDTIME','Unikalny identyfikator użytkownika',
   'U1','STRING[60]','Użytkownik przypisujący',
   'U2','STRING[60]','Użytkownik odbierający'
);
_env.NDX_USR_UID:=_env.TAB_USERS.ndx_tmp(,,'TREE',,,'USR_KOD',,);
_env.NDX_USR_UNIQ:=_env.TAB_USERS.ndx_tmp(,,'TREE',,,'SYMBOL',,,'NAME',,,'STRSTART',,,'STREND',,);
~~


\win_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania użytkownikó w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::       _b - STRING - identyfikator okna
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_env:=_a;
_wid:=_b;

_tab:=_env.TAB_USERS;

_title:='Użytkownicy';

{? _env.MODE='ACTION' & _env.ACT_UID<>''
|| _title+=' czynności: %1 - %2 w okresie %3 - %4'@[_env.ACT_UID,_env.ACT_NAME,exec('to_string','#tm_stamp',_env.TM_START,1),exec('to_string','#tm_stamp',_env.TM_END,1)]
?};

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,1);

_tab.win_fld(_wer,,'SYMBOL'  ,,,20,,,'Symbol'@,0);
_tab.win_fld(_wer,,'NAME'     ,,,20,,,'Nazwa'@,0);
_tab.win_fld(_wer,,'STRSTART',,,14,,,'Uprawniony od'@,0);
_tab.win_fld(_wer,,'STREND'  ,,,14,,,'Uprawniony do'@,0);
_tab.win_fld(_wer,,'U1' ,,,12,,,'Przypisujący'@,0);
_tab.win_fld(_wer,,'U2' ,,,12,,,'Odbierający'@,0);

_fb:="exec('zwin_rozwin','#tree')";
_tab.win_act(_wer,0,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie/rozwijanie całości'@,_fb,,1);

::_fb:="exec('legenda','color','@B_HISTORY#01')";
::_tab.win_act(_wer,,'Formuła','Legenda'@,,,_fb);

_tab.win_act(_wer,,'Kolejność');
::_tab.win_act(_wer,,'Rekord',,,,"exec('colorizer','#b_history')");

_tab.win_sel(_wer);
_wer



\tab_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy tabelkę czynności w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_env.TAB_ACTIONS:=tab_tmp(5,
:: 'POLE','TYP','Nazwa w oknie',
   'ROLE_SQL','STRING[16]','Ref SQL roli',
   'ACT_UID','STRING[12]','Symbol czynności',
   'ACT_NAME','STRING[30]','Nazwa czynności',
   'STRSTART','STRING[19]','Obowiązywała od',
   'STREND','STRING[19]','Obowiązywała do',
   'ROLE','STRING[100]','Nazwa roli',
   'AKT','STRING[1]','Aktualna?',
   'MANUAL','STRING[1]','Czy uprawnienie nadane ręcznie czy przez proces',
   'U1','STRING[60]','Użytkownik przypisujący',
   'U2','STRING[60]','Użytkownik odbierający'
);
~~


\win_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania czynności w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::       _b - STRING - identyfikator okna
::       _c - tab_tmp - tabelka której utworzyć okno
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;
_tab:=_c;

_title:='Czynności';

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');

_tab.win_fld(_wer,,'ACT_UID'  ,,,12,,,'Symbol czynności'@,0);
_tab.win_fld(_wer,,'ACT_NAME' ,,,24,,,'Nazwa czynności'@,0);
_tab.win_fld(_wer,,'STRSTART',,,14,,,'Obowiązywała od'@,0);
_tab.win_fld(_wer,,'STREND'  ,,,14,,,'Obowiązywała do'@,0);
{? _env.MODE='USER'
|| _tab.win_fld(_wer,,'MANUAL',,,-5,,,'Przez proces?'@,0,'Czy uprawnienie zostało nadane za pomocą procesu?'@,2,,"\'N\'","\'T\'")
?};
_tab.win_fld(_wer,,'U1' ,,,12,,,'Przypisujący'@,0);
_tab.win_fld(_wer,,'U2' ,,,12,,,'Odbierający'@,0);

_fb:="exec('legenda','color','@B_HISTORY#01')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_fb);

_tab.win_act(_wer,,'Kolejność');
::_tab.win_act(_wer,,'Rekord',,,,"exec('colorizer','#b_history')");

_tab.win_sel(_wer);
_wer


\tab_actions_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy tabelkę czynności w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_env.TAB_ACT_TREE:=tab_tmp(5,
:: 'POLE','TYP','Nazwa w oknie',
   'TREE','TREE_REF','Drzewo',
   'SYMBOL','STRING[120]','Symbol',
   'NAME','STRING[120]','Nazwa',
   'STRSTART','STRING[19]','Obowiązywała od',
   'STREND','STRING[19]','Obowiązywała do',
   'ROLE_SQL','STRING[16]','Ref SQL roli',
   'ROLE','STRING[100]','Nazwa roli',
   'ACT_UID','STRING[12]','Symbol czynności',
   'ACT_NAME','STRING[30]','Nazwa czynności',
   'AKT','STRING[1]','Aktualna?',
   'MANUAL','STRING[1]','Czy uprawnienie nadane ręcznie czy przez proces',
   'U1','STRING[60]','Użytkownik przypisujący',
   'U2','STRING[60]','Użytkownik odbierający'
);
_env.NDX_ACT_UID:=_env.TAB_ACT_TREE.ndx_tmp(,,'TREE',,,'ACT_UID',,);
_env.NDX_ACT_UNIQ:=_env.TAB_ACT_TREE.ndx_tmp(,,'TREE',,,'SYMBOL',,,'NAME',,,'STRSTART',,,'STREND',,);
~~


\win_actions_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania czynności w zakresie czasu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::       _b - STRING - identyfikator okna
::       _c - tab_tmp - tabelka której utworzyć okno
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;
_tab:=_c;

_title:='Czynności';
{? _env.MODE='USER' & _env.USR_DANE<>''
||
   _title+=' użytkownika: %1 w okresie %2 - %3'@[_env.USR_DANE,exec('to_string','#tm_stamp',_env.TM_START,1),exec('to_string','#tm_stamp',_env.TM_END,1)]
?};

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,1);

_tab.win_fld(_wer,,'SYMBOL'  ,,,20,,,'Symbol'@,0);
_tab.win_fld(_wer,,'NAME'    ,,,24,,,'Nazwa'@,0);
_tab.win_fld(_wer,,'STRSTART',,,14,,,'Obowiązywała od'@,0);
_tab.win_fld(_wer,,'STREND'  ,,,14,,,'Obowiązywała do'@,0);
{? _env.MODE='USER'
||
::   _tab.win_fld(_wer,,'MANUAL',,,-5,,,'Przez proces?'@,0,'Czy uprawnienie zostało nadane za pomocą procesu?'@)
   _tab.win_fld(_wer,,'MANUAL',,,-5,,,'Przez proces?'@,0,'Czy uprawnienie zostało nadane za pomocą procesu?'@,2,,"\'N\'","\'T\'","\'P\'")
?};
_tab.win_fld(_wer,,'U1' ,,,12,,,'Przypisujący'@,0);
_tab.win_fld(_wer,,'U2' ,,,12,,,'Odbierający'@,0);

_fb:="exec('zwin_rozwin','#tree')";
_tab.win_act(_wer,0,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie/rozwijanie całości'@,_fb,,1);

::_fb:="exec('legenda','color','@B_HISTORY#01')";
::_tab.win_act(_wer,,'Formuła','Legenda'@,,,_fb);

_tab.win_act(_wer,,'Kolejność');
::_tab.win_act(_wer,,'Rekord',,,,"exec('colorizer','#b_history')");

_tab.win_sel(_wer);
_wer


\grp_make_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno grupowe
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_ROLE;
{? _env.WIN_MAIN=''
||
   _grpbefor:="
         params_set(params_get());
         _env:=params_get().env;
         ~~
      ";
:: Okno główne - role
   _grp:=_tab.grp_make(_env.tit_main,_grpbefor,_env.wid_main,1,1);
   _tab.grp_sel(_grp,,_env.WIN_ROLE,,"params_set(params_get());exec('after_rfr_role','#b_history')",,,20,,,,,'maximized_with_title');

:: Okno wszystkie czynności
   _tab.grp_splt(_grp,'panel0','horizontal','dolny');
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      ~~
   ";
   _tab.grp_sel(_grp,_env.TAB_ACT_TREE,_env.WIN_ACT_ALL,,,,,,_before,,,,'maximized_with_title');

:: Okno czynności roli
   _tab.grp_splt(_grp,'panel0','vertical','prawygorny');
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      ~~
   ";
   _tab.grp_sel(_grp,_env.TAB_ACTIONS,_env.WIN_ACT_ROLE,,,,,,_before,,,,'maximized_with_title');

   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\grp_make_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno grupowe
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_ROLE;
{? _env.WIN_MAIN=''
||
   _grpbefor:="
         params_set(params_get());
         _env:=params_get().env;
         ~~
      ";
:: Okno główne - role
   _grp:=_tab.grp_make(_env.tit_main,_grpbefor,_env.wid_main2,1,1);
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      ~~
   ";
   _tab.grp_sel(_grp,_env.TAB_ROLE,_env.WIN_ROLE,,"params_set(params_get());exec('after_rfr_role','#b_history')",,,,_before,,,,'maximized_with_title');

:: Okno użytkowników
   _tab.grp_splt(_grp,'panel0','vertical','prawy');
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      ~~
   ";
   _tab.grp_sel(_grp,_env.TAB_USERS,_env.WIN_USERS,,,,,20,_before,,,,'maximized_with_title');

   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\after_rfr_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja po odświeżeniu w okienku .TAB_ROLE
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
_env:=params_get().env;

{? _env.MODE='USER'
||
   _env.TAB_ACTIONS.prefix(_env.TAB_ROLE.ROLE_SQL);

   {? _env.TAB_ROLE.ROLE_SQL<>''
   || _env.TAB_ACTIONS.hdr_sel();
      _env.TAB_ACTIONS.hdr_sel(' roli: %1'@[_env.TAB_ROLE.ROLE]);
      ~~
   ?};
   grp_disp(_env.TAB_ACT_TREE,_env.WIN_ACT_ALL);
   grp_disp(_env.TAB_ACTIONS,_env.WIN_ACT_ROLE);
   ~~
|? _env.MODE='ACTION'
|| grp_disp(_env.TAB_USERS,_env.WIN_USERS);
   ~~
?};
~~


\history_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla historię uprawnień dla podanego użytkownika
::   WE: [_a] - USERS.ref() - użytkownik dla którego wyświetlić historię lub bieżacy rekord
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.prefix();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
:: Pytanie o zakres pobierania informacji
   _zakres:=exec('define_zakres','#b_history');
   {? _zakres.TM_START>0 | _zakres.TM_END>0
   ||
      _env:=exec('env','#b_history');
      params_set('env',_env);
      _env.MODE:='USER';
      _env.USER:=USERS.ref();
      _env.USR_GUID:=USERS.GUID;
      _env.USR_KOD:=USERS.KOD;
      _env.USR_DANE:=USERS.DANE;
      _env.TM_START:=_zakres.TM_START;
      _env.TM_END:=_zakres.TM_END;

      _env.select()
   ?}
?};
USERS.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\history_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla historię uprawnień dla podanej czynności
::   WE: _a - STRING - Ref SQL Czynności
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_act_ref:=_a;

_result:=0;
_can_continue:=1;

B_ACTION.cntx_psh();
B_ACTION.prefix();
{? B_ACTION.seek(_act_ref)
||
:: Pytanie o zakres pobierania informacji
   _zakres:=exec('define_zakres','#b_history');
   {? _zakres.TM_START>0 | _zakres.TM_END>0
   ||
      _env:=exec('env','#b_history');
      params_set('env',_env);
      _env.MODE:='ACTION';
      _env.ACT_UID:=B_ACTION.UID;
      _env.ACT_NAME:=B_ACTION.NAME;
      _env.B_ACTION:=B_ACTION.ref();
      _env.TM_START:=_zakres.TM_START;
      _env.TM_END:=_zakres.TM_END;
      _env.select()
   ?}
?};
B_ACTION.cntx_pop();
_result


\load_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Ładuje dane do tabel tymczasowych o historii uprawnień dla użytkownika
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

:: Najpierw sprawdzam aktualne uprawnienia użytkownika do roli
B_USRROL.cntx_psh();
B_USRROL.index('USER');
B_ACTROL.cntx_psh();
B_ACTROL.index('UNIK');

_can_continue:=1;
_result:=0;
B_USRROL.prefix(REF.FIRMA,_env.USER);
{? B_USRROL.first()
|| {!
   |?
      {? _env.TM_END>=B_USRROL.TM_START
      ||
::       Użytkownik ma rolę w podanym zakresie
         _can_continue:=exec('usrrol2role','#b_history',_env);

         B_ACTROL.prefix(REF.FIRMA,B_USRROL.B_ROLE);
         {? B_ACTROL.first()
         || {!
            |?
               {? _env.TM_END>=B_ACTROL.TM_START
               ||
::                Użytkownik ma rolę w podanym zakresie
                  _can_continue:=exec('actrol2actions','#b_history',_env);

                  {? _can_continue>0
                  || _can_continue:=exec('actrol2actions_tree','#b_history',_env)
                  ?}
               ?};
               B_ACTROL.next() & _can_continue>0
            !}
         ?}
      ?};

      {? _can_continue>0
      ||
::       Analizujemy historyczne uprawnienia
         _env.ROLE:=B_USRROL.B_ROLE;
::       Wymyślam maskę startową i końcową
         _mask_start:='';
         {? _env.TM_START>0
         || _startd:=exec('tm_stamp2date','#tm_stamp',_env.TM_START);
            _mask_start:=6+B_ARHIS.name()+(($(_startd~1))+2)
         ?};
         _mask_end:=6+B_ARHIS.name()+(($(date()~1))+2);
         _fml:="exec('mask_load_arhis','#b_history',_a,_b)";
         _can_continue:=exec('for_each_mask','#table',B_ARHIS,_fml,_mask_start,_mask_end,_env,1)
      ?};

      B_USRROL.next() & _can_continue>0
   !}
?};

{? _can_continue>0
||
:: Aktualne uprawnienia załadowane, teraz lecimy po historii

:: Uprawnienia użtkownik-rola
:: Wymyślam maskę startową i końcową
   _mask_start:='';
   {? _env.TM_START>0
   || _startd:=exec('tm_stamp2date','#tm_stamp',_env.TM_START);
      _mask_start:=6+B_URHIS.name()+(($(_startd~1))+2)
   ?};
   _mask_end:=6+B_URHIS.name()+(($(date()~1))+2);
   _fml:="
      exec('mask_load_urhis','#b_history',_a,_b)
   ";
   _can_continue:=exec('for_each_mask','#table',B_URHIS,_fml,_mask_start,_mask_end,_env,1)
?};
_env.TAB_ACT_TREE.clear();
_env.TAB_ACT_TREE.first();
_env.TAB_ROLE.clear();
_env.TAB_ROLE.first();
_env.TAB_ACTIONS.clear();
_env.TAB_ACTIONS.first();

B_ACTROL.cntx_pop();
B_USRROL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\load_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Ładuje dane do tabel tymczasowych o historii uprawnień dla czynności
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

:: Najpierw sprawdzam aktualne uprawnienia użytkownika do roli
B_USRROL.cntx_psh();
B_USRROL.index('UNIK');
B_ACTROL.cntx_psh();
B_ACTROL.index('DISP2');

_can_continue:=1;
_result:=0;

B_ACTROL.prefix(REF.FIRMA,_env.B_ACTION);
{? B_ACTROL.first()
|| {!
   |?
      {? _env.TM_END>=B_ACTROL.TM_START
      ||
::       Czynność ma rolę w podanym zakresie
         _can_continue:=exec('actrol2role','#b_history',_env);

         B_USRROL.prefix(REF.FIRMA,B_ACTROL.B_ROLE);
         {? B_USRROL.first()
         || {!
            |?
               {? _env.TM_END>=B_USRROL.TM_START
               ||
::                Użytkownik ma rolę w podanym zakresie
                  _can_continue:=exec('usrrol2users','#b_history',_env)
               ?};
               B_USRROL.next() & _can_continue>0
            !}
         ?}
      ?};

      {? _can_continue>0
      ||
::       Analizujemy historyczne uprawnienia
         _env.ROLE:=B_ACTROL.B_ROLE;
::       Wymyślam maskę startową i końcową
         _mask_start:='';
         {? _env.TM_START>0
         || _startd:=exec('tm_stamp2date','#tm_stamp',_env.TM_START);
            _mask_start:=6+B_URHIS.name()+(($(_startd~1))+2)
         ?};
         _mask_end:=6+B_URHIS.name()+(($(date()~1))+2);
         _fml:="exec('mask_load_urhis','#b_history',_a,_b)";
         _can_continue:=exec('for_each_mask','#table',B_URHIS,_fml,_mask_start,_mask_end,_env,1)
      ?};

      B_ACTROL.next() & _can_continue>0
   !}
?};

{? _can_continue>0
||
:: Aktualne uprawnienia załadowane, teraz lecimy po historii

:: Uprawnienia czynność-rola
:: Wymyślam maskę startową i końcową
   _mask_start:='';
   {? _env.TM_START>0
   || _startd:=exec('tm_stamp2date','#tm_stamp',_env.TM_START);
      _mask_start:=6+B_ARHIS.name()+(($(_startd~1))+2)
   ?};
   _mask_end:=6+B_ARHIS.name()+(($(date()~1))+2);
   _fml:="
      exec('mask_load_arhis','#b_history',_a,_b)
   ";
   _can_continue:=exec('for_each_mask','#table',B_ARHIS,_fml,_mask_start,_mask_end,_env,1)
?};

_env.TAB_ROLE.clear();
_env.TAB_ROLE.first();
_env.TAB_USERS.clear();
_env.TAB_USERS.first();

B_ACTROL.cntx_pop();
B_USRROL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\usrrol2role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_USRROL do tabeli .TAB_ROLE
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_ROLE;

_result:=0;

B_ROLE.cntx_psh();

_u1:=B_USRROL.U1_KOD;
{? B_USRROL.U1_DANE<>''
|| {? _u1<>''
   || _u1+=' '
   ?};
   _u1+='('+B_USRROL.U1_DANE+')'
?};

_tab.cntx_psh();
_tab.prefix();
_tab.blank();
_tab.ROLE:=B_USRROL.B_ROLE().NAME;
_tab.ROLE_SQL:=$B_USRROL.B_ROLE;
_tab.STRSTART:=19+tm_form(B_USRROL.TM_START);
_tab.STREND:='aktualna';
_tab.U1:=_u1;
_tab.AKT:='T';
_result:=_tab.add();
_tab.cntx_pop();
B_ROLE.cntx_pop();
_result


\urhis2role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_URHIS do tabeli .TAB_ROLE
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - suces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_ROLE;

_result:=0;

_u1:=B_URHIS.U1_KOD;
{? B_URHIS.U1_DANE<>''
|| {? _u1<>''
   || _u1+=' '
   ?};
   _u1+='('+B_URHIS.U1_DANE+')'
?};
_u2:=B_URHIS.U2_KOD;
{? B_URHIS.U2_DANE<>''
|| {? _u2<>''
   || _u2+=' '
   ?};
   _u2+='('+B_URHIS.U2_DANE+')'
?};

_tab.blank();
_tab.ROLE:=B_URHIS.B_ROLE().NAME;
_tab.ROLE_SQL:=$B_URHIS.B_ROLE;
_tab.STRSTART:=19+tm_form(B_URHIS.TM_START);
_tab.STREND:=19+tm_form(B_URHIS.TM_END);
_tab.U1:=_u1;
_tab.U2:=_u2;
_result:=_tab.add();
_result


\actrol2actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_ACTROL do tabeli .TAB_ACTIONS
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::       [_b] - REAL - do kiedy obowiązywało uprawnienie, jeżeli nie podane to znaczy że jeszcze obowiazuje
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tm_end:=0;
{? var_pres('_b')=type_of(0)
|| _tm_end:=_b
?};

_tab:=_env.TAB_ACTIONS;

_result:=0;

B_ACTION.cntx_psh();
B_ROLE.cntx_psh();

_u1:=B_ACTROL.U1_KOD;
{? B_ACTROL.U1_DANE<>''
|| {? _u1<>''
   || _u1+=' '
   ?};
   _u1+='('+B_ACTROL.U1_DANE+')'
?};

_tab.cntx_psh();
_tab.blank();

_tab.ROLE:=B_ACTROL.B_ROLE().NAME;
_tab.ROLE_SQL:=$B_ACTROL.B_ROLE;
_tab.ACT_UID:=B_ACTROL.B_ACTION().UID;
_tab.ACT_NAME:=B_ACTION.NAME;
_tab.STRSTART:=19+tm_form(B_ACTROL.TM_START);
{? _tm_end=0
|| _tab.STREND:='aktualna';
   _tab.AKT:='T'
|| _tab.STREND:=19+tm_form(_tm_end)
?};
_tab.MANUAL:=B_ACTROL.MANUAL;
_tab.U1:=_u1;


_tab.prefix(_tab.ROLE_SQL,_tab.ACT_UID,_tab.ACT_NAME,_tab.STRSTART,_tab.STREND,);
{? _tab.first()=0
|| _result:=_tab.add()
?};
_tab.cntx_pop();

B_ROLE.cntx_pop();
B_ACTION.cntx_pop();
_result


\arhis2actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_ARHIS do tabeli .TAB_ACTIONS
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_ACTIONS;

_result:=1;

B_ROLE.cntx_psh();
_tab.cntx_psh();
_tab.prefix($B_ARHIS.B_ROLE,B_ARHIS.ACT_UID,B_ARHIS.ACT_NAME,19+tm_form(B_ARHIS.TM_START),19+tm_form(B_ARHIS.TM_END));
{? _tab.size()=0
|| _u1:=B_ARHIS.U1_KOD;
   {? B_ARHIS.U1_DANE<>''
   || {? _u1<>''
      || _u1+=' '
      ?};
      _u1+='('+B_ARHIS.U1_DANE+')'
   ?};
   _u2:=B_ARHIS.U2_KOD;
   {? B_ARHIS.U2_DANE<>''
   || {? _u2<>''
      || _u2+=' '
      ?};
      _u2+='('+B_ARHIS.U2_DANE+')'
   ?};
   _tab.blank();
   _tab.ROLE:=B_ARHIS.B_ROLE().NAME;
   _tab.ROLE_SQL:=$B_ARHIS.B_ROLE;
   _tab.ACT_UID:=B_ARHIS.ACT_UID;
   _tab.ACT_NAME:=B_ARHIS.ACT_NAME;
   _tab.STRSTART:=19+tm_form(B_ARHIS.TM_START);
   _tab.STREND:=19+tm_form(B_ARHIS.TM_END);
   _tab.MANUAL:=B_ARHIS.MANUAL;
   _tab.U1:=_u1;
   _tab.U2:=_u2;
   _result:=_tab.add()
?};
B_ROLE.cntx_pop();
_tab.cntx_pop();
_result


\actrol2actions_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_ACTROL do tabeli .TAB_ACT_TREE
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::       [_b] - REAL - do kiedy obowiązywało uprawnienie, jeżeli nie podane to znaczy że jeszcze obowiazuje
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tm_end:=0;
{? var_pres('_b')=type_of(0)
|| _tm_end:=_b
?};

_tab:=_env.TAB_ACT_TREE;

_result:=0;
_can_continue:=1;

B_ACTION.cntx_psh();
B_ROLE.cntx_psh();

_tab.cntx_psh();
_tab.index(_env.NDX_ACT_UID);
_tab.prefix(null(),B_ACTROL.B_ACTION().UID);
_parent:=null();
{? _tab.first()
||
:: Jest już węzeł czynności więc nie dodaję nowego
   _parent:=_tab.ref();
   ~~
||
:: Nie ma węzła czynności więc go tworzę
   _tab.blank();
   _tab.SYMBOL:=B_ACTROL.B_ACTION().UID;
   _tab.NAME:=B_ACTION.NAME;
   _tab.ACT_UID:=B_ACTION.UID;
   _tab.ACT_NAME:=B_ACTION.NAME;
   _tab.MANUAL:='N';
   _can_continue:=_tab.add();
   {? _can_continue>0
   || _parent:=_tab.ref()
   ?}
?};

{? _can_continue>0
||
:: Dodaje liść do drzewa
   _u1:=B_ACTROL.U1_KOD;
   {? B_ACTROL.U1_DANE<>''
   || {? _u1<>''
      || _u1+=' '
      ?};
      _u1+='('+B_ACTROL.U1_DANE+')'
   ?};
   _tab.prefix();
   _tab.blank();
   _tab.TREE:=_parent;
   _tab.SYMBOL:='Rola: %1'@[B_ACTROL.B_ROLE().NAME];
   _tab.NAME:='';
   _tab.STRSTART:=19+tm_form(B_ACTROL.TM_START);
   _tab.ACT_UID:=B_ACTROL.B_ACTION().UID;
   _tab.ACT_NAME:=B_ACTION.NAME;
   _tab.ROLE:=B_ROLE.NAME;
   _tab.ROLE_SQL:=$B_ACTROL.B_ROLE;
   _tab.MANUAL:=B_ACTROL.MANUAL;
   {? _tm_end=0
   ||
      _tab.AKT:='T';
      _tab.STREND:='aktualna'
   || _tab.STREND:=19+tm_form(_tm_end)
   ?};
   _tab.U1:=_u1;
   _can_continue:=_tab.add();

   {? _can_continue>0
   || _tab.cntx_psh();
      _tab.prefix();
      {? _tab.seek(_parent)
      || _tab.AKT:='T';
         {? B_ACTROL.MANUAL='T'
         || _tab.MANUAL:='P'
         ?};
         _tab.put()
      ?};
      _tab.cntx_pop();
      ~~
   ?};

:: Po dodaniu każdego liścia aktualizuje pole MANUAL na gałęzi głównej
   _tab.cntx_psh();
   _tab.index(_env.NDX_ACT_UID);
   _tab.prefix(_parent);
   _all_manual:=1;
   {? _tab.first()
   || {!
      |? {? _tab.MANUAL<>'T'
         || _all_manual:=0
         ?};
         _tab.next() & _all_manual=1
      !}
   ?};
   {? _all_manual>0
   || _tab.prefix();
      {? _tab.seek(_parent)
      || _tab.MANUAL:='T';
         _tab.put()
      ?}
   ?};
   _tab.cntx_pop();
   ~~
?};
_tab.cntx_pop();

B_ROLE.cntx_pop();
B_ACTION.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\arhis2actions_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_ACTROL do tabeli .TAB_ACT_TREE
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_ACT_TREE;

_result:=0;
_can_continue:=1;

B_ROLE.cntx_psh();
_tab.cntx_psh();
_tab.index(_env.NDX_ACT_UID);
_tab.prefix(null(),B_ARHIS.ACT_UID);
_parent:=null();
{? _tab.first()
||
:: Jest już węzeł czynności więc nie dodaję nowego
   _parent:=_tab.ref();
   ~~
||
:: Nie ma węzła czynności więc go tworzę
   _tab.blank();
   _tab.SYMBOL:=B_ARHIS.ACT_UID;
   _tab.NAME:=B_ARHIS.ACT_NAME;
   _tab.ACT_UID:=B_ARHIS.ACT_UID;
   _tab.ACT_NAME:=B_ARHIS.ACT_NAME;
   _tab.MANUAL:='N';
   _can_continue:=_tab.add();
   {? _can_continue>0
   || _parent:=_tab.ref()
   ?}
?};

{? _can_continue>0
||
:: Dodaje liść do drzewa
   _tab.cntx_psh();
   _tab.index(_env.NDX_ACT_UNIQ);
   _strstart:=19+tm_form(B_ARHIS.TM_START);
   _strend:=19+tm_form(B_ARHIS.TM_END);
   _symbol:='Rola: %1'@[B_ARHIS.B_ROLE().NAME];

   _tab.prefix(_parent,_symbol,'',_strstart,_strend);
   {? _tab.size()=0
   || _u1:=B_ARHIS.U1_KOD;
      {? B_ARHIS.U1_DANE<>''
      || {? _u1<>''
         || _u1+=' '
         ?};
         _u1+='('+B_ARHIS.U1_DANE+')'
      ?};
      _u2:=B_ARHIS.U2_KOD;
      {? B_ARHIS.U2_DANE<>''
      || {? _u2<>''
         || _u2+=' '
         ?};
         _u2+='('+B_ARHIS.U2_DANE+')'
      ?};
      _tab.prefix();
      _tab.blank();
      _tab.TREE:=_parent;
      _tab.SYMBOL:=_symbol;
      _tab.NAME:='';
      _tab.STRSTART:=_strstart;
      _tab.STREND:=_strend;
      _tab.ACT_UID:=B_ARHIS.ACT_UID;
      _tab.ACT_NAME:=B_ARHIS.ACT_NAME;
      _tab.ROLE:=B_ARHIS.B_ROLE().NAME;
      _tab.ROLE_SQL:=$B_ARHIS.B_ROLE;
      _tab.MANUAL:=B_ARHIS.MANUAL;
      _tab.U1:=_u1;
      _tab.U2:=_u2;
      _can_continue:=_tab.add();

      {? _can_continue>0
      || _tab.cntx_psh();
         _tab.prefix();
         {? _tab.seek(_parent)
         || {? B_ARHIS.MANUAL='T'
            || _tab.MANUAL:='P'
            ?};
            _tab.put()
         ?};
         _tab.cntx_pop();
         ~~
      ?}
   ?};

:: Po dodaniu każdego liścia aktualizuje pole MANUAL na gałęzi głównej
   _tab.index(_env.NDX_ACT_UID);
   _tab.prefix(_parent);
   _all_manual:=1;
   {? _tab.first()
   || {!
      |? {? _tab.MANUAL<>'T'
         || _all_manual:=0
         ?};
         _tab.next() & _all_manual=1
      !}
   ?};
   {? _all_manual>0
   || _tab.prefix();
      {? _tab.seek(_parent)
      || _tab.MANUAL:='T';
         _tab.put()
      ?}
   ?};

   _tab.cntx_pop();
   ~~
?};
_tab.cntx_pop();
B_ROLE.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\mask_load_urhis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła wywoływana wewnątrz każdej maski tabeli B_URHIS, ładuje do tabel tymczasowych
::       rekordy z historii
::   WE: _a - alias tabeli
::       _b - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_b;

_result:=0;
_can_continue:=1;

_int_view:=exec('interval','#interval');
_int_view.START:=_env.TM_START;
_int_view.END:=_env.TM_END;

B_URHIS.cntx_psh();

{? _env.MODE='USER'
|| B_URHIS.index('TM_END');
   B_URHIS.prefix(REF.FIRMA,_env.USR_GUID)
|? _env.MODE='ACTION'
|| B_URHIS.index('TM_END2');
   B_URHIS.prefix(REF.FIRMA,_env.ROLE)
?};

{? B_URHIS.find_ge(_env.TM_START)
|| _int_rec:=exec('interval','#interval');
   {? B_URHIS.first()
   || {!
      |?
         _int_rec.START:=B_URHIS.TM_START;
         _int_rec.END:=B_URHIS.TM_END;

         {? exec('intervals_chk','#interval',_int_rec,_int_view)>0
         ||
            {? _env.MODE='USER'
            ||
               _can_continue:=exec('urhis2role','#b_history',_env);

               {? _can_continue>0
               ||
::                Dla każdej roli w historii użytkownika muszę zebrać ze wszystkich masek uprawnienia do czynności

::                Analizujemy bieżace uprawnienia - jeżeli obowiazywały one w również w chwili w której
::                użytkownik stracił rolę to je dopisujemy
                  B_ACTROL.cntx_psh();
                  B_ACTROL.index('UNIK');
                  B_ACTROL.prefix(REF.FIRMA,B_URHIS.B_ROLE);
                  {? B_ACTROL.first()
                  || {!
                     |? {? _env.TM_END>=B_ACTROL.TM_START
                        ||
                           _can_continue:=exec('actrol2actions','#b_history',_env);

                           {? _can_continue>0
                           || _can_continue:=exec('actrol2actions_tree','#b_history',_env)
                           ?}
                        ?};
                        B_ACTROL.next() & _can_continue>0
                     !}
                  ?};
                  B_ACTROL.cntx_pop();

                  {? _can_continue>0
                  ||
::                   Analizujemy historyczne uprawnienia
                     _env.ROLE:=B_URHIS.B_ROLE;
::                   Wymyślam maskę startową i końcową
                     _mask_start:='';
                     {? _env.TM_START>0
                     || _startd:=exec('tm_stamp2date','#tm_stamp',_env.TM_START);
                        _mask_start:=6+B_ARHIS.name()+(($(_startd~1))+2)
                     ?};
                     _mask_end:=6+B_ARHIS.name()+(($(date()~1))+2);
                     _fml:="exec('mask_load_arhis','#b_history',_a,_b)";
                     _can_continue:=exec('for_each_mask','#table',B_ARHIS,_fml,_mask_start,_mask_end,_env,1)
                  ?}
               ?}
            |? _env.MODE='ACTION'
            || _can_continue:=exec('urhis2users','#b_history',_env);
               {? _can_continue>0
               || _env.USER_ADDED:=1
               ?}
            ?}
         ?};
         B_URHIS.next() & _can_continue>0
      !}
   ?}
?};
B_URHIS.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\mask_load_arhis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła wywoływana wewnątrz każdej maski tabeli B_ARHIS, ładuje do tabel tymczasowych
::       rekordy z historii
::   WE: _a - alias tabeli
::       _b - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_b;

_result:=0;
_can_continue:=1;

_int_view:=exec('interval','#interval');
_int_view.START:=_env.TM_START;
_int_view.END:=_env.TM_END;

B_ARHIS.cntx_psh();
{? _env.MODE='USER'
|| B_ARHIS.index('TM_END');
   B_ARHIS.prefix(REF.FIRMA,_env.ROLE)
|? _env.MODE='ACTION'
|| B_ARHIS.index('TM_END2');
   B_ARHIS.prefix(REF.FIRMA,_env.ACT_UID)
?};

{? B_ARHIS.find_ge(_env.TM_START)
|| _int_rec:=exec('interval','#interval');
   {? B_ARHIS.first()
   || {!
      |?
         _int_rec.START:=B_ARHIS.TM_START;
         _int_rec.END:=B_ARHIS.TM_END;

         {? exec('intervals_chk','#interval',_int_rec,_int_view)>0
         ||
            {? _env.MODE='USER'
            ||
               _can_continue:=exec('arhis2actions','#b_history',_env);

               {? _can_continue>0
               || _can_continue:=exec('arhis2actions_tree','#b_history',_env)
               ?}
            |? _env.MODE='ACTION'
            ||
               _env.USER_ADDED:=0;
               {? _can_continue>0
               ||
::                Dla każdej roli w historii czynności muszę zebrać ze wszystkich masek uprawnienia użytkowników

::                Analizujemy bieżace uprawnienia - jeżeli obowiazywały one w również w chwili w której
::                czynność straciła rolę to je dopisujemy
                  B_USRROL.cntx_psh();
                  B_USRROL.index('UNIK');
                  B_USRROL.prefix(REF.FIRMA,B_ARHIS.B_ROLE);
                  {? B_USRROL.first()
                  || {!
                     |? {? _env.TM_END>=B_USRROL.TM_START
                        ||
                           _can_continue:=exec('usrrol2users','#b_history',_env);
                           {? _can_continue>0
                           || _env.USER_ADDED:=1
                           ?};
                           ~~
                        ?};
                        B_USRROL.next() & _can_continue>0
                     !}
                  ?};
                  B_USRROL.cntx_pop();

                  {? _can_continue>0
                  ||
::                   Analizujemy historyczne uprawnienia
                     _env.ROLE:=B_ARHIS.B_ROLE;
::                   Wymyślam maskę startową i końcową
                     _mask_start:='';
                     {? _env.TM_START>0
                     || _startd:=exec('tm_stamp2date','#tm_stamp',_env.TM_START);
                        _mask_start:=6+B_URHIS.name()+(($(_startd~1))+2)
                     ?};
                     _mask_end:=6+B_URHIS.name()+(($(date()~1))+2);
                     _fml:="exec('mask_load_urhis','#b_history',_a,_b)";
                     _can_continue:=exec('for_each_mask','#table',B_URHIS,_fml,_mask_start,_mask_end,_env,1)
                  ?}
               ?};

               {? _env.USER_ADDED>0
               || _can_continue:=exec('arhis2role','#b_history',_env)
               ?}
            ?}
         ?};
         B_ARHIS.next() & _can_continue>0
      !}
   ?}
?};
B_ARHIS.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\colorizer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Rekord przed' w tabelach
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;

_tab:=cur_tab(1,1);

{? _tab.AKT='T'
|| _result:=Color.fnd_kol('B_HISTORY#01#01')
?};
_result


\actrol2role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_ACTROL do tabeli .TAB_ROLE
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_ROLE;

_result:=0;

B_ROLE.cntx_psh();

_u1:=B_ACTROL.U1_KOD;
{? B_ACTROL.U1_DANE<>''
|| {? _u1<>''
   || _u1+=' '
   ?};
   _u1+='('+B_ACTROL.U1_DANE+')'
?};
_tab.cntx_psh();
_tab.prefix();
_tab.blank();
_tab.ROLE:=B_ACTROL.B_ROLE().NAME;
_tab.ROLE_SQL:=$B_ACTROL.B_ROLE;
_tab.STRSTART:=19+tm_form(B_ACTROL.TM_START);
_tab.STREND:='aktualna';
_tab.AKT:='T';
_tab.MANUAL:=B_ACTROL.MANUAL;
_tab.U1:=_u1;
_result:=_tab.add();
_tab.cntx_pop();
B_ROLE.cntx_pop();
_result


\usrrol2users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_USRROL do tabeli .TAB_USERS
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::       [_b] - REAL - do kiedy obowiązywało uprawnienie, jeżeli nie podane to znaczy że jeszcze obowiazuje
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tm_end:=0;
{? var_pres('_b')=type_of(0)
|| _tm_end:=_b
?};

_tab:=_env.TAB_USERS;

_result:=0;
_can_continue:=1;

B_ROLE.cntx_psh();
USERS.cntx_psh();
_tab.cntx_psh();
_tab.index(_env.NDX_USR_UID);
_tab.prefix(null(),B_USRROL.USERS().KOD,);
_parent:=null();
{? _tab.first()
||
:: Jest już węzeł czynności więc nie dodaję nowego
   _parent:=_tab.ref();
   ~~
||
:: Nie ma węzła czynności więc go tworzę
   _tab.blank();
   _tab.SYMBOL:=B_USRROL.USERS().KOD;
   _tab.NAME:=B_USRROL.USERS().DANE;
   _tab.USR_KOD:=B_USRROL.USERS().KOD;
   _tab.USR_DANE:=B_USRROL.USERS().DANE;
   _tab.USR_GUID:=B_USRROL.USERS().GUID;
   _can_continue:=_tab.add();
   {? _can_continue>0
   || _parent:=_tab.ref()
   ?}
?};

{? _can_continue>0
||
:: Dodaje liść do drzewa
   _tab.cntx_psh();
   _tab.index(_env.NDX_USR_UNIQ);
   _strstart:=19+tm_form(B_USRROL.TM_START);
   {? _tm_end=0
   || _strend:='aktualne'
   || _strend:=19+tm_form(_tm_end)
   ?};
   _u1:=B_USRROL.U1_KOD;
   {? B_USRROL.U1_DANE<>''
   || {? _u1<>''
      || _u1+=' '
      ?};
      _u1+='('+B_USRROL.U1_DANE+')'
   ?};
   _symbol:='Rola: %1'@[B_USRROL.B_ROLE().NAME];

   _tab.prefix(_parent,_symbol,'',_strstart,_strend,);
   {? _tab.size()=0
   ||
      _tab.prefix();
      _tab.blank();
      _tab.TREE:=_parent;
      _tab.SYMBOL:=_symbol;
      _tab.NAME:='';
      _tab.STRSTART:=_strstart;
      _tab.STREND:=_strend;
      _tab.USR_KOD:=B_URHIS.USR_KOD;
      _tab.USR_DANE:=B_URHIS.USR_DANE;
      _tab.USR_GUID:=B_URHIS.USR_GUID;
      _tab.U1:=_u1;

      {? _tm_end=0
      || _tab.AKT:='T'
      || _u2:=B_URHIS.U2_KOD;
         {? B_URHIS.U2_DANE<>''
         || {? _u2<>''
            || _u2+=' '
            ?};
            _u2+='('+B_URHIS.U2_DANE+')'
          ?};
        _tab.U2:=_u2
      ?};
      _can_continue:=_tab.add();

      {? _can_continue>0 & _tm_end=0
      || _tab.cntx_psh();
         _tab.prefix();
         {? _tab.seek(_parent)
         || _tab.AKT:='T';
            _tab.put()
         ?};
         _tab.cntx_pop();
         ~~
      ?}
   ?};
   _tab.cntx_pop();
   ~~
?};
_tab.cntx_pop();
B_ROLE.cntx_pop();
USERS.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\arhis2role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_ARHIS do tabeli .TAB_ROLE
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_ROLE;

_result:=1;

B_ROLE.cntx_psh();
_tab.cntx_psh();
_tab.prefix($B_ARHIS.B_ROLE,19+tm_form(B_ARHIS.TM_START),19+tm_form(B_ARHIS.TM_END));
{? _tab.size()=0
|| _u1:=B_ARHIS.U1_KOD;
   {? B_ARHIS.U1_DANE<>''
   || {? _u1<>''
      || _u1+=' '
      ?};
      _u1+='('+B_ARHIS.U1_DANE+')'
   ?};
   _u2:=B_ARHIS.U2_KOD;
   {? B_ARHIS.U2_DANE<>''
   || {? _u2<>''
      || _u2+=' '
      ?};
      _u2+='('+B_ARHIS.U2_DANE+')'
   ?};
   _tab.blank();
   _tab.ROLE:=B_ARHIS.B_ROLE().NAME;
   _tab.ROLE_SQL:=$B_ARHIS.B_ROLE;
   _tab.STRSTART:=19+tm_form(B_ARHIS.TM_START);
   _tab.STREND:=19+tm_form(B_ARHIS.TM_END);
   _tab.MANUAL:=B_ARHIS.MANUAL;
   _tab.U1:=_u1;
   _tab.U2:=_u2;
   _result:=_tab.add()
?};
B_ROLE.cntx_pop();
_tab.cntx_pop();
_result


\urhis2users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje rekord B_URHIS do tabeli .TAB_USERS
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_history')
::   WY: 0 - porażka
::       1 - suces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_USERS;

_result:=0;
_can_continue:=1;

B_ROLE.cntx_psh();
_tab.cntx_psh();
_tab.index(_env.NDX_USR_UID);
_tab.prefix(null(),B_URHIS.USR_KOD,);
_parent:=null();
{? _tab.first()
||
:: Jest już węzeł czynności więc nie dodaję nowego
   _parent:=_tab.ref();
   ~~
||
:: Nie ma węzła czynności więc go tworzę
   _tab.blank();
   _tab.SYMBOL:=B_URHIS.USR_KOD;
   _tab.NAME:=B_URHIS.USR_DANE;
   _tab.USR_KOD:=B_URHIS.USR_KOD;
   _tab.USR_DANE:=B_URHIS.USR_DANE;
   _tab.USR_GUID:=B_URHIS.USR_GUID;
   _can_continue:=_tab.add();
   {? _can_continue>0
   || _parent:=_tab.ref()
   ?}
?};

{? _can_continue>0
||
:: Dodaje liść do drzewa
   _tab.cntx_psh();
   _tab.index(_env.NDX_USR_UNIQ);
   _strstart:=19+tm_form(B_URHIS.TM_START);
   _strend:=19+tm_form(B_URHIS.TM_END);
   _u1:=B_URHIS.U1_KOD;
   {? B_URHIS.U1_DANE<>''
   || {? _u1<>''
      || _u1+=' '
      ?};
      _u1+='('+B_URHIS.U1_DANE+')'
   ?};
   _u2:=B_URHIS.U2_KOD;
   {? B_URHIS.U2_DANE<>''
   || {? _u2<>''
      || _u2+=' '
      ?};
      _u2+='('+B_URHIS.U2_DANE+')'
   ?};
   _symbol:='Rola: %1'@[B_URHIS.B_ROLE().NAME];

   _tab.prefix(_parent,_symbol,'',_strstart,_strend,);
   {? _tab.size()=0
   || _tab.prefix();
      _tab.blank();
      _tab.TREE:=_parent;
      _tab.SYMBOL:=_symbol;
      _tab.NAME:='';
      _tab.STRSTART:=_strstart;
      _tab.STREND:=_strend;
      _tab.USR_KOD:=B_URHIS.USR_KOD;
      _tab.USR_DANE:=B_URHIS.USR_DANE;
      _tab.USR_GUID:=B_URHIS.USR_GUID;
      _tab.U1:=_u1;
      _tab.U2:=_u2;
      _can_continue:=_tab.add()
   ?};
   _tab.cntx_pop();
   ~~
?};
_tab.cntx_pop();
B_ROLE.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 c42824703daf852e399eb1a68a28aba81261e76aafbcc63bf4d29d58771d3ae025973130e97e4a3f2e9666f0fe74e4b7a4407ada3fa0cce77f95d15516854c153ac16a29ee040cee328213e1175affe25bd9a9b9271b8f183e6b5500e036883f27e064c7b3232f9d8d47ce92d7f153ad360283d266356454068bda1d36bddc84
