:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: excel.fml [12.30]
:: Utworzony: 21.12.2011
:: Autor: TMR
::======================================================================================================================
:: Zawartosc: Klasy wykorzystywane do exportu i importu danych do/z excela
::======================================================================================================================

\init
::---------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Deklaracja klas EXCEL
:: ~OST: INFCOPY, INTMPDIR, INFOPEN, INSYSEXEC, INFERASE, INTXTEDITVIEW
::---------------------------------------------------------------------------------------------------------------------
_dev:=__develop;
{? _dev
|| _cl_name:=@.Class.get_name('EXCEL')
|| _cl_name:='EXCEL'
?};
{? var_pres(_cl_name,@.CLASS)<=0
||
   obj_decl(_cl_name,
:: --POLA--
    obj_fld('this'      ,'wskazanie na siebie'                                                  ; null() ),
    obj_fld('ver'       ,'wersja silnika'                                                       ; 0 ),
    obj_fld('devMsg'    ,'komunikaty developerskie'                                             ; 0 ),
    obj_fld('exFName'   ,'nazwa pliku excel-a'                                                  ; '' ),
    obj_fld('ctrlName'  ,'nazwa kontrolki'                                                      ; '' ),
    obj_fld('tabCEF'    ,'tabela z nazwani plików excela utworzonych od powołania obiektu'      ; null() ),
    obj_fld('cfxFName'  ,'nazwa pliku konfiguracyjnego'                                         ; '' ),
    obj_fld('cfxFullN'  ,'nazwa pliku konfiguracyjnego wraz z pełną ścieżką'                    ; '' ),
    obj_fld('exTName'   ,'nazwa pliku szablonu do tworzenia pliku excela'                       ; '' ),
    obj_fld('exTFullN'  ,'nazwa pliku szablonu wraz z pełną ścieżką'                            ; '' ),
    obj_fld('exTPth'    ,'ścieżka pliku szablonu wyszukana na podstawie pth'                    ; 0 ),
    obj_fld('libFName'  ,'nazwa pliku biblioteki do tworzenia plikow Excela'                    ; '' ),
    obj_fld('MSG'       ,'czy wyswietlac komunikaty'                                            ; 1 ),
    obj_fld('jTerm'     ,'czy uruchomione z jTerma'                                             ; 0 ),
    obj_fld('inTerm'    ,'czy uruchomione z inTerma'                                            ; 0 ),
    obj_fld('sysJTerm'  ,'nazwa systemu operacyjnego końcówki'                                  ; sys_name(0) ),
    obj_fld('sysAS'     ,'nazwa systemu operacyjnego serwera aplikacji'                         ; sys_name(1) ),
    obj_fld('dirSep'    ,'separator katalogów'                                                  ; '\\' ),
    obj_fld('dirSepK'   ,'separator katalogów na końcówce'                                      ; '\\' ),
    obj_fld('procName'  ,'nazwa procedury wbudowanej pobierającej dane do eksportu'             ; '' ),
    obj_fld('PAR'       ,'parametry procedury wbudowanej '                                      ; null() ),
    obj_fld('TAB'       ,'tabela do exportu'                                                    ; null() ),
    obj_fld('TAB_FLDS'  ,'pola tabeli do exportu widoczne'                                      ; null() ),
    obj_fld('TAB_FLDH'  ,'pola tabeli do exportu ukryte'                                        ; null() ),
    obj_fld('tabTitle'  ,'tytuł tabeli'                                                         ; '' ),
    obj_fld('header'    ,'czy naglówek tabeli'                                                  ; 0 ),
    obj_fld('headAcr'   ,'czy nazwy nagłówka tabeli z akronimu czy opisu kolumny'               ; 0 ),
    obj_fld('cellNr'    ,'adres klumny od której zaczynamy wstawianie'                          ; 0 ),
    obj_fld('rowNr'     ,'adres wiersza od której zaczynamy wstawianie'                         ; 0 ),
    obj_fld('sheetNr'   ,'numer arkusza do ktorego wstawiamy dane'                              ; 0 ),
    obj_fld('sheetNam'  ,'nazwa arkusza do ktorego wstawiamy dane'                              ; '' ),
    obj_fld('cellAddr'  ,'adres kórki w formacie A1'                                            ; '' ),
    obj_fld('Xutf8'     ,'czy mamy UTF-8?'                                                      ; 0),
    obj_fld('styling'   ,'włączenie/wyłączenie stylu komórek'                                   ; 0 ),
    obj_fld('autoSize'  ,'włączenie/wyłączenie automatycznego dopasowania szerokości komorek '  ; 1 ),
    obj_fld('mjdbc'     ,'ścieżka do pliku mjdbc wraz z nazwą pliku '                           ; ''),
:: --KONSTRUKTOR/DESTRUKTOR--
   obj_meth('__init','inicjalizacja obiektu';
            "_a.this:=_a;
            .ver:=user(11);
            .Xutf8:=.ver>'11';
            .ctrlName:={? .ver>='20.32'
                       || 'excel_export_poi_5'
                       |? .ver>='18.02'
                       || 'excel_export_1802'
                       || 'excel_export'
                       ?};
            .libFName:=.ctrlName+'.jar';
            {? .sysAS <> 'WINDOWS'
            || .dirSep:='/'
            ?};
            {? .sysJTerm <> 'WINDOWS'
            || .dirSepK:='/'
            ?};
            .init_PAR();
            .initFLDS();
            .initFLDH();
            .initCEF();
            .mjdbc:=exe_dir(1)+.dirSep+'mjdbc.jar';
            .jTerm:=(~-cli_ver()='JTERM');
            .inTerm:=exec('interm','#system');
            {? .inTerm
            || .procName:='JSON'
            ?};
            exec('fun_decl','#message');
             1"),

:: --METODY-PRYWATNE (umownie)--
   obj_meth('init_PAR','inicjacja tabeli tymczasowej do przechowywania parametrów procedur';"
            {? _tab:=.PAR; var_pres('_tab')>100
            || obj_del(.PAR); .PAR:=null();
               obj_del(_tab); _tab:=null()
            ?};
            _tab:=tab_tmp(1,'KEY','INTEGER','','VAL'  ,'STRING[255]'   ,'Parametr procedury');
            {? type_of(_tab)=type_of(SYSLOG)
            || .PAR:=_tab
            ?}
            ",-1),

   obj_meth('initFLDS','inicjacja tabeli tymczasowej do przechowywania akronimów pól do pokazania';"
            {? _tab:=.TAB_FLDS; var_pres('_tab')>100
            || obj_del(.TAB_FLDS); .TAB_FLDS:=null();
               obj_del(_tab); _tab:=null()
            ?};
            _tab:=tab_tmp(1,'KEY','INTEGER','','VAL','STRING[255]','Akronimy pól tabeli');
            {? type_of(_tab)=type_of(SYSLOG)
            || .TAB_FLDS:=_tab
            ?}
            ",-1),

   obj_meth('initFLDH','inicjacja tabeli tymczasowej do przechowywania akronimów pól do ukrycia';"
            {? _tab:=.TAB_FLDH; var_pres('_tab')>100
            || obj_del(.TAB_FLDH); .TAB_FLDH:=null();
               obj_del(_tab); _tab:=null()
            ?};
            _tab:=tab_tmp(1,'KEY','INTEGER','','VAL','STRING[255]','Akronimy pól tabeli');
            {? type_of(_tab)=type_of(SYSLOG)
            || .TAB_FLDH:=_tab
            ?}
            ",-1),

   obj_meth('initCEF','inicjacja tabeli tymczasowej do przechowywania nazw utworzonych plików';"
            {? _tab:=.tabCEF; var_pres('_tab')>100
            || obj_del(.tabCEF); .tabCEF:=null();
               obj_del(_tab); _tab:=null()
            ?};
            _tab:=tab_tmp(1,'NAME','STRING[255]','Nazwy utworzonych plików');
            {? type_of(_tab)=type_of(SYSLOG)
            || .tabCEF:=_tab
            ?}
            ",-1),

   obj_meth('CreateCF'    ,'tworzy plik ustawień';"
            _mode:={? .Xutf8 || 'Uw' || 'w' ?};
            {? .cfxFName=''
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Brak nazwy pliku konfiguracyjnego.')
               ?};
               return(0)
            ?};
            {? +.procName
            || _file:=fopen(.cfxFName,_mode,1)
            || _file:=fopen('@!Tmp\\\\' + .cfxFName,_mode,0)
            ?};
            {? _file
            || {? +.procName
               || _line:='excelName=' + pth_dir(.exFName) + .dirSep + .exFName
               || _line:='excelName=' + tmp_dir() + .dirSepK + .exFName
               ?};
               fwrite(_file,_line);
               _line:='devMsg=' + {? .devMsg || 'true' || 'false' ?};
               fwrite(_file,_line);
               _line:='mjdbc='+ {? +.mjdbc || 'true' || 'false' ?};
               fwrite(_file,_line);
               _line:='styling='+ {? .styling || 'true' || 'false' ?};
               fwrite(_file,_line);
               _line:='header=' + {? .header || 'true' || 'false' ?};
               fwrite(_file,_line);
               _line:='headAcr=' + {? .headAcr || 'true' || 'false' ?};
               fwrite(_file,_line);
               _line:='autoSize=' + {? .autoSize || 'true' || 'false' ?};
               fwrite(_file,_line);
               _line:='title=' + .tabTitle;
               fwrite(_file,_line);
               _line:='sheetNr='+$.sheetNr;
               fwrite(_file,_line);
               _line:='sheetName='+.sheetNam;
               fwrite(_file,_line);
               _line:='fld2Hide='+.GetFLDH();
               fwrite(_file,_line);
               {? +.cellAddr
               || _line:='cellAddr='+$.cellAddr;
                  fwrite(_file,_line)
               || _line:='rowNr='+$.rowNr;
                  fwrite(_file,_line);
                  _line:='cellNr='+$.cellNr;
                  fwrite(_file,_line)
               ?};
               {? +.procName
               || _line:='procName=' + .procName;
                  fwrite(_file,_line);
                  {? .procName<>'JSON'
                  || _line:='odbc=jdbc:' + {? +.mjdbc || 'mbase:' || 'odbc:' ?} + odbc_dsn(1);
                     fwrite(_file,_line);
                     .PAR.prefix();
                     {? .PAR.first()
                     || {!
                        |? _line:='param='+.PAR.VAL;
                            fwrite(_file,_line);
                           .PAR.next()
                        !}
                     ?}
                  ?}
               ?};
               {? .exTName<>''
               || {? +.procName
                  || _line:='szablon=' + .exTFullN
                  || _line:='szablon=' + tmp_dir() + .dirSepK + .exTName
                  ?};
                  fwrite(_file,_line)
               ?};
               fclose(_file);
               1
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Nie udało się utworzyć pliku konfiguracyjnego.')
               ?};
               0
            ?}
            ",-1),

    obj_meth('CreateXF','tworzy plik excela';"
            _error:='';
            _pth:=_a;
            {? .cfxFName='' || _error+='Brak nazwy pliku konfiguracyjnego. ' ?};
            {? .exFName=''  || _error+='Brak nazwy pliku excela. ' ?};
            {? +_error
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error(_error)
               ?};
               return('')
            ?};
            .cfxFullN:=pth_dir(.cfxFName) + .dirSep + .cfxFName;
            {? +.procName
            || {? .procName='JSON' || .toJSON() ?};
               _excelPath:=pth_dir(.exFName);
               _jar:=pth_dir(.libFName) + .dirSep + .libFName;
               _cmd:='';
               _utf8:={? .Xutf8 || 'true' || 'false' ?};
               _main_class:=' pl.macrologic.export2excel.Main ';
               {? .sysAS = 'WINDOWS'
               || _mjrun:=exe_dir(1) + .dirSep +'mjrun.exe';
                  _classpath:= ' -classpath .;' + _jar + ';' + .mjdbc;
                  _cmd:='cmd /C \"cd ' + '\"' + _excelPath + '\"' + ' & ' + '\"' + _mjrun + '\"' +
                        ' -wait -java %1 %2 %3'
                        [_classpath + _main_class + .cfxFullN,_utf8,'\"']
               ||
                  _mjrun:=exe_dir(1) + .dirSep + 'MacroJRUN -wait';
                  _classpath:= ' -classpath .:' + _jar + ':' + .mjdbc;
                  _cmd:='sh -c \"cd ' + _excelPath + ';' + _mjrun + ' -java %1 %2 %3'
                        [_classpath + _main_class + .cfxFullN,_utf8,'\"']
               ?};

::             logowanie wywołania do pliku
::               exec('to_file','libfml','~log.cfx',0,_cmd,0);

               {? +_cmd || _result:=system(_cmd,1) || return('') ?}
            ||
::             niestety dla wywolan spoza jTerm-a nie ma mozliwosci przekazania danych przez kontrolkę :-(
               {? ~.jTerm
               || _cfxFile:=fexists(.cfxFName,1);
                  {? _cfxFile=1
                  || ferase(.cfxFName,1)
                  ?};
                  return('')
               ?};
               {? var_pres('TAB',.)<>type_of(SYSLOG)
               || {? (.jTerm | .inTerm) & .MSG
                  || FUN.error('Brak źródła danych do exportu')
                  ?};
                  return('')
               ?};
               {? !.TAB=''
               || {? (.jTerm | .inTerm) & .MSG
                  || FUN.error('Należy przypisać obiekt kalsy EXCEL do zmiennej globalnej.')
                  ?};
                  return('')
               ?};
               {? .exTName<>''
               || {? ~fcopy({? .exTPth || .exTName || .exTFullN ?},'@'+tmp_dir()+.dirSepK+.exTName,.exTPth,0,1)
                  || {? (.jTerm | .inTerm) & .MSG
                     || FUN.error('Nie udało się skopiować pliku szablonu do katalogu tymczasowego.')
                     ?};
                     return('')
                  ?}
               ?};
               _win_acr:=.PAR.mk_ctr('','my_ctrl',0,0,30,3);
               .PAR.win_cctr(_win_acr,'ctrl_id','pl.macrologic.export2excel.Table:'+.ctrlName);
               .PAR.win_ctr(_win_acr);
               _obj:=obj_new(@.Class.cStrConv);
               _obj.setchar('\\\\','\\\\\\\\');
:               _cfxFN:=_obj.convstr(.cfxFullN);
               _cfxFN:=tmp_dir()+.dirSepK+.cfxFName;
               _cfxFN:=_obj.convstr(_cfxFN);
               _rule:=$(\"ctr_tab('TAB_data',,'ctrl_id','',\"+!.TAB+{? .TAB_FLDS.size() || \",\"+.GetFLDS() || '' ?} +
                      \"); ctr_call(,'ctrl_id','createExcel','TAB_data','\"+_cfxFN+\"','\"+$.Xutf8+\"'); sel_exit()\");
               .PAR.control(,'modal=false, pack=false',_rule);
               {? var_pres('TAB',.) > 100 || obj_del(.TAB) ?}
            ?};
::          sprawdz czy nie został plik .cfx co oznaczało by bledy
            {? +.procName
            || _cfxFile:=fopen(.cfxFName,'br',1)
            || _cfxFile:=fopen('@'+tmp_dir()+.dirSepK+.cfxFName,'br',0)
            ?};
            {? _cfxFile
            || {? _size:=fgetsize(_cfxFile)
               || _answer:=0;
                  {? _size > 4194304
                  || FUN.info('Podczas exportu danych do excela wystąpiły błędy.\nRozmiar pliku jest zbyd duży aby go wyświetlić.')
                  || _answer:=FUN.ask('Podczas exportu danych do excela wystąpiły błędy.\nCzy chcesz je wyświetlić?')
                  ?};
                  {? _answer
                  || {? +.procName
                     || txt_view(.cfxFName,1,1)
                     || txt_view('@'+tmp_dir()+.dirSepK+.cfxFName,0,1)
                     ?}
                  ?}
               ?};
               fclose(_cfxFile)
            ?};
            {? +.procName
            || _excelFile:=fopen(.exFName,'br',1)
            || _excelFile:=fopen('@'+tmp_dir()+.dirSepK+.exFName,'br',0)
            ?};
            {? _excelFile
            || fclose(_excelFile);
               {? +.procName=0
               || {? ~fcopy('@'+tmp_dir()+.dirSepK+.exFName,.exFName,0,1,1)
                  || {? (.jTerm | .inTerm) & .MSG
                     || FUN.error('Nie udało się skopiować pliku szablonu z katalogu tymczasowego.')
                     ?};
                     return('')
                  ?}
               ?};
::             dodaj plik do listy utworzonych plików od czasu utworzenia obiektu
               .Add2CEF(.exFName);
               {? _pth
               || pth_dir(.exFName) + .dirSep + .exFName
               || .exFName
               ?}
            || ''
            ?}
            ",type_of(0),-1),


      obj_meth('toJSON','tworzy JSONa z danymi';"
            _res:=0;
            _mode:={? .Xutf8 || 'Uw' || 'w' ?};

::          dane ze wskazanej tabeli
            {? var_pres('TAB',(.))=118
            || .TAB.cntx_psh();
               {? .TAB.first()
               || _fName:=gsub(.cfxFName,'.cfx','_tab_json.cfx');
                  _file:=fopen(_fName,_mode,1,,1);
                  {? _file.is_open()
                  || _flds:=.GetFLDS();
                     _fldh:=.GetFLDH();
::                przekazujemy tylko te pola, które są w strukturze tabeli uwzględniając ustawienie pól do pokazania
::                oraz pól do ukrycia
                     _fld:='';
::                zapamiętujemy listę kolumn
                     _COLS:=tab_tmp(1,'LP','INTEGER','LP',
                                      'ACR','STRING[255]','Akronim kolumny',
                                      'NAME','STRING[255]','Nazwa kolumny');
                     {! _nr:=1 .. .TAB.fld_num()
                     |! _acr:=.TAB.fld_acr(_nr);
                        _name:=.TAB.fld_name(_nr);
                        {? (_flds='' | _flds*_acr) & (_fldh='' | ~(_fldh*_acr))
                        || _fld+=',\\'%1\\','[_acr];
                           _COLS.LP:=_COLS.size()+1;
                           _COLS.ACR:=_acr;
                           _COLS.NAME:=_name;
                           _COLS.add()
                        ?}
                     !};
                     _fml:='.TAB.json_records(_a,'\'REFERENCE\'','+_fld+')';
                     {? ($_fml)(_file)
                     || _res+=.Add2CEF(_fName)
                     ?};
                     fclose(&_file);

::                zapisujemy nazwy kolumn, które będziemy odczytywać w javie
                     {? _COLS.size()>0
                     || _fName:=gsub(.cfxFName,'.cfx','_tabcols_json.cfx');
                        _file:=fopen(_fName,_mode,1,,1);
                        {? _file.is_open()
                        || _COLS.json_records(_file,'ACR',,'NAME',);
                           _res+=.Add2CEF(_fName);
                           fclose(&_file)
                        ?}
                     ?}
                  ?}
               ?};
               .TAB.cntx_pop()
            ?};

            _res
            ",-1),

   obj_meth('GetSyCol','funkcja dekodująca numer kolumny na symbol kolumny - w wersji 97-2003 max liczba kolumn to 256';"
            _zn:='';
            _adr:=spli_str('A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z',',');
            _liczba:=floor(_a);
            {? _liczba < 1 | _liczba > 256
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Błędna wartość argumentu. Poprawne wartości mieszczą sie w zaokresie od 1 do 256')
               ?}
            || _first:=_liczba%26;
               _second:=_liczba%*26;
               _zn:={?_first || _adr[_first] ||'' ?} + {?_second || _adr[_second] || '' ?}
            ?};
            _zn
            ",type_of(0),-1),

   obj_meth('ErasePar','usuwanie parametrów procedury';"
            .PAR.erase()
            ",-1),

   obj_meth('ErasePos','usuwanie parametrów pozycji wklejania danych';"
            .sheetNr:=0;
            .sheetNam:='';
            .cellNr:=0;
            .rowNr:=0;
            .cellAddr:=''
            ",-1),

   obj_meth('NewName','ustawia nową nazwę tworzonego pliku excel i pliku cfg';"
            _nazwa:='~' + $SYSLOG.tm_stamp();
            .cfxFName:= _nazwa + '.cfx';
            .exFName := _nazwa + '.xls';
            ~~
            ",-1),

   obj_meth('GetFLDS','pobiera string z akronimami pól do pokazania';"
            _akr:='';
            .TAB_FLDS.prefix();
            {? .TAB_FLDS.first()
            || {!|?
                  _akr+=\"'\"+.TAB_FLDS.VAL+\"'\" +\",\";
                  .TAB_FLDS.next()
               !};
               _akr:=_akr-1
            ?};
            _akr
            ",-1),

   obj_meth('GetFLDH','pobiera string z akronimami pól do ukrycia';"
            _akr:='';
            .TAB_FLDH.prefix();
            {? .TAB_FLDH.first()
            || {!|?
                  _akr+=\"'\"+.TAB_FLDH.VAL+\"'\" +\",\";
                  .TAB_FLDH.next()
               !};
               _akr:=_akr-1
            ?};
            _akr
            ",-1),

   obj_meth('GetFText','pobiera tekst z pliku';"
            _text:='';
            _cfxFile:=fopen(.cfxFName,'r',1);
            {? _cfxFile
            ||
               {! |? (_wiersz:=fread(_cfxFile)) <> '\n' |!
                  _text+=_wiersz + '\n'
               !};
               fclose(_cfxFile)
            ?};
            _text
            ",type_of('')),

   obj_meth('Add2CEF','dodawanie do tabeli tabCEF nazwy utworzonego pliku';"
            .tabCEF.prefix();
            .tabCEF.blank();
            .tabCEF.NAME:=_a;
            .tabCEF.add()
            ",type_of(''),-1),

:: --METODY-PUBLICZNE (zaleca się używania tylko tych metod)------------------------------------------------------------

   obj_meth('SetProc','ustawia nazwę procedury wbudowanej';"
            _error:='';
            {? +_a
            || {? (_a * '@') <> 0
               || {? var_pres('TAB',.) > 100 || obj_del(.TAB) ?};
                  .TAB:=null();
                  .TAB_FLDS.erase();
                  .TAB_FLDH.erase();
                  .procName:=_a;
                  .tabTitle:='';
                  .ErasePos();
                  .ErasePar()
               ||
                  _error:='Błędna wartość parametru.\nNależy podać procedurę w postaci: nazwa_proc@plik'
               ?}
            || _error:='Błędna wartość argumentu.\nBrak nazwy procedury wbudowanej.'
            ?};
            {? +_error & (.jTerm | .inTerm) & .MSG
            || FUN.error(_error)
            ?}
            ", type_of(''),-1),

   obj_meth('AddParam','dodawanie do tabeli PAR wartości parametru procedury';"
            .PAR.prefix();
            _key:=.PAR.size()+1;
            .PAR.blank();
            .PAR.KEY:=_key;
            .PAR.VAL:=_a;
            .PAR.add()
            ",type_of(''),-1),

   obj_meth('Template','ustawia  nazwę szablonu do tworzenia pliku excela';"
            {? _b=1
            || .exTPth:=1;
               .exTName:=_a;
               .exTFullN:=pth_dir(_a) + .dirSep + _a
            || .exTPth:=0;
               .exTFullN:=_a;
               _obj:=spli_str(_a,.dirSep);
               _size:=obj_len(_obj);
               {? _size>0
               || .exTName:=_obj[_size]
               ?}
            ?};
            ~~
            ",type_of(''),type_of(0),-1),

   obj_meth('Template','ustawia  nazwę szablonu do tworzenia pliku excela';"
            .Template(_a,1);
            ~~
            ",type_of(''),-1),

   obj_meth('Header','włączenie tworzenia w pliku excela naglówka eksportowanej tabeli';"
            .Header(_a,1)
            ",type_of(0),-1),

   obj_meth('Header','włączenie tworzenia w pliku excela naglówka eksportowanej tabeli';"
            {? _a<> 0 & _a<>1
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Błędna wartość argumentu.\n(0) - wyłącza nagłówek.\n(1) - włącza nagłówek.')
               ?}
            || .header:=_a
            ?};
            {? _b<> 0 & _b<>1
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Błędna wartość argumentu.\n(0) - nagłówek na podstawie .\n(1) - włącza nagłówek.')
               ?}
            || .headAcr:=_b
            ?}
            ",type_of(0),type_of(0),-1),

   obj_meth('Title','ustawia tytuł eksportowanej tabeli';"
            .tabTitle:=_a
            ",type_of(''),-1),

   obj_meth('Styling','włącza stylizację pliku excela';"
            {? (_a<>0)&(_a<>1) || _a:=0 ?};
            .styling:=_a;
            ~~
            ",type_of(0),-1),

    obj_meth('AutoSize','włącza automatyczne doposowanie szerokosci kolumn';"
            {? (_a<>0)&(_a<>1) || _a:=0 ?};
            .autoSize:=_a;
            ~~
            ",type_of(0),-1),

   obj_meth('SetMsg','włącza/wyłącza komunikaty';"
            {? (_a <> 0) & (_a <> 1)
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Błędna wartość argumentu.\n(0) - wyłącza komunikaty.\n(1) - włącza komunikaty.')
               ?}
            || .MSG:=_a
            ?}
            ", type_of(0),-1),

   obj_meth('SetTab','ustawia nazwę tabeli';"
            {? var_pres('TAB',.) > 100 || obj_del(.TAB) ?};
            .TAB:=_a;
            .TAB_FLDS.erase();
            .TAB_FLDH.erase();
            {? ~.inTerm
            || .procName:=''
            |? (.inTerm & .procName<>'JSON')
            || .procName:='JSON'
            ?};
            .tabTitle:='';
            .ErasePos();
            .ErasePar()
            ", type_of(SYSLOG),-1),

   obj_meth('SetTab','ustawia nazwę tabeli oraz pola tabeli';"
            .SetTab(_a);
            .TabFldS(_b)
            ", type_of(SYSLOG),type_of(''),-1),

   obj_meth('TabFldS','ustawia akronim przekazywanego pola';"
            _spltab:= spli_str(_a,',');
            _max:= obj_len(_spltab);
            {! _ind:= 1 .. _max |!
               _typ:=var_pres(_spltab[_ind],.TAB);
               {? _spltab[_ind]<>''
               || {?
::                złączeniowy
                  _typ<>26
::                MEMO
                  & _typ<>25
::                BLOBRAW lub BLOBIMAGE
                  & _typ<>33
::                SYS_MEMO
                  & _typ<>36
::                IDADD
                  & _typ<>39
                  ||
                     .TAB_FLDS.prefix();
                     _key:=.TAB_FLDS.size()+1;
                     .TAB_FLDS.blank(1);
                     .TAB_FLDS.KEY:=_key;
                     .TAB_FLDS.VAL:=_spltab[_ind];
                     .TAB_FLDS.add()
                  || .TabFldH(_spltab[_ind])
                  ?}
               ?}
            !}
            ", type_of(''),-1),

   obj_meth('TabFldH','ustawia akronim przekazywanego pola do ukrycia';"
            _spltab:= spli_str(_a,',');
            _max:= obj_len(_spltab);
            {! _ind:= 1 .. _max |!
               {? _spltab[_ind] <> ''
               || .TAB_FLDH.prefix();
                  _key:=.TAB_FLDH.size()+1;
                  .TAB_FLDH.blank(1);
                  .TAB_FLDH.KEY:=_key;
                  .TAB_FLDH.VAL:=_spltab[_ind];
                  .TAB_FLDH.add()
               ?}
            !}
            ", type_of(''),-1),

   obj_meth('CellAddr','ustawia adres komórki od której zaczyna się wstawianie';"
            {? (+_a) & (+_a>1)
            || .cellAddr:=_a
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Błędny adres komórki')
               ?}
            ?}
            ", type_of(''),-1),

   obj_meth('ColNr','ustawia numer komórki od której zaczyna się wstawianie';"
            .cellNr:={? _a-1 < 0 || 0 || _a - 1 ?}
            ", type_of(0),-1),

   obj_meth('RowNr','ustawia numer wiersza od której zaczyna się wstawianie';"
            .rowNr:={? _a-1 < 0 || 0 || _a - 1 ?}
            ", type_of(0),-1),

   obj_meth('Sheet','ustawia numer i nazwę arkusza do którego chcemy wstawić dane';"
            .sheetNr:={? _a-1 < 0 || 0 || _a - 1 ?};
            .sheetNam:=_b
            ", type_of(0),type_of(''),-1),

   obj_meth('Sheet','ustawia numer arkusza do którego chcemy wstawić dane';"
            .Sheet(_a,'')
            ", type_of(0),-1),

   obj_meth('Create','tworzy plik excela i zwraca nazwę utworzonego pliku';"
::            sprawdz czy ustawiona jest nazwa procedury lub tabela
            {? (.procName='') & (type_of(.TAB)=type_of(null))
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Brak źródła danych do exportu')
               ?};
               return(0)
            ?};

            _pth:={? var_pres('_a')=type_of(0) || _a || 0 ?};
            .NewName();
            {? .CreateCF()
            || .CreateXF(_pth)
            ?}
            ",type_of(0),-1),

   obj_meth('Create','tworzy plik excela i zwraca nazwę utworzonego pliku';"
            .Create(0)
            ",-1),

   obj_meth('Run','tworzy plik excela i wyświetla go. Domyślnie z czekaniem na zakończenie i usuwaniem po zakończeniu';"
             .Run(1,1)
            ",-1),

   obj_meth('Run','tworzy plik excela i wyświetla go. Domyślnie z usuwaniem po zakończeniu';"
            .Run(_a,1)
            ",type_of(0),-1),

   obj_meth('Run','tworzy plik excela i wyświetla go';"
            {? (_a<>0)&(_a<>1) || _a:=0 ?};
            .Create();
            _exFile:=fopen(.exFName,'r',1);
            {? _exFile
            || fclose(_exFile);
               {? .inTerm
               || dlg_save(.exFName,1)
               || sys_exec(.exFName,'Otwieranie pliku...',_a)
               ?};
               {? _b=1 || .DelFiles(.exFName) ?}
            || {? (.jTerm | .inTerm) & .MSG
               || FUN.error('Nie udało się utworzyć pliku excela.')
               ?}
            ?}
            ",type_of(0),type_of(0),-1),

   obj_meth('DelFiles','usuwa wszystkie pliki excela utworzone od powstania obiektu lub tylko wskazany plik';"
            _fname:={? var_pres('_a')=type_of('') || _a || '' ?};
              _tmp:={? var_pres('_b')=type_of(0)  || _b || 1  ?};
            _inTermMsg:=1;
            {? .tabCEF.first()
            || {!
               |? _deleted:=0;
                  {? (_fname='' | .tabCEF.NAME*_fname)
                  || {? _tmp
::                      usuń też pliki z katalogu tymczasowego na końcówce
                     || {? .inTerm & exec('cli_functions','#system')=0
                        || {? _inTermMsg
                           || FUN.emsg('Próba usunięcia plików tymczasowych z katalogu użytkownika się nie powiodła.'
                                       '\n%1'[exec('indevice_nacc_msg','#system')]);
                              _inTermMsg:=0
                           ?}
                        || _deleted+=ferase('@'+tmp_dir()+.dirSepK+.tabCEF.NAME,0)
                        ?}
                     ?};
                     _deleted+=ferase(.tabCEF.NAME,1)
                  ?};
                  {? _deleted
                  || .tabCEF.del(,1)=2
                  || .tabCEF.next()
                  ?}
               !}
            ?}
            ",type_of(''),type_of(0),-1),

    obj_meth('DelFiles','usuwa pliki worda utworzone od powstania obiektu';"
            .DelFiles(_a,1)
            ",type_of(''),-1),

    obj_meth('DelFiles','usuwa pliki worda utworzone od powstania obiektu';"
            .DelFiles('',1)
            ",-1),

    obj_meth('NewStyle','tworzy nowy obiekt stylu';"
              ~~
               ",-1)
    )
?};
{? _dev
|| @.Class.setclass('EXCEL',_cl_name)
?};
~~


\example
::----------------------------------------------------------------------------------------------------------------------
::   UTW: TMR [12.30]
:: UWAGA: W celu poprawnego działania obiektu z przekazywaniem tabeli do exportu (metoda .SetTable),
::        należy utworzony obiekt klasy EXCEL przypisać do zmiennej globalnej.
::----------------------------------------------------------------------------------------------------------------------
exec('init','#excel');
::przypisujemy obiekt klasy EXCEL do zmiennej globalnej
{? var_pres('__tx')>100 || obj_del(__tx) ?};
_dev:=__develop;
{? _dev
|| __tx:=obj_new(@.Class.EXCEL)
|| __tx:=obj_new(@.CLASS.EXCEL)
?};
__tx.devMsg:=0;
::---w pierwszym przypadku korzystamy z pobierania danych za pomoca procedury wbudowanej
__tx.SetProc('getlog@po_log');
::---dodajemy parmetr do procedury (tylko jako string), kolejnosc dodawania jest wazna
::__tx.AddParam('10');
:__tx.AddParam('2000-01-01');

::---w drugim przypadku korzystamy z pobierania danych za pomocą przekazanej tabeli
::   OSOBA.index('OSOBA');
::   OSOBA.prefix();
::__tx.SetTab(OSOBA,'PIERWSZE,US');

::---ustawiwmy szablon na podstawie ktorego bedziemy tworzyc plik excela (jezeli nie podamy szablonu, zostanie utworzonu
::---plik excela z samymi danymi)
:__tx.Template('2matryca.xlt',1);
::---mozemy ustawic sie na wskazanym wierszu i kolumnie
__tx.Header(0);
__tx.RowNr(5);
__tx.ColNr(1);
__tx.CellAddr('C6');
::---włączamy/wyłączamy prosty styl
__tx.Styling(0);
::---możemy wyłączyć/wyłączyć domyślne dopasowanie szerokości kolumn do zawartości
__tx.AutoSize(0);
::---możemy ustawić tytuł dla exportowanych danych
:__tx.Title('Zestawienie ...');
:podanie numeru arkusza i jego nazwy. Nazwa będzie obcinana do 31 znaków. Znaki niedozwolone będą zastępowane spacjami
__tx.Sheet(1,'Nie/?\*[]{}!@dozwolone_');
::---tworzy plik tymczasowy ale go nie usuwa
_exName:=__tx.Create();
::return();
::_exName:='';
::---jezeli uda się utworzyc plik, to dodaj do niego kolejna porcje danych

::---teraz zamiast procedury uzywamy przekazywania tabeli stalej lub tymczasowej
::---zawezamy dziedzine przekazywanej tabeli
OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix('A');
__tx.SetTab(OSOBA,'PIERWSZE,NAZWISKO');
::---mozemy okreslic ktore kolumny beda przekazywane do excela, kolejnosc jest wazna i bedzie zachowana
::   __tx.TabFldS('PIERWSZE,NAZWISKO');
__tx.TabFldS('UR_DATA');
::---pomimo przypisanego szablonu dodaj nagłowek do excela dla przekazywanych danych
__tx.Header(1,0);
::---poniewaz chcemy drugi raz wkleic dane do tego samego excela to jako szablon wskazyjemy wczesniej utworzony plik
{? _exName<>''
|| __tx.Template(_exName,1)
:   __tx.Template(_exName,0)
?};
::---mozemy tez wskazac nr arkusza do ktorego chcemy wkleic dane
__tx.Sheet(3,'OSOBA');
__tx.RowNr(6);
__tx.ColNr(5);
::---ustawienie adresu komorki nadpisuje ustawienie wiersza i kolumny
__tx.CellAddr('A6');
__tx.Styling(1);
__tx.AutoSize(1);
__tx.Title('Zestawienie 2');
::---tworzymy nowy plik i wyswietlamy go na ekranie - wywolanie bez argumentow domyslnie usuwa utworzony plik z serwera
::---dziedzina przekazanej tabeli musi byc w trakcie wywolywania taka jaka chcemy wyeksportowac
__tx.Run();
::---teraz dopiero usuwamy pierwszy plik tymczasowy
::__tx.DelFiles(_exName);
__tx.DelFiles('',0);
::   ferase(_exName,1);
::---przywracamy dziedzine exportowanej tabeli
OSOBA.cntx_pop();
::---sprzatamy
obj_del(__tx);&__tx;
~~


\xls_reader_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Definicja klasy i powolanie obiektu XlsRead do odczytywania arkuszy excela
:: ~OST: INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('XRECLASS',@.CLASS)<0
|| obj_decl('XRECLASS',
      obj_fld('TRYB', 0),
      obj_fld('FILE', 0),
      obj_fld('FN', ''),
      obj_fld('LP', 0),
      obj_fld('LPS', 0),
      obj_fld('BADCHAR', 0),
      obj_fld('SHEET',~~),
      obj_fld('CWB',0),
      obj_fld('LIB', 0),
      obj_fld('F1', 0),
      obj_fld('F2', 0),
      obj_fld('F3', 0),
      obj_fld('F4', 0),
      obj_fld('F5', 0),
      obj_fld('F6', 0),
      obj_fld('F7', 0),
      obj_fld('F8', 0),
      obj_fld('F9', 0),
      obj_fld('F10', 0),
      obj_fld('F11', 0),
      obj_fld('F12', 0),
      obj_fld('F13', 0),
      obj_fld('F14', 0),
      obj_fld('F15', 0),
      obj_fld('F16', 0),
      obj_fld('F17', 0),
      obj_fld('F18', 0),
      obj_fld('F19', 0),
      obj_fld('F20', 0),
      obj_fld('F21', 0),
      obj_fld('F22', 0),
      obj_fld('F23', 0),
      obj_fld('F24', 0),
      obj_fld('F25', 0),
      obj_fld('F26', 0),
      obj_fld('F27', 0),
      obj_fld('F28', 0),
      obj_fld('F29', 0),
      obj_fld('F30', 0),
      obj_fld('F31', 0),
      obj_fld('F32', 0),
      obj_fld('F33', 0),
      obj_fld('F34', 0),
      obj_fld('F35', 0),
      obj_fld('F36', 0),
      obj_fld('F37', 0),
      obj_fld('Path', 0),
      obj_fld('SERWER', 0),
      obj_meth('__init',"
         {? var_press('_b')=type_of(0) || .SERWER:=(_b<>0) ?};
         _Interm:=exec('interm','#system');
         {? _Interm | .SERWER |  cli_ver()='cgi'
         || .LIB:=lib_load_srv_jar('excelspliter.jarl',0)
         || .LIB:=lib_load('excelspliter.dll',1)
         ?};
         .SHEET:=tab_tmp(2,
            'FILE','INTEGER','Uchwyt pliku',
            'NAME','STRING[50]','Nazwa'
         );
         1
      "),
      obj_meth('__done',"
         {? .LIB
         || lib_free(.LIB);
            {! _i:=1..obj_len(.)
            |! {? type_of(.[_i])=type_of(1)
               || .[_i]:=0
               |? type_of(.[_i])=118
               || obj_del(.[_i])
               ?}
            !}
         ?}
      "),
      obj_meth('addErrorPath',"
         {? .LIB
         || {? ~.Path
            || .Path:=lib_decl(.LIB,,'int','addErrorPath','String')
            ?};
            {? .Path
            || lib_call(.Path,_a)
            || -1
            ?}
         || -1
         ?}
      ",type_of('')),
      obj_meth('erorTest',"
         {? .LIB
         || {? ~.F36
            || .F36:=lib_decl(.LIB,,'void','erorTest')
            ?};
            {? .F36
            || lib_call(.F36)
            || -1
            ?}
         || -1
         ?}
      "),
      obj_meth('open',"
         {? .LIB
         || {? ~.F1
            || .F1:=lib_decl(.LIB,,'int','open','String')
            ?};
            {? .F1
            || lib_call(.F1,_a)
            || -1
            ?}
         || -1
         ?}
      ",type_of('')),
::    Ustawia arkusz o podanym numerze jako bieżący
::    _a - numer arkusza (licząc od 0)
      obj_meth('getSheet',"
         {? .TRYB=1
         || {? .FILE=0
            || fwrite(.FILE,'gs1@'+$_a);
               1
            ?}
         |? .LIB
         || {? ~.F2
            || .F2:=lib_decl(.LIB,,'int','getSheet','int')
            ?};
            {? .F2
            || lib_call(.F2,_a)
            || -1
            ?}
         || -1
         ?}
      ",type_of(0)),
::    Ustawia arkusz podanej nazwie jako bieżący
::    _a - nazwa arkusza
      obj_meth('getSheet',"
         {? .TRYB=1
         || {? .FILE
            || .SHEET.cntx_psh();
               .SHEET.prefix(.CWB,_a,);
               {? .SHEET.first()
               || fwrite(.FILE,'gs2@'+_a);
                  _ok:=1
               || _ok:=0
               ?};
               .SHEET.cntx_pop();
               _ok
            ?}
         |? .LIB
         || {? ~.F24 || .F24:=lib_decl(.LIB,,'int','getSheet','String') ?};
            {? .F24 || lib_call(.F24,_a) || 0 ?}
         || 0
         ?}
      ",type_of('')),
      obj_meth('getRow',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'gr@'+$_a);
               1
            ?}
         |? .LIB
         || {? ~.F3
            || .F3:=lib_decl(.LIB,,'int','getRow','int')
            ?};
            {? .F3
            || lib_call(.F3,_a)
            || -1
            ?}
         || -1
         ?}
      ",type_of(0)),
      obj_meth('getValue',"
         {? .LIB
         || {? ~.F4
            || .F4:=lib_decl(.LIB,,'String','getCellValue','int')
            ?};
            {? .F4
            || .BADCHAR:=0;
               _no_msg:=no_msg(1); on_error(3); errno();
               _str:=lib_call(.F4,_a);
               no_msg(_no_msg); on_error(); _err:=errno();
               {? _err
               || {? _err=579 || .BADCHAR:=1 ?};
                  _str:=''
               ?};
               {!
               |? _str2:=.getString();
                  {? _str2<>''
                  || _str+=_str2;
                     1
                  ?}
               !};
               _str
            || ''
            ?}
         || ''
         ?}
      ",type_of(0)),
      obj_meth('getFormateValue',"
         {? .LIB
         || {? ~.F37
            || .F37:=lib_decl(.LIB,,'String','getCellFormateValue','int')
            ?};
            {? .F37
            || .BADCHAR:=0;
               _no_msg:=no_msg(1); on_error(3); errno();
               _str:=lib_call(.F37,_a);
               no_msg(_no_msg); on_error(); _err:=errno();
               {? _err
               || {? _err=579 || .BADCHAR:=1 ?};
                  _str:=''
               ?};
               {!
               |? _str2:=.getString();
                  {? _str2<>''
                  || _str+=_str2;
                     1
                  ?}
               !};
               _str
            || ''
            ?}
         || ''
         ?}
      ",type_of(0)),
      obj_meth('getComm',"
         {? .LIB
         || {? ~.F5
            || .F5:=lib_decl(.LIB,,'String','getCellComment','int')
            ?};
            {? .F5
            || lib_call(.F5,_a)
            || ''
            ?}
         || ''
         ?}
      ",type_of(0)),
      obj_meth('firstRow',"
         {? .LIB
         || {? ~.F6
            || .F6:=lib_decl(.LIB,,'int','getRowFirst')
            ?};
            {? .F6
            || lib_call(.F6)
            || -1
            ?}
         || -1
         ?}
      "),
      obj_meth('lastRow',"
         {? .LIB
         || {? ~.F7
            || .F7:=lib_decl(.LIB,,'int','getRowLast')
            ?};
            {? .F7
            || lib_call(.F7)
            || -1
            ?}
         || -1
         ?}
      "),
      obj_meth('lastCell',"
         {? .LIB
         || {? ~.F8
            || .F8:=lib_decl(.LIB,,'int','getCells')
            ?};
            {? .F8
            || lib_call(.F8)
            || -1
            ?}
         || -1
         ?}
      "),
::    Tworzenie zeszytu arkuszy, zwraca uchwyt do zaszytu (patrz metoda get())
::    _a - napis określający typ arkusza: 'xls' lub 'xlsx'
      obj_meth('create',"
         {? .TRYB=1
         || {? .FILE=0
            || .FN:='excel'+$SYSLOG.tm_stamp()+'.txt';
               .FILE:=fopen(.FN,'Uw',1)
            ?};
            {? .FILE
            || .LP+=1;
               fwrite(.FILE,'c@'+_a+'@'+$.LP);
               .CWB:=.LP;
               .LP
            ?}
         |? .LIB
         || {? ~.F9 || .F9:=lib_decl(.LIB,,'int','create','String') ?};
            {? .F9 || lib_call(.F9,_a) ?}
         ?}
      ",type_of('')),
::    Zapisanie zaszytu arkuszy
::    _a - scieżka do lokalnego pliku
      obj_meth('save',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'s@'+_a); 1
            ?}
         |? .LIB
         || {? ~.F10 || .F10:=lib_decl(.LIB,,'int','save','String') ?};
            {? .F10 || lib_call(.F10,_a) || 0 ?}
         || 0
         ?}
      ",type_of('')),
::    Dodanie arkusza do utworzonego ostatnio zeszytu
::    _a - nazwa, gdy '' nazwa tworzona automatycznie postaci Arkusz x, gdzie x kolejny numer arkusza
      obj_meth('addSheet',"
         {? .TRYB=1
         || {? .FILE
            || .SHEET.cntx_psh();
               .SHEET.prefix();
               .SHEET.blank(1);
               .SHEET.FILE:=.CWB;
               .SHEET.NAME:=_a;
               .SHEET.add();
               .SHEET.cntx_pop();
               fwrite(.FILE,'as@'+_a);
               1
            ?}
         |? .LIB
         || {? ~.F11 || .F11:=lib_decl(.LIB,,'int','addSheet','String') ?};
            {? .F11 || lib_call(.F11,_a) || 0 ?}
         || 0
         ?}
      ",type_of('')),
::    Dodanie wiersza do utworzonego ostatnio arkusza
::    _a - nr wiersza od 0
      obj_meth('addRow',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'ar@'+$_a); 1
            ?}
         |? .LIB
         || {? ~.F12 || .F12:=lib_decl(.LIB,,'int','addRow','int') ?};
            {? .F12 || lib_call(.F12,_a) || 0 ?}
         || 0
         ?}
      ",type_of(1)),
::    Dodanie komórki do utworzonego ostatnio wiersza
::    _a - nr komórki od 0
::    _b - wartość komórki
      obj_meth('addCell',"
         {? .TRYB=1
         || {? .FILE
            || _typ:=var_pres('_b');
               {? _typ=1
               || fwrite(.FILE,'ac@'+$_a+'@1@'+gsub($_b,',','.')); 1
               |? _typ=2 | _typ=3
               || fwrite(.FILE,'ac@'+$_a+'@'+$_typ+'@\r\n'+_b+'\r\nac@2@end'); 1
               |? _typ=4
               || fwrite(.FILE,'ac@'+$_a+'@4@'+_b$3); 1
               |? _typ=5
               || fwrite(.FILE,'ac@'+$_a+'@5@'+_b$3); 1
               || 0
               ?}
            ?}
         |? .LIB
         || {? ~.F13 || .F13:=lib_decl(.LIB,,'int','addCell','int','int','String') ?};
            {? .F13
            || _typ:=var_pres('_b');
               {? _typ=1
               || lib_call(.F13,_a,1,gsub($_b,',','.'))
               |? _typ=2 | _typ=3
               || _big:=+_b>3072;
                  {? _big
                  || .newString();
                     {!
                     |? .addString(3072+_b);
                        _b:=3072-_b;
                        _b<>''
                     !}
                  ?};
                  _ret:=lib_call(.F13,_a,_typ,{? _typ=2 || _b || $_b ?});
                  {? _big
                  || .delString()
                  ?};
                  _ret
               |? _typ=4
               || lib_call(.F13,_a,4,_b$3)
               |? _typ=5
               || lib_call(.F13,_a,5,_b$3)
               || 0
               ?}
            || 0
            ?}
         || 0
         ?}
      ",type_of(1)),
::    Ustawienie komentarza utworzonej ostatnio komórki
::    _a - nr komórki od 0
      obj_meth('setComment',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'sc@');
               fwrite(.FILE,_a);
               fwrite(.FILE,'sc@end');
               1
            ?}
         |? .LIB
         || {? ~.F14 || .F14:=lib_decl(.LIB,,'int','setComment','String') ?};
            {? .F14 || lib_call(.F14,_a) || 0 ?}
         || 0
         ?}
      ",type_of('')),
::    Ustawia automatyczy pomiar szerokości kolumn by mieściła się zawartośc
::    _a - nr kolumny od 0
      obj_meth('setAutoSizeColumn',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'sasc@'+$_a);
               ~~
            ?}
         |? .LIB
         || {? ~.F35 || .F35:=lib_decl(.LIB,,'void','setAutoSizeColumn','int') ?};
            {? .F35 || lib_call(.F35,_a); 1 ?}
         || 0
         ?}
      ",type_of(1)),
::    Ustawia automatyczny rozmiar by mieściła się zawartość kolumy
::    _a - nr kolumny od 0
      obj_meth('autoSizeColumn',"
         .setAutoSizeColumn(_a);
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'asc@'+$_a);
               ~~
            ?}
         |? .LIB
         || {? ~.F15 || .F15:=lib_decl(.LIB,,'void','autoSizeColumn','int') ?};
            {? .F15 || lib_call(.F15,_a) || 0 ?}
         || 0
         ?}
      ",type_of(1)),
::    Dodaje styl komórki
      obj_meth('addStyle',"
         {? .TRYB=1
         || {? .FILE
            || .LPS+=1;
               fwrite(.FILE,'ast@'+$.LPS);
               .LPS
            ?}
         |? .LIB
         || {? ~.F16 || .F16:=lib_decl(.LIB,,'int','addStyle') ?};
            {? .F16 || lib_call(.F16) || -1 ?}
         || -1
         ?}
      "),
::    Ustawia parametry stylu
::    'bold' - pogrubiona czcionka
::    'italic' - kursywa
::    'date' - ustawia styl jak dla dat (dd.mm.rrrr)
::    'time' - ustawia styl jak dla czasu (gg:mm:ss)
::    'text' - ustawia styl na tekstowy
::    'format:xxx' - ustawia format komórki: np xxx=dd.mm.yyy (format daty), # ##0.00 (format liczby)
::    'bgcolor:xxx' - ustawia tło komórki: np xxx=RED lub xxx=255:0:0
::    'fgcolor:xxx' - ustawia kolor czcionki komórki: np xxx=WHITE lub xxx=255:255:255
::    'editable:x' - ustawia redagowalność komórki: x=1 redagowalna x=0 nieredagowalna
::                  (tylko dla xlsx i gdy włączono ochronę hasłem patrz lock() )
::    'hidden:x' - ustawia ukrywanie formuły: x=1 ukryta x=0 formuła widoczna
::                 (tylko dla xlsx i gdy włączono ochronę hasłem patrz lock() )
::    Przykład:
::    _styl:=_excel.addStyle();
::    _excel.setStyle('bold');
::    _excel.setStyle('bgcolor:RED');
::    Dodaje styl z tłem czerwonym i czcionką pogrubioną
      obj_meth('setStyle',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'ss@'+_a); 1
            ?}
         |? .LIB
         || {? ~.F17 || .F17:=lib_decl(.LIB,,'void','setStyle','String') ?};
            {? .F17 || lib_call(.F17,_a) || 0 ?}
         || 0
         ?}
      ",type_of('')),
::    Ustawia styl komórki
::    _a - nr komórki
::    _b - nr dodanego stylu
      obj_meth('setCellStyle',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'scs@'+$_a); ~~
            ?}
         |? .LIB
         || {? ~.F18 || .F18:=lib_decl(.LIB,,'void','setCellStyle','int') ?};
            {? .F18 || lib_call(.F18,_a) || 0 ?}
         || 0
         ?}
      ",type_of(1)),
::    Pobiera komórkę nazwaną
::    _a - nazwa
      obj_meth('getName',"
         {? .LIB
         || {? ~.F19 || .F19:=lib_decl(.LIB,,'int','getName','String') ?};
            {? .F19 || lib_call(.F19,_a) || 0 ?}
         || 0
         ?}
      ",type_of('')),
::    Zwraca nazwę arkusza komórki nazwanej
      obj_meth('nameSheet',"
         {? .LIB
         || {? ~.F20 || .F20:=lib_decl(.LIB,,'String','nameSheet') ?};
            {? .F20 || lib_call(.F20) || '' ?}
         || ''
         ?}
      "),
::    Zwraca nr wiersza komórki nazwanej
      obj_meth('nameRow',"
         {? .LIB
         || {? ~.F21 || .F21:=lib_decl(.LIB,,'int','nameRow') ?};
            {? .F21 || lib_call(.F21) || -1 ?}
         || -1
         ?}
      "),
::    Zwraca nr kolumny komórki nazwanej
      obj_meth('nameCol',"
         {? .LIB
         || {? ~.F22 || .F22:=lib_decl(.LIB,,'int','nameCol') ?};
            {? .F22 || lib_call(.F22) || -1 ?}
         || -1
         ?}
      "),
::    Ustawia nazwę komórki
::    _a - nazwa
      obj_meth('setName',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'sn@'+_a); 1
            ?}
         |? .LIB
         || {? ~.F23 || .F23:=lib_decl(.LIB,,'int','setName','String') ?};
            {? .F23 || lib_call(.F23,_a) || 0 ?}
         || 0
         ?}
      ",type_of('')),
::    Nakłada ochronę z hasłem na bieżący arkusz
::    _a - hasło, gdy puste generowane jest automatycznie
      obj_meth('lock',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'l@'+_a); ~~
            ?}
         |? .LIB
         || {? ~.F25 || .F25:=lib_decl(.LIB,,'void','lock','String') ?};
            {? .F25 || lib_call(.F25,_a) || -1 ?}
         || -1
         ?}
      ",type_of('')),
::    Ustawia wskazany zeszyt jako bieżący
::    _a - numer arkusza zwrócony przez create
      obj_meth('get',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'g@'+$_a);
               .CWB:=_a;
               1
            ?}
         |? .LIB
         || {? ~.F26 || .F26:=lib_decl(.LIB,,'int','get','int') ?};
            {? .F26 || lib_call(.F26,_a) ?}
         ?}
      ",type_of(1)),
      obj_meth('close',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'cl@'+$_a); 1
            ?}
         |? .LIB
         || {? ~.F27 || .F27:=lib_decl(.LIB,,'void','close','int') ?};
            {? .F27 || lib_call(.F27,_a) ?}
         ?}
      ",type_of(1)),
::    Blokuje (zamraża) komórki - nie są przewijane
::    _a - kolumna
::    _b - wiersz
      obj_meth('freeze',"
         {? .TRYB=1
         || {? .FILE
            || fwrite(.FILE,'f@'+$_a+'@'+$_b); 1
            ?}
         |? .LIB
         || {? ~.F28 || .F28:=lib_decl(.LIB,,'int','freeze','int','int') ?};
            {? .F28 || lib_call(.F28,_a,_b) ?}
         ?}
      ",type_of(1),type_of(1)),
      obj_meth('newString',"
         {? .LIB
         || {? ~.F29 || .F29:=lib_decl(.LIB,,'void','newString') ?};
            {? .F29 || lib_call(.F29) ?}
         ?}
      "),
      obj_meth('addString',"
         {? .LIB
         || {? ~.F30 || .F30:=lib_decl(.LIB,,'void','addString','String') ?};
            {? .F30 || lib_call(.F30,_a) ?}
         ?}
      ",type_of('')),
      obj_meth('delString',"
         {? .LIB
         || {? ~.F31 || .F31:=lib_decl(.LIB,,'void','delString') ?};
            {? .F31 || lib_call(.F31) ?}
         ?}
      "),
      obj_meth('getString',"
         {? .LIB
         || {? ~.F32 || .F32:=lib_decl(.LIB,,'String','getString') ?};
            {? .F32
            || _no_msg:=no_msg(1); on_error(3); errno();
               _str:=lib_call(.F32);
               no_msg(_no_msg); on_error(); _err:=errno();
               {? _err
               || {? _err=579 || .BADCHAR:=1 ?};
                  _str:=''
               ?};
               _str
            || ''
            ?}
         || ''
         ?}
      "),
      obj_meth('openStream',"
         {? .LIB
         || {? ~.F33 || .F33:=lib_decl(.LIB,,'int','openStream','String','String') ?};
            {? .F33 || lib_call(.F33,_a,_b) ?}
         ?}
      ",type_of(''),type_of('')),
      obj_meth('done',"
         {? .TRYB=1
         || .SHEET.erase();
            {? .FILE
            || fclose(.FILE);
               .FILE:=0;
               _Interm:=exec('interm','#system');
               {? _Interm | .SERWER
               || _local_dir:=fmk_tmp_dir(0).get_path()
               || _local_dir:='@'+tmp_dir()
               ?};

               {? _a=0 | fcopy(.FN,_local_dir+'/excel.txt',1,0,1)
               || ferase(.FN,1);
                  {? _a=1 & .LIB
                  || {? ~.F34 || .F34:=lib_decl(.LIB,,'int','done','String') ?};
                     {? .F34
                     || {? _Interm | .SERWER
                        || lib_call(.F34,_local_dir+'/excel.txt')
                        || lib_call(.F34,1-_local_dir+'/excel.txt')
                        ?}
                     ?}
                  ?}
               ?}
            ?}
         ?}
      ",type_of(1)),
   )
?}


\xls_stream_reader
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Zwraca zmienną do obsługi czytania pliku xlsx strumieniowo
:: ~OST: INFERASE, INFOPEN
::----------------------------------------------------------------------------------------------------------------------
_env:=obj_new(
   'open',
   'read',
   'close',
   'get',
   'new',

   'obj',
   'file',
   'filename',
   'TabNames',
   'TabSheets',
   'SheetsLp'
);
:: Otwiera plik excel
:: _a - scieżka do pliku
:: _b - scieżka do pliku
_env.open:="
   .SheetsLp:=1;
   {? var_press('.TabNames')<=0
   || .TabNames:=tab_tmp(1,
         'NAME','STRING[255]','Nazwa',
         'SHEET','INTEGER','Arkusz',
         'ROW','INTEGER','Wiersz',
         'COLUMN','INTEGER','Kolumna'
      )
   || .TabNames.erase()
   ?};
   {? var_press('.TabSheets')<=0
   || .TabSheets:=tab_tmp(1,
         'NAME','STRING[31]','Nazwa',
         'LP','INTEGER','LP'
      )
   || .TabSheets.erase()
   ?};
   _src:=_a;
   _dest:=_a+'.txt';
   .file:=0;
   _serverDir:={? var_pres('_b')=type_of(0) || _b || 0 ?};
   exec('Xls','#object',_serverDir);
   {? Xls.openStream(_src,_dest)
   ||
      _Interm := exec('interm','#system');
      {? _Interm | _serverDir
      ||
         .file:=fopen(_dest,'ur',0)
      ||
         .file:=fopen('@'+_dest,'ur',0)
      ?};
      {? .file
      || .filename:=_dest;
         {!
         |? _l:=fread(.file);
            {? _l<>'\n'
            || {? 4+_l='NAME'
               || _t:=spli_str(_l,'@');
                  .TabNames.blank(1);
                  .TabNames.NAME:=_t[2];
                  .TabNames.SHEET:=#_t[3]+1;
                  .TabNames.ROW:=#_t[4]+1;
                  .TabNames.COLUMN:=#_t[5]+1;
                  .TabNames.add();
                  &_t;
                  1
               |? 5+_l='SHEET'
               || _t:=spli_str(_l,'@');
                  .TabSheets.blank(1);
                  .TabSheets.NAME:=_t[2];
                  .TabSheets.LP:=.SheetsLp;
                  .TabSheets.add();
                  .SheetsLp+=1;
                  &_t;
                  1
               |? _l='WORKBOOK'
               || 0
               ?}
            ?}
         !}
      ?}
   ?};
   .file
";

:: Wczytuje następny element
_env.read:="
   {? .file
   || _l:=fread(.file);
      {? _l<>'\n'
      || {? 4+_l='ROW@'
         || .obj:=.new('ROW');
            _t:=spli_str(_l,'@');
            _cels:=#_t[3]+1;
            .obj.ROW:=#_t[2]+1;
            .obj.CELLS:=obj_new(_cels);
            {! _i:=1.._cels |! .obj.CELLS[_i]:='' !};
            &_t;
            _value:=''; _lp:=1; _dalej:=1;
            {!
            |? _l:=fread(.file);
               {? _l<>'\n'
               || {? 2+_l='C@'
                  || _t:=spli_str(_l,'@');
                     _lp:=#_t[2]+1;
                     &_t;
                     _value:=''
                  |? _l='c@'
                  || .obj.CELLS[_lp]:=_value;
                     _dalej:=_lp<_cels
                  || {? _value<>'' || _value+='\n' ?}; _value+=_l
                  ?};
                  _dalej
               ?}
            !}

         |? 6+_l='SHEET@'
         || .obj:=.new('SHEET');
            _t:=spli_str(_l,'@');
            .obj.NAME:=_t[2]
         ?};
         1
      ?}
   ?}
";

:: Zamyka plik
_env.close:="
   {? .file
   || fclose(.file);
      _Interm := exec('interm','#system');
      _serverDir:={? var_pres('_a')=type_of(0) || _a || 0 ?};
      {? _Interm | _serverDir
      ||
         ferase(.filename,0)
      ||
         ferase('@'+.filename,0)
      ?}
   ?}
";

_env.get:="
   .obj
";

:: Tworzy objekt
_env.new:="
   {? var_press('obj',.)>0 || obj_del(.obj) ?};
   {? _a='SHEET'
   || _obj:=obj_new('TYPE','NAME');
      _obj.TYPE:='SHEET';
      _obj
   |? _a='ROW'
   || _obj:=obj_new('TYPE','ROW','CELLS');
      _obj.TYPE:='ROW';
      _obj
   ?}
";
_env


\test
_env:=exec('xls_stream_reader','#excel');
{? _env.open('e:/!exp/parametryzacja.xlsx')
|| _name:=_env.TabNames;
   _name.win_sel(_name.mk_sel(,,1));
   _name.select();

   _sheet:=_env.TabSheets;
   _sheet.win_sel(_sheet.mk_sel(,,1));
   _sheet.select();
   _jest:=0;
   {!
   |? {? _env.read()
      || _obj:=_env.get();
         {? _obj.TYPE='SHEET'
         || {? var_press('tab')>0
            || tab.win_sel(tab.mk_sel(,,1));
               tab.select()
            ?};
            msg(_obj.NAME);
            _jest:=0
         |? _obj.TYPE='ROW'
         || {? _jest=0
            || _jest:=1;
               _size:=5;
               _tt:='tab_tmp(1,';
               {! _i:=1.._size
               |! _tt+='\'P'+$_i+'\',\'STRING[30]\',\'Nazwa w oknie'+$_i+'\','
               !};
               _tt:=_tt-1;
               _tt+=')';
               VAR_DEL.delete('tab');
               tab:=($_tt)()
            ?};
            tab.blank(1);
            {! _i:=1.._size
            |! {? _i<=obj_len(_obj.CELLS) || ($('tab.P'+$_i+':=_a'))(_obj.CELLS[_i]) ?}
            !};
            tab.add();
            1
         ?};
         &_obj;
         1
      ?}
   !};
   _env.close()
?}

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 4864f14b28e35b32765aaf4a71ad582b7cd6b45d124e05e6d4009b85ed5cfd46dc75d500a6e424131f04cfadc37ad28cedbe28f9dc23e68758e48793c7d9d2a8fda7a70a0a2f3b32a896fc13b384976364e042bdaf46d7d8975e566498cf6fdeda62b202cc237f314de61eaacfda248ccb0e255941e31673e46bd2d9be41e8ea
