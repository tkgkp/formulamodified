:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #bi_inst.fml [17.00]
:: Utworzony: 10.09.2013
:: Autor: AWI
::======================================================================================================================
:: Zawartosc: Wyświetlanie instancji procesów
::======================================================================================================================


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wyświetlanie instancji procesu _a albo elementu _b jeśli podano
::   WE: [_a] - B_PROC.ref()
::       [_b] - B_ACTION.ref()
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _b_proc:=_a || _b_proc:=null() ?};
{? var_pres('_b')=type_of(null()) || _b_act:=_b || _b_act:=null() ?};

B_PROC.cntx_psh();
_czysc:="
   VAR_DEL.delete('__INST_1')
";
_czysc();

__INST_1:=obj_new('B_PROC','BI_PROC','IPR_DETA','B_KEYREF');
__INST_1.B_PROC:=obj_new('TAB','REF','WERT','WERN');
__INST_1.B_PROC.REF:=null();
__INST_1.BI_PROC:=obj_new('TAB','REF','WER','BTN1','BTN2','BTN3','PREV');
__INST_1.BI_PROC.REF:=null();
__INST_1.BI_PROC.BTN1:='';
__INST_1.BI_PROC.BTN2:='';
__INST_1.BI_PROC.BTN3:='';
__INST_1.IPR_DETA:=obj_new('TAB','WER');
__INST_1.B_KEYREF:=obj_new('TAB','WER','LAST');
__INST_1.B_KEYREF.LAST:=null();

:: tabela procesów
exec('b_proc_tab','#bi_inst',__INST_1.B_PROC,_b_proc,_b_act);

:: okna procesów
exec('b_proc_wer','#bi_inst',__INST_1.B_PROC);

:: tabela instancji procesu
__INST_1.BI_PROC.TAB:=BI_PROC;

:: okno instacji procesu
{? _b_act<>null()
|| params_exec('bi_proc_wer','#bi_inst',__INST_1.BI_PROC,3)
|| params_exec('bi_proc_wer','#bi_inst',__INST_1.BI_PROC)
?};

:: tabela szczegółów uruchomienia
exec('ipr_deta_tab','#bi_inst',__INST_1.IPR_DETA);

:: okno szczegółów uruchomienia
exec('ipr_deta_wer','#bi_inst',__INST_1.IPR_DETA);

:: tabela kluczowych rekordów instancji procesu
exec('b_keyref_tab','#bi_inst',__INST_1.B_KEYREF);

:: okno kluczowych rekordów instancji procesu
exec('b_keyref_wer','#bi_inst',__INST_1.B_KEYREF);

:: okno grupowe
_Tab:=__INST_1.B_PROC.TAB;

_far:="
   _obj:=__INST_1.B_PROC;
   _Tab:=_obj.TAB;
   _ref:=exec('FindAndGet','#table',B_PROC,_Tab.B_PROC,,,null());
   _ref_update:=_obj.REF<>_ref;
   _obj.REF:=_ref;

   BI_PROC.index('PROCODE');
   BI_PROC.prefix(_obj.REF);
   BI_PROC.first();

   _obj1:=__INST_1.BI_PROC; grp_disp(_obj1.TAB,_obj1.WER,1);
   {? _ref_update || _obj2:=__INST_1.IPR_DETA; grp_disp(_obj2.TAB,_obj2.WER) ?};
   _obj3:=__INST_1.B_KEYREF; grp_disp(_obj3.TAB,_obj3.WER)
   ";
_Tab.prefix('N');

_base_win:=0;
{? _Tab.first()
||
   _grpbefore:="
      _tab:=__INST_1.B_PROC.TAB;
      _wer:=_Tab:=__INST_1.B_PROC.WERN;
      grp_disp(_tab,_wer,1)
   ";
   _wer:=_Tab.grp_make('Instancje'@,_grpbefore,'jfwnejnvpczxpok');
   _base_win:=1;
   _before:="
      cur_tab(1,1).prefix('N');
      cur_tab(1,1).first();
      _obj:=__INST_1.BI_PROC;
      _tab:=_obj.TAB;
      _wer:=_obj.WER;
      _tab.win_sel(_wer);
      _tab.hdr_sel();
      _tab.hdr_sel(' procesów'@);
      ~~
   ";
   _Tab.grp_sel(_wer,,__INST_1.B_PROC.WERN,'Procesy'@,_far,,,,_before,,,,'maximized',)
?};
_Tab.prefix('T');
{? _Tab.first() | _base_win=0
||
   {? _base_win=0
   || _grpbefore:="
         _tab:=__INST_1.B_PROC.TAB;
         _wer:=_Tab:=__INST_1.B_PROC.WERT;
         grp_disp(_tab,_wer,1)
      ";
      _wer:=_Tab.grp_make('Instancje'@,_grpbefore,'jfwnejnvpczxpok')
   ?};

   _before:="
      cur_tab(1,1).prefix('T');
      cur_tab(1,1).first();
      _obj:=__INST_1.BI_PROC;
      _tab:=_obj.TAB;
      _wer:=_obj.WER;
      _tab.win_sel(_wer);
      _tab.hdr_sel();
      _tab.hdr_sel(' poza procesami'@);
      ~~
   ";
   _Tab.grp_sel(_wer,,__INST_1.B_PROC.WERT,'Poza procesami'@,_far,,,,_before,,,,'maximized')
?};

_Tab.grp_splt(_wer,,'vertical','inst');

_fb:="
::   _obj:=__INST_1.B_PROC;
::   BI_PROC.index('PROSTAN');
::   BI_PROC.prefix(_obj.REF);
::   BI_PROC.first();
   ~~
   ";
_fa:="";
_far:="
   _obj:=__INST_1.BI_PROC;
   _Tab:=_obj.TAB;
   _btn1:=_obj.BTN1;
   _btn2:=_obj.BTN2;
   _btn3:=_obj.BTN3;
   _keys:=':';

   _ref:=BI_PROC.ref();
   _ref_update:=_obj.REF<>_ref;
   _obj.REF:=_ref;
   _obj_proc:=__INST_1.B_PROC;
   _b_proc:=_obj_proc.REF;
   BI_PROC.cntx_psh();
   {? BI_PROC.sel_size()=0
   ||
      {? ~{? BI_PROC.f_active()
          || BI_PROC.f_size()
          || BI_PROC.first()
          ?}
      || _obj.REF:=null()
      ?}
   || _obj.REF:=null()
   ?};
   BI_PROC.cntx_pop();

   {? _obj.REF
   || {? exec('isProblemsProc','#bi_msg',BI_PROC.ref())=0
      || _keys:='Z'+_keys
      ?}
   || _keys:='EZ'+_keys
   ?};
   {? _btn3<>''
   ||
      {? exec('is_archived','#b_proc',_b_proc)=0
      || _keys:='H'+_keys+'H'
      ?}
   ?};
   BI_PROC.actions_grayed(cur_win(1,1),_keys);
   {? _ref_update || _obj1:=__INST_1.IPR_DETA; grp_disp(_obj1.TAB,_obj1.WER) ?};
   _obj2:=__INST_1.B_KEYREF; grp_disp(_obj2.TAB,_obj2.WER)
";
_Tab.grp_sel(_wer,BI_PROC,__INST_1.BI_PROC.WER,,_far,,,22,_fb,_fa,,,'maximized_with_title','BI_PROC_WER');

_Tab.grp_splt(_wer,'inst','horizontal','inst_szcz');

_fb:="
   {? grp_empty(BI_PROC,__INST_1.BI_PROC.WER)
   || '#disable'
   || exec('ipr_deta_tab_u','#bi_inst',__INST_1.IPR_DETA.TAB,__INST_1.BI_PROC.REF,__INST_1.B_PROC.TAB.MICRO);
      cur_tab(1,1).first()
   ?}
   ";
_fa:="
   cur_tab(1,1).first()
   ";
_Tab.grp_sel(_wer,__INST_1.IPR_DETA.TAB,__INST_1.IPR_DETA.WER,'Szczegóły uruchomienia'@,,,,,_fb,_fa,,,'maximized');

_fb:="
   {? grp_empty(BI_PROC,__INST_1.BI_PROC.WER)
   || '#disable'
   || exec('b_keyref_tab_f','#bi_inst',__INST_1.B_KEYREF,__INST_1.BI_PROC.REF,null())
   ?}
   ";
_Tab.grp_sel(_wer,__INST_1.B_KEYREF.TAB,__INST_1.B_KEYREF.WER,'Kluczowe rekordy'@,,,,,_fb,,,,'maximized');

:: select
_path:=exec('set_help','#help','ZPR_PRO_INS');
_jTerm:=app_info('web_sesid')='';
{? _jTerm || set_help(_path) || web_set_help(_path) ?};
_Tab.win_sel(_wer);
_Tab.select(,,,,'BI_PROC_WER');

_czysc();
B_PROC.cntx_pop();
~~


\select_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wyświetlanie instancji wszystkich procesów
::   WE: [_a] - INTEGER - [0]/1 - czy wyświetlać tylko procesy własne
::       [_b] - USERS.ref - użytkownik, jeżeli nie podany to OPERATOR.USER
::       [_c] - STRING - 'T'/'N' - czy wyświetlać problemowe instancje czy wszystkie
::       [_d] - INTEGER - czy pokazywać przycisk 'Zakończ'
::       [_e] - INTEGER - czy pokazywać zakładkę 'Rekordy kluczowe'
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_only_mine:=0;
{? var_pres('_a')=type_of(0)
|| _only_mine:=_a
?};
_user:=null();
{? var_pres('_b')=type_of(USERS.ref())
|| _user:=_b
?};
{? _user=null()
|| _user:=OPERATOR.USER
?};
_problems:=~~;
{? var_pres('_c')=type_of('')
|| _problems:=_c
?};
_zakoncz:=1;
{? var_pres('_d')=type_of(0)
|| _zakoncz:=_d
?};
_tab_kluczowe:=1;
{? var_pres('_e')=type_of(0)
|| _tab_kluczowe:=_e
?};

BI_MSG.cntx_psh();
B_PROC.cntx_psh();
BI_PROC.cntx_psh();
B_KEYREF.cntx_psh();
{? _only_mine>0
||
   {? type_of(_problems)=type_of('')
   || BI_PROC.index('PROB_OWN');
      BI_PROC.prefix(REF.FIRMA,_user,_problems)
   || BI_PROC.index('BORN_OWN');
      BI_PROC.prefix(REF.FIRMA,_user)
   ?};
   {? type_of(_problems)=type_of('')
   || BI_MSG.index('PROBOWN2');
      BI_MSG.prefix(REF.FIRMA,_user,_problems)
   || BI_MSG.index('TM_OWN');
      BI_MSG.prefix(REF.FIRMA,_user)
   ?}
||
   {? type_of(_problems)=type_of('')
   || BI_PROC.index('PROB_ALL');
      BI_PROC.prefix(REF.FIRMA,_problems)
   || BI_PROC.index('BORN_ALL');
      BI_PROC.prefix(REF.FIRMA)
   ?};
   {? type_of(_problems)=type_of('')
   || BI_MSG.index('PROBALL2');
      BI_MSG.prefix(REF.FIRMA,_problems)
   || BI_MSG.index('TM_ALL');
      BI_MSG.prefix(REF.FIRMA)
   ?}
?};


_czysc:="
   VAR_DEL.delete('__INST_1')
";
_czysc();


__INST_1:=obj_new('BI_PROC','IPR_DETA','B_KEYREF','ONLY_MINE');
__INST_1.BI_PROC:=obj_new('TAB','REF','WER','BTN1','BTN2','BTN3','PREV');
__INST_1.BI_PROC.REF:=null();
__INST_1.BI_PROC.BTN1:='';
__INST_1.BI_PROC.BTN2:='';
__INST_1.BI_PROC.BTN3:='';
__INST_1.IPR_DETA:=obj_new('TAB','WER');
__INST_1.B_KEYREF:=obj_new('TAB','WER','LAST');
__INST_1.B_KEYREF.LAST:=null();
__INST_1.ONLY_MINE:=_only_mine;

:: tabela procesów
::exec('b_proc_tab','#bi_inst',__INST_1.B_PROC);

:: okna procesów
::exec('b_proc_wer','#bi_inst',__INST_1.B_PROC);

:: tabela instancji procesFu
__INST_1.BI_PROC.TAB:=BI_PROC;

:: okno instacji procesu
exec('bi_proc_wer','#bi_inst',__INST_1.BI_PROC,,1,1,1);

:: tabela szczegółów uruchomienia
exec('ipr_deta_tab','#bi_inst',__INST_1.IPR_DETA);

:: okno szczegółów uruchomienia
exec('ipr_deta_wer','#bi_inst',__INST_1.IPR_DETA,_zakoncz);

:: tabela kluczowych rekordów instancji procesu
__INST_1.B_KEYREF.TAB:=B_KEYREF;

:: okno kluczowych rekordów instancji procesu
exec('b_keyref_wer2','#bi_inst',__INST_1.B_KEYREF);

:: okno grupowe
_Tab:=__INST_1.BI_PROC.TAB;

_grpbefore:="
   _obj:=__INST_1.BI_PROC;
   grp_disp(_obj.TAB,_obj.WER,1);
   grp_disp(BI_MSG,'WER_ALL',1);
   ~~
";

_wer:=_Tab.grp_make('Instancje'@,_grpbefore,'bi_inst_sel_all');
::_far:="
::   _obj:=__INST_1.B_PROC;
::   _Tab:=_obj.TAB;
::   _ref:=exec('FindAndGet','#table',B_PROC,_Tab.B_PROC,,,null());
::   _ref_update:=_obj.REF<>_ref;
::   _obj.REF:=_ref;
::   _obj1:=__INST_1.BI_PROC; grp_disp(_obj1.TAB,_obj1.WER,1);
::   {? _ref_update || _obj2:=__INST_1.IPR_DETA; grp_disp(_obj2.TAB,_obj2.WER) ?};
::   _obj3:=__INST_1.B_KEYREF; grp_disp(_obj3.TAB,_obj3.WER)
::   ";
::_Tab.prefix('N');

::_base_win:=0;
::{? _Tab.first()
::|| _base_win:=1;
::   _before:="
::      cur_tab(1,1).prefix('N');
::      cur_tab(1,1).first();
::      _obj:=__INST_1.BI_PROC;
::      _tab:=_obj.TAB;
::      _wer:=_obj.WER;
::      _tab.win_sel(_wer);
::      _tab.hdr_sel();
::      _tab.hdr_sel(' procesów'@);
::      ~~
::   ";
::   _Tab.grp_sel(_wer,,__INST_1.B_PROC.WERN,'Procesy'@,_far,,,,_before,,,,'maximized')
::?};
::_Tab.prefix('T');
::{? _Tab.first() | _base_win=0
::|| _before:="
::      cur_tab(1,1).prefix('T');
::      cur_tab(1,1).first();
::      _obj:=__INST_1.BI_PROC;
::      _tab:=_obj.TAB;
::      _wer:=_obj.WER;
::      _tab.win_sel(_wer);
::      _tab.hdr_sel();
::      _tab.hdr_sel(' poza procesami'@);
::      ~~
::   ";
::   _Tab.grp_sel(_wer,,__INST_1.B_PROC.WERT,'Poza procesami'@,_far,,,,_before,,,,'maximized')
::?};
::
::_Tab.grp_splt(_wer,,'vertical','inst');

_fb:="";
_fa:="";
_far:="
   _obj:=__INST_1.BI_PROC;
   _Tab:=_obj.TAB;
   _btn1:=_obj.BTN1;
   _btn2:=_obj.BTN2;
   _btn3:=_obj.BTN3;
   _keys:=':';

   _ref:=BI_PROC.ref();
   _ref_update:=_obj.REF<>_ref;
   _obj.REF:=_ref;
   BI_PROC.cntx_psh();
   {? BI_PROC.sel_size()=0
   ||
      {? ~{? BI_PROC.f_active()
          || BI_PROC.f_size()
          || BI_PROC.first()
          ?}
      || _obj.REF:=null()
      ?}
   || _obj.REF:=null()
   ?};
   BI_PROC.cntx_pop();

   {? _obj.REF
   || {? exec('isProblemsProc','#bi_msg',BI_PROC.ref())=0
      || _keys:='Z'+_keys
      ?}
   || _keys:='EZ'+_keys
   ?};
   {? _btn3<>''
   ||
      {? exec('FindInSet','#table','BI_ARCH','B_PROC',B_PROC.ref(),REF.FIRMA,,,'T')=null()
      || _keys:='H'+_keys
      ?}
   ?};
   BI_PROC.actions_grayed(cur_win(1,1),_keys);
   {? _ref_update || _obj1:=__INST_1.IPR_DETA; grp_disp(_obj1.TAB,_obj1.WER) ?};
::   _obj2:=__INST_1.B_KEYREF; grp_disp(_obj2.TAB,_obj2.WER);
   ~~
";
_Tab.grp_sel(_wer,BI_PROC,__INST_1.BI_PROC.WER,'Instancje procesów'@,_far,,,22,_fb,_fa,,,'maximized');

_Tab.tab_splt(_wer,'tab0','horizontal','inst_szcz');

_fb:="
   {? grp_empty(BI_PROC,__INST_1.BI_PROC.WER)=0
   || exec('ipr_deta_tab_u','#bi_inst',__INST_1.IPR_DETA.TAB,__INST_1.BI_PROC.REF,'N');
      cur_tab(1,1).first()
   ?}
   ";
_fa:="
   cur_tab(1,1).first()
   ";
_Tab.grp_sel(_wer,__INST_1.IPR_DETA.TAB,__INST_1.IPR_DETA.WER,,,,,,_fb,_fa,,,'maximized_with_title');

_far:="
   exec('refreshBi_msg','#bi_msg')
";
_fb:="";
_fa:="

";
_Tab.grp_sel(_wer,BI_MSG,'WER_ALL','Zgłoszone problemy',_far,,,22,_fb,_fa,,,'maximized');

{? _tab_kluczowe>0
||
   B_KEYREF.index('UID_REF');
   B_KEYREF.prefix();

   _fb:="

      BI_PREL.cntx_psh();
      B_PREL.cntx_psh();
      B_PROC.cntx_psh();

      {? __INST_1.B_KEYREF.LAST<>null()
      ||  {? B_KEYREF.f_active()>0
          || B_KEYREF.f_seek(__INST_1.B_KEYREF.LAST)
          || B_KEYREF.seek(__INST_1.B_KEYREF.LAST)
          ?}
      ?};
      ~~
   ";

   _fa:="
      B_PROC.cntx_pop();
      B_PREL.cntx_pop();
      BI_PREL.cntx_pop();

      _bi_proc:=B_KEYREF.BI_PROC;

      {? _bi_proc<>null()
      || {? BI_PROC.f_active()>0
         || BI_PROC.f_seek(_bi_proc)
         || BI_PROC.seek(_bi_proc)
         ?}
      ?};
      ~~
   ";
   _after_rfr:="
      __INST_1.B_KEYREF.LAST:=__INST_1.B_KEYREF.TAB.ref();
      ~~
   ";
   _Tab.grp_sel(_wer,__INST_1.B_KEYREF.TAB,__INST_1.B_KEYREF.WER,'Rekordy kluczowe'@,_after_rfr,,,,_fb,_fa,,,'maximized')
?};

:: select
_path:=exec('set_help','#help','ZPR_PRO_INS');
_jTerm:=app_info('web_sesid')='';
{? _jTerm || set_help(_path) || web_set_help(_path) ?};
_Tab.win_sel(_wer);
_result:=_Tab.select();

_czysc();
B_PROC.cntx_pop();
BI_PROC.cntx_pop();
BI_MSG.cntx_pop();
B_KEYREF.cntx_pop();
_result


\select1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wyswietla instancje elementow instancji procesu
::   WE: [_a] - BI_PROC.ref()
::       [_b] - BI_PREL.ref()
::----------------------------------------------------------------------------------------------------------------------
_bi_proc:=null();
{? var_pres('_a')=type_of(null())
|| _bi_proc:=_a
|? var_pres('__INST_1')>100
|| _bi_proc:=__INST_1.BI_PROC.REF
?};

_bi_prel:=null();
{? var_pres('_b')=type_of(null())
|| _bi_prel:=_b
?};
BI_MSG.cntx_psh();
BI_PREL.cntx_psh();
BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?};
BI_PROC.index('UID'); BI_PROC.prefix();
{? BI_PROC.seek(_bi_proc)
||
:: Naprawiator błędnego statusu na instancji, która powinna być zakończona, a nie jest z powodu jakiegoś błędu
   {? BI_PROC.BI_STAT<>__Status.ZAKONCZONY & exec('canEndBiProc','#b_proman',_bi_proc)
   || exec('setStatus','#bi_proc',_bi_proc,__Status.ZAKONCZONY)
   ?};

   _czysc2:="VAR_DEL.delete('__INST_2')";
   _czysc2();

   __INST_2:=obj_new('BI_PREL'
                     ,'BI_PORT'
                     ,'BI_PROC'
                     ,'B_KEYREF'
                     ,'BI_CONN'
                     ,'ctr_id'
                     ,'ctr_bpmn'
                     ,'diag_img'
                     ,'buf_inst'
                     ,'diagram'
                     ,'sel_graph'
                     ,'diag_filtered'
                     ,'TAB_NODIAG'
                     ,'WIN_NODIAG');
   __INST_2.BI_PREL:=obj_new('TAB','REF','WER');
   __INST_2.BI_PORT:=obj_new('TAB','WER_IN','WER_INT','WER_OUT');
   __INST_2.B_KEYREF:=obj_new('TAB','WER');
   __INST_2.BI_CONN:=obj_new('TAB','WER_FROM','WER_TO');
   __INST_2.BI_PROC:=_bi_proc;
   __INST_2.ctr_id:='bi_proc_diag';
   __INST_2.ctr_bpmn:='26lcg6ki980el55ci24jmicjdcdch';
   __INST_2.diag_img:='';
   __INST_2.buf_inst:=exec('instance_buffer','#b_bpmn');

   BI_PREL.cntx_psh();
   BI_PREL.index('TM_BORN');
   BI_PREL.prefix(_bi_proc);
   __INST_2.diagram:=1;
   __INST_2.sel_graph:=1;
   {? exec('interm','#system')
   || __INST_2.diagram:=0;
      __INST_2.sel_graph:=0
   |? BI_PREL.size()>exec('get','#params',100903,type_of(0))
   || __INST_2.diagram:=0;
      __INST_2.sel_graph:=0
   ?};
   BI_PREL.cntx_pop();

   __INST_2.diag_filtered:=0;

:: tabela instancji elementow
   exec('bi_prel_tab','#bi_inst',__INST_2.BI_PREL,_bi_proc);

:: okno elementow procesu
   exec('bi_prel_wer','#bi_inst',__INST_2.BI_PREL);

:: tabela parametrow instancji elementu
   __INST_2.BI_PORT.TAB:=BI_PORT;

:: okna parametrow elementu
   exec('bi_port_wer_in','#bi_inst',__INST_2.BI_PORT);
   exec('bi_port_wer_int','#bi_inst',__INST_2.BI_PORT);
   exec('bi_port_wer_out','#bi_inst',__INST_2.BI_PORT);

:: tabela kluczowych rekordow instancji procesu
   exec('b_keyref_tab','#bi_inst',__INST_2.B_KEYREF);

:: okno kluczowych rekordow instancji procesu
   exec('b_keyref_wer','#bi_inst',__INST_2.B_KEYREF);

:: tabela polaczen instancji elementu
   __INST_2.BI_CONN.TAB:=BI_CONN;
   __INST_2.BI_CONN.WER_FROM:='WER_FROM';
   __INST_2.BI_CONN.WER_TO:='WER_TO';

:: okno grupowe
   _grpbefor:="

      _env:=__INST_2;
      {? _env.diagram>0
      || _opt:=exec('set_options_a','#desktop');
         _opt.FOCUS_RET:=1;
         _elements:=exec('elements_table_inst_ele','#b_design');
         exec('load','#desktop',_env.ctr_id,'#'+_env.ctr_id+'.dsk',,,,,_elements)
      ?};
      ~~
   ";

   _Tab:=__INST_2.BI_PREL.TAB;
   _wer:=_Tab.grp_make('Instancje elementów instancji procesu'@,_grpbefor,'#vnkaklerjepwow');
   _far:="
      _obj:=__INST_2.BI_PREL;
      _Tab:=_obj.TAB;
      {? __INST_2.sel_graph>0
      ||
::       Obsługa zaznaczania dla rekordów po których chodzę
         _buf_inst:=__INST_2.buf_inst;
         _buf_inst.UID:=_Tab.CODE;
         _buf_inst.TYPE:='NODE';
         _buf_inst.SELECTED:='T';
         _args:=exec('args_xml','#xml');
         _args.BUFFER:=_buf_inst;
         _args.PROLOG:=2;
         _args.JAVA_OBJ:='InstanceInfo';
         _args.JAVA_PATH:='org.mcl.czest.xdesk.core.desktopContent.BPMN.modeler.xdb';
         _xml:=exec('buffer2XML','#xml',_args);
         _xml:=gsub(_xml,'\"','\"\"');
         _xml:=gsub(_xml,';','\";\"');
         _xml:=gsub(_xml,'=','\"=\"');

         {? _xml<>''
         || _command:='process_info='+_xml;
            exec('set_value','#desktop','',__INST_2.ctr_id,__INST_2.ctr_bpmn,_command)
         ?}
      ?};

      exec('filter_grayator','#bi_inst');
      __INST_2.BI_PREL.REF:=exec('FindAndGet','#table',BI_PREL,_Tab.REF,,,null());
      _obj1:=__INST_2.BI_PORT; grp_disp(_obj1.TAB,_obj1.WER_IN,,1); grp_disp(_obj1.TAB,_obj1.WER_INT,,1); grp_disp(_obj1.TAB,_obj1.WER_OUT,,1);
      _obj2:=__INST_2.B_KEYREF; grp_disp(_obj2.TAB,_obj2.WER);
      _obj3:=__INST_2.BI_CONN; grp_disp(_obj3.TAB,_obj3.WER_FROM);
      _obj4:=__INST_2.BI_CONN; grp_disp(_obj4.TAB,_obj4.WER_TO);
      _keys:='UG';
      {? exec('is_archivized','#bi_proc',__INST_2.BI_PROC)>0
      || _keys+='PZ'
      ?};
      BI_MSG.actions_grayed('WER_ALL',_keys);
      grp_disp(BI_MSG,'WER_ALL');
      grp_disp(BI_TODO,'WER_VIEW',1);

      {? __INST_2.diagram=0
      || grp_edisp(__INST_2.TAB_NODIAG,__INST_2.WIN_NODIAG)
      ?};
      ~~
      ";
   _fb:="
      BI_PREL.index('PREL');
      BI_PREL.prefix(__INST_2.BI_PROC)
      ";
   _Tab.grp_sel(_wer,,__INST_2.BI_PREL.WER,,_far,,,10,_fb,,,,'maximized');

   _Tab.grp_splt(_wer,,'horizontal','port');

   {? exec('interm','#system')
   ||
::    Brak diagramu na interm
      _tab_nodiag:=tab_tmp(1,
         'VAL','STRING[100]','String'@
      );
      _tab_nodiag.blank();
      _tab_nodiag.VAL:='inTerm';
      _tab_nodiag.add();
      _edit:=_tab_nodiag.mk_edit('',0,'#nodiaginfo');

      _msg:='Funkcja niedostępna w'@;
      _label_limit:=60;
      _labels:=exec('lines','#string',_msg,_label_limit);
      _size:=_labels.size();
      {? _labels.first()
      || _it:=0;
         {!
         |? _it+=1;
            {? _it<_size
            || _tab_nodiag.win_efld(_edit,AH,'H',,,,,,_labels.LINE)
            || _tab_nodiag.win_efld(_edit,_tab_nodiag,'VAL',,,20,0,,_labels.LINE)
            ?};
            _labels.next()
         !}
      ?};
      __INST_2.TAB_NODIAG:=_tab_nodiag;
      __INST_2.WIN_NODIAG:=_edit;
      _Tab.grp_edit(_wer,_tab_nodiag,_edit,'Diagram: %1'@[exec('BI_PROC','#to_string')])


   |? __INST_2.diagram>0
   ||
      _ctrl:=exec('create','#desktop',_Tab,__INST_2.ctr_id,_wer,10,,,'Diagram: %1'@[exec('BI_PROC','#to_string')]);
      _formula:="params_set(params_get());exec('legenda','#bi_inst')";
      _Tab.win_act(_ctrl,0,'Formuła','Legenda'@@,,,_formula,,,,,,'L')
   ||
::    Brak diagramu, zostawiam info
      _tab_nodiag:=tab_tmp(1,
         'VAL','STRING[100]','String'@
      );
      _tab_nodiag.blank();
      _tab_nodiag.VAL:='100903';
      _tab_nodiag.add();
      _edit:=_tab_nodiag.mk_edit('',0,'#nodiaginfo');

      _msg:='Diagram niedostępny. '
            'Liczba elementów procesu większa od: %1, '
            'co określa parametr:'@[$exec('get','#params',100903,type_of(0))];
      _label_limit:=60;
      _labels:=exec('lines','#string',_msg,_label_limit);
      _size:=_labels.size();
      {? _labels.first()
      || _it:=0;
         {!
         |? _it+=1;
            {? _it<_size
            || _tab_nodiag.win_efld(_edit,AH,'H',,,,,,_labels.LINE)
            || _tab_nodiag.win_efld(_edit,_tab_nodiag,'VAL',,,20,0,,_labels.LINE)
            ?};
            _labels.next()
         !}
      ?};
      __INST_2.TAB_NODIAG:=_tab_nodiag;
      __INST_2.WIN_NODIAG:=_edit;
      _Tab.grp_edit(_wer,_tab_nodiag,_edit,'Diagram: %1'@[exec('BI_PROC','#to_string')])
   ?};

   _fb:="
      _obj:=__INST_2.BI_PREL;
      BI_PORT.index('PRELRODZ');
      BI_PORT.prefix(_obj.REF,exec('kind_in','#b_port'),)
      ";
   _Tab.grp_sel(_wer,BI_PORT,__INST_2.BI_PORT.WER_IN,'Parametry %1'@[exec('opis_in','#b_port').MM],,,,,_fb,,,,'maximized');

   _fb:="
      _obj:=__INST_2.BI_PREL;
      BI_PORT.index('PRELRODZ');
      BI_PORT.prefix(_obj.REF,exec('kind_internal','#b_port'),)
      ";
   _Tab.grp_sel(_wer,BI_PORT,__INST_2.BI_PORT.WER_INT,'Parametry %1'[exec('opis_internal','#b_port').MM],,,,,_fb,,,,'maximized');

   _fb:="
      _obj:=__INST_2.BI_PREL;
      BI_PORT.index('PRELRODZ');
      BI_PORT.prefix(_obj.REF,exec('kind_out','#b_port'),)
      ";
   _Tab.grp_sel(_wer,BI_PORT,__INST_2.BI_PORT.WER_OUT,'Parametry %1'[exec('opis_out','#b_port').MM],,,,,_fb,,,,'maximized');

   _fb:="
      exec('b_keyref_tab_f','#bi_inst',__INST_2.B_KEYREF,null(),__INST_2.BI_PREL.REF)
      ";
   _Tab.grp_sel(_wer,__INST_2.B_KEYREF.TAB,__INST_2.B_KEYREF.WER,'Kluczowe rekordy'@,,,,,_fb,,,,'maximized');

   _fb:="
      _obj:=__INST_2.BI_PREL;
      _biProc:=exec('FindAndGet','#table',BI_PREL,$_obj.REF,,\"BI_PREL.BI_PROC\",null());
      _biPrel:=exec('FindAndGet','#table',BI_PREL,$_obj.REF,,,null());
      BI_CONN.index('TO');
      BI_CONN.prefix(_biProc,_biPrel)
      ";
   _Tab.grp_sel(_wer,BI_CONN,'WER_TO','Połączenia wejściowe'@,,,,,_fb,,,,'maximized');

   _fb:="
      _obj:=__INST_2.BI_PREL;
      _biProc:=exec('FindAndGet','#table',BI_PREL,$_obj.REF,,\"BI_PREL.BI_PROC\",null());
      _biPrel:=exec('FindAndGet','#table',BI_PREL,$_obj.REF,,,null());
      BI_CONN.index('FROM');
      BI_CONN.prefix(_biProc,_biPrel)
      ";
   _Tab.grp_sel(_wer,BI_CONN,'WER_FROM','Połączenia wyjściowe'@,,,,,_fb,,,,'maximized');

   VAR_DEL.delete('__instam');
   __instam:=1;
   exec('initIconBiMsg','#bi_msg');
   _far:="
      _obj:=__INST_2.BI_PREL;
      _Tab:=_obj.TAB;
      _Tab.cntx_psh();
      {? _Tab.first()
      || {!
         |? _Tab.STATUS:=exec('FindAndGet','#table',BI_PREL,_Tab.REF,,\"BI_PREL.BI_STAT().NAME\",'');
            _Tab.put(1);
            _Tab.next()
         !}
      ?};
      _Tab.cntx_pop();
      grp_disp(_obj.TAB,_obj.WER);
      ~~
      ";
   _fb:="
      _obj:=__INST_2.BI_PREL;
      _biPrel:=exec('FindAndGet','#table',BI_PREL,$_obj.REF,,,null());
      BI_MSG.index('ACTIVE');
      BI_MSG.prefix(_biPrel)
      ";
   _Tab.grp_sel(_wer,BI_MSG,'WER_ALL','Zgłoszone problemy'@,_far,,,,_fb,,,,'maximized');

   _fb:="
      _result:='';
      _obj:=__INST_2.BI_PREL;
      _biPrel:=exec('FindAndGet','#table',BI_PREL,$_obj.REF,,,null());
      BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
      BI_PREL.index('UID'); BI_PREL.prefix();
      {? BI_PREL.seek(_biPrel)
      ||
         B_PREL.cntx_psh();
         {? BI_PREL.B_PREL().CLASS<>'B_ACTION'
         || _result:='#disable'
         || BI_TODO.index('UNIQUE');
            BI_TODO.prefix(BI_PREL.ref())
         ?};
         B_PREL.cntx_pop()
      ?};
      BI_PREL.cntx_pop();
      _result
      ";
   _Tab.grp_sel(_wer,BI_TODO,'WER_VIEW','Zadania'@,"exec('todo_after_refresh','#bi_todo')",,,,_fb,,,,'maximized');
   exec('initIconBiTodo','#bi_todo','WER_VIEW');

:: select
   _Tab.win_sel(_wer);
   {? _bi_prel=null()
   || _Tab.select()
   || _Tab.blank(1);
      _Tab.REF:=$_bi_prel;
      _Tab.find_rec();
      _Tab.select(,1,5)
   ?};
   VAR_DEL.delete('__instam');

   _czysc2()
?};
BI_PROC.cntx_pop(); BI_PREL.cntx_pop();
BI_MSG.cntx_pop();
~~


\b_proc_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca tabele z wyliczonymi instancjami procesu w podziale na procesy.
::   WE: _a - obiekt - srodowisko select'a
::       _b - B_PROC.ref()
::       _c - B_ACTION.ref()
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_b_proc:=_b;
_b_act:=_c;

_tab:=
   {? _b_proc=null() & _b_act
   || exec('actionstab','#bi_inst',_b_act)
   || ''
   ?};

_sql:='
   select
      B_PROC.MICRO MICRO,
      B_PROC.SYMBOL SYMBOL,
      B_PROC.NAME NAME,
      B_PROC.REFERENCE B_PROC,
      B_PROC.ACCEPTED ACCEPTED,
      B_PROC.ACTIVE ACTIVE,
      B_PROC.FIRMA FIRMA,
      sum(case when BI_PROC.B_PROC is null then 0 else 1 end) SUM_INST
   from
      B_PROC
      left join BI_PROC using(BI_PROC.B_PROC,B_PROC.REFERENCE)
      left join FIRMA using(B_PROC.FIRMA,FIRMA.REFERENCE)
   '
   +
{? _b_proc | _b_act
|| '
   where ((B_PROC.MICRO=\'N\' and B_PROC.FIRMA=:_c) or B_PROC.MICRO=\'T\') and
   '
|| 'where((B_PROC.MICRO=\'N\' and B_PROC.FIRMA=:_c) or B_PROC.MICRO=\'T\')'
?}
   +
{? ~_b_proc & _b_act
|| '
      B_PROC.REFERENCE in (select REF from :_a)
   '
|| ''
?}
   +
{? _b_proc & ~_b_act
|| '
      B_PROC.REFERENCE = :_b
   '
|| ''
?}
   +
   '
   group by
      B_PROC.FIRMA, B_PROC.MICRO, B_PROC.SYMBOL, B_PROC.NAME, B_PROC.REFERENCE, B_PROC.ACCEPTED, B_PROC.ACTIVE
   order by
      MICRO, SYMBOL
   ';
_obj.TAB:=sql(_sql,_tab,_b_proc,REF.FIRMA);
~~


\b_proc_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli _a
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wert:=_obj.WERT:=_Tab.mk_sel('Mikroprocesy'@,'P',,'fjvnerfjadjfkae',,,,,'U');
_Tab.win_fld(_wert,,'SYMBOL',,,15,,,'Symbol'@);
_Tab.win_fld(_wert,,'NAME',,,15,,,'Nazwa'@);
_Tab.win_fld(_wert,,'SUM_INST',,,10,0,,'Il. inst.'@);
_Tab.win_act(_wert,,'Szukaj');
_Tab.win_act(_wert,,'Kolejność');

_wern:=_obj.WERN:=_Tab.mk_sel('Procesy'@,'P',,'fjvnerfjadjfkaf',,,,,'U');
_Tab.win_fld(_wern,,'SYMBOL',,,15,,,'Symbol'@);
_Tab.win_fld(_wern,,'NAME',,,15,,,'Nazwa'@);
_Tab.win_fld(_wern,,'SUM_INST',,,10,0,,'Il. inst.'@);
_Tab.win_act(_wern,,'Szukaj');
_Tab.win_act(_wern,,'Kolejność');

~~


\bi_proc_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli BI_PROC
::   WE: _a - uchwyt do obiektu
::       _b - INTEGER - [1]/2 - dostepnosc przyciskow: 1 - wszystkie
::                                                     2 - tylko te dostepne w archiwum
::                                                     3 - wszystkie oprócz podglądu archiwum
::       _c - INTEGER - [0]/1 - czy pokazywać kolumnę z symbolem procesu
::       _d - INTEGER - [0]/1 - czy pokazywać kolumnę z nazwą procesu
::       _e - INTEGER - [0]/1 - czy pokazywać kolumnę z wersja procesu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_btn_mode:=1;
{? var_pres('_b')=type_of(0)
|| _btn_mode:=_b
?};

_proc_sym:=0;
{? var_pres('_c')=type_of(0)
|| _proc_sym:=_c
?};
_proc_name:=0;
{? var_pres('_d')=type_of(0)
|| _proc_name:=_d
?};
_proc_ver:=0;
{? var_pres('_e')=type_of(0)
|| _proc_ver:=_e
?};

_Tab:=_obj.TAB;

_wer:=_obj.WER:=_Tab.mk_sel('Instancje'@,'P',,'aswdfwqwjcbcaww',,,,,'U');
:: _Tab.win_fld(_wer,,'UID',,,20,,,'Identyfikator');
{? _proc_sym>0
|| _Tab.win_fld(_wer,,'B_PROC','SYMBOL',,10,,,'Proces'@)
?};
{? _proc_name>0
|| _Tab.win_fld(_wer,,'B_PROC','NAME',,20,,,'Nazwa procesu'@)
?};
{? _proc_ver>0
|| _Tab.win_fld(_wer,,'B_PROC','VER',,-5,,,'Wersja procesu'@)
?};
_Tab.win_fld(_wer,,'CODE',,,13,,,'Kod instancji'@);
_Tab.win_fld(_wer,,'BI_STAT','NAME',,-14,,,'Status'@);
_Tab.win_fml(_wer,,'BI_STAT','NAME','ICON_BEFORE',"exec('icon','#bi_proc',BI_PROC.ref())");
_Tab.win_fld(_wer,,'PROBLEM',,,-9,,,'Problemy?'@,,'Czy proces ma jakieś zgłoszone problemy? [T/N]'@,2,,"'T'","'N'");
_Tab.win_fld(_wer,,'BORN_D',,,-10,,,'Utworzono'@);
_Tab.win_fld(_wer,,'BORN_T',,,-8,,,'Godzina utworzenia'@);
_Tab.win_fld(_wer,,'START_D',,,-10,,,'Uruchomiono'@);
_Tab.win_fld(_wer,,'START_T',,,-8,,,'Godzina uruchomienia'@);
_Tab.win_fld(_wer,,'STOP_D',,,-10,,,'Zakończono'@);
_Tab.win_fld(_wer,,'STOP_T',,,-8,,,'Godzina zakończenia'@);

_fb:="exec('select1','#bi_inst',BI_PROC.ref())";
_Tab.win_act(_wer,0,'Formuła','Elementy'@@,,,_fb,,,,,,'E');
_obj.BTN1:=_Tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['&Elementy'@],'menu:E');

_fb:="exec('diagram_act','#bi_inst',BI_PROC.ref())";
_Tab.win_act(_wer,0,'Formuła','Dia&gram przebiegu'@@,,,_fb,,,,,,'G');
_Tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['Dia&gram przebiegu'@],'menu:G');

{? _btn_mode<>2
||
   _fb:="exec('select_mega_biproc','#b_design',BI_PROC.ref())";
   _Tab.win_act(_wer,0,'Formuła','&Powiązane procesy'@@,,,_fb,,,,,,'P');
   _Tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['&Powiązane procesy'@],'menu:P');

   _fb:="exec('select','#bi_todo',1)";
   _Tab.win_act(_wer,0,'Formuła','Zgłoszone problemy'@@,,,_fb,,,,,,'Z');
   _obj.BTN2:=_Tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['Zgłoszone problemy'@],'menu:Z');

   {? exec('chk_role','#b__box',OPERATOR.USER,'ZPR_INS_ARCH')
   || _fb:="
         _ile:=exec('instArch','#bi_inst',1);
         {? var_pres('B_PROC',__INST_1)>100
         || __INST_1.B_PROC.TAB.SUM_INST-=_ile;
            __INST_1.B_PROC.TAB.put()
         ?}
      ";
      _Tab.win_act(_wer,0,'Formuła','Przenieś do ar&chiwum'@@,,,_fb,,,1,_fb,,'C');
      _Tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Przenieś do ar&chiwum'@],'menu:C')
   ?}
?};

{? exec('chk_role','#b__box',OPERATOR.USER,'ZPR_INS_DELE')
|| _fb:="

      _can_continue:=1;
      _dialog:=1;
      {? BI_PROC.sel_size()>0
      || _dialog:=0
      ?};

      {? _dialog>0
      || _can_continue:=FUN.ask('Usunąć?'@)
      ?};

      _prev:=null();
      {? _dialog>0
      || BI_PROC.cntx_psh();
         {? BI_PROC.prev() || _prev:=BI_PROC.ref() ?};
         BI_PROC.cntx_pop()
      ?};
      _archive:=exec('is_archivized','#bi_proc',BI_PROC.ref());
      _firma:=BI_PROC.B_PROC().FIRMA;
      _b_proc:=BI_PROC.B_PROC;

      {? _can_continue>0
      || {? exec('delete','#bi_proc',BI_PROC.ref())>0
         || {? var_pres('__INST_1')>100 & var_pres('B_PROC',__INST_1)>100
            || __INST_1.B_PROC.TAB.SUM_INST-=1;
               __INST_1.B_PROC.TAB.put()
            ?};
            {? _prev<>null()
            || BI_PROC.seek(_prev)
            ?};
            {? _archive>0
            || BI_ARCH.cntx_psh();
               BI_ARCH.index('B_PROC');
               BI_ARCH.prefix(_firma,'T',_b_proc);
               {? BI_ARCH.first()
               || {!
                  |? {? _dialog>0
                     || exec('update_counters','#bi_arch')
                     || {? var_pres('__ARCH_BPROC1')>100
                        || __ARCH_BPROC1.BI_ARCH.REFTABLE.add(BI_ARCH.ref())
                        ?}
                     ?};
                     BI_ARCH.next()
                  !}
               ?};
               BI_ARCH.cntx_pop()
            ?}
         ?}
      ?};
      ~~
   ";
   _fb_gr1:="
      _result:=0;
      BI_PROC.cntx_psh();
      {? BI_PROC.next()
      || _prev:=BI_PROC.ref()
      || _prev:=null()
      ?};
      BI_PROC.cntx_pop();
      {? var_pres('__INST_1')>100
      || __INST_1.BI_PROC.PREV:=_prev
      |? var_pres('__ARCH_BPROC1')>100
      || __ARCH_BPROC1.BI_PROC.PREV:=_prev
      ?};

      KOMM.init(250,,'Usuwanie instancji procesu'@);
      {? BI_PROC.sel_size()>0
      || {? FUN.ask('Zaznaczonych instancji: %1. Czy usunąć je wszystkie?'@[$BI_PROC.sel_size()])
         || _result:=1
         ?}
      ?};
      _result
   ";
   _fb_gr2:="
      _prev:=null();
      {? var_pres('__INST_1')>100
      || _prev:=__INST_1.BI_PROC.PREV
      ?};
      {? var_pres('__ARCH_BPROC1')>100
      || {? type_of(__ARCH_BPROC1.BI_PROC.PREV)=type_of(BI_PROC.ref())
         || _prev:=__ARCH_BPROC1.BI_PROC.PREV
         ?};

         _tab:=__ARCH_BPROC1.BI_ARCH.REFTABLE.tab;
         BI_ARCH.cntx_psh();
         BI_ARCH.prefix();
         _tab.prefix();
         {? _tab.first()
         || {!
            |? {? BI_ARCH.seek(_tab.SQL)
               || exec('update_counters','#bi_arch')
               ?};
               _tab.next()
            !}
         ?};
         BI_ARCH.cntx_pop();
         ~~
      ?};
      KOMM.select();
      {? _prev<>null()
      || BI_PROC.seek(_prev)
      ?};
      ~~
   ";
   _Tab.win_act(_wer,0,'Formuła','Usuń'@@,,,_fb,,,1,_fb_gr1,_fb_gr2,'U');
   _Tab.win_btn(_wer,'text=%1,panel=right,align=begin'['&Usuń'@],'menu:U')
?};

_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');

_fb:="
   BI_PROC.B_PROC();
   ~~
";
_Tab.win_act(_wer,,'Rekord',,,,_fb);

_Tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','BI_MSG#01#01')",,,,,,'L');
{? _btn_mode=1
||
   {? exec('chk_role','#b__box',OPERATOR.USER,'ZPR_INS_PRCH') |
      exec('chk_role','#b__box',OPERATOR.USER,'ZPR_INS_ARCH')
   || _fb:="exec('select','#bi_arch',B_PROC.ref())";
      _Tab.win_act(_wer,0,'Formuła','Arc&hiwum'@@,,,_fb,,,,,,'H');
      _Tab.win_act(_wer,1,'Formuła','Arc&hiwum'@@,,,_fb,,,,,,'H');
      _obj.BTN3:=_Tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Arc&hiwum'@],'menu:H')
   ?}
?};
~~


\ipr_deta_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca tabele szczegolow uruchomienia
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB:=tab_tmp(1
   ,'NO'    ,'INTEGER'     ,'Lp.'
   ,'DESC'  ,'STRING[50]'  ,'Opis'
   ,'VAL'   ,'STRING[250]' ,'Wartość');

_add:="
   _Tab:=_a;
   _Tab.NO:=_b;
   _Tab.DESC:=_c;
   _Tab.VAL:=_d;
   _Tab.add()
";

_add(_Tab,1,'Proces:','');
_add(_Tab,2,'Kod instancji:','');
_add(_Tab,3,'Status:','');
_add(_Tab,4,'Utworzono:','');
_add(_Tab,5,'Uruchomiono:','');
_add(_Tab,6,'Termin realizacji:','');
_add(_Tab,7,'Zakończono:','');
_add(_Tab,8,'Planowany czas wykonania:','');
_add(_Tab,9,'Rzeczywisty czas wykonania:','');
_add(_Tab,10,'Czynności:','');
:: _add(_Tab,7,'ID instancji:','');

~~


\ipr_deta_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli szczegolow uruchomienia
::   WE: _a - uchwyt do obiektu
::       _b - INTEGER - 0/1 - czy dodawać przycisk Zakończ
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_btn_zak:=0;
{? var_pres('_b')=type_of(0)
|| _btn_zak:=_b
?};

_Tab:=_obj.TAB;

_wer:=_obj.WER:=_Tab.mk_sel('Szczegóły uruchomienia'@,,,'mnasnclqerkjsdg');
_Tab.win_fld(_wer,,'DESC',,,30,,,'Opis'@);
_Tab.win_fld(_wer,,'VAL',,,70,,,'Wartość'@);
{? _btn_zak>0
||
:: Zakończ
   _fb:="
      sel_exit()
   ";
   _Tab.win_act(_wer,1,'Formuła','&Zakończ'@@,,,_fb,,,,,,'Z');
   _Tab.win_act(_wer,0,'Formuła','&Zakończ'@@,,,_fb,,,,,,'Z');
   _Tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=bottom,align=end'['&Zakończ'@],'menu:Z',,,,,,'noempty');
   ~~
?};

~~


\ipr_deta_tab_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Aktualizacja szczegolow uruchomienia
::   WE: _a - uchwyt do tabeli __INST_1.IPR_DETA.TAB
::       _b - BI_PROC.ref
::       _c - czy mikroproces (T/N)
::----------------------------------------------------------------------------------------------------------------------
_Tab:=_a;
_bi_proc:=_b;
_micro:=_c;

_update:="
   _Tab:=_a;
   {? _Tab.find_key(_b)
   ||
      _Tab.VAL:=_c;
      {? var_pres('_d')=type_of('') || _Tab.DESC:=_d ?};
      _Tab.put()
   ?}
";

{? _bi_proc
||
   _actions:='';
   _comma:='';
   B_CONN.cntx_psh();
   B_PREL.cntx_psh();
   BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
   BI_PREL.index('BISTATUS');
   {! _ii..2
   |!
      _bi_stat:={? _ii=1 || exec('URUCHOMIONA','#bi_stat') || exec('OCZEKUJACA','#bi_stat') ?};
      BI_PREL.prefix(_bi_proc,_bi_stat);
      _loop:=BI_PREL.first();
      {!
      |? _loop
      |!
         {? BI_PREL.B_PREL().CLASS='B_ACTION'
         || _actions+=_comma+BI_PREL.B_PREL().SYMBOL;
            _comma:=','
         ?};
         _loop:=BI_PREL.next()
      !}
   !};
   BI_PREL.cntx_pop();
   B_PREL.cntx_pop();
   B_CONN.cntx_pop();
   _update(_Tab,1,BI_PROC.B_PROC().SYMBOL+' - '+B_PROC.NAME+' '+'wersja: %1'@[B_PROC.VER],{? _micro='T' || 'Czynność:' || 'Proces:' ?});
   _update(_Tab,2,BI_PROC.CODE);
   _status:=BI_PROC.BI_STAT().NAME;
   {? exec('is_archivized','#bi_proc',BI_PROC.ref())
   || _status+=' ('+'w archiwum'@+')'
   |? B_PROC.ACTIVE='N'
   || _status+=' ('+'nieaktywny'@+')'
   ?};
   _update(_Tab,3,_status);
   _update(_Tab,4,tm_form(BI_PROC.TM_BORN)-10);
   _update(_Tab,5,tm_form(BI_PROC.START)-10);
   _update(_Tab,6,{? BI_PROC.PL_END>0 || tm_form(BI_PROC.PL_END)-10 || '' ?});
   _update(_Tab,7,{? BI_PROC.STOP || tm_form(BI_PROC.STOP)-10 || '' ?});
   _update(_Tab,8,exec('to_string','#interval',BI_PROC.B_PROC().TM_PLAN));
   _update(_Tab,9,exec('to_string','#interval',BI_PROC.DURATION));
   _update(_Tab,10,_actions)

::   _update(_Tab,8,BI_PROC.UID)
||
   _update(_Tab,1,'',{? _micro='T' || 'Czynność:' || 'Proces:' ?});
   _update(_Tab,2,'');
   _update(_Tab,3,'');
   _update(_Tab,4,'');
   _update(_Tab,5,'');
   _update(_Tab,6,'');
   _update(_Tab,7,'');
   _update(_Tab,8,'');
   _update(_Tab,9,'')
?};

~~


\b_prel_tab_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PS [17.00]
:: OPIS: Definiuje i wypełnia tabelę tymczasową w oparciu o rekordy tabeli BI_PREL.
::   WE: _a - uchwyt do obiektu z polem 'TAB'
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB:=tab_tmp(1
   ,'CODE'     ,'STRING[13]'  ,'Kod elementu'
   ,'CODE_PRO'     ,'STRING[13]','Kod procesu'
   ,'UID'      ,'STRING[20]'  ,'Identyfikator'
   ,'STATUS'   ,'STRING[100]' ,'Status'
   ,'SYMBOL'   ,'STRING[100]' ,'Symbol'
   ,'B_ELE'    ,'STRING[100]' ,'Element'
   ,'START'    ,'STRING[20]'  ,'Start'
   ,'STOP'     ,'STRING[20]'  ,'Stop'
   ,'BI_STAT'  ,'STRING[16]'  ,'$BI_STAT.ref()'
   ,'REF'      ,'STRING[16]'  ,'$BI_PREL.ref()'
   ,'BI_PROC'  ,'STRING[16]'  ,'$BI_PROC.ref()'
   ,'USER'     ,'STRING[100]' ,'Użytkownik'
   ,'USER_SUB' ,'STRING[100]' ,'Użytkownik (zastępca)'
   ,'LOOP_NUM' ,'INTEGER'     ,'Numer pętli'
   ,'SRC_UID'  ,'STRING[20]'  ,'Identyfikator elementu źródłowego'
   ,'TM_PLAN'  ,'STRING[50]'  ,'Czas wykonywania (planowany)'
   ,'DURATION' ,'STRING[50]'  ,'Czas wykonywania (rzeczywisty)'
   ,'PL_END'   ,'STRING[19]'  ,'Termin realizacji'
   ,'DESC'     ,'STRING[255]' ,'Opis zadania'
   ,'AUTOMAT'  ,'STRING[1]'   ,'Uruchomienie automatyczne'
);

B_PREL.cntx_psh(); BI_PREL.cntx_psh();

{? BI_PREL.first()
|| {!
   |? _Tab.blank();
      _Tab.UID:=BI_PREL.UID;
      _Tab.STATUS:=BI_PREL.BI_STAT().NAME;
      _Tab.SYMBOL:=BI_PREL.B_PREL().SYMBOL;
      _Tab.B_ELE:=B_PREL.B_ELE().SYMBOL;
      {? BI_PREL.START>0
      || _Tab.START:=tm_form(BI_PREL.START)-10
      || _Tab.START:=''
      ?};
      _Tab.STOP:={? BI_PREL.STOP || tm_form(BI_PREL.STOP)-10 || '' ?};
      _Tab.BI_STAT:=$BI_PREL.BI_STAT;
      _Tab.CODE:=BI_PREL.CODE;
      _Tab.CODE_PRO:=BI_PREL.BI_PROC().CODE;
      _Tab.REF:=$BI_PREL.ref();
      _Tab.BI_PROC:=$BI_PREL.BI_PROC;
      _Tab.USER:=BI_PREL.USERS().KOD;
      _Tab.USER_SUB:=BI_PREL.USERS_R().KOD;
      _Tab.DESC:=BI_PREL.DESC;
      _Tab.LOOP_NUM:=BI_PREL.LOOP_NUM;
      _Tab.SRC_UID:=BI_PREL.SRC_UID;
      {? BI_PREL.B_PREL().TM_PLAN>0
      || _Tab.TM_PLAN:=exec('to_string','#interval',BI_PREL.B_PREL().TM_PLAN)
      ?};
      {? BI_PREL.PL_END>0
      || _Tab.PL_END:=exec('to_string','#tm_stamp',BI_PREL.PL_END)
      ?};
      {? BI_PREL.DURATION>0
      || _Tab.DURATION:=exec('to_string','#interval',BI_PREL.DURATION)
      ?};
      _Tab.AUTOMAT:=BI_PREL.AUTOMAT;
      _Tab.add();
      BI_PREL.next()
   !}
?};

B_PREL.cntx_pop(); BI_PREL.cntx_pop();

~~


\b_prel_tab_single
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PS [17.00]
:: OPIS: Definiuje i wypełnia tabele instancji elementow zbudowaną w oparciu o podany element i instancję procesu.
::       W tabeli znajdą się tylko instancje elementu związane z podaną instancją procesu.
::   WE: _a - uchwyt do obiektu z polem 'TAB'
::       _b - B_PREL.ref() - element procesu
::       _c - BI_PROC.ref() - instancja procesu
::      [_d] - BI_STAT.ref() - ograniczenie statusu elementu procesu, domyślnie - brak ograniczenia
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_b_prel:=_b;
_bi_proc:=_c;
{? var_pres('_d')=type_of(SYSLOG.ref())
|| _bi_stat:=_d
|| _bi_stat:=null()
?};

B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('PREL');
{? _bi_stat<>null()
|| BI_PREL.prefix(_bi_proc,_b_prel,_bi_stat)
|| BI_PREL.prefix(_bi_proc,_b_prel)
?};

:: Utworzenie i wypełnienie tabeli
exec('b_prel_tab_create','#bi_inst',_obj);

BI_PREL.cntx_pop();
B_PREL.cntx_pop();

~~


\b_prel_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PS [17.00]
:: OPIS: Definiuje  i wypełnia tabele instancji elementow zbudowaną w oparciu o podany element.
::       W tabeli znajdą się wszystkie instancje danego elementu.
::   WE: _a - uchwyt do obiektu z polem 'TAB'
::       _b - B_PREL.ref() - element procesu
::      [_c] - BI_STAT.ref() - ograniczenie statusu elementu procesu, domyślnie - brak ograniczenia
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_b_prel:=_b;
{? var_pres('_c')=type_of(SYSLOG.ref())
|| _bi_stat:=_c
|| _bi_stat:=null()
?};

B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('PREL3');
{? _bi_stat<>null()
|| BI_PREL.prefix(_b_prel,_bi_stat)
|| BI_PREL.prefix(_b_prel)
?};

:: Utworzenie i wypełnienie tabeli
exec('b_prel_tab_create','#bi_inst',_obj);

BI_PREL.cntx_pop();
B_PREL.cntx_pop();

~~


\b_prel_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PS [17.00]
:: OPIS: Definiuje okno wertowania tabeli instancji elementow procesu
::   WE: _a - uchwyt do obiektu z polem 'TAB' i 'WER'
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_Tab:=_obj.TAB;

_wer:=_obj.WER:=_Tab.mk_sel('Instancje elementów procesu'@,,,'ascvnkqawerejfd',,,,,'U');
_Tab.win_fld(_wer,,'CODE',,,13,,,'Kod elementu'@,,'Kod instancji elementu'@);
_Tab.win_fld(_wer,,'CODE_PRO',,,13,,,'Kod procesu'@,,'Kod instancji procesu'@);
_Tab.win_fld(_wer,,'STATUS',,,12,,,'Status'@,,'Status instancji procesu'@);
_Tab.win_fld(_wer,,'SYMBOL',,,20,,,'Symbol'@,,'Symbol elementu procesu'@);
_Tab.win_fld(_wer,,'B_ELE',,,15,,,'Element'@,,'Typ elementu procesu, lub kod czynności'@);
_Tab.win_fld(_wer,,'START',,,17,,,'Start'@,,'Data i czas wejścia do elementu'@);
_Tab.win_fld(_wer,,'STOP',,,17,,,'Stop'@,,'Data i czas wyjścia z elementu'@);
_Tab.win_fld(_wer,,'USER',,,9,,,'Wykonawca'@,,'Użytkownik wykonujący element procesu'@);
_Tab.win_fld(_wer,,'USER_SUB',,,9,,,'Zastępowany'@,,'Użytkownik, który pierwotnie miał wykonywać instancję procesu'@);
_Tab.win_fld(_wer,,'DESC',,,50,,,'Opis zadania'@,,'Opis przydzielonego zadania'@);
_Tab.win_fld(_wer,,'TM_PLAN',,,9,,,'Czas (plan)'@,,'Planowany czas wykonania'@);
_Tab.win_fld(_wer,,'DURATION',,,9,,,'Czas (wykonanie)'@,,'Rzeczywisty czas wykonania'@);
~~


\bi_prel_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca tabele instancji elementow
::   WE: _a - uchwyt do obiektu
::       _b - BI_PROC.ref
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_bi_proc:=_b;

_Tab:=_obj.TAB:=tab_tmp(1
   ,'CODE'     ,'STRING[13]'  ,'Kod identyfikacji'
   ,'CODE_PRO' ,'STRING[13]'  ,'Kod instancji procesu'
   ,'UID'      ,'STRING[20]'  ,'Identyfikator'
   ,'STATUS'   ,'STRING[100]' ,'Status'
   ,'SYMBOL'   ,'STRING[100]' ,'Symbol'
   ,'B_ELE'    ,'STRING[100]' ,'Element'
   ,'BE_START' ,'STRING[1]'   ,'Element startowy'
   ,'START'    ,'STRING[20]'  ,'Start'
   ,'STOP'     ,'STRING[20]'  ,'Stop'
   ,'BI_STAT'  ,'STRING[16]'  ,'$BI_STAT.ref()'
   ,'REF'      ,'STRING[16]'  ,'$BI_PREL.ref()'
   ,'BI_PROC'  ,'STRING[16]'  ,'$BI_PROC.ref()'
   ,'USER'     ,'STRING[100]' ,'Użytkownik'
   ,'LOOP_NUM' ,'INTEGER'     ,'Numer pętli'
   ,'SRC_UID'  ,'STRING[20]'  ,'Identyfikator elementu źródłowego'
   ,'TM_PLAN'  ,'STRING[50]'  ,'Czas wykonywania (planowany)'
   ,'DURATION' ,'STRING[50]'  ,'Czas wykonywania (rzeczywisty)'
   ,'PL_END'   ,'STRING[19]'  ,'Termin realizacji'
   ,'DESC'     ,'STRING[255]' ,'Opis zadania'
   ,'AUTOMAT'  ,'STRING[1]'   ,'Uruchomienie automatyczne'
   ,'B_WORKER' ,'STRING[10]'  ,'Kolejka'
);

B_WORKER.cntx_psh();
B_PREL.cntx_psh();
B_CONN.cntx_psh();
B_CONN.index('TO');
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('PREL');
BI_PREL.prefix(_bi_proc);
_loop:=BI_PREL.first();
{!
|? _loop
|!
   _Tab.blank();
   _Tab.UID:=BI_PREL.UID;
   _Tab.STATUS:=BI_PREL.BI_STAT().NAME;
   _Tab.SYMBOL:=BI_PREL.B_PREL().SYMBOL;
   _Tab.B_ELE:=B_PREL.B_ELE().SYMBOL;
   B_CONN.prefix(B_PREL.B_PROC,BI_PREL.B_PREL);
   _Tab.BE_START:={? B_CONN.first() || 'N' || 'T' ?};
   {? BI_PREL.START>0
   || _Tab.START:=tm_form(BI_PREL.START)-10
   || _Tab.START:=''
   ?};
   _Tab.STOP:={? BI_PREL.STOP || tm_form(BI_PREL.STOP)-10 || '' ?};
   _Tab.BI_STAT:=$BI_PREL.BI_STAT;
   _Tab.CODE:=BI_PREL.CODE;
   _Tab.CODE_PRO:=BI_PREL.BI_PROC().CODE;
   _Tab.REF:=$BI_PREL.ref();
   _Tab.BI_PROC:=$BI_PREL.BI_PROC;
   _Tab.USER:=BI_PREL.USERS().KOD;
   _Tab.DESC:=BI_PREL.DESC;
   _Tab.LOOP_NUM:=BI_PREL.LOOP_NUM;
   _Tab.SRC_UID:=BI_PREL.SRC_UID;
   {? BI_PREL.B_PREL().TM_PLAN>0
   || _Tab.TM_PLAN:=exec('to_string','#interval',BI_PREL.B_PREL().TM_PLAN)
   ?};
   {? BI_PREL.PL_END>0
   || _Tab.PL_END:=exec('to_string','#tm_stamp',BI_PREL.PL_END)
   ?};
   {? BI_PREL.DURATION>0
   || _Tab.DURATION:=exec('to_string','#interval',BI_PREL.DURATION)
   ?};
   _Tab.AUTOMAT:=BI_PREL.AUTOMAT;
   _Tab.B_WORKER:=BI_PREL.B_WORKER().KOD;
   _loop:=_Tab.add() & BI_PREL.next()
!};
B_WORKER.cntx_pop();
BI_PREL.cntx_pop();
B_CONN.cntx_pop();
B_PREL.cntx_pop();
~~


\bi_prel_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli instancji elementow procesu
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wer:=_obj.WER:=_Tab.mk_sel('Instancje elementów procesu'@,,,'ascvnkqawerejfd',,,,,'U');
:: _Tab.win_fld(_wer,,'UID',,,20,,,'Identyfikator');
_Tab.win_fld(_wer,,'CODE_PRO',,,13,,,'Kod procesu'@);
_Tab.win_fld(_wer,,'CODE',,,13,,,'Kod elementu'@);
_Tab.win_fld(_wer,,'STATUS',,,20,,,'Status'@);
_Tab.win_fld(_wer,,'SYMBOL',,,20,,,'Symbol'@);
_Tab.win_fld(_wer,,'B_ELE',,,20,,,'Element'@);
::_Tab.win_fld(_wer,,'BE_START',,,1,,,'Startowa'@);
_Tab.win_fld(_wer,,'START',,,17,,,'Start'@);
_Tab.win_fld(_wer,,'STOP',,,17,,,'Stop'@);
_Tab.win_fld(_wer,,'USER',,,9,,,'Wykonawca'@);
_Tab.win_fld(_wer,,'DESC',,,50,,,'Opis zadania'@);
_Tab.win_fld(_wer,,'TM_PLAN',,,9,,,'Czas (plan)'@);
_Tab.win_fld(_wer,,'DURATION',,,9,,,'Czas (wykonanie)'@);

_formula:="
   _env:=__INST_2;
   _tab:=_env.BI_PREL.TAB;
   {? _tab.f_active()>0
   || _env.diag_filtered:=1;
      exec('set_value','#desktop','',_env.ctr_id,_env.ctr_bpmn,'process_info_revert=true',0);
      exec('refresh_element','#desktop','',_env.ctr_id,_env.ctr_bpmn)
   || FUN.info('Tabela instancji elementów nie posiada aktywnego filtra.'@)
   ?}
";
_Tab.win_act(_wer,,'Formuła','Filtruj diagram'@@,,,_formula,,,,,,'F',,'target=window');
_Tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Filtruj diagram'@],'menu:F');

_formula:="
   _env:=__INST_2;
   _env.diag_filtered:=0;
   _tab:=_env.BI_PREL.TAB;
   exec('set_value','#desktop','',_env.ctr_id,_env.ctr_bpmn,'process_info_revert=true;repaint=true',1)
";
_Tab.win_act(_wer,,'Formuła','Odfiltruj diagram'@@,,,_formula,,,,,,'O',,'target=window');
_Tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Odfiltruj diagram'@],'menu:O');

_Tab.win_act(_wer,,'Menu','Fu&nkcje'@@,,,,,,,,,'N');

_formula:="
   _env:=__INST_2;
   _tab:=_env.BI_PREL.TAB;
   _class:=exec('FindAndGet','#table',BI_PREL,_tab.REF,,\"BI_PREL.B_PREL().CLASS\",'');
   {? _class<>'B_EVENT' & _class<>'B_GATE'
   || FUN.info('Nie obsługiwany element procesu (%1).'@[_class]);
      return()
   ?};
   {? FUN.ask(
         {? _class='B_EVENT'
         || 'Czy uruchomić wskazane zdarzenie?'@
         || 'Czy uruchomić wskazaną bramę?'@
         ?}+
         '\n\n'+
         'Uwaga: zostaną uruchomione również kolejne elementy procesu.'@
      )
   || _bi_prel:=exec('FindAndGet','#table',BI_PREL,_tab.REF);
      B_HARM.cntx_psh();
      B_HARM.index('BI_PREL');
      B_HARM.prefix(_bi_prel);
      {? B_HARM.first()
      || _force:=FUN.ask(
            'Zdarzenie zostanie automatycznie uruchomione %1 o godzinie %2 przez kolejkę %3.\n\n'
            'Czy mimo tego uruchomić już teraz?'@
            [$B_HARM.DATE,$B_HARM.TIME,B_HARM.B_WORKER().KOD]
         );
         _is_harm:=1
      || _force:=1;
         _is_harm:=0
      ?};
      {? _force
      || _ok:=exec('proMan','#b_proman',_bi_prel,'',,'Proc');
         {? _ok & _is_harm
         || B_HARM.del()
         ?};
         _bi_stat:=exec('obj_ntab_set','#array',,'REF','','NAME','');
         _formula:=\"
            _b.REF:=$BI_PREL.BI_STAT;
            _b.NAME:=BI_PREL.BI_STAT().NAME;
            ~~
         \";
         exec('FindAndGet','#table',BI_PREL,_tab.REF,,_formula,,_bi_stat);
         {? _bi_stat.REF<>_tab.BI_STAT
         || FUN.info(
               'Status elementu w procesie zmienił się z \'\'%1\'\' na \'\'%2\'\'.\n\n'
               'Aby zweryfikować przebieg procesu należy wyjść z okna i ponownie uruchomić funkcję \'\'%3\'\''@
               [_tab.STATUS,_bi_stat.NAME,'Elementy'@]
            );
            _tab.BI_STAT:=_bi_stat.REF;
            _tab.STATUS:=_bi_stat.NAME;
            _tab.put()
         || FUN.info('Status elementu procesu nie zmienił się.'@)
         ?}
      ?};
      B_HARM.cntx_pop()
   ?};
   ~~
";
_Tab.win_act(_wer,,'Formuła','Uruchom'@@,'#N',,_formula,,,,,,'U');

_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');
_Tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','BI_MSG#01')",,,,,,'L',,'target=window');
_Tab.win_fml(_wer,,'STATUS',,'ICON_BEFORE',"
         _bi_prel:=exec('FindAndGet','#table',BI_PREL,cur_tab(1,1).REF);
         _bi_msg:=exec('FindInSet','#table','BI_MSG','BI_PREL',_bi_prel);
         {? _bi_msg<>null()
         || _buffer:=exec('buffer','#bi_msg');
            _buffer.cntx_get(_bi_msg);
            {? exec('statEndBiPrel','#bi_msg',exec('FindAndGet','#table',BI_MSG,$_bi_msg,,\"BI_MSG.STAT_ANS\"),1)
            || 'xwin16.png:2'
            |? _buffer.ACTIVE='N' & _buffer.STAT_ANS=exec('RETURN','#bi_stat')
            || 'xwin16.png:38'
            |? _buffer.KIND='T'
            || 'xwin16.png:3'
            |? _buffer.KIND<>'T'
            || 'xwin16.png:4'
            ?}
         || ''
         ?}
     ");
~~


\bi_port_wer_in
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli parametrow wejsciowych instancji elementu instacji procesu
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wer:=_obj.WER_IN:=_Tab.mk_sel('Parametr'@,'P',,'qadfeaejovlwpoq',,,,,'U');
_Tab.win_fld(_wer,,'B_PORT','SYMBOL',,20,,,'Symbol'@);
_Tab.win_fld(_wer,,'B_PORT','NAME',,20,,,'Nazwa'@);
_Tab.win_fld(_wer,,'VALUE',,,50,,,'Wartość'@);
_Tab.win_fld(_wer,BPMN,'VALUE',,,50,,,'Wartość opisowa'@);
_Tab.win_fld(_wer,,'SOURCE','CODE',,20,,,'Skąd pobrano?'@);
_formula:="
   {? cur_tab(1,1).BI_BLOB<>null()
   || exec('edit','#bi_blob',cur_tab(1,1).BI_BLOB,0)
   || FUN.info('Brak załączników do wyświetlenia'@)
   ?}
";
_Tab.win_act(_wer,,'Formuła','Załączniki'@@,,,_formula,,,,,,'Z');
_Tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Załączniki'@],'menu:Z');
_formula:="
   _last_draw:=_a;
   {? _last_draw>0
   || _grayed:=':';
      BI_BLOP.cntx_psh();
      {? BI_PORT.BI_BLOB=null()
      || _grayed:='Z'+_grayed
      ||
::       Jeśli jest BI_BLOB to sprawdzam czy ma BI_BLOPy. Jeśli nie to wyszarzam
::       akcję załączniki, bo i tak nic nie pokaże
         BI_BLOP.index('BI_BLOB');
         BI_BLOP.prefix(BI_PORT.BI_BLOB);
         {? BI_BLOP.first()=0
         || _grayed:='Z'+_grayed
         ?}
      ?};
      BI_BLOP.cntx_pop();
      cur_tab(1,1).actions_grayed(cur_win(1,1),_grayed)
   ?};
   ~~
";
_Tab.win_act(_wer,,'Rekord',,,,_formula);
_formula:="
   _Tab:=cur_tab(1,1);
   _red:=_Tab.mk_edit('Parametr'@,,'redparamprocin');
   _Tab.win_esep(_red,'Port'@);
   _Tab.win_efld(_red,,'B_PORT','SYMBOL',,47,,,'Symbol'@);
   _Tab.win_efld(_red,,'B_PORT','NAME',,47,,,'Nazwa'@);
   _Tab.win_esep(_red,'Wartość'@);
   _Tab.win_efld(_red,,'VALUE',,,50,,,'Wartość'@);
   _Tab.win_efld(_red,BPMN,'VALUE',,,50,,,'Wartość opisowa'@);
   _Tab.win_efld(_red,,'SYS_MEMO',,,50,-5,,'Notatka'@);
   _Tab.win_efld(_red,,'SOURCE','CODE',,47,,,'Skąd pobrano?'@);
   _Tab.win_edit(_red);
   _Tab.display()
";
_Tab.win_act(_wer,,'Wyświetl',,,,_formula);
_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');

~~


\bi_port_wer_int
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli parametrow wewnętrznych instancji elementu instacji procesu
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wer:=_obj.WER_INT:=_Tab.mk_sel('Parametr'@,'P',,'qadfeaejovlwpoq',,,,,'U');
_Tab.win_fld(_wer,,'B_PORT','SYMBOL',,20,,,'Symbol'@);
_Tab.win_fld(_wer,,'B_PORT','NAME',,20,,,'Nazwa'@);
_Tab.win_fld(_wer,,'VALUE',,,50,,,'Wartość'@);
_Tab.win_fld(_wer,BPMN,'VALUE',,,50,,,'Wartość opisowa'@);
_formula:="
   _Tab:=cur_tab(1,1);
   _red:=_Tab.mk_edit('Parametr'@,,'redparamprocint');
   _Tab.win_esep(_red,'Port'@);
   _Tab.win_efld(_red,,'B_PORT','SYMBOL',,47,,,'Symbol'@);
   _Tab.win_efld(_red,,'B_PORT','NAME',,47,,,'Nazwa'@);
   _Tab.win_esep(_red,'Wartość'@);
   _Tab.win_efld(_red,,'VALUE',,,50,,,'Wartość'@);
   _Tab.win_efld(_red,BPMN,'VALUE',,,50,,,'Wartość opisowa'@);
   _Tab.win_efld(_red,,'SYS_MEMO',,,50,-5,,'Notatka'@);
   _Tab.win_edit(_red);
   _Tab.display()
";
_Tab.win_act(_wer,,'Wyświetl',,,,_formula);
_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');

~~


\bi_port_wer_out
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli parametrow wyjściowych instancji elementu instacji procesu
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wer:=_obj.WER_OUT:=_Tab.mk_sel('Parametr'@,'P',,'aadkeklrejfdsa',,,,,'U');
_Tab.win_fld(_wer,,'B_PREL','SYMBOL',,20,,,'Adres'@);
_Tab.win_fld(_wer,,'B_PORT','SYMBOL',,20,,,'Symbol'@);
_Tab.win_fld(_wer,,'B_PORT','NAME',,20,,,'Nazwa'@);
_Tab.win_fld(_wer,,'VALUE',,,50,,,'Wartość'@);
_Tab.win_fld(_wer,BPMN,'VALUE',,,50,,,'Wartość opisowa'@);
_formula:="
   {? cur_tab(1,1).BI_BLOB<>null()
   || exec('edit','#bi_blob',cur_tab(1,1).BI_BLOB,0)
   || FUN.info('Brak załączników do wyświetlenia'@)
   ?}
";
_Tab.win_act(_wer,,'Formuła','Załączniki'@@,,,_formula,,,,,,'Z');
_Tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Załączniki'@],'menu:Z');
_formula:="
   _last_draw:=_a;
   {? _last_draw>0
   || _grayed:=':';
      BI_BLOP.cntx_psh();
      {? BI_PORT.BI_BLOB=null()
      || _grayed:='Z'+_grayed
      ||
::       Jeśli jest BI_BLOB to sprawdzam czy ma BI_BLOPy. Jeśli nie to wyszarzam
::       akcję załączniki, bo i tak nic nie pokaże
         BI_BLOP.index('BI_BLOB');
         BI_BLOP.prefix(BI_PORT.BI_BLOB);
         {? BI_BLOP.first()=0
         || _grayed:='Z'+_grayed
         ?}
      ?};
      BI_BLOP.cntx_pop();
      cur_tab(1,1).actions_grayed(cur_win(1,1),_grayed)
   ?};
   ~~
";
_Tab.win_act(_wer,,'Rekord',,,,_formula);
_formula:="
   _Tab:=cur_tab(1,1);
   _red:=_Tab.mk_edit('Parametr'@,,'redparamprocout');
   _Tab.win_esep(_red,'Port'@);
   _Tab.win_efld(_red,,'B_PREL','SYMBOL',,47,,,'Adres'@);
   _Tab.win_efld(_red,,'B_PORT','SYMBOL',,47,,,'Symbol'@);
   _Tab.win_efld(_red,,'B_PORT','NAME',,47,,,'Nazwa'@);
   _Tab.win_esep(_red,'Wartość'@);
   _Tab.win_efld(_red,,'VALUE',,,50,,,'Wartość'@);
   _Tab.win_efld(_red,BPMN,'VALUE',,,50,,,'Wartość opisowa'@);
   _Tab.win_efld(_red,,'SYS_MEMO',,,50,-5,,'Notatka'@);
   _Tab.win_edit(_red);
   _Tab.display()
";
_Tab.win_act(_wer,,'Wyświetl',,,,_formula);
_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');
~~


\actionstab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca tabele tymczasowa z REF-ami instancji procesow, w ktorych jest wskazany element
::   WE: _a - B_ACTION.ref()
::   WY: tmp_tab
::----------------------------------------------------------------------------------------------------------------------
_b_act:=_a;

_tab:=sql('
   select
      B_PREL.B_PROC as REF
   from B_PREL
   join B_ACTION using(B_PREL.B_ELE,B_ACTION.B_ELE)
   where B_ACTION.REFERENCE=:_a
',_b_act);

_tab


\b_keyref_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca tabele instancji elementow
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB:=tab_tmp(1
   ,'KEY_REF'  ,'STRING[48]'  ,'Reference'
   ,'B_PREL'   ,'STRING[100]' ,'Element');

~~


\b_keyref_tab_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca tabele instancji elementow
::   WE: _a - uchwyt do obiektu
::       _b - BI_PROC.ref
::       _c - BI_PREL.ref
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_bi_proc:=_b;
_bi_prel:=_c;

_Tab:=_obj.TAB;

_Tab.erase();

{? _bi_prel
|| {? exec('check_ref','#bi_arch',_bi_prel)>0
   ||
::    Dla archiwalnego BI_PRELa nic nie zwracam, bo nie ma sensu
      return()
   ?}
||
   {? exec('check_ref','#bi_arch',_bi_proc)>0
   ||
::    Dla archiwalnego BI_PROCa nic nie zwracam, bo nie ma sensu
      return(0)
   ?}
?};


BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
B_PREL.cntx_psh();
B_KEYREF.cntx_psh();

{? _bi_prel
|| B_KEYREF.index('BI_PREL');
   B_KEYREF.prefix(ref_name(_bi_prel),_bi_prel)
|| B_KEYREF.index('BI_PROC');
   B_KEYREF.prefix(ref_name(_bi_proc),_bi_proc)
?};
_loop:=B_KEYREF.first();
{!
|? _loop
|!
   _Tab.KEY_REF:=B_KEYREF.KEY_REF;
   _Tab.B_PREL:=B_KEYREF.BI_PREL().B_PREL().SYMBOL;
   _loop:=_Tab.add() & B_KEYREF.next()
!};
B_KEYREF.cntx_pop();
B_PREL.cntx_pop();
BI_PREL.cntx_pop();

~~


\b_keyref_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania kluczowych rekordow instancji procesu
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wer:=_obj.WER:=_Tab.mk_sel('Kluczowe rekordy'@,,,'lcdfnkeqwlrkejf',,,,,'U');
_Tab.win_fld(_wer,,'KEY_REF',,,48,,,'Reference'@);
_Tab.win_fld(_wer,BPMN,'VALUE',,,50,,,'Wartość opisowa'@);
_Tab.win_fld(_wer,,'B_PREL',,,50,,,'Element procesu'@);
_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');

~~


\b_keyref_wer2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Definiuje okno wertowania kluczowych rekordow instancji procesu
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wer:=_obj.WER:=_Tab.mk_sel('Kluczowe rekordy'@,'P',,'#bkeyrefview',,,,,'U');
_Tab.win_fld(_wer,B_PROC,'SYMBOL',,,-15,,,'Proces'@);
_Tab.win_fld(_wer,B_PROC,'NAME',,,20,,,'Nazwa procesu'@);
_Tab.win_fld(_wer,B_PROC,'VER',,,-7,,,'Wersja procesu'@);
_Tab.win_fld(_wer,,'BI_PROC','CODE',,10,,,'Kod instancji'@);
_Tab.win_fld(_wer,,'KEY_REF',,,-40,,,'Klucz'@);
_Tab.win_fld(_wer,BPMN,'VALUE',,,10,,,'Wartość klucza'@);
_Tab.win_fld(_wer,B_PREL,'SYMBOL',,,10,,,'Element procesu'@);
_Tab.win_fld(_wer,,'BI_PREL','DESC',,-19,,,'Opis na liście zadań'@);

_fb:="
   exec('select1','#bi_inst',B_KEYREF.BI_PROC)
";
_Tab.win_act(_wer,,'Formuła','Elementy'@@,,,_fb,,,,,,'E');
_Tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['&Elementy'@],'menu:E');

_fb:="exec('diagram_act','#bi_inst',B_KEYREF.BI_PROC,B_KEYREF.BI_PREL().B_PREL)";
_Tab.win_act(_wer,0,'Formuła','Dia&gram przebiegu'@@,,,_fb,,,,,,'G');
_Tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['Dia&gram przebiegu'@],'menu:G');

_fb:="

   BI_PREL.use(B_KEYREF.MSK_PREL);
   BI_PROC.use(B_KEYREF.MSK_PROC);
   {? B_KEYREF.BI_PREL<>null()
   || B_KEYREF.BI_PREL()
   || BI_PREL.blank(1)
   ?};
   {? B_KEYREF.BI_PROC<>null()
   || B_KEYREF.BI_PROC()
   || BI_PROC.blank(1)
   ?};
   {? BI_PREL.B_PREL<>null()
   || BI_PREL.B_PREL()
   || B_PREL.blank(1)
   ?};
   {? BI_PROC.B_PROC<>null()
   || BI_PROC.B_PROC()
   || B_PROC.blank(1)
   ?};
   {? _a>0
   || _tab:=cur_tab(1,1);
      _grayed:=':';
      {? B_PROC.MICRO='T'
      || _grayed:='EG'+_grayed
      ?};
      B_KEYREF.actions_grayed(cur_win(1,1),_grayed)
   ?};
   ~~
";

_Tab.win_act(_wer,,'Rekord',,,,_fb);
_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');
~~


\select_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla instancje procesów dla czynności
::       Kontekst wywołania - rekord tabeli B_ACTION
::----------------------------------------------------------------------------------------------------------------------
exec('select','#bi_inst',,B_ACTION.ref());
~~


\select_ele
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyswietla instancje procesow dla czynnosci z poziomu elementow
::       Kontekst wywolania - rekord tabeli B_ELE
::----------------------------------------------------------------------------------------------------------------------
{? B_ELE.B_CHAIN().TABLE='B_ACTION'
||
   B_ACTION.cntx_psh();
   B_ACTION.index('B_ELE');
   B_ACTION.prefix(B_ELE.ref());
   {? B_ACTION.first()
   || exec('select','#bi_inst',,B_ACTION.ref())
   || FUN.error('Brak powiązania elementu z czynnością.'@)
   ?};
   B_ACTION.cntx_pop()
|| FUN.info('Element nie jest czynnością.'@)
?};
~~


\bi_conn_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiuje okno wertowania tabeli powiazan instancji elementu instacji procesu
::   WE: _a - uchwyt do obiektu
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_Tab:=_obj.TAB;

_wer:=_obj.WER:=_Tab.mk_sel('Powiazania'@,'P',,'efsdasdhjkbwejf');
_Tab.win_fld(_wer,BI_Z,'PREL_SYM',,,50,,,'Symbol [w procesie]'@);
_Tab.win_fld(_wer,BI_Z,'ELE_SYM',,,50,,,'Symbol [ogólny]'@);
_fb:="
   BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
   BI_PREL.index('UID'); BI_PREL.prefix();
   B_PREL.cntx_psh();
   B_ELE.cntx_psh();
   _Tab:=__INST_2.BI_PREL.TAB;
   {? $BI_CONN.TO=_Tab.REF
   || BI_Z.PREL_SYM:=BI_CONN.FROM().B_PREL().SYMBOL;
      BI_Z.ELE_SYM:=BI_CONN.FROM().B_PREL().B_ELE().SYMBOL
   || BI_Z.PREL_SYM:=BI_CONN.TO().B_PREL().SYMBOL;
      BI_Z.ELE_SYM:=BI_CONN.TO().B_PREL().B_ELE().SYMBOL
   ?};
   B_ELE.cntx_pop();
   B_PREL.cntx_pop();
   BI_PREL.cntx_pop();
   ~~
";
_Tab.win_act(_wer,,'Rekord',,,,_fb);

~~


\diagram_act_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Rysuje diagram przebiegu procesu graphml dla bieżącego BI_PROC
::----------------------------------------------------------------------------------------------------------------------
:: Tabelka tymczasowa w ktorej bedą odwołania BI_PREL.CODE do node
_node_tab:=tab_tmp(1,
            'CODE','STRING[13]','CODE',
            'NODE','STRING[13]','NODE'
         );

::  Tabelka tymczasowa w ktorej bede pamietal utworzone strzalki
_edge_tab:=tab_tmp(2,
            'SRC','STRING[20]','Źródło strzałki',
            'DST','STRING[20]','Cel strzałki'
         );
_f_name:='#!Tmp\\'+$SYSLOG.tm_stamp()+'.graphml';
plik:=fopen(_f_name, 'Uw');
{? ~plik
||
   FUN.info('Nie można utworzyć pliku test.graphml'@)
||
:: test prolog
   _wiersz:=exec('prolog','#graphml');
   fwrite(plik, _wiersz);

:: schemat
   BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
   BI_PREL.index('TM_BORN');
   BI_PREL.prefix(BI_PROC.ref);
   _i:=-1;
   {? BI_PREL.first()
   || {!
      |?
         _i+=1;
::             Podczytanie B_PREL
               BI_PREL.B_PREL();
               _user:='';
               {? BI_PREL.USERS().KOD<>''
               || _login:=BI_PREL.USERS().KOD;
                  _user:='\nWykonawca: '+_login
               || _user:='\nWykonawca: brak'
               ?};
               _problems:=0;
               {? exec('isProblems','#bi_msg',BI_PREL.ref())<>0
               || _problems:=1;
                  _user_ref:=exec('FindInSet','#table','BI_MSG','BI_PREL',BI_PREL.ref(),,"BI_MSG.USERSERR",,,null());
                  USERS.cntx_psh(); USERS.clear();
                  {? USERS.seek(_user_ref)
                  || _login:=USERS.KOD;
                     _user:='\nZgłosił problem: '+_login
                  ?};
                  USERS.cntx_pop()
               ?};
               _symbol:=B_PREL.SYMBOL;
               _code:=BI_PREL.CODE;

               _label:=_symbol+'\nId: '+_code+_user;

::             Węzły - zdarzenia
               _type:='';
               _category:='';
               _kind:='';
               {? B_PREL.CLASS='B_EVENT'
               ||
                  B_EVENT.cntx_psh();
                  B_EVENT.index('ELEMENT');
                  B_EVENT.prefix(B_PREL.B_ELE);
                  {? B_EVENT.first()
                  || _type:=B_EVENT.TYPE;
                     _category:=B_EVENT.CATEGORY;
                     _kind:=B_EVENT.KIND;
                     _wiersz:=exec('event','#graphml','n0::n'+$_i,_label,_type,_category,_kind,BI_PREL.CODE);
                     fwrite(plik,_wiersz);
                     _node_tab.prefix(BI_PREL.CODE);
                     {? ~_node_tab.first() || _node_tab.CODE:=BI_PREL.CODE;_node_tab.NODE:='n0::n'+$_i;_node_tab.add() ?}

                  ?};
                  B_EVENT.cntx_pop()

::             Węzły - czynności
               |? B_PREL.CLASS='B_ACTION'
               ||
                  _fill1:=exec('color_fill1','#bi_prel',BI_PREL.ref());
                  _fill2:=exec('color_fill1','#bi_prel',BI_PREL.ref());
                  _property_fill:=exec('property_fill','#graphml',_fill1,_fill2);

                  _line:=exec('color_line','#bi_prel',BI_PREL.ref());
                  _property_line:=exec('property_line','#graphml',_line);

                  _wiersz:=exec('action','#graphml','n0::n'+$_i
                                                   ,_label
                                                   ,B_PREL.TYPE
                                                   ,_property_fill
                                                   ,_property_line
                                                   ,B_PREL.ICON
                                                   ,BI_PREL.CODE
                                                   ,B_PREL.AUTOMAT
                                                   ,B_PREL.LOOP);
                  fwrite(plik,_wiersz);
                  _node_tab.prefix(BI_PREL.CODE);
                  {? ~_node_tab.first() || _node_tab.CODE:=BI_PREL.CODE;_node_tab.NODE:='n0::n'+$_i;_node_tab.add() ?}

::             Węzły - bramy
               |? B_PREL.CLASS='B_GATE'
               ||
                  _type:='';
                  _fill1:=exec('color_fill1','#bi_prel',BI_PREL.ref());
                  _fill2:=exec('color_fill1','#bi_prel',BI_PREL.ref());
                  _property_fill:=exec('property_fill','#graphml',_fill1,_fill2);

                  _line:=exec('color_line','#bi_prel',BI_PREL.ref());
                  _property_line:=exec('property_line','#graphml',_line);

                  B_GATE.cntx_psh();
                  B_GATE.index('ELEMENT');
                  B_GATE.prefix(B_PREL.B_ELE);
                  {? B_GATE.first()
                  || _type:=B_GATE.TYPE;
                     _wiersz:=exec('gate','#graphml','n0::n'+$_i,_label,_type,_property_fill,_property_line,BI_PREL.CODE);
                     fwrite(plik,_wiersz);
                     _node_tab.prefix(BI_PREL.CODE);
                     {? ~_node_tab.first() || _node_tab.CODE:=BI_PREL.CODE;_node_tab.NODE:='n0::n'+$_i;_node_tab.add() ?}
                  ?};
                  B_GATE.cntx_pop()

               ?};

         BI_PREL.next()
      !}
   ?};
   BI_PREL.cntx_pop();

:: edge

:: Rysuje scieżki którymi szedł proces strzalki
   _i:=-1;
   _edge_tab.cntx_psh();
   BI_CONN.index('BI_PROC');
   BI_CONN.prefix(BI_PROC.ref);
   {? BI_CONN.first()
   || {!
      |?
         _i+=1;
         _edge_tab.prefix(BI_CONN.FROM().CODE,BI_CONN.TO().CODE);
         {? _edge_tab.size()=0
         ||
            _from:=_to:='';
            _node_tab.prefix(BI_CONN.FROM().CODE);
            {? _node_tab.first || _from:=_node_tab.NODE ?};
            _node_tab.prefix(BI_CONN.TO().CODE);
            {? _node_tab.first || _to:=_node_tab.NODE ?};
            _wiersz:=exec('edge','#graphml','n0::e'+$_i,_from,_to,BI_CONN.B_CONN().NAME,B_CONN.DEFAULT);
            fwrite(plik, _wiersz);

            _edge_tab.blank();
            _edge_tab.SRC:=BI_CONN.FROM().CODE;
            _edge_tab.DST:=BI_CONN.TO().CODE;
            _edge_tab.add()
         ?};
         BI_CONN.next()
      !}
   ?};
   _edge_tab.cntx_pop();


:: Przekazywanie wartosci
   _is_null:=0;
   _param_tab:=tab_tmp(2,
            'DST','STRING[20]','Cel strzałki'@,
            'SRC','STRING[20]','Źródło strzałki'@,
            'BI_PREL','STRING[16]','Ref SQL elementu do ktorego wchodzi parametr'@,
            'SOURCE','STRING[16]','Ref SQL elementu z którego pochodzi parametr'@
         );
   BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
   BI_PORT.index('PRELRODZ');
   BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
   BI_PREL.index('TM_BORN');
   BI_PREL.prefix(BI_PROC.ref);
   BI_CONN.index('TO');
   {? BI_PREL.first()
   || {!
      |?
         BI_PORT.prefix(BI_PREL.ref(),exec('kind_in','#b_port'),);
         {? BI_PORT.first()
         || {!
            |? {? BI_PORT.VALUE<>''
               ||
                  BI_PREL.cntx_psh();
                  _param_tab.prefix(BI_PORT.BI_PREL().CODE,BI_PORT.SOURCE().CODE);
                  {? _param_tab.size()=0
                  ||
                     _param_tab.blank();
                     _param_tab.SRC:=BI_PORT.SOURCE().CODE;
                     _param_tab.DST:=BI_PORT.BI_PREL().CODE;
                     _param_tab.BI_PREL:=$BI_PORT.BI_PREL;
                     _param_tab.SOURCE:=$BI_PORT.SOURCE;
                     _param_tab.add()
                  ?};
                  BI_PREL.cntx_pop()
               ?};
               BI_PORT.next()
            !}
         ?};
         BI_PREL.next()
      !}
   ?};

   BI_PORT.index('SOURCE');
   {? BI_PREL.first()
   || {!
      |?
         _param_tab.prefix(BI_PREL.CODE);
         {? _param_tab.first()
         ||
            _source:=exec('FindAndGet','#table',BI_PREL,_param_tab.SOURCE,,,null());
            _bi_prel:=exec('FindAndGet','#table',BI_PREL,_param_tab.BI_PREL,,,null());

            BI_PREL.cntx_psh();
            {? _source<>null() & _bi_prel<>null()
            ||
               _label:='';

               BI_PORT.prefix(_source,_bi_prel);
               {? BI_PORT.first()
               || _label:='Przechodzących argumentów: '+$BI_PORT.size()+'\n';
                  {!
                  |?
                     {? BI_PORT.VALUE<>'' & BI_PORT.B_PORT().B_TYPE().SYMBOL<>'MEMO'
                     ||
                        _symbol:=gsub(gsub(gsub(BI_PORT.B_PORT().SYMBOL,'<','&lt;'),'>','&gt;'),'&','&amp;');
                        _value:=exec('val2display1','#convert',exec('value','#bi_port'));
                        _value:=gsub(gsub(gsub(_value,'<','&lt;'),'>','&gt;'),'&','&amp;');
                        _label+=_symbol+' :'+_value+'\n'
                     ?};
                     BI_PORT.next()
                  !}
               ?};

               {? _label<>''
               ||
                  _i+=1;

                  _from:=_to:='';
                  _node_tab.prefix(_param_tab.SRC);
                  {? _node_tab.first
                  || _from:=_node_tab.NODE
                  ?};
                  _node_tab.prefix(_param_tab.DST);
                  {? _node_tab.first
                  || _to:=_node_tab.NODE
                  ?};

                  _wiersz:=exec('edge_param','#graphml','n0::e'+$_i,_from,_to,_label);
                  fwrite(plik, _wiersz)
               ?}
            ?};
            BI_PREL.cntx_pop()
         ?};
         BI_PREL.next()
      !}
   ?};

   BI_PORT.cntx_pop();
   BI_PREL.cntx_pop();

:: test epilog
   _wiersz:=exec('epilog','#graphml');
   fwrite(plik, _wiersz);
:: koniec
   fclose(plik)
?};

BI_PROC.bl_put('GRAPHML',_f_name);
~~


\diagram_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Rysuje diagram przebiegu procesu graphml
::   WE: _a -   BI_PROC.ref() - instancja procesu
::       [_b] - B_PREL.ref() - element który zaznaczyć
::----------------------------------------------------------------------------------------------------------------------
_bi_proc:=_a;
_b_prel:=null();
{? var_pres('_b')=type_of(B_PREL.ref())
|| _b_prel:=_b
?};
exec('select4biproc_alt','#b_design',_bi_proc,_b_prel);
''


\ctr_diagram
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Generuje diagram, kopiuje go na terminal lokalny, wczytuje do kontrolki
::       Wywoływane z kontrolki po załadowaniu desktopu
::----------------------------------------------------------------------------------------------------------------------
_env:=__INST_2;

_command:='loading_text=Generowanie diagramu...';
exec('set_value','#desktop','',_env.ctr_id,_env.ctr_bpmn,_command);

_args:=exec('load_args','#b_bpmn');
_args.CTR_ID:=_env.ctr_id;
_args.BPMN_ID:=_env.ctr_bpmn;
::_args.FILEPATH:=_filepath;
_args.EDITABLE:=0;
_args.DO_LAYOUT:=1;
_args.POPUP_MENU:=0;
::_args.TITLE:='Podgląd przebiegu procesu';
_args.B_PROC:=BI_PROC.ref();
exec('diagram_act_gen','#bi_inst');
exec('load_bidiagram','#b_bpmn',_args);
~~


\diagram_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kopiuje diagram widoczny w kontrolce do schowka
::----------------------------------------------------------------------------------------------------------------------
_env:=__INST_2;

exec('clip_set_img','#desktop','',_env.ctr_id,_env.diag_img);
~~


\instArch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Przenosi do archiwum jedną instancję lub zaznaczone instancje
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('archive_a','#bi_arch');

_ile:=0;

_tab:=BI_PROC.sel_aget();
BI_PROC.sel_adel();
BI_PROC.cntx_psh();
{? _tab.first()
|| {? FUN.ask('Czy przenieść do archiwum zaznaczone instancje procesów?\n'
              'Uwaga: do archiwum zostaną przeniesione instancje procesów, które zostały zakończone lub mają zgłoszone problemy/błędy.'@)
   || _bi_proc:=tab_tmp(1,'SQL','STRING[16]','');
      {!
      |? {? (BI_PROC.clear(); BI_PROC.seek(_tab.REF,)) & exec('statArch','#bi_arch')
          & (_bi_proc.clear(); ~_bi_proc.find_key($BI_PROC.ref()))
         || _bi_proc.blank();
            _bi_proc.SQL:=$BI_PROC.ref();
            _bi_proc.add(1)
         ?};
         _tab.next()
      !};
      _bi_proc.clear();
      {? _bi_proc.first()
      || {!
         |? _r_bi_proc:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL);
            _code:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL,,"BI_PROC.CODE");
            _b_proc:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL,,"BI_PROC.B_PROC");
            _firma:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL,,"BI_PROC.B_PROC().FIRMA");
            _params.MASK:=exec('get_mask','#bi_arch',_r_bi_proc,_firma);
            {? _params.MASK<>''
            || _ref:=exec('newBiArchProc','#bi_arch',_params.MASK,_b_proc);
               exec('infoArch','#bi_arch',_ref,_params.TABSTAT);
               _params.BI_PROC:=_r_bi_proc;
               {? exec('archive','#bi_arch',_params) || _ile+=1; exec('actuArch','#bi_arch',_params.TABSTAT,_code) ?}
            ?};
            _bi_proc.next()
         !}
      ?};
      obj_del(_bi_proc);
      FUN.info('Liczba przeniesionych do archiwum instancji procesów: %1.'@[form(_ile,,0,'99')])
   ?}
|? ~exec('statArch','#bi_arch')
|| FUN.info('Nie zakończono instancji procesu.\nArchwizacja instancji procesu niemożliwa.'@)
|? FUN.ask('Czy przenieść daną instancję procesu do archiwum?'@)
|| _b_proc:=BI_PROC.B_PROC;
   _firma:=BI_PROC.B_PROC().FIRMA;
   _params.MASK:=exec('get_mask','#bi_arch',BI_PROC.ref(),_firma);
   {? _params.MASK<>''
   || _ref:=exec('newBiArchProc','#bi_arch',_params.MASK,_b_proc);
      exec('infoArch','#bi_arch',_ref,_params.TABSTAT);
      _params.BI_PROC:=BI_PROC.ref();
      {? exec('archive','#bi_arch',_params) || _ile:=1; exec('actuArch','#bi_arch',_params.TABSTAT) ?}
   ?};
   {? _ile=0
   || FUN.info('Nie udało się przenieść do archiwum wskazanej instancji procesu.'@)
   ?}
?};
BI_PROC.cntx_pop();
exec('clear','#b_grpkey');
_ile


\legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Legenda w oknie prezentującym diagram przebiegu procesu - podgląd szczegółowy
::  TAG: <DESKTOP>
::----------------------------------------------------------------------------------------------------------------------

_ctr_id:=exec('create','#desktop',SYSLOG,'bi_inst_leg',,20,140,'Podgląd przebiegu - legenda');
_win_id:='kontrolka1';
SYSLOG.win_ctr(_ctr_id);
_before:="
            exec('load','#desktop','bi_inst_leg','#bi_inst_leg.dsk',,,,,,0);
            exec('set_value','#desktop','','bi_inst_leg','17i08he0n87nanm72a9ai37cibbd1','load_internal=macro_legenda1.graphml');
            1";

SYSLOG.control(_win_id,'modal=false',_before);
~~


\legenda_alt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Legenda w oknie prezentującym diagram przebiegu procesu - podgląd ala model procesu
::  TAG: <DESKTOP>
::----------------------------------------------------------------------------------------------------------------------

_ctr_id:=exec('create','#desktop',SYSLOG,'bi_inst_leg2',,20,140,'Podgląd przebiegu - legenda');
_win_id:='kontrolka1';
SYSLOG.win_ctr(_ctr_id);
_before:="
            exec('load','#desktop','bi_inst_leg2','#bi_inst_leg.dsk',,,,,,0);
            exec('set_value','#desktop','','bi_inst_leg2','17i08he0n87nanm72a9ai37cibbd1','load_internal=macro_legenda2.graphml');
            1";

SYSLOG.control(_win_id,'modal=false',_before);
~~


\filter_grayator
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Odszarza lub zaszarza akcje związane z filtrowaniem diagramu
::       Dodatkowo wyszarza akcje w menu 'Funkcje'
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=__INST_2;
_tab:=_env.BI_PREL.TAB;
_grayed:='';
{? _tab.f_active()>0 & _env.diagram>0
||
   {? _env.diag_filtered>0
   || _grayed:='F'
   || _grayed:='O'
   ?}
||
:: Filtr nieaktywny
   {? _env.diag_filtered>0
   || _grayed:='F'
   || _grayed:='FO'
   ?}
?};
:: Udostępnienie funkcji 'Uruchom' tylko dla zdarzenia oczekującego albo bramy uruchomionej lub oczekującej
:: (namierzone przypadki 'zawieszonych' elementów)
{? (_tab.BI_STAT=$exec('OCZEKUJACA','#bi_stat')
      & exec('FindAndGet','#table',BI_PREL,_tab.REF,,"BI_PREL.B_PREL().CLASS='B_EVENT'",0)
   ) |
   ((_tab.BI_STAT=$exec('OCZEKUJACA','#bi_stat') | _tab.BI_STAT=$exec('URUCHOMIONA','#bi_stat'))
     & exec('FindAndGet','#table',BI_PREL,_tab.REF,,"BI_PREL.B_PREL().CLASS='B_GATE'",0)
   )
|| ~~
|| _grayed:='N(U)'+_grayed
?};
_tab.actions_grayed(_env.BI_PREL.WER,_grayed);
~~


\bpmn_value_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Obsługa przed wyświetl pola zmiennej BPMN.VALUE - zmiennej do wyświatlania w czytelnej postaci portów i kluczowych rekordów
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_value:=
   {? cur_tab(1,1)=BI_PORT
   || exec('value','#bi_port')
   || {? var_pres('KEY_REF',cur_tab(1,1))>0
      ||
         _ref:=cur_tab(1,1).KEY_REF;
         _ref_tab:=ref_tab(_ref);
         {? var_pres('_ref_tab')<>type_of(~~)
         || exec('FindAndGet','#table',ref_tab(_ref),_ref+16,,,null())
         || ''
         ?}
      ?}
   ?};
BPMN.VALUE:=exec('val2display1','#convert',_value);
''


\select_all_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Akcja Instancje w obrzarze ZPR_PRO
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_own:=0;

_upr_all:=exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODE');
_upr_own:=exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODW');


{? _upr_all>0
|| _own:=0
|? _upr_own>0
|| _own:=1
?};
exec('select_all','#bi_inst',_own,,,0);
''


\copy_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Kopiuje kod instancji wyświetlonej instancji procesu do schowka
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
exec('clip_set_txt','#desktop','',_env.ctr_id,BI_PROC.CODE);
FUN.info('Identyfikator: \'%1\' został skopiowany do schowka.'@[BI_PROC.CODE]);
~~


:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 aa681722576aa78c16ded88dcdab8402665c4e37a58ec5ddd1a1a871a2a04cbca9f5f42cd8d25a26d94c58b3b2d74845560aca1dafadcf3fbdabbe3af59bd8c55d2cde498e35030659149a372058b1a34158255f9b34a285388664af287dc94bc9ca5abf472bfe410c646bcc243d5a3307de39662695d99e108d541312a1855f
