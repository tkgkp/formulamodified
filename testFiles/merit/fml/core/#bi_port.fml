:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #bi_port.fml [17.00]
:: Utworzony: 08.07.2013
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli BI_PORT
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli BI_PORT
::   WY: obj_new()
::----------------------------------------------------------------------------------------------------------------------
exec('BI_PORT','#buffer')


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wyświetla tabelę BI_PORT
::----------------------------------------------------------------------------------------------------------------------
BI_PORT.cntx_psh();
BI_PORT.prefix();
BI_PORT.select();
BI_PORT.cntx_pop()


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Funkcja dodająca wpis do tabeli BI_PORT
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#bi_port')
::   WY:      0 lub 1
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};
_res:=null();

BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
BI_PORT.index('UNIQUE');
BI_PORT.prefix(_buffer.BI_PREL,_buffer.B_PREL,_buffer.B_PORT,_buffer.B_ELE);
{? BI_PORT.first()
|| _buffer.get();
   _res:=1
|| BI_PORT.blank(1);
   _buffer.set();
   {? BI_PORT.add()
   || _buffer.Ref:=BI_PORT.ref();
      _res:=1
   ?}
?};
BI_PORT.cntx_pop();
_res


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kasuje podany rekord tabeli BI_PORT
::   WE: _a - BI_PORT.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
BI_PORT.index('UNIQUE'); BI_PORT.clear();
{? BI_PORT.seek(_ref)
|| _bi_blob:=BI_PORT.BI_BLOB;
   {? BI_PORT.del(1,1)>0
   || _result:=1;
      {? _bi_blob<>null()
      ||
::       Jeżeli BI_PORT usunięty ale były do niego jakieś załączniki to próbuję je również usunąć
::       pod warunkiem że nie ma do nich żadnych odwołań
         exec('delete','#bi_blob',_bi_blob)
      ?}
   || undo();
      _result:=-3
   ?}
|| _result:=0
?};
BI_PORT.cntx_pop();

{? _result<0 || undo() ?};
{? _mydo || end() ?};
_result


\fillPorts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wypełnia tablicę nazwaną portów wejścia/wyjścia dla wskazanej instancji elementu w procesie
::   WE: _a - [REFERENCE] - wskazanie na instancję elementu w procesie
::       _b - [STRING]    - rodzaj danych ('IN' - wejściowy, 'INT' - wewnętrzny, 'OUT' - wyjściowy)
::       _c - [obj_new]   - tablica nazwana z portami
::       _d - [REFERENCE] - adres z którego pobieramy porty (B_PREL.ref())
::       [_e] - menadżer procesu
::       [_f] - 0/1 - wymagany
::   WY: tablica nazwana z portami wejściowymi/wyjściowymi danego elementu wypełniona już danymi
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:={? var_pres('_a')=type_of(null)       || _a || return(~~) ?};
 _rodzaj:={? var_pres('_b')=type_of('')         || _b || return(~~) ?};
  _ports:={? var_pres('_c')=type_of(obj_new(1)) || _c || return(~~) ?};
 _b_prel:={? var_pres('_d')=type_of(null())     || _d || null()     ?};
     _mp:={? var_pres('_e')>100                 || _e || ~~         ?};
_required:={? var_pres('_f')=type_of(0)         || _f || 0          ?};

{? _rodzaj<>'IN' &
   _rodzaj<>'INT' &
   _rodzaj<>'OUT'
|| return(~~)
?};

B_PORT.cntx_psh();
B_TYPE.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
BI_PORT.index('PRELRODZ'); BI_PORT.prefix(_bi_prel,_rodzaj,);
{? BI_PORT.first()
|| _continue:=1;
   {!
   |?
::    Podczytanie B_PORT na początku w celach optymalizacyjnych
      BI_PORT.B_PORT();
      {? BI_PORT.B_PREL={? _b_prel=null() || BI_PORT.BI_PREL().B_PREL || _b_prel ?}
         & (var_pres(B_PORT.SYMBOL,_ports)>=0)
      ||
::       wypełnie odpowiedniego elementu tablicy
         _fml:="_a."+B_PORT.SYMBOL+":=_b";
         {? BI_PORT.VAL_VOID='N' | BI_PORT.VAL_VOID='' & BI_PORT.VALUE<>''
         || ($_fml)(_ports,exec('value','#bi_port'))
         ?};

         _fml:="_a."+B_PORT.SYMBOL;
         {? (_required | B_PORT.REQUIRED='T') & ($_fml)(_ports)=~~
         ||
::          obsługa z nadpisaniem pustego parametru wartością domyślną dla parametrów wymaganych
            _type:=exec('type2num','#b_type',B_PORT.B_TYPE().SYMBOL);
            _default:=exec('empty_value','#var',_type);
            ($_fml)(_ports):=_default
         ?}
      ?};
      _continue & BI_PORT.next()
   !}
?};
B_PORT.cntx_pop();
B_TYPE.cntx_pop();
BI_PORT.cntx_pop();
BI_PREL.cntx_pop();
_ports


\fill_values
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wypełnia wartości argumentów dla wskazanej instancji elementu _b z _a w procesie
::   WE: _a - BI_PREL.ref() - wskazanie na instancję elementu w procesie - źródłowy
::       _b - BI_PREL.ref() - wskazanie na instancję elementu w procesie - docelowy
::       _c - B_CONN.ref() - definicja połączenia elementów _a, _b
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_from:=_a;
_to:=_b;
_b_conn:=_c;

_result:=1;
_can_continue:=1;

B_CONN.cntx_psh();
B_CONN.prefix();
{? B_CONN.seek(_b_conn)
|| _prel_from:=B_CONN.FROM;
   _prel_to:=B_CONN.TO
|| _result:=0;
   _can_continue:=0
?};
B_CONN.cntx_pop();

{? _can_continue
||
   BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
   BI_PREL.index('UID'); BI_PREL.prefix();
   BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
   B_PORT.cntx_psh();

:: Przepisanie argumentów z wyjścia (_from) na wejście (_to)
   B_POCONN.cntx_psh();
   B_POCONN.index('B_CONN');
   B_POCONN.prefix(_b_conn);
   _loop:=B_POCONN.first();
   {? _loop
:: Przepisanie wartości portów wg definicji połączeń parametrów
   || {!
      |? _loop
      |!
::       Odszukuję instancję portu wyjściowego
         BI_PORT.index('UNIQUE');
         BI_PORT.prefix(_from,B_POCONN.PREL_SRC,B_POCONN.FROM);
         {? BI_PORT.first()
         ||
            _source:={? BI_PORT.SOURCE || BI_PORT.SOURCE || BI_PORT.BI_PREL ?};
            _value:=BI_PORT.VALUE;
            _val_void:=BI_PORT.VAL_VOID;
            _bi_blob:=BI_PORT.BI_BLOB;
            _sys_memo:=BI_PORT.memo_txt(,1,'SYS_MEMO');
            _stop:=BI_PORT.SOURCE().STOP;

::          Odszukuję instancję portu wejściowego
            BI_PORT.prefix(_to,B_POCONN.PREL_DST,B_POCONN.TO);
            {? BI_PORT.first()
            || {? BI_PORT.SOURCE=null() | _stop=0 | BI_PORT.SOURCE().STOP<_stop
::             Wypełniamy wartość portu wejściowego jeśli nie była przypisywana lub jeśli jest nowsza
::             _stop=0 oznacza najnowszą wartość i dotyczy aktualnie przetwarzanego elementu
               ||
                  BI_PORT.SOURCE:=_source;
                  BI_PORT.VALUE:=_value;
                  BI_PORT.VAL_VOID:=_val_void;
                  BI_PORT.BI_BLOB:=_bi_blob;
                  {? BI_PORT.put() & _sys_memo<>''
                  || BI_PORT.memo_set(_sys_memo,'SYS_MEMO');
                     BI_PORT.memo_put(,'SYS_MEMO')
                  ?}
               ?}
            ?}
         ?};
         _loop:=B_POCONN.next()
      !}
   ?};
   B_POCONN.cntx_pop();

:: Przepisanie portów wyjściowych pośrednich
   _buffer:=exec('buffer','#bi_port');
   B_PORT.cntx_psh();
   B_PORT.prefix();
   B_PROUTE.cntx_psh();
   B_PROUTE.index('B_CONN');
   B_PROUTE.prefix(_b_conn);
   _loop:=B_PROUTE.first();
   {!
   |? _loop
   |!
      BI_PORT.index('UNIQUE');
      {? B_PROUTE.B_POCONN<>null()
      ||
         B_PROUTE.B_POCONN();
         BI_PORT.prefix(_from,B_POCONN.PREL_SRC,B_POCONN.FROM);
         {? BI_PORT.first()
::       Przejście i zapamiętanie portu źródłowego
         || _buffer.get(1);
            {? BI_PORT.BI_PREL().B_PREL=B_POCONN.PREL_SRC
            || _source:=BI_PORT.BI_PREL;
               _stop:=BI_PORT.BI_PREL().STOP
            || _source:=BI_PORT.SOURCE;
               _stop:=BI_PORT.SOURCE().STOP
            ?};

            BI_PORT.prefix(_to,B_POCONN.PREL_SRC,B_POCONN.FROM);
            {? BI_PORT.first()
::          Port docelowy już istnieje
            || {? BI_PORT.SOURCE & (_stop=0 | BI_PORT.SOURCE().STOP<_stop)
::             Aktualizujemy, jeśli jest nowsza wartość portu wyjściowego pośredniego
::             _stop=0 oznacza najnowszą wartość i dotyczy aktualnie przetwarzanego elementu
::             BI_PORT.SOURCE=null() oznacza, że jest to port wyjściowy czynności wtedy nie aktualizujemy tzn.
::             wartość pozostaje nieokroślona, do ustalenia w czynności
               ||
                  BI_PORT.SOURCE:=_source;
                  BI_PORT.VALUE:=_buffer.VALUE;
                  BI_PORT.VAL_VOID:=_buffer.VAL_VOID;
                  BI_PORT.BI_BLOB:=_buffer.BI_BLOB;
                  {? BI_PORT.put() & _buffer.SYS_MEMO<>''
                  || BI_PORT.memo_set(_buffer.SYS_MEMO,'SYS_MEMO');
                     BI_PORT.memo_put(,'SYS_MEMO')
                  ?}
               ?}
::          Port docelowy zostanie utworzony
            || BI_PORT.prefix();
               _buffer.set();
               BI_PORT.BI_PREL:=_to;
               BI_PORT.SOURCE:=_source;
               {? BI_PORT.add() & _buffer.SYS_MEMO<>''
               || BI_PORT.memo_set(_buffer.SYS_MEMO,'SYS_MEMO');
                  BI_PORT.memo_put(,'SYS_MEMO')
               ?}
            ?}
         ?}
      ?};
      _loop:=B_PROUTE.next()
   !};
   B_PROUTE.cntx_pop();
   B_PORT.cntx_pop();

:: Ustawiam wartości dla parametrów określone na definicji procesu
   B_VALPRT.cntx_psh();
   B_VALPRT.index('UNIK');
   BI_PORT.index('UNIQUE');
   BI_PREL.clear();

   {? BI_PREL.seek(_to)
   ||
      B_PORT.index('B_ELE');
      B_PORT.prefix('T',BI_PREL.B_PREL().B_ELE,'IN',);
      {? B_PORT.first()
      || {!
         |?
::          Sprawdzam czy port ma zdefiniowaną wartość
            B_VALPRT.prefix(BI_PREL.B_PREL,B_PORT.ref());
            {? B_VALPRT.first()
            ||
::             Jest wartość - przypisuję ją do instacji portu
               BI_PORT.prefix(BI_PREL.ref(),BI_PREL.B_PREL,B_PORT.ref());
               {? BI_PORT.first()
               ||
::                Jako źródło wartości wskazuję samego siebie
                  BI_PORT.SOURCE:=BI_PREL.ref();
                  BI_PORT.VALUE:=B_VALPRT.VALUE;
                  BI_PORT.VAL_VOID:={? B_VALPRT.FORMULA='' || 'T' || 'N' ?};
                  BI_PORT.BI_BLOB:=B_VALPRT.BI_BLOB;
                  _sys_memo:=B_VALPRT.memo_txt(,1,'SYS_MEMO');
                  {? BI_PORT.put() & _sys_memo<>''
                  || BI_PORT.memo_set(_sys_memo,'SYS_MEMO');
                     BI_PORT.memo_put(,'SYS_MEMO')
                  ?}
               ?}
            ?};
            B_PORT.next()
         !}
      ?}
   ?};
   B_VALPRT.cntx_pop();
   B_PORT.cntx_pop();
   BI_PORT.cntx_pop();
   BI_PREL.cntx_pop()
?};

_result


\saveToPorts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zapisuje wartości portów dla instancji elementu w procesie
::   WE: _a - [REFERENCE] - wskazanie na instancję elementu w procesie
::       _b - [STRING]    - rodzaj danych ('IN' - wejściowy, 'OUT' - wyjściowy)
::       _c - [obj_new]   - tablica nazwana z portami we/wy
::       _d - [tab_tmp]   - tabela tymczasowa z BLOBami (parametr, blob)
::   WY: wynik operacji 0 lub liczba zapisanych portów
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
 _rodzaj:={? var_pres('_b')=type_of('')   || _b || return(0) ?};
  _ports:={? var_pres('_c')>100           || _c || return(0) ?};
  _blobs:={? var_pres('_d')>100           || _d || return(0) ?};

{? _rodzaj<>exec('kind_in','#b_port') &
   _rodzaj<>exec('kind_internal','#b_port') &
   _rodzaj<>exec('kind_out','#b_port')
|| return(0)
?};
_res:=0;
B_PORT.cntx_psh();
B_TYPE.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
BI_PORT.index('PRELRODZ'); BI_PORT.prefix(_bi_prel,_rodzaj,);
{? BI_PORT.first()
|| {!
   |? {? BI_PORT.B_PORT<>null & BI_PORT.B_PREL=BI_PORT.BI_PREL().B_PREL
      || BI_PORT.B_PORT();
         BI_PORT.VAL_VOID:='N';
         _symbol:=B_PORT.SYMBOL;
         _type_needed:=exec('type2num','#b_type',B_PORT.B_TYPE().SYMBOL);
         _type:=var_pres(_symbol,_ports);
         _table:='';
         {? _type_needed=36 & _type=type_of('') || _type:=36 ?};
         {? _type_needed=33 & (_type=type_of(~~) | _type=type_of(null())) || _type:=33 ?};
         {? _type>0 & _type_needed<>_type
         || FUN.emsg(
               'Błędne przypisanie wartości do parametru (oczekiwany typ %1, przekazany typ %2).'@
               [exec('num2type','#b_type',_type_needed),exec('num2type','#b_type',_type)]
            )

         |? _type=33
         || _fml:="_a."+_symbol;
            {? var_pres(_symbol,_ports)=type_of(~~) |
               (var_pres(_symbol,_ports)=type_of(null()) & ($_fml)(_ports)=null())
            || _val:=exec('add','#bi_blob')
            || _val:=($_fml)(_ports)
            ?};

            {? _val<>null()
            || BI_BLOP.cntx_psh();
               BI_BLOP.index('BI_BLOB');
               BI_BLOP.prefix(_val);
               {? BI_BLOP.first()
               || {!
                  |? BI_BLOP.del()
                  !}
               ?};

               _blobs.prefix(_symbol,_rodzaj,);
               {? _blobs.first()
               || {!
                  |? BI_BLOP.BI_BLOB:=_val;
                     BI_BLOP.BLOB:=_blobs.BLOB;
                     BI_BLOP.USERS:=OPERATOR.USER;
                     {? BI_BLOP.add()
                     || _txt:=_blobs.memo_txt(,1,'DESC');
                        {? _txt<>''
                        || BI_BLOP.memo_set(_txt,'DESC');
                           BI_BLOP.memo_put(,'DESC')
                        ?}
                     ?};
                     _blobs.next()
                  !}
               ?};
               BI_BLOP.cntx_pop();
               exec('update_list','#bi_blob',_val);

               _fml:="_a."+_symbol+":=_b";
               ($_fml)(_ports,_val);

               BI_PORT.VALUE:=$_val;
               BI_PORT.BI_BLOB:=_val;
               {? BI_PORT.put()
               || _res+=1
               ?}
            ?}

         |? _type=36
         ||
            _fml:="_a."+_symbol;
            _val:=($_fml)(_ports);

            BI_PORT.memo_set(_val,'SYS_MEMO');
            {? BI_PORT.memo_put(,'SYS_MEMO')
            || BI_PORT.VALUE:=BI_PORT.memo_txt(,1,'SYS_MEMO');
               {? BI_PORT.put()
               || _res+=1
               ?}
            ?}

         |? _type>=0
         ||
            _fml:="_a."+_symbol;
            _val:=($_fml)(_ports);

            {? type_of(_val)=type_of('')
            || BI_PORT.VALUE:=_val
            |? _type=type_of(null) & type_of(ref_tab(_val))<>type_of(~~)
            || BI_PORT.VALUE:={? do_state()=2 || ~~ || exec('FindAndGet','#table',ref_tab(_val),_val,,"uidref()",'') ?}
            |? _type=type_of(time)
            || BI_PORT.VALUE:=_val$3
            |? _type=type_of(~~)
            || BI_PORT.VALUE:={? _type_needed=type_of(~~) || '~~' || '' ?}; BI_PORT.VAL_VOID:='T'
            |? type_of(_val)=1
            || BI_PORT.VALUE:=form(_val,,,'9.')
            |? type_of(_val)>0
            || BI_PORT.VALUE:=$_val
            ?};

            {? BI_PORT.put()
            || _res+=1
            ?}
         ?}
      ?};
      BI_PORT.next()
   !}
?};
BI_PORT.cntx_pop();
BI_PREL.cntx_pop();
B_TYPE.cntx_pop();
B_PORT.cntx_pop();
_res


\copyPorts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kopiuje porty dla instacji elementu w procesie
::   WE: _a - [REFERENCE] - wskazanie na instację elementu w procesie
::       _b - [REFERENCE] - wskazanie na B_ELE
::       _c - [STRING[3]] - B_PORT.KIND
::----------------------------------------------------------------------------------------------------------------------
 _bi_prel:={? var_pres('_a')=type_of(null)  || _a || return(0) ?};
   _b_ele:={? var_pres('_b')=type_of(null)  || _b || null()    ?};
    _kind:={? var_pres('_c')=type_of('str') || _c || ''        ?};
 _bi_proc:=exec('FindAndGet','#table',BI_PREL,#_bi_prel,ref_name(_bi_prel),"BI_PROC",null());
  _b_conn:={? var_pres('_d')=type_of(null)  || _d || null()    ?};
_b_actele:={? var_pres('_e')=type_of(null)  || _e || null()    ?};

_bufBiPr:=exec('buffer','#bi_prel');
_bufBiPr.cntx_get(_bi_prel);
{? _b_ele=null()
|| _bufBPre:=exec('buffer','#b_prel');
   _bufBPre.cntx_get(_bufBiPr.B_PREL);
   _b_ele:=_bufBPre.B_ELE
?};

_bufBiPo:=exec('buffer','#bi_port');

B_PORT.cntx_psh();
B_PORT.index('UNIK');
B_PORT.prefix(_b_ele,null(),null());
{? B_PORT.first()
|| {!
   |?
      {? _kind='' | _kind=B_PORT.KIND
      || _bufBiPo.BI_PREL:=_bi_prel;
         _bufBiPo.B_PREL:=_bufBiPr.B_PREL;
         _bufBiPo.B_PORT:=B_PORT.ref();
         _bufBiPo.B_ELE:=_b_ele;
         _bufBiPo.BI_PROC:=_bi_proc;
         _bufBiPo.VAL_VOID:='T';
         exec('add','#bi_port',_bufBiPo)
      ?};
      B_PORT.next()
   !}
?};
B_PORT.prefix(null(),_bufBiPr.B_PREL,_b_actele);
{? B_PORT.first()
|| {!
   |?
      {? (_kind='' | _kind=B_PORT.KIND) & _b_actele=B_PORT.B_ACTELE
      || _bufBiPo.BI_PREL:=_bi_prel;
         _bufBiPo.B_PREL:=_bufBiPr.B_PREL;
         _bufBiPo.B_PORT:=B_PORT.ref();
         _bufBiPo.B_ELE:=null();
         _bufBiPo.BI_PROC:=_bi_proc;
         _bufBiPo.VAL_VOID:='T';
         exec('add','#bi_port',_bufBiPo)
      ?};
      B_PORT.next()
   !}
?};
B_PORT.cntx_pop()


\chk_req
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy wymagane porty zostały wypełnione
::   WE: _a - BI_PREL.ref() - element procesu
::       _b - INTEGER - 0/[1] - czy zmieniać od razu status BI_PRELa i dodawać komunikaty
::                              w przypadku błędów
::       _c - INTEGER - 0/[1] - czy wyświetlać dialog o błędzie na ekran
::       _d - INTEGER - 0/[1] - czy kasować rekordy na TODO jeśli parametry nie zostały przekazane
::   WY: 0 - nie wszystkie wymagane porty mają ustawione wartości
::       1 - wszystkie wymagane porty mają ustawione wartości
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;

:: Ponieważ wszystkie parametry wymagane mają od teraz ustawiane wartości domyślne dla danego
:: typu, ta formuła już niepotrzebnie sprawdza to co sprawdzała, ale jej nie usuwam bo się może przydać
return(1);

_chng_state:=1;
{? var_pres('_b')=type_of(0)
|| _chng_state:=_b
?};

_dialog:=1;
{? var_pres('_c')=type_of(0)
|| _dialog:=_c
?};

_del_todo:=1;
{? var_pres('_d')=type_of(0)
|| _del_todo:=_d
?};

_result:=1;
_can_continue:=1;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
B_PREL.cntx_psh();
B_PORT.cntx_psh();
BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
BI_PORT.index('UNIQUE'); BI_PORT.prefix();
{? BI_PREL.seek(_bi_prel)
||
   {? BI_PREL.BI_STAT=exec('BRAK_WEJ','#bi_stat')
   || _result:=0
   ||
::    Iteruje po portach wejsciowych
      B_PORT.index('UNIK');
      B_PORT.prefix(BI_PREL.B_PREL().B_ELE,null(),null(),exec('kind_in','#b_port'),);
      {? B_PORT.first()
      || {!
         |?
            {? B_PORT.REQUIRED='T' & B_PORT.ACTIVE='T'
            ||
::             Sprawdzam czy istnieje instancja portu dla badanego elementu procesu
               BI_PORT.prefix(_bi_prel,BI_PREL.B_PREL,B_PORT.ref());
               {? BI_PORT.first()
               ||
::                Jest instancja portu
::                Sprawdzam czy wartosc zosala ustawiona
                  {? BI_PORT.VALUE=''
                  || _result:=0
                  ?}
               ||
::                Brak instancji portu
                  _result:=0
               ?};

               {? _result=0
               ||
                  {? _chng_state>0
                  ||
::                   Zmieniam status BI_PRELa i BI_PROCa
                     exec('setStatus','#bi_prel',BI_PREL.ref(),exec('BRAK_WEJ','#bi_stat'));
                     exec('setStatus','#bi_proc',BI_PREL.BI_PROC,exec('BRAK_WEJ','#bi_stat'));

::                   Dodaje komunikat do BI_PRELa ze brak argumentu
                     _user:=BI_PREL.USERS;
                     {? _user=null()
                     || _user:=exec('operatorUser','#users')
                     ?};
                     _msg:='Brak wymaganego parametru wejściowego: '+B_PORT.SYMBOL+' - '+B_PORT.NAME;
                     exec('updateBiMsg','#bi_msg',BI_PREL.ref(),'R',_msg,,exec('BRAK_WEJ','#bi_stat'),_user);
                     ~~
                  ?}
               ?}
            ?};
            B_PORT.next()
         !}
      ?}
   ?};

   {? _result=0 & _del_todo>0
   ||
::    Parametry wymagane nie zostaly przekazane - usuwam zapisy na TODO
      exec('prelDel','#bi_todo',_bi_prel)
   ?};

   {? _result=0 & _dialog>0
   || _msg0:='';
      _msg1:='Element procesu: %1 nie został uruchomiony.'@[BI_PREL.B_PREL().SYMBOL];
      _msg2:='Jeden z wymaganych parametrów wejściowych nie został przekazany.'@;
      _msg3:='Szczegóły są dostępne w podglądzie instancji procesu.'@;

      _msg_glued:=exec('form','#string','L',_msg1
                                          ,_msg0
                                          ,_msg2
                                          ,_msg3);
      FUN.error(_msg_glued)
   ?}
?};
BI_PORT.cntx_pop();
B_PORT.cntx_pop();
B_PREL.cntx_pop();
BI_PREL.cntx_pop();
_result


\value
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Zwraca wartość BI_PORT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_type:=exec('FindAndGet','#table',B_PORT,BI_PORT.B_PORT,,"
   exec('FindAndGet','#table',@.B_TYPE,B_PORT.B_TYPE,,\"B_TYPE.SYMBOL\",'')
",'');
_value:=BI_PORT.VALUE;
{? _type='' | _type='VOID' | BI_PORT.VAL_VOID='T'
||
   ~~

|? 1+_type='_' | _type='BLOB'
||
   {? BI_PORT.VAL_VOID='N' & _value=''
   ||
      null()
   ||
      _Tab:=ref_tab(_value);
      {? type_of(_Tab)=type_of(~~) | do_state()=2 || ~~ || exec('FindAndGet','#table',_Tab,_value) ?}
   ?}

|? _type='STRING'
||
   _value

|? _type='DATE'
||
   date(#(4+_value),#(5-_value-3),#(_value+2))

|? _type='TIME'
||
   time(#(2+_value),#(3-_value-3),#(_value+2))

|? _type='NUMBER'
||
   #_value

|? _type='MEMO'
||
   BI_PORT.memo_txt(,1,'SYS_MEMO')
?}

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 7ffe1a3abbf624851ef1a53f6dcf5d24c19ba9ee4d887329f52fec66702e7d5629562625c0360752c54778b1c03acd5349864e52b35e85bfa46321e5a3bffec19f42cf0b22083509ddc94cc87c4292bd526080cf202e6d083031b53aeff0b324c86b5f69ea487b75edf745a23e8b652e0c9d352f2f7537628362a1a855946e2c
