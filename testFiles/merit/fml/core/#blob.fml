:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #blob.fml [17.00]
:: Utworzony: 17.12.2014
:: Autor: AK
::======================================================================================================================
:: Zawartość: Uniwersalna obsługa blobów
::======================================================================================================================


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2010]
:: OPIS: Selekcja tabeli z BLOBami systemowymi
::  OLD: \select/skid_blb.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_BLB.clear();

_wer:=SKID_BLB.mk_sel('Bloby systemowe'@,'N',0,'sysblob',,,20,,'U');
SKID_BLB.win_fld(_wer,,'ID',,,,,,'Identyfikator'@);
SKID_BLB.win_fld(_wer,,'BLOB',,,30,,,'Zawartość'@);
{? sec_superuser()>0
|| SKID_BLB.win_act(_wer,0,'Dołącz');
   SKID_BLB.win_act(_wer,1,'Dołącz');
   SKID_BLB.win_act(_wer,,'Popraw');
   SKID_BLB.win_act(_wer,,'Usuń');
   SKID_BLB.win_act(_wer,,'Wyświetl',,,,"exec('display','#blob')")
?};
SKID_BLB.win_sel(_wer);

SKID_BLB.select();
~~


\display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2010]
:: OPIS: Wyświetla informacje o BLOBie
::   WE: [_a] - SKID_BLB.ref lub bieżący rekord
::  OLD: \display/skid_blb.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SKID_BLB.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

SKID_BLB.cntx_psh();
{? _ref<>null()
|| SKID_BLB.prefix();
   {? SKID_BLB.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| FUN.info(
      'Plik: %1\n\n'
      'Data utworzenia: %2\n'
      'Czas utworzenia: %3\n\n'
      'Data modyfikacji: %4\n'
      'Czas modyfikacji: %5\n\n'
      'Rozmiar: %6'
      [  SKID_BLB.bl_info('BLOB','NAME'),
         $SKID_BLB.bl_info('BLOB','CREAT_DATE'),
         $SKID_BLB.bl_info('BLOB','CREAT_TIME'),
         $SKID_BLB.bl_info('BLOB','MODIFY_DATE'),
         $SKID_BLB.bl_info('BLOB','MODIFY_TIME'),
         $SKID_BLB.bl_info('BLOB','SIZE')
      ]
   )
?};
SKID_BLB.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2010]
:: OPIS: Dodaje do tabeli SKID_BLB plik lub go aktualizuje, o ile został zmodyfikowany
::   WE: _a - nazwa pliku (zawsze bez ścieżki dostępu)
::       [_b] - czy NIE wyświetlać komunikatu błędu (<>0) - domyślnie wyświetlać
::       [_c] - pth - wyszukiwanie pliku według deklaracji ścieżek (domyślnie=1), czy w folderze @!Tmp (0)
::       [_d] - INTEGER - 0/[1] - czy dla plików nie szukanych wg pth dodawać do ścieżki @!Tmp
::       [_e] - STRING - ID pod którym zostanie zapisany plik w tabeli
::   WY: 0 - porażka - nie udało się dodać pliku do SKID_BLB
::       1 - sukces  - plik został umieszczony w SKID_BLB
::       2 - sukces  - plik został usunięty ze SKID_BLB, ponieważ usunięto go z systemu plików
::  OLD: \add/skid_blb.fml
:: ~OST: INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of(0) || _no_err:=_b || _no_err:=0 ?};
{? var_pres('_c')=type_of(0) || _pth:=_c || _pth:=1 ?};

_result:=0;

_id:=_a;
{? var_pres('_e')=type_of('')
|| _id:=_e
?};

_separator:=exec('sep','#file');
_can_continue:=1;

SKID_BLB.cntx_psh();

_fname:=_a;
{? _pth=0
||
   _localize:=1;
   {? var_pres('_d')=type_of(0)
   || _localize:=_d
   ?};
   {? _localize>0
   ||
      {? exec('cli_functions','#system')=0
      || _can_continue:=0;
         {? _no_err=0
         || FUN.emsg(exec('indevice_nacc_msg','#system'))
         ?}
      ?};
      {? _can_continue>0
      || _fname:='@'+tmp_dir()+_separator+_a
      ?}
   ?}
?};

{? _can_continue>0
||
   _exist:=fexists(_fname,_pth);

   {? _exist
   ||
::    Plik istnieje na dysku - dodajemy go do bazy, lub aktualizujemy w bazie
      SKID_BLB.index('ID');
      SKID_BLB.prefix(_id,);
      {? SKID_BLB.first()
      ||
         _result:=SKID_BLB.bl_put('BLOB',_fname,_pth,,,_no_err)
      ||
         SKID_BLB.blank();
         SKID_BLB.ID:=_id;
         {? SKID_BLB.add()>0
         || _result:=SKID_BLB.bl_put('BLOB',_fname,_pth,,,_no_err)
         ?}
      ?}
   ||
::    Plik został usunięty z dysku - usuwamy również z bazy
      SKID_BLB.index('ID');
      SKID_BLB.prefix(_a,);
      {? SKID_BLB.first()
      || {? SKID_BLB.del(,1)>0
         || _result:=2
         ?}
      ?}
   ?}
?};
SKID_BLB.cntx_pop();
_result


\get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Pobiera plik z tabeli SKID_BLB i zapisuje
::   WE: _a - nazwa pliku (zawsze bez ścieżki dostępu)
::       [_b] - pth - docelowa lokalizacja pliku według deklaracji ścieżek (domyślnie=1), czy w folderze @!Tmp (0)
::   WY: czy udało się pobrać plik
::  OLD: \get/skid_blb.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of(0) || _pth:=_b || _pth:=1 ?};

_separator:=exec('sep','#file');

{? _pth
|| _fname:=_a
|| _fname:=exec('tmp_filepath','#file',_a)
?};
_result:=0;
SKID_BLB.cntx_psh();
SKID_BLB.index('ID');
SKID_BLB.prefix(_a,);
{? SKID_BLB.first()
|| _result:=SKID_BLB.bl_get('BLOB',_fname,_pth)
?};
SKID_BLB.cntx_pop();
_result


\memo_add
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: TS [12.30]
:: OPIS: Dodaje treść z pliku tekstowego do pola w bazie zawierającego pole typu SYSMEMO
::       KONTEKST PRACY - bieżący rekord tabeli albo wg parametru _d
::   WE: _a - STRING - ścieżka do pliku z treścią tekstową
::       _b - STRING - akronim tabeli
::       _c - STRING - akronim pola wskazującego na SYSMEMO
::       [_d] - STRING[16] - $ref() rekordu
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \memo_add/skid_blb.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')=type_of('') || _ref:=_d || _ref:='' ?};

_tab:=($_b)();
_file:=fopen(_a,'ur',0,1,1);

{? _ref<>''
||
   _tab.cntx_psh();
   _tab.clear();
   {? _tab.seek(_ref,form(8+_ref))
   || _tab.memo_put(_file,_c)
   ?};
   _tab.cntx_pop()
||
   _tab.memo_put(_file,_c)
?}


\memo_get
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Tworzy plik tekstowy z treścią z pola typu SYSMEMO
::       KONTEKST PRACY - bieżący rekord tabeli albo wg parametru _c
::   WE: _a - STRING - akronim tabeli
::       _b - STRING - akronim pola wskazującego na SYSMEMO
::       [_c] - STRING[16] - $ref() rekordu
::   WY: STRING - ścieżka do utworzonego pliku tekstowego z treścią
::  OLD: \memo_get/skid_blb.fml
:: ~OST: INFOPEN,INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')=type_of('') || _ref:=_c || _ref:='' ?};

{? exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return('')
?};

_result:='';
_tab:=($_a)();

_separator:=exec('sep','#file');

:: Plik tymczasowy z zawartością pola memo
{? _ref<>''
|| _tab.cntx_psh();
   _tab.clear();
   {? _tab.seek(_ref,form(8+_ref))
   || _memo:=_tab.memo_get('r',_b)
   || _memo:=fopen('@'+tmp_dir()+_separator+'empty.txt','r',0,1,1)
   ?};
   _tab.cntx_pop()
|| _memo:=_tab.memo_get('r',_b)
?};

:: Plik do którego przepisujemy zawartość memo
_fname:='@'+tmp_dir()+_separator+($_tab.tm_stamp())+'.txt';
_file:=fopen(_fname,'uw',0,1,1);

{!
|? _line:=_memo.fread();
   _file.fwrite(_line);
   _line<>'\n'
!};
_result:=1-_fname;
_result


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Pobiera informacje o pliku
::   WE: _a - nazwa pliku (zawsze bez ścieżki dostępu)
::       _b - STRING - rodzaj zwracanej informacji:
::                                                  'EXTENSION' — rozszerzenie pliku,
::                                                  'NAME' — nazwa pliku (razem z rozszerzeniem),
::                                                  'CREAT_DATE' — data utworzenia pliku,
::                                                  'CREAT_TIME' — czas utworzenia pliku,
::                                                  'MODIFY_DATE' — data ostatniej modyfikacji pliku,
::                                                  'MODIFY_TIME' — czas ostatniej modyfikacji pliku
::                                                  'SIZE' — rozmiar pliku w bajtach,
::                                                  'IMAGE' — czy plik graficzny, który może być prezentowany w okienku
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_filename:=_a;
_kind:=_b;

_result:=0;
SKID_BLB.cntx_psh();
SKID_BLB.index('ID');
SKID_BLB.prefix(_filename,);
{? SKID_BLB.first()
|| _result:=SKID_BLB.bl_info('BLOB',_kind)
?};
SKID_BLB.cntx_pop();
_result


\bl_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera załącznik to foldera konkretnego/tymczasowego
::   WE: _a - BLOBRAW/BLOBIMAGE
::       [_b] ścieżka do folderu docelowego, jeśli brak to folder tymczasowy na końcówce
::       [_c] nazwa pliku wraz z rozszerzeniem
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_blob:=_a;
_dest:={? var_pres('_b')=type_of('') || _b || '' ?};
_name:={? var_pres('_c')=type_of('') || _c || '' ?};

{? 1+_dest='@' & exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return(0)
?};
_result:=0;
_tab:=tab_tmp(,'BLOB','BLOBRAW','');
_tab.BLOB:=_blob;
{? _tab.add()
|| {? _name='' || _name:=_tab.bl_info('BLOB','NAME') ?};
   {? _dest=''
   || _filepath:=exec('tmp_filepath','#file',_name);
      _result:=_tab.bl_get('BLOB',_filepath,0)
   || _result:=_tab.bl_get('BLOB',_dest+_name,0)
   ?}
?};
_result


\bl_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera informację o załączniku
::   WE: _a - BLOBRAW/BLOBIMAGE
::       _b - STRING - rodzaj zwracanej informacji:
::                                                  'EXTENSION' — rozszerzenie pliku,
::                                                  'NAME' — nazwa pliku (razem z rozszerzeniem),
::                                                  'CREAT_DATE' — data utworzenia pliku,
::                                                  'CREAT_TIME' — czas utworzenia pliku,
::                                                  'MODIFY_DATE' — data ostatniej modyfikacji pliku,
::                                                  'MODIFY_TIME' — czas ostatniej modyfikacji pliku
::                                                  'SIZE' — rozmiar pliku w bajtach,
::                                                  'IMAGE' — czy plik graficzny, który może być prezentowany w okienku
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_blob:=_a;
_kind:=_b;
_result:='';
_tab:=tab_tmp(,'BLOB','BLOBRAW','');
_tab.BLOB:=_blob;
{? _tab.add()
|| _result:=_tab.bl_info('BLOB',_kind)
?};
_result


::======================================================================================================================
:: Poniższe wywołania oryginalnie z pliku img_blob.fml
::======================================================================================================================


\get_blob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [19.22]
:: OPIS: Szuka w tabeli IMG_BLOB bloba i zwraca go
::       UWAGA: Formuła oryginalnie umieszczona (oraz zawiera przekierowane wywołanie) w pliku img_blob.fml
::              Ze względu na odwołania z plików #, ten fragment też musi być w #
::   WE: _a [STRING] - Rodzaj obrazu [F/U - Firma/User]
::       _b [REF] - Użytkownik systemu (null dla firmy)
::       _c [REF] - Firma
::       _d [STRING] - Szukany typ
::   WY: _blob [BLOBIMAGE] - znaleziony obraz lub null() gdy nie znaleziono
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('')
   | var_pres('_b')<>type_of(USERS.ref())
   | var_pres('_c')<>type_of(USERS.ref())
   | var_pres('_d')<>type_of('')
   || return(null())
?};
_blob:=null();
IMG_BLOB.cntx_psh();
IMG_BLOB.index('KOD');
IMG_BLOB.prefix(_a,_b,);
:: szuka obrazu:
{? IMG_BLOB.find_key(_c,_d,)
|| _blob:=IMG_BLOB.OBRAZ
:: szuka domyślnego obrazu:
|? IMG_BLOB.find_key(null(),_d,)
|| _blob:=IMG_BLOB.OBRAZ
?};
IMG_BLOB.cntx_pop();
_blob


\get_logo_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Szuka w tabeli IMG_BLOB loga firmy (nagłówek wiadomości) i zwraca znalezione logo
::   WY: _blob [BLOBIMAGE] - znaleziony obraz lub null() gdy nie znaleziono
::----------------------------------------------------------------------------------------------------------------------
exec('get_blob','#blob','F',null(),exec('ref_firma','#firma'),'logo_h')


\get_logo_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Szuka w tabeli IMG_BLOB loga firmy (stopka wiadomości) i zwraca znalezione logo
::   WY: _blob [BLOBIMAGE] - znaleziony obraz lub null() gdy nie znaleziono
::----------------------------------------------------------------------------------------------------------------------
exec('get_blob','#blob','F',null(),exec('ref_firma','#firma'),'logo_f')


\hash
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła zwraca hash dla podanego BLOB-a.
::   WE:  _a  [BLOBRAW] - Załącznik.
::       [_b] [STRING]  - Rodzaj skrótu [domyślnie: 'sha1'].
::   WY: Hash lub ''.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=SYSBLOB
|| _blob:=_a
|| return('')
?};
_kind:={? var_pres('_b')=type_of('') & ',sha1,sha224,sha256,sha384,sha512,md5,'*_b || _b || 'sha1' ?};

_fh:=fopen(_blob,'br',,,1);
{? _fh.is_open()
|| _hash:=hash(_fh,_kind);
   _fh.fclose()
|| _hash:=''
?};
obj_del(_fh);
_hash


\bl_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Zamiennik funkcji bl_view i bl_get dla interma jeżeli niedostępny indevice
::       Uruchamia pobranie załącznika na terminal użytkownika
::   WE: _a - TABLE - uchwyt do tabeli
::       _b - STRING - akronim pola typu blob
::   WY: STRING - nazwa zapisanego pliku lub '' jeżeli zapis nieudany lub użytkownik zrezygnował
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_fld:=_b;

_result:='';

_name:=_table.bl_info(_fld,'NAME');
_pth:='';
_tmp_dir:=fmk_tmp_dir(0);
{? type_of(_tmp_dir)<>type_of(~~)
|| _pth:=_tmp_dir.get_path();
   _file:='';
   _sep:=exec('sep','#file',2);
   _file:=_pth+_sep+_name;
   {? _table.bl_get(_fld,_file,0)
   || _res_dlg:=dlg_save(_file,0,_name);
      {? type_of(_res_dlg)=type_of(~~)
      || FUN.emsg('Błąd kopiowania pliku.'@)
      |? type_of(_res_dlg)=type_of('')
      || _result:=_res_dlg
      ?}
   || FUN.emsg('Nie udało się pobranie załącznika po stronie serwera'@)
   ?}
|| FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@)
?};
_result


\bl_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Zamiennik funkcji bl_view działający uniwersalnie na interm i jterm
::   WE: _a - TABLE - uchwyt do tabeli
::       _b - STRING - akronim pola typu blob
::   WY: 0 - porażka
::       1 - sukces
:: ~OST: INBLVIEW
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_fld:=_b;

_result:=0;

{? exec('cli_functions','#system')>0
||
:: Jeżeli indevice dostępny to specjalnie wywołuję bl_view bo jest to wygodniejsze
   _result:=_table.bl_view(_fld,1)
|| _pth:=exec('bl_save','#blob',_table,_fld);
   {? _pth<>''
   || _result:=1
   ?}
?};
_result


:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 158ce6d1f77c40bfcdde3f5c8a898706f4a6d38d475871416eb7bb96461fc53a7b161ff7b9d41044b03469a922da6106c91e9342c575cb0161c307b0bb150a34e02aad7b3f87fea84372f89dc28e9fc120a94f8055bf6e2d6d8972d791c1c42415635bb1231477ee471d1b093cfc62d9dcfb798b086ed0d226155a28062a49d5
