:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_valprt.fml
:: Utworzony: 20.01.2015 [17.00]
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli B_VARPRT - wartości dla argumentów w procesie
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy bufor tabeli B_VALPRT
::   WY: obj_new() - tablica nazwana - reprezentacja rekordu B_VALPRT
::  TAG: <MODELER><PROCES><BUFOR><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
exec('B_VALPRT','#buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje do tabeli B_VALPRT jeden rekord
::   WE: _a - obj_new - tablica nazwana będaca buforem tabeli exec('buffer','#b_valprt')
::   WY: B_VALPRT.ref() lub null
::  TAG: <MODELER><PROCES><ADD><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','#b_valprt')
         ?};
_result:=null();

B_VALPRT.cntx_psh(); B_VALPRT.clear();
B_VALPRT.blank();
_buffer.set();
{? B_VALPRT.add()>0
|| _result:=B_VALPRT.ref();
   {? _result & _buffer.SYS_MEMO<>'' || B_VALPRT.memo_put(,'SYS_MEMO') ?}
?};
B_VALPRT.cntx_pop();
_result


\put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja poprawiająca wpis w tabeli B_VALPRT
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#b_valprt')
::       [_b] - B_VALPRT.ref() lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MODELER><PROCES><PUT><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(0) ?};
_ref:=null();
{? var_pres('_b')=type_of(SYSLOG.ref())
|| _ref:=_b
?};

_result:=0;
_can_continue:=1;

B_VALPRT.cntx_psh();
{? _ref<>null()
|| B_VALPRT.clear();
   {? B_VALPRT.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _buffer.set();
   _result:=B_VALPRT.put();
   {? _result & _buffer.SYS_MEMO<>'' || B_VALPRT.memo_put(,'SYS_MEMO') ?}
?};
B_VALPRT.cntx_pop();
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje podany rekord tabeli B_VALPRT (wykonywane w transakcji!!!)
::   WE: _a - B_VALPRT.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::  TAG: <MODELER><PROCES><DEL><PARAMETR><WEJŚCIE><INICJOWANIE>
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystapić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=1;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;

{? _can_continue>0
||
   {? _mydo || do() ?};
   B_VALPRT.cntx_psh(); B_VALPRT.clear();
   {? B_VALPRT.seek(_ref)
   || {? exec('clean','#b_valprt',_ref)>0
      || _bi_blob:=B_VALPRT.BI_BLOB;
         {? B_VALPRT.del(,1)>0
         || _result:=1;
            {? _bi_blob<>null()
            ||
::             Jeżeli B_VALPRT usunięty ale były do niego jakieś załączniki to próbuję je również usunąć
::             pod warunkiem że nie ma do nich żadnych odwołań
               exec('delete','#bi_blob',_bi_blob)
            ?}
         || undo();
            _result:=-3
         ?}
      || _result:=-2
      ?}
   || _result:=0
   ?};
   B_VALPRT.cntx_pop();
   {? _result<0
   || undo()
   ?};

   {? _mydo || end() ?}
?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czysci powiazania do rekordu tabeli B_VALPRT
::   WE: _a - B_VALPRT.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystapić błąd.
::  TAG: <MODELER><PROCES><CLEAN><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiazania usuniete? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end()?};
_result


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Środowisko obsługi ustalania wartości parametrów czynności w procesie
::   WY: obj_new - tablica nazwana zawierajaca wszystko co potrzebne
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE><WŁAŚCIWOŚCI>
::----------------------------------------------------------------------------------------------------------------------

::UWAGA: _fld, i _mth to formułki pomocnicze, żeby wygodniej tworzyć tablice i komentować poszczególne jej elementy
::       powiedzmy, że to bedzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to bedzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(  _fld('CLASS'           ,'Klasa elementu')
               ,_fld('B_PREL'          ,'B_PREL.ref - element procesu dla którego będą wyświetlane właściwości')
               ,_fld('SEL_PROC'        ,'B_PROC.ref - redagowany proces')
               ,_fld('LOCKED'          ,'Czy udało się zablokować proces')
               ,_fld('INST'            ,'Czy widok od strony instancji')
               ,_fld('B_CONN'          ,'B_CONN.ref - połączenie dla którego będą wyświetlane właściwości')
               ,_fld('SEL_PORT_IN'     ,'B_PORT.ref - zaznaczony port wejściowy')
               ,_fld('HAS_PORTGR'      ,'Czy są komplety parametrów')
               ,_fld('HAS_PORTGR_EMPTY','Czy jest dostępny komplet pusty')
               ,_fld('SEL_PORTGR'      ,'Zaznaczony komplet parametrów')
               ,_fld('EDITABLE'        ,'Czy mozliwe jest tworzenie powiazan, czy tylko podglad')
::             identyfikatory okienek
               ,_fld('wid_main'  ,'ID okienka glownego')
               ,_fld('wid_in'    ,'ID okienka z portami')
               ,_fld('wid_portgr','ID okienka z kompletami portów')
               ,_fld('wid_choice','ID okienka z warunkami bramy')
               ,_fld('wid_prev'  ,'ID okienka elementow procesu przed brama')

::             tytuly okienek
               ,_fld('tit_main'     ,'Tytul okienka glownego')
               ,_fld('tit_in'       ,'Tytul okienka z portami wejściowymi')
               ,_fld('tit_portgr'   ,'Tytul okienka z kompletami portów')
               ,_fld('tit_choice'   ,'Tytul okienka z warunkami bramy')
               ,_fld('tit_prev'     ,'Tytul okienka elementow procesu przed brama')

::             tabele tymczasowe
               ,_fld('TAB_IN'    ,'Tabela tymczasowa zawierająca porty wejściowe')
               ,_fld('TAB_PORTGR','Tabela tymczasowa zawierająca komplety portów')
               ,_fld('TAB_PREV'  ,'Tabela tymczasowa zawierająca porty wyjściowe elementów poprzedzających')

::             indeksy tymczasowych tabel
               ,_fld('INDEX_TAB_IN1','Indeks tabeli portów wejściowych: SYM_ELEM')
               ,_fld('INDEX_TAB_IN2','Indeks tabeli portów wejściowych: REF_PREL,REF_PORT')
               ,_fld('INDEX_TAB_IN3','Indeks tabeli portów wejściowych: KIND')

               ,_fld('INDEX_TAB_PGR1','Indeks tabeli kompletów portów')
               ,_fld('INDEX_TAB_PGR2','Indeks tabeli kompletów portów')
               ,_fld('INDEX_TAB_PGR3','Indeks tabeli kompletów portów')

               ,_fld('IN_PREV2'     ,'Indeks tabeli el. przed brama: PARENT, REF_PORT')
               ,_fld('IN_PREV3'     ,'Indeks tabeli el. przed brama: REF_PREL')

::             uchwyty do okien
               ,_fld('WIN_MAIN'  ,'Główne okno grupowe')
               ,_fld('WIN_IN'    ,'Okno z portami wejściowymi')
               ,_fld('WIN_PORTGR','Okno z kompletami portów')
               ,_fld('WIN_CHOICE','Okno z warunkami bramy')
               ,_fld('WIN_PREV'  ,'Okno z portami wyjściowymi elementów poprzedzających')
               ,_fld('WIN_ACT'   ,'Okno właściwości czynności')
               ,_fld('WIN_ACT1'  ,'Okno właściwości czynności (dodatkowe)')
               ,_fld('WIN_EVE_TI','Okno właściwości zdarzenia czasowego pośredniego')

::             uchwyty do kontrolek
               ,_fld('ctr_id_portgr'  ,'Kontrolka ze statusem kompletów')

::             identyfikatory przycisków
               ,_fld('win_in_btn_delete'  ,'Przycisk usunięcia wartości, portu, połączenia portu')
               ,_fld('win_in_btn_edit'    ,'Przycisk poprawy wartości')
               ,_fld('win_in_btn_clean'   ,'Przycisk czyszczenia wartości')
               ,_fld('win_in_btn_addport' ,'Przycisk dołączania portu')
               ,_fld('win_in_btn_conn'    ,'Przycisk kreatora powiązań portów')
               ,_fld('win_in_btn_conn_del','Przycisk usuwania powiązania')
               ,_fld('win_in_btn_key'     ,'Przycisk ustawienia portu jako tworzącego rekord kluczowy')
               ,_fld('win_in_btn_eve'     ,'Przycisk wyróżniania portu zdarzenia warunkowego')
               ,_fld('win_act_edit'       ,'Przycisk poprawy czynności')
               ,_fld('win_act_edit1'       ,'Przycisk poprawy czynności')

::             METODY
               ,_mth('select'       ,'Wyświetla okno właściwości')
               ,_mth('win4lane'     ,'Okno właściwości dla toru')
               ,_mth('win4event'    ,'Okno właściwości dla zdarzenia')
               ,_mth('win4action'   ,'Okna właściwości dla czynności')
               ,_mth('win4gate'     ,'Okna właściwości dla bramy')
               ,_mth('win4conn'     ,'Okna właściwości dla połączenia')
               ,_mth('load'         ,'Ładuje zawartość okna właściwości')
               ,_mth('load4lane'    ,'Ładuje zawartość okna właściwości dla toru')
               ,_mth('load4event'   ,'Ładuje zawartość okna właściwości dla zdarzenia')
               ,_mth('load4action'  ,'Ładuje zawartość okna właściwości dla czynności')
               ,_mth('load4gate'    ,'Ładuje zawartość okna właściwości dla bramy')
               ,_mth('load4conn'    ,'Ładuje zawartość okna właściwości dla połączenia')
               ,_mth('add_port'     ,'Dodaje port wejściowy')
               );
_env.B_PREL:=null();
_env.SEL_PROC:=null();
_env.SEL_PORTGR:=null();
_env.B_CONN:=null();
_env.SEL_PORT_IN:=null();
_env.EDITABLE:=1;
_env.LOCKED:=1;
_env.HAS_PORTGR:=0;
_env.HAS_PORTGR_EMPTY:=0;

_env.wid_main:='#b_valprt_main';
_env.wid_in:='#b_valrpt_port';
_env.wid_portgr:='#b_val_portgr';
_env.wid_choice:='#b_valrpt_choice';
_env.wid_prev:='#b_valrpt_prev';

_env.tit_main:='Właściwości'@;
_env.tit_in:='Parametry wejściowe'@;
_env.tit_portgr:='Komplety parametrów'@;
_env.tit_choice:='';
_env.tit_prev:='Parametry wyjściowe elementów poprzedzających'@;

_env.win_in_btn_delete:='';
_env.win_in_btn_edit:='';
_env.win_in_btn_clean:='';
_env.win_in_btn_addport:='';
_env.win_in_btn_conn:='';
_env.win_in_btn_key:='';
_env.win_act_edit:='';
_env.win_act_edit1:='';

_env.ctr_id_portgr:='portgr_status';

_env.WIN_MAIN:='';
_env.WIN_IN:='';
_env.WIN_PREV:='';
_env.WIN_ACT:='';
_env.WIN_ACT1:='';
_env.WIN_EVE_TI:='';

_env.select:="
      _env:=params_get().env;
      params_set(params_get());
::    Wyświetlam komunikat o podglądzie, jeśli proces zaakceptowany
      _b_proc:=exec('FindAndGet','#table',B_PREL,$.B_PREL,,\"B_PREL.B_PROC\",null());
      {? _b_proc
      ||
         {? exec('FindAndGet','#table',B_PROC,$_b_proc,,\"B_PROC.ACCEPTED='T'\")
         || .EDITABLE:=0
         || .EDITABLE:=1
         ?};

         {? .LOCKED=0 & .EDITABLE=1
         || .EDITABLE:=0
         ?};

         {? var_pres('env_modeler',params_get())>100
         || _env_modeler:=params_get().env_modeler;
            {? _env_modeler.MEGA_PROC>0
            || .EDITABLE:=0;
               .INST:=1
            ?}
         ?};

         {? .CLASS='B_LANE'   || .win4lane()
         |? .CLASS='B_EVENT'  || .win4event()
         |? .CLASS='B_ACTION' || .win4action()
         |? .CLASS='B_GATE'   || .win4gate()
         |? .CLASS='B_CONN'   || .win4conn()
         || return(~~)
         ?};

::       Pokazujemy okno
         {? .CLASS='B_EVENT'
         || B_PREL.cntx_psh();
            B_PREL.prefix();
            {? B_PREL.seek(.B_PREL)
            ||
::             Zdarzenie startowe czasowe
               {? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_start','#b_event'),
                                                          exec('kind_timer','#b_event'))>0
               || B_TIMER.index('B_PREL');
                  B_TIMER.prefix(B_PREL.ref());
                  {? ~B_TIMER.first()
                  || B_TIMER.blank();
                     B_TIMER.B_PREL:=B_PREL.ref();
                     B_TIMER.ON:=B_PREL.ENABLED;
                     B_TIMER.add()
                  ?};
                  params_exec('desc_interval_load','#b_timer');
                  params_exec('desc_duration_load','#b_timer');
                  params_exec('set_win_opt','#b_timer');
                  params_exec('set_btn_opt','#b_timer')

::             Zdarzenie pośrednie czasowe
               |? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_intermed','#b_event'),
                                                          exec('kind_timer','#b_event'))>0
               || B_TIMER.index('B_PREL');
                  B_TIMER.prefix(B_PREL.ref());
                  {? ~B_TIMER.first()
                  || B_TIMER.blank();
                     B_TIMER.B_PREL:=B_PREL.ref();
                     B_TIMER.ON:=B_PREL.ENABLED;
                     B_TIMER.add()
                  ?};
::                  exec('edit_enablator','#interval',_env.WIN_EVE,B_TIMER)
                  ~~

::             Zdarzenie wysłania komunikatu (pośrednie albo końcowe)
               |? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_intermed','#b_event'),
                                                          exec('kind_message','#b_event'),
                                                          exec('category_throw','#b_event'))>0
                     |
                  exec('is_event','#b_event',B_PREL.B_ELE,exec('type_end','#b_event'),
                                                          exec('kind_message','#b_event'),
                                                          exec('category_throw','#b_event'))>0
               || B_MSG.index('B_PREL');
                  B_MSG.prefix(B_PREL.ref());
                  {? ~B_MSG.first()
                  || B_MSG.blank();
                     B_MSG.B_PREL:=B_PREL.ref();
                     B_MSG.add()
                  ?};
                  B_MSG.memo_get(,'BODYT');
                  B_MSG.memo_get(,'TO');
                  B_MSG.memo_get(,'CC');
                  B_MSG.memo_get(,'BCC')

::             Zdarzenie warunkowe (startowe albo pośrednie)
               |? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_start','#b_event'),
                                                          exec('kind_condition','#b_event'))>0
                     |
                  exec('is_event','#b_event',B_PREL.B_ELE,exec('type_intermed','#b_event'),
                                                          exec('kind_condition','#b_event'))>0
               || B_PORT.index('UNIK');
                  B_PORT.prefix(null(),B_PREL.ref(),null(),exec('kind_out','#b_port'));
                  {? B_PORT.first()
                  || BPMN.B_TYPE:=B_PORT.B_TYPE
                  || BPMN.B_TYPE:=null()
                  ?}
               ?};
               B_PREL.select()
            ?};
            B_PREL.cntx_pop()
         |? .CLASS='B_LANE'
         || params_exec('FindAndGet','#table',B_PREL,.B_PREL,,\"B_PREL.select()\")
         |? .CLASS='B_GATE'
         || {? exec('is_gate_prel','#b_gate',.B_PREL,exec('type_complex','#b_gate'),exec('kind_merge','#b_gate'))
            || params_exec('FindAndGet','#table',B_PREL,.B_PREL,,\"
                  B_PORT.index('UNIK');
                  B_PORT.prefix(null(),B_PREL.ref(),null(),exec('kind_out','#b_port'));
                  {? B_PORT.first()
                  || BPMN.B_TYPE:=B_PORT.B_TYPE
                  || BPMN.B_TYPE:=null()
                  ?};
                  B_PREL.select()\")
            || params_exec('b_choice_act','#b_design',VALPRT_CR,B_PREL.ref())
            ?}
         |? .CLASS='B_ACTION'
         || params_exec('FindAndGet','#table',B_PREL,.B_PREL,,\"
               _is_manual:=exec('is_action_manual','#b_prel',B_PREL.ref());
               _is_uniservice:=exec('is_action_uniservice','#b_prel',B_PREL.ref());
               {? _is_manual | _is_uniservice
               || B_PORT.index('UNIK');
                  B_PORT.prefix(null(),B_PREL.ref(),null(),exec('kind_out','#b_port'));
                  {? B_PORT.first()
                  || BPMN.B_TYPE:=B_PORT.B_TYPE
                  || BPMN.B_TYPE:=null()
                  ?}
               ?};
               BPMN.B_CAN:=exec('b_can_info','#b_action',exec('action_b_can','#b_prel',B_PREL.ref()));
               B_PREL.select()
            \")
         ||
            exec('seek_port','#b_valprt',.);
            .TAB_IN.select(,1,2)
         ?}
      ?};
      ~~
";
_env.win4lane:="
:: Tworzymy okno glowne
   exec('grp_make4lane','#b_valprt',.)
";
_env.win4event:="
::    Tworzymy okna składowe
      _disp_valprt:=1;
      {? _disp_valprt || .WIN_IN:=exec('win_in','#b_valprt',.) ?};

::    Tworzymy okno główne
      exec('grp_make4event','#b_valprt',.)
";
_env.win4action:="

      _is_manual:=exec('is_action_manual','#b_prel',.B_PREL);
      _is_user:=exec('is_action_user','#b_prel',.B_PREL);
      _is_uniservice:=exec('is_action_uniservice','#b_prel',.B_PREL);
      _is_service:=exec('is_action_service','#b_prel',.B_PREL);
      _is_send:=exec('is_action_send','#b_prel',.B_PREL);
      _is_edi:=exec('is_edi','#b_prel',.B_PREL);

::    Tworzymy okna
      .WIN_IN:=exec('win_in','#b_valprt',.);
      {? .HAS_PORTGR>0
      || .WIN_PORTGR:=exec('win_portgr','#b_valprt',.)
      ?};
      {? _is_manual>0
      || .WIN_ACT:=exec('win_edit','#b_action',.,'ACT_MAN',0,1,\"params_exec('btn_manual_popraw','#b_design')\",0);
         .WIN_ACT1:=exec('win_edit','#b_action',.,'',0,1,\"params_exec('btn_manual_popraw','#b_design')\",1,'win_act_edit1')
      |? _is_user>0 | _is_send>0
      || _win:={? _is_edi || 'ACT_EDI' || 'ACT_USR' ?};
         .WIN_ACT:=exec('win_edit','#b_action',.,_win,0,1,\"params_exec('btn_user_popraw','#b_design')\")
      |? _is_uniservice>0
      || .WIN_ACT:='ACT_SRW'
      |? _is_service>0
      || .WIN_ACT:={? _is_edi || 'ACT_EDIS' || 'ACT_SRV' ?}
      ?};

::    Tworzymy okno główne
      exec('grp_make4action','#b_valprt',.)
";
_env.win4gate:="

::    Tworzymy okna
      .WIN_IN:=exec('win_in','#b_valprt',.);
      .WIN_ACT:='GATECOMD';

::    Tworzymy okno główne
      exec('grp_make4gate','#b_valprt',.)
";
_env.win4conn:="
::    Tworzymy okna
      .WIN_IN:=exec('win_in','#b_valprt',.);
      {? .HAS_PORTGR>0
      || .WIN_PORTGR:=exec('win_portgr','#b_valprt',.)
      ?};
      .WIN_CHOICE:='';

::    Tworzymy okno glowne
      exec('grp_make4conn','#b_valprt',.)
";
_env.load:="
      _ref:=_a;
      params_set(params_get());

      _wyn:=1;

      .CLASS:='';
      .B_PREL:=null();
      .B_CONN:=null();
      .HAS_PORTGR:=exec('has_portgr','#b_portgr',_ref);

      _rname:=ref_name(_a);
      {? _rname='b_prel'
      || .B_PREL:=_ref;
         .CLASS:=exec('FindAndGet','#table',B_PREL,$_ref,,\"B_PREL.CLASS\",'');
         .SEL_PROC:=exec('FindAndGet','#table',B_PREL,$_ref,,\"B_PREL.B_PROC\",'')
      |? _rname='b_conn'
      || .B_CONN:=_ref;
         .CLASS:='B_CONN';
         .SEL_PROC:=exec('FindAndGet','#table',B_CONN,$_ref,,\"B_CONN.B_PROC\",'')
      ?};

      .EDITABLE:=
            {? exec('FindAndGet','#table',B_PROC,$.SEL_PROC,,\"B_PROC.ACCEPTED='T'\")
            || 0
            || 1
            ?};


      {? .CLASS='B_LANE'   || .load4lane()
      |? .CLASS='B_EVENT'  || .load4event()
      |? .CLASS='B_ACTION' || .load4action()
      |? .CLASS='B_GATE'   || .load4gate()
      |? .CLASS='B_CONN'   || .load4conn()
      || 0
      ?}
";
_env.load4lane:="1";
_env.load4event:="
      _wyn:=0;

      _b_prel:=.B_PREL;

      B_PREL.cntx_psh();
      B_PREL.clear();
      {? B_PREL.seek(_b_prel)
      ||
::       Sprawdzam czy można zablokować element procesu
         {? exec('lock','#b_prel',_b_prel,1)>0
         ||
::          Tworzymy tabele tymczasowe
            {? type_of(.TAB_IN)=0
            || .TAB_IN:=exec('tab_port','#b_valprt',.)
            ?};
            {? type_of(.TAB_PREV)=0
            || .TAB_PREV:=exec('tab_prev','#b_valprt',.)
            ?};
            KOMM.init(250,,'Wczytywanie elementów do kreatora'@);

::          Ładujemy porty wejściowe
            exec('load_port','#b_valprt',.,_b_prel);

::          Ładujemy elementy i ich porty wyjściowe znajdujące się przed elementem
            exec('load_prev','#b_valprt',.,_b_prel,null());

            KOMM.select();
            _wyn:=1
         ?}
      ?};
      B_PREL.cntx_pop();
      _wyn
";
_env.load4action:="
      _wyn:=0;

      _b_prel:=.B_PREL;

      B_PREL.cntx_psh();
      B_PREL.clear();
      {? B_PREL.seek(_b_prel)
      ||
::       Sprawdzam czy można zablokować element procesu
         {? exec('lock','#b_prel',_b_prel,1)>0
         ||
::          Tworzymy tabele tymczasowe
            {? type_of(.TAB_IN)=0
            || .TAB_IN:=exec('tab_port','#b_valprt',.)
            ?};
            {? .HAS_PORTGR>0 & type_of(.TAB_PORTGR)=0
            || .TAB_PORTGR:=exec('tab_portgr','#b_valprt',.)
            ?};
            {? type_of(.TAB_PREV)=0
            || .TAB_PREV:=exec('tab_prev','#b_valprt',.)
            ?};
            KOMM.init(250,,'Wczytywanie elementów do kreatora'@);

::          Ładujemy porty wejściowe
            exec('load_port','#b_valprt',.,_b_prel);

::          Ładujemy komplety parametrów
            {? .HAS_PORTGR>0
            || exec('load_portgr','#b_valprt',.,_b_prel)
            ?};

::          Ładujemy elementy i ich porty wyjściowe znajdujące się przed elementem
            exec('load_prev','#b_valprt',.,_b_prel,null());

            KOMM.select();
            _wyn:=1
         ?}
      ?};
      B_PREL.cntx_pop();
      _wyn
";
_env.load4gate:="
      _wyn:=0;

      _b_prel:=.B_PREL;

      B_PREL.cntx_psh();
      B_PREL.clear();
      {? B_PREL.seek(_b_prel)
      ||
::       Sprawdzam czy można zablokować element procesu
         {? exec('lock','#b_prel',_b_prel,1)>0
         ||
::          Tworzymy tabele tymczasowe
            {? type_of(.TAB_IN)=0
            || .TAB_IN:=exec('tab_port','#b_valprt',.)
            ?};
            {? type_of(.TAB_PREV)=0
            || .TAB_PREV:=exec('tab_prev','#b_valprt',.)
            ?};
            KOMM.init(250,,'Wczytywanie elementów do kreatora'@);

::          Ładujemy porty wejściowe
            exec('load_port','#b_valprt',.,_b_prel);

::          Ładujemy elementy i ich porty wyjściowe znajdujące się przed elementem
            exec('load_prev','#b_valprt',.,_b_prel,null());

            KOMM.select();
            _wyn:=1
         ?}
      ?};
      B_PREL.cntx_pop();
      _wyn
";
_env.load4conn:="
      _wyn:=0;

      .B_PREL:=exec('FindAndGet','#table',B_CONN,$.B_CONN,,\"B_CONN.TO\",null());
      _b_prel:=.B_PREL;

      B_PREL.cntx_psh();
      B_PREL.clear();
      {? B_PREL.seek(_b_prel)
      ||
::       Sprawdzam czy można zablokować element procesu
         {? exec('lock','#b_prel',_b_prel,1)>0
         ||
::          Tworzymy tabele tymczasowe
            {? type_of(.TAB_IN)=0
            || .TAB_IN:=exec('tab_port','#b_valprt',.)
            ?};
            {? .HAS_PORTGR>0 & type_of(.TAB_PORTGR)=0
            || .TAB_PORTGR:=exec('tab_portgr','#b_valprt',.)
            ?};
            {? type_of(.TAB_PREV)=0
            || .TAB_PREV:=exec('tab_prev','#b_valprt',.)
            ?};
            KOMM.init(250,,'Wczytywanie elementów do kreatora'@);

::          Ładujemy porty wejściowe
            exec('load_port','#b_valprt',.,_b_prel);

::          Ładujemy komplety parametrów
            {? .HAS_PORTGR>0
            || exec('load_portgr','#b_valprt',.,_b_prel,.B_CONN)
            ?};

::          Ładujemy elementy i ich porty wyjściowe znajdujące się przed elementem
            exec('load_prev','#b_valprt',.,_b_prel,.B_CONN);

            KOMM.select();
            _wyn:=1
         ?}
      ?};
      B_PREL.cntx_pop();
      _wyn
";
_env.add_port:="
::    Tworzymy okno
      .WIN_PREV:=exec('win_prev','#b_valprt',.);

::    Pokazujemy okno
      .TAB_PREV.win_sel(.WIN_PREV);
      {? .TAB_PREV.select()
::    Dodajemy port wejściowy
      || exec('win_in_add_port','#b_valprt',.)
      ?};
      ~~
";
_env


\grp_make4action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okienko grupowe kreatora wartości
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE><WŁAŚCIWOŚCI>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
::_tab:=_env.TAB_IN;
_tab:=B_PREL;
{? _env.WIN_MAIN=''
||
   _grpbefor:="";
   _is_manual:=exec('is_action_manual','#b_prel',_env.B_PREL);
   _is_user:=exec('is_action_user','#b_prel',_env.B_PREL);
   _is_uniservice:=exec('is_action_uniservice','#b_prel',_env.B_PREL);
   _is_service:=exec('is_action_service','#b_prel',_env.B_PREL);
   _is_send:=exec('is_action_send','#b_prel',_env.B_PREL);

   {? _is_manual>0
   ||
::    Czynność manualna - odświeżam również okienko z właściwościami czynności manualnej
      _grpbefor:="
            _env:=VALPRT_CR;
            _env.TAB_IN.index(_env.INDEX_TAB_IN1);
            _env.TAB_IN.first();
            grp_disp(_env.TAB_IN,_env.WIN_IN);

            {? B_PREL.IVAL_DEF<>null()
            || B_PREL.IVAL_DEF()
            || IVAL_DEF.blank()
            ?};
            exec('edit_enablator','#interval',_env.WIN_ACT,B_PREL);

            grp_edisp(B_PREL,_env.WIN_ACT);
            grp_edisp(B_PREL,_env.WIN_ACT1);
            grp_edisp(B_PREL,'ACTION');
            win_activate('WIN_ACT');
            ~~
         "
   |? _is_user>0 | _is_send>0
   ||
::    Czynność użytkownika lub wysłania komunikatu
      _grpbefor:="
            _env:=VALPRT_CR;
            _env.TAB_IN.index(_env.INDEX_TAB_IN1);
            _env.TAB_IN.first();
            grp_disp(_env.TAB_IN,_env.WIN_IN);
            _automat:=exec('FindAndGet','#table',B_PREL,_env.B_PREL,,\"AUTOMAT\");
            {? _automat='N'
            || B_PREL.efld_opt(_env.WIN_ACT,'enable=0',,'AUTOMAT')
            || B_PREL.efld_opt(_env.WIN_ACT,'enable=1',,'AUTOMAT')
            ?};
            {? B_PREL.IVAL_DEF<>null()
            || B_PREL.IVAL_DEF()
            || IVAL_DEF.blank()
            ?};
            exec('edit_enablator','#interval',_env.WIN_ACT,B_PREL);
            grp_edisp(B_PREL,_env.WIN_ACT);
            grp_edisp(B_PREL,'ACTION');
            ~~
         "
   |? _is_uniservice>0
   ||
::    Czynność usługowa uniwersalna
      _grpbefor:="
            _env:=VALPRT_CR;
            _env.TAB_IN.index(_env.INDEX_TAB_IN1);
            _env.TAB_IN.first();
            grp_disp(_env.TAB_IN,_env.WIN_IN);
            grp_edisp(B_PREL,_env.WIN_ACT);
            grp_edisp(B_PREL,'ACTION');
            ~~
         "
   |? _is_service>0
   ||
::    Czynność usługowa
      _grpbefor:="
            _env:=VALPRT_CR;
            _env.TAB_IN.index(_env.INDEX_TAB_IN1);
            _env.TAB_IN.first();
            grp_disp(_env.TAB_IN,_env.WIN_IN);
            grp_edisp(B_PREL,_env.WIN_ACT);
            grp_edisp(B_PREL,'ACTION');
            ~~
         "

   ||
::    Czynność inna
      _grpbefor:="
            _env:=VALPRT_CR;
            _env.TAB_IN.index(_env.INDEX_TAB_IN1);
            _env.TAB_IN.first();
            grp_disp(_env.TAB_IN,_env.WIN_IN);
            grp_edisp(B_PREL,'ACTION');
            ~~
         "
   ?};

   _title:=_env.tit_main;
   {? _env.EDITABLE=0
   || _title+=' — '+'PODGLĄD'@
   ?};
   _grp:=_tab.grp_make(_title,_grpbefor,_env.wid_main,1,1,,,'normal');

:: TAB.grp_edit(grp_acr, [table], edit_acr, [tab], [after_refresh], [before], [after], [activate], [mode], [ident], [main])
::   _tab.grp_splt(_grp,,'horizontal','tabs');
   _tab.grp_edit(_grp,B_PREL,'ACTION',,,,,,'maximized','red',1);
   _tab.grp_splt(_grp,,'horizontal','tabs');

   {? _is_manual>0
   ||
      _tab.grp_edit(_grp,B_PREL,_env.WIN_ACT,'Własności czynności ręcznej'@,"params_exec('after_rfr_action','#b_valprt')",,,1,'maximized','WIN_ACT',1);
      _tab.grp_edit(_grp,B_PREL,_env.WIN_ACT1,'Terminy'@,"params_exec('after_rfr_action','#b_valprt')",,,1,'maximized','WIN_ACT1',1);
      _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,"exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized')
   |? _is_user>0
   ||
      _tab.grp_edit(_grp,B_PREL,_env.WIN_ACT,'Własności czynności użytkownika'@,"params_exec('after_rfr_action','#b_valprt')",,,1,'maximized',,1);
      _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,"exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized')
   |? _is_send>0
   ||
      _tab.grp_edit(_grp,B_PREL,_env.WIN_ACT,'Własności czynności wysłania komunikatu'@,"params_exec('after_rfr_action','#b_valprt')",,,1,'maximized',,1);
      _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,"exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized')
   |? _is_service>0
   || _tab.grp_edit(_grp,B_PREL,_env.WIN_ACT,'Własności czynności usługowej'@,,,,1,'maximized',,1);
      _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,"exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized_with_title')
   || _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,"exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized_with_title',,1)
   ?};
   {? _env.HAS_PORTGR>0
   || _tab.grp_sel(_grp,_env.TAB_PORTGR,_env.WIN_PORTGR,_env.tit_portgr,"exec('after_rfr_portgr','#b_valprt',VALPRT_CR)",,,,"exec('load_portgr','#b_valprt',VALPRT_CR,VALPRT_CR.B_PREL)",,,,'maximized_with_title');
      ~~
   ?};
   _options:='state=normal';
   {? _env.win_act_edit<>''
   || _tab.btn_eopt(_env.WIN_ACT,_env.win_act_edit,_options)
   ?};
   {? _env.win_act_edit1<>''
   || _tab.btn_eopt(_env.WIN_ACT1,_env.win_act_edit1,_options)
   ?};
   {? _env.win_act_edit='' & _env.win_act_edit1=''
   || _tab.btn_eopt(_env.WIN_ACT,'POPRAW',_options)
   ?};
::  Wyszarzanie przycisków

   {? _env.EDITABLE=0
   || _options:='state=grayed'
   ?};
   {? _env.win_act_edit<>'' & _env.INST>0
   ||
::    Przycisk popraw
      _tab.btn_eopt(_env.WIN_ACT,_env.win_act_edit,_options);
      ~~
   ?};
   {? _env.win_act_edit1<>'' & _env.INST>0
   ||
::    Przycisk popraw
      _tab.btn_eopt(_env.WIN_ACT1,_env.win_act_edit1,_options);
      ~~
   ?};
   {? _is_service>0 & _env.INST>0
   || _tab.btn_eopt(_env.WIN_ACT,'POPRAW',_options)
   ?};
   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\grp_make4conn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okienko grupowe kreatora wartości
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE><WŁAŚCIWOŚCI>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_IN;
{? _env.WIN_MAIN=''
||
   _grpbefor:="
         _env:=VALPRT_CR;
         _env.TAB_IN.index(_env.INDEX_TAB_IN1);
         grp_disp(_env.TAB_IN,_env.WIN_IN);
         grp_edisp(B_CONN,'RED');
         exec('load_verification_ctrl','#b_portgr');
         ~~
      ";

   _title:=_env.tit_main;
   {? _env.EDITABLE=0
   || _title+=' — '+'PODGLĄD'@
   ?};

   _grp:=_tab.grp_make(_title,_grpbefor,_env.wid_main,1,1,,,'normal');

:: TAB.grp_edit(grp_acr, [table], edit_acr, [tab], [after_refresh], [before], [after], [activate], [mode], [ident], [main])
   _tab.grp_edit(_grp,B_CONN,'RED',,,,,,'maximized','red',1);
   _tab.grp_splt(_grp,,'horizontal','tabs');
   _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,"exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized_with_title',,1);
   {? _env.HAS_PORTGR>0
   || _before:="
         exec('load_portgr','#b_valprt',VALPRT_CR,VALPRT_CR.B_PREL,VALPRT_CR.B_CONN,1);
         ~~
      ";
      _tab.grp_sel(_grp,_env.TAB_PORTGR,_env.WIN_PORTGR,_env.tit_portgr,"exec('after_rfr_portgr','#b_valprt',VALPRT_CR)",,,,_before,,,,'maximized_with_title');
      _tab.tab_splt(_grp,,'horizontal','bottom',20);
      exec('create','#desktop',_tab,_env.ctr_id_portgr,_grp,2,,,,,1);
      ~~
   ?};
   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\grp_make4event
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Tworzy okienko grupowe kreatora wartości
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::       _b - czy wyświetlać wartości portów
::       _c - czy wyświetlać własności zdarzenia czasowego
::       _d - czy wyświetlać własności wysłania komunikatu
::       _e - czy wyświetlać własności zdarzenia sygnałowego
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE><WŁAŚCIWOŚCI>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_disp_valprt:=0;
_disp_condition:=0;
_disp_timers:=0;
_disp_timeri:=0;
_disp_sendmsg:=0;
_disp_signal:=0;
_disp_none:=0;

_b_ele:=exec('FindAndGet','#table',B_PREL,$_env.B_PREL,,"B_PREL.B_ELE",null());

:: zdarzenie warunkowe (startowe i pośrednie)
{? exec('is_event','#b_event',_b_ele,,exec('kind_condition','#b_event'))>0
|| _disp_condition:=1
?};

:: zdarzenie startowe czasowe - własności harmonogramu
{? exec('is_event','#b_event',_b_ele,exec('type_start','#b_event'),
                                     exec('kind_timer','#b_event'))>0
|| _disp_timers:=1
?};

:: zdarzenie startowe pośrednie - własności harmonogramu
{? exec('is_event','#b_event',_b_ele,exec('type_intermed','#b_event'),
                                     exec('kind_timer','#b_event'))>0
|| _disp_timeri:=1
?};

:: zdarzenie wysłania komunikatu (pośrednie i końcowe)
{? exec('is_event','#b_event',_b_ele,exec('type_intermed','#b_event'),
                                     exec('kind_message','#b_event'),
                                     exec('category_throw','#b_event'))>0
      |
   exec('is_event','#b_event',_b_ele,exec('type_end','#b_event'),
                                     exec('kind_message','#b_event'),
                                     exec('category_throw','#b_event'))>0
|| _disp_sendmsg:=1
?};

:: zdarzenia startowe nieokreślone
{? exec('is_event','#b_event',_b_ele,exec('type_start','#b_event'),
                                     exec('kind_none','#b_event'))
|| _disp_none:=1
?};

:: zdarzenie sygnałowe (każde)
{? exec('is_event','#b_event',_b_ele,,exec('kind_signal','#b_event'))>0
|| _disp_signal:=1
?};

:: zdarzenia dla których podpięte są definicje portów wejściowych
:: - wysłania komunikatu
:: - wysłania sygnału
:: - odebrania sygnału (pośrednie)
:: - warunkowe pośrednie
{?
   exec('is_event','#b_event',_b_ele,,exec('kind_message','#b_event'),
                                      exec('category_throw','#b_event'))>0
      |
   exec('is_event','#b_event',_b_ele,,exec('kind_signal','#b_event'),
                                      exec('category_throw','#b_event'))>0
      |
   exec('is_event','#b_event',_b_ele,exec('type_intermed','#b_event'),
                                     exec('kind_signal','#b_event'),
                                     exec('category_catch','#b_event'))>0
      |
   exec('is_event','#b_event',_b_ele,exec('type_intermed','#b_event'),
                                     exec('kind_condition','#b_event'))>0
|| _disp_valprt:=1
?};

_tab:=B_PREL;
{? _env.WIN_MAIN=''
|| _grpbefor:="_vtab:=0;";
   {? _disp_condition
   || _grpbefor+="
         win_activate('EVE_COND');
         _vtab+=1;
      "
   ?};
   {? _disp_timers
   || _grpbefor+="
         tab_hide(,1,'tabs');
         _tab:='NRQSODTM'*B_TIMER.TRYB;
         tab_show(_tab,'tabs');
         exec('dtm_load','#b_timer');
         exec('desc_m_load','#b_timer');
         exec('desc_t_load','#b_timer');
         exec('desc_d_load','#b_timer');
         {? B_TIMER.TRYB='N'
         || win_activate('WIN1')
         || win_activate('WIN2'+B_TIMER.TRYB)
         ?};
         _vtab+=5;
      "
   ?};
   {? _disp_timeri
   || _grpbefor+="
         _env:=VALPRT_CR;
         {? B_TIMER.IVAL_DEF<>null()
         || B_TIMER.IVAL_DEF()
         || IVAL_DEF.blank()
         ?};
         exec('edit_enablator','#interval',_env.WIN_EVE_TI,B_TIMER);
         win_activate('WINI');
         _vtab+=1;
      "
   ?};
   {? _disp_sendmsg
   || _grpbefor+="
         win_activate('WINS');
         _vtab+=1;
      "
   ?};
   {? _disp_signal
   || {? exec('is_event','#b_event',_b_ele,,,exec('category_catch','#b_event'))>0
      || _grpbefor+="
            win_activate('EVE_SIGC');
::         grp_edisp(B_PREL,'EVE_SIGC',1);
            _vtab+=1;
         "
      || _grpbefor+="
            win_activate('EVE_SIG');
::         grp_edisp(B_PREL,'EVE_SIG',1);
            _vtab+=1;
         "
      ?}
   ?};
   {? _disp_valprt
   || _grpbefor+="
         _env:=VALPRT_CR;
         _env.TAB_IN.first();
         grp_disp(_env.TAB_IN,_env.WIN_IN);
         tab_show(_vtab+1,'tabs');
      "
   ?};
   {? _disp_none
   || _grpbefor+="
         grp_edisp(B_PREL,'EVE_SNON');
      "
   ?};
   _grpbefor+="grp_edisp(B_PREL,'EVENT');~~";
   _grpbefor:=$_grpbefor;

   _title:=_env.tit_main;
   {? _env.EDITABLE=0
   || _title+=' — '+'PODGLĄD'@
   ?};
   _grp:=_tab.grp_make(_title,_grpbefor,_env.wid_main,1,1,,,'normal','jterm');
   _tab.grp_edit(_grp,B_PREL,'EVENT',,,,,,'maximized','red',1);
   {? _disp_condition | _disp_timers | _disp_timeri | _disp_sendmsg | _disp_signal | _disp_valprt | _disp_none
   || _tab.grp_splt(_grp,,'horizontal','tabs')
   ?};
   {? _disp_condition
   || _after_refresh:="
         B_PORT.cntx_psh();
         B_PORT.index('UNIK');
         B_PORT.prefix(null(),B_PREL.ref(),null(),exec('kind_in','#b_port'));
         BPMN.E_TABLES:='';
         {? B_PORT.first()
         || {!
            |? {? B_PORT.C_EVENT='T'
               || BPMN.E_TABLES+='%1 [%2],'[(1-B_PORT.B_TYPE().SYMBOL),B_PORT.SYMBOL]
               ?};
               B_PORT.next()
            !};
            BPMN.E_TABLES-=1
         ?};
         B_PORT.cntx_pop();
         win_disp();
         ~~
      ";
      _tab.grp_edit(_grp,B_PREL,'EVE_COND','Własności zdarzenia'@,_after_refresh,,,1,'maximized','EVE_COND')
   ?};
   {? _disp_timers
   || _tab.grp_edit(_grp,B_TIMER,'WIN1','Własności zdarzenia startowego'@,,,,1,'maximized','WIN1');
      _tab.grp_edit(_grp,B_TIMER,'WIN2R','Własności zdarzenia startowego'@,,,,1,'maximized','WIN2R');
      _tab.grp_edit(_grp,B_TIMER,'WIN2Q','Własności zdarzenia startowego'@,,,,1,'maximized','WIN2Q');
      _tab.grp_edit(_grp,B_TIMER,'WIN2S','Własności zdarzenia startowego'@,,,,1,'maximized','WIN2S');
      _tab.grp_edit(_grp,B_TIMER,'WIN2O','Własności zdarzenia startowego'@,,,,1,'maximized','WIN2O');
      _tab.grp_edit(_grp,B_TIMER,'WIN2D','Własności zdarzenia startowego'@,,,,1,'maximized','WIN2D');
      _tab.grp_edit(_grp,B_TIMER,'WIN2T','Własności zdarzenia startowego'@,,,,1,'maximized','WIN2T');
      _tab.grp_edit(_grp,B_TIMER,'WIN2M','Własności zdarzenia startowego'@,,,,1,'maximized','WIN2M')
   ?};
   {? _disp_timeri
   || _disp:=B_TIMER.mk_edit();
      B_TIMER.win_ewin(_disp,IVAL_DEF,'RED','Planowane uruchomienie po okresie'@);
      B_TIMER.win_ewin(_disp,,'WORKER','Parametry dodatkowe'@);
      B_TIMER.win_ebtn(_disp,'text=%1,panel=bottom,align=begin,edit=0,display=1'['Popraw'@],"params_exec('btn_modify','#b_timer')");
      _after_refresh:="
         _env:=params_get().env;
         params_set(params_get());
         {? B_TIMER.IVAL_DEF<>null()
         || B_TIMER.IVAL_DEF()
         || IVAL_DEF.blank()
         ?};
         exec('edit_enablator','#interval',_env.WIN_EVE_TI,B_TIMER);
         win_disp();
         ~~
      ";
      _tab.grp_edit(_grp,B_TIMER,_disp,'Własności zdarzenia pośredniego'@,_after_refresh,,,1,'maximized','WINI');
      _env.WIN_EVE_TI:=_disp
   ?};
   {? _disp_sendmsg
   || SYS_MEMO.memo_set(
         'Wartości parametrów zdarzenia nadpiszą wartości domyślne.\n'
         'Treść zostanie umieszczona w wiadomości w znacznikach <pre>.',
         'SYS_MEMO'
      );
      _tab.grp_edit(_grp,B_MSG,'WINS','Własności zdarzenia'@,,,,1,'maximized','WINS')
   ?};
   {? _disp_signal
   || _after_refresh:="
         _category_throw:=exec('is_event','#b_event',B_PREL.B_ELE,,,exec('category_throw','#b_event'));
         {? B_PREL.B_SIGNAL=null()
         || B_PREL.btn_eopt({? _category_throw || 'EVE_SIG' || 'EVE_SIGC' ?},'LINKS','state=grayed')
         || B_PREL.btn_eopt({? _category_throw || 'EVE_SIG' || 'EVE_SIGC' ?},'LINKS','state=normal')
         ?};
         {? _category_throw |
            exec('is_event','#b_event',B_PREL.B_ELE,exec('type_intermed','#b_event'),,exec('category_catch','#b_event'))
         || B_SIGPRT.index('PRELTYP');
            B_SIGPRT.prefix(B_PREL.ref());
            grp_disp(B_SIGPRT,'WER')
         ?};
         ~~
      ";
      _category_throw:=exec('is_event','#b_event',_b_ele,,,exec('category_throw','#b_event'));
      _win:={? _category_throw || 'EVE_SIG' || 'EVE_SIGC' ?};
      _tab.grp_edit(_grp,B_PREL,_win,'Własności zdarzenia'@,_after_refresh,,,1,'maximized',_win);
      {? _category_throw |
         exec('is_event','#b_event',_b_ele,exec('type_intermed','#b_event'),,exec('category_catch','#b_event'))
      || _tab.tab_splt(_grp,,'horizontal','b_sigprt');
         _tab.grp_sel(_grp,B_SIGPRT,'WER',,,,,,,,,,'maximized')
      ?}
   ?};
   {? _disp_valprt
   || _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,
         "exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized_with_title',,{? ~_disp_sendmsg || 1 || 0 ?})
   ?};
   {? _disp_none
   || _tab.grp_edit(_grp,B_PREL,'EVE_SNON','Własności zdarzenia'@,,,,1,'maximized','EVE_SNON')
   ?};

   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;

::  Wyszarzanie przycisków
   _options:='state=normal';
   {? _env.INST>0
   || _options:='state=grayed'
   ?};
   {? _env.EDITABLE=0 & exec('is_event','#b_event',_b_ele,,,exec('category_catch','#b_event'))
   || _edit:=1;
      B_PORT.index('UNIK');
      B_PORT.prefix(null(),B_PREL.ref(),null(),exec('kind_out','#b_port'),);
      {? B_PORT.first()
      || {!
         |? _edit:=B_PORT.count()=0;
            _edit & B_PORT.next()
         !}
      ?};
      {? _edit=0 || _options:='state=grayed' ?};
      ~~
   ?};
   _tab.btn_eopt('EVE_SIG','POPRAW',_options);
   _tab.btn_eopt('EVE_SIGC','POPRAW',_options);
   _tab.btn_eopt('EVE_SNON','POPRAW',_options);
   _tab.btn_eopt('EVE_COND','POPRAW',_options);
   {? _disp_timers>0
   || B_TIMER.btn_eopt('WIN2R','MODIFY',_options);
      B_TIMER.btn_eopt('WIN2Q','MODIFY',_options);
      B_TIMER.btn_eopt('WIN2S','MODIFY',_options);
      B_TIMER.btn_eopt('WIN2D','MODIFY',_options);
      B_TIMER.btn_eopt('WIN2T','MODIFY',_options);
      B_TIMER.btn_eopt('WIN2M','MODIFY',_options);
      ~~
   ?};

:: Wyszarzanie pól
   {? exec('is_event','#b_event',_b_ele,exec('type_start','#b_event'),exec('kind_condition','#b_event'))>0
   || _tab.efld_opt('EVE_COND','enable=0',B_PREL,'COND_CHK');
      _tab.efld_opt('RED_COND','enable=0',B_PREL,'COND_CHK')
   || _tab.efld_opt('EVE_COND','enable=1',B_PREL,'COND_CHK');
      _tab.efld_opt('RED_COND','enable=1',B_PREL,'COND_CHK')
   ?};
   ~~
?};
~~


\grp_make4lane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okienko grupowe kreatora właściwości toru
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MODELER><PROCES><WERTOWANIE><TORY><WŁAŚCIWOŚCI>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=B_PREL;
{? _env.WIN_MAIN=''
||
   _title:=_env.tit_main;
   {? _env.EDITABLE=0
   || _title+=' — '+'PODGLĄD'@
   ?};
   _grpbefor:="~~";

   _grp:=_tab.grp_make(_title,_grpbefor,_env.wid_main,1,1,,,'normal');
   _tab.grp_edit(_grp,B_PREL,'LANE',,,,,,'maximized','red',1);
   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\grp_make4gate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Tworzy okienko grupowe właściwości bramy
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE><WŁAŚCIWOŚCI>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=B_PREL;

{? _env.WIN_MAIN=''
||
   _grpbefor:="
         _env:=VALPRT_CR;
         _env.TAB_IN.index(_env.INDEX_TAB_IN1);
         _env.TAB_IN.first();
         grp_disp(_env.TAB_IN,_env.WIN_IN);

         {? B_PREL.IVAL_DEF<>null()
         || B_PREL.IVAL_DEF()
         || IVAL_DEF.blank()
         ?};
         exec('edit_enablator','#interval',_env.WIN_ACT,B_PREL);

         grp_edisp(B_PREL,_env.WIN_ACT);
         grp_edisp(B_PREL,'ACTION');
         ~~
      ";

   _title:=_env.tit_main;
   {? _env.EDITABLE=0
   || _title+=' — '+'PODGLĄD'@
   ?};
   _grp:=_tab.grp_make(_title,_grpbefor,_env.wid_main,1,1,,,'normal');

   _tab.grp_edit(_grp,B_PREL,'ACTION',,,,,,'maximized','red',1);
   _tab.grp_splt(_grp,,'horizontal','tabs');

   _tab.grp_edit(_grp,B_PREL,_env.WIN_ACT,'Własności bramy'@,"params_exec('after_rfr_action','#b_valprt')",,,1,'maximized',,1);
   _tab.grp_sel(_grp,_env.TAB_IN,_env.WIN_IN,'Parametry'@,"exec('after_rfr_in','#b_valprt',VALPRT_CR)",,,,,,,,'maximized_with_title');

::  Wyszarzanie przycisków
   _options:='state=normal';
   {? _env.EDITABLE=0
   || _options:='state=grayed'
   ?};
   _env.win_act_edit:='aa2543173000000';
   {? _env.win_act_edit<>''
   ||
::    Przycisk popraw
      _tab.btn_eopt(_env.WIN_ACT,_env.win_act_edit,_options);
      ~~
   ?};

   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\tab_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy tabelkę tymczasową zawierającą porty
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::   WY: tab_tmp
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'TREE'     ,'TREE_REF'    ,'Struktura drzewka'
               ,'OPIS'     ,'STRING[100]' ,'Opis'
               ,'SYM_ELEM' ,'STRING[100]' ,'Symbol elementu do którego należy port'
               ,'REF_BELE' ,'STRING[16]'  ,'Ref SQL elementu ogólnego'
               ,'SYM_TYP'  ,'STRING[50]'  ,'Symbol typu'
               ,'NAM_TYP'  ,'STRING[50]'  ,'Nazwa typu'
               ,'REF_TYP'  ,'STRING[16]'  ,'Ref SQL typu źródłowego'
               ,'REF_PORT' ,'STRING[16]'  ,'Ref SQL portu'
               ,'SYM_PORT' ,'STRING[31]'  ,'Symbol portu'
               ,'NAM_PORT' ,'STRING[250]' ,'Nazwa portu'
               ,'REF_PREL' ,'STRING[16]'  ,'Ref SQL elementu procesu'
               ,'ACTIVE'   ,'STRING[1]'   ,'Czy port aktywny czy nie'
               ,'REQUIRED' ,'STRING[1]'   ,'Czy port wymaga połączenia'
               ,'POCONN'   ,'STRING[1]'   ,'Czy port jest powiązany'
               ,'MANUAL'   ,'STRING[1]'   ,'Czy możliwe ręczne ustawienie wartości'
               ,'POC_SIZE' ,'INTEGER'     ,'Ilość powiązań dla portu'
               ,'FML_VAL'  ,'STRING[255]' ,'Formuła dla wartości podawanej ręcznie'
               ,'REF_VALP' ,'STRING[16]'  ,'Ref SQL wartości portu'
               ,'FORMULA'  ,'STRING[255]' ,'Formuła na wartość'
               ,'VALUE'    ,'STRING[255]' ,'Przypisana wartość'
               ,'HAS_VAL'  ,'STRING[1]'   ,'Istnieje przypisana wartość'
               ,'KIND'     ,'STRING[1]'   ,'Rodzaj rekordu'
               ,'ASSIST'   ,'STRING[1]'   ,'Czy redagowanie ręczne ze wsparciem'
               ,'KEYREF'   ,'STRING[1]'   ,'Czy na podstawie portu tworzony jest rekord kluczowy'
               ,'C_EVENT'  ,'STRING[1]'   ,'Czy parametr służy do kontroli zdarzenia warunkowego'
               );
_env.INDEX_TAB_IN1:=_tab.ndx_tmp(,,'TREE',,,'OPIS',,);
_env.INDEX_TAB_IN2:=_tab.ndx_tmp(,,'REF_PREL',,,'REF_PORT',,);
_env.INDEX_TAB_IN3:=_tab.ndx_tmp(,,'KIND',,);
_tab


\win_in
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno tymczasowe zawierające porty wejściowe
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA><MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_IN;

_title:=exec('get_in_title','#b_valprt',_env);

_wer:=_tab.mk_sel(_title,'P',0,_env.wid_in,1,1,,1);
::_tab.win_fld(_wer,,'SYM_ELEM',,,20,,,'Element procesu',0);
_tab.win_fld(_wer,,'OPIS' ,,,50,,,'Opis'@,0);
::_tab.win_fld(_wer,,'SYM_PORT',,,15,,,'Parametr [symbol]',0);
_tab.win_fld(_wer,,'NAM_PORT',,,30,,,'Parametr [nazwa]'@,0);
_tab.win_fld(_wer,,'SYM_TYP',,,10,,,'Typ [symbol]'@,0);
_tab.win_fld(_wer,,'KEYREF',,,-5,,,'Kluczowy?'@,0,'Czy parametr tworzy rekord kluczowy?'@,2,,"\'T\'","\'N\'","\'\'");
_tab.win_fld(_wer,,'REQUIRED',,,-5,,,'Wymagany?'@,0,'Czy parametr jest wymagany?'@,2,,"\'T\'","\'N\'","\'\'");
_tab.win_fld(_wer,,'ASSIST',,,-5,,,'Wsparcie podczas redakcji ręcznej?'@,0,'Czy redagowanie wartości parametru jest wsparte programowo?'@,2,,"\'T\'","\'N\'");
::_tab.win_fld(_wer,,'POCONN' ,,,5,,,'Powiązany?',0,'Czy jest powiązanie z innym parametrem?',2,,"\'T\'","\'N\'");
::_tab.win_fld(_wer,,'HAS_VAL' ,,,5,,,'Wartość?',0,'Czy wartość jest przypisana ręcznie?',2,,"\'T\'","\'N\'");
_tab.win_fld(_wer,BPMN,'VALUE1',,,10,,,'Wartość'@,0,'Wartość przypisana ręcznie'@);

:: Akcje i przyciski

:: Popraw wartość
_tip_edit:='Uruchamia edycję wartości wybranego parametru.';
_fml_edit:="exec('win_in_edit_value','#b_valprt',VALPRT_CR)";
_tab.win_act(_wer,0,'Formuła','Popraw &wartość'@@,,_tip_edit,_fml_edit,,,,,,'W');
_name:='text=%1,panel=right,align=begin'['Popraw &wartość'@];
_env.win_in_btn_edit:=_tab.win_btn(_wer,_name,'menu:W',,,,,,'noempty');
_tab.btn_opt(_env.win_in_btn_edit,'tooltip="%1"'[_tip_edit]);
_tab.btn_opt(_env.win_in_btn_edit,'state=normal');

:: Czyść wartość
_fml_clean:="exec('win_in_clean_value','#b_valprt',VALPRT_CR)";
_tip_clean:='Czyści wartość wybranego parametru.'@;
_name:='text=%1,panel=right,align=begin'['Czyść wartość'@];
_env.win_in_btn_clean:=_tab.win_btn(_wer,_name,'menu:C',,,,,,'noempty');
_tab.btn_opt(_env.win_in_btn_clean,'tooltip="%1"'[_tip_clean]);
_tab.win_act(_wer,0,'Formuła','Czyść wartość'@@,,_tip_clean,_fml_clean,,,,,,'C');
_tab.btn_opt(_env.win_in_btn_clean,'state=normal');

{? _env.EDITABLE>0
||
:: Usuń
   _fml_del:="exec('win_in_usun','#b_valprt',VALPRT_CR)";
   _tip_del:='Usuwa dane zależnie od kontekstu'@;
   _name:='text=%1,panel=right,align=begin'['Usuń'@];
   _env.win_in_btn_delete:=_tab.win_btn(_wer,_name,'menu:U',,,,,,'noempty');
   _tab.btn_opt(_env.win_in_btn_delete,'tooltip="%1"'[_tip_del]);
   _tab.win_act(_wer,0,'Formuła','Usuń'@@,,_tip_del,_fml_del,,,,,,'U');
::   _tab.btn_opt(_env.win_in_btn_delete,'state=grayed');

:: Dołącz parametr
   _fml_addport:="VALPRT_CR.add_port()";
   _tip_addport:='Dołącza parametr.'@;
   _name:='text=%1,panel=right,align=begin'['Dołącz parametr'@];
   _env.win_in_btn_addport:=_tab.win_btn(_wer,_name,'menu:D',,,,,,'');
   _tab.btn_opt(_env.win_in_btn_addport,'tooltip="%1"'[_tip_addport]);
   _tab.win_act(_wer,0,'Formuła','Dołącz parametr'@@,,_tip_addport,_fml_addport,,,,,,'D');
   _tab.win_act(_wer,1,'Formuła','Dołącz parametr'@@,,_tip_addport,_fml_addport,,,,,,'D');
   _tab.btn_opt(_env.win_in_btn_addport,'state=normal');

:: Powiąż
   _fml_conn:="exec('win_in_conn','#b_valprt',VALPRT_CR)";
   _tip_conn:='Powiązanie parametru.'@;
   _name:='text=%1,panel=right,align=begin'['Powiąż'@];
   _env.win_in_btn_conn:=_tab.win_btn(_wer,_name,'menu:P',,,,,,'noempty');
   _tab.btn_opt(_env.win_in_btn_conn,'tooltip="%1"'[_tip_conn]);
   _tab.win_act(_wer,0,'Formuła','Powiąż'@@,,_tip_conn,_fml_conn,,1,,,,'P');

:: Usuń powiązanie
   _fml_conn:="
      _env:=VALPRT_CR;
      _TAB_IN:=_env.TAB_IN;

      _conn:=_env.B_CONN;
      _prel:=B_CONN.TO;
      B_CONN.cntx_psh();
      B_CONN.prefix();
      {? B_CONN.seek(_conn)
      ||
         {? exec('editable_poconn','#b_poconn')
         ||
            _port:=exec('FindAndGet','#table',B_PORT,_TAB_IN.REF_PORT,,,null());
            {? exec('delete4bconn','#b_poconn',B_CONN.ref(),_prel,_port)='T'
            ||
               exec('load_port','#b_valprt',_env,_prel);
               exec('seek_port','#b_valprt',_env)
            ?}
         ?}
      ?};
      B_CONN.cntx_pop()
   ";
   _tip_conn:='Usunięcie powiązania parametru.'@;
   _name:='text=%1,panel=right,align=begin'['Usuń p&owiązanie'@];
   _tab.win_act(_wer,0,'Formuła','Usuń p&owiązanie'@@,,_tip_conn,_fml_conn,,,,,,'O');
   _env.win_in_btn_conn_del:=_tab.win_btn(_wer,_name,'menu:O',,,,,,'noempty');
   _tab.btn_opt(_env.win_in_btn_conn_del,'tooltip="%1"'[_tip_conn]);

:: Rekord kluczowy -> włącz/wyłącz
   _fml_key_on:="
      _env:=VALPRT_CR;
      _TAB_IN:=_env.TAB_IN;
      _keyref:=exec('FindAndGet','#table',B_PORT,_TAB_IN.REF_PORT,,\"KEYREF:='T'; put(); KEYREF\",'');
      {? _keyref<>''
      || _TAB_IN.KEYREF:=_keyref;
         {? _TAB_IN.put()
         || _TAB_IN.cntx_psh();
            _TAB_IN.prefix(#_TAB_IN.ref());
            {? _TAB_IN.first()
            || _TAB_IN.KEYREF:=_keyref;
               _TAB_IN.put()
            ?};
            _TAB_IN.cntx_pop()
         ?}
      ?}
   ";
   _fml_key_off:="
      _env:=VALPRT_CR;
      _TAB_IN:=_env.TAB_IN;
      _keyref:=exec('FindAndGet','#table',B_PORT,_TAB_IN.REF_PORT,,\"KEYREF:='N'; put(); KEYREF\",'');
      {? _keyref<>''
      || _TAB_IN.KEYREF:=_keyref;
         {? _TAB_IN.put()
         || _TAB_IN.cntx_psh();
            _TAB_IN.prefix(#_TAB_IN.ref());
            {? _TAB_IN.first()
            || _TAB_IN.KEYREF:=_keyref;
               _TAB_IN.put()
            ?};
            _TAB_IN.cntx_pop()
         ?}
      ?}
   ";
   _tip_key:='Ustalenie, czy parametr tworzy rekord kluczowy czynności'@;
   _name:='text=%1,panel=right,align=begin'['&Rekord kluczowy'@];
   _env.win_in_btn_key:=_tab.win_btn(_wer,_name,'Menu',,,,,,'noempty');
   _tab.btn_opt(_env.win_in_btn_key,'tooltip="%1"'[_tip_key]);
   _tab.win_act(_wer,,'Menu','&Rekord kluczowy'@@,,_tip_key,,,,,,,'R');
   _tab.win_act(_wer,,'Formuła','&Włącz'@@,'#R',,_fml_key_on,,,,,,'W');
   _tab.win_act(_wer,,'Formuła','W&yłącz'@@,'#R',,_fml_key_off,,,,,,'Y');
   _tab.btn_menu(_wer,_env.win_in_btn_key,'menu:RW');
   _tab.btn_menu(_wer,_env.win_in_btn_key,'menu:RY');

:: Wyróżnij -> włącz/wyłącz
   _fml_c_event_on:="
      _env:=VALPRT_CR;
      _TAB_IN:=_env.TAB_IN;
      _c_event:=exec('FindAndGet','#table',B_PORT,_TAB_IN.REF_PORT,,\"C_EVENT:='T'; put(); C_EVENT\",'');
      {? _c_event<>''
      || _TAB_IN.C_EVENT:=_c_event;
         {? _TAB_IN.put()
         || _TAB_IN.cntx_psh();
            _TAB_IN.prefix(#_TAB_IN.ref());
            {? _TAB_IN.first()
            || _TAB_IN.C_EVENT:=_c_event;
               _TAB_IN.put()
            ?};
            _TAB_IN.cntx_pop()
         ?}
      ?}
   ";
   _fml_c_event_off:="
      _env:=VALPRT_CR;
      _TAB_IN:=_env.TAB_IN;
      _c_event:=exec('FindAndGet','#table',B_PORT,_TAB_IN.REF_PORT,,\"C_EVENT:='N'; put(); C_EVENT\",'');
      {? _c_event<>''
      || _TAB_IN.C_EVENT:=_c_event;
         {? _TAB_IN.put()
         || _TAB_IN.cntx_psh();
            _TAB_IN.prefix(#_TAB_IN.ref());
            {? _TAB_IN.first()
            || _TAB_IN.C_EVENT:=_c_event;
               _TAB_IN.put()
            ?};
            _TAB_IN.cntx_pop()
         ?}
      ?}
   ";
   _tip_c_event:='Ustalenie, czy parametr służy do kontroli zdarzenia'@;
   _name:='text=%1,panel=right,align=begin'['W&yróżnij'@];
   _env.win_in_btn_eve:=_tab.win_btn(_wer,_name,'Menu',,,,,,'noempty');
   _tab.btn_opt(_env.win_in_btn_eve,'tooltip="%1"'[_tip_c_event]);
   _tab.win_act(_wer,,'Menu','W&yróżnij'@@,,_tip_key,,,,,,,'Y');
   _tab.win_act(_wer,,'Formuła','&Włącz'@@,'#Y',,_fml_c_event_on,,,,,,'W');
   _tab.win_act(_wer,,'Formuła','W&yłącz'@@,'#Y',,_fml_c_event_off,,,,,,'Y');
   _tab.btn_menu(_wer,_env.win_in_btn_eve,'menu:YW');
   _tab.btn_menu(_wer,_env.win_in_btn_eve,'menu:YY');

   _b_ele:=exec('FindAndGet','#table',B_PREL,_env.B_PREL,,"B_PREL.B_ELE",null())
?};

_tab.win_act(_wer,,'Formuła','Zwiń/rozwiń'@@,,,"exec('zwrw_all','#tree',VALPRT_CR.TAB_IN,'TREE',VALPRT_CR.WIN_IN)",,,,,,'Z');
_tab.win_act(_wer,,'Kolejność');
_fb:="
   _tab:=cur_tab(1,1);
   _result:='';
   {? _tab.SYM_TYP='MEMO'
   || BPMN.VALUE1:=_tab.VALUE
   || BPMN.VALUE1:=exec('val2display1','#convert',($_tab.FORMULA)())
   ?};
   {? _tab.MANUAL='T'
   || _result:=Color.fnd_kol('B_VALPRT#01#01')
   ?};
   _result
";
_tab.win_act(_wer,,'Rekord',,,,_fb);
_fb:="
   _tab:=cur_tab(1,1);
   {? _tab.SYM_TYP='MEMO' & _tab.VALUE<>''
   || exec('FindAndGet','#table',B_VALPRT,_tab.REF_VALP,,\"memo_get(,'SYS_MEMO',0); memo_view(1,'SYS_MEMO')\")
   ?}
";
_tab.win_act(_wer,,'Wyświetl',,,,_fb);
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','@B_VALPRT#01')");

_tab.tr_fml(_wer,,"{? _a=-1 || 1 || _a ?}",);

_tab.win_fml(_wer,,'OPIS',,'ICON_BEFORE',"
   _result:='xwin16.png:76';
   _tab:=cur_tab(1,1);
   {? _tab.KIND='M' | _tab.KIND='C'
   || _result:='xwin16.png:42'
   |? _tab.KIND='P' | _tab.KIND='Z'
   || _result:='xwin16.png:38'
   ?};
   _result
   ");

_tab.win_sel(_wer);
_wer


\win_in_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Usuwa port dynamiczny
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_Tab:=_env.TAB_IN;

{? _Tab.POCONN='D' & exec('FindAndGet','#table',B_PORT,_Tab.REF_PORT,,"B_PORT.B_ELE",null())=null()
:: Usuń port dynamiczny
|| exec('del_port','#b_valprt',_env)
|| FUN.info('Opcja niedostępne dla tej pozycji.'@)
?}


\load_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Ładuje zawartość okna z portami wejściowymi
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::       _b - B_PREL.ref() - element procesu którego porty dodawac
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_b_prel:=_b;

_result:=0;
_can_continue:=1;

_tab:=_env.TAB_IN;
exec('tree_del','#tree',_tab,null());

B_POCONN.cntx_psh();
B_PORT.cntx_psh();
B_PREL.cntx_psh(); B_PREL.clear();
{? B_PREL.seek(_b_prel)
||
   B_PORT.index('B_ELE');
   B_PORT.prefix('T',B_PREL.B_ELE,exec('kind_in','#b_port'),);
   {? B_PORT.first()
   || {!
      |?
         _can_continue:=exec('port2tab','#b_valprt',_env,'TAB_IN',B_PREL.ref(),1);
         B_PORT.next() & _can_continue>0
      !}
   ?};
   B_PORT.index('UNIK');
   B_PORT.prefix(null(),_b_prel,null(),exec('kind_in','#b_port'),);
   {? _can_continue>0 & B_PORT.first()
   || {!
      |?
         {? _env.B_CONN
         ||
::          porty B_CONN - połączenia
            B_POCONN.index('B_CONN');
            B_POCONN.prefix(_env.B_CONN);
            _loop:=B_POCONN.first();
            {? _loop
            ||
::             parametr dodany dynamicznie na podstawie parametru wyjściowego czynności poprzedzającej
               {!
               |? _loop
               |!
                  _loop:=
                     {? B_POCONN.TO=B_PORT.ref()
                     ||
                        _can_continue:=exec('port2tab','#b_valprt',_env,'TAB_IN',B_PREL.ref(),1);
                        0
                     ||
                        B_POCONN.next()
                     ?}
               !}
            ||
::             parametr dodany dynamicznie wg definicji czynności (dotyczy czynności ZWS_EDI_UNIW)
               _can_continue:=exec('port2tab','#b_valprt',_env,'TAB_IN',B_PREL.ref(),1)
            ?}
         ||
::          porty B_PREL - czynności, zdarzenia, ...
            _can_continue:=exec('port2tab','#b_valprt',_env,'TAB_IN',B_PREL.ref(),1)
         ?};
         B_PORT.next() & _can_continue>0
      !}
   ?}
?};
B_PREL.cntx_pop();
B_PORT.cntx_pop();
B_POCONN.cntx_pop();

exec('port_tree_clean','#b_valprt',_env);

{? _can_continue>0
|| _result:=1
?};
_result


\port2tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje lub aktualizuje jeden rekord w tabeli .TAB_IN na podstawie aktualnego rekordu tabeli B_PORT
::       KONTEKST PRACY - B_PORT
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::       _b - STRING - nazwa tabeli do której dodawać
::       _c - B_PREL.ref() - element procesu do którego należy port
::       [_d] - INTEGER -  1 - dodawać info do KOMMa jeśli się nie udało zablokować B_PORT
::                        [0]- dodawać info na ekran
::   WY: 0 - nie udało sie dodać
::       1 - sukces, rekord został dodany lub poprawiony
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------

_env:=_a;
_tab_sym:=_b;
_b_prel:=_c;
_komm:=0;
{? var_pres('_d')=type_of(0)
|| _komm:=_d
?};
_result:=1;
_can_continue:=1;

:: Sprawdzam czy mogę zablokować B_PORTa
{? _env.EDITABLE>0
|| {? exec('lock','#b_port',B_PORT.ref(),0)=0
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? _tab_sym='TAB_IN'
   || _tab:=_env.TAB_IN;
      _ndx1:=_env.INDEX_TAB_IN1;
      _ndx2:=_env.INDEX_TAB_IN2
   || return(0)
   ?};
   B_PREL.cntx_psh();
   B_ELE.cntx_psh();
   B_TYPE.cntx_psh();
   B_POCONN.cntx_psh();
   B_POCONN.index('TO');
   B_VALPRT.cntx_psh();
   B_VALPRT.index('UNIK');
   {? B_PREL.seek(_b_prel)
   ||
      _tab.cntx_psh();
      _tab.index(_ndx2);
      _tab.prefix($_b_prel,$B_PORT.ref());
      {? _tab.first()=0
      || _tab.blank()
      ?};

      _tab.OPIS:=B_PORT.SYMBOL;
      _tab.REF_BELE:=$B_PORT.B_ELE;
      _tab.REF_PREL:=$B_PREL.ref();
      _tab.SYM_ELEM:=B_PREL.SYMBOL;
      _tab.REF_TYP:=$B_PORT.B_TYPE;
      _tab.SYM_TYP:=B_PORT.B_TYPE().SYMBOL;
      _tab.NAM_TYP:=B_TYPE.TYPE;
      _tab.REF_PORT:=$B_PORT.ref();
      _tab.SYM_PORT:=B_PORT.SYMBOL;
      _tab.NAM_PORT:=B_PORT.NAME;
      _tab.ACTIVE:=B_PORT.ACTIVE;
      _tab.FML_VAL:=B_PORT.FML_VAL;
      _tab.REQUIRED:=B_PORT.REQUIRED;
      _tab.KEYREF:=B_PORT.KEYREF;
      _tab.C_EVENT:=B_PORT.C_EVENT;

      B_VALPRT.prefix(B_PREL.ref(),B_PORT.ref());
      {? B_VALPRT.first()
      || _tab.HAS_VAL:='T';
         _tab.REF_VALP:=$B_VALPRT.ref();
         _tab.FORMULA:=B_VALPRT.FORMULA;
         _tab.VALUE:=B_VALPRT.VALUE;
         _tab.MANUAL:='T'
      || _tab.HAS_VAL:='N';
         _tab.REF_VALP:='';
         _tab.FORMULA:='';
         _tab.VALUE:='';
         {? _tab.FML_VAL<>'' | 1+B_PORT.B_TYPE().SYMBOL<>'_'
         || _tab.MANUAL:='T'
         || _tab.MANUAL:='N'
         ?}
      ?};
      {? _tab.FML_VAL<>'' | B_PORT.B_TYPE().SYMBOL='BLOB'
      || _tab.ASSIST:='T'
      || _tab.ASSIST:='N'
      ?};

      _root:=null();
      {? _tab.VALUE<>''
      || _root:=exec('get_port_root','#b_valprt',_env,'Z')
      |? _tab.MANUAL='T'
      || _root:=exec('get_port_root','#b_valprt',_env,'M')
      || _root:=exec('get_port_root','#b_valprt',_env,'C')
      ?};
      {? _root=null()
      || _can_continue:=0
      ?};

      {? _can_continue>0
      ||
         _tab.TREE:=_root;
         {? _tab.size()=0
         || _result:=_tab.add()
         || _result:=_tab.put()
         ?};
         _parent:={? _result || _tab.ref() || null() ?};
         _poc_size:=0;
         _tab.cntx_psh();
         _tab.index(_ndx1);
         _tab.prefix(_parent);
         _loop:=_tab.first();
         {!
         |? _loop
         |!
            _loop:=_tab.del()
         !};
         _tab.cntx_pop();
         _tab.prefix();
         _ediport:=0;
         {? B_PREL.ISTDEF & B_PORT.B_PREL
         ||
            _b_port:=($B_PREL.ISTDEF().FMMAIN)('ports',B_PREL.ref());

            _loop:=_b_port.first();
            {!
            |? _loop
            |!
               _ediport:=_b_port.KIND=B_PORT.KIND & _b_port.SYMBOL=B_PORT.SYMBOL;
               _loop:=_ediport=0 & _b_port.next()
            !}
         ?};
         _port_dyn:=B_PORT.B_ELE=null() & ~_ediport;
         B_POCONN.prefix(B_PORT.ref(),B_PREL.B_PROC,B_PREL.ref());
         _loop:=B_POCONN.first();
         {!
         |? _loop
         |!
            B_PORT.cntx_psh();
            B_PREL.cntx_psh();
            _tab.TREE:=_parent;
            _tab.OPIS:=
               'Wejście z: '+B_POCONN.B_CONN().FROM().SYMBOL+'.'
               +' Port :['+B_POCONN.PREL_SRC().SYMBOL+'].'
               +B_POCONN.FROM().SYMBOL;
            _tab.SYM_ELEM:=B_POCONN.PREL_SRC().SYMBOL;
            _tab.SYM_TYP:=B_POCONN.FROM().B_TYPE().SYMBOL;
            _tab.REF_PORT:=$B_POCONN.FROM;
            _tab.SYM_PORT:=B_POCONN.FROM().SYMBOL;
            _tab.NAM_PORT:=B_POCONN.FROM().NAME;
            _tab.ACTIVE:=B_POCONN.FROM().ACTIVE;
            _tab.REQUIRED:='';
            _tab.MANUAL:='N';
            _tab.POCONN:={? _port_dyn || 'D' || 'P' ?};
            B_ACTSTA.cntx_psh();
            B_ACTSTA.index('UNIK');
            B_ACTSTA.prefix();
            {? _env.B_CONN=null()
                  |
               _env.B_CONN=B_POCONN.B_CONN & ~B_ACTSTA.find_key(B_POCONN.PREL_SRC,B_POCONN.PREL_DST)
            ||
               _poc_size+=_tab.add()
            ?};
            B_ACTSTA.cntx_pop();
            B_PORT.cntx_pop();
            B_PREL.cntx_pop();
            _loop:=B_POCONN.next()
         !};
         {? _tab.seek(_parent)
         || _tab.POC_SIZE:=_poc_size;
            _tab.POCONN:=
               {? _tab.POC_SIZE
               || {? _port_dyn || 'D'  || 'T' ?}
               || 'N'
               ?};
             {? _tab.POC_SIZE>0
             || _tab.TREE:=exec('get_port_root','#b_valprt',_env,'P')
             ?};
            _tab.put()
         ?}
      ?};
      _tab.cntx_pop();
      _tab.get()
   ?};
   B_VALPRT.cntx_pop();
   B_POCONN.cntx_pop();
   B_TYPE.cntx_pop();
   B_ELE.cntx_pop();
   B_PREL.cntx_pop();
   exec('unlock','#b_port',B_PORT.ref())
|| B_ELE.cntx_psh();
   _msg:='Parametr: \'%1\' jest zablokowany przez innego użytkownika i nie został wczytany (element źródłowy: \'%2\')'@[B_PORT.SYMBOL+' '+B_PORT.NAME,B_PORT.B_ELE().SYMBOL];
   {? _komm>0
   || KOMM.add(_msg,'xwin16.png:2')
   || FUN.emsg(_msg)
   ?};
   B_ELE.cntx_pop()
?};
_result


\port_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Aktualizuje tabele tymczasowa .TAB_IN w oparciu o podany B_PORT
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::       _b - B_PORT.ref
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_b_port:=_b;
_result:=0;
B_PORT.cntx_psh(); B_PORT.clear();
{? B_PORT.seek(_b_port)
|| _result:=exec('port2tab','#b_valprt',_env,'TAB_IN',_env.B_PREL);
   exec('port_tree_clean','#b_valprt',_env)
?};
B_PORT.cntx_pop();
_result


\port_tree_clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Robi porządek w drzewie parametrów .TAB_IN
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_IN;

_can_continue:=1;

:: Usuwam puste gałęzie najwyższego poziomu
_tab.cntx_psh();
_tab.index(_env.INDEX_TAB_IN1);
_tab.prefix(null());
{? _tab.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      _tab.cntx_psh();
      {? _tab.next()
      || _ref_nxt:=_tab.ref()
      ?};
      _tab.cntx_pop();

      _can_del:=0;

      _tab.cntx_psh();
      _tab.prefix(_tab.ref());
      {? _tab.size()=0
      || _can_del:=1
      ?};
      _tab.cntx_pop();

      {? _can_del>0
      || _can_continue:=_tab.del(,1)
      ?};

      {? _ref_nxt<>null()
      || _next:=_tab.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
_tab.cntx_pop();
~~


\after_rfr_in
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Po odświeżeniu okna z portami wejściowymi
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_IN;
_env.SEL_PORT_IN:=exec('FindAndGet','#table',B_PORT,_tab.REF_PORT,,,null());

_edit:=_tab.POCONN='N';
_manual:=_tab.MANUAL='T';
_act1:=_act2:='';

{? _env.EDITABLE>0
||
:: &Usuń
   _del:=
      _tab.REF_PORT<>'' & exec('FindAndGet','#table',B_PORT,_tab.REF_PORT,,"B_PORT.B_ELE",null())=null()
      & _tab.FML_VAL<>'NOT_EDITABLE';
   {? _del=0 || _act1+='U' ?};

:: &Powiąż
   _b_ele:=exec('FindAndGet','#table',B_PREL,_env.B_PREL,,"B_PREL.B_ELE",null());
   _port:=exec('FindInSet','#table','B_PORT','UNIK',_b_ele);
   _conn:=0;
   {? _port & _env.CLASS='B_CONN'
   || _conn:=1
   ?};
   {? _conn=0 || _act1+='P' ?}
?};

:: Popraw &wartość
_update:=0;
{? _edit>0 & _env.LOCKED>0 & _manual>0 & _tab.FML_VAL<>'NOT_EDITABLE'
|| _update:=1
?};
{? _update=0 || _act1+='W' ?};

:: &Czyść wartość
_clean:=0;
{? _edit>0 & _env.LOCKED>0 & _tab.HAS_VAL='T' & _tab.FML_VAL<>'NOT_EDITABLE'
|| _clean:=1
?};
{? _clean=0 || _act1+='C' ?};

:: &Powiąż
_pow:=0;
{? _tab.POCONN='N' | _tab.POCONN='T'
|| _pow:=1
?};
{? _pow=0 | _env.B_CONN=null()
|| _act1+='P'
?};

:: Usuń p&owiązanie
_odw:=0;
{? (_tab.POCONN='N' | _tab.POCONN='T') & _tab.POC_SIZE
|| _odw:=1
?};
{? _odw=0 | _env.B_CONN=null()
|| _act1+='O'
?};

:: &Rekord kluczowy
_key:=0;
{? _env.LOCKED>0
   & _tab.REF_PORT<>''
   & 1+_tab.SYM_TYP='_'
   & exec('FindAndGet','#table',B_PREL,_tab.REF_PREL,,
       "B_PREL.CLASS='B_ACTION' & (B_ELE().SYMBOL='ZWS_MAN_UALL' | B_ELE().SYMBOL='ZWS_SER_VICE')",0
     )
   & exec('FindAndGet','#table',B_PORT,_tab.REF_PORT,,"B_ELE",null())=null()
|| _key:=1
?};
{? _key=0 || _act1+='R' ?};

:: &Rekord kluczowy -> &Włącz
_key_on:=0;
{? _tab.KEYREF='N' || _key_on:=1 ?};
{? _key_on=0 || _act1+='R(W)' ?};

:: &Rekord kluczowy -> W&yłącz
_key_off:=0;
{? _tab.KEYREF='T' || _key_off:=1 ?};
{? _key_off=0 || _act1+='R(Y)' ?};

:: W&yróżnij
_c_event:=0;
{? _env.LOCKED>0
   & _tab.REF_PORT<>''
   & 1+_tab.SYM_TYP='_'
   & exec('FindAndGet','#table',B_PREL,_tab.REF_PREL,,
       "B_PREL.CLASS='B_EVENT' &
           exec('is_event','#b_event',B_PREL.B_ELE,exec('type_intermed','#b_event'),exec('kind_condition','#b_event'))
       ",0
     )
   & _tab.POC_SIZE>0
|| _c_event:=1
?};
{? _c_event=0 || _act1+='Y' ?};

:: W&yróżnij -> &Włącz
_c_event_on:=0;
{? _tab.C_EVENT<>'T' || _c_event_on:=1 ?};
{? _c_event_on=0 || _act1+='Y(W)' ?};

:: W&yróżnij -> W&yłącz
_c_event_off:=0;
{? _tab.C_EVENT='T' || _c_event_off:=1 ?};
{? _c_event_off=0 || _act1+='Y(Y)' ?};

:: Wyszarzenie akcji
_tab.actions_grayed(_env.WIN_IN,_act1+':'+_act2);
~~


\win_in_edit_value
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Poprawa wartości parametru wejściowego
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MODELER><PROCES><REDAKCJA><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_result:=0;
_can_continue:=1;

_fml_val:=_env.TAB_IN.FML_VAL;
_type:=exec('FindAndGet','#table',B_TYPE,_env.TAB_IN.REF_TYP,,"SYMBOL",'');
_port:=_env.TAB_IN.SYM_PORT;

_proc_akc:=exec('FindAndGet','#table',B_PROC,_env.SEL_PROC,,"ACCEPTED",'');

_buffer:=exec('buffer','#b_valprt');

:: Wartość początkowa
{? _env.TAB_IN.SYM_TYP='MEMO'
|| _formula_in:=$_env.TAB_IN.FORMULA;
   _b_valprt:=exec('FindAndGet','#table',B_VALPRT,_env.TAB_IN.REF_VALP,,,null());
   {? _b_valprt<>null()
   || _buffer.cntx_get(_b_valprt,,1);
      _value_in:=_buffer.SYS_MEMO
   || _value_in:=''
   ?}
|| _formula_in:=$_env.TAB_IN.FORMULA;
   _value_in:=_formula_in()
?};

_valid:="";
:: Redagowanie za pomocą specjalizowanej formuły
{? _env.TAB_IN.FML_VAL<>''
|| _value_out:=($_env.TAB_IN.FML_VAL)(_value_in,_port);
:: Jeśli parametr jest stringiem to niedopuszczamy pustej wartości
   {? type_of(_value_out)=type_of('') & form(_value_out)=''
   || FUN.info('Wartość parametru nie może być pustym tekstem.'@);
      _can_continue:=0
   ?};
   {? type_of(_value_out)=type_of('') & _value_out='***clean***'
   || exec('delete_value_act','#b_valprt',_env,0);
      _value_out:=~~
   ?}
:: Standardowe redagowanie dla typów prostych
|? _type='STRING'
||
   _valid:="
      _result:='';
      {? form(cur_tab(1,1).VAL)=''
      || FUN.info('Wartość parametru nie może być pustym tekstem.'@);
         _result:='VAL'
      ?};
      _result
   ";
   _value_out:=exec('edit_string','#edit',_value_in,'Wartość parametru '+_port,_valid)
|? _type='NUMBER'
|| _value_out:=exec('edit_number','#edit',_value_in,'Wartość parametru '+_port)
|? _type='DATE'
||
   _valid:="
      _result:='';
      {? cur_tab(1,1).VAL=date(0,0,0)
      || FUN.info('Wartość parametru nie może być datą zerową.'@);
         _result:='VAL'
      ?};
      _result
   ";
   _value_out:=exec('edit_date','#edit',_value_in,'Wartość parametru '+_port,_valid)
|? _type='TIME'
|| _value_out:=exec('edit_time','#edit',_value_in,'Wartość parametru '+_port)
|? _type='MEMO'
|| _value_out:=exec('edit_memo','#edit',_value_in,'Wartość parametru '+_port,,,15)
|? _type='BLOB'
|| _value_out:=exec('edit','#bi_blob',_value_in)
:: Typ złączeniowy bez formuły
|| FUN.info('Redagowanie wartości parametru typu %1 nie jest obsługiwane.'@[_type]);
   _value_out:=~~
?};

{? _can_continue>0
||
:: Walidacja i konwersja na formułę
   {? type_of(_value_out)=type_of(~~)
   || _formula:=''
   |? 1+_type='_' & type_of(_value_out)=type_of(null()) & (_value_out=null() | ref_tab(_value_out)=($(1-_type))())
   || _formula:=exec('val2fml','#convert',_value_out,type_of(null()),1-_type)
   |? _type='STRING' & type_of(_value_out)=type_of('')
   || _formula:=exec('val2fml','#convert',_value_out,type_of(''))
   |? _type='NUMBER' & type_of(_value_out)=type_of(0)
   || _formula:=exec('val2fml','#convert',_value_out,type_of(0))
   |? _type='DATE' & type_of(_value_out)=type_of(date())
   || _formula:=exec('val2fml','#convert',_value_out,type_of(date()))
   |? _type='TIME' & type_of(_value_out)=type_of(time())
   || _formula:=exec('val2fml','#convert',_value_out,type_of(time()))
   |? _type='MEMO' & type_of(_value_out)=type_of('')
   || _formula:=exec('val2fml','#convert',_value_out,36)
   |? _type='BLOB' & type_of(_value_out)=type_of(null()) & (_value_out=null() | ref_tab(_value_out)=BI_BLOB)
   || _formula:=exec('val2fml','#convert',_value_out,type_of(null()),'BI_BLOB')
   || FUN.info('Niewłaściwy typ wyniku zwrócony przez formułę redagowania wartości parametru.'@);
      _formula:=''
   ?};
   {? _formula<>'' & _formula<>'null'
   || _b_valprt:=exec('FindAndGet','#table',B_VALPRT,_env.TAB_IN.REF_VALP,,,null());
      {? _b_valprt<>null()
      || _buffer.cntx_get(_b_valprt);
         _buffer.FORMULA:=_formula;
         {? _type='MEMO'
         || _buffer.VALUE:=exec('val2display','#convert',_value_out);
            _buffer.SYS_MEMO:=_value_out
         |? _type='BLOB'
         || _value:=($_formula)();
            _buffer.VALUE:=exec('val2display','#convert',_value);
            _buffer.BI_BLOB:=_value_out
         || _value:=($_formula)();
            {? type_of(_value)=type_of(null())
            || _value:=exec('FindAndGet','#table',ref_tab(_value),_value,,"uidref()",'')
            ?};
            _buffer.VALUE:=exec('val2display','#convert',_value)
         ?};
         _result:=exec('put','#b_valprt',_buffer,_b_valprt)
      || _buffer.B_PREL:=_env.B_PREL;
         _buffer.B_PORT:=_env.SEL_PORT_IN;
         _buffer.FORMULA:=_formula;
         {? _type='MEMO'
         || _buffer.VALUE:=exec('val2display','#convert',_value_out);
            _buffer.SYS_MEMO:=_value_out
         |? _type='BLOB'
         || _value:=($_formula)();
            _buffer.VALUE:=exec('val2display','#convert',_value);
            _buffer.BI_BLOB:=_value_out
         || _value:=($_formula)();
            {? type_of(_value)=type_of(null())
            || _value:=exec('FindAndGet','#table',ref_tab(_value),_value,,"uidref()",'')
            ?};
            _buffer.VALUE:=exec('val2display','#convert',_value)
         ?};
         {? exec('add','#b_valprt',_buffer)<>null()
         || _result:=1
         ?}
      ?};
      exec('port_update','#b_valprt',_env,_env.SEL_PORT_IN)
   ?}
?};
_result


\win_in_clean_value
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wyczyszczenie wartości parametru wejściowego
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_Tab:=_env.TAB_IN;

{? _Tab.HAS_VAL='T'
:: Usuń wartość
|| exec('delete_value_act','#b_valprt',_env)
|| FUN.info('Opcja niedostępne dla tej pozycji.'@)
?}


\delete_value_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - usunięcie wartości ręcznej
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::       [_b] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL><MODELER><PROCES><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_dialog:=1;
{? var_pres('_b')=type_of(0)
|| _dialog:=_b
?};

_result:=0;
_can_continue:=1;

_tab:=_env.TAB_IN;

_group:=0;
{? _tab.sel_size()>0
|| _group:=1;
   _dialog:=0
?};

{? _tab.VALUE<>''
|| {? _dialog>0
   || _can_continue:=FUN.ask('Usunąć wartość dla parametru: %1?'@[_tab.SYM_PORT])
   ?};
   {? _can_continue>0
   || _akc:=exec('FindAndGet','#table',B_PROC,_env.SEL_PROC,,"ACCEPTED",'');
      {? _akc='T' & _tab.REQUIRED='T'
      || FUN.emsg('Proces jest zaakceptowany, czyszczenie wartości wymaganych parametrów niedozwolone.'@);
         _can_continue:=0
      ?}
   ?};
   {? _can_continue>0
   || _result:=exec('delete','#b_valprt',_tab.REF_VALP);
      {? _result>0
      || _result:=exec('port_update','#b_valprt',_env,_tab.REF_PORT)
      ?}
   ?}
|| _msg:='Usunięcie wartości parametru: %1 zakończone niepowodzeniem, bo parametr nie ma określonej wartości.'@[_tab.SYM_PORT];
   {? _dialog>0
   || FUN.info(_msg)
   || KOMM.add(_msg,7)
   ?}
?};
_result


\test_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Testowa formuła do wyboru z tabeli _OSOBA
::   WE: [_a] - wartość początkowa
::       [_b] - nazwa parametru
::   WY: zredagowana wartość
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _osoba:=_a || _osoba:=null() ?};
{? var_pres('_b')=type_of('') || _name:=_b || _name:='' ?};
OSOBA.cntx_psh();
OSOBA.clear();
OSOBA.seek(_osoba);
{? _name=''
|| _wer:=OSOBA.mk_sel('Wybór osoby'@,,,'#wybierzosobe')
|| _wer:=OSOBA.mk_sel('Wybór osoby (parametr %1)'@[_name],,,'#wybierzosobe')
?};
OSOBA.win_fld(_wer,,'PIERWSZE');
OSOBA.win_fld(_wer,,'DRUGIE');
OSOBA.win_fld(_wer,,'NAZWISKO');
OSOBA.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
OSOBA.win_sel(_wer);
{? OSOBA.select(,1,5)
|| _res:=OSOBA.ref()
|| _res:=~~
?};
OSOBA.cntx_pop();
_res


\unlock_ports
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Odblokowuje wszystkie B_PORTy aktualnie zaladowane do okienka
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

B_PORT.cntx_psh();
B_PORT.clear();

:: Odblokowuje porty w tabelce przed brama
_tab_port:=_env.TAB_IN;
{? var_pres('_tab_port')=type_of(FIRMA)
|| _tab_port.cntx_psh();
   _tab_port.clear();
   {? _tab_port.first()
   || {!
      |? {? _tab_port.REF_PORT<>''
         ||
            {? B_PORT.seek(_tab_port.REF_PORT)
            || exec('unlock','#b_port',B_PORT.ref())
            ?}
         ?};
         _tab_port.next()
      !}
   ?};
   _tab_port.cntx_pop();
   obj_del(_tab_port)
?};
:: Odblokowuje porty elementów poprzedzających
_tab_port:=_env.TAB_PREV;
{? var_pres('_tab_port')=type_of(FIRMA)
|| _tab_port.cntx_psh();
   _tab_port.clear();
   {? _tab_port.first()
   || {!
      |? {? _tab_port.REF_PORT<>''
         ||
            {? B_PORT.seek(_tab_port.REF_PORT)
            || exec('unlock','#b_port',B_PORT.ref())
            ?}
         ?};
         _tab_port.next()
      !}
   ?};
   _tab_port.cntx_pop();
   ~~
?};
B_PORT.cntx_pop();
~~


\tab_prev
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Tworzy tabelke tymczasowa zawierajaca elementy przed elementem
::   WE: _a - env - srodowisko kreatora - wynik dzialania exec('env','#b_valprt')
::   WY: tab_tmp
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'PARENT'   ,'TREE_REF'    ,'Rodzic'
               ,'SYMBOL'   ,'STRING[100]' ,'Symbol elementu/symbol portu'
               ,'NAME'     ,'STRING[100]' ,'Nazwa elementu/nazwa portu'
               ,'TYPE'     ,'STRING[8]'   ,'Typ elementu: B_PREL,B_PORT'
               ,'REF_BELE' ,'STRING[16]'  ,'Ref SQL elementu ogólnego'
               ,'REF_PREL' ,'STRING[16]'  ,'Ref SQL elementu procesu'
               ,'REF_PORT' ,'STRING[16]'  ,'Ref SQL portu'
               ,'REF_TYP'  ,'STRING[16]'  ,'Ref SQL typu zrodlowego'

               ,'SYM_TYP'  ,'STRING[50]'  ,'Symbol typu'
               ,'NAM_TYP'  ,'STRING[50]'  ,'Nazwa typu'

               ,'SYM_PORT' ,'STRING[31]'   ,'Symbol portu'
               ,'NAM_PORT' ,'STRING[250]' ,'Nazwa portu'

               ,'ACTIVE'   ,'STRING[1]'   ,'Czy port aktywny czy nie'
               ,'REQUIRED' ,'STRING[1]'   ,'Czy port wymaga polaczenia'
               );
_env.IN_PREV2:=_tab.ndx_tmp(,,'PARENT',,,'REF_PORT',,);
_env.IN_PREV3:=_tab.ndx_tmp(,,'REF_PREL',,);
_tab


\load_prev
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Ładuje zawartość tabeli .TAB_PREV na podstawie aktualnego rekordu tabeli B_PREL
::       Uruchamia rownież dodawanie wszystkich portów wyjściowych
::   WE: _a - _env - środowisko designera exec('env','#b_valprt')
::       _b - B_PREL.ref() - element procesu dla którego ustalane są porty dochodzące z elementów poprzedzających
::       _c - B_CONN.ref() - połącznie dla którego ustalane są porty dochodzące
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_b_prel:=_b;
_b_conn:=_c;

_b_proc:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_PREL.B_PROC",null());

B_PREL.cntx_psh();
B_PREL.index('PROC');
{! _ii:=1..2
|!
   {? _ii=1 || B_PREL.prefix(_b_proc,'B_ACTION') || B_PREL.prefix(_b_proc,'B_EVENT') ?};
   _loop:=B_PREL.first();
   {!
   |? _loop
   |!
      B_PREL.cntx_psh();
      {? exec('isConn','#b_prel',B_PREL.ref(),_b_prel,null(),'',null(),_b_conn,0)
      ||
         exec('prel2prev','#b_valprt',_env,1)
      ?};
      B_PREL.cntx_pop();
      _loop:=B_PREL.next()
   !}
!};
B_PREL.cntx_pop();
1


\prel2prev
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Dodaje jeden rekord do tabeli .TAB_PREV na podstawie aktualnego rekordu tabeli B_PREL
::       Uruchamia rowniez dodawanie wszystkich portow wyjsciowych
::   WE: _a - _env - srodowisko designera exec('env','#b_choice')
::       [_b] - INTEGER -  1 - dodawac info do KOMMa jesli sie nie udalo zablokowac B_PORT
::                        [0]- dodawac info na ekran
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_komm:=0;
{? var_pres('_b')=type_of(0)
|| _komm:=_b
?};
_result:=0;
_can_continue:=1;

_tab:=_env.TAB_PREV;
_tab.cntx_psh();
_tab.index(_env.IN_PREV3);
_tab.prefix($B_PREL.ref());
{? _tab.size()=0
||
   _tab.blank();
   _tab.PARENT:=0;
   _tab.TYPE:='B_PREL';
   _tab.SYMBOL:=B_PREL.SYMBOL;
   _tab.NAME:=B_PREL.B_ELE().SYMBOL;
   _tab.REF_BELE:=$B_PREL.B_ELE;
   _tab.REF_PREL:=$B_PREL.ref();
   _result:=_tab.add();

   {? _result>0
   ||
::    Udało się dodać element procesu, dodaje jego porty (stałe)
      B_PORT.index('B_ELE');
      B_PORT.prefix('T',B_ELE.ref(),exec('kind_out','#b_port'),);
      {? B_PORT.first()
      || {!
         |? _can_continue:=exec('port2tab1','#b_valprt',_env,_tab.ref(),B_PREL.ref(),_komm);
            B_PORT.next() & _can_continue>0
         !}
      ?};
::    Udało się dodać element procesu, dodaje jego porty (dynamiczne)
      B_PORT.index('UNIK');
      B_PORT.prefix(null(),B_PREL.ref(),null(),exec('kind_out','#b_port'),);
      {? B_PORT.first()
      || {!
         |? _can_continue:=exec('port2tab1','#b_valprt',_env,_tab.ref(),B_PREL.ref(),_komm);
            B_PORT.next() & _can_continue>0
         !}
      ?};
::    Usunięcie elementu, który nie ma portów wyjściowych
      _tab.cntx_psh();
      _tab.index(_env.IN_PREV2);
      _tab.prefix(_tab.ref(),$B_PORT.ref());
      _del:=_tab.size()=0;
      _tab.cntx_pop();
      {? _del || _tab.del() ?}
   ?}
?};
{? _can_continue>0
|| _result:=1
?};
_tab.cntx_pop();
_result


\port2tab1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Dodaje jeden rekord do tabeli .TAB_PREV na podstawie aktualnego rekordu
::       tabeli B_PORT
::       KONTEKST PRACY - B_PORT
::   WE: _a - _env - srodowisko designera exec('env','#b_choice')
::       _b - .TAB_FROM.ref() - ref rekordu nadrzednego
::       _c - B_PREL.ref() - element procesu do ktorego nalezy port
::       [_d] - INTEGER -  1 - dodawac info do KOMMa jesli sie nie udalo zablokowac B_PORT
::                        [0]- dodawac info na ekran
::   WY: 0 - nie udalo sie dodac
::       1 - sukces, rekord zostal dodany
::       2 - rekord nie zostal dodany bo taki port juz jest w tabeli
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_parent:=_b;
_b_prel:=_c;

_komm:=0;
{? var_pres('_d')=type_of(0)
|| _komm:=_d
?};

_result:=1;
_can_continue:=1;

_tab:=_env.TAB_PREV;

B_TYPE.cntx_psh();

{? _can_continue>0
||
:: Sprawdzam czy moge zablokowac B_PORTa
   {? _env.EDITABLE>0
   || {? exec('lock','#b_port',B_PORT.ref(),0)=0
      || _can_continue:=0
      ?}
   ?};

   {? _can_continue>0
   ||
      B_ELE.cntx_psh();
      _tab.cntx_psh();
      _tab.index(_env.IN_PREV2);
      _tab.prefix(_parent,$B_PORT.ref());
      {? _tab.size()=0
      ||
         _tab.blank();
         _tab.PARENT:=_parent;
         _tab.TYPE:='B_PORT';
         _tab.SYMBOL:=B_PORT.SYMBOL;
         _tab.NAME:=B_PORT.NAME;
         _tab.REF_BELE:=$B_PORT.B_ELE;
         _tab.REF_PREL:=$_b_prel;
         _tab.REF_TYP:=$B_PORT.B_TYPE;
         _tab.SYM_TYP:=B_PORT.B_TYPE().SYMBOL;
         _tab.NAM_TYP:=B_TYPE.TYPE;
         _tab.REF_PORT:=$B_PORT.ref();
         _tab.SYM_PORT:=B_PORT.SYMBOL;
         _tab.NAM_PORT:=B_PORT.NAME;
         _tab.ACTIVE:=B_PORT.ACTIVE;
         _tab.REQUIRED:=B_PORT.REQUIRED;
         _result:=_tab.add()
      || _result:=2
      ?};
      exec('unlock','#b_port',B_PORT.ref());
      _tab.cntx_pop();
      B_ELE.cntx_pop()
   || B_ELE.cntx_psh();
      _msg:='Parametr: \'%1\' jest zablokowany przez innego użytkownika i nie został wczytany (element źródłowy: \'%2\')'@[B_PORT.SYMBOL+' '+B_PORT.NAME,B_PORT.B_ELE().SYMBOL];
      {? _komm>0
      || KOMM.add(_msg,'xwin16.png:2')
      || FUN.emsg(_msg)
      ?};
      B_ELE.cntx_pop()
   ?}
?};
B_TYPE.cntx_pop();
_result


\win_prev
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Tworzy okno tymczasowe zawierajace elementy przed elementem
::   WE: _a - env - srodowisko kreatora - wynik dzialania exec('env','#b_valprt')
::   WY: STRING - uchwyt do okna
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_PREV;

_wer:=_tab.mk_sel(_env.tit_prev,'P',0,_env.wid_prev,1,1,,1);
_tab.win_fld(_wer,,'SYMBOL'   ,,,20,,,'Symbol'@,0);
_tab.win_fld(_wer,,'NAME'     ,,,20,,,'Nazwa'@,0);
_tab.win_fld(_wer,,'SYM_TYP' ,,,10,,,'Typ [symbol]'@,0);
_tab.win_fld(_wer,,'REQUIRED' ,,,5,,,'Wymagany?'@,0,,2,,"\'T\'","\'N\'");

_formula:=" _env:=VALPRT_CR;
            _result:='';
            _tab:=cur_tab(1,1);

            {? _tab.TYPE='B_PORT'
            ||
::             Ikona portu
               {? _tab.SYM_TYP='STRING' | _tab.SYM_TYP='NUMBER' | _tab.SYM_TYP='MEMO'
               || _result:='xwin16.png:28'
               || _result:='xwin16.png:8'
               ?}
            ||
               _b_ele:=exec('FindAndGet','#table',B_ELE,_tab.REF_BELE,,,null());
               _result:=exec('icon','#b_ele',_b_ele)
            ?};
            _result";
_tab.win_fml(_wer,,'SYMBOL',,'ICON_BEFORE',_formula);

_fb:="sel_exit()";
_tab.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,1,,,,'W');
_tab.win_act(_wer,,'Kolejność');

_formula:="exec('legenda','#b_choice')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

_formula:="
   _Tab:=cur_tab(1,1);
   {? _Tab.PARENT || _Tab.actions_grayed(_Tab.win_sel('?'),'') || _Tab.actions_grayed(_Tab.win_sel('?'),'W') ?}
   ";
_tab.win_act(_wer,,'Rekord',,,,_formula);

_tab.win_sel(_wer);
_wer


\win_in_add_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Dodaje dynamiczny port wejściowy
::   WE: _a - env - środowisko kreatora - wynik działania exec('env','#b_valprt')
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_prel_dst:=_env.B_PREL;
_port_dst:=null();

_Tab:=_env.TAB_PREV;
_prel_src:=exec('FindAndGet','#table',B_PREL,_Tab.REF_PREL,,,null());
_port_src:=exec('FindAndGet','#table',B_PORT,_Tab.REF_PORT,,,null());
_port_akt:=exec('FindAndGet','#table',B_PORT,_Tab.REF_PORT,,"ACTIVE",'');

:: 0-tryb sprawdzenia ciągłości trasy, 1-tryb zapisu trasy
_mode:=1;
:: Proces
_b_proc:=exec('FindAndGet','#table',B_PREL,$_prel_dst,,"B_PREL.B_PROC",null());
:: Bufor połączeń portów (B_POCONN)
_buf_b_poconn:=exec('buffer','#b_poconn');

{? _port_src=null()
:: Dodanie wszystkich portów elementu
|| FUN.info('Brak parametru wyjściowego elementu.'@)
:: Dodanie pojedynczego portu
||
:: Ustalenie portu docelowego dla portu źródłowego
   _port_dst:=exec('portdst4portsrc','#b_poconn',_b_proc,_prel_src,_port_src,_prel_dst);
   {? _port_dst
:: Jest już powiązany port docelowy
   || FUN.info('Parametr jest już powiązany.'@)
   |? _port_akt<>'T'
   || FUN.info('Parametr jest nieaktywny.'@)
:: Brak powiązanego portu docelowego
   || _refresh:=0;
      do();
::    Dodanie portu wejściowego odpowiadającego portowi wyjściowemu
      _port_dst:=exec('add_port2prel','#b_port',_port_src,_prel_dst);

      {? _port_dst=null()
::       Nie powiodło się dodanie portu wejściowego
      || undo()
::       Dodanie powiązań portów i utworzenie tras
      || B_CONN.cntx_psh();
         B_CONN.index('TO');
         B_CONN.prefix(_b_proc,_prel_dst);
         _loop:=B_CONN.first();
         {!
::       Iteracja po wszystkich połączeniach przychodzących do elementu
         |? _loop
         |!
            {? exec('isConn','#b_prel',_prel_src,_prel_dst,null(),'',null(),B_CONN.ref(),0)
            ||
::             Jest połączenie przez B_CONN.ref() dla portu dynamicznego dlatego
::             dodanie połączenia portu wyjściowego elementu źródlowego z elementem docelowym
               _b_conn:=B_CONN.ref();
               _buf_b_poconn.blank(1);
               _buf_b_poconn.B_PROC:=_b_proc;
               _buf_b_poconn.B_CONN:=_b_conn;
               _buf_b_poconn.FROM:=_port_src;
               _buf_b_poconn.TO:=_port_dst;
               _buf_b_poconn.PREL_SRC:=_prel_src;
               _buf_b_poconn.PREL_DST:=_prel_dst;
               _b_poconn:=exec('add','#b_poconn',_buf_b_poconn);
::             Usunięcie tras dla połączenia
               exec('route_delete4bpoconn','#b_proute',_b_poconn);
::             Utworzenie tras portów wyjściowych elementu źródłowego do elementu docelowego
               _wyn:=exec('route_create4bpoconn','#b_proute',_mode,_b_proc,_b_conn,_b_poconn,_prel_src,_prel_dst);
               {? _wyn=0
               || exec('delete','#b_poconn',_b_poconn,0)
               ?}
            ?};
            _loop:=B_CONN.next()
         !};
         B_CONN.cntx_pop();
         _refresh:=1
      ?};
      end();

      {? _refresh>0
      ||
::       Dodanie odpowiednika portu wejściowego do tabeli tymczasowej
         exec('FindAndGet','#table',B_PORT,$_port_dst,,
            "exec('port2tab','#b_valprt',VALPRT_CR,'TAB_IN',VALPRT_CR.B_PREL)",0)
      ?}
   ?}
?}


\del_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Usuwa dynamiczny port wejściowy
::   WE: _a - env - srodowisko kreatora - wynik dzialania exec('env','#b_valprt')
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

:: Uchwyt do tabeli parametrami wejściowymi elementu
_Tab:=_env.TAB_IN;

{? exec('FindAndGet','#table',B_PORT,_Tab.REF_PORT,,"B_PORT.B_ELE",null())
:: Jeśli B_PORT.B_ELE<>null to jest to parametr stały i nie można go usunąć
|| FUN.info('Nie jest to parametr dodany "ręcznie".\nUsunięcie niemożliwe.'@);
   return()
?};

{? ~FUN.ask('Usunąć parametr?'@) || return() ?};

:: Element docelowy
_prel_dst:=_env.B_PREL;
:: Port docelowy
_port_dst:=exec('FindAndGet','#table',B_PORT,_Tab.REF_PORT,,,null());
:: Proces
_b_proc:=exec('FindAndGet','#table',B_PREL,$_prel_dst,,"B_PREL.B_PROC",null());

do();

B_POCONN.cntx_psh();
B_POCONN.index('TO');
B_POCONN.prefix(_port_dst,_b_proc);
_loop:=B_POCONN.first();
{!
|? _loop
:: Iteracja po połączeniach do parametru docelowego
|!
:: Usunięcie połączenia
   exec('delete','#b_poconn',B_POCONN.ref());
   _loop:=B_POCONN.next()
!};
B_POCONN.cntx_pop();
:: Usunięcie parametru docelowego
_Tab.cntx_psh();
_Tab.prefix(_Tab.ref());
_loop:=_Tab.first();
{!
|? _loop
|!
   _loop:=_Tab.del()
!};
_Tab.cntx_pop();
_Tab.del();

end()


\win_in_conn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wiązanie parametrów wejściowych z wyjściowymi elementów poprzedzających
::   WE: _a - env - srodowisko kreatora - wynik dzialania exec('env','#b_valprt')
::       [_b] - tabela tymczasowa obsługująca akcję
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=~~;
{? var_pres('_b')>100
|| _tab:=_b
|| _tab:=_env.TAB_IN
?};

_conn:=_env.B_CONN;

{? _env.B_CONN=null() || return() ?};

B_CONN.cntx_psh();
B_CONN.prefix();
{? B_CONN.seek(_conn)
|| {? exec('editable_poconn','#b_poconn')
   ||
      {? 1
      ||
::       nowe
         _b_port:=exec('FindAndGet','#table',B_PORT,_tab.REF_PORT,,,null());
         _ret_typ:=_tab.REF_TYP;
         {? _b_port=null() | exec('FindAndGet','#table',_tab,_tab.TREE,,"KIND=''",0)
         ||
            FUN.info('Wskaż parametr wejściowy.'@)
         ||
            {? exec('select4conn','#b_poconn',B_CONN.ref(),2,_b_port)=1
            ||
               exec('load_port','#b_valprt',_env,B_CONN.TO);
               exec('seek_port','#b_valprt',_env)
            ?}
         ?};
         ~~
      ||
::       stare
         {? exec('select4conn','#b_poconn',B_CONN.ref(),2)=1
         || exec('load_port','#b_valprt',_env,B_CONN.TO)
         ?}
      ?}
   ||
      _msg:='Funkcja dostępna tylko dla połączeń, które zaczynają się w elemencie typu: brama/czynność, '
            'a kończą się w elemencie typu: czynność.'@;
      FUN.emsg(_msg)
   ?}
?};
B_CONN.cntx_pop()


\after_rfr_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Po odświeżeniu okienka redakcyjnego czynności w grupie
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
params_set(params_get());
{? B_PREL.IVAL_DEF<>null()
|| B_PREL.IVAL_DEF()
|| IVAL_DEF.blank()
?};

exec('edit_enablator','#interval',_env.WIN_ACT,B_PREL);
win_disp();
~~


\gate_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Właściwości bramy - Popraw
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
B_PREL.win_edit('GATECOMR');
{? B_PREL.edit()
|| B_PREL.put()
?};
''


\get_port_root
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca dla tabeli portów węzeł nadrzędny typu: wymaga połączenia, jeżeli jeszcze go nie ma to dodaje
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::       _b - STRING - typ węzła: 'C' - do powiązania
::                                'M' - do redakcji
::                                'P' - powiązane
::                                'Z' - zredagowane ręcznie
::
::   WY: ref węzła na
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_kind:=_b;

params_set(params_get());

_result:=null();

_tab:=_env.TAB_IN;
_tab.cntx_psh();
_tab.index(_env.INDEX_TAB_IN3);
_tab.prefix(_kind);
{? _tab.first()
|| _result:=_tab.ref()
||

   _tab.blank();
   _tab.REQUIRED:='N';
   _tab.MANUAL:='N';
   _tab.KIND:=_kind;
   {? _kind='C'
   || _tab.OPIS:='Do powiązania'
   |? _kind='M'
   || _tab.OPIS:='Do redakcji lub powiązania'
   |? _kind='P'
   || _tab.OPIS:='Powiązane'
   |? _kind='Z'
   || _tab.OPIS:='Zredagowane ręcznie'
   ?};
   {? _tab.add()
   || _result:=_tab.ref()
   ?}
?};
_tab.cntx_pop();
_result


\get_in_title
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca tytuł dla okna z parametrami
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::   WY: STRING - tytuł dla okienka
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_result:='Parametry wejściowe'@;

_class:=exec('FindAndGet','#table',B_PREL,$._env.B_PREL,,"B_PREL.CLASS",'');
_typ:=
   {? _class='B_ACTION' || 'czynności'@
   |? _class='B_EVENT'  || 'zdarzenia'@
   |? _class='B_GATE'   || 'bramy'@
                        || ''
   ?};
_symbol:=exec('FindAndGet','#table',B_PREL,$._env.B_PREL,,"B_PREL.SYMBOL",'');
{? _symbol=''
|| _symbol:='nienazwana'@
?};
_result:=_result+' '+_typ+': '+_symbol;
_result


\seek_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.02]
:: OPIS: Przesunięcie na port do powiązania
::   WE: _a - env - srodowisko kreatora - wynik dzialania exec('env','#b_valprt')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_TAB_IN:=_env.TAB_IN;
_opis:=_TAB_IN.OPIS;
_loop:=_TAB_IN.first();
{!
|? _loop
|!
   _loop:=
      {? _TAB_IN.OPIS='Do powiązania'
      ||
         _TAB_IN.find_key(#_TAB_IN.ref()); 0

      |? _TAB_IN.OPIS='Do redakcji lub powiązania'
      ||
         _TAB_IN.find_key(#_TAB_IN.ref()); 0
      ||
         _TAB_IN.OPIS<>_opis & _TAB_IN.next()
      ?}
!}


\add_poconn4dynamic_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Dodaje powiązania portów dynamicznych dla połączenia _a
::   WE: _a - B_CONN.ref()
::       _b - B_PREL.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_b_conn:=_a;

_prel_dst:=exec('FindAndGet','#table',B_CONN,_b_conn,,"B_CONN.TO",null());
:: Proces
_b_proc:=exec('FindAndGet','#table',B_PREL,_prel_dst,,"B_PREL.B_PROC",null());
:: 0-tryb sprawdzenia ciągłości trasy, 1-tryb zapisu trasy
_mode:=1;

:: Bufor połączeń portów (B_POCONN)
_buf_b_poconn:=exec('buffer','#b_poconn');

B_PORT.cntx_psh();
B_PORT.index('UNIK');
B_PORT.prefix(null(),_prel_dst,null());
_loop:=B_PORT.first();
{!
|? _loop
|!
   _port_dst:=B_PORT.ref();
   _port_src:=exec('FindInSet','#table','B_POCONN','TO',_prel_dst,_port_dst,"B_POCONN.FROM",,_b_proc,null());
   _prel_src:=exec('FindInSet','#table','B_POCONN','TO',_prel_dst,_port_dst,"B_POCONN.PREL_SRC",,_b_proc,null());
   {? _port_src
      & _prel_src
      & exec('isConn','#b_prel',_prel_src,_prel_dst,null(),'',null(),_b_conn,0)
   ||
::    Dodanie połączenia portu wyjściowego elementu źródlowego z elementem docelowym
      _buf_b_poconn.blank(1);
      _buf_b_poconn.B_PROC:=_b_proc;
      _buf_b_poconn.B_CONN:=_b_conn;
      _buf_b_poconn.FROM:=_port_src;
      _buf_b_poconn.TO:=_port_dst;
      _buf_b_poconn.PREL_SRC:=_prel_src;
      _buf_b_poconn.PREL_DST:=_prel_dst;
      _b_poconn:=exec('add','#b_poconn',_buf_b_poconn);
::    Usunięcie tras dla połączenia
      exec('route_delete4bpoconn','#b_proute',_b_poconn);
::    Utworzenie tras portów wyjściowych elementu źródłowego do elementu docelowego
      _wyn:=exec('route_create4bpoconn','#b_proute',_mode,_b_proc,_b_conn,_b_poconn,_prel_src,_prel_dst);
      {? _wyn=0
      || exec('delete','#b_poconn',_b_poconn,0)
      ?}
   ?};
   _loop:=B_PORT.next()
!};
B_PORT.cntx_pop()


\tab_portgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy tabelkę tymczasową zawierającą komplety portów
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::   WY: tab_tmp
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'TREE'     ,'TREE_REF'    ,'Struktura drzewka'
               ,'OPIS'     ,'STRING[100]' ,'Opis'
               ,'SYM_ELEM' ,'STRING[100]' ,'Symbol elementu do którego należy port'
               ,'REF_BELE' ,'STRING[16]'  ,'Ref SQL elementu ogólnego'
               ,'SYM_TYP'  ,'STRING[50]'  ,'Symbol typu'
               ,'NAM_TYP'  ,'STRING[50]'  ,'Nazwa typu'
               ,'REF_TYP'  ,'STRING[16]'  ,'Ref SQL typu źródłowego'
               ,'REF_PORT' ,'STRING[16]'  ,'Ref SQL portu'
               ,'SYM_PORT' ,'STRING[31]'  ,'Symbol portu'
               ,'NAM_PORT' ,'STRING[250]' ,'Nazwa portu'
               ,'REF_PREL' ,'STRING[16]'  ,'Ref SQL elementu procesu'
               ,'CONNECT'  ,'INTEGER'     ,'Powiązany?'
               ,'OK'       ,'INTEGER'     ,'Ok?'
               ,'LP'       ,'INTEGER'     ,'Numer grupy'
               ,'KIND'     ,'STRING[1]'   ,'Rodzaj rekordu'
               ,'POCONN'   ,'STRING[1]'   ,'Rodzaj portu P - normalny, D - dynamiczny'
               ,'POC_SIZE' ,'INTEGER'     ,'Ilość B_POCONNÓW'
               ,'FML_VAL'  ,'STRING[255]' ,'Formuła dla wartości podawanej ręcznie'
               ,'MANUAL'   ,'STRING[1]'   ,'Czy możliwe ręczne ustawienie wartości'
               );
_env.INDEX_TAB_PGR1:=_tab.ndx_tmp(,,'TREE',,,'LP',,,'OPIS',,);
_env.INDEX_TAB_PGR2:=_tab.ndx_tmp(,,'LP',,,'OPIS',,);
_env.INDEX_TAB_PGR3:=_tab.ndx_tmp(,,'KIND',,,'LP',,);
_tab


\win_portgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy okno tymczasowe zawierające porty wejściowe
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA><MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_PORTGR;

_title:=_env.tit_portgr;

_wer:=_tab.mk_sel(_title,'P',0,_env.wid_portgr,1,1,,1);
_tab.win_fld(_wer,,'OPIS' ,,,50,,,'Opis'@,0);
_tab.win_fld(_wer,,'NAM_PORT',,,30,,,'Parametr [nazwa]'@,0);
_tab.win_fld(_wer,,'SYM_TYP',,,10,,,'Typ [symbol]'@,0);

{? _env.B_CONN<>null()
||
:: Właściwości strzałki, dostępna kolumna Ok
   _tab.win_fld(_wer,,'OK',,,10,,,'Ok?'@,0,'Czy parametr/komplet zweryfikowany poprawnie'@,2,,"2","0","1")
||
:: Właściwości elementu w procesie, zamiast kolumny Ok jest info czy są połączenia
   _tab.win_fld(_wer,,'CONNECT',,,10,,,'Powiązany?'@,0,'Czy parametr/komplet powiązany'@,2,,"2","0","1")
?};

:: Powiąż
   _fml_conn:="exec('win_in_conn','#b_valprt',VALPRT_CR,VALPRT_CR.TAB_PORTGR);
               exec('load_portgr','#b_valprt',VALPRT_CR,VALPRT_CR.B_PREL,VALPRT_CR.B_CONN,1)
   ";
   _tip_conn:='Powiązanie parametru.'@;
   _name:='text=%1,panel=right,align=begin'['Powiąż'@];
   _env.win_in_btn_conn:=_tab.win_btn(_wer,_name,'menu:P',,,,,,'noempty');
   _tab.btn_opt(_env.win_in_btn_conn,'tooltip="%1"'[_tip_conn]);
   _tab.win_act(_wer,0,'Formuła','Powiąż'@@,,_tip_conn,_fml_conn,,1,,,,'P');

:: Usuń powiązanie
   _fml_conn:="
      _env:=VALPRT_CR;
      _tab:=_env.TAB_PORTGR;

      _conn:=_env.B_CONN;
      _prel:=B_CONN.TO;
      B_CONN.cntx_psh();
      B_CONN.prefix();
      {? B_CONN.seek(_conn)
      ||
         {? exec('editable_poconn','#b_poconn')
         ||
            _port:=exec('FindAndGet','#table',B_PORT,_tab.REF_PORT,,,null());
            {? exec('delete4bconn','#b_poconn',B_CONN.ref(),_prel,_port)='T'
            ||
               exec('load_port','#b_valprt',_env,_prel);
               exec('seek_port','#b_valprt',_env)
            ?}
         ?}
      ?};
      B_CONN.cntx_pop();
      exec('load_portgr','#b_valprt',_env,_env.B_PREL,_env.B_CONN,1)
   ";
   _tip_conn:='Usunięcie powiązania parametru.'@;
   _name:='text=%1,panel=right,align=begin'['Usuń p&owiązanie'@];
   _env.win_in_btn_conn:=_tab.win_btn(_wer,_name,'menu:O',,,,,,'noempty');
   _tab.btn_opt(_env.win_in_btn_conn,'tooltip="%1"'[_tip_conn]);
   _tab.win_act(_wer,0,'Formuła','Usuń p&owiązanie'@@,,_tip_conn,_fml_conn,,,,,,'O');

_tab.win_act(_wer,,'Formuła','Zwiń/rozwiń'@@,,,"exec('zwrw_all','#tree',VALPRT_CR.TAB_PORTGR,'TREE',VALPRT_CR.WIN_PORTGR)",,,,,,'Z');
_tab.tr_fml(_wer,,"{? _a=-1 || 1 || _a ?}",);
_wer


\load_portgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Ładuje zawartość okna z kompletami portów wejściowych
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::       _b - B_PREL.ref() - element procesu którego komplety dodawac
::       [_c] - B_CONN.ref - którego połączenia dotyczy
::       [_d] - INTEGER - czy odświeżać kontrolkę ze statusem kompletów
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_b_prel:=_b;
_b_conn:=null();
{? var_pres('_c')=type_of(B_CONN.ref())
|| _b_conn:=_c
?};

_status:=0;
{? var_pres('_d')=type_of(0)
|| _status:=_d
?};

_result:=0;
_can_continue:=1;

_tab:=_env.TAB_PORTGR;
_tab.cntx_psh();
exec('tree_del','#tree',_tab,null());
_tab.index(_env.INDEX_TAB_PGR2);


B_CONN.cntx_psh();
B_CONN.index('TO');
B_TYPE.cntx_psh();
B_POCONN.cntx_psh();
B_POCONN.index('TO');
B_PORT.cntx_psh();
B_PREL.cntx_psh(); B_PREL.clear();
{? B_PREL.seek(_b_prel)
||
   B_PORTGR.cntx_psh();
   B_PORTGR.index('UNIK');
   _action:=exec('findAction4Ele','#b_proman',B_PREL.B_ELE).Ref;
   B_PORTGR.prefix(_action);
   {? B_PORTGR.first()
   || _lp:=1;
      {!
      |?
         _can_continue:=1;
         {? B_PORTGR.SYMBOL='*'
         || _can_continue:=0;
            _env.HAS_PORTGR_EMPTY:=1
         ?};
         {? _can_continue>0
         || _opis:='Komplet parametrów: %1'@[gsub(B_PORTGR.SYMBOL,',',' '+'i'@+' ')];
            _tab.prefix(B_PORTGR.LP,_opis);
            _parent:=null;
            {? _tab.first()=0
            ||
::             Zakładam gałąź nadrzędną
               _tab.blank();
               _tab.LP:=B_PORTGR.LP;
               _tab.OPIS:=_opis;
               _tab.SYM_ELEM:=B_PREL.SYMBOL;
               _tab.REF_BELE:=$B_PREL.B_ELE;
               _tab.REF_PREL:=$B_PREL.ref();
               _tab.KIND:='G';

               {? B_PORTGR.SYMBOL='*'
               ||
                  {? _b_conn<>null()
                  || {? exec('chk_star','#b_portgr',,_b_conn)>0
                     || _tab.OK:=2
                     ?}
                  || B_CONN.prefix(B_PREL.B_PROC,B_PREL.ref());
                     _ok_sum:=0;
                     _b_conn_size:=B_CONN.size();
                     {? B_CONN.first()
                     ||
                        {!
                        |? _ok_sum+=exec('chk_star','#b_portgr');
                           B_CONN.next()
                        !}
                     ?};
                     {? _ok_sum>0
                     || {? _ok_sum=_b_conn_size
                        || _tab.OK:=2
                        || _tab.OK:=1
                        ?}
                     ?}
                  ?}
               ?};
               _tab.add();
               _parent:=_tab.ref()
            ||
               _parent:=_tab.ref()
            ?};

            {? B_PORTGR.B_PORT<>null()
            || B_PORTGR.B_PORT();
               _tab.prefix();
               _tab.blank();
               _tab.TREE:=_parent;
               _tab.KIND:='L';
               _tab.LP:=_lp;
               _tab.OPIS:=B_PORT.SYMBOL;
               _tab.SYM_ELEM:=B_PREL.SYMBOL;
               _tab.REF_BELE:=$B_PREL.B_ELE;
               _tab.SYM_TYP:=B_PORT.B_TYPE().SYMBOL;
               _tab.NAM_TYP:=B_TYPE.TYPE;
               _tab.REF_TYP:=$B_PORT.B_TYPE;
               _tab.REF_PORT:=$B_PORT.ref();
               _tab.SYM_PORT:=B_PORT.SYMBOL;
               _tab.NAM_PORT:=B_PORT.NAME;

               {? _b_conn<>null()
               ||
                  B_POCONN.prefix(B_PORT.ref(),B_PREL.B_PROC,B_PREL.ref(),_b_conn);
                  _tab.POC_SIZE:=B_POCONN.size();
                  {? B_POCONN.first()
                  || _tab.CONNECT:=2
                  ?}
               || B_CONN.prefix(B_PREL.B_PROC,B_PREL.ref());
                  _connected:=0;
                  _b_conn_size:=B_CONN.size();
                  {? B_CONN.first()
                  ||
                     {!
                     |? B_POCONN.prefix(B_PORT.ref(),B_PREL.B_PROC,B_PREL.ref(),B_CONN.ref());
                        _tab.POC_SIZE+=B_POCONN.size();
                        {? B_POCONN.first()
                        || _connected+=1
                        ?};
                        B_CONN.next()
                     !}
                  ?};
                  {? _connected>0
                  || {? _connected=_b_conn_size
                     || _tab.CONNECT:=2
                     || _tab.CONNECT:=1
                     ?}
                  ?}
               ?};

               _tab.POCONN:=
                     {? _tab.POC_SIZE
                     || 'T'
                     || 'N'
                     ?};

               _tab.REF_PREL:=$B_PREL.ref();
               _tab.OK:=_tab.CONNECT;

               _manual_val:=exec('has_manual_val','#b_port',B_PREL.ref());
               {? _manual_val>0
               || _tab.OK:=2;
                  _tab.CONNECT:=2
               ?};

               _tab.add();
               _lp+=1
            ?}
         ?};
         B_PORTGR.next()
      !}
   ?};

   _tab.index(_env.INDEX_TAB_PGR3);
   _tab.prefix('G');
   {? _tab.first()
   || {!
      |?
         _tab.cntx_psh();
         _tab.index(_env.INDEX_TAB_PGR1);
         _tab.prefix(_tab.ref());
         _elements:=_tab.size();
         _connected:=0;
         {? _tab.first()
         || {!
            |? {? _tab.CONNECT=2
               || _connected+=1
               |? _tab.CONNECT=1
               || _connected+=0.5
               ?};
               _tab.next()
            !}
         ?};
         _tab.cntx_pop();

         {? _connected>0
         || {? _elements=_connected
            || _tab.CONNECT:=2
            || _tab.CONNECT:=1
            ?};
            _tab.OK:=_tab.CONNECT;
            _tab.put()
         ?};
         _tab.next()
      !}
   ?};
   B_PORTGR.cntx_pop()
?};
B_TYPE.cntx_pop();
B_PREL.cntx_pop();
B_PORT.cntx_pop();
B_POCONN.cntx_pop();
B_CONN.cntx_pop();

{? _status>0
|| exec('ctrl_verification','#b_portgr')
?};

_tab.cntx_pop();
_tab.index(_env.INDEX_TAB_PGR1);
_tab.prefix();

{? _env.SEL_PORTGR<>null()
|| _tab.seek(_env.SEL_PORTGR)
?};

{? _can_continue>0
|| _result:=1
?};
_result


\after_rfr_portgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Po odświeżeniu okna z kompletami portów
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MODELER><PROCES><WERTOWANIE><PARAMETR><WEJŚCIE><INICJOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_env.TAB_PORTGR;
_env.SEL_PORTGR:=_tab.ref();

_edit:=_tab.POCONN='N';
_manual:=_tab.MANUAL='T';
_act1:=_act2:='';

{? _env.EDITABLE>0
||
:: &Powiąż
   _b_ele:=exec('FindAndGet','#table',B_PREL,_env.B_PREL,,"B_PREL.B_ELE",null());
   _port:=exec('FindInSet','#table','B_PORT','UNIK',_b_ele);
   _conn:=0;
   {? _port & _env.CLASS='B_CONN'
   || _conn:=1
   ?};
   {? _conn=0 || _act1+='P' ?}
?};

:: &Powiąż
_pow:=0;
{? _tab.POCONN='N' | _tab.POCONN='T'
|| _pow:=1
?};
{? _pow=0 | _env.B_CONN=null()
|| _act1+='P'
?};

:: Usuń p&owiązanie
_odw:=0;
{? (_tab.POCONN='N' | _tab.POCONN='T') & _tab.POC_SIZE
|| _odw:=1
?};
{? _odw=0 | _env.B_CONN=null()
|| _act1+='O'
?};

:: Wyszarzenie akcji
_tab.actions_grayed(_env.WIN_PORTGR,_act1+':'+_act2);
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 4e91750c70c198e5bc2d77ce3c0c5de2ba3bdde6b746b4c5140ca1b4bc8eb44756d3c651cc8e8da24f7fdb5e497cb648471bc482997bc51080802f3a64ad6c6075562e66af4aa96590503adb788bbba665156c7020816935fe0497418a23bd63ac07e8c5236aed1a225705a5e6c05fdaf6e15815ee1dea45fcc5d8f1febf23b2
