:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #bi_blob.fml
:: Utworzony: 20.04.2017
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły do obsługi załączników w procesach
::======================================================================================================================


\edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Obsługa redagowania załączników jako parametr czynności
::   WE: [_a] - BI_BLOB.ref
::       [_b] - INTEGER - 0/[1] - czy załączniki edytowalne?
::       [_c] - STRING - tytuł okienka, domyślnie 'Załączniki'
::       [_d] - STRING - tryb widoku: ['icons'], 'table'
::   WY: BI_BLOB.ref
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_bi_blob:=null();
{? var_pres('_a')=type_of(BI_BLOB.ref())
|| _bi_blob:=_a
?};
_editable:=1;
{? var_pres('_b')=type_of(0)
|| _editable:=_b
?};
_title:='Załączniki'@;
{? var_pres('_c')=type_of('')
|| _title:=_c
?};
_viewmode:='icons';
{? var_pres('_d')=type_of('')
|| _viewmode:=_d
?};


_result:=null();

_fml_edit:="";
_fml_valid:="
   _args:=_a;
   _buffer:=_b;
   _filename:=_c;
   _filepath:=_d;
   _dialog:=_e;

   _result:=1;
   _env:=params_get().env_blob;
   {? _env.has_file(_filename)>0
   || _result:=0;
      _msg:='Plik o nazwie: %1 jest już dodany jako załącznik i nie może zostać dodany ponownie.'@[_filename];
      {? _dialog=0
      || FUN.emsg(_msg)
      || KOMM.add(_msg,2,,1)
      ?}
   ?};
   _result
";
_fml_file:="
   _args:=_a;
   _buffer:=_b;
   _filename:=_c;
   _filepath:=_d;

   _result:=0;
   _can_continue:=1;

   {? _can_continue>0    ||
      _buffer.USERS:=OPERATOR.USER;
      BI_BLOB.cntx_psh(); BI_BLOB.clear();
      {? _args.REF=null()
      ||
::       Jeśli na wejściu nie przekazano refa do BI_BLOB znaczy że robię nowy załącznik i zakładam
::       najpierw rekord BI_BLOB, czyli nagłówek
         _bi_blob:=exec('add','#bi_blob');
         {? _bi_blob<>null()
         || _can_continue:=1;
            _args.REF:=_bi_blob;
            _buffer.BI_BLOB:=_bi_blob;

::          Zmieniam dziedzinę BI_BLOPów żeby mi się wczytały
            BI_BLOP.index('BI_BLOB');
            BI_BLOP.prefix(_bi_blob)
         || _can_continue:=0
         ?}
      ||
::       Na wejściu został przekazany ref BI_BLOBA więc ustawiam go w buforze
         {? BI_BLOB.seek(_args.REF)
         || _can_continue:=1;
            _buffer.BI_BLOB:=BI_BLOB.ref()
         || _can_continue:=0
         ?}
      ?};
      BI_BLOB.cntx_pop()
   ?};
   {? _can_continue>0
   || _result:=1
   ?};
   _result
";

_fml_args:=obj_new('REF');
_fml_args.REF:=_bi_blob;

BI_BLOB.cntx_psh();
BI_BLOP.cntx_psh();

{? _bi_blob<>null()
|| BI_BLOP.index('BI_BLOB');
   BI_BLOP.prefix(_bi_blob)
||
:: Jeśli _bi_blob nie podany to tak prefiksuję dziedzinę BI_BLOPa żeby na bank była pusta dziedzina
   BI_BLOP.index('IDADD');
   BI_BLOP.prefix(time_ident(date(0,0,0),time(0,0,0)))
?};

_tab_tmp:=tab_tmp(1,
   'NAME','STRING[255]','Nazwa pliku',
   'SIZE','REAL','Rozmiar',
   'MOD_DATE','STRING[16]','Data modyfikacji',
   'ADD_DATE','STRING[19]','Data dodania',
   'INT_DATA','INTEGER','Identyfikator pliku',
   'STR_DATA','STRING[48]','Identyfikator pliku',
   'USER','STRING[30]','Użytkownik'
);
_fml_load:="

   _tab_ctrl:=_a;
   _tab:=_b;

   _tab_ctrl.blank();
   _blob_ref:=($('_tab:=_a;_tab.'+.FIELD))(_tab);
   {? _blob_ref<>null()
   ||
      _tab_ctrl.NAME:=_tab.bl_info(.FIELD,'NAME');
      _tab_ctrl.SIZE:=_tab.bl_info(.FIELD,'SIZE');
      _tab_ctrl.MOD_DATE:=$_tab.bl_info(.FIELD,'MODIFY_DATE')+' '+$_tab.bl_info(.FIELD,'MODIFY_TIME')
   || _tab_ctrl.NAME:='brak pliku'
   ?};
   _tab_ctrl.ADD_DATE:=19+_tab.IDADD;
::   _tab_ctrl.INT_DATA:=#_tab.ref();
   _tab_ctrl.STR_DATA:=_tab.uidref();
   USERS.cntx_psh();
   _tab_ctrl.USER:=_tab.USERS().DANE;
   USERS.cntx_pop();
   _tab_ctrl.add()
";

:: Uruchamiam kontrolkę
exec('edit_blob','#edit',BI_BLOP
                        ,'BLOB'
                        ,exec('BI_BLOP','#buffer')
                        ,_fml_edit
                        ,_fml_file
                        ,_fml_args
                        ,_editable
                        ,_title
                        ,_viewmode
                        ,_tab_tmp
                        ,_fml_load
                        ,_fml_valid);
{? _fml_args.REF<>null()
||
:: Sprawdza czy BI_BLOB zawiera jakieś pozycje, jeśli nie to go usuwam żeby nie zostawały śmieci
   BI_BLOP.cntx_psh();
   BI_BLOP.index('BI_BLOB');
   BI_BLOP.prefix(_fml_args.REF);
   {? BI_BLOP.first()
   || _result:=_fml_args.REF;
      exec('update_list','#bi_blob',_result)
   || _deleted:=exec('delete','#bi_blob',_fml_args.REF);
      {? _deleted<=0
      ||
::       Jeżeli z jakiegoś powodu nie udało się usunąć to go zwracam na wyjscie żeby nie został
::       osierocony
         _result:=_fml_args.REF
      ?}
   ?};
   BI_BLOP.cntx_pop()
?};

BI_BLOP.cntx_pop();
BI_BLOB.cntx_pop();
_result


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Dodaje jeden rekord do tabeli BI_BLOB
::   WE: [_a] - obj_new - bufor tabli BI_BLOB
::   WY: null() - porażka
::       BI_BLOB.ref - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _buffer:=_a
|| _buffer:=exec('BI_BLOB','#buffer');
   _buffer.USERS:=OPERATOR.USER
?};

_result:=null();

BI_BLOB.cntx_psh();
BI_BLOB.prefix();
BI_BLOB.blank();
_buffer.set();
{? BI_BLOB.add()
|| _result:=BI_BLOB.ref()
?};
BI_BLOB.cntx_pop();
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Kasuje podany rekord tabeli BI_BLOB (wykonywane w transakcji!!!)
::   WE: _a - BI_BLOB.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><DEL>
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
BI_BLOB.cntx_psh();
BI_BLOB.use(ref_name(_ref));
BI_BLOB.clear();
{? BI_BLOB.seek(_ref)
||
   _can_continue:=exec('can_delete','#bi_blob');
   {? _can_continue>0
   || {? exec('clean','#bi_blob',_ref)>0
      || {? BI_BLOB.del(,1)>0
         || _result:=1
         || undo();
            _result:=-3
         ?}
      || _result:=-2
      ?}
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

BI_BLOB.cntx_pop();
{? _mydo || end() ?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Czyści powiązania do rekordu tabeli BI_BLOB
::   WE: _a - BI_BLOB.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

BI_BLOP.cntx_psh();
BI_BLOP.use((4+BI_BLOP.name())+(ref_name(_ref)+4));
BI_BLOP.index('BI_BLOB');
BI_BLOP.prefix(_ref);
{? BI_BLOP.first()
|| {!
   |? _can_continue:=BI_BLOP.del(,1);
      BI_BLOP.first()
   !}
?};
BI_BLOP.cntx_pop();

:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};
_result


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Sprawdza czy można usunąć podanego BI_BLOBa
::   WE: [_a] - BI_BLOB.ref
::   WY: 0 - nie można, są jakieś powiązania
::       1 - można, brak powiązań
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(BI_BLOB.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

BI_BLOB.cntx_psh();
{? _ref<>null()
|| BI_BLOB.prefix();
   {? BI_BLOB.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   BI_BLOP.cntx_psh();
   BI_BLOP.index('BI_BLOB');
   BI_BLOP.prefix(BI_BLOB.ref());
   _size_pos:=BI_BLOP.size();

:: Jeśli count do BI_BLOBa jest równy ilości jego pozycji to znak że mogę go usuwać, bo odwołują
:: się do niego tylko pozycje które podczas usuwania również zostaną wyczyszczone
   {? BI_BLOB.count()=_size_pos
   || _result:=1
   ?};
   BI_BLOP.cntx_pop();
   ~~
?};
BI_BLOB.cntx_pop();
_result


\update_list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Aktualizuje pole BI_BLOB.LIST - lista plików w środku BI_BLOBa
::   WE: [_a] - BI_BLOB.ref
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(BI_BLOB.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

BI_BLOB.cntx_psh();
{? _ref<>null()
|| BI_BLOB.use(ref_name(_ref));
   BI_BLOB.prefix();
   {? BI_BLOB.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   BI_BLOP.cntx_psh();
   BI_BLOP.index('BI_BLOB');
   _blob_name:=ref_name(BI_BLOB.ref());
   _mask:=4-_blob_name;
   BI_BLOP.use(4+BI_BLOP.name()+_mask);
   BI_BLOP.prefix(BI_BLOB.ref());
   _list:='';
   {? BI_BLOP.first()
   || {!
      |? {? BI_BLOP.BLOB<>null()
         ||
            {? _list<>''
            || _list+=', '
            ?};
            _list+=BI_BLOP.bl_info('BLOB','NAME')
         ?};
         BI_BLOP.next() & +_list<255
      !}
   ?};
   {? +_list>255
   || _list:=(252+_list)+'...'
   ?};
   BI_BLOB.LIST:=_list;
   _can_continue:=BI_BLOB.put();
   BI_BLOP.cntx_pop();
   ~~
?};
BI_BLOB.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Kopiuje BI_BLOBa z pozycjami
::   WE: _a - BI_BLOB.ref
::       [_b] - STRING - 4 ostatnie znaki maski dla nowych rekordów
::   WY: null - porażka
::       BI_BLOB.ref - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_newmask:='';
{? var_pres('_b')=type_of('')
|| _newmask:=_b
?};
_result:=null();
_can_continue:=1;

BI_BLOB.cntx_psh(); BI_BLOB.clear();
{? BI_BLOB.seek(_ref)
||
   {? _newmask<>''
   || BI_BLOB.use(4+BI_BLOB.name()+_newmask)
   ?};
   _buffer:=exec('BI_BLOB','#buffer');
   _buffer.get();
:: Tworzę nowy nagłówek
   _newref:=exec('add','#bi_blob',_buffer);
   {? _newref<>null()
   ||
      _result:=_newref;
      BI_BLOP.cntx_psh();
      _blob_name:=ref_name(_ref);
      _mask:=4-_blob_name;
      BI_BLOP.use(4+BI_BLOP.name()+_mask);
      BI_BLOP.index('BI_BLOB');
      BI_BLOP.prefix(_ref);
      {? BI_BLOP.first()
      || {!
         |?
            _desc:=BI_BLOP.memo_txt(,1,'DESC');
            BI_BLOP.cntx_psh();
            {? _newmask<>''
            || BI_BLOP.use(4+BI_BLOP.name()+_newmask)
            ?};
            BI_BLOP.clear();
            BI_BLOP.BI_BLOB:=_result;
            _can_continue:=BI_BLOP.add();
            {? _can_continue>0 & _desc<>''
            || BI_BLOP.memo_set(_desc,'DESC');
               _can_continue:=BI_BLOP.memo_put(,'DESC')
            ?};
            BI_BLOP.cntx_pop();
            BI_BLOP.next() & _can_continue>0
         !}
      ?};
      exec('update_list','#bi_blob',_result);
      BI_BLOP.cntx_pop()
   ?}
?};
BI_BLOB.cntx_pop();
{? _can_continue<=0
|| _result:=null()
?};
_result


\delete_unused
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Kasuje BI_BLOBy które są nie używane
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_result:=0;
_can_continue:=1;

BI_BLOB.cntx_psh();
BI_BLOB.prefix();
{? BI_BLOB.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      BI_BLOB.cntx_psh();
      {? BI_BLOB.next()
      || _ref_nxt:=BI_BLOB.ref()
      ?};
      BI_BLOB.cntx_pop();
      exec('delete','#bi_blob',BI_BLOB.ref());
      {? _ref_nxt<>null()
      || _next:=BI_BLOB.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
BI_BLOB.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:08 3be64bba4a8e9c86b6c1b98ef99c749333a56d1312fabd0b13bf9f5a03300b6ed527a797fe431afa9591c22fdc279f36a06cb2e399d09071f0d8783ca1db16c9d380f9495c8418b6c0ee2c085bb9c346d6c49f27ae8c8cf5de1ea0f1b109001d7c633757fdbe4c3ac987cd37d978cdb000c0573d2d26bffff7057c0e5c90a1a5
