:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_timer.fml [17.00]
:: Utworzony: 11.02.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa dodatkowych własności zdarzeń czasowych (tabela B_TIMER)
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli B_TIMER
::   WY: obj_new()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('B_TIMER','#buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje do tabeli B_TIMER jeden rekord
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#b_timer')
::   WY: B_TIMER.ref() lub null()
::  TAG: <PROCES><ADD>
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','#b_timer')
         ?};
_result:=null();

B_TIMER.cntx_psh(); B_TIMER.clear();
B_TIMER.blank();
_buffer.set();
{? B_TIMER.add()>0
|| _result:=B_TIMER.ref()
?};
B_TIMER.cntx_pop();
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kasuje podany rekord tabeli B_TIMER (wykonywane w transakcji!!!)
::   WE: _a - B_TIMER.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::  TAG: <PROCES><DEL>
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
B_TIMER.cntx_psh(); B_TIMER.clear();
{? B_TIMER.seek(_ref)
|| {? exec('can_delete','#b_timer',_ref)>0
   || {? exec('clean','#b_timer',_ref)>0
      || {? B_TIMER.del(,1)>0
         || _result:=1
         || undo();
            _result:=-4
         ?}
      || _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};
B_TIMER.cntx_pop();
{? _result<0
|| undo()
?};

{? _mydo || end() ?};
_result


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy można usunąć B_TIMER
::   WE: _a - B_TIMER.ref()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_port:=_a;

_result:=1;
_can_continue:=1;

B_TIMER.cntx_psh();
B_TIMER.clear();
{? B_TIMER.seek(_b_port)
|| _result:=(B_TIMER.count()=0)
?};
B_TIMER.cntx_pop();

_result


\clean
::----------------------------------------------------------------------------------------------------------------------
:: UTW: TS [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli B_TIMER
:: WE: _a - B_TIMER.ref()
:: WY: >0 -wyczyszczone,
:: <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiązania usunięte? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};

_result


\trigger_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Trigger przed add
::  TAG: <PROCES><TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
{? B_TIMER.B_WORKER=null() || B_TIMER.B_WORKER:=exec('ref','#b_worker',exec('get','#params',100911,2)) ?};
1


\valid_property
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy element procesu ma ustawione wymagane własności
::   WE: _a - B_PREL.ref()
::   WY: 1 - własności nie są wymagane, albo wymagane własności są ustawione
::       0 - wymagane własności nie są ustawione
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_result:=1;

B_PREL.cntx_psh();
B_PREL.prefix();
{? B_PREL.seek(_b_prel)
||
:: Zdarzenie startowe czasowe
   {? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_start','#b_event'),exec('kind_timer','#b_event'))>0
   || B_TIMER.index('B_PREL');
      B_TIMER.prefix(B_PREL.ref());
      {? ~B_TIMER.first()
      || _result:=0
      |? B_TIMER.TRYB='N'
      || _result:=0
      ?}
:: Zdarzenie pośrednie czasowe
   |? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_intermed','#b_event'),exec('kind_timer','#b_event'))>0
   || B_TIMER.index('B_PREL');
      B_TIMER.prefix(B_PREL.ref());
      {? ~B_TIMER.first()
      || _result:=0
      |? B_TIMER.IVAL_DEF=null()
      || _result:=0
      |? B_TIMER.B_WORKER=null()
      || _result:=0
      ?}
   ?}
?};
B_PREL.cntx_pop();
_result


\creator_start_timer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uruchamia kreatora własności zdarzenia startowego czasowego
::       Kontekst wywołania - ustawione rekordy B_PREL i B_TIMER
::   WE: [_a] 0 - kolejne okna redagowania (domyślnie)
::            1 - kreator w oknie grupowym
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
   'escape','prev','step','grp','fld_tryb','fld_m','fld_t','fld_d','fld_vt','fld_vm','fld_interval','fld_duration'
);
_args.escape:=0;
_args.prev:=0;
{? B_TIMER.TRYB='N'
|| _args.step:=1
|? B_TIMER.TRYB='S' | B_TIMER.TRYB='Q' | B_TIMER.TRYB='O'
|| _args.step:=3
|| _args.step:=2
?};

{? var_pres('_a')=type_of(0) || _args.grp:=_a || _args.grp:=0 ?};
_args.fld_m:='';
_args.fld_d:='';
params_set('args',_args);

{? _args.grp
||
   _buffer:=exec('buffer','#b_timer');
   _buffer.get();
   exec('set_red_opt','#b_timer');
   exec('dtm_load','#b_timer');
   exec('desc_m_load','#b_timer');
   exec('desc_t_load','#b_timer');
   exec('desc_d_load','#b_timer');
   _before:="
      _args:=params_get().args;
      {? _args.step=1
      || _tab:=2
      |? _args.step=2
      || _tab:='RDTM'*B_TIMER.TRYB+2
      |? _args.step=3
      || _tab:={? B_TIMER.TRYB='S' | B_TIMER.TRYB='Q' | B_TIMER.TRYB='O' || 9 |? B_TIMER.TRYB='R' || 8 || 7 ?}
      || _tab:=1
      ?};
      tab_hide(,0);
      tab_show(_tab);
      tab_hide(1);
      ~~
   ";
   _first_win:=B_TIMER.mk_edit(,,'nop');
   B_TIMER.win_ebtn(_first_win,'text=%1'['OK'@],"'key:F2'");

   _grp:=B_TIMER.grp_make('Własności zdarzenia czasowego'@,_before,'bpropgep',,,,,'normal','jterm');
:: 1 - okno "ślepe"
   B_TIMER.grp_edit(_grp,,_first_win,'(0)');
:: 2 - okno startowe
   B_TIMER.grp_edit(_grp,,'RED1','(1)');
:: 3 - jeden raz
   B_TIMER.grp_edit(_grp,,'RED2R','(2)');
:: 4 - codziennie
   B_TIMER.grp_edit(_grp,,'RED2D','(2)');
:: 5 - cotygodniowo
   B_TIMER.grp_edit(_grp,,'RED2T','(2)');
:: 6 - comiesięcznie
   B_TIMER.grp_edit(_grp,,'RED2M','(2)');
:: 7 - okno wspólne
   B_TIMER.grp_edit(_grp,,'RED3','(3)');
:: 8 - jeden raz
   B_TIMER.grp_edit(_grp,,'RED3R','(3)');
:: 9 - po starcie serwera, kolejki, w każdej pętli przetwarxzania (okno bez startu, końca i powtórzeń)
   B_TIMER.grp_edit(_grp,,'RED3S','(3)');
   B_TIMER.win_sel(_grp);
   {? B_TIMER.select() & ~_args.escape
   || {? B_TIMER.put()
      || B_PREL.B_WORKER:=B_TIMER.B_WORKER;
         B_PREL.put()
      ?};
      exec('del_b_prel','#b_harm',B_PREL.ref());
      {? B_PREL.B_PROC().ACCEPTED='T' & B_PROC.ACTIVE='T' || exec('add_b_prel','#b_harm',B_PREL.ref()) ?}
   || _buffer.set()
   ?};
   exec('desc_interval_load','#b_timer');
   exec('desc_duration_load','#b_timer');
   exec('set_win_opt','#b_timer')
||
   _escape:=0;
   _end:=0;
   _buffer:=exec('buffer','#b_timer');
   _buffer.get();
   exec('set_red_opt','#b_timer');
   exec('dtm_load','#b_timer');
   exec('desc_m_load','#b_timer');
   exec('desc_t_load','#b_timer');
   exec('desc_d_load','#b_timer');
   {!
   |? _args.prev:=0;
      _red:='RED'+$_args.step+{? _args.step=2 || B_TIMER.TRYB |? _args.step=3 & B_TIMER.TRYB='R' || 'R' || '' ?};
      B_TIMER.win_edit(_red);
      {? B_TIMER.edit("exec('dtm_save','#b_timer'); params_exec('valid_ts','#b_timer')")
      || {? _args.prev || _args.step-=1 || _args.step+=1 ?}
      || _escape:=1
      ?};
      {? _args.step=4
      || {? B_TIMER.put()
         || B_PREL.B_WORKER:=B_TIMER.B_WORKER;
            B_PREL.put()
         ?};
         exec('del_b_prel','#b_harm',B_PREL.ref());
         {? B_PREL.B_PROC().ACCEPTED='T' & B_PROC.ACTIVE='T' || exec('add_b_prel','#b_harm',B_PREL.ref()) ?};
         _end:=1
      ?};
      ~_escape & ~_end
   !};
   {? _escape || _buffer.set() ?};
   exec('desc_interval_load','#b_timer');
   exec('desc_duration_load','#b_timer');
   exec('set_win_opt','#b_timer')
?};
~~


\valid_ts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Walidacja przy redagowaniu B_TIMER - zdarzenie startowe
::  TAG: <PROCES><CHK>
::----------------------------------------------------------------------------------------------------------------------
_step:=params_get().args.step;
_prev:=params_get().args.prev;

_result:='';

:: 2. krok, nawigacja do przodu
{? _step=2 & _prev=0
|| _tm:=exec('create','#tm_stamp',B_TIMER.DT,B_TIMER.TM);
:: termin mniejszy niż graniczny (ze względu na datę)
   {? B_TIMER.DT>exec('boundary_date','#b_timer')
   || FUN.info('Termin uruchomienia powinien być wcześniejszy niż %1.'@[$exec('boundary_date','#b_timer')]);
      _result:='DT'
   |? B_TIMER.TRYB='R'
   ||
::    tylko raz - ustawmy przyszłą datę
      {? _tm<=B_TIMER.tm_stamp()
      || FUN.info('Termin uruchomienia powinien być późniejszy niż bieżący.'@);
         _result:='DT'
      ?}
   |? B_TIMER.TRYB='D'
   ||
::    codziennie
      {? B_TIMER.REPLY<=0
      || FUN.info('Liczba powinna być większa od zera.'@);
         _result:='REPLY'
      ?}
   |? B_TIMER.TRYB='T'
   ||
::    cotygodniowo - musi być przynajmniej jeden dzień w tygodniu
      {? B_TIMER.T*'T'=0
      || FUN.info('Co najmniej jeden dzień w tygodniu powinien być zaznaczony.'@);
         _result:='T'
      |? B_TIMER.REPLY<=0
      || FUN.info('Liczba powinna być większa od zera.'@);
         _result:='REPLY'
      ?}
   |? B_TIMER.TRYB='M'
   ||
::    comiesięcznie - musi być przynajmniej jeden miesiąc
      {? B_TIMER.M*'T'=0
      || FUN.info('Co najmniej jeden miesiąc powinien być zaznaczony.'@);
         _result:='M'
      |? B_TIMER.D*'T'=0
      || FUN.info('Co najmniej jeden dzień w miesiącu powinien być zaznaczony.'@);
         _result:='D'
      ?}
   ?}
?};

:: 3. krok, nawigacja do przodu
{? _step=3 & _prev=0
|| _tme:=exec('create','#tm_stamp',B_TIMER.DTE,B_TIMER.TME);
   {? B_TIMER.EXPIRES='T' & B_TIMER.DTE>exec('boundary_date','#b_timer')
   || FUN.info('Termin wygaśnięcia powinien być wcześniejszy niż %1.'@[$exec('boundary_date','#b_timer')]);
      _result:='DTE'
   |? B_TIMER.EXPIRES='T' & _tme<>0 & _tme<B_TIMER.tm_stamp()
   || FUN.info('Termin wygaśnięcia powinien być późniejszy niż bieżący.'@);
      _result:='DTE'
   |? B_TIMER.EXPIRES='T' & _tme<>0 & _tme<exec('create','#tm_stamp',B_TIMER.DT,B_TIMER.TM)
   || FUN.info('Termin wygaśnięcia powinien być późniejszy niż termin uruchomienia.'@);
      _result:='DTE'
   |? B_TIMER.REPEAT='T' & B_TIMER.INTERVAL=0 & B_TIMER.TRYB*'RDTM'>0
   || FUN.info('Pole \'Powtarzaj co\' powinno być wypełnione.'@);
      _result:='INTERVAL'
   |? B_TIMER.REPEAT='T' & B_TIMER.DURATION=0 & B_TIMER.TRYB*'RDTM'>0
   || FUN.info('Pole \'Zakres powtarzania\' powinno być wypełnione.'@);
      _result:='DURATION'
   |? B_TIMER.B_WORKER=null()
   || FUN.info('Pole \'Kolejka\' powinno być wypełnione.'@);
      _result:='B_WORKER'
   ?}
?};

_result


\valid_ti
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Walidacja przy redagowaniu B_TIMER - zdarzenie pośrednie
::  TAG: <PROCES><CHK>
::----------------------------------------------------------------------------------------------------------------------
_result:='';

{? _result=''
||
:: Sprawdzam czy należy sprawdzić bufor planowanego czasu pracy
   _plan_diff:=exec('buffer_compare','#interval');
   {? _plan_diff=0
   || _result:=exec('validate','#interval')
   ?}
?};

{? _result=''
|| _result:=__CHK.record(B_TIMER,,'B_WORKER')
?};

_result


\window_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'Okienko przed' w oknach redagowania umieszczonych w oknie grupowym - włączenie redagowania
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_args:=params_get().args;

_edit_field:=
   {? _args.step=1                                           || 'TRYB'
   |? _args.step=2                                           || 'DT'
   |? B_TIMER.TRYB='R' | B_TIMER.TRYB='S' | B_TIMER.TRYB='O' || 'B_WORKER'
                                                             || 'EXPIRES'
   ?};
{? edit_start("params_exec('valid_ts','#b_timer')",_edit_field)
|| {? _args.prev
   || {? (B_TIMER.TRYB='S' | B_TIMER.TRYB='Q' | B_TIMER.TRYB='O') & _args.step=3 || _args.step:=1 || _args.step-=1 ?}
   || {? (B_TIMER.TRYB='S' | B_TIMER.TRYB='Q' | B_TIMER.TRYB='O') & _args.step=1 || _args.step:=3 || _args.step+=1 ?}
   ?};
   _args.prev:=0;
   {? _args.step=1
   || _tab:=2
   |? _args.step=2
   || _tab:='RDTM'*B_TIMER.TRYB+2
   |? _args.step=3
   || _tab:={? (B_TIMER.TRYB='S' | B_TIMER.TRYB='Q' | B_TIMER.TRYB='O') || 9 |? (B_TIMER.TRYB='R') || 8 || 7 ?}
   || _tab:=1;
      sel_exit()
   ?};
   tab_sel(1);
   tab_hide(,0);
   tab_show(_tab);
   tab_hide(1);
   1
|| _args.escape:=1;
   sel_exit()
?}


\btn_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'Popraw' (albo 'Kreator') w oknie osadzonym w oknie grupowym
::       Kontekst wywołania - ustawiony rekord B_PREL
::  TAG: <PROCES><PUT>
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
params_set(params_get());

B_TIMER.index('B_PREL');
B_TIMER.prefix(B_PREL.ref());
_to_edit:=0;
{? B_TIMER.first()
|| _to_edit:=1
|| B_TIMER.blank();
   B_TIMER.B_PREL:=B_PREL.ref();
   _to_edit:=B_TIMER.add()
?};
{? _to_edit
||
:: Zdarzenie startowe
   {? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_start','#b_event'))
   || exec('creator_start_timer','#b_timer',1);
      _tab:='NRQSODTM'*B_TIMER.TRYB;
      tab_sel(1,'tabs');
      tab_hide(,0,'tabs');
      tab_show(_tab,'tabs');
      tab_hide(1,0,'tabs');
      {? B_TIMER.TRYB='N'
      || win_activate('WIN1')
      || win_activate('WIN2'+B_TIMER.TRYB)
      ?}

:: Zdarzenie pośrednie
   || _red:=exec('make_red_ti','#b_timer');
      B_TIMER.win_edit(_red);
::    Importuje nazwy interwałów
      exec('import_names','#interval');
      IVAL_DEF.cntx_psh();
      {? B_TIMER.IVAL_DEF<>null()
      || B_TIMER.IVAL_DEF()
      || IVAL_DEF.blank();
         IVAL_DEF.KIND:='G'
      ?};
      exec('edit_enablator','#interval',_red,B_TIMER);
      {? B_TIMER.edit("exec('valid_ti','#b_timer')")
      || B_TIMER.TRYB:='I';
         {? B_TIMER.put()
         || exec('interval_update','#b_design','B_TIMER',B_TIMER.ref())
         ?};
         B_TIMER.get();
         IVAL_DEF.get();
         win_disp();
::         grp_edisp(B_TIMER,_env.WIN_EVE_TI,1);
         ~~
      ?};
      IVAL_DEF.cntx_pop()
   ?}
?};
''


\make_red_ti
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Tworzy okno redagowania dla definicji zdarzenia pośredniego
::----------------------------------------------------------------------------------------------------------------------
_red:=B_TIMER.mk_edit('Własności zdarzenia pośredniego'@,,'inttimerpropert');
B_TIMER.win_ewin(_red,IVAL_DEF,'RED','Planowane uruchomienie po okresie'@);
B_TIMER.win_ewin(_red,,'WORKER','Parametry dodatkowe'@);
B_TIMER.win_ebtn(_red,'text=%1,panel=bottom,align=end'['&Zapisz'@],"'key:F2'");
B_TIMER.win_ebtn(_red,'text=%1,panel=bottom,align=end'['&Anuluj'@],"'key:Esc'");
B_TIMER.win_edit(_red);
_red


\btn_on
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'Włącz' w oknie osadzonym w oknie grupowym
::       Kontekst wywołania - ustawiony rekord B_PREL
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi i odświeżać okienko
::  TAG: <PROCES><PUT>
::----------------------------------------------------------------------------------------------------------------------
_gui:=1;
{? var_pres('_a')=type_of(0)
|| _gui:=_a
?};
B_TIMER.index('B_PREL');
B_TIMER.prefix(B_PREL.ref());
_to_edit:=0;
{? B_TIMER.first()
|| _to_edit:=1
|| B_TIMER.blank();
   B_TIMER.B_PREL:=B_PREL.ref();
   _to_edit:=B_TIMER.add()
?};
{? _to_edit
|| {? B_TIMER.ON='T'
   || {? _gui>0
      || FUN.info('Harmonogram jest włączony.'@)
      ?}
   || _ask:=1;
      {? _gui>0
      || _ask:=FUN.ask('Czy włączyć harmonogram dla zdarzenia?'@)
      ?};
      {? _ask>0
      || B_TIMER.ON:='T';
         B_TIMER.put();
         exec('del_b_prel','#b_harm',B_PREL.ref());
         {? B_PREL.B_PROC().ACCEPTED='T' & B_PROC.ACTIVE='T' || exec('add_b_prel','#b_harm',B_PREL.ref()) ?};
         {? _gui>0
         || B_PREL.ENABLED:='T';
            B_PREL.put();
            win_disp();
            exec('set_btn_opt','#b_timer')
         ?}
      ?}
   ?}
?};
''


\btn_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'Wyłącz' w oknie osadzonym w oknie grupowym
::       Kontekst wywołania - ustawiony rekord B_PREL
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi i odświeżać okienko
::  TAG: <PROCES><PUT>
::----------------------------------------------------------------------------------------------------------------------
_gui:=1;
{? var_pres('_a')=type_of(0)
|| _gui:=_a
?};
B_TIMER.index('B_PREL');
B_TIMER.prefix(B_PREL.ref());
_to_edit:=0;
{? B_TIMER.first()
|| _to_edit:=1
|| B_TIMER.blank();
   B_TIMER.B_PREL:=B_PREL.ref();
   _to_edit:=B_TIMER.add()
?};
{? _to_edit
|| {? B_TIMER.ON='N'
   || {? _gui>0
      || FUN.info('Harmonogram jest wyłączony.'@)
      ?}
   ||
      _ask:=1;
      {? _gui>0
      || _ask:=FUN.ask('Czy wyłączyć harmonogram dla zdarzenia?'@)
      ?};
      {? _ask>0
      || B_TIMER.ON:='N';
         B_TIMER.put();
         exec('del_b_prel','#b_harm',B_PREL.ref());
         {? _gui>0
         || B_PREL.ENABLED:='N';
            B_PREL.put();
            win_disp();
            exec('set_btn_opt','#b_timer')
         ?}
      ?}
   ?}
?};
''


\set_btn_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ustawia opcje przycisków w oknach WIN*
::----------------------------------------------------------------------------------------------------------------------
{? B_TIMER.ON='T'
|| _state_on:='state=grayed';
   _state_off:='state=normal'
|| _state_on:='state=normal';
   _state_off:='state=grayed'
?};
B_TIMER.btn_eopt('WIN2D','ON',_state_on);
B_TIMER.btn_eopt('WIN2M','ON',_state_on);
B_TIMER.btn_eopt('WIN2R','ON',_state_on);
B_TIMER.btn_eopt('WIN2Q','ON',_state_on);
B_TIMER.btn_eopt('WIN2S','ON',_state_on);
B_TIMER.btn_eopt('WIN2T','ON',_state_on);
B_TIMER.btn_eopt('WIN2D','OFF',_state_off);
B_TIMER.btn_eopt('WIN2M','OFF',_state_off);
B_TIMER.btn_eopt('WIN2R','OFF',_state_off);
B_TIMER.btn_eopt('WIN2Q','OFF',_state_off);
B_TIMER.btn_eopt('WIN2S','OFF',_state_off);
B_TIMER.btn_eopt('WIN2T','OFF',_state_off);
~~


\btn_next
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'Dalej' w kreatorze
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
'key:F2'


\btn_prev
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'Wstecz' w kreatorze
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
params_get().args.prev:=1;
'key:F2'


\btn_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'OK' w kreatorze
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
'key:F2'


\btn_escape
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'Anuluj' w kreatorze
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
params_get().args.escape:=1;
'key:Esc'


\dtm_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.40]
:: OPIS: Ładuje D, T i M z rekordu B_TIMER do zmiennej POCZTAV
::  OLD: \tm_load/skid_eml.fml
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('dtm_load','#field',B_TIMER);
~~


\desc_m_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ładuje opis z pola B_TIMER do pola BPMN.M
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('desc_m_load','#field',B_TIMER.M);
~~


\desc_t_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ładuje opis z pola B_TIMER do pola BPMN.T
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('desc_t_load','#field',B_TIMER.T);
~~


\desc_d_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ładuje opis z rekordu B_TIMER do pola BPMN.D
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('desc_d_load','#field',B_TIMER.D);
~~


\dtm_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.40]
:: OPIS: Zachowuje D, T i M ze zmiennej POCZTAV do rekordu B_TIMER
::  OLD: \tm_save/skid_eml.fml
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('dtm_save','#field',B_TIMER);
~~


\interval_pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wzorzec redakcji pola BPMN.INTERVAL
::  TAG: <PROCES><PT>
::----------------------------------------------------------------------------------------------------------------------
exec('txt2pattern','#field',params_get().args.fld_interval)+'#'


\duration_pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wzorzec redakcji pola BPMN.DURATION
::  TAG: <PROCES><PT>
::----------------------------------------------------------------------------------------------------------------------
exec('txt2pattern','#field',params_get().args.fld_duration)+'#'


\slo_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca słownik (do obsługi interwałów i zakresów powtarzania)
::   WY: obj_new('TAB','WER')
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new('TAB','WER');
_tab:=tab_tmp(1,'LP','INTEGER','Lp','LABEL','STRING[20]','','SEC','INTEGER','');
_wer:=_tab.mk_sel(FUN.TYT,,,'slo_tab',100,10,20);
_tab.win_fld(_wer,,'LABEL');
_tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
_tab.win_sel(_wer);
_res.TAB:=_tab;
_res.WER:=_wer;
_res


\interval_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca słownik interwałów
::   WY: obj_new('TAB','WER')
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('slo_tab','#b_timer');
exec('interval_fill','#b_timer',_res.TAB);
_res


\duration_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca słownik zakresów powtarzania
::   WY: obj_new('TAB','WER')
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('slo_tab','#b_timer');
exec('duration_fill','#b_timer',_res.TAB);
_res


\interval_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wypełnia słownik interwałów
::   WE: _a - _tab
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_tab.LP:=0;
:: Krótsze interwały można odblokować na żądanie
::_tab.LP+=1; _tab.LABEL:='1 sekundę'@; _tab.SEC:=1; _tab.add();
::_tab.LP+=1; _tab.LABEL:='5 sekund'@; _tab.SEC:=5; _tab.add();
::_tab.LP+=1; _tab.LABEL:='15 sekund'@; _tab.SEC:=15; _tab.add();
::_tab.LP+=1; _tab.LABEL:='30 sekund'@; _tab.SEC:=30; _tab.add();
::----------------------------------------------------------------------------------------------------------------------
_tab.LP+=1; _tab.LABEL:='5 minut'@; _tab.SEC:=5*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='10 minut'@; _tab.SEC:=10*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='15 minut'@; _tab.SEC:=15*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='30 minut'@; _tab.SEC:=30*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='1 godzina'@; _tab.SEC:=60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='2 godziny'@; _tab.SEC:=120*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='4 godziny'@; _tab.SEC:=240*60; _tab.add();
~~


\duration_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wypełnia słownik zakresów powtarzania
::   WE: _a - _tab
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_tab.LP:=0;
_tab.LP+=1; _tab.LABEL:='pół godziny'@; _tab.SEC:=30*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='1 godzina'@; _tab.SEC:=60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='2 godziny'@; _tab.SEC:=2*60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='4 godziny'@; _tab.SEC:=4*60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='8 godzin'@; _tab.SEC:=8*60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='12 godzin'@; _tab.SEC:=12*60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='16 godzin'@; _tab.SEC:=16*60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='20 godzin'@; _tab.SEC:=20*60*60; _tab.add();
_tab.LP+=1; _tab.LABEL:='24 godziny'@; _tab.SEC:=24*60*60; _tab.add();
~~


\interval_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa na F3 w polu BPMN.INTERVAL
::  TAG: <PROCES><F3>
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('interval_tab','#b_timer').TAB;
_tab.blank(1);
_tab.SEC:=B_TIMER.INTERVAL;
{? ~_tab.find_rec() || _tab.first() ?};
{? _tab.select(,1,10)
|| B_TIMER.INTERVAL:=_tab.SEC;
   BPMN.INTERVAL:=_tab.LABEL;
   params_get().args.fld_interval:=_tab.LABEL
|| 0
?}


\duration_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa na F3 w polu BPMN.DURATION
::  TAG: <PROCES><F3>
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('duration_tab','#b_timer').TAB;
_tab.blank(1);
_tab.SEC:=B_TIMER.DURATION;
{? ~_tab.find_rec() || _tab.first() ?};
{? _tab.select(,1,10)
|| B_TIMER.DURATION:=_tab.SEC;
   BPMN.DURATION:=_tab.LABEL;
   params_get().args.fld_duration:=_tab.LABEL
|| 0
?}


\desc_interval_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ładuje opis dla interwału (BPMN.INTERVAL na podstawie B_TIMER.INTERVAL)
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('interval_tab','#b_timer').TAB;
_tab.blank(1);
_tab.SEC:=B_TIMER.INTERVAL;
{? _tab.find_rec()
|| BPMN.INTERVAL:=_tab.LABEL
|| BPMN.INTERVAL:='< F3 >'
?};
~~


\desc_duration_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ładuje opis dla zakresu przetwarzania (BPMN.DURATION na podstawie B_TIMER.DURATION)
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('duration_tab','#b_timer').TAB;
_tab.blank(1);
_tab.SEC:=B_TIMER.DURATION;
{? _tab.find_rec()
|| BPMN.DURATION:=_tab.LABEL
|| BPMN.DURATION:='< F3 >'
?};
~~


\interval_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pola BPMN.INTERVAL
::  TAG: <PROCES><BE>
::----------------------------------------------------------------------------------------------------------------------
params_get().args.fld_interval:=fld();
1


\duration_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pola BPMN.DURATION
::  TAG: <PROCES><BE>
::----------------------------------------------------------------------------------------------------------------------
params_get().args.fld_duration:=fld();
1


\interval_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola BPMN.INTERVAL
::  TAG: <PROCES><AE>
::----------------------------------------------------------------------------------------------------------------------
fld():=params_get().args.fld_interval;
1


\duration_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola BPMN.DURATION
::  TAG: <PROCES><AE>
::----------------------------------------------------------------------------------------------------------------------
fld():=params_get().args.fld_duration;
1


\repeat_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola B_TIMER.REPEAT
::  TAG: <PROCES><AE>
::----------------------------------------------------------------------------------------------------------------------
exec('set_red_opt','#b_timer');
1


\expires_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola B_TIMER.EXPIRES
::  TAG: <PROCES><AE>
::----------------------------------------------------------------------------------------------------------------------
exec('set_red_opt','#b_timer');
1


\set_red_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ustawia opcje pól INTERVAL, DURATION, DTE, TME w oknach redagowania
::----------------------------------------------------------------------------------------------------------------------
{? B_TIMER.REPEAT='T' || _option:='enable=1,mark=1' || _option:='enable=0,mark=0' ?};
B_TIMER.efld_opt('RED3',_option,BPMN,'INTERVAL');
B_TIMER.efld_opt('RED3',_option,BPMN,'DURATION');
B_TIMER.efld_opt('RED3R',_option,BPMN,'INTERVAL');
B_TIMER.efld_opt('RED3R',_option,BPMN,'DURATION');

{? B_TIMER.EXPIRES='T' || _option:='enable=1' || _option:='enable=0' ?};
B_TIMER.efld_opt('RED3',_option,,'DTE');
B_TIMER.efld_opt('RED3',_option,,'TME');

_option:='editable=grayed';
B_TIMER.efld_opt('RED2R',_option,,'TRYB');
B_TIMER.efld_opt('RED2D',_option,,'TRYB');
B_TIMER.efld_opt('RED2T',_option,,'TRYB');
B_TIMER.efld_opt('RED2M',_option,,'TRYB');
B_TIMER.efld_opt('RED3S',_option,,'TRYB');
B_TIMER.efld_opt('RED3',_option,,'TRYB');
~~


\set_win_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ustawia opcje pól INTERVAL, DURATION, DTE, TME w oknach składowych okna grupowego
::----------------------------------------------------------------------------------------------------------------------
{? B_TIMER.REPEAT='T' || _option:='enable=1' || _option:='enable=0' ?};
B_TIMER.efld_opt('WIN2R',_option,BPMN,'INTERVAL');
B_TIMER.efld_opt('WIN2R',_option,BPMN,'DURATION');
B_TIMER.efld_opt('WIN2D',_option,BPMN,'INTERVAL');
B_TIMER.efld_opt('WIN2D',_option,BPMN,'DURATION');
B_TIMER.efld_opt('WIN2T',_option,BPMN,'INTERVAL');
B_TIMER.efld_opt('WIN2T',_option,BPMN,'DURATION');
B_TIMER.efld_opt('WIN2M',_option,BPMN,'INTERVAL');
B_TIMER.efld_opt('WIN2M',_option,BPMN,'DURATION');

{? B_TIMER.EXPIRES='T' || _option:='enable=1' || _option:='enable=0' ?};
B_TIMER.efld_opt('WIN2D',_option,,'DTE');
B_TIMER.efld_opt('WIN2D',_option,,'TME');
B_TIMER.efld_opt('WIN2T',_option,,'DTE');
B_TIMER.efld_opt('WIN2T',_option,,'TME');
B_TIMER.efld_opt('WIN2M',_option,,'DTE');
B_TIMER.efld_opt('WIN2M',_option,,'TME');
~~


\display4prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla definicję harmonogramu dla elementu procesu
::   WE: _a - B_PREL.ref()
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;
B_TIMER.cntx_psh();
B_TIMER.index('B_PREL');
B_TIMER.prefix(_b_prel);
{? B_TIMER.first()
|| {? exec('is_event','#b_event',
         exec('FindAndGet','#table',B_PREL,_b_prel,,"B_ELE",null()),exec('type_start','#b_event')
      )
   || exec('dtm_load','#b_timer');
      exec('desc_m_load','#b_timer');
      exec('desc_t_load','#b_timer');
      exec('desc_d_load','#b_timer');
      exec('desc_interval_load','#b_timer');
      exec('desc_duration_load','#b_timer');
      exec('set_win_opt','#b_timer');
      {? B_TIMER.TRYB='N'
      || _red:='WIN1'
      || _red:='WIN2'+B_TIMER.TRYB
      ?};
      B_TIMER.win_edit(_red);
      B_TIMER.btn_eopt(_red,'MODIFY','state=grayed');
      B_TIMER.btn_eopt(_red,'ON','state=grayed');
      B_TIMER.btn_eopt(_red,'OFF','state=grayed');
      B_TIMER.btn_eopt(_red,'HARM','state=grayed');
      B_TIMER.display()
   || _red:=exec('make_red_ti','#b_timer');
      IVAL_DEF.cntx_psh();
      {? B_TIMER.IVAL_DEF<>null()
      || B_TIMER.IVAL_DEF()
      || IVAL_DEF.blank()
      ?};
      exec('edit_enablator','#interval',_red,B_TIMER);
      B_TIMER.win_edit(_red);
      B_TIMER.display();
      IVAL_DEF.cntx_pop()
   ?}
?};
B_TIMER.cntx_pop();
~~


\boundary_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca graniczną datę, powyżej której nie można wprowadzać planowanych terminów
::----------------------------------------------------------------------------------------------------------------------
date(2037,1,1)


\tryb_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redagowaniem pola B_TIMER.TRYB
::----------------------------------------------------------------------------------------------------------------------
_args:=params_get().args;
{? _args.grp;
   0
|| _args.fld_tryb:=B_TIMER.TRYB;
   1
|| {? cur_win(1,1)='RED1' || 1 || 0 ?}
?}


\tryb_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola B_TIMER.TRYB
::----------------------------------------------------------------------------------------------------------------------
_args:=params_get().args;
_res:=1;
{? _args.grp
|| {? _args.fld_tryb<>B_TIMER.TRYB
   || ~~
   ?}
?};
_res

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 667bb00b24d905fdac586972fb6ed8be20ae7a083e8cd6720ffb6b891bcb32705fa5463a5a51d923a74b2aec02e3c56ad7e24e5648c9e83a8bab5af0cd9a070ea9f2e4c57025f8de775dcf285be46e973afa6d2ad8a895fac83499705b7d4627d2a63416a16010c7b4e473918f49d224aac8f0f9004b792f6b9c62cc6ae5d34b
