:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: #bi_todo.fml [17.00]
:: Utworzony: 26.09.2013
:: Autor: AWI
::======================================================================================================================
:: Zawartosc: Obsługa list ToDo
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli BI_TODO
::   WY: obj_new()
::----------------------------------------------------------------------------------------------------------------------
exec('BI_TODO','#buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Funkcja dodająca wpis do tabeli BI_TODO
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#bi_todo')
::   WY:      [REFERENCE]  - wskazanie na dodany rekord (lub już istniejący)
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};

_res:=0;
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('UNIQUE'); BI_TODO.prefix(_buffer.BI_PREL,_buffer.USERS);
{? BI_TODO.first()
|| _buffer.get();
   _res:=1
|| BI_TODO.blank(1);
   _buffer.set();
   exec('visible_notify','#bi_todo');
   {? BI_TODO.add()
   || _buffer.get();
      _res:=1
   ?}
?};
BI_TODO.cntx_pop();
_res


\put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Funkcja poprawiająca wpis do tabeli BI_TODO
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#bi_todo')
::   WY:      0-NOK, 1-OK
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};

_res:=0;
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('ALL'); BI_TODO.prefix();
{? BI_TODO.seek(_buffer.Ref)
|| _buffer.set();
   BI_TODO.TM_LANG:=0;
   exec('visible_notify','#bi_todo');
   _res:=BI_TODO.put()
?};
BI_TODO.cntx_pop();
_res


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kasuje podany rekord tabeli BI_TODO
::   WE: _a - [REFERENCE]  - BI_TODO.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
BI_TODO.cntx_psh();
BI_MSG.cntx_psh();
{? BI_TODO.name()='' || BI_TODO.use('bi_t____'); BI_MSG.use('bi_m____') ?};
BI_TODO.index('ALL'); BI_TODO.prefix();
{? BI_TODO.seek(_ref)
|| BI_MSG.index('BI_TODO');
   BI_MSG.prefix(BI_TODO.ref());
   _loop:=BI_MSG.first();
   {!
   |? _loop
   |!
      _loop:=BI_MSG.del()
   !};
   {? BI_TODO.del(1,1)>0
   || _result:=1
   || undo();
      _result:=-3
   ?}
|| _result:=0
?};
BI_TODO.cntx_pop();
BI_MSG.cntx_pop();

{? _result<0 || undo() ?};
{? _mydo || end() ?};
_result


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Tworzy/uaktualnia opis na liscie TODO dla podanej instancji czynności
::   WE: _a - BI_PREL.ref
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null()) || return() ?};
_bi_prel:=_a;

_result:=1;
:: Zwracam klasę Menadżera Procesów
_class:={? __develop || @.Class.cProMan || @.CLASS.cProMan ?};

:: Tworzę obiekt Menadżera Procesów
_proMan:=obj_new(_class);

:: Ustawiam kontekst dla Menadżera Procesów
{? _proMan.setCntx(_bi_prel)>0
||
:: Uaktualniam opis na TODO
   _result:=_proMan.descTodo()
?};
_result


\triggerOn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Trigerry BI_PREL dotyczace TODO - wlaczenie
::----------------------------------------------------------------------------------------------------------------------
::_ff:="exec('prelBroadcast','#bi_todo',BI_PREL.ref())";             BI_PREL.trig_a('add',_ff,'todo');
_ff:="exec('prelMod','#bi_todo',BI_PREL.ref(),BI_PREL.BI_STAT)";     BI_PREL.trig_a('put',_ff,'todo');
_ff:="exec('prelDel','#bi_todo',BI_PREL.ref())";                     BI_PREL.trig_b('del',_ff,'todo');

::_fa:="exec('freeTodo','#bi_todo')";                                  BI_TODO.trig_b('add',_fa,'todofree');
_fa:="exec('freeTodo','#bi_todo')";                                  BI_TODO.trig_b('put',_fa,'todofree');
_ff:="exec('trigBiPrel','#bi_todo','add')";                          BI_TODO.trig_a('add',_ff,'biprel');
_ff:="exec('trigBiPrel','#bi_todo','put')";                          BI_TODO.trig_a('put',_ff,'biprel');
_ff:="exec('trigBiPrel','#bi_todo','del')";                          BI_TODO.trig_a('del',_ff,'biprel');

_ff:="exec('todo_triggers_przed','#bi_todo','add_przed')";           BI_TODO.trig_b('add',_ff,'todotrig');
_ff:="exec('todo_triggers_po','#bi_todo','add_po',_a)";              BI_TODO.trig_a('add',_ff,'todotrig');
_ff:="exec('todo_triggers_przed','#bi_todo','put_przed')";           BI_TODO.trig_b('put',_ff,'todotrig');
_ff:="exec('todo_triggers_po','#bi_todo','put_po',_a)";              BI_TODO.trig_a('put',_ff,'todotrig');
_ff:="exec('todo_triggers_przed','#bi_todo','del_przed')";           BI_TODO.trig_b('del',_ff,'todotrig');
_ff:="exec('todo_triggers_po','#bi_todo','del_po',_a)";              BI_TODO.trig_a('del',_ff,'todotrig');

exec('trigger_widget','#bi_todo');
~~


\triggerOff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Trigerry BI_PREL dotyczące TODO - wyłączenie
::----------------------------------------------------------------------------------------------------------------------
::BI_PREL.trig_a('add',"",'todo');
BI_PREL.trig_a('put',"",'todo');
BI_PREL.trig_b('del',"",'todo');

::BI_TODO.trig_a('add',"",'todofree');
BI_TODO.trig_a('put',"",'todofree');
BI_TODO.trig_a('add',"",'biprel');
BI_TODO.trig_a('put',"",'biprel');
BI_TODO.trig_a('del',"",'biprel');
BI_TODO.trig_a('add',"",'todoact');
BI_TODO.trig_a('put',"",'todoact');
BI_TODO.trig_a('del',"",'todoact');

exec('trigger_widget','#bi_todo',0);
~~


\create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła tworząca zapisy na liście TODO dla BI_PREL
::   WE: _a - BI_PREL.ref() - instancja elementu procesu
::       [_b] - Aktualizacja opisów zadań - tryb
::       [_c] - Operator dla którego przydzielamy zadanie
::       [_d] - _UsrsAct - lista użytkowników uprawniona do czynności
::       [_e] - 0-wołane poza mp, 1-wołane przez mp
::       [_f] - Ścieżka uruchomienia czynności
::       [_g] - INTEGER 0/1 - jeżeli przekazany argument _d to nie sprawdzać
::                            rozmiaru listy z użytkownikami tylko od razu przyjąć
::                            że zmienna _other ma wartość _g (steruje tym czy zadanie będzie od razu przydzielone)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_desctodo:={? var_pres('_b')=type_of('') || _b || 'N' ?};
_ope:={? var_pres('_c')=type_of(null()) || _c || OPERATOR.USER ?};
_czy_mp:={? var_pres('_e')=type_of(0) || _e || 1 ?};
_path:={? var_pres('_f')=type_of('') || _f || '' ?};
_otherfixed:=~~;
{? var_pres('_g')=type_of(0)
|| _otherfixed:=_g
?};

_moje:=__Status.TODO_MOJE;
_wolne:=__Status.TODO_WOLNE;

_automat:='N';

B_PROC.cntx_psh();
B_PREL.cntx_psh();
B_ACTION.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
{? BI_PREL.seek(_bi_prel) & BI_PREL.B_PREL().CLASS='B_ACTION'
||
:: Inicjuje obiekt Menadżera Procesu
   _class:={? __develop || @.Class.cProMan || @.CLASS.cProMan ?};
   _proMan:=obj_new(_class);
   _proMan.setCntx(BI_PREL.ref());
:: Aktualizacja opisów zadań - tryb
   _proMan.desctodo:=_desctodo;

:: Czy przypisywać zadanie konkretnemu użytkownikowi? (_assignTd=1)
   _assignTd:=B_PREL.ASSIGNTD='T';
:: lista użytkowników uprawniona do czynności
   _UsrsAct:={? var_pres('_d')=type_of(FIRMA) || _d || exec('usersAction','#b_desktop',BI_PREL.ref(),,,_path) ?};
:: Tworzenie zadań dla uprawnionych użytkowników
   {? _UsrsAct.first()
   ||
::    Czy więcej użytkowników uprawnionych niż jeden? (_other=1)
      {? type_of(_otherfixed)=type_of(0)
      || _other:=_otherfixed
      || _other:=_UsrsAct.size()>1
      ?};
::    Status zadania
      _status:=_wolne;
      {? _ope<>null & _UsrsAct.find_key($_ope,)
      || {? _assignTd
         || _status:=_moje;
            {? _czy_mp & BI_PREL.AUTOMAT='T' & +app_info('web_sesid')=0 || _automat:='T' ?}
         ?}
      || {? ~_other & _assignTd
         || _status:=_moje
         ?}
      ?};
::    Czy zadania dla wielu użytkowników? (_many=1)
      _many:=_status=_wolne & _other;

::    Aktualny użytkownik
      _user:=exec('FindAndGet','#table',USERS,_UsrsAct.USER,,,null());
      _user_r:=exec('FindAndGet','#table',USERS,_UsrsAct.USER_R,,,null());
::    Tworzę bufor tabeli BI_TODO wypełniając go wartościami
      _buffer:=exec('buffer4biprel','#bi_todo',,_status,_user,_user_r,_automat);

::    Generuje opis na ToDo który jest trzymany na BI_PREL (może też ustalić termin realizacji)
      _proMan.descTodo();
      BI_PREL.get();

::    Ustalenie terminu realizacji
      {? B_PREL.TR_MODE='U' & B_PREL.IVAL_DEF<>null()
      ||
         {? BI_PREL.PL_END=0
         ||
::          Tworzę termin realizacji na BI_PRELu
            BI_PREL.PL_END:=exec('get_pl_end','#bi_prel',BI_PREL.ref(),BI_PREL.tm_stamp());
            BI_PREL.put();
            ~~
         ?};

::       Tworzę termin realizacji na TODO
         {? BI_PREL.PL_END>0
         || _buffer.DEADLINE:=exec('to_string','#tm_stamp',BI_PREL.PL_END)
         ?}

::    Tworzę termin realizacji na TODO
      |? BI_PREL.PL_END>0
      || _buffer.DEADLINE:=exec('to_string','#tm_stamp',BI_PREL.PL_END)
      ?};

::    Dodaje rekord dla aktualnego użytkownika
      {? exec('add','#bi_todo',_buffer)>0
      ||
         {? _many>0
         ||
::          Dodaje rekordy dla innych użytkowników, jeśli aktualnego użytkownika nie było na liście
::          uprawnionych do wykonania tej czynności
            exec('otherUsers','#bi_todo',_buffer.Ref,1,_UsrsAct)
         ?};
         exec('orphan_assigned','#bi_todo',BI_PREL.ref())
      ?}
   ||
::    Brak uprawnionych użytkowników do wykonania czynności, więc zakładam rekord
::    bez użytkownika
      exec('orphan','#bi_todo')
   ?}
?};
B_ACTION.cntx_pop();
BI_PREL.cntx_pop();
B_PREL.cntx_pop();
B_PROC.cntx_pop();
~~


\buffer4biprel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy bufor tabeli BI_TODO na podstawie
::   WE: [_a] - BI_PREL.ref() - instancja elementu procesu
::       [_b] - BI_STAT.ref() - status
::       [_c] - USERS.ref()   - użytkownik
::       [_d] - USERS.ref()   - użytkownik zastępowany
::       [_e] - AUTOMAT       - uruchomiona autometycznie [T/N]
::   WY: obj_new - bufor tabeli BI_TODO
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_status:=__Status.TODO_WOLNE;
{? var_pres('_b')=type_of(SYSLOG.ref())
|| _status:=_b
?};

_user:=null();
{? var_pres('_c')=type_of(USERS.ref())
|| _user:=_c
?};

_user_r:=null();
{? var_pres('_d')=type_of(USERS.ref())
|| _user_r:=_d
?};

_automat:='N';
{? var_pres('_e')=type_of('')
|| _automat:=_e
?};

_buffer:=exec('buffer','#bi_todo');
_can_continue:=1;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?}; BI_PREL.index('UID');
{? _ref<>null()
|| BI_PREL.clear();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_PROC.cntx_psh();
   B_PREL.cntx_psh();

   BI_TODO.blank();
   _buffer.get();
   _buffer.BI_PREL:=BI_PREL.ref();
   _buffer.BI_PROC:=BI_PREL.BI_PROC;
   _buffer.USERS:=null();
   _buffer.CHANGE:=BI_TODO.tm_stamp();
   _buffer.POZ:=0;
   _buffer.EXECUT:='N';
   _buffer.BI_STAT:=_status;
   _buffer.AUTOMAT:=_automat;
   _buffer.USERS:=_user;
   _buffer.USERS_R:=_user_r;
   _buffer.B_PREL:=BI_PREL.B_PREL;
   _buffer.B_PROC:=BI_PREL.B_PREL().B_PROC;
   _buffer.DT:=date();
   _buffer.TM:=time();
   _buffer.FIRMA:={? BI_PREL.B_PREL().B_PROC().FIRMA
                  || B_PROC.FIRMA
                  || REF.FIRMA
                  ?};
   _buffer.FREE:=exec('statRunTodo','#bi_todo',_status,1);
   {? BI_PREL.PL_END>0
   || _buffer.DEADLINE:=exec('to_string','#tm_stamp',BI_PREL.PL_END)
   ?};
   _buffer.B_DOMAIN:=exec('FindInSet','#table','B_ACTION','B_ELE',BI_PREL.B_PREL().B_ELE,,"B_ACTION.B_DOMAIN",,,null());
   _buffer.ACT_UID:=exec('FindInSet','#table','B_ACTION','B_ELE',BI_PREL.B_PREL().B_ELE,,"B_ACTION.UID",,,'');
   _buffer.TODOTRIG:=exec('FindInSet','#table','B_ACTION','B_ELE',BI_PREL.B_PREL().B_ELE,,"B_ACTION.TODOTRIG",,,'N');

   _b_can:=
      {? exec('FindInSet','#table','B_ACTION','B_ELE',BI_PREL.B_PREL().B_ELE,,"B_ACTION.MANUAL='T'",,,1)
      || BI_PREL.B_PREL().B_CAN
      || exec('FindInSet','#table','B_ACTION','B_ELE',BI_PREL.B_PREL().B_ELE,,"B_ACTION.B_CAN",,,'')
      ?};
   {? _b_can='B' | _b_can='M'
   || _buffer.JTERM:='T'
   ?};
   {? _b_can='B' | _b_can='W'
   || _buffer.WEBTERM:='T'
   ?};
   _buffer.MEGA_DOM:=exec('domain_megad','#b_domain',_buffer.B_DOMAIN);
   B_PREL.cntx_pop();
   B_PROC.cntx_pop();
   ~~
?};
BI_PREL.cntx_pop();
_buffer


\orphan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zakłada zapis na TODO bez użytkownika, stempluje proces problemem że utknął bo nikt nie dostał
::       tego na TODO
::   WE: [_a] - BI_PREL.ref() - instancja elementu procesu
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};
_result:=0;
_can_continue:=1;

B_PREL.ref();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?}; BI_PREL.index('UID');
{? _ref<>null()
|| BI_PREL.clear();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
   BI_TODO.index('UNIQUE'); BI_TODO.prefix(BI_PREL.ref(),null());
   {? BI_TODO.size()=0
   || _status:=__Status.TODO_WOLNE;
      _buffer:=exec('buffer4biprel','#bi_todo',,_status,null());
      {? exec('add','#bi_todo',_buffer)>0
      ||
::       Dodałem sierocy zapis więc oznaczam statusem proces i element procesu
         exec('setStatus','#bi_prel',BI_PREL.ref(),__Status.ZAWIESZONA,1);
         exec('setStatus','#bi_proc',BI_PREL.BI_PROC,__Status.ZAWIESZONY);

::       Dodaje komunikat do BI_PRELa
         _msg:='Brak użytkownika uprawnionego do wykonania czynności: \''+BI_PREL.B_PREL().SYMBOL;
         _msg+='\'. Czynność czeka aż zostanie przydzielona do uprawnionego użytkownika.';
         exec('updateBiMsg','#bi_msg',BI_PREL.ref(),'O',_msg,_buffer.ref(),__Status.ZAWIESZONA);
         _result:=1
      ?}
   ?};
   BI_TODO.cntx_pop();
   ~~
?};
B_PREL.ref();
BI_PREL.cntx_pop();
BI_TODO.get();
BI_PREL.get();
_result


\prelMod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zmiana TODO dla BI_PREL
::   WE: _a - BI_PREL.ref
::       _b - BI_PREL.BI_STAT
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:={? var_pres('_a')<>type_of(null()) || null() || _a ?};
_bi_stat:={? var_pres('_b')<>type_of(null()) || null() || _b ?};

{? _bi_prel=null() | _bi_stat=null() || return(~~) ?};

:: jesli BI_PREL.BI_STAT nie zmienil sie analiza TODO jest przerywana
{? _bi_stat=bfld('BI_STAT') || return(~~) ?};

_wyn:=1;

_ope:=exec('operatorUser','#users');

_wolne:=__Status.TODO_WOLNE;
_moje:=__Status.TODO_MOJE;
_wykonane:=__Status.TODO_WYKONANE;
_wyk_inny:=__Status.TODO_WYK_INNY;
_wyk_auto:=__Status.TODO_WYK_AUTO;

_uruchomiona:=__Status.URUCHOMIONA;
_zakonczona:=__Status.ZAKONCZONA;
_oczekujaca:=__Status.OCZEKUJACA;
_anulowana:=__Status.ANULOWANA;

BI_PREL.cntx_psh();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('UNIQUE'); BI_TODO.prefix(_bi_prel);
:: czy jest TODO operatora
_isTdOpe:=BI_TODO.find_key(_ope);
:: analiza TODO instnacji elementu instancji procesie
_can_continue:=1;
{? BI_TODO.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      BI_TODO.cntx_psh();
      {? BI_TODO.next()
      || _ref_nxt:=BI_TODO.ref()
      ?};
      BI_TODO.cntx_pop();

      {? _bi_stat=_uruchomiona
      || _put:=0;
         {? BI_TODO.BI_STAT=_wolne & _isTdOpe
         || {? BI_TODO.USERS=_ope
            || BI_TODO.BI_STAT:=_moje;
               BI_TODO.TM_LANG:=0;
               {? BI_TODO.put() || exec('desc','#bi_todo',BI_TODO.BI_PREL) ?}
            || _can_continue:=BI_TODO.del()
            ?}
         ?}
      |? _bi_stat=_zakonczona
      || {? BI_TODO.USERS=_ope
         || BI_TODO.BI_STAT:={? BI_TODO.BI_PREL().AUTOMAT='T' || _wyk_auto || _wykonane ?}
         || BI_TODO.BI_STAT:=_wyk_inny
         ?};
         BI_TODO.TM_LANG:=0;
         _can_continue:=BI_TODO.put()
      |? _bi_stat=_anulowana
      || _can_continue:=BI_TODO.del(,1)
      ?};

      {? _ref_nxt<>null()
      || _next:=BI_TODO.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};

BI_TODO.cntx_pop();
BI_PREL.cntx_pop();
~~


\prelDel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Usunięcie TODO dla BI_PREL
::   WE: _a - BI_PREL
::   WY: 1-usunięcie powiodło się, 0-wpp
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:={? var_pres('_a')<>type_of(null()) || null() || _a ?};

_wyn:=0;

{? _bi_prel=null() || return(_wyn) ?};

BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('UNIQUE'); BI_TODO.prefix(_bi_prel);
_loop:=BI_TODO.first();
{!
|? _loop
|!
   _loop:={? exec('delete','#bi_todo',BI_TODO.ref())<=0 || 0 || BI_TODO.first() ?}
!};
_wyn:=~BI_TODO.first();
BI_TODO.cntx_pop();

_wyn


\freeTodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: aktualizuje znacznik FREE dla BI_TODO
::----------------------------------------------------------------------------------------------------------------------

BI_TODO.FREE:=exec('statRunTodo','#bi_todo',BI_TODO.BI_STAT,1);
{? BI_TODO.BI_STAT=__Status.TODO_ERROR & BI_TODO.EXECUT<>'E'
|| BI_TODO.EXECUT:='E'
|? BI_TODO.BI_STAT=__Status.TODO_BRAK_UPR & BI_TODO.D_BEGIN<>date(0,0,0)
|| BI_TODO.D_BEGIN:=date(0,0,0);
   BI_TODO.T_BEGIN:=time(0,0,0);
   BI_TODO.D_END:=date(0,0,0);
   BI_TODO.T_END:=time(0,0,0)
|? BI_TODO.BI_STAT=__Status.TODO_MOJE
  & BI_TODO.D_BEGIN=date(0,0,0)
|| BI_TODO.D_BEGIN:=date();
   BI_TODO.T_BEGIN:=time()
|? (BI_TODO.BI_STAT=__Status.TODO_WOLNE | BI_TODO.BI_STAT=__Status.TODO_WOLNE)
  & BI_TODO.D_BEGIN<>date(0,0,0)
|| BI_TODO.D_BEGIN:=date(0,0,0);
   BI_TODO.T_BEGIN:=time(0,0,0)
|? exec('statEndTodo','#bi_todo',BI_TODO.BI_STAT)
  & BI_TODO.D_END=date(0,0,0)
|| BI_TODO.EXECUT:='N';
   BI_TODO.D_END:=date();
   BI_TODO.T_END:=time()
?};
{? ~BI_TODO.FREE & BI_TODO.EXECUT='T' & ~exec('statRunTodo','#bi_todo',BI_TODO.BI_STAT,-1)
|| BI_TODO.EXECUT:='T'
?};
1


\statRunTodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Sprawdza czy podany status jest jednym z uruchomionych
::   WE: _a - BI_STAT.ref()
::       [_b] - 1 bez zajętych, 0(domyślnie) wszystkie bez nieuprawnionych, -1 wszystkie
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

_result:=0;

_result:=_a=__Status.TODO_MOJE | _a=__Status.TODO_WOLNE | (_b<0 & _a=__Status.TODO_BRAK_UPR);
_result


\statEndTodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Sprawdza czy podany status jest jednym z wykonanych
::   WE: _a - BI_STAT.ref()
::       [_b] - 1 bez przerwanych, 0(domyślnie) wszystkie
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

_result:=0;

_break:=__Status.TODO_BREAK;
_wykone:=__Status.TODO_WYKONANE;
_wykona:=__Status.TODO_WYK_AUTO;
_wykoni:=__Status.TODO_WYK_INNY;

_result:=_a=_wykone | _a=_wykona | _a=_wykoni | (~_b & _a=_break);
_result


\trigBiPrel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Obsługa triggerow tabeli BI_PREL w kontekscie BI_TODO
::----------------------------------------------------------------------------------------------------------------------
:: Aktualizacja wykonującego w instacji elementu procesu
_biPrel:={? _a='del' || bfld('BI_PREL') || BI_TODO.BI_PREL ?};
exec('biPrelWykon','#bi_todo',_biPrel);
~~


\biPrelWykon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Aktualizacja wykonującego w instacji elementu procesu
::   WE: _a - BI_PREL.ref()
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;

_moje:=__Status.TODO_MOJE;
_wykonane:=__Status.TODO_WYKONANE;
_wyk_auto:=__Status.TODO_WYK_AUTO;
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
{? BI_PREL.seek(_bi_prel)
|| BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
   BI_TODO.index('ELEMENT'); BI_TODO.prefix(_bi_prel);
   _cond:=
      BI_TODO.find_key(_moje)
      | BI_TODO.find_key(_wykonane)
      | BI_TODO.find_key(_wyk_auto);
   _users:={? _cond || BI_TODO.USERS || null() ?};
   _users_r:={? _cond || BI_TODO.USERS_R || null() ?};
   {? BI_PREL.USERS<>_users_r
   || BI_PREL.USERS:=_users;
      BI_PREL.USERS_R:=_users_r;
      BI_PREL.put()
   ?};
   BI_TODO.cntx_pop()
?};
BI_PREL.cntx_pop()


\delUsrActTodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: usuwa zapisy na BI_TODO po usunięciu roli dla użytkownika/czynności
::   WE: _a - FIRMA.ref()
::       _b - B_ROLE.ref()
::       [_c] - USER.ref()
::       [_d] - B_ACTION.ref()
::----------------------------------------------------------------------------------------------------------------------
_firma:=_a;
_b_role:=_b;

_users:=null;
{? var_pres('_c')=type_of(USERS.ref())
|| _users:=_c
?};

_b_action:=null();
{? var_pres('_d')=type_of(B_ACTION.ref())
|| _b_action:=_d
?};

_tab:=tab_tmp(1,'REF','STRING[16]','');

_moje:=__Status.TODO_MOJE;
_wolne:=__Status.TODO_WOLNE;

:: przygotowanie listy BI_TODO
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
{? _users<>null()
||
:: Kontekst użytkownika
   BI_TODO.index('USER');
   BI_TODO.prefix(_firma,_users,_moje);
   {? BI_TODO.first()
   || {!
      |?
         _tab.blank();
         _tab.clear();
         _tab.REF:=$BI_TODO.ref();
         _tab.add(1);
         BI_TODO.next()
      !}
   ?};

   BI_TODO.prefix(_firma,_users,_wolne);
   {? BI_TODO.first()
   || {!
      |?
         _tab.blank();
         _tab.clear();
         _tab.REF:=$BI_TODO.ref();
         _tab.add(1);
         BI_TODO.next()
      !}
   ?}
|? _b_action<>null()
||
   _act_uid:=exec('FindAndGet','#table',B_ACTION,_b_action,,"UID",'');
:: Kontekst czynności
   BI_TODO.index('STATUS');
   BI_TODO.prefix(_firma,_moje,_act_uid,);
   {? BI_TODO.first()
   || {!
      |?
         _tab.blank();
         _tab.clear();
         _tab.REF:=$BI_TODO.ref();
         _tab.add(1);
         BI_TODO.next()
      !}
   ?};
   BI_TODO.prefix(_firma,_wolne,_act_uid,);
   {? BI_TODO.first()
   || {!
      |?
         _tab.blank();
         _tab.clear();
         _tab.REF:=$BI_TODO.ref();
         _tab.add(1);
         BI_TODO.next()
      !}
   ?}
?};
BI_TODO.cntx_pop();

:: analiza listy BI_TODO
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('ALL'); BI_TODO.prefix();
B_PROC.cntx_psh();
B_PREL.cntx_psh();
B_USRROL.cntx_psh();
B_ACTROL.cntx_psh();
_tab.clear();
_loop:=_tab.first();
{!
|? _loop
|!
   BI_TODO.prefix();
   {? BI_TODO.seek(_tab.REF)
   || _del:=0;
      _otherUsr:=0;
      _todo_act:=exec('FindInSet','#table','B_ACTION','B_ELE',BI_TODO.B_PREL().B_ELE);

      {? BI_TODO.B_PROC().MICRO='T'
::    microproces (czynność)
      || {? _b_action=null() | _b_action=_todo_act
         || _del:=1;
            B_ACTROL.index('DISP2');
            B_ACTROL.prefix(_firma,_todo_act);
            _loop:=B_ACTROL.first();
            {!
            |? _loop
            |!
               {? B_ACTROL.B_ROLE<>_b_role
               || B_USRROL.index('UNIK');
                  B_USRROL.prefix(_firma,B_ACTROL.B_ROLE,BI_TODO.USERS);
                  {? B_USRROL.first() || _del:=0 ?};
                  {? _del & _otherUsr=0
                  || B_USRROL.prefix(_firma,B_ACTROL.B_ROLE);
                     _loop1:=B_USRROL.first();
                     {!
                     |? _loop1
                     |!
                        {? B_USRROL.USERS<>BI_TODO.USERS
                        || _otherUsr:=1
                        ?};
                        _loop1:=_otherUsr=0 & B_USRROL.next()
                     !}
                  ?}
               ?};
               _loop:=_del & B_ACTROL.next()
            !}
         ?}
::    proces
      |? _b_action=null()
         & (BI_TODO.USERS=_users | BI_TODO.USERS_R=_users)
         & BI_TODO.B_PREL().B_ROLE=_b_role
::    rola zadania w procesie zgodna z odbieraną rolą
      || _del:=1;
         B_USRROL.index('UNIK');
         B_USRROL.prefix(_firma,_b_role,_users);
         {? B_USRROL.first() || _del:=0 ?};
         {? _del
         || B_USRROL.prefix(_firma,_b_role);
            {? B_USRROL.first() & B_USRROL.next()
            || _otherUsr:=1
            ?}
         ?}
      ?};

::    usunięcie zadania lub zmiana statusu na wolne bez użytkownika
      {? _del
      || {? _otherUsr
         || {? BI_TODO.BI_STAT=__Status.TODO_MOJE || exec('todoRelease','#bi_todo',-1) ?};
            exec('delete','#bi_todo',BI_TODO.ref())
         ||
::          Żaden użytkownik nie jest uprawniony do wykonania tej czynności więc zakładam
::          rekord na ToDo bez użytkownika i kasuje bieżący
            _bi_todo:=BI_TODO.ref();
            exec('orphan','#bi_todo',BI_TODO.BI_PREL);
            exec('delete','#bi_todo',_bi_todo)
         ?}
      ?}
   ?};
   _loop:=_tab.next()
!};
B_ACTROL.cntx_pop();
B_USRROL.cntx_pop();
B_PREL.cntx_pop();
B_PROC.cntx_pop();
BI_TODO.cntx_pop();

1


\todoRelease
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwolnienie zadania
::   WE: _a - =0-wszyscy użytkownicy, =1-kontekst użytkownika, =-1-kontekst użytkownika bez pytania
::       [_b] - 0-bez komunikatów (do KOMM-a) 1(domyślnie)- z komunikatami
::       !!! UWAGA z _a=-1 jest wywyoływane z poziomu webterm
::----------------------------------------------------------------------------------------------------------------------
_usrCntx:=_a;
_info:={? var_pres('_b')=type_of(0) || _b || {? _usrCntx=-1 || -1 || 1 ?} ?};

_crc:=BI_TODO.crc();

{? ~BI_TODO.get()
|| {? _info>0
   || FUN.info('Nie znaleziono zadania.'@)
   |? ~_info
   || exec('add_kom','#message','Nie znaleziono zadania'@,4,'Zwalnianie zadań'@,__lp+=1)
   ?}
|? _crc<>BI_TODO.crc()
|| {? _info>0
   || FUN.info('Zadanie zmieniło się.\nZwolnij ponownie.'@)
   |? ~_info
   || exec('add_kom','#message','Zadanie: \"%1\" zmieniło się (należy zwolnić ponownie).'@[BI_TODO.BI_PREL().DESC]
       ,4,'Zwalnianie zadań'@,__lp+=1)
   ?}
|? BI_TODO.FIRMA<>REF.FIRMA
|| {? _info>0
   || FUN.info('Zadanie do wykonania w firmie %1'@[BI_TODO.FIRMA().SYMBOL])
   |? ~_info
   || exec('add_kom','#message'
       ,'Zadanie: \"%1\" do wykonania w firmie %2.'@[BI_TODO.BI_PREL().DESC,BI_TODO.FIRMA().SYMBOL]
       ,4,'Zwalnianie zadań'@,__lp+=1)
   ?}
|? exec('FindAndGet','#table',BI_PREL,BI_TODO.BI_PREL,,"
      exec('FindAndGet','#table',@.B_PREL,BI_PREL.B_PREL,,\"RELEASE<>'T'\",0)
   ",0)
|| {? _info>0
   || FUN.info('Brak uprawnień, aby zwolnić zadanie.'@)
   |? ~_info
   || exec('add_kom','#message'
       ,'Brak uprawnień, aby zwolnić zadanie \"%1\".'@[BI_TODO.BI_PREL().DESC]
       ,4,'Zwalnianie zadań'@,__lp+=1)
   ?}
|| _bi_todo:=BI_TODO.ref();

   {? _bi_todo=null() || return() ?};
   zw_act:=1;
   zw_act_usr:=BI_TODO.USERS;

   _locked:=0;
   {? do_state()=1
   ||
::    To jest spawarka na wypadek gdyby ta funkcja była wykonywana w transakcji, a dzieje się tak
::    podczas wycofywania akceptacji procesu: wtedy są usuwane uprawnienia roli do czynności, co powoduje
::    w pewnych przypadkach konieczność zwolnienia zadań na TODO. Idealnie byłoby wyciągnąć to blokowanie przed
::    transakcję, albo wyciągnąć usuwanie uprawnien przed transakcję. Na ten moment robię tu podczytanie BI_PREL
::    żeby transakcja mi go zablokowała - co gwarantuje chociaż że nikt go nie zmieni i usunie w innym wątku programu.
      BI_TODO.BI_PREL();
      _locked:=1
   || _locked:=exec('lock','#bi_prel',BI_TODO.BI_PREL,{? ~_info || 2 || 1 ?})
   ?};
   _can_continue:=_locked>0 & exec('chk_ended','#bi_proc',BI_TODO.BI_PROC,{? ~_info || 'Zwalnianie zadań' || '' ?});

   {? _can_continue>0
   ||
      _biprel:=BI_TODO.BI_PREL;

      _user:=exec('operatorUser','#users');

      _moje:=__Status.TODO_MOJE;
      _wolne:=__Status.TODO_WOLNE;

      _buffer:=exec('buffer','#bi_todo');
      _buffer.cntx_get(_bi_todo);
      BI_TODO.cntx_psh();
      {? (_usrCntx<=0 | _buffer.USERS=null() | exec('can_release','#bi_todo'))
      || {? _buffer.BI_STAT=_moje
         || {? _usrCntx=-1 | ~_info | FUN.ask('Czy chcesz zwolnić zadanie?'@)
            ||
               _trans:=do_state();
               {? ~_trans || do() ?};
               _buffer.BI_STAT:=_wolne;
               _buffer.PRIOR_W:=0;
               _status:=exec('FindAndGet','#table',BI_STAT,$_buffer.BI_STAT,,"BI_STAT.NAME");
               {? exec('put','#bi_todo',_buffer)
               || exec('otherUsers','#bi_todo',BI_TODO.ref(),1)
               ?};
               {? ~_trans || end() ?};

               _params:=params_get();
               {? type_of(_params)<>type_of(~~) & var_pres('args',_params)>0 & var_pres('load',_params.args)>0
               || _params.args.load()
               ?}
            ?}
         |? _usrCntx<>-1
         || _txt:=exec('FindAndGet','#table',BI_STAT,$_buffer.BI_STAT,,"BI_STAT.NAME",'');
            _txt1:=exec('FindAndGet','#table',BI_STAT,__Status.TODO_MOJE,,"BI_STAT.NAME",'');
            {? _info>0
            || FUN.info('Zadanie ma status: %1.\nOczekiwany jest status: %2.\nOpcja niedostępna.'@[_txt,_txt1])
            |? ~_info
            || exec('add_kom','#message'
                ,'Zadanie: \"%1\" ma status: %2. Oczekiwany jest status: %3. Opcja niedostępna.'@[BI_TODO.BI_PREL().DESC,_txt,_txt1]
                ,4,'Zwalnianie zadań'@,__lp+=1)
            ?}
         ?}
      |? _usrCntx<>-1
      || {? _info>0
         || FUN.info('Zadanie przypisane do innego użytkownika.\nOpcja niedostępna.'@)
         |? ~_info
         || exec('add_kom','#message'
             ,'Zadanie: \"%1\" przypisane do innego użytkownika.'@[BI_TODO.BI_PREL().DESC]
             ,4,'Zwalnianie zadań'@,__lp+=1)
         ?}
      ?};
      BI_TODO.cntx_pop()
   ?};
   {? _locked>0
   || exec('unlock','#bi_prel',BI_TODO.BI_PREL)
   ?};
   VAR_DEL.delete('zw_act')
?};
''


\otherUsers
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Generuje zapisy dla innych users-ów po zwolnieniu BI_TODO
::   WE: _a - BI_TODO.ref() - rekord na TODO dla którego rozmnożyć zapisy
::       _b - 1-generacja zapisów 0-usunięcie zapisów -1-usunięcie zapisów bez modyfikacji statusu danego na Moje
::       [_c] - tab_tmp - tabelka zawierająca uprawnionych użytkowników, jeśli nie podana, to
::                        pobierana na nowo
::----------------------------------------------------------------------------------------------------------------------
_bi_todo:={? var_pres('_a')<>type_of(null()) || null() || _a ?};
_add_del:={? var_pres('_b')<>type_of(0) || 1 || _b ?};

{? _bi_todo=null() || return(~~) ?};

_moje:=__Status.TODO_MOJE;
_wolne:=__Status.TODO_WOLNE;

_UsrsAct:=~~;
{? var_pres('_c')>100
|| _UsrsAct:=_c
?};

_trans:=do_state();

B_PROC.cntx_psh();
B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('UNIQUE'); BI_TODO.prefix();
{? BI_TODO.seek(_bi_todo)
||
   _ope:=BI_TODO.USERS;
   _desc:=BI_TODO.BI_PREL().DESC;
   _bi_prel:=BI_TODO.BI_PREL;

   {? _add_del>0
   ||
      _buffer:=exec('buffer','#bi_todo');
      _buffer.cntx_get(_bi_todo);
::    lista uzytkownikow uprawniona do czynnosci
      {? type_of(_UsrsAct)=0
      || _UsrsAct:=exec('usersAction','#b_desktop',BI_TODO.BI_PREL,_ope)
      ?};
      {? _UsrsAct.first()
      ||
::       dodanie ToDo
         {!
         |? {? _UsrsAct.USER<>$_ope
            || _buffer.USERS:=exec('FindAndGet','#table',USERS,_UsrsAct.USER,,,null());
               _buffer.USERS_R:=exec('FindAndGet','#table',USERS,_UsrsAct.USER_R,,,null());
               _buffer.BI_STAT:=_wolne;
               _status:=exec('FindAndGet','#table',BI_STAT,$_buffer.BI_STAT,,"BI_STAT.NAME");
               exec('add','#bi_todo',_buffer)
            || _buffer.USERS_R:=exec('FindAndGet','#table',USERS,_UsrsAct.USER_R,,,null());
               _buffer.BI_STAT:=_wolne;
               exec('add','#bi_todo',_buffer)
            ?};
            _UsrsAct.next()
         !}
      ||
::       Sprawdzam czy są jacyś użytkownicy uprawnieni do wykonania tej czynności
::       robię to ponownie ponieważ wyżej lista użytkowników uprawnionych omijała użytkownika
::       który miał to zadanie do tej pory
         _users_chk:=exec('usersAction','#b_desktop',BI_TODO.BI_PREL);
         {? _users_chk.size()=0
         ||
::          Żaden użytkownik nie jest uprawniony do wykonania tej czynności więc zakładam
::          rekord na ToDo bez użytkownika i kasuje bieżący
            exec('orphan','#bi_todo',BI_TODO.BI_PREL);
            exec('delete','#bi_todo',_bi_todo)
         ?}
      ?}
   ||
::    usuniecie ToDo
      {? ~_trans || do() ?};
      BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
      BI_TODO.index('UNIQUE'); BI_TODO.prefix(_bi_prel);
      {? BI_TODO.first()
      || {!
         |?
::          Usuwam wszystkie rekordy oprócz przekazanego w argumencie
            _next:=0;
            _ref_nxt:=null();
            BI_TODO.cntx_psh();
            {? BI_TODO.next()
            || _ref_nxt:=BI_TODO.ref()
            ?};
            BI_TODO.cntx_pop();

            {? BI_TODO.ref()=_bi_todo & _add_del=0
            ||
::             Nie usuwam siebie, tylko pobieram
               BI_TODO.BI_STAT:=_moje;
               BI_TODO.TM_LANG:=0;
               exec('visible_notify','#bi_todo');
               BI_TODO.put(1)
            |? BI_TODO.ref()<>_bi_todo
            || exec('delete','#bi_todo',BI_TODO.ref())
            ?};
            {? _ref_nxt<>null()
            || _next:=BI_TODO.seek(_ref_nxt)
            ?};
            _next>0
         !}
      ?};
      BI_TODO.cntx_pop();
      {? ~_trans || end() ?}
   ?}
?};
BI_PREL.cntx_pop();
B_PREL.cntx_pop();
B_PROC.cntx_pop();
BI_TODO.cntx_pop();
~~


\canRunBiPrel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Funkcja sprawdza czy można uruchomić instancję elementu w zależności od statusu na TODO
::   WE:  _a  [REFERENCE] - wskazanie na BI_PREL
::        _b  [REFERENCE] - wskazanie na USERS
::       [_c] [NUMBER]    - zezwalaj na przejmowanie zadania [0/1*]
::       [_d] [INTEGER]   - uruchamiaj formułę na access: 0/[1]
::   WY: -2 - użytkownik nie ma uprawnień do przejęcia zadania
::       -1 - brak zapisów na liście TODO
::       0 - użytkownik nie może uruchomić czynności - czynność przypisana do innego użytkownika
::       1 - użytkownik ma wygenerowane TODO ale nie ma odpowiedniego statusu
::       2 - użytkownik może uruchomić czynność w ramach wybranej instancji elementu
::       3 - brak zapisów na liście todo, ale czynność ma ich nie mieć (optymalizacja)
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
   _user:={? var_pres('_b')=type_of(null) || _b || return(0) ?};
_todoGet:={? var_pres('_c')=type_of(0)    || _c || 1 ?};
_chk_access:=1;
{? var_pres('_d')=type_of(0)
|| _chk_access:=_d
?};

_moje:=__Status.TODO_MOJE;
_wolne:=__Status.TODO_WOLNE;

_res:=-1;
B_PROC.cntx_psh();
B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('UNIQUE'); BI_TODO.prefix(_bi_prel);

{? (_user<>null() & BI_TODO.find_key(_user)) | BI_TODO.first()
|| _dalej:=1;
   _res:=1;
   {!
   |?
      {? BI_TODO.BI_STAT=_moje & BI_TODO.USERS<>_user
         &  ~exec('takeover','#b_action',
               exec('FindInSet','#table','B_ACTION','B_ELE',BI_TODO.BI_PREL().B_PREL().B_ELE,,"B_ACTION.UID",,,''))
      ||
::       brak uprawnień do przejęcia zadania
         _res:=-2
      || {? _todoGet
::          Zapis jest przejmowany przez bieżącego użytkownika
         || exec('todoGet','#bi_todo',-2,0)
         ?};

         {? BI_TODO.USERS<>null() & BI_TODO.USERS=OPERATOR.USER
         || _res:=
               {? BI_TODO.USERS_R<>null() & BI_TODO.USERS<>BI_TODO.USERS_R
               || _b_action:=exec('FindInSet','#table','B_ACTION','B_ELE',BI_TODO.BI_PREL().B_PREL().B_ELE);
                  BI_TODO.USERS=exec('zastepujacy','#users',,BI_TODO.USERS_R,_b_action,,B_PREL.B_ROLE).USER
                  & exec('user_access_fml','#b_proman',BI_TODO.USERS_R,BI_TODO.BI_PREL)
                  & exec('user_access_fml','#b_proman',BI_TODO.USERS,BI_TODO.BI_PREL,BI_TODO.USERS_R)
               || {? _chk_access>0
                  || exec('user_access_fml','#b_proman',BI_TODO.USERS,BI_TODO.BI_PREL)
                  || 1
                  ?}
               ?}
         || _res:=0
         ?};

         {? _res>0 & exec('statRunTodo','#bi_todo',BI_TODO.BI_STAT,1)
         || _res:=2;
            _dalej:=0
         ?}
      ?};

      _dalej & BI_TODO.next()
   !}
|| {? exec('can_create_todo','#bi_todo',_bi_prel)=-1
   || _res:=3
   ?}
?};
BI_TODO.cntx_pop();
BI_PREL.cntx_pop();
B_PREL.cntx_pop();
B_PROC.cntx_pop();
_res


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Zwraca środowisko dla okienka TODO
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
:: powiedzmy, że to bedzie pole
_fld:="31+form(_a)";
:: powiedzmy, że to bedzie metoda
_mth:="31+form(_a)";

_env:=obj_new(
::             Zmienne pomocnicze
               _fld('CUR_TAB','Bieżąca zakładka')

               ,_fld('ZAKRES','V - widoczne, A - wszystkie')
               ,_fld('LAST_UID','Czynność na której ostatnio stałem')
               ,_fld('LAST_FIR','Czynność na której ostatnio stałem')

               ,_fld('GRP_DISABLED','Czy okno zgrupowanych zadań wyszarzyć?')

::             Okienka
               ,_fld('WER_TODO','Okienko wertowania listy TODO')
               ,_fld('GRP','Okienko grupowe')
               ,_fld('GRP_ID','Identyfikator okna grupowego')
               ,_fld('WER_ACT','Okienko wertowania czynności')

::             Tabele tymczasowe
               ,_fld('TAB_ACT','Tabela tymczasowa czynności')

               ,_fld('NDX_ACT1','Indeks tabeli tymczasowej czynności')
               ,_fld('NDX_ACT2','Indeks tabeli tymczasowej czynności')

::             Metody
               ,_mth('load_act','Wczytuje tabelkę z czynnościami')
               ,_mth('update_act','Aktualizuje bieżący rekord w tabelce z czynnościami')
);

_todo_lang:=exec('lang','#bi_todo');
_env.WER_TODO:={? _todo_lang || 'WER_LANG' || 'WER' ?};
_env.GRP_ID:={? _todo_lang || '#bitodo_selang' || '#bitodo_sel_usr' ?};
_env.GRP_DISABLED:='';
_env.LAST_UID:='';
_env.LAST_FIR:='';
_env.CUR_TAB:='';
_env.ZAKRES:='V';

_env.TAB_ACT:=tab_tmp(2
   ,'FIRMA'   ,'STRING[10]' ,'Symbol firmy'
   ,'ACT_UID' ,'STRING[12]' ,'Identyfikator czynności'
   ,'ACT_REF' ,'STRING[16]' ,'$B_ACTION.ref()'
   ,'ACT_NAME','STRING[100]','Nazwa czynności'
   ,'DOMAIN'  ,'STRING[20]' ,'Nazwa dziedziny'
   ,'COUNT'   ,'REAL'       ,'Liczba zadań'
);

_env.NDX_ACT1:=_env.TAB_ACT.ndx_tmp(,,'FIRMA',,,'ACT_UID',,);
_env.NDX_ACT2:=_env.TAB_ACT.ndx_tmp(,,'COUNT',,1,'FIRMA',,,'ACT_NAME',,);

_env.WER_ACT:=_env.TAB_ACT.mk_sel('Czynności'@,,,'#btodoactgr',,,,,'U');
_env.TAB_ACT.win_fld(_env.WER_ACT,,'ACT_NAME',,,30,,,'Czynność'@);
_env.TAB_ACT.win_fld(_env.WER_ACT,,'FIRMA',,,10,,,'Firma'@);
_env.TAB_ACT.win_fld(_env.WER_ACT,,'DOMAIN',,,10,,,'Dziedzina'@);
_env.TAB_ACT.win_fld(_env.WER_ACT,,'COUNT',,,10,0,,'Liczba zadań'@);

_fb:="
   params_set(params_get());
   _env_todo:=params_get().env_todo;
   _env_todo.load_act();
   grp_disp(_env_todo.TAB_ACT,_env_todo.WER_ACT,1,1);
   ~~
";
_env.TAB_ACT.win_act(_env.WER_ACT,0,'Formuła','Odśwież'@@,,,_fb,,1);
_env.TAB_ACT.win_act(_env.WER_ACT,1,'Formuła','Odśwież'@@,,,_fb,,1);

_fb:="
   params_set(params_get());
   _env_todo:=params_get().env_todo;
   _names:=obj_new(2);
   _names[1]:='Widoczne'@;
   _names[2]:='Wszystkie'@;

   _vals:=obj_new(2);
   _vals[1]:='V';
   _vals[2]:='A';
   _edit:=exec('edit_radiobutton','#edit',_env_todo.ZAKRES,'Zakres wyświetlanych zadań'@,_names,_vals,'Zakres listy zadań'@);
   {? type_of(_edit)=type_of('')
   || _env_todo.ZAKRES:=_edit;
      _env_todo.load_act();
      grp_disp(_env_todo.TAB_ACT,_env_todo.WER_ACT,1,1)
   ?};
   ~~
";
_env.TAB_ACT.win_act(_env.WER_ACT,0,'Formuła','Zmień zakres'@@,,,_fb);
_env.TAB_ACT.win_act(_env.WER_ACT,1,'Formuła','Zmień zakres'@@,,,_fb);

_env.TAB_ACT.win_act(_env.WER_ACT,,'Kolejność');

_env.load_act:="
   B_ACTION.cntx_psh();
   BI_TODO.cntx_psh();
   B_DOMAIN.cntx_psh();
   _old:=ZAKR.VISIBLE;
   {? .ZAKRES='A'
   || ZAKR.VISIBLE:='N'
   |? .ZAKRES='V'
   || ZAKR.VISIBLE:='T'
   ?};
   exec('bitodo_zakres','#bi_todo');
   _tab:=.TAB_ACT;

   B_ACTION.index('B_ELE');
   _tab.erase();
   _tab.index(.NDX_ACT1);
   {? BI_TODO.first()
   || {!
      |? _tab.prefix(BI_TODO.FIRMA().SYMBOL,BI_TODO.ACT_UID,);
         {? _tab.first()=0
         || _tab.blank();
            _tab.FIRMA:=BI_TODO.FIRMA().SYMBOL;
            _tab.ACT_UID:=BI_TODO.ACT_UID;
            B_ACTION.prefix(BI_TODO.B_PREL().B_ELE);
            {? B_ACTION.first()
            || _tab.ACT_NAME:=B_ACTION.NAME;
               _tab.ACT_REF:=$B_ACTION.ref()
            ?};
            _tab.DOMAIN:=BI_TODO.B_DOMAIN().NAME;
            _tab.COUNT:=1;
            _tab.add()
         || _tab.COUNT+=1;
            _tab.put()
         ?};
         BI_TODO.next()
      !}
   ?};
   B_ACTION.cntx_pop();
   BI_TODO.cntx_pop();
   B_DOMAIN.cntx_pop();
   ZAKR.VISIBLE:=_old;

   _last_ref:=null();
   {? .LAST_UID<>'' & .LAST_FIR<>''
   || _tab.cntx_psh();
      _tab.index(.NDX_ACT1);
      _tab.prefix(.LAST_FIR,.LAST_UID,);
      {? _tab.first()
      || _last_ref:=_tab.ref()
      ?};
      _tab.cntx_pop()
   ?};
   _tab.index(.NDX_ACT2);
   _tab.prefix();
   {? _last_ref<>null()
   || _tab.seek(_last_ref)
   || _tab.first()
   ?};
   ~~
";
_env.update_act:="
   params_set(params_get());
   _tab:=.TAB_ACT;
   _tab.cntx_psh();
   _prev:=null;
   _seek_prev:=0;
   _tab.cntx_psh();
   {? _tab.prev()
   || _prev:=_tab.ref()
   ?};
   _tab.cntx_pop();

   {? .LAST_UID<>'' & .LAST_FIR<>''
   ||
      _tab.index(.NDX_ACT1);
      _tab.prefix(.LAST_FIR,.LAST_UID,);
      {? _tab.first()
      || _tab.COUNT:=BI_TODO.size();
         {? _tab.COUNT>0
         || _tab.put()
         ||
            _seek_prev:=1;
            _tab.del()
         ?}
      ?}
   ?};
   _tab.cntx_pop();
   {? _prev<>null() & _seek_prev>0
   || _tab.seek(_prev);
       grp_disp(.TAB_ACT,.WER_ACT,1,1)
   ?};
   ~~
";
_env


\select_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Wyświetlanie listy ToDo dla użytkownika na Jterm
::   WE: _a - użytkownik - PARAMETR NIE JEST JUŻ UŻYWANY
::       [_b] - INTEGER - 0/[1] - czy pokazywać górny panelplus
::                                używane dla listy zadań w osobnej zakładce, wtedy też okno zmaksymaizowane
::       [_c] - BI_TODO.ref - zadanie na którym się ustawić
::   WY: BI_TODO.ref - ref na którym się ustawił użytkownik
::----------------------------------------------------------------------------------------------------------------------
_panelplus:=1;
{? var_pres('_b')=type_of(0)
|| _panelplus:=_b
?};
_bi_todo:=null();
{? var_pres('_c')=type_of(BI_TODO.ref())
|| _bi_todo:=_c
?};
_result:=null();

_env_todo:=exec('env','#bi_todo');
params_set(exec('obj_ntab_set','#array',params_get(),'env_todo',_env_todo));

BI_TODO.cntx_psh();
exec('bitodo_zakres','#bi_todo');
exec('lang_init','#bi_todo');

exec('initIconBiTodo','#bi_todo',_env_todo.WER_TODO);

'Firma'@;
{? _panelplus>0
|| _before:="
      exec('load','#desktop','bi_todo','#bi_todo.dsk',,,,,,0);
      exec('set_value','#desktop','','bi_todo','firma@todo',REF.FIRMA().SYMBOL);
      exec('set_name','#desktop','','bi_todo','firma@todo','Firma'@);
   "+'
      params_set(params_get());
      grp_disp(BI_TODO,\'%1\',1);
      ~~
   '[_env_todo.WER_TODO];
   _before:=$_before;
   _env_todo.GRP:=BI_TODO.grp_make('Zadania'@,_before,_env_todo.GRP_ID,5,2,"exec('exit','zws')");
   exec('create','#desktop',BI_TODO,'bi_todo',_env_todo.GRP,1,2,,,'maximized',1);
   BI_TODO.grp_splt(_env_todo.GRP,,'horizontal','todo');
:: Okienko widocznych zadań
   _fb:="
      _env_todo:=params_get().env_todo;
      {? _a
      || _env_todo.CUR_TAB:='ZAD_VISIBLE'
      ?};
      ZAKR.VISIBLE:='T';
      exec('bitodo_zakres','#bi_todo');
      ~~
   ";
   BI_TODO.grp_sel(_env_todo.GRP,,_env_todo.WER_TODO,'Zadania'@,"exec('todo_after_refresh','#bi_todo')",,,30,_fb,,,,'maximized','ZAD')
|| _before:='
      params_set(params_get());
      grp_disp(BI_TODO,\'%1\',1);
      ~~
   '[_env_todo.WER_TODO];
   _before:=$_before;
   _env_todo.GRP:=BI_TODO.grp_make('Zadania'@,_before,_env_todo.GRP_ID,5,2,,,'maximized');
:: Okienko widocznych zadań
   _fb:="
      _env_todo:=params_get().env_todo;
      {? _a
      || _env_todo.CUR_TAB:='ZAD_VISIBLE'
      ?};
      ZAKR.VISIBLE:='T';
      exec('bitodo_zakres','#bi_todo');
      ~~
   ";
   BI_TODO.grp_sel(_env_todo.GRP,,_env_todo.WER_TODO,'Zadania'@,"exec('todo_after_refresh','#bi_todo')",,,30,_fb,,,,'maximized','ZAD')
?};
:: Okienko wszystkich zadań
_fb:="
   _env_todo:=params_get().env_todo;
   {? _a
   || _env_todo.CUR_TAB:='ZAD_ALL'
   ?};
   ZAKR.VISIBLE:='N';
   exec('bitodo_zakres','#bi_todo');
   ~~
";
BI_TODO.grp_sel(_env_todo.GRP,,_env_todo.WER_TODO,'Wszystkie zadania'@,"exec('todo_after_refresh','#bi_todo')",,,30,_fb,,,,'maximized','ZAD_ALL');

:: Okienko zgrupowanych zadań
_fb:="
   _env_todo:=params_get().env_todo;
   _refresh_act:=0;
   {? _a
   || {? _env_todo.CUR_TAB<>'ZAD_GRP'
      || _refresh_act:=1
      ?};
      _env_todo.CUR_TAB:='ZAD_GRP'
   ?};
   {? _refresh_act>0
   || _env_todo.load_act()
   ?};
   _env_todo.GRP_DISABLED
";
_after_rfr:="
   params_set(params_get());
   _env_todo:=params_get().env_todo;
   _env_todo.LAST_UID:=_env_todo.TAB_ACT.ACT_UID;
   _env_todo.LAST_FIR:=_env_todo.TAB_ACT.FIRMA;
   {? _env_todo.TAB_ACT.ref()<>null()
   ||
      _firma:=exec('from_sym','#firma',_env_todo.TAB_ACT.FIRMA);
      BI_TODO.index('USERGRP1');
      BI_TODO.prefix(_env_todo.TAB_ACT.ACT_UID,_firma,OPERATOR.USER,'T',1)
   || _env_todo.GRP_DISABLED:='#disable'
   ?};
   grp_disp(BI_TODO,_env_todo.WER_TODO,1,1);
   ~~
";

BI_TODO.grp_sel(_env_todo.GRP,_env_todo.TAB_ACT,_env_todo.WER_ACT,'Zadania pogrupowane'@,_after_rfr,,,30,_fb,,,,'maximized','ZAD_ACT');
BI_TODO.tab_splt(_env_todo.GRP,,'vertical','prawy',',30%');

_fb:="
   _env_todo:=params_get().env_todo;
   {? _a
   || _env_todo.CUR_TAB:='ZAD_GRP'
   ?};
   ~~
";
_after_rfr:="
   params_set(params_get());
   _env_todo:=params_get().env_todo;
   exec('todo_after_refresh','#bi_todo');
   _env_todo.update_act();
   grp_disp(_env_todo.TAB_ACT,_env_todo.WER_ACT,0,1);
   ~~
";
BI_TODO.grp_sel(_env_todo.GRP,,_env_todo.WER_TODO,,_after_rfr,,,30,_fb,,,,'maximized','ZAD_GRP');

BI_TODO.win_sel(_env_todo.GRP);

{? _bi_todo<>null()
|| BI_TODO.seek(_bi_todo)
?};

:: Ustalenie treści linku
_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)
|| _link:=_params.LINK
|| _link:=''
?};
:: Obsługa linku
{? _link=''
||
   BI_TODO.select(,1,10)
||
   {? BI_TODO.seek(_link)
   ||
      BI_TODO.select(,1,10,,'ZAD',,1)
   ||
      FUN.info('Nie odnaleziono zadania %1.'@[exec('record','#to_string',_link)])
   ?}
?};
_result:=BI_TODO.ref();
BI_TODO.cntx_pop();
_result


\select_user_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Wyświetlanie listy ToDo dla użytkownika na Webterm
::   WE: _a - użytkownik
::----------------------------------------------------------------------------------------------------------------------
exec('env_wt_core','#web_srv');
exec('maski','#b_proman');

:: Ustawienie wersji językowej użytkownika
exec('user_lang_set','#users');

web_global_params_set(exec('obj_ntab_set','#array',web_global_params_get(),'todo_zakr','T'));
web_title('%1: Zadania'@[exec('nazwa','#system')],'all');
exec('bitodo_zakres_www','#bi_todo');
exec('lang_init','#bi_todo');

_wer_akr:={? exec('lang','#bi_todo') || 'WER_WEBL' || 'WER_WEB' ?};
BI_TODO.web_select(_wer_akr);
~~


\select_4uidref_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Argument formuły \select_4uidref/#bi_todo.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
:: tabela przechowująca $BI_PREL.ref()
   'BI_PREL',
:: formuła ładująca ww dane (np. select BI_PREL.REFERENCE as REF from BI_PREL where "coś")
   'load',
:: fraza where filtra
   'where',
:: uidref() - rekord kluczowy
   'uidref',
:: obiekt z tabelą tymczasową do selekcji wybranych BI_PORTów
   'BI_PORT',
:: obiekt z tabelą tymczasową do selekcji wybranych B_KEYREFów
   'B_KEYREF',
:: Dolna tabelka z podsumowaniem
   'BOTTOM_TAB1',
:: Dolne okienko z podsumowaniem
   'BOTTOM_WIN1',
:: Dolna tabelka z podsumowaniem
   'BOTTOM_TAB2',
:: Dolne okienko z podsumowaniem
   'BOTTOM_WIN2',
:: Dolna tabelka z podsumowaniem
   'BOTTOM_TAB3',
:: Dolne okienko z podsumowaniem
   'BOTTOM_WIN3'
);
_args.BI_PREL:=tab_tmp(1,'REF','STRING[16]','BI_PREL.ref()');
_args.load:="~~";
_args.where:='1=1';
_args.uidref:='';
_args.BI_PORT:=obj_new('TAB','WER','load');
_args.BI_PORT.TAB:=_tab:=tab_tmp(2,
   'DT_STOP','DATE','Data końca',
   'TM_STOP','TIME','Czas końca',
   'PROCSYM','STRING[100]','Symbol procesu',
   'PROCVER','STRING[20]','Wesja procesu',
   'PROCNAM','STRING[100]','Nazwa procesu',
   'ACTION','STRING[100]','Czynność',
   'BI_PROC','STRING[16]','$BI_PROC',
   'BI_PREL','STRING[16]','$BI_PREL',
   'B_PREL','STRING[16]','$B_PREL',
   'CODE'  ,'STRING[13]','Kod elementu',
   'CODE_PRO','STRING[13]','Kod procesu',
   'USER','STRING[30]','Użytkownik',
   'ARCH','STRING[1]','Czy proces w archiwum?',
   'STAT_EL','STRING[40]','Status elementu',
   'STAT_PR','STRING[40]','Status procesu'
);
_args.B_KEYREF:=obj_new('TAB','WER');
_args.B_KEYREF.TAB:=B_KEYREF;
_args.B_KEYREF.WER:='';

{? app_info('web_sesid')=''
||
:: Okno rekordy kluczowe
   exec('b_keyref_wer2','#bi_inst',_args.B_KEYREF);

   _args.BI_PORT.WER:=_wer:=_tab.mk_sel(,,,'#biporty',,,,,'U');
   _tab.win_fld(_wer,,'ARCH',,,-10,,,'Archiwum?'@,,,2,,"\'T\'","\'N\'");
   _tab.win_fld(_wer,,'DT_STOP',,,,,,'Data'@);
   _tab.win_fld(_wer,,'TM_STOP',,,,,,'Czas'@);
   _tab.win_fld(_wer,,'USER',,,20,,,'Użytkownik'@);
   _tab.win_fld(_wer,,'ACTION',,,20,,,'Element procesu'@);
   _tab.win_fld(_wer,,'STAT_EL',,,-15,,,'Status elementu'@);
   _tab.win_fld(_wer,,'PROCSYM',,,-15,,,'Symbol procesu'@);
   _tab.win_fld(_wer,,'PROCVER',,,5,,,'Wersja'@);
   _tab.win_fld(_wer,,'PROCNAM',,,25,,,'Nazwa procesu'@);
   _tab.win_fld(_wer,,'STAT_PR',,,-15,,,'Status procesu'@);

   _formula:="
      _tab:=cur_tab(1,1);
      _bi_proc:=exec('FindAndGet','#table',BI_PROC,_tab.BI_PROC);
      _bi_prel:=exec('FindAndGet','#table',BI_PREL,_tab.BI_PREL);
      exec('select1','#bi_inst',_bi_proc,_bi_prel);
      ~~
   ";
   _tab.win_act(_wer,,'Formuła','&Elementy'@@,,,,_formula,,,,,'E');
   _tab.win_btn(_wer,'text='+'&Elementy'@,'menu:E');

   _formula:="
      _tab:=cur_tab(1,1);
      _bi_proc:=exec('FindAndGet','#table',BI_PROC,_tab.BI_PROC);
      _b_prel:=exec('FindAndGet','#table',B_PREL,_tab.B_PREL);
      exec('select4biproc_alt','#b_design',_bi_proc,_b_prel,'bi_proc_todo');
      ~~
   ";
   _tab.win_act(_wer,,'Formuła','Dia&gram przebiegu'@,,,,_formula);
   _tab.win_btn(_wer,'text='+'Dia&gram przebiegu'@,'menu:G');

   _args.BOTTOM_TAB1:=exec('todo_bottom_tab','#bi_todo');
   _args.BOTTOM_WIN1:=exec('todo_bottom_win','#bi_todo',_args.BOTTOM_TAB1,1);

   _args.BOTTOM_TAB2:=exec('todo_bottom_tab','#bi_todo');
   _args.BOTTOM_WIN2:=exec('todo_bottom_win','#bi_todo',_args.BOTTOM_TAB2);

   _args.BOTTOM_TAB3:=exec('todo_bottom_tab','#bi_todo');
   _args.BOTTOM_WIN3:=exec('todo_bottom_win','#bi_todo',_args.BOTTOM_TAB3);
   ~~
?};

_args.BI_PORT.load:="
   BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
   BI_PREL.cntx_psh();
   BI_PROC.cntx_psh();
   _mask:=BI_PORT.name()+4;
   exec('open','#bi_arch',_mask);
   BI_PORT.index('VALUE');

   BI_PORT.prefix(_a,'T','B_ACTION');
   {? BI_PORT.first()
   || {!
      |? {? BI_PORT.BI_PREL().STOP>0
         || .TAB.blank(1);
            .TAB.BI_PREL:=$BI_PORT.BI_PREL;
            {? ~.TAB.find_rec() & BI_PORT.B_PREL().CLASS='B_ACTION' & BI_PORT.B_PREL=BI_PORT.BI_PREL().B_PREL
            || .TAB.DT_STOP:=exec('tm_stamp2date','#tm_stamp',BI_PORT.BI_PREL().STOP);
               .TAB.TM_STOP:=exec('tm_stamp2time','#tm_stamp',BI_PORT.BI_PREL().STOP);
               .TAB.PROCSYM:=BI_PORT.BI_PROC().B_PROC().SYMBOL;
               .TAB.PROCVER:=BI_PORT.BI_PROC().B_PROC().VER;
               .TAB.PROCNAM:=BI_PORT.BI_PROC().B_PROC().NAME;
               .TAB.ACTION:=BI_PORT.B_PREL().SYMBOL;
               .TAB.BI_PROC:=$BI_PORT.BI_PROC;
               .TAB.BI_PREL:=$BI_PORT.BI_PREL;
               .TAB.B_PREL:=$BI_PORT.B_PREL;
               .TAB.USER:=BI_PORT.BI_PREL().USERS().NAME;
               .TAB.CODE:=BI_PREL.CODE;
               .TAB.CODE_PRO:=BI_PROC.CODE;
               {? _mask<>'____'
               || .TAB.ARCH:='T'
               || .TAB.ARCH:='N'
               ?};
               .TAB.STAT_EL:=BI_PORT.BI_PREL().BI_STAT().NAME;
               .TAB.STAT_PR:=BI_PORT.BI_PROC().BI_STAT().NAME;
               .TAB.add()
            ?}
         ?};
::         To wydaje się nadmiarowe, bo dodaje np zdarzenia startowe sygnałowe, które przekazują do procesu dany rekord
::         {? BI_PORT.SOURCE().STOP>0
::         || .TAB.blank(1);
::            .TAB.B_PREL:=$BI_PORT.SOURCE().B_PREL;
::            {? ~.TAB.find_rec()
::            || .TAB.DT_STOP:=exec('tm_stamp2date','#tm_stamp',BI_PORT.SOURCE().STOP);
::               .TAB.TM_STOP:=exec('tm_stamp2time','#tm_stamp',BI_PORT.SOURCE().STOP);
::               .TAB.PROCES:=BI_PORT.BI_PROC().B_PROC().NAME;
::               .TAB.ACTION:=BI_PORT.SOURCE().B_PREL().SYMBOL;
::               .TAB.BI_PROC:=$BI_PORT.BI_PROC;
::               .TAB.BI_PREL:=$BI_PORT.SOURCE;
::               .TAB.USER:=BI_PORT.BI_PREL().USERS().NAME;
::               .TAB.CODE:=BI_PREL.CODE;
::               .TAB.CODE_PRO:=BI_PROC.CODE;
::               .TAB.add()
::            ?}
::         ?};
         BI_PORT.next()
      !}
   ?};

   BI_PORT.prefix(_a,'N','B_ACTION');
   {? BI_PORT.first()
   || {!
      |? {? BI_PORT.BI_PREL().STOP>0
         || .TAB.blank(1);
            .TAB.BI_PREL:=$BI_PORT.BI_PREL;
            {? ~.TAB.find_rec() & BI_PORT.B_PREL().CLASS='B_ACTION' & BI_PORT.B_PREL=BI_PORT.BI_PREL().B_PREL
            || .TAB.DT_STOP:=exec('tm_stamp2date','#tm_stamp',BI_PORT.BI_PREL().STOP);
               .TAB.TM_STOP:=exec('tm_stamp2time','#tm_stamp',BI_PORT.BI_PREL().STOP);
               .TAB.PROCSYM:=BI_PORT.BI_PROC().B_PROC().SYMBOL;
               .TAB.PROCVER:=BI_PORT.BI_PROC().B_PROC().VER;
               .TAB.PROCNAM:=BI_PORT.BI_PROC().B_PROC().NAME;
               .TAB.ACTION:=BI_PORT.B_PREL().SYMBOL;
               .TAB.BI_PROC:=$BI_PORT.BI_PROC;
               .TAB.BI_PREL:=$BI_PORT.BI_PREL;
               .TAB.B_PREL:=$BI_PORT.B_PREL;
               .TAB.USER:=BI_PORT.BI_PREL().USERS().NAME;
               .TAB.CODE:=BI_PREL.CODE;
               .TAB.CODE_PRO:=BI_PROC.CODE;
               {? _mask<>'____'
               || .TAB.ARCH:='T'
               || .TAB.ARCH:='N'
               ?};
               .TAB.STAT_EL:=BI_PORT.BI_PREL().BI_STAT().NAME;
               .TAB.STAT_PR:=BI_PORT.BI_PROC().BI_STAT().NAME;
               .TAB.add()
            ?}
         ?};
::         To wydaje się nadmiarowe, bo dodaje np zdarzenia startowe sygnałowe, które przekazują do procesu dany rekord
::         {? BI_PORT.SOURCE().STOP>0
::         || .TAB.blank(1);
::            .TAB.B_PREL:=$BI_PORT.SOURCE().B_PREL;
::            {? ~.TAB.find_rec()
::            || .TAB.DT_STOP:=exec('tm_stamp2date','#tm_stamp',BI_PORT.SOURCE().STOP);
::               .TAB.TM_STOP:=exec('tm_stamp2time','#tm_stamp',BI_PORT.SOURCE().STOP);
::               .TAB.PROCES:=BI_PORT.BI_PROC().B_PROC().NAME;
::               .TAB.ACTION:=BI_PORT.SOURCE().B_PREL().SYMBOL;
::               .TAB.BI_PROC:=$BI_PORT.BI_PROC;
::               .TAB.BI_PREL:=$BI_PORT.SOURCE;
::               .TAB.USER:=BI_PORT.BI_PREL().USERS().NAME;
::               .TAB.CODE:=BI_PREL.CODE;
::               .TAB.CODE_PRO:=BI_PROC.CODE;
::               .TAB.add()
::            ?}
::         ?};
         BI_PORT.next()
      !}
   ?};
   BI_PREL.cntx_pop();
   BI_PROC.cntx_pop();
   BI_PORT.cntx_pop();
   .TAB.first();
   ~~
";

_args


\select_4uidref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetlanie listy ToDo dla wskazanych instancji czynności w procesie
::   WE: _a - argument formuły czyli wynik \select_4uidref_a/#bi_todo.fml
::       [_b] - zwróci ref pierwszego elementu na liście TODO jeśli jest, 0(domyślnie)-standardowe działanie
::   WY: ~~ lub wskanaie na BI_TODO
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
_res:=~~;
_bitodo:={? var_pres('_b')=type_of(0) || _b || 0 ?};

params_set('args',_args);

BI_TODO.cntx_psh();
exec('cntx_psh','#bi_arch');
_filtr_before:={? BI_TODO.f_active()=1 | BI_TODO.f_active()=3 || 1 || 0 ?};

_grp:=BI_TODO.grp_make('Zadania'@,,'todobiprels',,,,,'html_maximized');
_after_rfr:="
   _args:=params_get().args;
   exec('actions_grayed','#bi_todo');
   _begin:=$BI_TODO.D_BEGIN+' '+$BI_TODO.T_BEGIN;
   exec('todo_bottom_rfr','#bi_todo',_args.BOTTOM_TAB1,_args.BOTTOM_WIN1,BI_TODO.BI_PREL,_begin,_args.uidref)
";

_before:="
   _args:=params_get().args;
   {? _a>0
   || exec('open','#bi_arch');
      _args.load()
   ?}
";

BI_TODO.grp_sel(_grp,,'WER_PREL','Bieżące zadania'@,_after_rfr,,,20,_before,,,,'maximized');
BI_TODO.tab_splt(_grp,,'horizontal','bottom1',',67%');

BI_TODO.grp_edit(_grp,_args.BOTTOM_TAB1,_args.BOTTOM_WIN1);

exec('initIconBiTodo','#bi_todo','WER_PREL');

_before:="
   _args:=params_get().args;
   {? BI_TODO.f_active() || BI_TODO.f_clear() ?};
   _fml:=\"
      _args:=_b;
      _args.BI_PORT.load(_args.uidref)
   \";
   exec('for_each_mask','#table',BI_PORT,_fml,,,_args,,'Wczytywanie procesów...'@);
   ~~
";

_after_rfr:="
   _args:=params_get().args;
   exec('todo_bottom_rfr','#bi_todo',_args.BOTTOM_TAB2,_args.BOTTOM_WIN2,_args.BI_PORT.TAB.BI_PREL,,_args.uidref)
";
BI_TODO.grp_sel(_grp,_args.BI_PORT.TAB,_args.BI_PORT.WER,'Historia zadań w procesach'@,_after_rfr,,,20,_before,,,,'maximized');

BI_TODO.tab_splt(_grp,,'horizontal','bottom2',',67%');

BI_TODO.grp_edit(_grp,_args.BOTTOM_TAB2,_args.BOTTOM_WIN2);

_fb:="
   _args:=params_get().args;
   BI_PREL.cntx_psh();
   B_PREL.cntx_psh();
   B_PROC.cntx_psh();
   B_KEYREF.cntx_psh();

   B_KEYREF.index('KEYREF');
   B_KEYREF.prefix(_args.uidref,);
   ~~
";

_fa:="
   B_PROC.cntx_pop();
   B_PREL.cntx_pop();
   BI_PREL.cntx_pop();
   B_KEYREF.cntx_pop();
   ~~
";

_after_rfr:="
   _args:=params_get().args;
   exec('todo_bottom_rfr','#bi_todo',_args.BOTTOM_TAB3,_args.BOTTOM_WIN3,_args.B_KEYREF.TAB.BI_PREL,,_args.uidref)
";
{? _args.B_KEYREF.WER<>''
|| BI_TODO.grp_sel(_grp,_args.B_KEYREF.TAB,_args.B_KEYREF.WER,'Rekordy kluczowe'@,_after_rfr,,,20,_fb,_fa,,,'maximized')
?};

BI_TODO.tab_splt(_grp,,'horizontal','bottom3',',67%');

BI_TODO.grp_edit(_grp,_args.BOTTOM_TAB3,_args.BOTTOM_WIN3);


BI_TODO.win_sel(_grp);
BI_TODO.prefix();

{? _bitodo
|| _args.load();
   _res:={? BI_TODO.f_first() || BI_TODO.ref() || null() ?}
|| BI_TODO.select(,1,10)
?};
_filtr_after:={? BI_TODO.f_active()=1 | BI_TODO.f_active()=3 || 1 || 0 ?};

{? _filtr_before<>_filtr_after
||
:: Zmienił się filtr programowy w wyniku działania selecta więc usuwam filtr programowy
   BI_TODO.f_clear(1)
?};
exec('cntx_pop','#bi_arch');
BI_TODO.cntx_pop();
_res


\todo_bottom_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Zwraca tabelkę tymczasową do dolnego okienka z podsumowaniem
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(2,
   'BEGIN','STRING[20]','Data pobrania',
   'PROCSYM' ,'STRING[100]','Proces',
   'PROCNAME','STRING[100]','Proces',
   'PRELSYM','STRING[100]','Element procesu',
   'BI_PROC','STRING[16]','$BI_PROC',
   'BI_PREL','STRING[16]','$BI_PREL',
   'B_PREL','STRING[16]','$B_PREL',
   'CODE'  ,'STRING[13]','Kod elementu',
   'CODE_PRO','STRING[13]','Kod procesu',
   'KEYREF','STRING[100]','Rekord kluczowy',
   'KEYVAL','STRING[255]','Wartość opisowa klucza'
);
_tab


\todo_bottom_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Zwraca okienko dolne z podsumowaniem dla zadań TODO
::   WE: _a - tab_tmp - tabelka
::       [_b] - INTEGER - czy dodawać datę pobrania
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_fld_date:=0;
{? var_pres('_b')=type_of(0)
|| _fld_date:=_b
?};

_edit:=_tab.mk_edit('Podsumowanie'@,,'todobottom');
_tab.win_esep(_edit,'Zadanie'@);

_tab.win_efld(_edit,,'PROCSYM',,,40,,,'Symbol procesu'@);
_tab.win_efld(_edit,,'PROCNAME',,,40,,,'Nazwa procesu'@);
_tab.win_efld(_edit,,'PRELSYM',,,40,,,'Element procesu'@);
_tab.win_efld(_edit,,'CODE_PRO',,,13,,,'Kod instancji procesu'@);
{? _fld_date>0
|| _tab.win_efld(_edit,,'BEGIN',,,40,,,'Data pobrania'@)
?};
_tab.win_ecol(_edit);

_tab.win_esep(_edit,'Rekord kluczowy'@);
_tab.win_efld(_edit,,'KEYREF',,,40,,,'Klucz'@);
_tab.win_efld(_edit,,'KEYVAL',,,40,,,'Wartość klucza'@);

_edit


\todo_bottom_rfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Zasila dolne okienko z podsumowaniem
::   WE: _a - tab_tmp - tabelka do zasilenia
::       _b - STRING - akronim okienka
::       _c - BI_PREL.ref - element procesu
::       [_d] - STRING - data pobrania
::       [_e] - STRING - rekord kluczowy
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_win:=_b;
_bi_prel:=_c;
_begin:='';
{? var_pres('_d')=type_of('')
|| _begin:=_d
?};
_uidref:='';
{? var_pres('_e')=type_of('')
|| _uidref:=_e
?};
_tab.erase();
_tab.blank();
_mask:=ref_name(_bi_prel);
{? _mask<>''
|| BI_PREL.use(_mask);
   _mask:=_mask+4;
   exec('open','#bi_arch',_mask)
?};
BI_PREL.prefix();
{? BI_PREL.seek(_bi_prel)
||
   _tab.BEGIN:=_begin;
   _tab.PROCSYM:=BI_PREL.BI_PROC().B_PROC().SYMBOL;
   _tab.PROCNAME:=B_PROC.NAME;
   _tab.PRELSYM:=BI_PREL.B_PREL().SYMBOL;
   _tab.BI_PROC:=$BI_PREL.BI_PROC;
   _tab.BI_PREL:=$BI_PREL.ref();
   _tab.B_PREL:=$B_PREL.ref();
   _tab.CODE:=BI_PREL.CODE;
   _tab.CODE_PRO:=BI_PREL.BI_PROC().CODE;

   {? _uidref<>''
   || _tab.KEYREF:=_uidref;
      _tab.KEYVAL:=exec('record','#to_string',_uidref)
   ?};
   _tab.add();
   _tab.first()
|? _uidref<>''
|| _tab.KEYREF:=_uidref;
   _tab.KEYVAL:=exec('record','#to_string',_uidref);
   _tab.add();
   _tab.first()
?};
grp_edisp(_tab,_win);
~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wyświetlanie listy ToDo
::   WE: [_a] - 1-wg zgłoszonych błędów
::              0(domyślnie)-wszystkie zadania (wg uprawnień do modelowania procesów własnych albo wszystkich)
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

BI_MSG.cntx_psh();
BI_TODO.win_sel('GRP');
exec('initIconBiTodo','#bi_todo','WER_ALL');
exec('initIconBiMsg','#bi_msg');
_inst:=0;
{? ~_a
|| _upr_all:=exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODE');
   _upr_own:=exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODW');
   {? _upr_all>0
   || BI_TODO.index('ALL');
      BI_TODO.prefix(REF.FIRMA)
   |? _upr_own>0
   || BI_TODO.index('ALL_OWN');
      BI_TODO.prefix(OPERATOR.USER,REF.FIRMA)
   || BI_TODO.index('ALL_OWN');
      BI_TODO.prefix(null(),null())
   ?}
|| VAR_DEL.delete('__instan');
   __instan:=1;
   _inst:=1;
   BI_TODO.index('ERROR');
   BI_TODO.prefix(BI_PROC.ref());
   BI_TODO.btn_sopt('WER_ALL','TODO_ARC','state=grayed')
?};
BI_TODO.select();
{? _inst || BI_TODO.btn_sopt('WER_ALL','TODO_ARC','state=normal') ?};
VAR_DEL.delete('__instan');
BI_MSG.cntx_pop();
~~


\todo_after_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'after_refresh' w oknie grupowym BI_TODO.GRP dla okna składowego BI_TODO.WER_ALL
::----------------------------------------------------------------------------------------------------------------------
exec('actions_grayed','#bi_todo');
~~


\actions_grayed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'after_refresh' w oknach grupowych zawierających okno BI_TODO
::       służy do wyszarzania akcji w oknie BI_TODO
::----------------------------------------------------------------------------------------------------------------------
{? BI_TODO.ref()=null()
||
:: Nieustalony kontekst tabeli od razu idzie na drzewo
   return()
?};
_ope:=exec('operatorUser','#users');
_keys:=':';
_end:=exec('statEndTodo','#bi_todo',BI_TODO.BI_STAT);
_sel:=BI_TODO.sel_size();
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL');
BI_PROC.cntx_psh();
{? _end
|| _keys:='REW'+{? ~_sel || 'OYZ' || '' ?}+_keys;

   {? BI_TODO.BI_PREL<>null()
   || BI_MSG.prefix(BI_TODO.BI_PREL);
      {? BI_MSG.first()=0
      || _keys:='M'+_keys
      ?}
   || _keys:='M'+_keys
   ?};
   ~~
|| BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?};
   BI_PROC.index('UID'); BI_PROC.prefix();
   B_PROC.cntx_psh();
   {? BI_TODO.USERS<>_ope | ~exec('statRunTodo','#bi_todo',BI_TODO.BI_STAT,1)
   || _keys:='RE'+{? ~_sel || {? ~exec('can_release','#bi_todo') || 'Z' || '' ?}+'O' || '' ?}+_keys
   ?};
   {? BI_TODO.BI_STAT=__Status.TODO_ERROR
   || _keys:='RE'+{? ~_sel || 'ZO' || '' ?}+_keys
   || _keys:='W'+_keys
   ?};
   {? BI_TODO.BI_STAT=__Status.TODO_WOLNE
   || _keys:={? ~_sel || 'Z' || '' ?}+_keys
   ?};
   {? BI_TODO.BI_STAT=__Status.TODO_MOJE
   || _keys:={? ~_sel || 'O' || '' ?}+_keys
   ?};
   {? BI_PROC.seek(BI_TODO.BI_PROC,ref_name(BI_TODO.BI_PROC),1) & BI_PROC.B_PROC().MICRO='T'
   || _keys:='G'+_keys
   ?};
   {? BI_TODO.PRIOR_W>0 & ~_sel
   || _keys:='I(W)'+_keys
   |? BI_TODO.PRIOR_W=0 & ~_sel
   || _keys:='I(Z)'+_keys
   ?};
   {? exec('can_assign','#bi_todo')=0
   || _keys:={? ~_sel || 'Y' || '' ?}+_keys
   ?};
   {? BI_TODO.BI_PREL<>null()
   || BI_MSG.prefix(BI_TODO.BI_PREL);
      {? BI_MSG.first()=0
      || _keys:='M'+_keys
      ?}
   || _keys:='M'+_keys
   ?};
   {? exec('FindAndGet','#table',B_PREL,BI_TODO.B_PREL,,"B_PREL.RELEASE='N'",0) || _keys:='Z'+_keys ?};
   B_PROC.cntx_pop();
   BI_PROC.cntx_pop();
   ~~
?};
BI_PROC.cntx_pop();
BI_MSG.cntx_pop();
BI_TODO.actions_grayed(cur_win(1,1),_keys);
~~


\tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Tabela tymczasowa ToDo
::   WE: _a - obj_new('TAB','WER')
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_obj.TAB:=tab_tmp(3
   ,'LOGIN'    ,'STRING[100]' ,'Kod użytkownika'
   ,'POZ'      ,'INTEGER'     ,'Pozycja'
   ,'S_NAME'   ,'STRING[100]' ,'Status'
   ,'TODO'     ,'STRING[255]' ,'Zadanie'
   ,'CODE'     ,'STRING[13]'  ,'Instancja procesu'
   ,'REF'      ,'STRING[16]'  ,'$BI_TODO.ref')


\tabNdx1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Indeks (US_DANE,POZ) tymczasowy tabeli tworzonej w exec('tab','#bi_todo')
::   WE: _a - uchwyt do tabeli tworzonej w exec('tab','#bi_todo')
::   WY: Uchwyt do indeksu tymczasowego
::----------------------------------------------------------------------------------------------------------------------
_Tab:=_a;

_Tab.ndx_tmp(,
   ,'LOGIN',,
   ,'POZ',,)


\tabNdx2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Indeks (REF) tymczasowy tabeli tworzonej w exec('tab','#bi_todo')
::   WE: _a - uchwyt do tabeli tworzonej w exec('tab','#bi_todo')
::   WY: Uchwyt do indeksu tymczasowego
::----------------------------------------------------------------------------------------------------------------------
_Tab:=_a;

_Tab.ndx_tmp(,
   ,'REF',,)


\tabNdx3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Indeks (REF) tymczasowy tabeli tworzonej w exec('tab','#bi_todo')
::   WE: _a - uchwyt do tabeli tworzonej w exec('tab','#bi_todo')
::   WY: Uchwyt do indeksu tymczasowego
::----------------------------------------------------------------------------------------------------------------------
_Tab:=_a;

_Tab.ndx_tmp(,
   ,'S_NAME',,)


\tabFill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wypelnienie tabeli tworzonej w exec('tab','#bi_todo')
::   WE: _a - uchwyt do tabeli tworzonej w exec('tab','#bi_todo')
::   WE: _b - =0-wszyscy uzytkownicy, =1-kontekst uzytkownika
::----------------------------------------------------------------------------------------------------------------------
_Tab:=_a;
_usrCntx:=_b;

_users:={? _usrCntx || exec('operatorUser','#users') || null() ?};

_todo_moje:=__Status.TODO_MOJE;
_todo_wolne:=__Status.TODO_WOLNE;

B_ACTION.cntx_psh();
B_ACTION.index('B_ELE');
B_PROC.cntx_psh();
B_PREL.cntx_psh();
BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?};
BI_PROC.index('UID'); BI_PROC.prefix();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('ALL'); BI_TODO.prefix();
_loop:=BI_TODO.first();
{!
|? _loop
|!
   {? _users=null()
      | _users=BI_TODO.USERS & (BI_TODO.BI_STAT=_todo_moje | BI_TODO.BI_STAT=_todo_wolne)
   ||
::    opis todo
      _todo_o:=BI_TODO.BI_PREL().B_PREL().B_PROC().SYMBOL+' - '+B_PREL.SYMBOL;
::    wypelnienie bufora _Tab
      _Tab.LOGIN:=BI_TODO.USERS().KOD;
      _Tab.POZ:=0;
      _Tab.S_NAME:=BI_TODO.BI_STAT().NAME;
      _Tab.TODO:=_todo_o;
      _Tab.CODE:=BI_TODO.BI_PREL().BI_PROC().CODE;
      _Tab.REF:=$BI_TODO.ref();
      _Tab.add()
   ?};
   _loop:=BI_TODO.next()
!};
BI_TODO.cntx_pop();
BI_PREL.cntx_pop();
BI_PROC.cntx_pop();
B_PREL.cntx_pop();
B_PROC.cntx_pop();
B_ACTION.cntx_pop()


\todoGet
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Pobranie zadania
::   WE:  _a - =0-wszyscy uzytkownicy, =1-kontekst uzytkownika, =-1-kontekst uzytkownika bez pytania,
::            =-2-jak -1, ale wymuszenie zmiany nawet gdy 'moje'
::       [_b] - INTEGER - 0/[1] - czy wyświetlać komunikaty o niepowodzeniu 2-zapis do KOMM-a
::       [_c] - USERS.ref() - użytkownik któremu zadanie pobrać. Jeśli nie podane to OPERATOR.USER
::       [_d] - USERS.ref() - użytkownik zastępowany. Jeśli nie podane to OPERATOR.USER
::       [_e] - 'N'-przypisane automatycznie, 'T'-przypisane ręcznie
::       !!! UWAGA z _a=-1 jest wywyoływane z poziomu webterm
::----------------------------------------------------------------------------------------------------------------------
_usrCntx:=_a;
_dialog:=1;

{? var_pres('_b')=type_of(0)
|| _dialog:=_b
?};

_user:=OPERATOR.USER;
{? var_pres('_c')=type_of(USERS.ref())
|| _user:=_c
?};

{? var_pres('_d')=type_of(USERS.ref())
|| _user_r:=_d
|? BI_TODO.USERS=_user & BI_TODO.USERS_R<>null()
|| _user_r:=BI_TODO.USERS_R
|| _user_r:=_user
?};

_manassig:='N';
{? var_pres('_e')=type_of(0)
|| _manassig:=_e
?};

_crc:=BI_TODO.crc();

{? ~BI_TODO.get()
|| {? _dialog=1
   || FUN.info('Nie znaleziono zadania.'@)
   |? _dialog=2
   || exec('add_kom','#message','Nie znaleziono zadania'@,4,'Pobranie zadań'@,__lp+=1)
   ?}
|? _crc<>BI_TODO.crc()
|| {? _dialog=1
   || FUN.info('Zadanie zmieniło się.\nPobierz ponownie.'@)
   |? _dialog=2
   || exec('add_kom','#message','Zadanie: \"%1\" zmieniło się (należy pobrać ponownie).'@[BI_TODO.BI_PREL().DESC]
       ,4,'Pobranie zadań'@,__lp+=1)
   ?}
|? BI_TODO.FIRMA<>REF.FIRMA
|| {? _dialog=1
   || FUN.info('Zadanie do wykonania w firmie %1'@[BI_TODO.FIRMA().SYMBOL])
   |? _dialog=2
   || exec('add_kom','#message'
       ,'Zadanie: \"%1\" do wykonania w firmie %2.'@[BI_TODO.BI_PREL().DESC,BI_TODO.FIRMA().SYMBOL]
       ,4,'Pobranie zadań'@,__lp+=1)
   ?}
|| {? _a<>0 || pob_act:=_a ?};
   _bi_todo:=BI_TODO.ref();

   {? _bi_todo=null() || return() ?};

   _do_state:=do_state();
   _locked:=
      {? _do_state
      || 1
      || exec('lock','#bi_prel',BI_TODO.BI_PREL,{? _usrCntx=-2 || 0 || _dialog ?})
      ?};
   _can_continue:=_locked>0 & exec('chk_ended','#bi_proc',BI_TODO.BI_PROC,{? _dialog=2 || 'Pobieranie zadań' || '' ?});

   {? _can_continue>0
   ||
      _biprel:=BI_TODO.BI_PREL;

      _moje:=__Status.TODO_MOJE;
      _wolne:=__Status.TODO_WOLNE;

      _buffer:=exec('buffer','#bi_todo');
      _buffer.cntx_get(_bi_todo);
      BI_TODO.cntx_psh();
      BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?};
      BI_PROC.index('UID'); BI_PROC.prefix();
      BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
      BI_PREL.index('UID'); BI_PREL.prefix();
      B_PREL.cntx_psh();
      USERS.cntx_psh();
      {? _buffer.BI_STAT=_wolne
         | (_usrCntx=-2 & _buffer.BI_STAT=_moje & _buffer.USERS<>_user)
      || {? _usrCntx=-1 | _usrCntx=-2 | _dialog<>1 | FUN.ask('Czy chcesz pobrać zadanie?'@)
         ||
::          Podczytanie instancji elementu procesu
            BI_TODO.BI_PREL();
::          Sprawdzam czy użytkownik ma uprawnienia do konkretnej czynności
            _has_upr:=exec('user_access','#bi_prel',_user,BI_TODO.BI_PREL,BI_TODO.USERS_R);
            {? _has_upr>0
            ||
               _mydo:=do_state()=0;
               {? _mydo || do() ?};

               {? _buffer.USERS=null()
               ||
::                Przydzieliłem użytkownika do osieroconego zapisu więc kasuje statusy zawieszone
::                z elementu procesu i procesu
                  exec('orphan_assigned','#bi_todo');
                  _buffer.USERS:=_user
               ?};
               {? _user<>_buffer.USERS
               || _buffer.PRIOR_W:=0
               ?};
               {? _usrCntx=-2
               || _buffer.USERS:=_user;
                  _buffer.USERS_R:=_user_r;
                  _buffer.MANASSIG:=_manassig
               ?};
               _buffer.BI_STAT:=_moje;
               {? exec('put','#bi_todo',_buffer)
               || exec('otherUsers','#bi_todo',_bi_todo,0)
               ?};
               {? _mydo || end() ?}
            || {? _dialog>0
               || exec('no_access_msg','#bi_prel',_user)
               ?}
            ?}
         ?}
      |? _usrCntx<>-1 & _usrCntx<>-2
      || {? _dialog>0
         || _txt:=exec('FindAndGet','#table',BI_STAT,$_buffer.BI_STAT,,"BI_STAT.NAME",'');
            _txt1:=exec('TODO_WOLNE','#bi_stat','name');
            {? _dialog=1
            || FUN.info('Zadanie ma status: %1.\nOczekiwany jest status: %2.\nOpcja niedostępna.'@[_txt,_txt1])
            |? _dialog=2
            || exec('add_kom','#message'
                 ,'Zadanie: \"%1\" ma status: %2. Oczekiwany jest status: %3. Opcja niedostępna.'@[BI_TODO.BI_PREL().DESC,_txt,_txt1]
                 ,4,'Pobranie zadań'@,__lp+=1)
            ?}
         ?}
      ?};
      BI_TODO.cntx_pop();
      BI_TODO.get();
      BI_PREL.cntx_pop();
      BI_PROC.cntx_pop();
      B_PREL.cntx_pop();
      USERS.cntx_pop()
   ?};
   {? _do_state=0 & _locked>0 || exec('unlock','#bi_prel',BI_TODO.BI_PREL) ?};
   VAR_DEL.delete('pob_act')
?};
''


\todoRun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Funkcja uruchamiająca z listy TODO (w obszarze 'Zadania' albo z pulpitu)
::       czynność na podstawie wskazania do BI_PREL
::   WE: [_a] - STRING - tytuł zakładki, który ma być przywrócony po wykonaniu zadania z listy
::----------------------------------------------------------------------------------------------------------------------
_title:='Zadania'@;
{? var_pres('_a')=type_of('')
|| _title:=_a
?};

_crc:=BI_TODO.crc();
_ref1:=_ref2:=null();

_moje:=__Status.TODO_MOJE;
_wolne:=__Status.TODO_WOLNE;

{? ~BI_TODO.get()
|| FUN.info('Nie znaleziono zadania.'@)
|? _crc<>BI_TODO.crc()
|| FUN.info('Zadanie zmieniło się.\nUruchom ponownie.'@)
|? BI_TODO.FIRMA<>REF.FIRMA
|| FUN.info('Zadanie do wykonania w firmie %1'@[BI_TODO.FIRMA().SYMBOL])
|? +app_info('web_sesid')=0 & exec('FindInSet','#table','B_ACTION','B_ELE',BI_TODO.B_PREL().B_ELE,,"B_ACTION.B_CAN='W'")
|| FUN.info('Czynność należy wywołać w webTerm.'@)
|| _bi_todo:=BI_TODO.ref();

   {? _bi_todo=null() || return() ?};

   _biprel:=BI_TODO.BI_PREL;

   _user:=exec('operatorUser','#users');
   _buffer:=exec('buffer','#bi_todo');
   _buffer.cntx_get(_bi_todo);
   BI_TODO.cntx_psh();
   {? (_buffer.USERS=null() | _buffer.USERS=_user)
   || {? (_buffer.BI_STAT=_wolne
         | _buffer.BI_STAT=_moje)
      || {? BI_TODO.seek(_bi_todo)
         || _buffer.get();
            {? _buffer.BI_PREL<>null()
            || BI_TODO.cntx_psh();
               _ref1:=BI_TODO.ref();
               {? BI_TODO.next() | BI_TODO.prev() || _ref2:=BI_TODO.ref() ?};
               BI_TODO.cntx_pop();
               {? _buffer.BI_STAT=_wolne
               || BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
                  BI_PREL.index('UID'); BI_PREL.prefix();
                  {? BI_PREL.seek(_biprel) & BI_PREL.r_lock(1,1,1)
                  || exec('todoGet','#bi_todo',-1);
                     BI_PREL.r_unlock()
                  || FUN.info('Zadanie zablokowane przez innego użytkownika.'@)
                  ?};
                  BI_PREL.cntx_pop()
               ?};
               _buffer.get();
               {? _buffer.BI_STAT=_moje
               || exec('proMan','#b_proman',_buffer.BI_PREL,'',,'Todo')
               ?};

               exec('title','#bi_todo',_title)

            || FUN.error('Brak wskazania na instancję procesu.'@)
            ?}
         ?}
      || _txt:=exec('FindAndGet','#table',BI_STAT,$_buffer.BI_STAT,,"BI_STAT.NAME",'');
         _txt1:=exec('TODO_WOLNE','#bi_stat','name');
         _txt2:=exec('TODO_MOJE','#bi_stat','name');
         FUN.info('Zadanie ma status: %1'
            '.\nOczekiwany jest status: \'%2\' lub \'%3\'.\nOpcja niedostępna.'@[_txt,_txt1,_txt2])
      ?}
   || FUN.info('Zadanie przypisane do innego użytkownika.\nOpcja niedostępna.'@)
   ?};
   BI_TODO.cntx_pop();
   {? cur_win(1,1)='WER_PREL'
   || params_get().args.load()
   ?};
   {? ~((_ref1 & BI_TODO.seek(_ref1)) | (_ref2 & BI_TODO.seek(_ref2))) || BI_TODO.first() ?}
?};
''


\todorunwww
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: Funkcja uruchamiająca z listy TODO czynność na podstawie wskazania do BI_PREL
::       funkcja uruchamiana na WWW
::   WE: [_a] - czy odbudowywać środowisko 1 - tak 0 - nie
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};
{? _a=1
|| web_params_set(web_params_get());
   exec('env_wt_core','#web_srv')
?};
{? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
_crc:=BI_TODO.crc();
_ref1:=_ref2:=null;
{? ~BI_TODO.get()
||
   BI_TODO.web_refresh(web_top_win(1));
   FUN.info('Nie znaleziono zadania.'@)
|? _crc<>BI_TODO.crc()
|| FUN.info('Zadanie zmieniło się.\nUruchom ponownie.'@)
|? BI_TODO.FIRMA<>REF.FIRMA
|| FUN.info('Zadanie do wykonania w firmie %1'@[BI_TODO.FIRMA().SYMBOL])
|? +app_info('web_sesid')<>0
   &  {? exec('FindInSet','#table','B_ACTION','B_ELE',BI_TODO.B_PREL().B_ELE,,"B_ACTION.MANUAL='T'",,,0)
      || BI_TODO.B_PREL().B_CAN='M'
      || exec('FindInSet','#table','B_ACTION','B_ELE',BI_TODO.B_PREL().B_ELE,,"B_ACTION.B_CAN='M'")
      ?}
|| FUN.info('Czynność należy wywołać w jterm.'@)
||
   _bi_todo:=BI_TODO.ref();
::   FUN.info('xx'+BI_TODO.BI_PREL().DESC);
   {? _bi_todo=null() || return() ?};

   _biprel:=BI_TODO.BI_PREL;

   _user:=exec('operatorUser','#users');

   _buffer:=exec('buffer','#bi_todo');
   _buffer.cntx_get(_bi_todo);
   BI_TODO.cntx_psh();
   {? (_buffer.USERS=null() | _buffer.USERS=_user)
   || {? (_buffer.BI_STAT=__Status.TODO_WOLNE
         | _buffer.BI_STAT=__Status.TODO_MOJE)
      || {? BI_TODO.seek(_bi_todo)
         || _buffer.get();
            {? _buffer.BI_PREL<>null()
            || BI_TODO.cntx_psh();
               _ref1:=BI_TODO.ref();
               {? BI_TODO.next() | BI_TODO.prev() || _ref2:=BI_TODO.ref() ?};
               BI_TODO.cntx_pop();
               {? _buffer.BI_STAT=__Status.TODO_WOLNE
               || exec('todoGet','#bi_todo',-1)
               ?};
               _buffer.get();
               {? _buffer.BI_STAT=__Status.TODO_MOJE
               || exec('proMan','#b_proman',_buffer.BI_PREL,'',,'Todo')
               ?}
            || FUN.info('Brak wskazania na instancję procesu.'@)
            ?}
         ?}
      || _txt:=exec('FindAndGet','#table',BI_STAT,$_buffer.BI_STAT,,"BI_STAT.NAME",'');
         _txt1:=exec('TODO_WOLNE','#bi_stat','name');
         _txt2:=exec('TODO_MOJE','#bi_stat','name');
         FUN.info('Zadanie ma status: %1'
            '.\nOczekiwany jest status: \'%2\' lub \'%3\'.\nOpcja niedostępna.'@[_txt,_txt1,_txt2])
      ?}
   || FUN.info('Zadanie przypisane do innego użytkownika.\nOpcja niedostępna.'@)
   ?};
   BI_TODO.cntx_pop();
   {? ~((_ref1 & BI_TODO.seek(_ref1)) | (_ref2 & BI_TODO.seek(_ref2))) || BI_TODO.first() ?}
?};
''


\todoNew
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Uruchomienie nowego procesu
::----------------------------------------------------------------------------------------------------------------------
__wybakc:=1;
sel_exit();
''


\todoRek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: akcja rekord
::   WE: _a - =0-wszyscy uzytkownicy, =1-kontekst uzytkownika
::       _b - 0/1 - ostatni odrysowany rekord
::----------------------------------------------------------------------------------------------------------------------
{? _a & exec('lang','#bi_todo')
||
   {? _b || exec('translate_all','#bi_todo') || exec('translate','#bi_todo') ?}
?};
::_kolor:={? BI_TODO.BI_STAT=__Status.TODO_BRAK_UPR
::        || 'BI_TODO#01#01#01'
::        |? BI_TODO.BI_STAT=__Status.TODO_ERROR
::        || 'BI_TODO#01#01#02'
::        |? exec('FindInSet','#table','BI_MSG','BI_PREL',BI_TODO.BI_PREL)
::        || 'BI_TODO#01#01#03'
::        || ''
::        ?};
_kolor:='';
_result:='';
_priority:=BI_TODO.BI_PREL().PRIOR_R;
{? _priority=3
|| _kolor:='BI_TODO#01#01#03'
|? _priority=2
|| _kolor:='BI_TODO#01#01#02'
|? _priority=1
|| _kolor:='BI_TODO#01#01#01'
?};
{? _kolor<>''
|| _result:=Color.fnd_kol(_kolor)
?};
_result


\todoRek_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Rekord przed
::   WE: _a - 0/1 - ostatni odrysowany rekord
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('env_wt_core','#web_srv');
exec('maski','#b_proman');

{? exec('lang','#bi_todo')
||
   {? _a ||  exec('translate_all','#bi_todo') || exec('translate','#bi_todo') ?}
?};
~~


\isAuto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Sprawdza czy BI_PREL.AUTOMAT='T'
::   WE: _a - BI_TODO.ref()
::       _b - user
::   WY: 0-uruchomiona recznie, 1-uruchomiona automatycznie
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_user:=_b;

exec('FindAndGet','#table',BI_PREL,_bi_prel,,"BI_PREL.AUTOMAT='T'",0)


\dispMessage
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wyświetl dla BI_TODO
::----------------------------------------------------------------------------------------------------------------------
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.prefix(BI_TODO.BI_PREL);
BI_TODO.cntx_psh();
{? BI_MSG.first()
|| BI_MSG.win_edit({? BI_MSG.STAT_ANS<>null() || 'ANS' || 'ERR' ?});
   BI_MSG.display()
?};
BI_MSG.cntx_pop();
BI_TODO.cntx_pop();
~~


\initGrpTodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Inicjuje zakładkę dla okienka grupowego dla BI_TODO
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__instan')>0 || tab_sel(2) || tab_sel(1) ?}


\refreshGrpTodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Odswieża zakładkę dla okienka grupowego dla BI_TODO
::----------------------------------------------------------------------------------------------------------------------
''


\todoArch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Przenosi do archiwum jedną instancję lub zaznaczone instancje
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('archive_a','#bi_arch');

_tab:=BI_TODO.sel_aget();
BI_TODO.sel_adel();
BI_TODO.cntx_psh();
{? _tab.first()
|| {? FUN.ask('Czy przenieść do archiwum zaznaczone zadania instancji procesu?\n'
              'Uwaga: do archiwum zostaną przeniesione instancje procesów, które zostały zakończone lub mają zgłoszone: problemy, błędy.'@)
   || _ile:=0;
      _bi_proc:=tab_tmp(1,'SQL','STRING[16]','');
      {!
      |? {? (BI_TODO.clear(); BI_TODO.seek(_tab.REF,)) & exec('statArch','#bi_arch',BI_TODO.BI_PROC)
          & (_bi_proc.clear(); ~_bi_proc.find_key($BI_TODO.BI_PROC))
         || _bi_proc.blank();
            _bi_proc.SQL:=$BI_TODO.BI_PROC;
            _bi_proc.add(1)
         ?};
         _tab.next()
      !};
      _bi_proc.clear();
      {? _bi_proc.first()
      || {!
         |? _r_bi_proc:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL);
            _code:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL,,"BI_PROC.CODE");
            _b_proc:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL,,"BI_PROC.B_PROC");
            _firma:=exec('FindAndGet','#table',BI_PROC,_bi_proc.SQL,,"BI_PROC.B_PROC().FIRMA");
            _params.MASK:=exec('get_mask','#bi_arch',_r_bi_proc,_firma);
            {? _params.MASK<>''
            || _ref:=exec('newBiArchProc','#bi_arch',_params.MASK,_b_proc);
               exec('infoArch','#bi_arch',_ref,_params.TABSTAT);
               _params.BI_PROC:=_r_bi_proc;
               {? exec('archive','#bi_arch',_params) || _ile+=1; exec('actuArch','#bi_arch',_params.TABSTAT,_code) ?}
            ?};
            _bi_proc.next()
         !}
      ?};
      obj_del(_bi_proc);
      FUN.info('Liczba przeniesionych do archiwum instancji procesów: %1.'@[form(_ile,,0,'99')])
   ?}
|? ~exec('statArch','#bi_arch',BI_TODO.BI_PROC)
|| FUN.info('Wskazane zadanie jest powiązane z niezakończoną instancją procesu.\n'
           'Archwizacja instancji procesu niemożliwa.'@)
|? FUN.ask('Czy przenieść instancję procesu danego zadania do archiwum?'@)
|| _ile:=0;
   _b_proc:=BI_TODO.B_PROC;
   _firma:=BI_TODO.B_PROC().FIRMA;
   _params.MASK:=exec('get_mask','#bi_arch',BI_TODO.BI_PROC,_firma);
   {? _params.MASK<>''
   || _ref:=exec('newBiArchProc','#bi_arch',_params.MASK,_b_proc);
      exec('infoArch','#bi_arch',_ref,_params.TABSTAT);
      _params.BI_PROC:=BI_TODO.BI_PROC;
      _code:=BI_TODO.BI_PROC().CODE;
      {? exec('archive','#bi_arch',_params) || _ile:=1; exec('actuArch','#bi_arch',_params.TABSTAT,_code) ?}
   ?};
   {? _ile
   || FUN.info('Przeniesiono do archiwum wskazaną instancję procesu.'@)
   || FUN.info('Nie udało się przenieść do archiwum wskazanej instancji procesu.'@)
   ?}
?};
BI_TODO.cntx_pop();
~~


\orphan_assigned
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Po przydzieleniu użytkownika do osieroconego zapisu TODO bez użytkownika odwiesza proces i kasuje
::       info o błędach
::   WE: [_a] - BI_PREL.ref() lub bieżący rekord
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?}; BI_PREL.index('UID');
{? _ref<>null()
|| BI_PREL.clear();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? BI_PREL.BI_STAT=exec('ZAWIESZONA','#bi_stat')
   ||
      exec('setStatus','#bi_prel',BI_PREL.ref(),null,2);
      exec('delete4biprel','#bi_msg',BI_PREL.ref(),'O')
   ?};
   {? BI_PREL.BI_PROC().BI_STAT=exec('ZAWIESZONY','#bi_stat')
   ||
      BI_PREL.cntx_psh();
      BI_PREL.index('BISTATUS');
      BI_PREL.prefix(BI_PREL.BI_PROC,exec('ZAWIESZONA','#bi_stat'));
      _zawieszony:=BI_PREL.first();
      BI_PREL.cntx_pop();
      {? ~_zawieszony
      ||
         exec('setStatus','#bi_proc',BI_PREL.BI_PROC,exec('URUCHOMIONY','#bi_stat'))
      ?}
   ?}
?};
BI_PREL.cntx_pop();
~~


\proc_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla podgląd instancji procesu skojarzony z zadaniem
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?};
BI_PROC.index('UID'); BI_PROC.prefix();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
B_PROC.cntx_psh();
{? BI_TODO.BI_PROC().B_PROC().MICRO<>'T'
|| exec('select4biproc_alt','#b_design',BI_TODO.BI_PROC,BI_TODO.B_PREL,'bi_proc_todo')
|| FUN.info('Podgląd procesu niemożliwy dla zadań powiązanych z mikroprocesami.'@)
?};
B_PROC.cntx_pop();
BI_PREL.cntx_pop();
BI_PROC.cntx_pop();
~~


\initIconBiTodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ustawia ikonki dla BI_TODO
::   WE: _a - okno wertowania
::----------------------------------------------------------------------------------------------------------------------
_wer:=_a;

_fld_akr:={? _wer='WER_LANG' || 'LANG_STA' || 'BI_STAT' ?};
BI_TODO.win_fml(_wer,,_fld_akr,'NAME','ICON_BEFORE',"
   {? BI_TODO.BI_STAT=exec('TODO_ERROR','#bi_stat')
   || 'xwin16.png:3'
   |? BI_TODO.BI_STAT=exec('TODO_BRAK_UPR','#bi_stat')
   || 'xwin16.png:184'
   |? BI_TODO.BI_STAT=exec('TODO_WYKONANE','#bi_stat') | BI_TODO.BI_STAT=exec('TODO_WYK_INNY','#bi_stat')
   || 'xwin16.png:100'
   |? BI_TODO.BI_PREL().AUTOMAT='T'
   || 'xwin16.png:145'
   |? BI_TODO.BI_STAT=exec('TODO_WYK_AUTO','#bi_stat')
   || 'xwin16.png:7'
   |? BI_TODO.BI_STAT=exec('TODO_BREAK','#bi_stat')
   || 'xwin16.png:2'
   |? BI_TODO.B_PROC().MICRO='T'
   || {? BI_TODO.BI_STAT=exec('TODO_MOJE','#bi_stat')
      || 'xwin16.png:110'
      |? BI_TODO.BI_STAT=exec('TODO_WOLNE','#bi_stat')
      || 'xwin16.png:18'
      || ''
      ?}
   || {? BI_TODO.BI_STAT=exec('TODO_MOJE','#bi_stat')
      || 'xwin16.png:110'
      |? BI_TODO.BI_STAT=exec('TODO_WOLNE','#bi_stat')
      || 'xwin16.png:18'
      || ''
      ?}
   ?}
");
BI_TODO.win_fml(_wer,,'DT',,'ICON_BEFORE',"
   {? BI_TODO.PRIOR_W>0
   || 'xwin16.png:94'
   || 'xwin16.png:110'
   ?}
");
~~


\todoAnswerOK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [TS] [17.00]
:: OPIS: Przywrócenie do życia zadania
::       Kontekst wywołania: rekord tabeli BI_TODO
::----------------------------------------------------------------------------------------------------------------------
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_TODO.cntx_psh();
BI_MSG.index('BI_PREL'); BI_MSG.prefix(BI_TODO.BI_PREL);
{? BI_MSG.first()
|| exec('todoAnswerOK','#bi_msg')
?};
BI_MSG.cntx_pop(); BI_TODO.cntx_pop();
~~


\bitodo_zakres_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: zmiana zakresu dla zadań w tabeli BI_TODO - edycja zmiennej
::----------------------------------------------------------------------------------------------------------------------

ZAKR.win_edit('TODOFIRM');
{? ZAKR.edit
||
   exec('bitodo_zakres','#bi_todo')
?};
~~


\bitodo_zakres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: zmiana zakresu dla zadań w tabeli BI_TODO
::----------------------------------------------------------------------------------------------------------------------
{? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
{? ZAKR.VISIBLE='T' | ZAKR.VISIBLE=''
||
   {? ZAKR.BFIRMA='T' | ZAKR.BFIRMA=''
   || BI_TODO.index('VSERFRPE');
      BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1)
   || BI_TODO.index('VSERFRPF');
      BI_TODO.prefix('T',OPERATOR.USER,'T',1)
   ?}
||
   {? ZAKR.BFIRMA='T' | ZAKR.BFIRMA=''
   || BI_TODO.index('USERFRPE');
      BI_TODO.prefix(REF.FIRMA,OPERATOR.USER,'T',1)
   || BI_TODO.index('USERFRPF');
      BI_TODO.prefix(OPERATOR.USER,'T',1)
   ?}
?}


\bitodo_zakres_edit_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: zmiana zakresu dla zadań w tabeli BI_TODO - edycja zmiennej
::----------------------------------------------------------------------------------------------------------------------
_get1:=web_global_params_get();
ZAKR.BFIRMA:=_get1.todo_zakr;
web_global_params_set(_get1);
_ok:="
{? _a = 'OK'
||
   _get:=web_global_params_get();
   _get.todo_zakr:=ZAKR.BFIRMA;
   web_global_params_set(_get);
   exec('bitodo_zakres_www','#bi_todo')
?};
ZAKR.web_eclose('TODOFIRW')";
ZAKR.web_edit('TODOFIRW',,,,_ok);
~~


\bitodo_zakres_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: zmiana zakresu dla zadań w tabeli BI_TODO
::----------------------------------------------------------------------------------------------------------------------
{? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
OPERATOR.USER:=exec('user_ident_web','#users');
_par:=web_global_params_get();
ZAKR.BFIRMA:=_par.todo_zakr;
{? ZAKR.BFIRMA='T' | ZAKR.BFIRMA=''
|| BI_TODO.index('USERFREW');
   BI_TODO.prefix(REF.FIRMA,OPERATOR.USER,'T',1)
|| BI_TODO.index('USERFREZ');
   BI_TODO.prefix(OPERATOR.USER,'T',1)
?}


\todoGet_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: pobranie zadania Webterm
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());
exec('env_wt_core','#web_srv');
_error:={? BI_TODO.FREE=0
        || 'Nie można pobrać zadania, gdy nie jest wolne.'@
        |? BI_TODO.USERS<>OPERATOR.USER
        || 'Nie można pobrać zadania innego użytkownika.'@
        || ''
        ?};
{? _error=''
|| exec('todoGet','#bi_todo',-1)
|| FUN.info(_error)
?};
BI_TODO.web_refresh(web_top_win(1));
~~


\todoGet_gr_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: pobranie zadania Webterm
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());
_error:={? BI_TODO.FREE=0
        || 'Nie można pobrać zadania, gdy nie jest wolne.'@
        |? BI_TODO.USERS<>OPERATOR.USER
        || 'Nie można pobrać zadania innego użytkownika.'@
        || ''
        ?};
{? _error=''
|| exec('todoGet','#bi_todo',-1)
|| FUN.info(_error)
?};
BI_TODO.web_refresh('W_WEB_GR','W_WEB_GR_IDENT');
~~


\todoRelease_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: zwlonienie zadania Webterm
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());
exec('env_wt_core','#web_srv');
{? exec('FindAndGet','#table',BI_PREL,BI_TODO.BI_PREL,,"
      exec('FindAndGet','#table',@.B_PREL,BI_PREL.B_PREL,,\"RELEASE<>'T'\",0)
   ",0)
|| FUN.info('Brak uprawnień, aby zwolnić zadanie.'@)
|? exec('can_release','#bi_todo')
|| exec('todoRelease','#bi_todo',-1)
|| FUN.info('Brak uprawnień, aby zwolnić zadanie.'@)
?};
BI_TODO.web_refresh(web_top_win(1));
~~


\todoRelease_grw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: zwlonienie zadania Webterm
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());
{? exec('FindAndGet','#table',BI_PREL,BI_TODO.BI_PREL,,"
      exec('FindAndGet','#table',@.B_PREL,BI_PREL.B_PREL,,\"RELEASE<>'T'\",0)
   ",0)
|| FUN.info('Brak uprawnień, aby zwolnić zadanie.'@)
|? exec('can_release','#bi_todo')
|| exec('todoRelease','#bi_todo',-1)
|| FUN.info('Brak uprawnień, aby zwolnić zadanie.'@)
?};
BI_TODO.web_refresh('W_WEB_GR','W_WEB_GR_IDENT');
~~


\ctr_tab_firmy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Pobiera do combo z firmami na desktopie listę formuł
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_app_list:=exec('firmy_user_list','#firma');
::_ndx:=_app_list.ndx_tmp(,,'GRP_IDEN',,,'SYMBOL',,);
::_app_list.index(_ndx);
::_app_list.prefix(app_info('cluster_group'),);
_app_list


\ctr_select_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja po zmianie firmy w combo na desktopie
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=exec('get_value','#desktop','','bi_todo','2d84dm4b9en4fhd3d1e2l1kbde2d1');
{? _selected<>''
|| _app_list:=exec('firmy_user_list','#firma');
   _ndx:=_app_list.ndx_tmp(,,'SYMBOL',,);
   _app_list.index(_ndx);
   _app_list.prefix(_selected,);
   {? _app_list.first()
   || ctr_set('!application',,
         'run',app_info('cluster_group'),_app_list.APP_IDEN,'TODO','reload',1,_app_list.OPIS
      )
   ?}
?};
~~


\todo_triggers_przed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wywołanie triggera przed tabeli BI_TODO jeśli czynność ma własność TODOTRIG
::   WE: _a - add_przed, put_przed, del_przed
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? BI_TODO.TODOTRIG='T' & +BI_TODO.ACT_UID
|| exec('todo_triggers','!'+(-BI_TODO.ACT_UID),_a)
?};
1


\todo_triggers_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wywołanie triggera po tabeli BI_TODO jeśli czynność ma własność TODOTRIG
::   WE: _a - add_przed, put_przed, del_przed
::       _b - wynik akcji
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? BI_TODO.TODOTRIG='T' & +BI_TODO.ACT_UID
|| exec('todo_triggers','!'+(-BI_TODO.ACT_UID),_a,_b)
?};
~~


\przydziel_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Przydziel zadanie' w oknach BI_TODO
::       Kontekst działania - rekord BI_TODO
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? exec('can_assign','#bi_todo')>0
|| prz_act:=1;
   _users:=exec('usersAction','#b_desktop',BI_TODO.BI_PREL);

   _wer:=_users.mk_sel('Użytkownicy'@,,,'#bitodo_przydz',,,,,'U');
   _users.win_fld(_wer,,'KOD',,,12,,,'Nazwa'@);
   _users.win_fld(_wer,,'DANE',,,30,,,'Dane użytkownika'@);
   _users.win_fld(_wer,,'LOGGED',,,-10,,,'Zalogowany w jTerm?'@,,'Czy użytkownik jest aktualnie zalogowany w jTerm?'@,2,,"\'T\'","\'N\'");
   _users.win_fld(_wer,,'LOGIN_D',,,10,,,'Data ostatniego zalogowania'@);
   _users.win_fld(_wer,,'LOGIN_T',,,10,,,'Czas ostatniego zalogowania'@);
   _users.win_fld(_wer,,'URKOD',,,12,,,'Nazwa zastępowanego'@);
   _users.win_fld(_wer,,'URDANE',,,30,,,'Dane zastępowanego'@);

   _users.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');

   _users.win_sel(_wer);

:: Nawijam pole czy użytkownik zalogowany
   _users.cntx_psh();
   _users.clear();
   {? _users.first()
   || {!
      |? _ref:=exec('FindAndGet','#table',USERS,_users.USER,,,null());
         {? _ref<>null()
         || {? exec('is_logged','#users',_ref)>0
            || _users.LOGGED:='T';
               _users.put()
            ?}
         ?};
         _users.next()
      !}
   ?};
   _users.cntx_pop();

   _i2:=_users.ndx_tmp('',1,'KOD',,);
   _users.index(_i2);

   {? _users.select()
   || prz_act:=2;
      _result:=exec('przydziel_core','#bi_todo',_users)
   ?};
   VAR_DEL.delete('prz_act')
|| _msg:='Zadania nie można przydzielić ze względu na status uniemożliwiający przydzielanie'@;
   FUN.emsg(_msg)
?};
_result


\przydziel_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Przydziel zadanie - jądro funkcji
::       Kontekst - rekord BI_TODO
::   WE: [_a] - tab_tmp - tabelka z użytkownikami, zadanie będzie przydzielone bieżącemu rekordowi
::       [_b] - USERS.ref() - użytkownik
::       [_c] - USERS.ref - użytkownik zastępowany
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------

_result:=0;

_selected_user:=null();
_selected_user_r:=null();

{? var_pres('_a')>100
|| _users:=_a;
   _selected_user:=exec('FindAndGet','#table',USERS,_users.USER,,,null());
   _selected_user_r:=exec('FindAndGet','#table',USERS,_users.USER_R,,,null())
?};

{? var_pres('_b')=type_of(USERS.ref())
|| _selected_user:=_b
?};
{? var_pres('_c')=type_of(USERS.ref())
|| _selected_user_r:=_c
?};

{? _selected_user<>null() & (_selected_user<>BI_TODO.USERS | BI_TODO.BI_STAT=__Status.TODO_WOLNE)
|| {? exec('can_assign','#bi_todo')>0
   || exec('todoGet','#bi_todo',-2,1,_selected_user,_selected_user_r,'T');
      {? BI_TODO.BI_STAT=__Status.TODO_MOJE
      || _class:={? __develop || @.Class.cProMan || @.CLASS.cProMan ?};
         _proMan:=obj_new(_class);
         _proMan.setCntx(BI_TODO.BI_PREL);
         _proMan.descTodo();
         obj_del(_class);
         obj_del(_proMan)
      ?};
      {? BI_TODO.USERS<>null()
      || _result:=1
      ?}
   ?}
?};
_result


\przydz_act_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Akcja 'Przydziel zadanie' w oknach BI_TODO dla webterm
::       Kontekst działania - rekord BI_TODO
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? exec('can_assign','#bi_todo')>0
|| prz_act:=1;
   _users:=exec('usersAction','#b_desktop',BI_TODO.BI_PREL);

:: Nawijam pole czy użytkownik zalogowany
   _users.cntx_psh();
   _users.clear();
   {? _users.first()
   || {!
      |? _ref:=exec('FindAndGet','#table',USERS,_users.USER,,,null());
         {? _ref<>null()
         || {? exec('is_logged','#users',_ref)>0
            || _users.LOGGED:='T';
               _users.put()
            ?}
         ?};
         _users.next()
      !}
   ?};
   _users.cntx_pop();

   _i2:=_users.ndx_tmp('',1,'KOD',,);
   _users.index(_i2);

:: zapisanie danych w tabeli stałej
   _tcid:=app_info('web_tcid');
   _mbid:=app_info('web_mbid');
   _sesid:=app_info('web_sesid');
   _tabid:=app_info('web_tabid');

   TAB_WT.index('INDEX06');
   TAB_WT.prefix(_tcid,_tabid,8);
   {? TAB_WT.first()
   || {! |?  TAB_WT.del() !}
   ?};

   {? _users.first()
   ||
      {!
      |?
         TAB_WT.blank(1);
         TAB_WT.SESID:=_sesid;
         TAB_WT.MBID:=_mbid;
         TAB_WT.TCID:=_tcid;
         TAB_WT.TABID:=_tabid;
         TAB_WT.TYP:=8;

::       pola
::       'USER','STRING[16]','Ref uzytkownika'
         TAB_WT.REF_SQL:=_users.USER;

::       KOD, 'STRING[100]','Kod użytkownika'
         TAB_WT.STR01:=_users.KOD;

::       'DANE','STRING[100]','Dane użytkownika'
         TAB_WT.NAZ:=_users.DANE;

::       'LOGGED','STRING[1]','Zalogowany?'
         TAB_WT.KOD:=_users.LOGGED;

::       'LOGIN_D','STRING[11]','Data zalogowania'
         TAB_WT.DATE01:=exec('str2date','#convert',_users.LOGIN_D);

::       'LOGIN_T','STRING[10]','Czas zalogowania'
         TAB_WT.TIME01:=exec('str2time','#convert',_users.LOGIN_T);

::       'USER_R','STRING[16]','Zastępowany'
         TAB_WT.STR04:=_users.USER_R;

::       'URKOD','STRING[100]','Kod użytkownika zastępowanego'
         TAB_WT.STR02:=_users.URKOD;

::       'URDANE','STRING[100]','Dane użytkownika zastępowanego
         TAB_WT.STR03:=_users.URDANE;

         TAB_WT.add();
         _users.next()
      !}
   ?};
   TAB_WT.index('INDEX06');
   TAB_WT.prefix(_tcid,_tabid,8);
   BI_TODO.web_cntx_save(1);
   TAB_WT.web_select('WER08',,1);
   VAR_DEL.delete('prz_act')
|| _msg:='Zadania nie można przydzielić ze względu na status uniemożliwiający przydzielanie'@;
   FUN.info(_msg)
?};
_result


\przydz_wyb_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Wybór rekordu ze słownika - webterm
::----------------------------------------------------------------------------------------------------------------------
prz_act:=2;
TAB_WT.web_close();
BI_TODO.web_cntx_load(1);
_selected_user:=exec('FindAndGet','#table',USERS,TAB_WT.REF_SQL,,,null());
_selected_user_r:=exec('FindAndGet','#table',USERS,TAB_WT.STR04,,,null());
{? _selected_user<>null() & (_selected_user<>BI_TODO.USERS| BI_TODO.BI_STAT=exec('TODO_WOLNE','#bi_stat'))
||
   exec('env_wt_core','#web_srv');
   exec('todoGet','#bi_todo',-2,1,_selected_user,_selected_user_r,'T')
?};
{? BI_TODO.USERS<>null()
|| _result:=1
?};
::BI_TODO.web_refresh(web_top_win(1));
web_top_refresh(1);
1


\can_assign
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja sprawdza czy podane zadanie z listy TODO można przepiąć - czy status się zgadza
::   WE: [_a] - BI_TODO.ref - zadanie na liście TODO lub bieżący rekord
::   WY: 0 - nie można przydzielić tego zadania
::       1 - można przydzielić to zadanie
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?}; BI_TODO.index('ALL');
{? _ref<>null()
|| BI_TODO.prefix();
   {? BI_TODO.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _stat:=BI_TODO.BI_STAT;
   {? _stat=__Status.TODO_MOJE
   || _result:=1;
      _can_continue:=0
   ?};
   {? _can_continue>0
   || {? _stat=__Status.TODO_WOLNE
      || _result:=1;
         _can_continue:=0
      ?}
   ?}
?};
BI_TODO.cntx_pop();
_result


\set_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przydziala zadania innemu uzytkownikowi
::   WE: _a - rekord kluczowy
::       _b - akronim czynności
::       _c - użytkownik
::   WY:
::----------------------------------------------------------------------------------------------------------------------
B_KEYREF.cntx_psh();
B_KEYREF.index('KEYREF'); B_KEYREF.prefix(_a,);
{? B_KEYREF.first()
|| BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
   {!
   |? BI_TODO.index('ELEMENT'); BI_TODO.prefix(B_KEYREF.BI_PREL);
      {? BI_TODO.first()
      || {!
         |? {? BI_TODO.BI_PREL().B_PREL().B_ELE().SYMBOL=_b
            || BI_TODO.USERS:=_c;
               BI_TODO.TM_LANG:=0;
               exec('visible_notify','#bi_todo');
               BI_TODO.put()
            ?};
            BI_TODO.next()
         !}
      ?};
      B_KEYREF.next()
   !};
   BI_TODO.cntx_pop()
?};
B_KEYREF.cntx_pop()


\przydziel_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.28]
:: OPIS: Akcja 'Przydziel zadanie' w oknach BI_TODO - wersja dla grupy
::       Kontekst działania - zaznaczone rekordy BI_TODO
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_bi_todo:=BI_TODO.sel_aget();
_users:=exec('tabTmpUsers','#b_desktop');
_start:=1;
_result:=1;

BI_TODO.sel_adel();

exec('ini_kom','#message','Przydzielanie zadań'@);
KOMM.init(250,,'Przydzielanie zadań'@);

:: kontrola czy są zadania do przepięcia i czy istnieją użytkownicy którzy mogą je przejąć - wspólna dzidzina uprawnień
BI_TODO.cntx_psh();
{? _bi_todo.first()
|| {!
   |? _del:=0;
      {? (BI_TODO.prefix(); BI_TODO.seek(_bi_todo.REF,))
      || {? exec('can_assign','#bi_todo')>0
         || _bufusr:=exec('usersAction','#b_desktop',BI_TODO.BI_PREL);
            _bufusr.prefix();
            {? _bufusr.first()
            || {? _start
               ||
::                pierwsi użytkownicy do uprawnień = przepisuję tabelę uprawnionych użytkowników
                  _len:=_bufusr.fld_num();
                  _users.prefix();
                  {!
                  |? _users.blank();
                     {! _i:=1.._len |! _users[_i]:=_bufusr[_i] !};
                     _users.add(1);
                     _bufusr.next()
                  !};
                  _start:=0
               ||
::                tworzenie wspólnej dziedziny użytkowników do uprawnień
                  _users.prefix();
                  {? _users.first()
                  || {!
                     |? _bufusr.prefix(_users.USER,);
                        {? _bufusr.first()
                        || _users.next()
                        || _users.del()
                        ?}
                     !}
                  || _result:=0
                  ?};
                  _users.prefix();
                  _result:=(_users.size()>0)
               ?}
            || _result:=0
            ?};
            obj_del(_bufusr)
         || exec('add_kom','#message','Zadanie: \"%1\" ma niewłaściwy status.'@[BI_TODO.BI_PREL().DESC]
              ,4,'Przydzielanie zadań'@);
            _del:=1
         ?}
      || _del:=1
      ?};
      _result & {? _del || _bi_todo.del() || _bi_todo.next() ?}
   !}
?};

_bi_todo.prefix();
_is_todo:=_bi_todo.first();
{? _result & _is_todo
|| prz_act:=1;
   _wer:=_users.mk_sel('Użytkownicy'@,,,'#bitodo_przydz',,,,,'U');
   _users.win_fld(_wer,,'KOD',,,12,,,'Nazwa'@);
   _users.win_fld(_wer,,'DANE',,,30,,,'Dane użytkownika'@);
   _users.win_fld(_wer,,'LOGGED',,,-10,,,'Zalogowany w jTerm?'@,,'Czy użytkownik jest aktualnie zalogowany w jTerm?'@,2,,"\'T\'","\'N\'");
   _users.win_fld(_wer,,'LOGIN_D',,,10,,,'Data ostatniego zalogowania'@);
   _users.win_fld(_wer,,'LOGIN_T',,,10,,,'Czas ostatniego zalogowania'@);
   _users.win_fld(_wer,,'URKOD',,,12,,,'Nazwa zastępowanego'@);
   _users.win_fld(_wer,,'URDANE',,,30,,,'Dane zastępowanego'@);

   _users.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');

   _users.win_sel(_wer);

   _users.cntx_psh();
   _users.clear();
   {? _users.first()
   || {!
      |? _ref:=exec('FindAndGet','#table',USERS,_users.USER,,,null());
         {? _ref<>null()
         || {? exec('is_logged','#users',_ref)>0
            || _users.LOGGED:='T';
               _users.put()
            ?}
         ?};
         _users.next()
      !}
   ?};
   _users.cntx_pop();

   _i2:=_users.ndx_tmp('',1,'KOD',,);
   _users.index(_i2);

   {? _users.select()
   || prz_act:=2;
      _selected_user:=exec('FindAndGet','#table',USERS,_users.USER,,,null());
      _selected_user_r:=exec('FindAndGet','#table',USERS,_users.USER_R,,,null());
      {!
      |? {? (BI_TODO.prefix(); BI_TODO.seek(_bi_todo.REF,))
         || _result:=exec('przydziel_core','#bi_todo',,_selected_user,_selected_user_r)
         ?};
         _result & _bi_todo.next()
      !}
   ?};
   VAR_DEL.delete('prz_act')
|? ~_result
|| _msg:='Zaznaczone zadania nie można przydzielić ze względu na brak uprawnionych użytkowników do ich wykonania.'@;
   exec('add_kom','#message',_msg,4,'Przydzielanie zadań'@)
?};

BI_TODO.cntx_pop();
obj_del(_bi_todo);
obj_del(_users);

exec('end_kom','#message');
KOMM.select();
~~


\todoRelease_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.28]
:: OPIS: Zwolnienie zaznaczonych zadań
::   WE: _a - =0-wszyscy użytkownicy, =1-kontekst użytkownika
::----------------------------------------------------------------------------------------------------------------------
_bi_todo:=BI_TODO.sel_aget();

BI_TODO.sel_adel();

exec('ini_kom','#message','Zwalnianie zadań'@);
KOMM.init(250,,'Zwalnianie zadań'@);

BI_TODO.cntx_psh();
_bi_todo.prefix();
{? _bi_todo.first() & FUN.ask('Czy zwolnić zaznaczone zadania?'@)
|| {!
   |? {? (BI_TODO.prefix(); BI_TODO.seek(_bi_todo.REF,))
      || exec('todoRelease','#bi_todo',_a,0)
      ?};
      _bi_todo.next()
   !}
?};

BI_TODO.cntx_pop();
obj_del(_bi_todo);

exec('end_kom','#message');
KOMM.select();
~~


\todoGet_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.28]
:: OPIS: Pobranie zaznaczonych zadań
::   WE: _a - =0-wszyscy użytkownicy, =1-kontekst użytkownika
::----------------------------------------------------------------------------------------------------------------------
_bi_todo:=BI_TODO.sel_aget();

BI_TODO.sel_adel();

exec('ini_kom','#message','Pobranie zadań'@);
KOMM.init(250,,'Pobranie zadań'@);

BI_TODO.cntx_psh();
_bi_todo.prefix();
{? _bi_todo.first() & FUN.ask('Czy pobrać zaznaczone zadania?'@)
|| {!
   |? {? (BI_TODO.prefix(); BI_TODO.seek(_bi_todo.REF,))
      || exec('todoGet','#bi_todo',_a,2)
      ?};
      _bi_todo.next()
   !}
?};

BI_TODO.cntx_pop();
obj_del(_bi_todo);

exec('end_kom','#message');
KOMM.select();
~~


\bi_todo_prior_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Akcja Nadaj priorytet na liście TODO
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi
::       [_b] - INTEGER - 0/1 - czy akcja grupowa
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};
_group:=-1;
{? var_pres('_b')=type_of(0)
|| _group:=_b
?};

_result:=0;
_can_continue:=1;

{? _group=-1
|| _tab:=cur_tab(1,1);
   {? _tab.sel_size()>0
   || _group:=1;
      _dialog:=0
   || _group:=0
   ?}
?};
BI_PREL.cntx_psh();
{? BI_TODO.BI_STAT<>__Status.TODO_MOJE
|| _can_continue:=0;
   _stat_name:=exec('FindAndGet','#table',BI_STAT,exec('TODO_MOJE','#bi_stat'),,"NAME",'');
   _desc:=BI_TODO.BI_PREL().DESC;
   _msg:='Zmiana priorytetu zadania: \'%1\' niemożliwa (status różny od: \'%2\')'@[_desc,_stat_name];
   {? _group=0
   || FUN.emsg(_msg)
   || KOMM.add(_msg,2,,1)
   ?}
?};

{? _dialog>0 & _can_continue>0
|| _can_continue:=FUN.ask('Nadać zadaniu wysoki priorytet użytkownika?'@)
?};
{? _can_continue>0
|| BI_TODO.PRIOR_W:=1;
   _result:=BI_TODO.put()
?};
BI_PREL.cntx_pop();
_result


\bi_todo_prior_set_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Akcja Nadaj priorytet na liście TODO - grupa przed
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 zadań. Czy nadać im wysoki priorytet użytkownia?'@[$_tab.sel_size()])
|| _result:=1;
   sel_nchk();
   KOMM.init(250,'Zarządzanie priorytetami na liscie TODO'@);
   ~~
?};
_result


\bi_todo_prior_set_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Akcja Nadaj priorytet na liście TODO - grupa po
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\bi_todo_prior_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Akcja Usuń priorytet na liście TODO
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi
::       [_b] - INTEGER - 0/1 - czy akcja grupowa
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};
_group:=-1;
{? var_pres('_b')=type_of(0)
|| _group:=_b
?};

_result:=0;
_can_continue:=1;

{? _group=-1
|| _tab:=cur_tab(1,1);
   {? _tab.sel_size()>0
   || _group:=1;
      _dialog:=0
   || _group:=0
   ?}
?};
BI_PREL.cntx_psh();
{? BI_TODO.BI_STAT<>__Status.TODO_MOJE
|| _can_continue:=0;
   _stat_name:=exec('FindAndGet','#table',BI_STAT,exec('TODO_MOJE','#bi_stat'),,"NAME",'');
   _desc:=BI_TODO.BI_PREL().DESC;
   _msg:='Zmiana priorytetu zadania: \'%1\' niemożliwa (status różny od: \'%2\')'@[_desc,_stat_name];
   {? _group=0
   || FUN.emsg(_msg)
   || KOMM.add(_msg,2,,1)
   ?}
?};

{? _dialog>0 & _can_continue>0
|| _can_continue:=FUN.ask('Usunąć zadaniu wysoki priorytet użytkownika?'@)
?};
{? _can_continue>0
|| BI_TODO.PRIOR_W:=0;
   _result:=BI_TODO.put()
?};
BI_PREL.cntx_pop();
_result


\bi_todo_prior_del_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Akcja Usuń priorytet na liście TODO - grupa przed
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 zadań. Czy usunąć im wysoki priorytet użytkownia?'@[$_tab.sel_size()])
|| _result:=1;
   sel_nchk();
   KOMM.init(250,'Zarządzanie priorytetami na liscie TODO'@);
   ~~
?};
_result


\bi_todo_prior_del_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Akcja Usuń priorytet na liście TODO - grupa po
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\fields_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Przed wyświetl na BI_TODO
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
~~


\cleaner_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Akcja Czyszczenie zadań w okienku wszystkich zadań
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('mp_run_a','#b__box');
_arg.ACT_UID:='ZPR_CLE_ANER';
exec('mp_run','#b__box',_arg);
~~


\count_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Oblicza MOJE, WOLNE zadania użytkownika _b w firmie _a
::   WE: _a - FIRMA.ref()
::       _b - USERS.ref()
::   WY: uchwyt do tabeli
::  OLD: \count_todo/pulpit.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<>type_of(null()) || _a:=null() ?};
{? var_press('_b')<>type_of(null()) || _b:=null() ?};

_Tab:=tab_tmp(2
   ,'DOMAIN'   ,'STRING[3]'   ,'Domena'@
   ,'STATUS'   ,'STRING[50]'  ,'Status'@
   ,'IL'       ,'REAL'        ,'Ilość'@);

BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('COUNT'); BI_TODO.prefix(_a,_b,exec('TODO_MOJE','#bi_stat'));
_loop:=BI_TODO.first();
{!
|? _loop
|!
   _domain:=BI_TODO.B_DOMAIN().SYMBOL;
   _status:=BI_TODO.BI_STAT().SYMBOL;
   {? _Tab.find_key(_domain,_status)
   || _Tab.IL+=1;
      _Tab.put()
   || _Tab.DOMAIN:=_domain;
      _Tab.STATUS:=_status;
      _Tab.IL:=1;
      _Tab.add()
   ?};
   _loop:=BI_TODO.next()
!};
BI_TODO.prefix(_a,_b,exec('TODO_WOLNE','#bi_stat'));
_loop:=BI_TODO.first();
{!
|? _loop
|!
   _domain:=BI_TODO.B_DOMAIN().SYMBOL;
   _status:=BI_TODO.BI_STAT().SYMBOL;
   {? _Tab.find_key(_domain,_status)
   || _Tab.IL+=1;
      _Tab.put()
   || _Tab.DOMAIN:=_domain;
      _Tab.STATUS:=_status;
      _Tab.IL:=1;
      _Tab.add()
   ?};
   _loop:=BI_TODO.next()
!};
BI_TODO.cntx_pop();

::_wer:=_Tab.mk_sel(,,1);
::_Tab.win_sel(_wer);
::_Tab.select();

_Tab


\count_todo_group
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: Oblicza MOJE, WOLNE zadania użytkownika i łaczy w Megadziedziny
::   WE: _a - FIRMA.ref()
::       _b - USERS.ref()
::       _c - INTEGER - Jterm[0]/Webterm(1)
::   WY: obiekt z obliczonymi danymi (dla Jterm/Webterm)
::  OLD: \count_todo_group/pulpit.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<>type_of(null()) || _a:=REF.FIRMA ?};
{? var_press('_b')<>type_of(null()) || _b:=OPERATOR.USER ?};
_web:={? var_press('_c')=type_of(0) || _c || 0 ?};

_sum:=obj_new('own_0','own_1','own_2','own_3','own_4','free_0','free_1','free_2','free_3','free_4');
_sum.own_0:=_sum.own_1:=_sum.own_2:=_sum.own_3:=_sum.own_4:=0;
_sum.free_0:=_sum.free_1:=_sum.free_2:=_sum.free_3:=_sum.free_4:=0;

_sumw:=obj_new('own_0','own_1','own_2','own_3','own_4','free_0','free_1','free_2','free_3','free_4');
_sumw.own_0:=_sumw.own_1:=_sumw.own_2:=_sumw.own_3:=_sumw.own_4:=0;
_sumw.free_0:=_sumw.free_1:=_sumw.free_2:=_sumw.free_3:=_sumw.free_4:=0;

BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('VCOUNT');

_names:=exec('mega_names','#b_domain');
{! _it:=1..obj_len(_names)
|! _megad:=_names[_it];

   {? _megad=_names.FINANSE
   || _sum.own_1:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'JTERM');
      _sum.free_1:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'JTERM');
      _sumw.own_1:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'WEBTERM');
      _sumw.free_1:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'WEBTERM');
      ~~
   |? _megad=_names.PERSONEL
   || _sum.own_2:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'JTERM');
      _sum.free_2:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'JTERM');
      _sumw.own_2:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'WEBTERM');
      _sumw.free_2:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'WEBTERM');
      ~~
   |? _megad=_names.LOG_PROD
   ||
      _sum.own_3:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'JTERM');
      _sum.free_3:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'JTERM');
      _sumw.own_3:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'WEBTERM');
      _sumw.free_3:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'WEBTERM');
      ~~
   |? _megad=_names.ZARZ
   ||
      _sum.own_4:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'JTERM');
      _sum.free_4:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'JTERM');
      _sumw.own_4:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,_megad,'WEBTERM');
      _sumw.free_4:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,_megad,'WEBTERM');
      ~~
   ?}
!};

:: Zliczam pozostałe, bez megadziedziny (np te które należą do ZWS)
_sum.own_0:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,'','JTERM');
_sum.free_0:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,'','JTERM');
_sumw.own_0:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_MOJE,'','WEBTERM');
_sumw.free_0:=exec('count_todo_core','#bi_todo',_a,_b,__Status.TODO_WOLNE,'','WEBTERM');

:: Dodajemy do wszystkich zadań, te które należą do poszczególnych megadziedzin
_sum.own_0+=_sum.own_1;
_sum.own_0+=_sum.own_2;
_sum.own_0+=_sum.own_3;
_sum.own_0+=_sum.own_4;

_sum.free_0+=_sum.free_1;
_sum.free_0+=_sum.free_2;
_sum.free_0+=_sum.free_3;
_sum.free_0+=_sum.free_4;

_sumw.own_0+=_sumw.own_1;
_sumw.own_0+=_sumw.own_2;
_sumw.own_0+=_sumw.own_3;
_sumw.own_0+=_sumw.own_4;

_sumw.free_0+=_sumw.free_1;
_sumw.free_0+=_sumw.free_2;
_sumw.free_0+=_sumw.free_3;
_sumw.free_0+=_sumw.free_4;
::
::{! _ii:=1..2
::|!
::   {? _ii=1
::   || BI_TODO.prefix(_a,_b,__Status.TODO_MOJE)
::   || BI_TODO.prefix(_a,_b,__Status.TODO_WOLNE)
::   ?};
::
::   {? BI_TODO.first
::   ||
::      {!
::      |?
::         _megad:=exec('domain_megad','#b_domain',BI_TODO.B_DOMAIN);
::         {? _megad='Finanse'
::         || {? _ii=1
::            || {? BI_TODO.JTERM='T' || _sum.own_0+=1;_sum.own_1+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.own_0+=1;_sumw.own_1+=1 ?}
::            |? _ii=2
::            || {? BI_TODO.JTERM='T' || _sum.free_0+=1;_sum.free_1+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.free_0+=1;_sumw.free_1+=1 ?}
::            ?}
::         |? _megad='Personel'
::         || {? _ii=1
::            || {? BI_TODO.JTERM='T' || _sum.own_0+=1;_sum.own_2+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.own_0+=1;_sumw.own_2+=1 ?}
::            |? _ii=2
::            || {? BI_TODO.JTERM='T' || _sum.free_0+=1;_sum.free_2+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.free_0+=1;_sumw.free_2+=1 ?}
::            ?}
::         |? _megad='Logistyka i produkcja'
::         || {? _ii=1
::            || {? BI_TODO.JTERM='T' || _sum.own_0+=1;_sum.own_3+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.own_0+=1;_sumw.own_3+=1 ?}
::            |? _ii=2
::            || {? BI_TODO.JTERM='T' || _sum.free_0+=1;_sum.free_3+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.free_0+=1;_sumw.free_3+=1 ?}
::            ?}
::         |? _megad='Zarządzanie'
::         || {? _ii=1
::            || {? BI_TODO.JTERM='T' || _sum.own_0+=1;_sum.own_4+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.own_0+=1;_sumw.own_4+=1 ?}
::            |? _ii=2
::            || {? BI_TODO.JTERM='T' || _sum.free_0+=1;_sum.free_4+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.free_0+=1;_sumw.free_4+=1 ?}
::            ?}
::         ||
::::       Wszystkie inne nawijają tylko licznik wszystkich
::            {? _ii=1
::            || {? BI_TODO.JTERM='T' || _sum.own_0+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.own_0+=1 ?}
::            |? _ii=2
::            || {? BI_TODO.JTERM='T' || _sum.free_0+=1 ?};
::               {? BI_TODO.WEBTERM='T' || _sumw.free_0+=1 ?}
::            ?}
::         ?};
::         BI_TODO.next
::      !}
::   ?}
::!};

BI_TODO.cntx_pop();
{? _web>0
|| _sumw
|| _sum
?}


\count_todo_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Zlicza ilość zadań TODO
::   WE: _a - FIRMA.ref()
::       _b - USERS.ref()
::       _c - BI_STAT.ref()
::       _d - STRING - nazwa megadziedziny
::       _e - STRING - JTERM/WEBTERM
::   WY: REAL - ilość zadań
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_firma:=_a;
_users:=_b;
_stat:=_c;
_megad:=_d;
_mode:=_e;

_result:=0;
BI_TODO.cntx_psh();
{? _mode='JTERM'
|| BI_TODO.index('VCOUNT')
|? _mode='WEBTERM'
|| BI_TODO.index('VCOUNT2')
?};
BI_TODO.prefix('T',_firma,_users,_stat,_megad,'T');
_result:=BI_TODO.size();
BI_TODO.cntx_pop();
_result


\todo_priority_count
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Zlicza ilość zadań na BI_TODO dla aktualnego użytkownika
::   WY: obj_new
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('ALL'
                 ,'PRIOR_0'
                 ,'PRIOR_1'
                 ,'PRIOR_2'
                 ,'PRIOR_3'
                 ,'PRIOR_U');
_result.ALL:=0;
_result.PRIOR_0:=0;
_result.PRIOR_1:=0;
_result.PRIOR_2:=0;
_result.PRIOR_3:=0;
_result.PRIOR_0:=0;
_result.PRIOR_U:=0;
BI_TODO.cntx_psh();
{? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
{? ZAKR.BFIRMA='T' | ZAKR.BFIRMA=''
|| BI_TODO.index('VSERFRPE');

:: Ważne, priorytet niski
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,1,0);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_0+=_size;

:: Ważne, priorytet średni
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,1,1);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_1+=_size;

:: Ważne, priorytet wysoki
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,1,2);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_2+=_size;

:: Ważne, priorytet krytyczny
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,1,3);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_3+=_size;

:: Nieważne, priorytet niski
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,0,0);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_0+=_size;

:: Nieważne, priorytet średni
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,0,1);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_1+=_size;

:: Nieważne, priorytet wysoki
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,0,2);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_2+=_size;

:: Nieważne, priorytet krytyczny
   BI_TODO.prefix('T',REF.FIRMA,OPERATOR.USER,'T',1,0,3);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_3+=_size;
   ~~
|| BI_TODO.index('VSERFRPF');

:: Ważne, priorytet niski
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,1,0);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_0+=_size;

:: Ważne, priorytet średni
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,1,1);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_1+=_size;

:: Ważne, priorytet wysoki
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,1,2);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_2+=_size;

:: Ważne, priorytet krytyczny
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,1,3);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_U+=_size;
   _result.PRIOR_3+=_size;

:: Nieważne, priorytet niski
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,0,0);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_0+=_size;

:: Nieważne, priorytet średni
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,0,1);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_1+=_size;

:: Nieważne, priorytet wysoki
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,0,2);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_2+=_size;

:: Nieważne, priorytet krytyczny
   BI_TODO.prefix('T',OPERATOR.USER,'T',1,0,3);
   _size:=BI_TODO.size();
   _result.ALL+=_size;
   _result.PRIOR_3+=_size;
   ~~
?};
BI_TODO.cntx_pop();
_result


\trigger_widget
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Zakłada trigerry na BI_TODO - zapewnia auto-odświeżanie
::   WE: _a - INTEGER - 0/1 - włączyć czy wyłączyć triggery
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_on:=1;
{? var_pres('_a')=type_of(0)
|| _on:=_a
?};
{? _on>0
|| _ff:="exec('todo_ntc_send','pulpit')"
|| _ff:=""
?};
BI_TODO.trig_a('add',_ff,'widget_refresh');
BI_TODO.trig_a('del',_ff,'widget_refresh');

{? _on>0
||
   _ff:="
      _before:=bfld('USERS');

      {? _before<>BI_TODO.USERS
      || exec('todo_ntc_send','pulpit',_before);
         exec('todo_ntc_send','pulpit',BI_TODO.USERS)
      ?};

      _before:=bfld('BI_STAT');
      {? _before<>BI_TODO.BI_STAT
      || exec('todo_ntc_send','pulpit',BI_TODO.USERS)
      ?};
      ~~
   "
|| _ff:=""
?};
BI_TODO.trig_a('put',_ff,'widget_refresh');
~~


\can_release
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Sprawdza czy dostępna powinna być akcja Zwolnij dla zadania TODO
::   WE: [_a] - BI_TODO.ref lub bieżący rekord
::   WY: 0 - brak akcji
::       1 - akcja dostępna
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(BI_TODO.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_PROC.cntx_psh();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
{? _ref<>null()
|| BI_TODO.prefix();
   {? BI_TODO.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _result:=exec('chk_role','#b__box',OPERATOR.USER,'ZPR_INS_ZADU');

   {? _result=0
   || {? BI_TODO.B_PROC().OWNER<>null()
      || {? BI_TODO.B_PROC().OWNER=OPERATOR.USER
         || _result:=1
         ?}
      ?}
   ?};
   {? _result=0
   || {? BI_TODO.USERS=OPERATOR.USER
      || _result:=1
      ?}
   ?}
?};
BI_TODO.cntx_pop();
B_PROC.cntx_pop();
_result


\title
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Ustawia tutuł obszaru roboczego 'Zadania' - prawie tak samo jak obiekt AreaTitle
::   WE: _a - tytuł zakładki (domyślnie 'Zadania')
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _title:=_a
|| _title:='Zadania'@
?};
AreaTitle.title_override:=_title;
AreaTitle.setTitle();
~~


\lang
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Zadania TODO w wersji językowej
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_lang:=exec('lang','#users');
_user_lang:=exec('user_lang','#users');
_todo_lang:={? _lang=_user_lang || _user_lang  || '' ?};
_todo_lang<>'' & _todo_lang<>'pl'


\lang_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Zadania TODO w wersji językowej - init
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('lang','#bi_todo')
||
   _user_lang:=exec('user_lang','#users');
   exec('translate','#b_domain',_user_lang);
   exec('translate','#bi_stat',_user_lang);
   exec('translate_all','#bi_todo')
?}


\translate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Tłumaczy zadanie TODO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? BI_TODO.BI_PREL
||
   BI_PREL.cntx_psh();
   BI_TODO.BI_PREL();
   _user_lang:=exec('user_lang','#users');
   {? _user_lang<>BI_TODO.LANG | BI_TODO.TM_LANG<BI_PREL.TM_DUPD
   ||
      BI_TODO.DESC:=translate(BI_PREL.DESC_ORG+BI_PREL.DESC1ORG,0);
      BI_TODO.TM_LANG:=BI_PREL.TM_DUPD;
      BI_TODO.LANG:=_user_lang;
      BI_TODO.LANG_STA:=exec('FindInSet','#table','TRANSTMP',TRANSTMP_NDX,$BI_TODO.BI_STAT,_user_lang,"TRANSTMP.TRAN",1,'bi_stat','');
      BI_TODO.LANG_DOM:=exec('FindInSet','#table','TRANSTMP',TRANSTMP_NDX,$BI_TODO.B_DOMAIN,_user_lang,"TRANSTMP.TRAN",1,'domain','');
      BI_TODO.put()
   ?};
   BI_PREL.cntx_pop()
?}


\translate_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Tłumaczy zadania TODO
::       Funkcja działa na bieżącej dziedzinie tabeli BI_TODO tzn. że przed wywołaniem funkcji należy
::       odpowiednio ustawić dziedzinę tabeli BI_TODO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BI_TODO.cntx_psh();
_loop:=BI_TODO.first();
{!
|? _loop
|!
   exec('translate','#bi_todo');
   _loop:=BI_TODO.next()
!};
BI_TODO.cntx_pop();
BI_TODO.get()


\can_create_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Sprawdza czy dla danego BI_PRELa można utworzyć zadania TODO
::   WE: [_a] - BI_PREL.ref lub bieżący rekord
::   WY: -1 - nie można, bo jest czynnością typu pętla
::        0 - nie można
::        1 - można
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(BI_PREL.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_PREL.cntx_psh();
BI_PREL.cntx_psh();
{? _ref<>null()
|| BI_PREL.prefix();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _type:=BI_PREL.B_PREL().TYPE;
   {? _type='U' |
      _type='M' |
      _type='E'
   || _result:=1
   ?};

   {? _result>0
   || {? BI_PREL.B_PREL().LOOP='T' & BI_PREL.LOOP_NUM>0 & BI_PREL.LOOPTODO<>'T'
      || _result:=-1
      ?}
   ?}
?};
BI_PREL.cntx_pop();
B_PREL.cntx_pop();
_result


\visible_notify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Ustal widoczność i powiadomienia zadania znajdującego się w buforze tabeli BI_TODO
::   WE: _a - B_PREL.ref()
::       _b - USERS.ref()
::   WY: 'T'/'N'
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=BI_TODO.B_PREL;
_user:=BI_TODO.USERS;
_result:=exec('FindInSet','#table','B_TODO_U','UNIK',_user,_b_prel,"
   BI_TODO.VISIBLE:=B_TODO_U.VISIBLE;
   BI_TODO.NOTIFY_1:=B_TODO_U.NOTIFY_1;
   BI_TODO.NOTIFY_2:=B_TODO_U.NOTIFY_2;
   BI_TODO.NOTIFY_3:=B_TODO_U.NOTIFY_3;
   1
",,,0);
{? _result=0
||
   exec('FindAndGet','#table',B_PREL,_b_prel,,"
      BI_TODO.VISIBLE:=B_PREL.VISIBLE;
      BI_TODO.NOTIFY_1:=B_PREL.NOTIFY_1;
      BI_TODO.NOTIFY_2:=B_PREL.NOTIFY_2;
      BI_TODO.NOTIFY_3:=B_PREL.NOTIFY_3
   ",'N')
?}


\personalizuj_wg_bprel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Personalizacja listy zadań wg definicji czynności w procesie
::   WE: _a - 0/1 - zmieniła się definicja B_PREL.VISIBLE
::       _b - 0/1 - zmieniła się definicja B_PREL.PERSONAL
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_visible:=_a;
_personal:=_b;
B_TODO_U.cntx_psh();
B_TODO_U.index('UNIK');
B_TODO_U.prefix(B_PREL.ref());
{? _personal & B_PREL.PERSONAL='N'
||
   _loop:=B_TODO_U.first();
   {!
   |? _loop
   |!
      _loop:=B_TODO_U.del()
   !};
   _visible:=1
?};
{? _visible
||
   BI_TODO.cntx_psh();
   BI_TODO.index('VISIBLE');
   BI_TODO.prefix(REF.FIRMA,B_PREL.ref());
   _loop:=BI_TODO.first();
   {!
   |? _loop
   |!
      {? BI_TODO.VISIBLE<>B_PREL.VISIBLE & ~B_TODO_U.find_key(BI_TODO.USERS)
      ||
         BI_TODO.VISIBLE:=B_PREL.VISIBLE;
         BI_TODO.put()
      ?};
      _loop:=BI_TODO.next()
   !};
   BI_TODO.cntx_pop()
?};
B_TODO_U.cntx_pop()


\personalizuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Personalizuj zadanie
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_B_PREL:=exec('buffer','#b_prel'); _B_PREL.cntx_get(BI_TODO.B_PREL);
_B_PROC:=exec('buffer','#b_proc'); _B_PROC.cntx_get(BI_TODO.B_PROC);
_B_ACTION:=exec('buffer','#b_action'); _B_ACTION.cntx_get(exec('FindInSet','#table','B_ACTION','B_ELE',_B_PREL.B_ELE,,,,,null()));
{? _B_PROC.MICRO<>'T' & _B_PREL.PERSONAL<>'T'
||
   {? FUN.choice('Personalizacja czynności %1 w procesie %2 jest niedostępna.'@[_B_ACTION.UID,_B_PROC.SYMBOL],
      ,'Podgląd ustawień')=1
   ||
      B_TODO_U.cntx_psh();
      B_TODO_U.index('UNIK');
      B_TODO_U.prefix(BI_TODO.B_PREL,BI_TODO.USERS);
      {? _B_ACTION.MANUAL='T' | _B_ACTION.UID='ZWS_EDI_UNIW'
      || B_TODO_U.win_edit('RED')
      || B_TODO_U.win_edit('VRED')
      ?};
      exec('FindAndGet','#table',B_PREL,BI_TODO.B_PREL,,"
         B_TODO_U.VISIBLE:=B_PREL.VISIBLE;
         B_TODO_U.NOTIFY_1:=B_PREL.NOTIFY_1;
         B_TODO_U.NOTIFY_2:=B_PREL.NOTIFY_2;
         B_TODO_U.NOTIFY_3:=B_PREL.NOTIFY_3
      ");
      B_TODO_U.display();
      B_TODO_U.cntx_pop()
   ?};
   return()
?};

B_TODO_U.cntx_psh();
B_TODO_U.index('UNIK');
B_TODO_U.prefix(BI_TODO.B_PREL,BI_TODO.USERS);
{? _B_ACTION.MANUAL='T' | _B_ACTION.UID='ZWS_EDI_UNIW'
|| B_TODO_U.win_edit('RED')
|| B_TODO_U.win_edit('VRED')
?};
_put:=1;
{? ~B_TODO_U.first()
||
   B_TODO_U.blank();
   B_TODO_U.B_PREL:=BI_TODO.B_PREL;
   B_TODO_U.USER:=BI_TODO.USERS;
   B_TODO_U.VISIBLE:=_B_PREL.VISIBLE;
   B_TODO_U.NOTIFY_1:=_B_PREL.NOTIFY_1;
   B_TODO_U.NOTIFY_2:=_B_PREL.NOTIFY_2;
   B_TODO_U.NOTIFY_3:=_B_PREL.NOTIFY_3;
   _put:=0
?};

_env:=obj_new('b_prel','PROC');
params_set('env',_env);
_env.b_prel:=BI_TODO.B_PREL;
_env.PROC:=exec('proc4personalization','#bi_todo',_env.b_prel);
_Tab:=_env.PROC;
{? B_TODO_U.edit()
||
   _visible:=B_TODO_U.VISIBLE;
   _notify_1:=B_TODO_U.NOTIFY_1;
   _notify_2:=B_TODO_U.NOTIFY_2;
   _notify_3:=B_TODO_U.NOTIFY_3;
   _default:=exec('FindAndGet','#table',B_PREL,_env.b_prel,,"
      _default:=obj_new('VISIBLE','NOTIFY_1','NOTIFY_2','NOTIFY_3');
      _default.VISIBLE:=B_PREL.VISIBLE;
      _default.NOTIFY_1:=B_PREL.NOTIFY_1;
      _default.NOTIFY_2:=B_PREL.NOTIFY_2;
      _default.NOTIFY_3:=B_PREL.NOTIFY_3;
      _default
   ",,~~);
   {? var_pres('_default')<>type_of(~~)
   ||
      {? _default.VISIBLE=B_TODO_U.VISIBLE
         & _default.NOTIFY_1=B_TODO_U.NOTIFY_1
         & _default.NOTIFY_2=B_TODO_U.NOTIFY_2
         & _default.NOTIFY_3=B_TODO_U.NOTIFY_3
      ||
         {? _put || B_TODO_U.del() ?}
      ||
         {? _put || B_TODO_U.put() || B_TODO_U.add() ?}
      ?};
      obj_del(_default);
      B_TODO_U.cntx_psh();
      B_TODO_U.index('UNIK');
      B_TODO_U.prefix();
      BI_TODO.cntx_psh();
      BI_TODO.index('VISIBLE');
      _loop:=_Tab.first();
      {!
      |? _loop
      |!
         {? _Tab.SEL='T'
         ||
            _b_prel:=exec('FindAndGet','#table',B_PREL,_Tab.B_PREL,,,null());
            _put:=B_TODO_U.find_key(_b_prel,BI_TODO.USERS);
            _default:=exec('FindAndGet','#table',B_PREL,_b_prel,,"
               _default:=obj_new('VISIBLE','NOTIFY_1','NOTIFY_2','NOTIFY_3');
               _default.VISIBLE:=B_PREL.VISIBLE;
               _default.NOTIFY_1:=B_PREL.NOTIFY_1;
               _default.NOTIFY_2:=B_PREL.NOTIFY_2;
               _default.NOTIFY_3:=B_PREL.NOTIFY_3;
               _default
            ",,~~);
            {? _default.VISIBLE=_visible
               & _default.NOTIFY_1=_notify_1
               & _default.NOTIFY_2=_notify_2
               & _default.NOTIFY_3=_notify_3
            ||
               {? _put || B_TODO_U.del() ?}
            ||
               {? _put
               ||
                  {? B_TODO_U.VISIBLE=_visible
                     | B_TODO_U.NOTIFY_1<>_notify_1
                     | B_TODO_U.NOTIFY_2<>_notify_2
                     | B_TODO_U.NOTIFY_3<>_notify_3
                  ||
                     B_TODO_U.VISIBLE:=_visible;
                     B_TODO_U.NOTIFY_1:=_notify_1;
                     B_TODO_U.NOTIFY_2:=_notify_2;
                     B_TODO_U.NOTIFY_3:=_notify_3;
                     B_TODO_U.put()
                  ?}
               ||
                  B_TODO_U.blank();
                  B_TODO_U.B_PREL:=_b_prel;
                  B_TODO_U.USER:=BI_TODO.USERS;
                  B_TODO_U.VISIBLE:=_visible;
                  B_TODO_U.NOTIFY_1:=_notify_1;
                  B_TODO_U.NOTIFY_2:=_notify_2;
                  B_TODO_U.NOTIFY_3:=_notify_3;
                  B_TODO_U.add()
               ?}
            ?};
            obj_del(_default);
            BI_TODO.prefix(REF.FIRMA,_b_prel,BI_TODO.USERS);
            _loop:=BI_TODO.first() & BI_TODO.VISIBLE<>_visible;
            {!
            |? _loop
            |!
               BI_TODO.VISIBLE:=_visible;
               _loop:=BI_TODO.put() & BI_TODO.next()
            !}
         ?};
         _loop:=_Tab.next()
      !};
      BI_TODO.cntx_pop();
      B_TODO_U.cntx_pop()
   ?}
?};
B_TODO_U.cntx_pop()


\b_todo_u_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Domyślne ustawienia personalizacji listy zadań
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_Tab:=_env.PROC;
{? FUN.ask('Czy zresetować ustawienia do ustawień domyślnych?'@)
||
   exec('FindAndGet','#table',B_PREL,_env.b_prel,,"
      B_TODO_U.VISIBLE:=B_PREL.VISIBLE;
      B_TODO_U.NOTIFY_1:=B_PREL.NOTIFY_1;
      B_TODO_U.NOTIFY_2:=B_PREL.NOTIFY_2;
      B_TODO_U.NOTIFY_3:=B_PREL.NOTIFY_3
   ");
   _loop:=_Tab.first();
   {!
   |? _loop
   |!
      {? _Tab.B_PREL<>$_env.b_prel
      ||
         _Tab.SEL:='N';
         _Tab.put()
      ?};
      _loop:=_Tab.next()
   !}
?};
''


\b_todo_u_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Wybór procesów do personalizacji listy zadań
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_Tab:=_env.PROC;
{? _Tab.first()
||
   _Tab.select()
||
   FUN.info('Brak procesów do personalizacji.'@)
?};
''


\proc4personalization
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS:
::   WE: _a - B_PREL.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Tab:=tab_tmp(4
   ,'SEL','STRING[1]','Wybrany'
   ,'SYMBOL','STRING[100]','Symbol'
   ,'NAME','STRING[45]','Nazwa'
   ,'VER','STRING[10]','Wersja'
   ,'B_PREL','STRING[16]','$B_PREL.ref()');

_b_ele:=exec('FindAndGet','#table',B_PREL,_a,,"B_PREL.B_ELE",null());
_b_proc:=exec('FindAndGet','#table',B_PREL,_a,,"B_PREL.B_PROC",null());
{? _b_ele=null() | _b_proc=null() || return(_Tab) ?};

B_PROC.cntx_psh();
B_PREL.cntx_psh();
B_PREL.index('PSIGNAL');
B_PREL.prefix('T','T',_b_ele);
_loop:=B_PREL.first();
{!
|? _loop
|!
   {? B_PREL.PERSONAL='T' & B_PREL.B_PROC().ACTIVE='T' & B_PROC.ACCEPTED='T'
   ||
      _Tab.SEL:={? B_PREL.B_PROC=_b_proc || 'T' || 'N' ?};
      _Tab.SYMBOL:=B_PREL.B_PROC().SYMBOL;
      _Tab.NAME:=B_PREL.B_PROC().NAME;
      _Tab.VER:=B_PREL.B_PROC().VER;
      _Tab.B_PREL:=$B_PREL.ref();
      _Tab.add()
   ?};
   _loop:=B_PREL.next()
!};
B_PREL.cntx_pop();
B_PROC.cntx_pop();
{? _Tab.first()
||
   _wer:=_Tab.mk_sel('Procesy'@,,,'b_todo_u_proc',,,,,'U');
   _Tab.win_fld(_wer,,'SEL',,,,,,'Wybrany'@,,,2,,"'T'","'N'");
   _Tab.win_fld(_wer,,'SYMBOL',,,,,,'Symbol'@);
   _Tab.win_fld(_wer,,'NAME',,,,,,'Nazwa'@);
   _Tab.win_fld(_wer,,'VER',,,,,,'Wersja'@);
   _fb:="_Tab:=cur_tab(); _Tab.SEL:='T'; _Tab.put()";
   _Tab.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,1,1);
   _Tab.win_btn(_wer,'text=%1, panel=right'['Wybierz'@@],'menu:W');
   _fb:="_Tab:=cur_tab(); _Tab.SEL:='N'; _Tab.put()";
   _Tab.win_act(_wer,,'Formuła','Odbierz'@@,,,_fb,,,1);
   _Tab.win_btn(_wer,'text=%1, panel=right'['Odbierz'@@],'menu:O');
   _fb:="_Tab:=cur_tab(); _Tab.SEL:='N'; _Tab.put()";
   _Tab.win_sel(_wer)
?};
_Tab


\notify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Wysyłanie powiadomień
::       NOTIFY_x='T' - wysyłać
::       NOTIFY_x='N' - nie wysyłać
::       NOTIFY_x='W' - wysłano
::       NOTIFY_x='B' - błąd wysyłania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tm:=B_PREL.tm_stamp();
exec('czytaj','#stalesys',,XINFO,'LINK_INT');
_wait:=exec('get','#params',700022);
:: minimalny czas przed wysłaniem powiadomień
{? _wait<1 || _wait:=1 ?};
_todo_lang:=exec('lang','#bi_todo');
{? exec('get','#params',700023)='T'
||
   _bi_stat_size:=2;
   _bi_stat:=obj_new(_bi_stat_size);
   _bi_stat[2]:=exec('TODO_WOLNE','#bi_stat')
||
   _bi_stat_size:=1;
   _bi_stat:=obj_new(_bi_stat_size)
?};
_bi_stat[1]:=exec('TODO_MOJE','#bi_stat');

BI_PREL.cntx_psh();
BI_PREL.use('bi_e____');
BI_TODO.cntx_psh();
BI_TODO.use('bi_t____');

:: e-mail
_args:=exec('add_email_a','#mailbox');
{! _ii:=1.._bi_stat_size
|!
   BI_TODO.index('NOTIFY_1');
   BI_TODO.prefix('T',REF.FIRMA,_bi_stat[_ii]);
   _loop:=BI_TODO.last();
   {!
   |? _loop
   |!
      BI_TODO.cntx_psh(); _prev:={? BI_TODO.prev() || BI_TODO.ref() || null() ?}; BI_TODO.cntx_pop();
      _result:=0;
      {? (_tm-BI_TODO.BI_PREL().TM_BORN)%1000000/60<_wait
      ||
         _loop:=0

      |? BI_TODO.FREE=0
      ||
         BI_TODO.cntx_psh();
         BI_TODO.prefix();
         BI_TODO.NOTIFY_1:='N';
         BI_TODO.put();
         BI_TODO.cntx_pop()
      ||
         _args.RCV:=exec('FindAndGet','#table',USERS,BI_TODO.USERS,,"EMAIL",'');
         {? _args.RCV=''
         ||
            BI_TODO.cntx_psh();
            BI_TODO.prefix();
            BI_TODO.NOTIFY_1:='E';
            BI_TODO.put();
            BI_TODO.cntx_pop()
         ||
            _desc:={? _todo_lang || BI_TODO.DESC || BI_TODO.BI_PREL().DESC ?};
            _args.SUB:='Nowe zadanie w Merit: %1'@[_desc];
            _args.BODYT:=_args.SUB;
            _link_desk:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',BI_TODO.uidref()));
            _link_html:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',BI_TODO.uidref()),XINFO.LINK_INT);
            _args.BODYH:=
               {? _link_html<>''
               ||
                  '[[BODY_BUTTON(%1,Link do zadania (html),Link do zadania (html))]]'[_link_html]
               ||
                  '[[BODY_BUTTON(%1,Link do zadania (desktop),Link do zadania (desktop))]]'[_link_desk]
               ?};
            _args.TEMPLATE:='template_info.htm';
            _args.SOURCE:=$BI_TODO.ref();
            BI_TODO.NOTIFY_1:='E';
            {? exec('add_email','#mailbox',_args) || BI_TODO.NOTIFY_1:='W' ?};
            BI_TODO.cntx_psh();
            BI_TODO.prefix();
            BI_TODO.put();
            BI_TODO.cntx_pop()
         ?}
      ?};
      _loop:=_loop & BI_TODO.seek(_prev)
   !}
!};

:: sms
_from:=exec('get','#params',700021);
_add_link:=exec('get','#params',700024)='T';
{! _ii:=1.._bi_stat_size
|!
   BI_TODO.index('NOTIFY_2');
   BI_TODO.prefix('T',REF.FIRMA,_bi_stat[_ii]);
   _loop:=BI_TODO.last();
   {!
   |? _loop
   |!
      _to:=BI_TODO.USERS().TEL;
      BI_TODO.cntx_psh(); _prev:={? BI_TODO.prev() || BI_TODO.ref() || null() ?}; BI_TODO.cntx_pop();
      _result:=0;
      {? (_tm-BI_TODO.BI_PREL().TM_BORN)%1000000/60<_wait
      ||
         _loop:=0

      |? BI_TODO.FREE=0
      ||
         BI_TODO.NOTIFY_2:='N';
         BI_TODO.put()

      |? _to='' | _from=''
      ||
         BI_TODO.cntx_psh();
         BI_TODO.prefix();
         BI_TODO.NOTIFY_2:='E';
         BI_TODO.put();
         BI_TODO.cntx_pop()
      ||
         _desc:={? _todo_lang || BI_TODO.DESC || BI_TODO.BI_PREL().DESC ?};
         {? _add_link
         ||
            _link_html:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',BI_TODO.uidref()),XINFO.LINK_INT);
            {? _link_html<>'' || _desc:=_desc+' '+_link_html ?}
         ?};
         BI_TODO.NOTIFY_2:='E';
         _wyn:=exec('send_sms','#sms_send',_to,'Nowe zadanie w Merit: %1'@[_desc],_from,'0','0',date(),time());
         {? type_of(json_parse(_wyn))=117
            & var_pres('list', json_parse(_wyn))>0
            & obj_len(json_parse(_wyn).list)>0
            & var_pres('error', json_parse(_wyn).list[1])=0
         ||
            BI_TODO.NOTIFY_2:='W'
         ?};
         BI_TODO.cntx_psh();
         BI_TODO.prefix();
         BI_TODO.put();
         BI_TODO.cntx_pop()
      ?};
      _loop:=_loop & BI_TODO.seek(_prev)
   !}
!};

:: powiadomienie systemowe ntc_send()
{! _ii:=1.._bi_stat_size
|!
   BI_TODO.index('NOTIFY_3');
   BI_TODO.prefix('T',REF.FIRMA,_bi_stat[_ii]);
   _loop:=BI_TODO.last();
   {!
   |? _loop
   |!
      BI_TODO.cntx_psh(); _prev:={? BI_TODO.prev() || BI_TODO.ref() || null() ?}; BI_TODO.cntx_pop();
      _result:=0;
      {? (_tm-BI_TODO.BI_PREL().TM_BORN)%1000000/60<_wait
      ||
         _loop:=0

      |? BI_TODO.FREE=0
      ||
         BI_TODO.cntx_psh();
         BI_TODO.prefix();
         BI_TODO.NOTIFY_1:='N';
         BI_TODO.put();
         BI_TODO.cntx_pop()
      ||
         {? 'jak coś by było źle, to tutaj póść bokiem'; 0
         ||
            BI_TODO.cntx_psh();
            BI_TODO.prefix();
            BI_TODO.NOTIFY_3:='E';
            BI_TODO.put();
            BI_TODO.cntx_pop()
         ||
            BI_TODO.NOTIFY_3:='E';
            _id:=exec('ntc_send_bi_todo','#ntc');
            {? _id<>'' || BI_TODO.NOTIFY_3:='W' ?};
            BI_TODO.cntx_psh();
            BI_TODO.prefix();
            BI_TODO.put();
            BI_TODO.cntx_pop()
         ?}
      ?};
      _loop:=_loop & BI_TODO.seek(_prev)
   !}
!};

BI_TODO.cntx_pop();
BI_PREL.cntx_pop()


\notify_on
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Czy przetwarzanie notyfikacji z list todo włączone jest w uruchomionej kolejce
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_app_ident:=app_info('app_ident');
:: odczytanie parametrów przekazanych w cluster.cfg
_ap:=AppList.my.tab;
_ap.index(AppList.my.ndx_app);
_ap.prefix(_app_ident,);
{? _ap.first()
|| _app_par5:=_ap.APP_PAR5
|| _app_par5:=''
?};
_todo_notify_on:='TODO_NOTIFY_ON';
_on:=((_app_par5*_todo_notify_on)>0);
_on


\rebuild
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Odtwarza zadania dla podanego BI_PRELa. Zadania są odtwarzane tylko wtedy jeżeli można i sprytnie, tzn
::       jeżeli już były i nie trzeba ich odtwarzać to są zostawiane w spokoju
::   WE: [_a] - BI_PREL.ref lub bieżacy rekord
::       [_b] - tab_tmp - tablica uprawnionych userów
::       [_c] - INTEGER - 0/[1] - czy sprawdzać czy można gmerać z TODO na podstawie statusów na BI_PREL i BI_TODO
::       [_d] - USERS.ref() - użytkownik do którego ma zostać przydzielone zadanie (w szczególnym przypadku)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(BI_PREL.ref())
|| _ref:=_a
?};
_UsrsAct:=~~;
{? var_pres('_b')>100
|| _UsrsAct:=_b
?};
_check_status:=1;
{? var_pres('_c')=type_of(0)
|| _check_status:=_c
?};
_ope:=null();
{? var_pres('_d')=type_of(USERS.ref())
|| _ope:=_d
?};

_result:=0;
_can_continue:=1;

BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
{? _ref<>null()
|| BI_PREL.prefix();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _ref:=BI_PREL.ref()
?};

{? _check_status>0
||
   exec('bistat_status','#bi_stat');
   {? _can_continue>0
   ||
      {? BI_PREL.BI_STAT=__Status.OCZEKUJACA
      || _can_continue:=1
      |? BI_PREL.BI_STAT=__Status.URUCHOMIONA
      || _can_continue:=1
      |? BI_PREL.BI_STAT=__Status.ZAWIESZONA
      || _can_continue:=1
      || _can_continue:=0
      ?}
   ?};

   {? _can_continue>0
   ||
::    Jeżeli do BI_PRELa są zadania z problemami, albo proces z powodu problemów został awaryjnie zatrzymany
::    to nie odtwarzam zadań, bo to by spowodowało że zgłoszone problemy znikną
      BI_TODO.index('ELEMENT');

      BI_TODO.prefix(_ref,__Status.TODO_BREAK);
      {? BI_TODO.first()
      || _can_continue:=0
      ?};

      BI_TODO.prefix(_ref,__Status.TODO_ERROR);
      {? BI_TODO.first()
      || _can_continue:=0
      ?}
   ?}
?};
_create:=1;
{? _can_continue>0
||
   {? var_pres('_UsrsAct')<100
   || _UsrsAct:=exec('usersAction','#b_desktop',_ref)
   ?};

   _UsrsAct.prefix();
   BI_TODO.index('UNIQUE');
   BI_TODO.prefix(_ref);
   {? BI_TODO.size()=1 &
      BI_TODO.first() &
      (_UsrsAct.size()=1 | BI_PREL.B_PREL().ASSIGNTD='T')
   ||
::    Przypadek szczególny gdy było tylko jedno zadanie i użytkownik
::    dla zadania też jest jeden, albo w procesie ustawione że będzie przydzielane automatem - wtedy zamiast usuwać i tworzyć
::    po prostu następuje przepięcie użytkownika
      _przydziel_user:=_ope;
      {? _przydziel_user=null()
      || _przydziel_user:=BI_TODO.USERS
      ?};
      _can_przydziel:=_UsrsAct.first();
      {? _can_przydziel>0
      || {? _przydziel_user<>null()
         || _can_przydziel:=_UsrsAct.find_key($_przydziel_user,)
         ?}
      ?};
      {? _can_przydziel>0
      || {? exec('przydziel_core','#bi_todo',_UsrsAct)>0
         ||
::          Jeżeli przepiąłem na jednego użytkownika to nie wykonuję już obsługi dla wielu
::          użytkowników i wielu zadań
            _create:=0
         ?}
      ?}
   ?};
   {? _can_continue>0 & _create>0
   ||
::    Było wiele zadań, albo będzie wiele zadań, albo nie było nic albo nie będzie nic

::    1. Najpierw tnę te zadania użytkowników których nie ma na liście
::    aktualnych użytkowników uprawnionych do zadania
      {? BI_TODO.first()
      || {!
         |? _next:=0;
            _ref_nxt:=null();
            BI_TODO.cntx_psh();
            {? BI_TODO.next()
            || _ref_nxt:=BI_TODO.ref()
            ?};
            BI_TODO.cntx_pop();

            _UsrsAct.prefix($BI_TODO.USERS);
            {? _UsrsAct.first()=0
            || exec('delete','#bi_todo',BI_TODO.ref())
            ?};

            {? _ref_nxt<>null()
            || _next:=BI_TODO.seek(_ref_nxt)
            ?};
            _next>0 & _can_continue>0
         !}
      ?};

::    2. Usuwam z listy użytkowników tych którzy już mają to zadanie
      _UsrsAct.prefix();
      {? _UsrsAct.first()
      || {!
         |? _next:=0;
            _ref_nxt:=null();
            _UsrsAct.cntx_psh();
            {? _UsrsAct.next()
            || _ref_nxt:=_UsrsAct.ref()
            ?};
            _UsrsAct.cntx_pop();

            _user:=exec('FindAndGet','#table',USERS,_UsrsAct.USER,,,null());
            {? _user<>null()
            || BI_TODO.prefix(_ref,_user);
               {? BI_TODO.first()
               || _UsrsAct.del(,1)
               ?}
            ?};

            {? _ref_nxt<>null()
            || _next:=_UsrsAct.seek(_ref_nxt)
            ?};
            _next>0 & _can_continue>0
         !}
      ?};

::    Jeżeli po usuwaniu zadań zostało chociaż jedno przydzielone
::    to nie tworzę nowych zadań, żeby nie dublować przydzielonych
      BI_TODO.prefix(_ref);
      {? BI_TODO.first()
      || {!
         |? {? BI_TODO.BI_STAT=__Status.TODO_MOJE
            || _create:=0
            ?};
            BI_TODO.next()
         !}
      ?};

::    3. Dodaję brakujących użytkowników
      _UsrsAct.prefix();
      _others:=~~;
      BI_TODO.prefix(_ref);
      _size:=BI_TODO.size();
      _size+=_UsrsAct.size();
      {? _size>1
      ||
::       Jeżeli łączny rozmiar istniejących zadań i nowych jest większy niż 1
::       to znak że trzeba będzie tworzyć zadania Wolne
         _others:=1
      ?};
      {? _UsrsAct.size()>0
      || {? _create>0
         || exec('create','#bi_todo',_ref,,_ope,_UsrsAct,0,,_others)
         ?}
      ||
::       Jeżeli po usuwaniu zadań zostało dokładnie jedno zadanie wolne i nie ma
::       użytkowników którym będą tworzone nowe zadania to zmieniam status temu zadaniu
::       na przydzielone
         BI_TODO.prefix(_ref);
         {? BI_TODO.size()=1 & BI_TODO.first() & BI_TODO.BI_STAT=__Status.TODO_WOLNE
         || exec('przydziel_core','#bi_todo',,BI_TODO.USERS,BI_TODO.USERS_R)
         ?}
      ?};

::    4 Jeśli po tym całym zamieszaniu nie ma żadnych zadań TODO to zgłaszam błąd na instancji procesu
      BI_TODO.prefix(_ref);
      {? BI_TODO.size()=0
      || exec('orphan','#bi_todo',_ref)
      ?};
      ~~
   ?}
?};
BI_PREL.cntx_pop();
BI_TODO.cntx_pop();
B_PREL.cntx_pop();
BI_TODO.get();
BI_PREL.get();
~~


\rebuild4uid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Odtwarza TODO dla podanego identyfikatora w bieżącej firmie
::   WE: _a - STRING - identyfikator czynności
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_uid:=_a;
B_PREL.cntx_psh();
BI_PREL.cntx_psh();
BI_PREL.index('PREL3');
B_PROC.cntx_psh();
B_ELE.cntx_psh();
B_ELE.index('CLASSSYM');
B_ELE.prefix('B_ACTION',_uid,);
{? B_ELE.first()
|| B_PREL.index('ENABLED');
   B_PREL.prefix('T','T','T',B_ELE.ref());
   {? B_PREL.first()
   || {!
      |? {? B_PREL.B_PROC().MICRO<>'T' & B_PREL.B_PROC().FIRMA=REF.FIRMA
         || BI_PREL.prefix(B_PREL.ref());
            {? BI_PREL.first()
            || {!
               |? exec('rebuild','#bi_todo');
                  BI_PREL.next()
               !}
            ?}
         ?};
         B_PREL.next()
      !}
   ?}
|| FUN.error('Nie znaleziono czynności: %1'@[_uid])
?};
BI_PREL.cntx_pop();
B_PROC.cntx_pop();
B_ELE.cntx_pop();
B_PREL.cntx_pop();
~~


\count_todo_bi_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Zlicza ilość zadań dla BI_PREL
::   WE: [_a] - BI_PREL.ref() lub bieżący rekord
::   WY: REAL - liczba zapisów na TODO
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(BI_PREL.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

BI_PREL.cntx_psh();
{? _ref<>null()
|| BI_PREL.prefix();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| BI_TODO.cntx_psh();
   BI_TODO.index('ELEMENT');
   BI_TODO.prefix(BI_PREL.ref());
   _result:=BI_TODO.size();
   BI_TODO.cntx_pop()
?};
BI_PREL.cntx_pop();
_result

:Sign Version 2.0 jowisz:1045 2024/02/06 08:03:57 ae65601aa165283a6e338016008af8524a958d9fbfe129f1d1967987a71193ef0d7d20b1289e3375e240afd140a885b8674a2588c7aad92495632d31f1fd377daefcb817e891b818dbbb2bfef7ef09385946b722349c90794d9d248d6c57c39337c30c1e42dcfecfb7946ebf56e3870c5d05824cdbc2bb9c02209dc2a73dede6
