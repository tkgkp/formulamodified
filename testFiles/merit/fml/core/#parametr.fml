:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #parametr.fml
:: Utworzony: 2015.01.22
:: Autor: AMK
::======================================================================================================================
:: Zawartość: Funkcje odpowiedzialne za obsługę parametrów pakietu
::======================================================================================================================

\par_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [??] [?????]
:: OPIS: Deklaracja obiektow uzywanych w mechanizmie parametryzowania
::  OLD: \par_decl/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ONE_PAR', @.CLASS)<0
|| exec(,'_misc');
   exec(,'_popup');
   obj_decl('ONE_PAR',
        obj_fld('NUMER',0),
        obj_fld('TRESC',''),
        obj_fld('OPIS',''),
                ' parametr został już pobrany z tabeli?';
        obj_fld('IS_BUF',0),
                ' typ parametru - do walidacji - spośród poniższych typów';
        obj_fld('TYPE',0),
                ' dopuszczalne typy parametrów';
                        ' Tak lub Nie';
        obj_fld('YES_NO',1),
                        ' numeryczny, jeśli nie liczba to zero';
        obj_fld('NUMERIC',2),
                        ' numeryczny, <> 0';
        obj_fld('NON_ZERO',3),
                        ' niepusty';
        obj_fld('NOT_EMPT',4),
                        ' niepusty, spośród listy parametrów';
        obj_fld('POPUP',5),
                        ' inny, dowolny, walidacja pusta';
        obj_fld('OTHER',9),
                        ' ciąg znaków do popup, domyślnie jak dla typu YES_NO';
        obj_fld('POPUPSTR','''T'',''N'''),
        obj_fld('REQUIRED',0),
        obj_fld('ISF3SET',0),
        obj_meth('__init',"
                _a.NUMER:=_b;
                _a.TYPE:=_c;
                _a.REQUIRED:=.TYPE=.YES_NO | .TYPE=.NON_ZERO | .TYPE=.NOT_EMPT | .TYPE=.POPUP;
                _a.ISF3SET:=.TYPE=.YES_NO | .TYPE=.POPUP;
                {? _a.TYPE=_a.POPUP
                || _a.POPUPSTR:=_d
                ?}
        "),
obj_virt('get',"
                {? var_pres('PARAMETR')<>type_of(SYSLOG)
                || exec('load_par','#parametr')
                ?};
                PARAMETR.cntx_psh();
                PARAMETR.index(PARNUMER);
                PARAMETR.prefix();
                .IS_BUF:=1;
                _wyn:={? PARAMETR.find_key(.NUMER)
                      || .OPIS:=PARAMETR.OPIS;
                         .TRESC:=PARAMETR.TRESC
                      || .TRESC
                      ?};
                PARAMETR.cntx_pop();
                _wyn
        "),
        obj_virt('opis',"
                .OPIS
        "),
        obj_virt('set',"
                  {? var_pres('__GLOPAR')<=0 || exec('parametry_glob','parametr') ?};
                  PARAMS.cntx_psh();
                  .TRESC:=_a;
                  .OPIS:=_b;
                  PARAMS.index('FIRMA');
                  PARAMS.prefix(null,.NUMER);
                  _lokalny:={? PARAMS.first & ~(__GLOPAR*(','+$PARAMS.NUMER+',')) || 1 || 0 ?};
                  PARAMS.index('NUMER');
                  PARAMS.prefix(.NUMER);
                  {? PARAMS.first
                  || {? PARAMS.LOKALNY<>_lokalny
                     || {? PARAMS.LOKALNY=0 | PARAMS.size=1
                        || PARAMS.LOKALNY:=_lokalny;
                           PARAMS.put(1)
                        || {!
                           |? {? PARAMS.FIRMA=null
                              || PARAMS.LOKALNY:=_lokalny;
                                 PARAMS.put(1);
                                 PARAMS.next
                              || PARAMS.del
                              ?}
                           !}
                        ?}
                     ?};
                     {? PARAMS.first()
                     || {!
                        |? {? PARAMS.OPIS<>.OPIS | PARAMS.ID<>_d
                           || PARAMS.OPIS:=.OPIS;
                              PARAMS.ID:=_d;
                              PARAMS.put(1)
                           ?};
                           PARAMS.next
                        !}
                     ?}
                  || PARAMS.blank();
                     PARAMS.NUMER:=.NUMER;
                     PARAMS.OPIS:=.OPIS;
                     PARAMS.TRESC:=.TRESC;
                     PARAMS.ID:=_d;
                     PARAMS.FIRMA:=null;
                     PARAMS.LOKALNY:={? ~(__GLOPAR*(','+$PARAMS.NUMER+',')) || 1 || 0 ?};
                     PARAMS.add(1)
                  ?};
                  PARAMS.cntx_pop();
                  {? var_pres('PARAMETR')=type_of(SYSLOG) || .get() ?}
        "),
        obj_meth('aft_edit',"
                {? .TYPE=.YES_NO
                || fld(~-fld());
                        .yn_ae()
                |? .TYPE=.NUMERIC
                ||      .num_ae()
                |? .TYPE=.NON_ZERO
                ||      .non0_ae()
                |? .TYPE=.NOT_EMPT
                ||      .noem_ae()
                |? .TYPE=.POPUP
                || fld(~-fld());
                        .pop_ae()
                ||      .oth_ae()
                ?}
        "),
        obj_virt('yn_ae',"
                .pop_ae()
        "),
        obj_virt('pop_ae',"
                {? fld*'-' | .POPUPSTR * fld = 0 | form(fld)=''
                || .msg_err(); 0
                || .oth_ae()
                ?}
        "),
        obj_virt('num_ae',"
      {? #fld <> 0 | (#fld=0 & form(fld)='0')
                ||      .oth_ae()
                ||      .msg_err(); 0
                ?}
        "),
        obj_virt('noem_ae',"
                {? form(fld) <> ''
                ||      1
                ||      .msg_err(); 0
                ?}
        "),
        obj_virt('non0_ae',"
      {? #fld <> 0
                ||      1
                ||      .msg_err(); 0
                ?}
        "),
        obj_virt('oth_ae',"
                1
        "),
        obj_meth('f3',"
                {? .TYPE=.YES_NO
                ||      .yn_f3()
                |? .TYPE=.NUMERIC
                ||      0
                |? .TYPE=.NON_ZERO
                ||      0
                |? .TYPE=.NOT_EMPT
                ||      0
                |? .TYPE=.POPUP
                ||      .pop_f3()
                ||      .oth_f3()
                ?}
        "),
        obj_meth('is_f3',"
                .TYPE<>.NUMERIC & .TYPE<>.NON_ZERO & .TYPE<>.NOT_EMPT & .ISF3SET
        "),
        obj_meth('popup',"
                _z:='POP_UP:=obj_new(@.CLASS.POPUP);'+
                    '_f:=POP_UP.select('+.POPUPSTR+');'+
                    '_g:=(_f*''-'');'+
                    '_f:={? _g>0 || form((_g-1)+_f) || form(_f)?};'+
                    'obj_del(POP_UP); _f';
                _y:=($_z)();
                {? _y<>''
                ||      _y
                ||      _a
                ?}
        "),
        obj_virt('yn_f3',"
                .popup(fld)
        "),
        obj_virt('pop_f3',"
                .popup(fld)
        "),
        obj_virt('oth_f3',"
                1
        "),
        obj_meth('msg_err',"
                _t  :=  {? .TYPE=.YES_NO
                        || 'Dozwolone wartości: '+.POPUPSTR
                        |? .TYPE=.NUMERIC
                        || 'Należy wpisać liczbę.'
                        |? .TYPE=.NON_ZERO
                        || 'Należy wprowadzić liczbę różną od zera.'
                        |? .TYPE=.NOT_EMPT
                        || 'Pole musi zostać wypełnione.'
                        || ''
                        ?};
                FUN.info('Nieprawidłowa wartość pola.\n%1\n'
                         '\nSkorzystaj z podpowiedzi\n jeśli jest dostępna.'@[_t])
        ")
  )
?};
{? var_pres('PAR_CL', @.CLASS) < 0
||
   obj_decl('PAR_CL',
                ' maksymalna liczba parametrów globalnych';
        obj_fld('MAX_PAR',601),
                ' tablica z elementami typu @.CLASS.ONE_PAR';
        obj_fld('TAB_PAR',0),
                ' tablica do kontroli czy parametr już ma swój obiekt ONE_PAR';
        obj_fld('IS_PAR',0),
        obj_meth('__init',"
                        ' jeśli jest paraemtr to oznacza on maksymalny numer
                        parametru';
                {? _>1 || _a.MAX_PAR:=_b ?};
                _a.TAB_PAR:=obj_new(_a.MAX_PAR);
                _a.IS_PAR:=obj_new(_a.MAX_PAR);
                        ' nie ma jeszcze żadnych obiektów w TAB_PAR, więc
                        wszystkie znaczniki ustawiamy na 0';
                {! _i:=1.._a.MAX_PAR
                |! _a.IS_PAR[_i]:=0
                !}
        "),
        obj_meth('__done',"
                obj_del(.TAB_PAR);
                obj_del(.IS_PAR)
        "),
        obj_virt('opis',"
                {? .IS_PAR[_a]=0
                ||      'powołanie obiektu dla parametru, walidacja pusta .OTHER';
                        .TAB_PAR[_a]:=obj_new(@.CLASS.ONE_PAR,_a,6);
                        .IS_PAR[_a]:=1
                ?};
                .TAB_PAR[_a].opis()
        "),
        obj_virt('get',"
                {? .IS_PAR[_a]=0
                ||      'powołanie obiektu dla parametru, walidacja pusta .OTHER';
                        .TAB_PAR[_a]:=obj_new(@.CLASS.ONE_PAR,_a,6);
                        .IS_PAR[_a]:=1
                ?};
                .TAB_PAR[_a].get()
        "),
        obj_meth('set',"{? .IS_PAR[_a] = 0
                || {? _ = 6
                   ||      .TAB_PAR[_a]:=obj_new(@.CLASS.ONE_PAR,_a,_b)
                   ||      .TAB_PAR[_a]:=obj_new(@.CLASS.ONE_PAR,_a,_b,_g)
                   ?};
                   .IS_PAR[_a]:=1
                ?};
                .TAB_PAR[_a].set(_e,_f,0,'')
        "),
        obj_meth('aft_edit',"
                {? .IS_PAR[_a]>0
                ||      .TAB_PAR[_a].aft_edit()
                ||      1
                ?}
        "),
        obj_meth('f3',"
       {? _a>0 & .IS_PAR[_a]>0
                ||      .TAB_PAR[_a].f3()
                ||      1
                ?}
        "),
        obj_meth('f3_set',"
                {? .IS_PAR[_a]>0
                || .TAB_PAR[_a].ISF3SET:=1;
                   set_virt(.TAB_PAR[_a],'oth_f3',_b)
                ?}
        "),
        obj_meth('is_f3',"
                {? .IS_PAR[_a]>0
                || .TAB_PAR[_a].is_f3()
                ?}
        "),
        obj_meth('ae_set',"
                {? .IS_PAR[_a]>0
                || set_virt(.TAB_PAR[_a],'oth_ae',_b);
                   {? var_pres('_c')>0
                   || .TAB_PAR[_a].REQUIRED:=_c
                   ?}
                ?}
        "),
        obj_meth('required',"
                {? .IS_PAR[_a]>0
                || .TAB_PAR[_a].REQUIRED
                ?}
        "),
        obj_meth('max_par',"
                .MAX_PAR
        ")
  )
?}


\par_akt_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.10]
:: OPIS: Aktualizacja zapisu parametru lokalnego firmy w tabeli PARAMS
::   WE: Biezacay rekord tabeli PARAMETR
::       PARADM.TRYB - 1 - tryb redagowania wzorca, 0 - tryb uzytkownika (redagowania dla firmy)
::                jesli zmiennna nie istnieje, zostanie utworzona
::   WY: 1 - poprawnie, 0 - blad
::  OLD: \par_akt_fir/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
PARAMS.cntx_psh();
PARAMS.index('FIRMA');
{? REF.WFIRM & PARADM.TRYB=0
|| PARAMS.prefix(REF.S_FIRMA,PARAMETR.NUMER);
   {? PARAMS.first
   || PARAMS.TRESC:=PARAMETR.TRESC;
      _wyn:=PARAMS.put(1)
   || PARAMS.prefix(null,PARAMETR.NUMER);
      {? PARAMS.first
      || PARAMS.prefix();
         PARAMS.TRESC:=PARAMETR.TRESC;
         PARAMS.FIRMA:=REF.S_FIRMA;
         _wyn:=PARAMS.add(1)
      ?}
   ?}
|| PARAMS.prefix(null,PARAMETR.NUMER);
   {? PARAMS.first
   || PARAMS.TRESC:=PARAMETR.TRESC;
      _wyn:=PARAMS.put(1)
   ?}
?};
PARAMS.cntx_pop();
_wyn


\par_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Na klawisz F3 przy redakcji tresci parametru
::  OLD: \par_f3/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_SKID.f3(PARAMETR.NUMER)


\par_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Po redakcji tresci parametru
::  OLD: \par_ae/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_SKID.aft_edit(PARAMETR.NUMER)


\par_popr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [RL] [7.53]
:: OPIS: Funkcja umozliwia aktualizacje elementu tabeli parametrow
::       (po akcji Popraw w okienku 'PARAMETR' tabeli PARAMETR)
::  OLD: \par_popr/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_SKID.get(PARAMETR.NUMER);
_p:=PAR_SKID.TAB_PAR[PARAMETR.NUMER].TYPE;
{? _p<>5
|| PAR_SKID.set(PARAMETR.NUMER,_p,1,'',PARAMETR.TRESC,PARAMETR.OPIS)
|| PAR_SKID.set(PARAMETR.NUMER,_p,1,'',PARAMETR.TRESC,PARAMETR.OPIS,
   PAR_SKID.TAB_PAR[PARAMETR.NUMER].POPUPSTR)
?};
1


\par_popp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Formula wprowadzona w programie FIKS. Mozna zamiescic tu liste numerow
::       parametrow zabronionych do redakcji.
::  OLD: \par_popp/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
_edit:=
   {? PARAMETR.NUMER>=400 & PARAMETR.NUMER<=427
   || FUN.info(
         'Ścieżka do opcji zmiany parametru:\n'
         'Ustawienia i parametryzacja -> Oceny pracownicze -> Parametry działania - oceny.'@
      ); 0
:: usunięto komunikat przed poprawieniem parametru 313 - ER/WRT/XP/23.25/2310/0004
   |? (_testpar:=',50,'; (_testpar*(','+$(PARAMETR.NUMER)+',')))
   || FUN.info('Parametr systemowy zastrzeżony.\nEdycja niedozwolona.'@); 0
   || 1
   ?};
wart_par:=PARAMETR.TRESC;
_edit


\par_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [8.10]
:: OPIS: Funkcja umozliwia aktualizacje elementu tabeli parametrow
::       (akcja Popraw w okienku 'PARAMETR' tabeli PARAMETR)
::  OLD: \par_pop/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
{? PARAMETR.r_lock(1,1)
|| {? exec('par_popp','#parametr')
   || _f3:=PAR_SKID.is_f3(PARAMETR.NUMER);
      _win:={? _f3 || parWin1 || parWin2 ?};
      PARAMETR.win_edit(_win);
      _req:=PAR_SKID.required(PARAMETR.NUMER);
      PARAMETR.efld_opt(_win,'mark='+$_req,PARAMETR,'TRESC');
      {? PARADM.TRYB=1
      || PARAMETR.hdr_edit();
         PARAMETR.hdr_edit(': '+'modyfikacja wzorca parametru %1'@[$PARAMETR.NUMER]);
         {? PARAMETR.edit()
         || PARAMETR.FIRMOWY:=0;
            {? PARAMETR.put()
            || exec('par_akt_fir','#parametr')
            ?};
            exec('par_popr','#parametr')
         ?}
      || PARAMETR.hdr_edit();
         PARAMETR.hdr_edit(': '+'modyfikacja parametru %1 (%2)'@[$PARAMETR.NUMER,FIRMA.OPIS]);
         {? PARAMETR.edit()
         || PARAMETR.FIRMOWY:=1;
            {? PARAMETR.put()
            || exec('par_akt_fir','#parametr')
            ?};
            exec('par_popr','#parametr')
         ?}
      ?}
   ?};
   PARAMETR.r_unlock()
|| FUN.info('Parametr obsługuje inny operator.\nDostęp zabroniony.'@)
?};
1


\return_to_std
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.10]
:: OPIS: Powrot do odczytu parametru z wzorca (usuniety zostanie wpis parametru dla danej firmy)
::   WE: Biezacy rekord tabeli PARAMETR
::  OLD: \return_to_std/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('zabezpieczenie','#parametr',PARAMETR.TRESC)
|| _par:=PARAMETR.NUMER;
   PARAMS.cntx_psh();
   PARAMS.index('FIRMA');
   PARAMS.prefix(REF.S_FIRMA,_par);
   {? PARAMS.first
   || PARAMS.del()
   ?};
   PARAMS.cntx_pop();
   _tryb:=PARADM.TRYB;
   PARADM.TRYB:=1;
   exec('get_par','#parametr',_par,2);
   PARADM.TRYB:=_tryb;
   win_disp()
?}


\zabezpieczenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.10]
:: OPIS: Zabezpieczenie przed nieumyslana modyfikacja parametru
::   WE: _a - biezaca wartosc parametru (wartosc do weryfikacji)
::  OLD: \zabezpieczenie/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
undefine();
define('WART','','Bieżąca wartość parametru'@);
{? def_edit(,'Weryfikacja'@)
|| _wyn:=form(~-DEFINE.WART)=form(~-_a);
   {? _wyn=0 || FUN.emsg('Wartość podana nie zgadza się ze wzorcową.'@) ?}
|| FUN.info('Operacja anulowana przez użytkownika.'@)
?};
undefine();
_wyn


\get_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL
:: OPIS: Odczyt parametru
::       Jesli tabela parametr nie istnieje wymuszone zostaje ponowne zaladowanie tabeli
::       (analogicznie do podania parametru _b=1)
::   WE:  _a [INTEGER] - numer parametru
::       [_b][INTEGER] - 1 - wymuszenie ponownego zasilenia tabeli PARAMETR wartosciami zapisanymi w PARAMS
::                       2 - wymuszenie podczytania parametru (tylko wskazany w _a)
::       [_c][INTEGER] - czy odkładać i przywracać kontekst tabeli PARAMETR? (0/1 domyślnie 0 - dotychczasowe działanie)
::   WY: ~~ - blad, pozostale przypadki - wartosc parametru
::       jesli wynik<>~~ wowczas biezacy rekord tabeli PARAMETR jest ustawiony na szukanym
::  OLD: \get_par/skid_akt.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=~~;
{? var_pres('PARAMETR')<>type_of(SYSLOG)
 | (var_pres('_b')=type_of(0) & _b=1)
|| exec('load_par','#parametr')
?};
_cntx:={? var_pres('_c')=type_of(0) || _c || 0 ?};

{? _cntx || PARAMETR.cntx_psh() ?};
PARAMETR.index(PARNUMER); PARAMETR.prefix();
{? (var_pres('_b')=type_of(0) & _b=2)
|| {? app_info('web_sesid')<>'' || PARADM.TRYB:=0 ?};
   PARAMS.index('FIRMA'); PARAMS.prefix();
   {? PARAMETR.find_key(_a) & (PARAMS.find_key(REF.S_FIRMA,_a) | PARAMS.find_key(null,_a))
   || PARAMETR.TRESC:=PARAMS.TRESC;
      PARAMETR.LOKALNY:=PARAMS.LOKALNY;
      PARAMETR.FIRMOWY:=PARAMS.FIRMA=REF.S_FIRMA;
      PARAMETR.put(1)
   ?}
?};
{? PARAMETR.find_key(_a) || _wyn:=PARAMETR.TRESC ?};
{? _cntx || PARAMETR.cntx_pop() ?};
_wyn


\load_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.10]
:: OPIS: Funkcja odczytuje parametry i wypelnia tabele tymczasowa PARAMETR
::       W trakcie dzialania funkcja sprawdza spojnosc parametrow
::   WE: [_a]  - 1 - tryb ADMINISTRATORA - redagowanie wzorcow
::   WY: 1 - poprawnie, 0 - blad
::       tabela tymczasowa PARAMETR
::  OLD: \load_par/skid_par.fml
::----------------------------------------------------------------------------------------------------------------------
::
:: ------------------- Weryfikacja poprawnosci definicji parametrow - w razie potrzeby poprawka ------------------------
PARADM.TRYB:={? var_pres('_a')=type_of(0) & _a=1 || 1 || 0 ?};
PARAMS.prefix();
_zaloz:={? app_info('web_sesid')<>''
        || {? var_pres('PARAMETR')<>type_of(SYSLOG) | var_pres('PARNUMER')<=0
           || 1
           || PARAMETR.for_each("PARAMETR.del()")
           ?}
        || 1
        ?};
{? _zaloz
||
:: ------------------------------ Tabela PARAMETR - zalozenie
   VAR_DEL.delete('PARAMETR');
   PARAMETR:=tab_tmp(,'NUMER','INTEGER','Numer'@
                     ,'TRESC','STRING[20]','Treść parametru'@
                     ,'OPIS','STRING[255]','Opis parametru'@
                     ,'LOKALNY','INTEGER','Globalna-0,Lokalna-1'@
                     ,'FIRMOWY','INTEGER','Firmowy-1,Zgodny z wzorcem-0'@);
   {? app_info('web_sesid')='' || PARAMETR.fld_attr(,2) ?};
   PARNUMER:=PARAMETR.ndx_tmp(,1,'NUMER',,)
?};
PARAMETR.index(PARNUMER);
:: ------------------------------ Tabela PARAMETR - zasilenie
PARAMS.cntx_psh();
PARAMS.index('FIRMA'); PARAMS.prefix(null);
{? PARAMS.first()
|| {! |?
      PARAMETR.NUMER:=PARAMS.NUMER;
      PARAMETR.TRESC:=PARAMS.TRESC;
      PARAMETR.OPIS:=PARAMS.OPIS;
      PARAMETR.LOKALNY:=PARAMS.LOKALNY;
      PARAMETR.add();
      PARAMS.next()
   !}
?};
{? PARADM.TRYB=0
|| PARAMS.prefix(REF.S_FIRMA);
   {? PARAMS.first()
   || {! |?
         {? PARAMETR.find_tab(,'NUMER',,'=',PARAMS.NUMER)
         || PARAMETR.TRESC:=PARAMS.TRESC;
            PARAMETR.LOKALNY:=PARAMS.LOKALNY;
            PARAMETR.FIRMOWY:=1;
            PARAMETR.put()
         ?};
         PARAMS.next()
      !}
   ?}
?};
PARAMS.cntx_pop();

:: ------------------------------ Tabela PARAMETR - triggery
PARAMETR.trig_a('put'," {? bfld('TRESC')<>PARAMETR.TRESC || exec('par_akt_fir','#parametr') ?};~~");

:: ------------------------------ Tabela PARAMETR - okno wertowania
{? cli_ver()<>'mbasic' & cli_ver()<>'cgi' & app_info('web_sesid')=''
||
   __parsel:=PARAMETR.mk_sel(,'P',,'#parametersel',,,,,'U','U',1,0);
   PARAMETR.win_sel(__parsel);
   PARAMETR.win_fld(__parsel,,'NUMER',,,5);
   PARAMETR.win_fld(__parsel,,'TRESC',,,20);
   PARAMETR.win_fld(__parsel,,'OPIS',,,90);

   PARAMETR.win_act(__parsel,,'Formuła','Popraw'@@,,,
     "{? PARADM.TRYB<>1 & PARAMETR.LOKALNY=0
      || FUN.info('Parametr globalny.\nModyfikacja tylko w trybie administratora.'@);
         return(0)
      ?};
      exec('par_pop','#parametr')",,1,,,,'P');
   PARAMETR.win_act(__parsel,,'Formuła','Tryb &użytkownika'@@,,,
      "PARADM.LAST:=PARAMETR.NUMER; PARADM.TRYB:=0; sel_exit; 1",,0,,,,'U');
   PARAMETR.win_act(__parsel,,'Formuła','Tryb &administratora'@@,,,
      "{? FUN.ask('Modyfikacja parametrów w trybie administratora\n'
                  'zmienia ustawienia wzorców parametrów.\n'
                  'Zmiany dokonane w tym trybie\n'
                  'mają bezpośredni wpływ na działanie wszystkich firm.\n\n'
                  'Czy na pewno kontynuować?'@)
       || PARADM.LAST:=PARAMETR.NUMER; PARADM.TRYB:=1; sel_exit; 1
       || 0
       ?}",,0,,,,'A');
   PARAMETR.win_act(__parsel,,'Formuła','Przełącz na &wzorzec'@@,,,
     "{? exec('par_popp','#parametr')
       & FUN.ask('Przełączenie na wzorzec\n'
                 'spowoduje powrót do ustawienia parametru\n'
                 'wspólnego dla wszystkich systemów.\n\n'
                 'Czy na pewno przełączyć?'@)
      || exec('return_to_std','#parametr')
      || 0
      ?}
     ",,0,,,,'W');
   PARAMETR.win_act(__parsel,,'Rekord',,,,
     "{? REF.WFIRM=0
      || PARAMETR.actions(__parsel,'AUWL',,1)
      |? PARADM.TRYB=0
      || _act:={? PARAMETR.FIRMOWY=0 || 'UW' || 'U' ?};
         PARAMETR.actions(__parsel,_act,,1)
      || PARAMETR.actions(__parsel,'AW',,1)
      ?};
      exec('rekprzed','color','PARAMETR#01')

     ");
   PARAMETR.win_act(__parsel,,'Szukaj');
   PARAMETR.win_act(__parsel,,'Kolejność');
   PARAMETR.win_act(__parsel,,'Formuła','Legenda'@@,,,"exec('legenda','color','PARAMETR')",,,,,,'L',,'target=window');
   PARAMETR.win_btn(__parsel,'text=%1,panel=right, align=begin'['&Popraw'@],'menu:P',,,,,,'noempty');
   PARAMETR.win_sel(__parsel);
   PARAMETR.hdr_sel();
   PARAMETR.hdr_sel('Parametry systemu - firma: %1'@[FIRMA.OPIS]);

:: ------------------------------ Tabela PARAMETR - okno redagowania
   PARAMETR.win_edit(PARAMETR.mk_edit(,1));

   parWin1:=_paredit:=PARAMETR.mk_edit('Parametr systemu'@);
   PARAMETR.win_esep(parWin1,'Dane podstawowe'@);
   PARAMETR.win_efld(_paredit,,'NUMER',,,,,1,'Numer'@);
   PARAMETR.win_efld(_paredit,,'TRESC',,,,,0,'Treść parametru'@,,,,'F3_button=1');
   PARAMETR.win_efld(_paredit,,'OPIS',,,120,,1,'Opis parametru'@);
   exec('ok_esc','#window',PARAMETR,_paredit,,,,,,,exec('text_red_ok','#window'));
   PARAMETR.win_edit(_paredit);
   parWin2:=_paredit:=PARAMETR.mk_edit('Parametr systemu'@);
   PARAMETR.win_esep(parWin2,'Dane podstawowe'@);
   PARAMETR.win_efld(_paredit,,'NUMER',,,,,1,'Numer'@);
   PARAMETR.win_efld(_paredit,,'TRESC',,,,,0,'Treść parametru'@);
   PARAMETR.win_efld(_paredit,,'OPIS',,,120,,1,'Opis parametru'@);
   exec('ok_esc','#window',PARAMETR,_paredit,,,,,,,exec('text_red_ok','#window'));
   PARAMETR.win_edit(_paredit);

   PARAMETR.fld_fml('TRESC','F3',"exec('par_f3','#parametr')");
   PARAMETR.fld_fml('TRESC','AFTER_EDIT', "exec('par_ae','#parametr')")
?};
1


\tresc_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Po akcji popraw dla tabeli ODD
::   WE: _a - numer parametru
::       _b - akronim indeksu
::       _c - tresc parametru
::----------------------------------------------------------------------------------------------------------------------
PARAMETR.cntx_psh(); PARAMETR.index(_b); PARAMETR.prefix(_a);
{? PARAMETR.first() & PARAMETR.TRESC<>_c
|| PARAMETR.TRESC:=_c;
   PARAMETR.put()
?};
PARAMETR.cntx_pop()


\del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła usuwa wskazane parametry. Do zastosowań transferowych.
::   WE:  [_a] [REFERENCE] - Wskazanie firmy, w której będą usuwane parametry. Pominięcie parametru oznacza, że
::                           parametry będą usuwane ze wszystkich firm.
::         _b  [NUMBER]    - Numer usuwanego parametru.
::        [_c] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_d] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_e] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_f] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_g] [NUMBER]    - Kolejny numer usuwanego parametru.
::   WY: Status operacji:
::       0 - Błędne parametry.
::       1 - Operacja wykonana prawidłowo.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=FIRMA
|| _jf:=1;
   _firma:=_a
|| _jf:=0
?};
{? _<2
|| return(0)
?};

_err:=0;
_number:=type_of(0);
PARAMS.cntx_psh();
PARAMS.index('UNIQ');
{! _lp:=2 .. _
|! {? type_of(_[_lp])<>_number
   || _err+=1
   || {? _jf
      || PARAMS.prefix(_[_lp],_firma)
      || PARAMS.prefix(_[_lp])
      ?};
      {? PARAMS.first()
      || {!
         |? PARAMS.del()
         !}
      ?}
   ?}
!};
PARAMS.prefix();
PARAMS.cntx_pop();
_err=0


\get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Pobiera wartość parametru z tabeli stałej
::   WE: _a - nr parametru
::   WY: Zwraca wartość parametru
::----------------------------------------------------------------------------------------------------------------------
PARAMS.index('FIRMA'); PARAMS.prefix();
{? PARAMS.find_key(REF.S_FIRMA,_a) | PARAMS.find_key(null,_a)
|| PARAMS.TRESC
|| ~~
?}

:Sign Version 2.0 jowisz:1045 2023/10/04 08:41:46 88745ed5ef83f99344712228865d9993c612462318b1ee8f5ecb7e9fd374c8d66bc5b5d0c6342dad3f67715894d25203f5b61d2e3dd2e46b22ef33b83cb18da462632ec4b48029c9d63733d9cf1099ef9e7855af103936c34b38c4f130b62092015db9c329a5e1af1e1e8d4aaf5722054025695469fbd3a3f84bad8facd41cf5
