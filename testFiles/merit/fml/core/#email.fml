:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #email.fml [8.40]
:: Utworzony: 07.07.2003
:: Autor: TS
::======================================================================================================================
:: Zawartość: - Obiekt klasy EMAIL, który implementuje wysyłanie poczty elektronicznej.
::            - Podstawowe formuły do obsługi poczty elektronicznej
::======================================================================================================================


\declare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Deklaracja klasy EMAIL - obiekt klasy EMAIL implementuje wysyłanie poczty elektronicznej.
::  OLD: /skid_emx.fml
::------------------------------ WYMAGANIA -----------------------------------------------------------------------------
::
:: Do wysyłania poczty elektronicznej używany jest program alertpostman.jar -> mail.jar
::
::----------------------------------------------------------------------------------------------------------------------
::
:: Zadeklarowanie klasy:
::   exec('declare','#email');
::
:: Powołanie obiektu klasy:
::   MAIL:=obj_new(@.CLASS.EMAIL, debug, log_java, log_sess);
::
::---------------------------- METODY ----------------------------------------------------------------------------------
::
:: Metoda 'Send' wysyła list do adresata
::   Użycie:
::     MAIL.Send(adress, subject, [source, [html, [sender, [file, [cc, [bcc, [return] ] ] ] ] ] ]);
::
::     adress - (string) adres(y) odbiorcy listu (postaci 'Nazwa <adres>' lub 'adres')
::               W przypadku wielu odbiorców adresy należy rozdzielać przecinkiem,
::            - albo tabela tymczasowa z pierwszą kolumną numerującą (integer)
::              a drugą z adresem odbiorcy (string),                                                    ZWERYFIKOWAĆ!!!!
::     subject - (string) temat listu
::     source - treść listu:
::               - gotowy plik z treścią wiadomości (kodowany UTF-8)
::               - albo tablica jednowymiarowa stringów (wektor),
::               - albo tabela z treścią wiadomości z pierwszą kolumną numerującą wiersze a drugą z treścią,
::               - albo tabela z polem MEMO,                                                            ZWERYFIKOWAĆ!!!!
::               - jezeli brak to pusta wiadomość
::     html - treść listu w formacie html:
::               - gotowy plik z treścią wiadomości (kodowany UTF-8)
::               - albo tablica jednowymiarowa stringów (wektor),
::               - albo tabela z treścią wiadomości z pierwszą kolumną numerującą wiersze a drugą z treścią,
::               - albo tabela z polem MEMO,
::               - jezeli brak to pusta wiadomość
::     sender - (string) nadawca                                                       ZWERYFIKOWAĆ!!!! (autor, replyto)
::     file - (string) pełna scieżka do pliku - załącznika
::             albo tabela z pierwszą kolumną z pełną nazwą pliku ze scieżką (string)
::             druga kolumna ze znacznikiem 'A' - attached, 'E' - embed (string),
::             trzecia kolumna z identyfikatorem (string)
::     cc - (string) adres(y) odbiorcy listu 'Do Wiadomosci'
::          (postaci 'Nazwa <adres>' lub 'adres')
::          W przypadku wielu odbiorcow adresy nalezy rozdzielac przecinkiem,
::        - albo tabela tymczasowa z pierwsza kolumna numerujaca (integer)
::          a druga z adresem odbiorcy (string),
::     bcc - (string) adres(y) odbiorcy listu 'Ukryte Do Wiadomosci'
::           (postaci 'Nazwa <adres>' lub 'adres')
::           W przypadku wielu odbiorcow adresy nalezy rozdzielac przecinkiem,
::         - albo tabela tymczasowa z pierwsza kolumna numerujaca (integer)
::           a druga z adresem odbiorcy (string),
::     return - znacznik, czy wysylac wiadomosc z potwierdzeniem odbioru (domyslnie bez potwierdzenia)
::
:: KOD KLASY:

{? var_pres('EMAIL', @.CLASS) < 0
|| obj_decl('EMAIL',

      obj_fld('ME',    "PRIVATE: wskazanie na siebie";0),

      obj_fld('DEBUG',   "PRIVATE: czy dodatkowe informacje, logowanie";0),
      obj_fld('LOG_JAVA',"PRIVATE: poziom logowania M-iesieczny, D-zienny";'M'),
      obj_fld('LOG_SESS',"PRIVATE: poziom logowania M-iesieczny, D-zienny, I-ndywidualny";'M'),

      obj_fld('TO',    "PRIVATE: lista odbiorcow wiadomosci";''),
      obj_fld('CC',    "PRIVATE: lista odbiorcow CC";''),
      obj_fld('BCC',   "PRIVATE: lista odbiorcow BCC";''),
      obj_fld('RETURN',"PRIVATE: znacznik, czy przesylac potwierdzenie odbioru";0),

      obj_fld('SUB',   "PRIVATE: temat listu";''),
      obj_fld('BODY',  "PRIVATE: nazwa pliku z cialem wiadomosci w txt";''),
      obj_fld('HTML',  "PRIVATE: nazwa pliku z cialem wiadomosci w html";''),
      obj_fld('EMPTY', "PRIVATE: flaga, czy pusta tresc wiadomosci";0),
      obj_fld('HEAD',  "PRIVATE: domyslna zawartosc naglowka wiadomosci w html";
       '<html><head><style type=\"text/css\">'+
       '<!-- PRE {font-family: Courier New CE, Courier New, Courier; font-size: 8pt; font-weight: normal; color: #707070;} -->'+
       '</style></head><body bgcolor=\"fffbf0\">'),
      obj_fld('FOOT',  "PRIVATE: domyslna zawartosc stopki wiadomosci w html";
       '</body></html>'),

      obj_fld('ATTACH',"PRIVATE: lista nazw zalaczanych plikow";0),

      obj_fld('RESULT',"PRIVATE: przechowuje wynik SENDa";0),

      obj_fld('SMTPSERV',"PRIVATE: serwer SMTP";''),
      obj_fld('SMTPPORT',"PRIVATE: port serwera";-1),
      obj_fld('SMTPTIMO',"PRIVATE: timeout serwera";-1),
      obj_fld('SMTPAUTH',"PRIVATE: autoryzacja";'0'),
      obj_fld('SMTPUSER',"PRIVATE: nazwa uzytkownika do autoryzacji";''),
      obj_fld('SMTPPASS',"PRIVATE: haslo uzytkownika do autoryzacji";''),
      obj_fld('SMTPSSL', "PRIVATE: czy serwer wymaga bezpiecznego polaczenia SSL";'0'),
      obj_fld('SMTPTLS', "PRIVATE: czy serwer wymaga bezpiecznego polaczenia TLS";'0'),

      obj_fld('TRUSTSRV',"PRIVATE: lista zaufanych serwerow";''),

      obj_fld('SEP',"PRIVATE: separator folderow";''),

      obj_fld('EMB_CNT',"PRIVATE: roboczy licznik załączników osadznych";0),
      obj_fld('EMB_TAB',"PRIVATE: robocza tabela załączników osadzonych";~~),
      obj_fld('ATT_CNT',"PRIVATE: roboczy licznik załączników dołączonych";0),
      obj_fld('ATT_TAB',"PRIVATE: robocza tabela załączników dołączonych";~~),

      obj_meth('__init',"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda __init
::   WE: _a - obiekt
::       [_b] - debug
::       [_c] - log_java ('M'iesięczny, 'D'zienny)
::       [_c] - log_sess ('M'iesięczny, 'D'zienny, 'I'ndywidualny)
::       [_d...] - obrazki osadzone
::----------------------------------------------------------------------------------------------------------------------
         .ME:=_a;
         {? _>1 & type_of(_b)=type_of(0) || .DEBUG:=_b ?};
         {? _>2 & type_of(_c)=type_of('') || .LOG_JAVA:=_c ?};
         {? _>3 & type_of(_d)=type_of('') || .LOG_SESS:=_d ?};
         .SEP:={? sys_name(1)='U_LINUX' || '/' || '\\\\' ?};
         .EMB_TAB:=tab_tmp(1,'NAME','STRING[255]','Nazwa pliku');
         .ATT_TAB:=tab_tmp(1,'NAME','STRING[255]','Nazwa pliku')
      "),

      obj_meth('NullHtml',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Osadzenie pustej zawartości w znacznikach HTML
::       Pliki head.htm i foot.htm a między nimi nic - używane, jeżeli same załączniki
::----------------------------------------------------------------------------------------------------------------------
         .HTML:='html.emx';
         _html:=fopen(.HTML,'Uw',1,,1);
         {? _html.is_open()
         || _head:=fopen('head.htm','ur',1,,1);
            {? _head.is_open()
            || _style:=exec('style','#email');
               {!
               |? _line:=_head.fread();
                  _next:=_line<>'\n';
                  {? _next
                  || _line:=gsub(_line,'%1',exec('firma_www','#email'));
                    {? exec('get','#params',700016,2)='T' || _blob:=exec('get_logo_h','#blob') || _blob:=0 ?};
                     _firma_logo_head:={? _blob || exec('bl_info','#blob',_blob,'NAME') || '' ?};
                     _line:=gsub(_line,'%2',{? _firma_logo_head='' || exec('head_logo','#email') || _firma_logo_head ?});
                     _line:=gsub(_line,'%3',exec('firma_name','#email'));
                     _line:=gsub(_line,'%4',_style);
                     _html.fwrite(_line)
                  ?};
                  _next
               !};
               _head.fclose()
            || _html.fwrite(.HEAD)
            ?};
            _foot:=fopen('foot.htm','ur',1,,1);
            {? _foot.is_open()
            || {? exec('get','#params',700017,2)='T' || _blob:=exec('get_logo_f','#blob') || _blob:=0 ?};
               _firma_logo_foot:={? _blob || exec('bl_info','#blob',_blob,'NAME') || '' ?};
               {!
               |? _line:=_foot.fread();
                  _next:=_line<>'\n';
                  {? _next
                  || {? _firma_logo_foot=''
                     || _line:=gsub(_line,'%1',exec('erp_www','#email'));
                        _line:=gsub(_line,'%2',exec('erp_logo','#email'));
                        _line:=gsub(_line,'%3',exec('erp_name','#email'));
                        _line:=gsub(_line,'%4',exec('footer','#email'))
                     || _line:=gsub(_line,'%1',exec('firma_www','#email'));
                        _line:=gsub(_line,'%2',_firma_logo_foot);
                        _line:=gsub(_line,'%3',exec('firma_name','#email'));
                        _line:=gsub(_line,'%4',exec('footer','#email'))
                     ?};
                     _html.fwrite(_line)
                  ?};
                  _next
               !};
               _foot.fclose()
            || _html.fwrite(.FOOT)
            ?};
            _html.fclose()
         ?}
      "),

      obj_meth('Txt2Html',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Osadzenie zawartości pliku tekstowego w znacznikach HTML
::       Pliki head.htm i foot.htm a między nimi tekst w znacznikach <pre></pre>
::----------------------------------------------------------------------------------------------------------------------
         .HTML:='html.emx';
         _txt:=fopen(.BODY,'ur',1,,1);
         {? _txt.is_open()
         || _html:=fopen(.HTML,'Uw',1,,1);
            {? _html.is_open()
            || _head:=fopen('head.htm','ur',1,,1);
               {? _head.is_open()
               || _style:=exec('style','#email');
                  {!
                  |? _line:=_head.fread();
                     _next:=_line<>'\n';
                     {? _next
                     || _line:=gsub(_line,'%1',exec('firma_www','#email'));
                        {? exec('get','#params',700016,2)='T' || _blob:=exec('get_logo_h','#blob') || _blob:=0 ?};
                        _firma_logo_head:={? _blob || exec('bl_info','#blob',_blob,'NAME') || '' ?};
                        _line:=gsub(_line,'%2',{? _firma_logo_head='' || exec('head_logo','#email') || _firma_logo_head ?});
                        _line:=gsub(_line,'%3',exec('firma_name','#email'));
                        _line:=gsub(_line,'%4',_style);
                        _html.fwrite(_line)
                     ?};
                     _next
                  !};
                  _head.fclose()
               || _html.fwrite(.HEAD)
               ?};
               _html.fwrite('<pre>');
               {!
               |? _line:=_txt.fread();
                  _next:=_line<>'\n';
                  {? _next
                  || _html.fwrite(_line)
                  ?};
                  _next
               !};
               _html.fwrite('</pre>');
               _foot:=fopen('foot.htm','ur',1,,1);
               {? _foot.is_open()
               || {? exec('get','#params',700017,2)='T' || _blob:=exec('get_logo_f','#blob') || _blob:=0 ?};
                  _firma_logo_foot:={? _blob || exec('bl_info','#blob',_blob,'NAME') || '' ?};
                  {!
                  |? _line:=fread(_foot);
                     _next:=_line<>'\n';
                     {? _next
                     || {? _firma_logo_foot=''
                        || _line:=gsub(_line,'%1',exec('erp_www','#email'));
                           _line:=gsub(_line,'%2',exec('erp_logo','#email'));
                           _line:=gsub(_line,'%3',exec('erp_name','#email'));
                           _line:=gsub(_line,'%4',exec('footer','#email'))
                        || _line:=gsub(_line,'%1',exec('firma_www','#email'));
                           _line:=gsub(_line,'%2',_firma_logo_foot);
                           _line:=gsub(_line,'%3',exec('firma_name','#email'));
                           _line:=gsub(_line,'%4',exec('footer','#email'))
                        ?};
                        _html.fwrite(_line)
                     ?};
                     _next
                  !};
                  _foot.fclose()
               || _html.fwrite(.FOOT)
               ?};
               _html.fclose()
            ?};
            _txt.fclose()
         ?}
      "),

      obj_meth('Body2File',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - body
::----------------------------------------------------------------------------------------------------------------------
         .BODY:='empty.emx';
         _tmp:=fopen(.BODY,'w',1,0);
         {? _tmp>0 || fclose(_tmp) ?};
         _array:=obj_new(1);

:: z pliku (zawartość musi być UTF-8):
         {? type_of(_a)=type_of('') & _a<>''
         || .BODY:=_a

:: z tab_tmp() pole tekstowe _a[2] (numeracja wierszy w _a[1])
         |? type_of(_a)=type_of(SYSLOG)
         || .BODY:='body.emx';
            _handle:=fopen(.BODY,'Uw',1,,1);
            {? _handle.is_open()
            || {? _a.first()
               || {!
                  |? _handle.fwrite(_a[2]);
                     _a.next()
                  !}
               ?};
               _handle.fclose()
            ?}

:: z tabeli stałej pole memo (_a[1] - akronim tabeli, _a[2] - ref rekordu, _a[3] - akronim pola)
         |? type_of(_a)=type_of(_array) & type_of(_a[1])=type_of('') & type_of(_a[2])=type_of(null()) & type_of(_a[3])=type_of('')
            & exec('memo_empty','#table',_a[1],_a[2],_a[3])=0
         || .BODY:='body.emx';
            _handle:=fopen(.BODY,'Uw',1,,1);
            {? _handle.is_open()
            || _tab:=($_a[1])();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(_a[2])
               || _txt:=_tab.memo_txt(,1,_a[3]);
                  _handle.fwrite(_txt)
               ?};
               _tab.cntx_pop();
               _handle.fclose()
            ?}

:: z array (obecnie nie jest obsługiwane)
::         |? type_of(_a)=type_of(_array)
::         || .BODY:='body.emx';
::            _handle:=fopen(.BODY,'w',1);
::            {? _handle>0
::            || _size:=obj_len(_a);
::               {! _i:=1.._size
::               |! fwrite(_handle,maz_utf8(_a[_i]))
::               !};
::               fclose(_handle)
::            ?}

:: pusta zawartość, czyli tekst informujący o braku tej części wiadomości
         || .BODY:='body.emx';
            _handle:=fopen(.BODY,'w',1,,1);
            {? _handle.is_open()
            || _handle.fwrite(
                  'Jeżeli możesz przeczytać ten tekst i nie widzisz treści naszego listu w postaci HTML\n'
                  'to oznacza, że Twój program pocztowy nie obsługuje takich listów. Możesz go jednak zobaczyć\n'
                  '- zapisz załącznik z tego listu na dysk (plik z rozszerzeniem .htm lub .html) i otwórz go\n'
                  'w przeglądarce internetowej, np. Microsoft Edge, Internet Explorer, Mozilla Firefox,\n'
                  'Google Chrome lub Opera.\n'
                  'Uwaga: do kodowania polskich znaków diakrytycznych używany jest standard UTF-8.\n\n'
                  'If you can read this text and you do not see our HTML content, then your email program\n'
                  'does not support these messages. If you want to see it, save an attachment\n'
                  '(.htm or .html file) from this e-mail to disk and open it in a web browser such as\n'
                  'Microsoft Edge, Internet Explorer, Mozilla Firefox, Google Chrome or Opera.\n'
                  'Note: The UTF-8 standard is used for encoding Polish diacritic marks.'
               );
               _handle.fclose()
            ?}
         ?}
      "),

      obj_meth('Html2FileOld',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Osadzenie zawartości pliku HTML w znacznikach
::       Pliki head.htm i foot.htm a między nimi źródło
::   WE: _a - html
::----------------------------------------------------------------------------------------------------------------------
         _array:=obj_new(1);
         .HTML:='html.emx';
         _html:=fopen(.HTML,'Uw',1,,1);
         {? _html.is_open()
         || _head:=fopen('head.htm','ur',1,,1);
            {? _head.is_open()
            || _style:=exec('style','#email');
               {!
               |? _line:=_head.fread();
                  _next:=_line<>'\n';
                  {? _next
                  || _line:=gsub(_line,'%1',exec('firma_www','#email'));
                     {? exec('get','#params',700016,2)='T' || _blob:=exec('get_logo_h','#blob') || _blob:=0 ?};
                     _firma_logo_head:={? _blob || exec('bl_info','#blob',_blob,'NAME') || '' ?};
                     _line:=gsub(_line,'%2',{? _firma_logo_head='' || exec('head_logo','#email') || _firma_logo_head ?});
                     _line:=gsub(_line,'%3',exec('firma_name','#email'));
                     _line:=gsub(_line,'%4',_style);
                     _html.fwrite(_line)
                  ?};
                  _next
               !};
               _head.fclose()
            || _html.fwrite(.HEAD)
            ?};

:: z pliku (zawartość musi być UTF-8):
            {? type_of(_a)=2
            || _source:=fopen(_a,'ur',1,,1);
               {? _source.is_open()
               || {!
                  |? _line:=_source.fread();
                     _next:=_line<>'\n';
                     {? _next || _html.fwrite(_line) ?};
                     _next
                  !};
                  _source.fclose()
               ?}

:: z tab_tmp() pole tekstowe _a[2] (numeracja wierszy w _a[1])
            |? type_of(_a)=type_of(SYSLOG)
            || {? _a.first()
               || {!
                  |? _html.fwrite(_a[2]);
                     _a.next()
                  !}
               ?}

:: z tabeli stałej pole memo (_a[1] - akronim tabeli, _a[2] - ref rekordu, _a[3] - akronim pola)
            |? type_of(_a)=type_of(_array) & type_of(_a[1])=type_of('') & type_of(_a[2])=type_of(null()) & type_of(_a[3])=type_of('')
            || _tab:=($_a[1])();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(_a[2])
               || _txt:=_tab.memo_txt(,1,_a[3]);
                  _html.fwrite(_txt)
               ?};
               _tab.cntx_pop()

:: z array (obecnie nie jest obsługiwane)
::            |? type_of(_a)=type_of(_array)
::            || _size:=obj_len(_a);
::               {! _i:=1.._size
::               |! html.fwrite(_a[_i])
::               !}
            ?};

            _foot:=fopen('foot.htm','ur',1,,1);
            {? _foot.is_open()
            || {? exec('get','#params',700017,2)='T' || _blob:=exec('get_logo_f','#blob') || _blob:=0 ?};
               _firma_logo_foot:={? _blob || exec('bl_info','#blob',_blob,'NAME') || '' ?};
               {!
               |? _line:=fread(_foot);
                  _next:=_line<>'\n';
                  {? _next
                  || {? _firma_logo_foot=''
                     || _line:=gsub(_line,'%1',exec('erp_www','#email'));
                        _line:=gsub(_line,'%2',exec('erp_logo','#email'));
                        _line:=gsub(_line,'%3',exec('erp_name','#email'));
                        _line:=gsub(_line,'%4',exec('footer','#email'))
                     || _line:=gsub(_line,'%1',exec('firma_www','#email'));
                        _line:=gsub(_line,'%2',_firma_logo_foot);
                        _line:=gsub(_line,'%3',exec('firma_name','#email'));
                        _line:=gsub(_line,'%4',exec('footer','#email'))
                     ?};
                     _html.fwrite(_line)
                  ?};
                  _next
               !};
               _foot.fclose()
            || html.fwrite(.FOOT)
            ?};
            _html.fclose()
         ?}
      "),

      obj_meth('Html2FileNew',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Stworzenie zawartości e-maila na podstawie template-a
::   WE: _a - _args
::----------------------------------------------------------------------------------------------------------------------
         _args:=_a;

         _array:=obj_new(1);

         .HTML:='html.emx';
         _html:=fopen(.HTML,'Uw',1,,1);
         {? _html.is_open()
         ||

:: z pliku (zawartość musi być UTF-8): - chwilowo zablokowane!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
::            {? var_pres('Html',_args)=2
::            || _source:=fopen(_args.Html,'ur',1,,1);
::               {? _source.is_open()
::               || {!
::                  |? _line:=_source.fread();
::                     _next:=_line<>'\n';
::                     {? _next || _html.fwrite(_line) ?};
::                     _next
::                  !};
::                  _source.fclose()
::               ?}

:: z tab_tmp() pole tekstowe _a[2] (numeracja wierszy w _a[1]) - chwilowo zablokowane!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
::            |? var_pres('Html',_args)=type_of(SYSLOG)
::            || {? _args.Html.first()
::               || {!
::                  |? _html.fwrite(_args.Html[2]);
::                     _args.Html.next()
::                  !}
::               ?}

:: z tabeli stałej pole memo (_a[1] - akronim tabeli, _a[2] - ref rekordu, _a[3] - akronim pola) - Html
            {? var_pres('Html',_args)=type_of(_array)
               & type_of(_args.Html[1])=type_of('')
               & type_of(_args.Html[2])=type_of(null())
               & type_of(_args.Html[3])=type_of('')
               & ~exec('memo_empty','#table',_args.Html[1],_args.Html[2],_args.Html[3])
            || _tab:=($_args.Html[1])();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(_args.Html[2])
               || _body:=_tab.memo_txt(,1,_args.Html[3])
               ?};
               _tab.cntx_pop()

:: z tabeli stałej pole memo (_a[1] - akronim tabeli, _a[2] - ref rekordu, _a[3] - akronim pola) - Text
            |? var_pres('Text',_args)=type_of(_array)
               & type_of(_args.Text[1])=type_of('')
               & type_of(_args.Text[2])=type_of(null())
               & type_of(_args.Text[3])=type_of('')
            || _tab:=($_args.Text[1])();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(_args.Text[2])
               || _body:='<pre>%1</pre>'[_tab.memo_txt(,1,_args.Text[3])]
               ?};
               _tab.cntx_pop()

:: z array (obecnie nie jest obsługiwane)
::            |? type_of(_a)=type_of(_array)
::            || _size:=obj_len(_a);
::               {! _i:=1.._size
::               |! html.fwrite(_a[_i])
::               !}
            ?};

::            _template:=fopen(_args.Template,'ur',1,,1);
            _template:=exec('template_file','#mailbox',_args.Template);

            {? _template.is_open()
            || {!
               |? _line:=_template.fread();
                  _next:=_line<>'\n';
                  {? _next
                  ||
::                   Podmiana tagów ====================================================================================
::                   [[MAIL_STYLE]] z pliku style.css albo z parametru 700015
                     {? _line*'[[MAIL_STYLE]]'>0
                     || _style:=exec('style','#email');
                        _line:=gsub(_line,'[[MAIL_STYLE]]',_style)
                     ?};
::                   [[MAIL_HEADLINE]] bezpośrednio temat maila
                     _line:=gsub(_line,'[[MAIL_HEADLINE]]',_args.Subject);
::                   [[MAIL_LOGO_H]] logo "górne"
                     {? _line*'[[MAIL_LOGO_H]]'>0
                     || {? exec('get','#params',700016,2)='T' || _blob:=exec('get_logo_h','#blob') || _blob:=0 ?};
                        {? _blob
                        || _pth:=pth_dir('test.emx')+.SEP;
                           _name:=gsub(exec('bl_info','#blob',_blob,'NAME'),' ','_');
                           exec('bl_get','#blob',_blob,_pth,_name)
                        || _name:=exec('head_logo','#email');
                           _pth:=pth_dir(_name)+.SEP
                        ?};
                        .EMB_TAB.NAME:=_name+'='+_pth+_name;
                        {? .EMB_TAB.add() || .EMB_CNT+=1 ?};
                        _mail_logo_h:='<a href=\"%1\" target=\"_blank\"><img src=\"cid:%2\" alt=\"%3\" style=\"border-width: 0\"></a>'
                           [  exec('firma_www','#email'),
                              _name,
                              exec('firma_name','#email')
                           ];
                        _line:=gsub(_line,'[[MAIL_LOGO_H]]',_mail_logo_h)
                     ?};
::                   [[MAIL_ICON_*]] ikona funkcyjna konkretna - zakładamy istnienie plików mail_icon_*.png
                     _t1:='[[MAIL_ICON_'; _pos1:=_line*_t1;
                     {? _pos1>0
                     || _t2:=(_pos1-1)-_line; _pos2:=_t2*']]';
                        _tag:=(_pos2+1)+_t2;
                        _name:='%1.png'[-(2-_tag-2)];
                        _pth:=pth_dir(_name)+.SEP;
                        .EMB_TAB.NAME:=_name+'='+_pth+_name;
                        {? .EMB_TAB.add() || .EMB_CNT+=1 ?};
                        _mail_icon:='<img src=\"cid:%1\" alt=\"Info\" style=\"display: block;\" />'[_name];
                        _line:=gsub(_line,_tag,_mail_icon)
                     ?};
::                   [[MAIL_BODY]] ciało wiadomości
                     {? _line*'[[MAIL_BODY]]'>0
                     || _body:=exec('body_tags','#email',_body);
                        _line:=gsub(_line,'[[MAIL_BODY]]',_body)
                     ?};
::                   [[MAIL_FOOTER]] z parametru 700013
                     _line:=gsub(_line,'[[MAIL_FOOTER]]',exec('footer','#email'));
::                   [[MAIL_LOGO]] logo
                     {? _line*'[[MAIL_LOGO]]'>0
                     || _name:='mail_logo_mini.png';
                        _pth:=pth_dir(_name)+.SEP;
                        .EMB_TAB.NAME:=_name+'='+_pth+_name;
                        {? .EMB_TAB.add() || .EMB_CNT+=1 ?};
                        _mail_logo:='<img src=\"cid:%1\" alt=\"Logo\" style=\"display: block;\" />'[_name];
                        _line:=gsub(_line,'[[MAIL_LOGO]]',_mail_logo)
                     ?};
::                   [[MAIL_LOGO_F]] logo "dolne"
                     {? _line*'[[MAIL_LOGO_F]]'>0
                     || {? exec('get','#params',700017,2)='T' || _blob:=exec('get_logo_f','#blob') || _blob:=0 ?};
                        {? _blob
                        || _pth:=pth_dir('test.emx')+.SEP;
                           _name:=gsub(exec('bl_info','#blob',_blob,'NAME'),' ','_');
                           exec('bl_get','#blob',_blob,_pth,_name)
                        || _name:=exec('erp_logo','#email');
                           _pth:=pth_dir(_name)+.SEP
                        ?};
                        .EMB_TAB.NAME:=_name+'='+_pth+_name;
                        {? .EMB_TAB.add() || .EMB_CNT+=1 ?};
                        _mail_logo_f:='<a href=\"%1\" target=\"_blank\"><img src=\"cid:%2\" alt=\"%3\" style=\"border-width: 0\"></a>'
                           [  {? _blob || exec('firma_www','#email') || exec('erp_www','#email') ?},
                              _name,
                              {? _blob || exec('firma_name','#email') || exec('erp_name','#email') ?}
                           ];
                        _line:=gsub(_line,'[[MAIL_LOGO_F]]',_mail_logo_f)
                     ?};
::                   [[MAIL_ATTACHMENTS]] miejsce na podgląd załączników - wykorzystywane tylko w ERP
                     _line:=gsub(_line,'[[MAIL_ATTACHMENTS]]','');
::                   ===================================================================================================

                     _html.fwrite(_line)
                  ?};
                  _next
               !};
               _template.fclose()
            ?};

            _html.fclose()
         ?}
      "),

      obj_meth('Html2File',"PRIVATE";"
         _old:=0;
         {? _old
         || .Html2FileOld(_a.Html)
         || .Html2FileNew(_a)
         ?}
      "),

      obj_meth('Send_a',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: Tworzy tablicę parametrów do zasilania metody Send
::----------------------------------------------------------------------------------------------------------------------
         _args:=obj_new(
:: adresat/adresaci
            'To',
:: do wiadomości
            'CC',
:: ukryte do wiadomości
            'BCC',
:: temat
            'Subject',
:: autor
            'From',
:: nadawca
            'Sender',
:: treść (wersja tekstowa)
            'Text',
:: treść (wersja html)
            'Html',
:: załącznik/załączniki
            'Attach',
:: potwierdzenie odbioru
            'Return',
:: odbiorca odpowiedzi
            'Reply_to',
:: identyfikator wiadomości
            'ID',
:: tagi do nagłówka
            'HEADTAGS',
:: wzorzec wiadomości
            'Template',
:: dane serwera (tablica nazwana/~~)
            'Server'
            );

:: Wartości domyślne
         _args.To:='';
         _args.CC:='';
         _args.BCC:='';
         _args.Subject:='';
         _args.From:='';
         _args.Sender:='';
         _args.Text:='';
         _args.Html:='';
         _args.Attach:='';
         _args.Return:=0;
         _args.Reply_to:='';
         _args.ID:='';
         _args.HEADTAGS:='';
         _args.Template:='template.htm';
         _args.Server:=~~;

:: Zwraca tablicę
         _args
      "),

      obj_meth('Send',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: Wersja metody używajaca programu alertpostman.jar -> mail.jar
::   WE: _a - wynik metody .Send_a() - argument w postaci tablicy
::----------------------------------------------------------------------------------------------------------------------
         {? var_pres('_a')<0 || _args:=.Send_a || _args:=_a ?};
         _array:=obj_new(1);

:: jak nie ma tematu, to data i godzina
         _sub:={? _args.Subject='' || $date()+' '+$time() || _args.Subject ?};

:: from:
         {? type_of(_args.From)=type_of('')
         || _from:=_args.From
         || _from:=''
         ?};

:: sender:
         {? type_of(_args.Sender)=type_of('')
         || _sender:=_args.Sender
         || _sender:=''
         ?};

:: reply-to:
         {? type_of(_args.Reply_to)=type_of('')
         || _reply:=_args.Reply_to
         || _reply:=''
         ?};

:: To (do kogo)
         {? type_of(_args.To)=type_of('')
         || _to:=obj_new(1);
            _to[1]:=_args.To
         |? type_of(_args.To)=type_of(SYSLOG)
         || _size:=_args.To.size();
            {? _size=0
            || _to:=~~
            || _to:=obj_new(_size);
               _it:=0;
               {? _args.To.first()
               || {!
                  |? _it+=1;
                     _to[_it]:=_args.To[2];
                     _args.To.next()
                  !}
               ?}
            ?}
         ?};

:: CC
         {? type_of(_args.CC)=type_of('')
         || _cc:=obj_new(1);
            _cc[1]:=_args.CC
         |? type_of(_args.CC)=type_of(SYSLOG)
         || _size:=_args.CC.size();
            {? _size=0
            || _cc:=~~
            || _cc:=obj_new(_size);
               _it:=0;
               {? _args.CC.first()
               || {!
                  |? _it+=1;
                     _cc[_it]:=_args.CC[2];
                     _args.CC.next()
                  !}
               ?}
            ?}
         ?};

:: BCC
         {? type_of(_args.BCC)=type_of('')
         || _bcc:=obj_new(1);
            _bcc[1]:=_args.BCC
         |? type_of(_args.BCC)=type_of(SYSLOG)
         || _size:=_args.BCC.size();
            {? _size=0
            || _bcc:=~~
            || _bcc:=obj_new(_size);
               _it:=0;
               {? _args.BCC.first()
               || {!
                  |? _it+=1;
                     _bcc[_it]:=_args.BCC[2];
                     _args.BCC.next()
                  !}
               ?}
            ?}
         ?};

:: wysyłanie potwierdzenia odbioru
         _return:={? _args.Return || '1' || '0' ?};

:: log javy zawsze, log sesji SMTP zależnie od .DEBUG
         {? .LOG_JAVA='M'
         || _logfjle:='majl'+(2-(date()$0)-2)+'.log'
         |? .LOG_JAVA='D'
         || _logfjle:='mj'+(2-(date()$0))+'.log'
         || _logfjle:='majllog.log'
         ?};
         _logjava:=pth_dir(_logfjle)+.SEP+_logfjle;
         {? .DEBUG
         || {? .LOG_SESS='M'
            || _logfile:='mail'+(2-(date()$0)-2)+'.log'
            |? .LOG_SESS='D'
            || _logfile:='ml'+(2-(date()$0))+'.log'
            |? .LOG_SESS='I'
            || _logfile:='mx'+_args.ID+'.log'
            || _logfile:='maillog.log'
            ?};
            _debug:='1';
            _logsess:=pth_dir(_logfile)+.SEP+_logfile
         || _debug:='0';
            _logsess:=''
         ?};

:: Jeżeli brak treści wiadomości, to ustawione .EMPTY
         {? ( (type_of(_args.Text)=type_of('') & _args.Text='') |
              (type_of(_args.Text)=type_of(SYSLOG) & ~_args.Text.first()) |
              (type_of(_args.Text)=type_of(_array) & exec('memo_empty','#table',_args.Text[1],_args.Text[2],_args.Text[3]))
            )
            &
            ( (type_of(_args.Html)=type_of('') & _args.Html='') |
              (type_of(_args.Html)=type_of(SYSLOG) & ~_args.Html.first()) |
              (type_of(_args.Html)=type_of(_array) & exec('memo_empty','#table',_args.Html[1],_args.Html[2],_args.Html[3]))
            )
::            &
::            ( (type_of(_args.Attach)=type_of('') & _args.Attach='') |
::              (type_of(_args.Attach)=type_of(SYSLOG) & ~_args.Attach.first())
::            )
         || .EMPTY:=1
         || .EMPTY:=0
         ?};

:: Ilość załączników osadzonych i dołączonych, czyszczenie tabel roboczych
         .ATT_CNT:=0; .ATT_TAB.prefix(); {? .ATT_TAB.first() || {! |? .ATT_TAB.del() !} ?};
         .EMB_CNT:=0; .EMB_TAB.prefix(); {? .EMB_TAB.first() || {! |? .EMB_TAB.del() !} ?};


         {? .EMPTY
         || _body:='';
            _html:='';
::            _att:=obj_new(1); _att[1]:='';
::            _emb:=obj_new(1); _emb[1]:='';
            ~~
         ||
:: Tekst do pliku... .BODY
            .Body2File(_args.Text);
            _body:=pth_dir(.BODY)+.SEP+.BODY;

:: HTML do pliku... .HTML
            {? {? type_of(_args.Html)=type_of('')
               || _args.Html<>''
               |? type_of(_args.Html)=type_of(SYSLOG)
               || _args.Html.first()
               |? type_of(_args.Html)=type_of(_array)
               || ~exec('memo_empty','#table',_args.Html[1],_args.Html[2],_args.Html[3])
               || 1
               ?}
            || .Html2File(_args)
            |? {? type_of(_args.Text)=type_of('')
               || _args.Text<>''
               |? type_of(_args.Text)=type_of(SYSLOG)
               || _args.Text.first()
               |? type_of(_args.Text)=type_of(_array)
               || ~exec('memo_empty','#table',_args.Text[1],_args.Text[2],_args.Text[3])
               || 1
               ?}
            ||
::               .Txt2Html()
               .Html2File(_args)
            |? type_of(_args.Attach)=type_of('') & _args.Attach=''
            ||
::               .Txt2Html()
               .Html2File(_args)
            || .NullHtml()
            ?};
            _html:=pth_dir(.HTML)+.SEP+.HTML
         ?};

:: Logo górne i dolne - wyłączone (zmiana mechanizmu) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
::            {? exec('get','#params',700016,2)='T' || _head_logo_blob:=exec('get_logo_h','#blob') || _head_logo_blob:=0 ?};
::            _head_logo_name:={? _head_logo_blob || exec('bl_info','#blob',_head_logo_blob,'NAME') || '' ?};
::            {? _head_logo_name='' || _head_logo_name:=exec('head_logo','#email') ?};
::            {? exec('get','#params',700017,2)='T' || _foot_logo_blob:=exec('get_logo_f','#blob') || _foot_logo_blob:=0 ?};
::            _foot_logo_name:={? _foot_logo_blob || exec('bl_info','#blob',_foot_logo_blob,'NAME') || '' ?};
::            {? _foot_logo_name='' || _foot_logo_name:=exec('erp_logo','#email') ?};

:: osadzone załączniki standardowe - logo w nagłówku i stopce wiadomości - wyłączone (zmiana mechanizmu) !!!!!!!!!!!!!!!
::            {? _head_logo_name<>'' || _emb_cnt+=1 ?};
::            {? _foot_logo_name<>'' || _emb_cnt+=1 ?};

:: załączniki - listy plików
         {? type_of(_args.Attach)=type_of('') & _args.Attach=''
         || _att:=~~;
            {? .EMB_CNT=0 || _emb:=~~ || _emb:=obj_new(.EMB_CNT) ?};
            _emb_it:=0
         |? type_of(_args.Attach)=type_of('') & _args.Attach<>''
         || _att:=obj_new(1);
            _att[1]:=_args.Attach+'='+pth_dir(_args.Attach)+.SEP+_args.Attach;
            {? .EMB_CNT=0 || _emb:=~~ || _emb:=obj_new(.EMB_CNT) ?};
            _emb_it:=0
         |? type_of(_args.Attach)=type_of(SYSLOG)
         || {? _args.Attach.first()
            || {!
               |? {? _args.Attach[2]='E' || .EMB_CNT+=1 || .ATT_CNT+=1 ?};
                  _args.Attach.next()
               !}
            ?};

            {? .ATT_CNT=0 || _att:=~~ || _att:=obj_new(.ATT_CNT) ?};
            {? .EMB_CNT=0 || _emb:=~~ || _emb:=obj_new(.EMB_CNT) ?};

            _emb_it:=0;
            _att_it:=0;

            {? _args.Attach.first()
            || {!
               |? {? _args.Attach[2]='E'
                  || _emb_it+=1;
                     _emb[_emb_it]:=_args.Attach[3]+'='+_args.Attach[1]
                  || _att_it+=1;
                     _att[_att_it]:=_args.Attach[3]+'='+_args.Attach[1]
                  ?};
                  _args.Attach.next()
               !}
            ?}
         ?};

::          Załączniki osadzone, które się uzbierały podczas zasilania treści (w NAME musi być xxx=xxx)
         {? .EMB_TAB.size()>0
         || {? .EMB_TAB.first()
            || {!
               |? _emb_it+=1;
                  _emb[_emb_it]:=.EMB_TAB.NAME;
                  .EMB_TAB.next()
               !}
            ?}
         ?};

::          Logo licenjobiorcy - wyłączone (zmiana mechanizmu) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
::            {? _head_logo_name<>''
::            || {? _head_logo_blob
::               || _pth:=pth_dir('test.emx')+.SEP;
::                  {? exec('bl_get','#blob',_head_logo_blob,_pth)
::                  || _emb_it+=1;
::                     _emb[_emb_it]:=_head_logo_name+'='+_pth+_head_logo_name
::                  ?}
::               || _emb_it+=1;
::                  _pth:=pth_dir(_head_logo_name)+.SEP;
::                  _emb[_emb_it]:=_head_logo_name+'='+_pth+_head_logo_name
::               ?}
::            ?};
::          Logo produktu - wyłączone (zmiana mechanizmu) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
::            {? _foot_logo_name<>''
::            || {? _foot_logo_blob
::               || _pth:=pth_dir('test.emx')+.SEP;
::                  {? exec('bl_get','#blob',_foot_logo_blob,_pth)
::                  || _emb_it+=1;
::                     _emb[_emb_it]:=_foot_logo_name+'='+_pth+_foot_logo_name
::                  ?}
::               || _emb_it+=1;
::                  _pth:=pth_dir(_foot_logo_name)+.SEP;
::                  _emb[_emb_it]:=_foot_logo_name+'='+_pth+_foot_logo_name
::               ?}
::            ?}
::            ~~
::         ?};

::       Serwer - podany w parametrach wywołania
::              - dobierany wg adresu nadawcy, jak brak, to autora
         {? type_of(_args.Server)=exec('type_of_array','#var')
         || .smtp_srv(_args.Server)
         || .smtp_srv({? _sender='' || _from || _sender ?})
         ?};

         .TRUSTSRV:=exec('get','#params',700008,2);

         _head_tags:=spli_str(_args.HEADTAGS,'\n');

         .RESULT:=exec('send','#email',
            _to,_sub,_body,_html,_sender,_att,_emb,_cc,_bcc,_return,_reply,_debug,_logsess,_logjava,
            .SMTPSERV,$.SMTPPORT,$.SMTPTIMO,.SMTPAUTH,.SMTPUSER,.SMTPPASS,.SMTPSSL,.SMTPTLS,_from,.TRUSTSRV,_head_tags
         );
         .RESULT
      "),

      obj_meth('Result',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Zwraca opisowo wynik .Send na podstawie zachowanego .RESULT
::----------------------------------------------------------------------------------------------------------------------
::         $.RESULT+': '+
         exec('exit_code','#email',.RESULT)
      "),

      obj_meth('smtp_srv',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Zwraca dane serwera SMTP
::----------------------------------------------------------------------------------------------------------------------
         _server:=_a;
         .SMTPSERV:=_server.ADDRESS;
         .SMTPPORT:=_server.PORT;
         .SMTPTIMO:=_server.TIMEOUT;
         .SMTPAUTH:=_server.AUTH;
         .SMTPUSER:=_server.USER;
         .SMTPPASS:=_server.PASS;
         .SMTPSSL:=_server.SSL;
         .SMTPTLS:=_server.SSL
      ",exec('type_of_array','#var')),

      obj_virt('smtp_srv',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Zwraca dane serwera SMTP wg podanego adresu nadawcy (wymaga przykrycia implementacją)
::   WE: _a - adres nadawcy
::----------------------------------------------------------------------------------------------------------------------
         .smtp_srv(exec('server','#email'))
      ",type_of(''))
   )
?}


\exit_code
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Obsługa kodów wyjścia programu alertpostman.jar
::   WE: _a - numer komunikatu
::   WY: opis
::  OLD: \exit_code/jsmtp.fml
::----------------------------------------------------------------------------------------------------------------------
:: ALL_FINE
{? _a=0  || 'Operacja zakończona sukcesem.'

:: ERRORS_PRESENT
|? _a=1  || 'Wystąpiły błędy (szczegóły w raportach).'

:: MESSAGE_NO_FROM_ADDRESS
|? _a=3  || 'Brak adresu autora (szczegóły w raportach).'

:: FILE_CONFIG_INVALID_PATHNAME
|? _a=10 || 'Błędna nazwa pliku konfiguracyjnego.'

:: FILE_CONFIG_IO_EXCEPTION
|? _a=11 || 'Błąd wejścia/wyjścia pliku konfiguracyjnego.'

:: FILE_LOG_SECURITY_EXCEPTION
|? _a=20 || 'Błąd dostępu do pliku raportu.'

:: FILE_LOG_IO_EXCEPTION
|? _a=21 || 'Błąd wejścia/wyjścia pliku raportu.'

:: FILE_LOG_SESSION_EMPTY_NAME
|? _a=22 || 'Brak nazwy pliku raportu wysyłania wiadomości.'

:: FILE_LOG_JAVAMAIL_EMPTY_NAME
|? _a=23 || 'Brak nazwy pliku raportu przetwarzania wiadomości.'

:: FILE_CONFIG_CREATE_ERROR
|? _a=-3 || 'Błąd generowania pliku konfiguracyjnego.'

:: SMTP_ADRESS_EMPTY
|? _a=-4 || 'Brak adresu serwera SMTP.'

:: ERROR
         || 'Nieznany błąd.'
?}


\send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Uruchamia wysyłkę poczty
::   WE: _a - adresat/adresaci (tablica adresów) albo ~~
::       _b - temat
::       _c - treść (wersja tekstowa)
::       _d - treść (wersja html)
::       _e - nadawca (Sender:)
::       _f - pliki załączone (tablica nazw dyskowych) albo ~~
::       _g - pliki osadzone (tablica nazw dyskowych) albo ~~
::       _h - do wiadomości (tablica adresów) albo ~~
::       _i - ukryte do wiadomości (tablica adresów) albo ~~
::       _j - potwierdzenie odbioru
::       _k - odpowiedz do (Reply-To:)
::       _l - debug
::       _m - plik log (sesja SMTP)
::       _n - plik log (java)
::       _o - serwer
::       _p - port
::       _q - timeout
::       _r - autoryzacja
::       _s - nazwa użytkownika
::       _t - hasło użytkownika
::       _u - SSL
::       _v - TLS
::       _w - autor (From:)
::       _x - lista zaufanych serwerów
::       _y - lista tagów dodawanych do headera wiadomości (tablica)
::  OLD: \alert_send/skid_jar.fml
::----------------------------------------------------------------------------------------------------------------------
:: Wstępna walidacja
{? var_pres('_o')<>type_of('') | _o='' || return(-4) ?};

_cfg:=exec('get_cfg','#xml','alertpostman','org.mcl.czest.alert.core.app.Config',0,0);
_array:=obj_new(1);
{? var_pres('_a')=type_of('')     || _cfg.add_param('recipientsTO','string',_a,1)
|? var_pres('_a')=type_of(_array) || _cfg.add_param('recipientsTO','string',_a,1,1)
?};
_cfg.add_param('subject','string',_b,1);
_cfg.add_param('filenameBody','string',_c);
_cfg.add_param('filenameHtml','string',_d);
_cfg.add_param('sender','string',_e,1);
{? var_pres('_f')=type_of('')     || _cfg.add_param('filenamesAtt','string',_f,1)
|? var_pres('_f')=type_of(_array) || _cfg.add_param('filenamesAtt','string',_f,1,1)
?};
{? var_pres('_g')=type_of('')     || _cfg.add_param('imagenamesEmb','string',_g,1)
|? var_pres('_g')=type_of(_array) || _cfg.add_param('imagenamesEmb','string',_g,1,1)
?};
{? var_pres('_h')=type_of('')     || _cfg.add_param('recipientsCC','string',_h,1)
|? var_pres('_h')=type_of(_array) || _cfg.add_param('recipientsCC','string',_h,1,1)
?};
{? var_pres('_i')=type_of('')     || _cfg.add_param('recipientsBCC','string',_i,1)
|? var_pres('_i')=type_of(_array) || _cfg.add_param('recipientsBCC','string',_i,1,1)
?};
_cfg.add_param('returnConfirmation','int',_j);
_cfg.add_param('replyTo','string',_k,1);
_cfg.add_param('debugMode','int',_l);
_cfg.add_param('filenameLog','string',_m);
_cfg.add_param('filenameLogJava','string',_n);
_cfg.add_param('host','string',_o);
_cfg.add_param('port','int',_p);
_cfg.add_param('timeoutInSeconds','int',_q);
_cfg.add_param('auth','int',_r);
_cfg.add_param('authUser','string',_s);
_cfg.add_param('authPass','string',_t,1);
_cfg.add_param('ssl','int',_u);
_cfg.add_param('tls','int',_v);
_cfg.add_param('from','string',_w,1);
_cfg.add_param('trustedServers','string',_x);

{? var_pres('_y')=type_of('')     || _cfg.add_param('headTags','string',_y,1)
|? var_pres('_y')=type_of(_array) || _cfg.add_param('headTags','string',_y,1,1)
?};

_cfg.add_param('mailer','string','%1 server, %2'[exec('nazwa','#system'),exec('www','#system')]);
_cfg.add_param('charset','string','utf-8');
_cfg.add_file('alertpostman.jar');
_cfg.add_file('jakarta.activation.jar');
_cfg.add_file('javax.mail.jar');
{? _cfg.getXML()>0
|| _res:=_cfg.execute()
|| _res:=-3
?};
obj_del(_cfg);
_res


\mail_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [8.60]
:: OPIS: Sprawdza, czy podany string poprawnie definiuje e-mail
::       Dozwolone formaty:
::         'jakis.adres@serwer.domena'
::         'Dowolny opis <jakis.adres@serwer.domena>'
::
::   WE: _a - badany STRING
::   WY: 0/1 - niepoprawny, poprawny zapis
::  OLD: \mail_ok/skid_eml.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='' || return(1) ?};

:: obcięcie spacji, zamiana na małe litery
_adres:=-|_a;

:: wyłuskanie adresu e-mail między nawiasami <>
_b1:=_adres*'<';
_b2:=_b1+((_b1-_adres)*'>');
:: za kończącym '>' nie może nic być
{? _b2>0 & _b2<+_adres || return(0) ?};
{? _b1<_b2 & _b1>0 || _adres:=_b1-((_b2-1)+_adres) ?};

_zwrot:={? +_adres<6 | _adres*'@'=0 | _adres*'.'=0 | 1+_adres='@' | _adres+1='@' |
           1+_adres='.' | _adres+1='.' |
           ((_adres*'@'-_adres)*'@')<>0 |
           (1+(_adres*'@'-_adres))='.' | (1+(_adres*'@'-2-_adres))='.' |
           ((_adres*'@'-_adres)*'.')=0
        || 0
        || _ok:=1;
::         rozdzielenie części nazwa@domena
           _nazwa:=((_adres*'@')-1)+_adres;
           _domena:=(_adres*'@')-_adres;
::         walidacja nazwy
           {! _it:=1..+_nazwa
           |! _znak:=(1+((_it-1)-_nazwa));
              {? (exec('get','#params',700019)+'-+.0123456789abcdefghijklmnopqrstuwvxyz_')*_znak=0
              || _ok:=0
              ?}
           !};
::         walidacja domeny
           {! _it:=1..+_domena
           |! _znak:=(1+((_it-1)-_domena));
              {? '-.0123456789abcdefghijklmnopqrstuwvxyz'*_znak=0
              || _ok:=0
              ?}
           !};
           _ok
        ?};
_zwrot


\trustedsrv_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza, czy podany string poprawnie definiuje listę zaufanych serwerów
::       Dozwolone formaty:
::         '*'
::         'serwer1.domena1 server2.domena2'
::
::   WE: _a - badany STRING
::   WY: 0/1 - niepoprawny, poprawny zapis
::  OLD: \trustedsrv_ok/skid_eml.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='' || return(1) ?};
{? _a='*' || return(1) ?};

_list:=_a;

_res:=1;
{!
|? _pos:=_list*' ';
   {? _pos=0
   || _adres:=_list; _list:=''
   || _adres:=(_pos-1)+_list; _list:=_pos-_list
   ?};
   _res:=exec('srv_ok','#email',_adres);
   _res & _list<>''
!};
_res


\srv_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza, czy podany string poprawnie definiuje adres serwera
::   WE: _a - adres IP albo internetowy
::  OLD: \srv_ok/skid_eml.fml
::----------------------------------------------------------------------------------------------------------------------
_adres:=-|_a;
_ok:=1;
{! _it:=1..+_adres
|! _znak:=(1+(_it-_adres));
   {? '-.0123456789abcdefghijklmnopqrstuwvxyz_'*_znak=0
   || _ok:=0
   ?}
!};
_ok


\mail_list_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy podany tekst poprawnie definiuje listę adresów e-mail
::       Dozwolone formaty dla pojedynczego adresu - walidacja za pomocą formuły exec('mail_ok','#email'):
::         'jakis.adres@serwer.domena'
::         'Dowolny opis <jakis.adres@serwer.domena>'
::
::   WE: _a - badany TEXT
::   WY: 0/1 - niepoprawny, poprawny zapis
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_tab:=exec('mail_from_list','#email',_a);
::exec('select','#table',_tab);
{? _tab.first()
|| {!
   |? _ok:=exec('mail_ok','#email',_tab.ADRES);
      _ok & _tab.next()
   !}
?};
_ok


\mail_from_list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyciąga z listy adresy e-mail w postaci tabeli
::   WE: _a - TEXT
::   WY: tab_tmp()
::----------------------------------------------------------------------------------------------------------------------
_text:=form(_a);
_tab:=tab_tmp(1,'ADRES','STRING[255]','Adres e-mail');

:: Separatory pól:
_delimeters:=obj_new(4);
_delimeters[1]:=',';
_delimeters[2]:=';';
_delimeters[3]:='\t';
_delimeters[4]:='\n';

{? +_text
|| {!
   |? _pos:=0;
      {! _ii:=1..4
      |! _pos_ii:=_text*_delimeters[_ii];
         {? _pos_ii>0 || {? _pos=0 || _pos:=_pos_ii |? _pos_ii<_pos || _pos:=_pos_ii ?} ?}
      !};

      {? _pos>0
      || _tab.ADRES:=gsub((_pos-1)+_text,%13,''); {? _tab.ADRES<>'' || _tab.add() ?}; _text:=form(_pos-_text)
      || _tab.ADRES:=gsub(_text,%13,''); {? _tab.ADRES<>'' || _tab.add() ?}
      ?};

      _pos>0
   !}
?};
_tab


\mail_from_lists
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Wyciąga z listy adresy e-mail w postaci tabeli
::   WE: _a - DO
::       _b - DW
::       _c - UDW
::   WY: tab_tmp()
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('')
|| _a:=''
?};
{? var_pres('_b')<>type_of('')
|| _b:=''
?};
{? var_pres('_c')<>type_of('')
|| _c:=''
?};

_tab:=tab_tmp(1,'ADRES','STRING[255]','Adres e-mail',
                'TYP','STRING[1]','Typ');

:: Separatory pól:
_delimeters:=obj_new(4);
_delimeters[1]:=',';
_delimeters[2]:=';';
_delimeters[3]:='\t';
_delimeters[4]:='\n';

{! _nn:=1..3
|! {? _nn=2
   || _text:=form(_b);
      _tp:='C'
   |? _nn=3
   || _text:=form(_c);
      _tp:='B'
   || _text:=form(_a);
      _tp:='T'
   ?};
   {? +_text
   || {!
      |? _pos:=0;
         {! _ii:=1..4
         |! _pos_ii:=_text*_delimeters[_ii];
            {? _pos_ii>0 || {? _pos=0 || _pos:=_pos_ii |? _pos_ii<_pos || _pos:=_pos_ii ?} ?}
         !};

         {? _pos>0
         || _tab.ADRES:=gsub((_pos-1)+_text,%13,'');
            {? _tab.ADRES<>''
            || _tab.TYP:=_tp;
               _tab.add()
            ?};
            _text:=form(_pos-_text)
         || _tab.ADRES:=gsub(_text,%13,'');
            {? _tab.ADRES<>''
            || _tab.TYP:=_tp;
               _tab.add()
            ?}
         ?};

         _pos>0
      !}
   ?}
!};
_tab


\firma_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca parametr - adres strony www licencjobiorcy (do umieszczenia w nagłówku wiadomości)
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('http','#email',exec('get','#params',700009,2));
{? _res=''
|| _res:=exec('www','#system')
?};
_res


\firma_name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca parametr - nazwę licencjobiorcy (do umieszczenia w nagłówku wiadomości)
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('get','#params',700010,2);
{? _res=''
|| _res:=exec('producent','#system')
?};
_res


\head_logo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca nazwę systemowego logo (do umieszczenia w nagłówku wiadomości)
::----------------------------------------------------------------------------------------------------------------------
{? exec('get','#params',700016,2)<>'T' || 'blank.png' || 'mail_logo.png' ?}


\foot_logo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca nazwę systemowego logo (do umieszczenia w stopce wiadomości)
::----------------------------------------------------------------------------------------------------------------------
{? exec('get','#params',700017,2)<>'T' || 'blank.png' || 'mail_powered.png' ?}


\erp_www
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca parametr - adres strony www produktu (do umieszczenia w stopce wiadomości)
::----------------------------------------------------------------------------------------------------------------------
'http://www.macrologic.pl/'


\erp_name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca parametr - nazwę produktu (do umieszczenia w stopce wiadomości)
::----------------------------------------------------------------------------------------------------------------------
'Powered by %1'[exec('nazwa','#system')]


\erp_logo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca parametr - plik logo produktu (do umieszczenia w stopce wiadomości)
::----------------------------------------------------------------------------------------------------------------------
exec('foot_logo','#email')


\style
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca zawartość stylu
::   WY: TEXT
::----------------------------------------------------------------------------------------------------------------------
_style:=exec('get','#params',700015,2);
{? _style=''
|| _style:=exec('style_standard','#email')
?};
_style


\style_standard
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca zawartość pliku style.css
::----------------------------------------------------------------------------------------------------------------------
_style:='';
_file:=fopen('style.css','ur',1,,1);
{? _file.is_open()
|| {!
   |? _line:=_file.fread();
      _next:=_line<>'\n';
      {? _next
      || _style+=_line+'\n'
      ?};
      _next
   !};
   _file.fclose()
?};
_style


\http
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Modyfikuje adres "www" - jeśli nie ma wskazanego protokołu, to dodaje http://
::   WE: _a - adres
::   WY: zmodyfikowany adres
::----------------------------------------------------------------------------------------------------------------------
_adres:=_a;
{? _adres<>'' & _adres*'://'=0 || _adres:='http://'+_adres ?};
_adres


\pre_sub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Zwraca napis doklejany na początku POCZTA.SUB
::   WY: napis
::  OLD: \pre_sub/skid_eml.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';
:: czy doklejać nazwę firmy
{? exec('get','#params',700012,2)='T'
|| exec('czytaj','#stalesys',,XINFO,'SKROT');
   _result+='['+XINFO.SKROT+'] '
?};
_result


\footer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Zwraca treść stopki wiadomości e-mail
::----------------------------------------------------------------------------------------------------------------------
exec('get','#params',700013,2)


\body_tags
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zmienia w ciele wiadomości znaczniki na odpowiadające im elementy
::   WE: _a - body [STRING]
::   WY: body [STRING]
::----------------------------------------------------------------------------------------------------------------------
_body:=_a;
:: Jeżeli body wiadomości zawiera od nowa deklarację dokumentu to ją usuwam, bo będzie i tak opakowana całą kompozycją maila
:: a ta dodatkowa deklaracja popsuje wyświetlanie na niektórych czytnikach
{? _body*'<!DOCTYPE html>'>0
|| _body:=gsub(_body,'<!DOCTYPE html>','');
   _body:=form(_body);
   ~~
?};
{? _body*'<html>'>0
|| _body:=gsub(_body,'<html>','');
   _body:=form(_body);
   ~~
?};
{? _body*'</html>'>0
|| _body:=gsub(_body,'</html>','');
   _body:=form(_body);
   ~~
?};
{? _body*'<head>'>0
|| _body:=gsub(_body,'<head>','');
   _body:=form(_body);
   ~~
?};
{? _body*'</head>'>0
|| _body:=gsub(_body,'</head>','');
   _body:=form(_body);
   ~~
?};
{? _body*'<body>'>0
|| _body:=gsub(_body,'<body>','');
   _body:=form(_body);
   ~~
?};
{? _body*'</body>'>0
|| _body:=gsub(_body,'</body>','');
   _body:=form(_body);
   ~~
?};

:: Limit objętości tekstu przed podmianą tagów
_body_size_limit:=400000;

:: Podmiana tagów

::=============================================
:: Wzorce treści parametryzowane:
::=============================================
:: [[BODY_BUTTON(link,tytuł,nazwa)]] przycisk (może wystąpić wielokrotnie)
::=============================================
_filename:='button.htm';
{? _body*'[[BODY_BUTTON('>0 & fexists(_filename,1)
|| {!
   |? _t1:='[[BODY_BUTTON(';
      _pos1:=_body*_t1;
      {? _pos1>0
      || _t2:=(_pos1-1)-_body; _pos2:=_t2*')]]';
         _tag:=(_pos2+2)+_t2;
         _args:=spli_str(14-_tag-3,',');
         _pat:=obj_new(3); _pat[1]:='[[1]]'; _pat[2]:='[[2]]'; _pat[3]:='[[3]]';
         {? obj_len(_args)=obj_len(_pat)
         || _button_file:=fopen(_filename,'ur',1,,1);
            _button:='';
            {? _button_file.is_open()
            || {!
               |? _line:=_button_file.fread();
                  _next:=_line<>'\n';
                  {? _next
                  || _line:=gsub(_line,_pat,_args);
                     _button+=_line
                  ?};
                  _next
               !};
               {? +_body<=_body_size_limit || _body:=gsub(_body,_tag,_button) ?}
            ?};
            obj_del(_button_file)
         || _body+='<br>Błąd interpretacji wzorca <b>BODY_BUTTON</b>.'; _pos1:=0
         ?};
         obj_del(_args);
         obj_del(_pat)
      ?};
      _pos1>0
   !}
?};

::=============================================
:: Wzorce treści parametryzowane:
::=============================================
:: [[BODY_BUTTON2(link1,tytuł1,nazwa1,link2,tytuł2,nazwa2)]] przycisk z dwoma linkami (może wystąpić wielokrotnie)
::=============================================
_filename:='button2.htm';
{? _body*'[[BODY_BUTTON2('>0 & fexists(_filename,1)
|| {!
   |? _t1:='[[BODY_BUTTON2(';
      _pos1:=_body*_t1;
      {? _pos1>0
      || _t2:=(_pos1-1)-_body; _pos2:=_t2*')]]';
         _tag:=(_pos2+2)+_t2;
         _args:=spli_str(15-_tag-3,',');
         _pat:=obj_new(6);
         _pat[1]:='[[1]]'; _pat[2]:='[[2]]'; _pat[3]:='[[3]]'; _pat[4]:='[[4]]'; _pat[5]:='[[5]]'; _pat[6]:='[[6]]';
         {? obj_len(_args)=obj_len(_pat)
         || _button_file:=fopen(_filename,'ur',1,,1);
            _button:='';
            {? _button_file.is_open()
            || {!
               |? _line:=_button_file.fread();
                  _next:=_line<>'\n';
                  {? _next
                  || _line:=gsub(_line,_pat,_args);
                     _button+=_line
                  ?};
                  _next
               !};
               {? +_body<=_body_size_limit || _body:=gsub(_body,_tag,_button) ?}
            ?};
            obj_del(_button_file)
         || _body+='<br>Błąd interpretacji wzorca <b>BODY_BUTTON2</b>'; _pos1:=0
         ?};
         obj_del(_args);
         obj_del(_pat)
      ?};
      _pos1>0
   !}
?};

_body_size_limit:=250000;

::=============================================
:: Wzorce treści nieparametryzowane:
::=============================================
:: [[STYLE_TABLE]] styl tabeli
:: [[STYLE_TABLE_TR]] styl wiersza tabeli
:: [[STYLE_TABLE_TH]] styl celi nagłówka tabeli
:: [[STYLE_TABLE_TD]] styl celi tabeli
::=============================================
_tags:=spli_str('STYLE_TABLE;STYLE_TABLE_TR;STYLE_TABLE_TH;STYLE_TABLE_TD',';');

{! _it:=1..obj_len(_tags)
|!
   {? _tag:='[[%1]]'[_tags[_it]]; _body*_tag>0
   || _style_table_file:=fopen('%1.htm'[-_tags[_it]],'ur',1,,1);
      _style_table:='';
      {? _style_table_file.is_open()
      || {!
         |? _line:=_style_table_file.fread();
            _next:=_line<>'\n';
            {? _next
            || _style_table+=_line
            ?};
            _next
         !};
         {? +_body<=_body_size_limit || _body:=gsub(_body,_tag,_style_table) ?}
      ?};
      obj_del(_style_table_file)
   ?}
!};

_body


\phone_nr_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [22.26]
:: OPIS: Sprawdza, czy podany string poprawnie definiuje numer telefonu
::   WE: _a - badany STRING
::   WY: 0/1 - niepoprawny, poprawny zapis
::----------------------------------------------------------------------------------------------------------------------
{? _a='' | #_a > 100000000
|| 1
|| 0
?}


\server
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Obiekt z parametrami serwera SMTP
::----------------------------------------------------------------------------------------------------------------------
_server:=obj_new('ADDRESS','PORT','TIMEOUT','AUTH','USER','PASS','SSL','TLS');
:: Wartości domyślne
_server.ADDRESS:='mail.ebi.pl';
_server.PORT:=25;
_server.TIMEOUT:=-1;
_server.AUTH:='0';
_server.USER:='';
_server.PASS:='';
_server.SSL:='0';
_server.TLS:='0';
_server

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 957f0f94e6fe2cbd029e9057f3d4993bc17cf0bb89c52484470cd5e733fd06dbf2b05357fd8fe25124e88ccf03dcae2a23b030324a045c3d5eec9262ec1251823bcc5154ca64a42f265ea1a39742a64226d118ec09cd28dc70dd88fd65d548427ea94e7e8908aa3c7a669a909fe3fa2411d34f45486634a6e93c9df3db4df73e
