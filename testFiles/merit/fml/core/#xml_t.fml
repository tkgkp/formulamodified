:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #xml_t.fml
:: Utworzony: 09.04.2019
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Definicja klasy wykorzystywanej do tworzenia plików XML. Kolejne elementy są zapisywane w wewnętrznej
::            tabeli tymczasowej o strukturze związanej z funkcją xml_tparse(), aby na końcu, dzięki metodzie
::            xml_twrite(), wynik zapisać do pliku w formacie XML.
::
::            Klasa korzysta z obiektu FUN klasy FUN_CLASS.
::======================================================================================================================


\xml_t_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Definicja klasy XML_T.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Przy powtórnym wywołaniu deklaracji klasy XML_T - zakończ.
{? var_pres('XML_T',@.CLASS)>0
|| return()
?};

:: Deklaracje klas wykorzystywanych przez obiekty klasy XML_T:
exec('FUN','#object');

obj_decl('XML_T',


:: Pola prywatne -------------------------------------------------------------------------------------------------------


:: Uchwyt tabeli z danymi.
   obj_fld('XML',~~),


:: Uchwyt tabeli z informacjami o przestrzeniach nazw.
   obj_fld('NS',~~),


:: Numer rekordu ostatnio dodanego rekordu typu E.
   obj_fld('lastE',-1),


:: Metody prywatne -----------------------------------------------------------------------------------------------------


   obj_meth('add',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Główna metoda dodająca element dowolnego typu (E,N,A).
::   WE: _a [STRING] - Nazwa metody wywołującej.
::       _b [STRING] - Nazwa elementu.
::       _c [STRING] - Wartość elementu.
::       _d [NUMBER] - Numer rekordu rodzica.
::       _e [STRING] - Przestrzeń nazw elementu (kod).
::   WY: Numer dodanego rekordu lub kod błędu (ujemny).
::----------------------------------------------------------------------------------------------------------------------
   "  _meth:=_a;
      _name:=_b;
      _val:=_c;
      _parent:=_d;
      _nss:=_e;
      _type:=1+(3-_meth);

      {? _parent & ~(.XML.seek(_parent,) & .XML.TYPE='E')
      || return(.error(_meth,'#3'))
      |? .XML.first() & _parent=0
      || return(.error(_meth,'#4',_type,_name))
      ?};

      _index:=0;
      {? .XML.first()
      || .XML.prefix(_parent);
         _index:={? .XML.last() || .XML.INDEX ?}+1;
         .XML.prefix()
      ?};

      _nsn:={? _type<>'N' & _nss<>'' & .NS.find_key(1,_nss,) || .NS.RECNO ?};

      .XML.blank();
      .XML.TREE:=_parent;
      .XML.TYPE:=_type;
      .XML.NAMESPC:=_nsn;
      .XML.NAME:=_name;
      .XML.NTRUNC:={? .XML.NAME=_name || 'N' || 'T' ?};
      .XML.VAL:=_val;
      .XML.VTRUNC:={? .XML.VAL=_val || 'N' || 'T' ?};
      .XML.INDEX:=_index;
      {? .XML.add()
      || _ret:=#.XML.ref();

         {? _type='E'
         || .lastE:=_ret
         ?};

         {? .XML.VTRUNC='T'
         || _fh:=fopen(null(),'Uw!',,,1);
            {? _fh.is_open()
            || _fh.fwrite(_val);
               .XML.bl_put('BVAL',_fh,,,'value.txt');
               _fh.fclose()
            ?}
         ?};

         {? _type='E' & _nss<>'' & _nsn=0
::          Zapamiętaj rekord do uzupełnienia.
         || .NS.blank();
            .NS.TYPE:=0;
            .NS.CODE:=_nss;
            .NS.RECNO:=_ret;
            .NS.add()

         |? _type='N' & _name<>''
::          Uzupełnienie tabeli pomocniczej przestrzeni nazw.
         || .NS.blank();
            .NS.TYPE:=1;
            .NS.CODE:=_name;
            .NS.RECNO:=_ret;
            .NS.add();

::          Uzupełnienie wcześniejszych (zapamiętanych) zapisów odwołujących się do właśnie dodanej przestrzeni nazw.
            _nsn:=_ret;
            .NS.prefix(0,_name,);
            {? .NS.first()
            || {!
               |? {? .XML.seek(.NS.RECNO)
                  || .XML.NAMESPC:=_nsn;
                     .XML.put()
                  ?};
                  .NS.del()
               !}
            ?};
            .NS.prefix()
         ?};

         _ret
      ?}
   ",type_of(''),type_of(''),type_of(''),type_of(0),type_of(''),-1),


   obj_meth('erase',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda zastępuje metodę klasy TABLE niedostępną w transakcji.
::   WE:
::   WY: Wynik operacji: 0/1.
::----------------------------------------------------------------------------------------------------------------------
   "  _TAB:=_a;
      {? _TAB.first()
      || {!
         |? _TAB.del()
         !}
      ?};
      ~_TAB.first()
   ",type_of(SYSLOG),-1),


   obj_meth('error',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa komunikatów o błędach.
::   WE:  _a  [STRING] - Nazwa metody wywołującej, jeżeli wartość pusta - komunikat NIE jest wyświetlany.
::        _b  [STRING] - Komunikat, lub kod komunikatu.
::       [_c] [ANY]    - Kolejne parametry zależne od kodu komunikatu.
::       [_d] [ANY]    - Kolejne parametry zależne od kodu komunikatu.
::   WY: Kod błędu.
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:={? 1+_b='#' || -#(1-_b) || -100 ?};
      _msg:=
         {? _b='#1'
         || 'Próba zdefiniowania atrybutu przed dodaniem elementu.'
         |? _b='#2'
         || 'Próba zdefiniowania przestrzeni nazw przed dodaniem elementu.'
         |? _b='#3'
         || 'Brak wskazanego rekordu rodzica.'
         |? _b='#4'
         || 'Próba dodania kolejnego elementu głównego.'+
            {? var_pres('_c')=type_of('') || ' Typ: ""'+_c+'"".' || '' ?}+
            {? var_pres('_d')=type_of('') || ' Nazwa: ""'+_d+'"".' || '' ?}
         |? _b='#5'
         || 'Błąd obsługi przestrzeni nazw.'
         |? _b='#6'
         || 'Utworzenie pliku nie powiodło się.'
         || _b
         ?};
      echo('Klasa obiektu: XML_T | Metoda: %1 | Kod błędu: %2'@ [_a,$_ret]);
      FUN.error(_msg);
      echo();
      return(_ret)
   ",type_of(''),type_of('')),


:: Metody publiczne ----------------------------------------------------------------------------------------------------


   obj_meth('__init',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Metoda inicjująca obiekt - utworzenie struktur złożonych.
::   WE: _a [OBJECT] - Wskazanie tworzonego obiektu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  _a.XML:=xml_tparse('<a></a>',255,255,0);
      _a.XML.first();
      _fml:=
         '_XML:=ref_tab('''+$_a.XML.ref()+'''); '
         '_XML.cntx_psh(); '
         '_XML.prefix(#_XML.ref()); '
         '{? _XML.first() || {! |? _XML.del() !} ?}; '
         '_XML.cntx_pop(); '
         '1';
      _a.XML.trig_b('del',$_fml);
      _a.erase(_a.XML);

::    W tabeli .NS zapisywane są informacje o przestrzeniach nazw:
::    Dla TYPE=1 - definicje przestrzeni;
::    Dla TYPE=0 - przestrzenie wymagające definicji.
      _a.NS:=tab_tmp(2,
         'TYPE','INTEGER','Typ zapisu',
         'CODE','STRING[255]','Kod',
         'RECNO','INTEGER','Nr rekordu danych'
      );

::    Przygotowanie okna grupowego do prezentacji aktualnego stanu danych (debugowania).
      _ws1:=_a.XML.mk_sel(,'N',,,,,,1);
      _a.XML.win_fld(_ws1,,'NAME',,,30);
      _a.XML.win_fld(_ws1,,'NAMESPC',,,3);
      _a.XML.win_fld(_ws1,,'TYPE',,,3);
      _a.XML.win_fld(_ws1,,'VAL',,,40);
      _a.XML.win_fld(_ws1,,'VTRUNC',,,3,,,,,,2,,""'T'"",""'N'"");
      _a.XML.win_fld(_ws1,,'INDEX',,,3);
      _a.XML.win_act(_ws1,,'Formuła','Plik'@@,,,""
            _TAB:=cur_tab(1,1);
            {? _TAB.BVAL<>null() || exec('bl_view','#blob',_TAB,'BVAL') ?}"");
      _a.XML.win_act(_ws1,,'Rekord',,,,""
         {? _a
         || _TAB:=cur_tab(1,1);
            _ws:=cur_win(1,1);
            _ha:={? _TAB.BVAL=null() || 'P' || '' ?};
            _TAB.actions_grayed(_ws,_ha)
         ?}""
      );
      _a.XML.win_act(_ws1,,'Szukaj');
      _a.XML.win_act(_ws1,,'Kolejność');
      _a.XML.win_edit(_a.XML.mk_edit(,1));

      _ws2:=_a.NS.mk_sel(,,,,,,,,'U');
      _a.NS.win_fld(_ws2,,'TYPE',,,-10);
      _a.NS.win_fld(_ws2,,'CODE',,,101);
      _a.NS.win_fld(_ws2,,'RECNO',,,-10);
      _a.NS.win_act(_ws2,,'Szukaj');
      _a.NS.win_act(_ws2,,'Kolejność');
      _a.NS.win_edit(_a.NS.mk_edit(,1));

      _mode:='maximized_with_title';
      _grp:=_a.XML.grp_make('Aktualny stan danych'@,,,,,,,'normal');
      _a.XML.grp_sel(_grp,_a.XML,_ws1,'XML'@,,,,,,,,,_mode);
      _a.XML.grp_sel(_grp,_a.NS,_ws2,'NS'@,,,,,,,,,_mode);
      _a.XML.win_sel(_grp);

      ~~
   "),


   obj_meth('addAttr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Metoda definiuje nowy atrybut dla ostatnio dodanego elementu.
::   WE:  _a  [STRING] - Nazwa atrybutu.
::       [_b] [ANY]    - Wartość atrybutu [domyślnie: ''].
::   WY: Numer dodanego rekordu lub kod błędu (ujemny).
::----------------------------------------------------------------------------------------------------------------------
   "  _meth:='addAttr';
      {? .lastE<0
      || return(.error(_meth,'#1'))
      ?};
      _name:=_a;
      _val:={? var_pres('_b')=type_of('') || _b || '' ?};
      .add(_meth,_name,_val,.lastE,'')
   ",type_of(''),type_of(''),-1),

   obj_meth('addAttr',".addAttr(_a,'')",type_of(''),-1),

   obj_meth('addAttr',".addAttr(_a,xml_value(_b))",type_of('')),


   obj_meth('addElement',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Metoda dodaje nowy element.
::       Uwaga: być może (z czasem) będzie potrzeba oprogramowania _b jako uchwytu do pliku.
::   WE:  _a  [STRING] - Nazwa elementu.
::       [_b] [ANY]    - Wartość elementu (typu prostego) [domyślnie: ''].
::       [_c] [NUMBER] - Numer rekordu rodzica [domyślnie: 0].
::       [_d] [STRING] - Przestrzeń nazw elementu (kod) [domyślnie: ''].
::   WY: Numer dodanego rekordu lub kod błędu (ujemny).
::----------------------------------------------------------------------------------------------------------------------
   "  _name:=_a;
      _vp:=var_pres('_b');
      _val:={? _vp=2 || _b |? 0<=_vp & _vp<=7 || xml_value(_b) || '' ?};
      _parent:={? var_pres('_c')=type_of(0) || _c ?};
      _ns:={? var_pres('_d')=type_of('') || _d || '' ?};
      .add('addElement',_name,_val,_parent,_ns)
   ",type_of('')),


   obj_meth('addNamespace',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Metoda definiuje nową przestrzeń nazw dla ostatnio dodanego elementu.
::   WE:  _a  [STRING] - Pełna nazwa (wskazanie) przestrzeni.
::       [_b] [STRING] - Kod przestrzeni [domyślnie: ''].
::   WY: Numer dodanego rekordu lub kod błędu (ujemny).
::----------------------------------------------------------------------------------------------------------------------
   "  _meth:='addNamespace';
      {? .lastE<0
      || return(.error(_meth,'#2'))
      ?};
      _val:=_a;
      _name:={? var_pres('_b')=type_of('') || _b || '' ?};
      .add(_meth,_name,_val,.lastE,'')
   ",type_of(''),type_of(''),-1),

   obj_meth('addNamespace',".addNamespace(_a,'')",type_of(''),-1),


   obj_meth('reset',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Metoda usuwa wszystkie dane i ustawienia przygotowując obiekt do ponownego użycia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  .erase(.XML);
      .erase(.NS);
      .lastE:=-1;
      ~~
   "),


   obj_meth('show',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Metoda techniczna - prezentuje aktualny stan danych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  .XML.cntx_psh();
      .NS.cntx_psh();
      .XML.select();
      .NS.cntx_pop();
      .XML.cntx_pop();
      ~~
   "),


   obj_meth('write',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Metoda zapisuje do pliku o formacie XML bieżący stan danych.
::   WE:  _a  [STRING] - Nazwa pliku.
::       [_b] [NUMBER] - Tworzenie pliku zgodnie z deklaracją ścieżek [0*/1].
::   WY: Wynik operacji (0/1) lub (ujemny) kod błędu.
::----------------------------------------------------------------------------------------------------------------------
   "  {? .NS.find_key(0)
      || return(.error('write','#5'))
      ?};

      _fh:=fopen(_a,'uw',_b,1,1);
      {? _fh.is_open()
      || _ret:=0;
         {? .XML.first()
         || _ret:=.XML.xml_twrite(_fh,,,'indentation=1')
         ?};
         _fh.fclose();
         _ret
      || .error('write','#6')
      ?}
   ",type_of(''),type_of(0),-1),

   obj_meth('write',".write(_a,0)",type_of(''),-1)

)


\demo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Funkcja demonstrująca sposób użycia obiektu klasy XML_T.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('xml_t_decl','#xml_t');
_xml:=obj_new(@.CLASS.XML_T);

:: Utworzenie elementu głównego.
_root:=_xml.addElement('dokumentacjaPracownicza',,,'');
:: Zdefiniowanie przestrzeni nazw 'xsd' ...
_xml.addNamespace('http://www.w3.org/2001/XMLSchema','xsd');
:: ... i domyślnej przestrzeni nazw.
_xml.addNamespace('http://www.mc.gov.pl/standardy/mc');

_xml.addElement('identyfikatorDokumentacji','ID123',_root);
_xml.addElement('dataEksportu',date(),_root);
_xml.addElement('nazwaPracodawcy','PROFIL Sp. z o.o.',_root,'xsd');
_prac:=_xml.addElement('pracownik',,_root);
_xml.addElement('nazwisko','Kowalski',_prac);
_xml.addElement('imie','Jan',_prac);

_dok:=_xml.addElement('dokument','ABC',_root);
:: Zdefiniowanie atrybutów dla elementu _dok.
_xml.addAttr('typ','paszport');
_xml.addAttr('nr','QWE125678');

:: Można dodawać elementy w nienaturalnej kolejności, ale nie jest to zalecane.
_xml.addElement('pesel','1234567890',_prac);

:: I jeszcze wartość, która nie mieści się w polu typu STRING - zapisywana jest do pliku.
_xml.addElement('komentarz','1234567890'*100,_dok);

_xml.show();

_xml.write('xml_t.xml',1);

_xml.reset()

:Sign Version 2.0 jowisz:1045 2022/12/14 13:14:32 9a27f031bc9d701344cce76084b028a0ab4a23e6ea1f8ab78d711bad6b679777533044e5c3081e9aabcbdb023d86c010c71b86acbb3db581f38f6df00ace05ce997031b27cad3434be170eace6003fb105975cc6a3485bad83bed0991fe7eda2749d5d317ad9bb9e7d42c07ceec36713c855eff54b5fde23423a8dead717a9a8
