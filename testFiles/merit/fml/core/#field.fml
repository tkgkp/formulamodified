:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: #field.fml [17.00]
:: Utworzony: 17.12.2014
:: Autor: AK
::======================================================================================================================
:: Zawartość: Uniwersalne formuły do obsługi pól
::======================================================================================================================


\blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła nadaje wartości początkowe (na podstawie aktualnych formuł) polom przekazanym argumentami.
::   WE:  _a  [TABLE]   - Alias tabeli, z której pochodzą pola.
::       [_b] [INTEGER] - Sposób nadawania wartości początkowej:
::                0 - Wyniki formuł na wartości początkowe (zdefiniowane pod MacroBUILDEREM) [domyślnie],
::                1 - Wartości zerowe odpowiednich typów.
::                UWAGA! - dla wywołań webTermowych przyjmujemy zawsze wartości zerowe
::       [_c] [STRING]  - Akronim pola znajdującego się w schemacie tabeli _a, któremu nadana będzie wartość początkowa.
::       [_d] [STRING]  - Akronim pola znajdującego się w schemacie tabeli _a, któremu nadana będzie wartość początkowa.
::       [_b] [STRING]  - Akronim pola znajdującego się w schemacie tabeli _a, któremu nadana będzie wartość początkowa.
::       [_e] [STRING]  - Akronim pola znajdującego się w schemacie tabeli _a, któremu nadana będzie wartość początkowa.
::       [_f] [STRING]  - Akronim pola znajdującego się w schemacie tabeli _a, któremu nadana będzie wartość początkowa.
::       [_g] [STRING]  - Akronim pola znajdującego się w schemacie tabeli _a, któremu nadana będzie wartość początkowa.
::       [_z] [STRING]  - Akronim pola znajdującego się w schemacie tabeli _a, któremu nadana będzie wartość początkowa.
::   WY: Napis, którego poszczególne znaki mówią o napotkanych problemach:
::       ''  - Wszystko przebiegło prawidłowo.
::       'T' - Błędny alias tabeli.
::       'F' - Błędny akronim pola. Polom, których akronimy były poprawne, wartość początkowa została nadana.
::       'V' - Błąd wewnętrzny - nieobsługiwany typ pola.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG)
|| _TAB:=_a
|| return('T')
?};
_webTerm:=app_info('web_sesid')<>'';
_exec:=_webTerm | (var_pres('_b')=type_of(0) & _b);

_ret:='';
{! _lp:=3 .. _
|! _acr:=_[_lp];
   _vp:=var_pres(_acr,_TAB);
   {? _vp=36
::    Dla pól typu SYS_MEMO przyjmujemy pusty napis.
   || _TAB.memo_set(,_acr)

   |? _vp>0
   || {? _exec | (_fml:=_TAB.fld_fml(_acr,'*BLANK'))=""
      || {? _vp=33
::          Dla pól typu BLOBRAW lub BLOBIMAGE przyjmujemy wartość pustą.
         || _TAB.bl_file(_acr,1)

         || _val:=
               {? _vp=20 | _vp=22 | _vp=32 || 0
               |? _vp=21 || date(0,0,0)
               |? _vp=26 || null()
               |? _vp=27 || ''
               |? _vp=29 || time(0,0,0)
               || ~~
               ?};
            {? _val<>~~
            || ($('_a.'+_acr+':=_b'))(_TAB,_val)
            |? _ret*'V'
            || _ret+='V'
            ?}
         ?}
      || ($('_a.'+_acr+':=_b'))(_TAB,_fml())
      ?}

   |? _ret*'F'
   || _ret+='F'
   ?}
!};

_ret


\valid_formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdzenie poprawności pola z formułą
::   WE: [_a] - jeśli podany i jest typu STRING albo RULE, wpp. badany bieżący fld()
::       [_b] - czy wyświetlać komunikat błędu (domyślnie wyswietlać)
::       [_c] - nazwa pola, która ma się pojawić w komunikacie
::   WY: 1 - ok, 0 - jest błąd składniowy
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _formula:=$_a
|? var_pres('_a')=type_of("")
|| _formula:=_a
|? type_of(fld())=type_of('')
|| _formula:=$fld()
|| return(0)
?};

{? var_pres('_b')=type_of(0)
|| _display:=_b
|| _display:=1
?};

_chk:=form_chk(_formula);
{? _chk.first()
|| {? _display
   || _fld:={? var_pres('_c')=type_of('') || '"'+_c+'"' || '' ?};
      {? _fld<>''
      || FUN.emsg(
            'Znaleziono błąd składniowy w formule pola %1:'
            '\n%2\n'
            '\nNależy poprawić formułę (wiersz %3, kolumna %4).'@[_fld,_chk.ERR_DESC,$_chk.ERR_LINE,$_chk.ERR_COL]
         )
      || FUN.emsg(
            'Wystąpił błąd w redagowanej formule: %1'
            '\nNależy poprawić formułę (wiersz %2, kolumna %3).'@[_chk.ERR_DESC,$_chk.ERR_LINE,$_chk.ERR_COL]
         )
      ?}
   ?};
   0
|| 1
?}


\toupper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Przed wyświetleniem lub po redagowaniu pola - zamienia zawartość na wielkie litery.
::   WE:
::   WY:
::  TAG: <BD> <AE>
::  OLD: \toupper/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
fld(~-fld())


\tolower
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: zamienia wszystkie litery na małe
::   WE:
::   WY:
::  OLD: \tolower/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
~fld()


\ust_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2006]
:: OPIS: zwraca typ pola podanego w parametrach wejściowych
::   WE: _a - akronim tabeli
::       _b - akronim pola
::   WY: _wyn - typ stringowo
::  OLD: \ust_typ/find_rad.fml
::----------------------------------------------------------------------------------------------------------------------
_n:=($('type_of('+_a+'.'+_b+')'))();
_wyn:={? _n=1 || {? MS.fld_real(_a,_b)
                 || 'REAL'
                 || 'INTEGER'
                 ?}
      |? _n=2 || 'STRING['+$MS.fld_len(_a,_b)+']'
      |? _n=4 || 'DATE'
      |? _n=5 || 'TIME'
      |? _n=7 || 'REFERENCE'
      |? _n=0 || 'MEMO'
      || ''
      ?};
_wyn


\t_or_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdza czy w polu podano literę T lub N
::  OLD: \tak_nie/tr_info.fml
::       \tak_nie/wspol.fml
::       \TAK_NIE/estra.fml
::       \taknie/war_tech.fml
::  TAG: <AE>
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? (-(6+menu_txt()))='szukaj'
|| _wyn:=1
|? chk_fld(1)
|| fld(~-fld());
   {? 'TN'*fld()=0
   || {? FUN.ask('Dopuszczalne wartości dla pola (rezygnacja oznacza wartość N):'@)
      || fld('T')
      || fld('N')
      ?}
   ?};
   _wyn:=1
|| FUN.info('Niewypełnione pole.\nDopuszczalne wartości dla pola: T lub N.'@)
?};
_wyn


\fldLabel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [17.00]
:: OPIS: Zwraca etykiete pola
::   WE: _a - akronim lub alias tabeli
::       _b - akronim pole lub kolejne pola przez złączenie
::   WY: _wyn - etykieta pola
::       UWAGA. W przypadku nie znalezienia etykiet np. podano blędne akronimy pól zwraca pustego STRING-a
::  OLD: \zwr_opis/find_rad.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_tab:={? _>0
      || {? type_of(_a)=type_of('')        || _a
         |? var_pres('_a')=type_of(SYSLOG) || !_a
                                           || FUN.wdrerror('Błędny parametr 1'@);
                                              return()
         ?}
      || return(0)
      ?};
_fld:={? _>1
      || {? type_of(_b)=type_of('') || form(_b)
                                    || FUN.wdrerror('Błędny parametr 2'@);
                                       return()
         ?}
      || return(0)
      ?};
_ch:='().';
_wsk:=_fld*_ch;
{? _wsk
||
:: pole zlaczeniowe
   _jfld:=(_wsk-1)+_fld;
:: to co pozostało
   _fld:=(_wsk+2)-_fld
|| _jfld:=_fld;
   _fld:=''
?};
_num:={? _tab<>'' || ($(_tab+'.fld_num'))() || _a.fld_num() ?};
_nrf:=0;
_i:=0;
{!
|? _i+=1;
   {? {? _tab<>'' || ($(_tab+'.fld_acr('+$_i+')'))() || _a.fld_acr(_i) ?}=_jfld
   ||
::    złączenie z innej tabeli
      _join:={? _tab<>'' || ($(_tab+'.fld_join('+$_i+')'))() || _a.fld_join(_i) ?};
      {? _fld<>'' & _join<>''
      || _wyn:=exec('fldLabel','#field',_join,_fld)
      || _wyn:={? _tab<>'' || ($(_tab+'.fld_name('+$_i+')'))() || _a.fld_name(_i) ?}
      ?};
      0
   || _i<_num
   ?}
!};
_wyn


\fldComment
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Zwraca komentarz pola
::   WE: _a [STRING/TABLE] - akronim/alias tabeli
::       _b [STRING] - akronim pola
::   WY: _wyn - komentarz pola
::       W przypadku nieprawidłowego wywołania lub nieistniejącej tabeli lub pola zostanie zwrócony pusty napis.
::----------------------------------------------------------------------------------------------------------------------
_msg:=
   'Błędna lista argumentów formuły %1 z pliku %2.\n'
   'Oczekiwane: 1 - akronim/alias tabeli, 2 - akronim pola.'@
   ['fldComment','#field.fml'];

_TAB:=~~;
_fld:=~~;
_ok:=0;
{? _=2
|| {? var_pres('_a')=type_of('') & var_pres(_a)=type_of(SYSLOG) || _TAB:=($_a)()
   |? var_pres('_a')=type_of(SYSLOG) || _TAB:=_a
   ?};
   {? type_of(_TAB)<>type_of(~~)
   || {? var_pres('_b')=type_of('') & var_pres(_b,_TAB)>0
      || _fld:=_b;
         _ok+=1
      ?}
   ?}
?};
{? ~_ok
|| FUN.wdrerror(_msg);
   return('')
?};

_len:=_TAB.fld_num();
{! _fi:=1.._len
|! {? _TAB.fld_acr(_fi)=_fld
   || return(_TAB.fld_comm(_fi))
   ?}
!};
''


\duzelitery
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2010]
:: OPIS: Duze litery w polu
::----------------------------------------------------------------------------------------------------------------------
fld(~-fld);1


\txt2pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.00]
:: OPIS: Zamienia tekst na taki, który jest niewrażliwy na znaki specjalne formuły na wzorzec
::   WE: _a - tekst do konwersji
::   WY: tekst po konwersji
::----------------------------------------------------------------------------------------------------------------------
_pat:=obj_new(24);
_pat[1]:='A'; _pat[2]:='0'; _pat[3]:='1'; _pat[4]:='2'; _pat[5]:='3';
_pat[6]:='4'; _pat[7]:='5'; _pat[8]:='6'; _pat[9]:='7'; _pat[10]:='8';
_pat[11]:='9'; _pat[12]:='F'; _pat[13]:='I'; _pat[14]:='x'; _pat[15]:='U';
_pat[16]:='u'; _pat[17]:='L'; _pat[18]:='l'; _pat[19]:='!'; _pat[20]:='&';
_pat[21]:='|'; _pat[22]:='$'; _pat[23]:='#'; _pat[24]:='%';

_rep:=obj_new(24);
_rep[1]:='\\A'; _rep[2]:='\\0'; _rep[3]:='\\1'; _rep[4]:='\\2'; _rep[5]:='\\3';
_rep[6]:='\\4'; _rep[7]:='\\5'; _rep[8]:='\\6'; _rep[9]:='\\7'; _rep[10]:='\\8';
_rep[11]:='\\9'; _rep[12]:='\\F'; _rep[13]:='\\I'; _rep[14]:='\\x'; _rep[15]:='\\U';
_rep[16]:='\\u'; _rep[17]:='\\L'; _rep[18]:='\\l'; _rep[19]:='\\!'; _rep[20]:='\\&';
_rep[21]:='\\|'; _rep[22]:='\\$'; _rep[23]:='\\#'; _rep[24]:='\\%';

_a:=gsub(_a, _pat, _rep)


\noemptyStr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzenie wypełnienia pola string i komunikat typu __CHK.record()
::  OLD: \noempty/funkcje.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()=''
|| FUN.emsg('Pole \"%1\" musi być wypełnione.\nNależy uzupełnić brakujące informacje.'@[cur_nfld()]);
   0
|| 1
?}


\itsPositive
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy podana wartość jest liczba dodatnią, nieujemną
::       UWAGA. exec('itsPositive','#field',0,'B') == exec('NOMIN','war_tech')
::   WE: [_a] - domyślnie 0: 1-czy wartosc wieksza od zera 0-czy wartość nieujemna
::       [_b] - czy wyświetlać komunikat T - tak (domyślnie), N - nie,
::              B - nie: i w przypadku błędu podmienia na 0
::       [_c] - wartość
::   WY: 0-wartość pola ujemna 1-jest OK
::  OLD: \dodatnia/faktury0.fml
::       \NOMIN/war_tech.fml
::       \nieujem/wsp_mag.fml
::       \po_zknld/zk.fml
::       \nieujemn/pola.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?}  || _a:=0  ?};
{? _>=2 || {? type_of(_b)<>2 || _b:='T' ?} || _b:='T' ?};
{? _>=3 || {? type_of(_c)<>1 || _c:=fld ?}  || _c:=fld  ?};

_wyn:=0;

{? type_of(_c)<>1 | {? _a || _c>0 || _c>=0 ?}
|| _wyn:=1
|| {? _b='T'
   || {? _a
      || FUN.info('Należy podać wartość większą od zera.'@)
      || FUN.info('Należy podać wartość większą lub równą zero.'@)
      ?}
   |? _b='B'
   || fld(0);
      _wyn:=1
   ?}
?};
_wyn


\in_interval
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła sprawdza, czy podana wartość jest liczbą z podanego przedziału
::   WE: [_a] - Dolne ograniczenie (domyślnie 0)
::       [_b] - Górne ograniczenie (domyślnie 100)
::       [_c] - Akronim tabeli, z której pochodzi sprawdzane pole [domyślnie: cur_tfld()].
::       [_d] - Akronim pola [domyślnie: cur_afld()].
::       [_e] - Nazwa pola w okienku. Jeżeli nie zostanie podana i funkcja wywołana jest bez parametrów (w akcji "po
::              redagowaniu" pola) to przyjęta będzie etykieta pola w okienku. W pozostałych przypadkach będzie to nazwa
::              pola w tabeli.
::   WY: 1 - Wartość poprawna.
::       0 - Wartość błędna.
::----------------------------------------------------------------------------------------------------------------------
_min:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_max:={? var_pres('_b')=type_of(0) || _b || 100 ?};
_tfld:={? var_pres('_c')=type_of(SYSLOG) || _c || cur_tfld() ?};
_afld:={? var_pres('_d')=type_of('') || _d || cur_afld() ?};
_nfld:={? var_pres('_e')=type_of('') || _e |? _<2 || cur_nfld() || MS.name(_tfld,_afld) ?};

_wart:=($('_a.'+_afld))(_tfld);
{? _wart<_min | _wart>_max
|| FUN.info('Wartość "%1" musi być z przedziału od %2 do %3.'@[_nfld,$_min,$_max]);
   0
|| 1
?}


\czy_procent
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdza, czy pole ma prawidłową wartość procentową.
::   WE: _a - Akronim tabeli, z której pochodzi sprawdzane pole [domyślnie: cur_tfld()].
::       _b - Akronim pola [domyślnie: cur_afld()].
::       _c - Nazwa pola w okienku. Jeżeli nie zostanie podana i funkcja wywołana jest bez parametrów (w akcji "po
::            redagowaniu" pola) to przyjęta będzie etykieta pola w okienku. W pozostałych przypadkach będzie to nazwa
::            pola w tabeli.
::   WY: 1 - Wartość poprawna.
::       0 - Wartość błędna.
::  OLD: \spr_proc/komornik.fml
::  OLD: \czy_procent/wsp_mag.fml
::  OLD: \kst_zus_ae/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
_tfld:={? var_pres('_a')=type_of(SYSLOG) || _a || cur_tfld() ?};
_afld:={? var_pres('_b')=type_of('') || _b || cur_afld() ?};
_nfld:={? var_pres('_c')=type_of('') || _c |? _=0 || cur_nfld() || MS.name(_tfld,_afld) ?};

exec('in_interval','#field',0,100,_tfld,_afld,_nfld)


\f3_select_distinct
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła umożliwia wybór wartości bieżącego pola spośród wszystkich wartości w bazie danych.
::       Operator dostaje okienko, w którym zgromadzono wszystkie wartości występujące w bazie w określonym (bieżącym)
::       polu.
::   WE: _a - Akronim tabeli, z której pochodzi sprawdzane pole [domyślnie: cur_tfld()].
::       _b - Akronim pola [domyślnie: cur_afld()].
::       _c - Nazwa pola w okienku (będzie tytułem kolumny w okienku wertowania). Jeżeli nie zostanie podana i funkcja
::            wywołana jest bez parametrów (w akcji "Wybór F3" pola) to przyjęta będzie etykieta pola w okienku.
::            W pozostałych przypadkach będzie to nazwa pola w tabeli.
::       _d - Prezentowana szerokość pola [domyślnie: zgodna z szerokością pola w bazie].
::   WY: Wartość pola wybranego rekordu lub ~~.
::  OLD: \f3source/skid_gio.fml
::----------------------------------------------------------------------------------------------------------------------
_tfld:={? var_pres('_a')=type_of(SYSLOG) || _a || cur_tfld() ?};
_afld:={? var_pres('_b')=type_of('') || _b || cur_afld() ?};
_nfld:={? var_pres('_c')=type_of('') || _c |? _=0 || cur_nfld() || MS.name(_tfld,_afld) ?};
_fszer:={? var_pres('_d')=type_of(0) || _d || MS.fld_len(_tfld,_afld) ?};

_tab:=sql('select distinct '+_afld+' as VAL from :_a order by 1',_tfld);

_ws:=_tab.mk_sel(_nfld,,,,,,,,'U');
_tab.win_fld(_ws,,'VAL',,,_fszer,,,,1);
_tab.win_act(_ws,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_tab.win_act(_ws,,'Szukaj');
_tab.win_act(_ws,,'Kolejność');
_tab.win_sel(_ws);
{? _tab.select() || _tab.VAL || ~~ ?}


\fld_ltrim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Z bieżącego pola formuła usuwa wiodące białe znaki.
::  OLD: \fld/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
fld(|fld())


\fld_padl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Bieżące pole jest uzupełniane spacjami z lewej strony, tak aby powstały napis miał długość pola w tabeli.
::  OLD: \RG_STR/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
_prev:=fld();
_len:=+fld(255*'*');
fld(form(_prev,-_len))


\typy_dokumentow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Rozszerzenia plików załącznika.
::       Każda linia definiuje jeden typ filtra. Dwa średniki kończą definicję.
::  OLD: \rozszerz/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
'Dokumenty;*.doc;*.docx;*.pdf;*.odt;;'
'Pliki tekstowe;*.txt;*.rtf;;'
'Wszystkie pliki;*.*'


\if_fld_0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2010]
:: OPIS: Zwraca, czy pole ma zerową wartość
::   WY: 0/1
::  OLD: \if_fld_0/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
fld()=0


\save_fml_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zachowuje w tablicach wszystkie formuły przypisane do pól tabeli.
::   WE: _a - alias do tabeli
::   WY: wskazanie na tablicę zawierającą formuły
::----------------------------------------------------------------------------------------------------------------------
_type:=exec('fld_fml_types','#field');
_len:=obj_len(_type);
_buf:=obj_new(_len);
{! _num:=1.._len
|! _buf[_num]:=exec('save_fml_type','#field',_a,_type[_num])
!};
_buf


\save_fml_type
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zachowuje w tablicach formuły określonego typu przypisane do pól tabeli.
::   WE: _a - alias do tabeli
::       _b - typ formuł
::   WY: wskazanie na tablicę zawierającą formuły
::----------------------------------------------------------------------------------------------------------------------
_len:=_a.fld_num();
_buf:=obj_new(_len);
_pat:='*'+_b;
{! _num:=1.._len
|! {? {? _a.fld_join(_num)<>'' || _b<>'F3' || 1 ?}
   || _buf[_num]:=_a.fld_fml(_a.fld_acr(_num),_pat)
   ?}
!};
_buf


\restore_fml_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Odtwarza na podstawie tablicy wszystkie formuły przypisane do pól tabeli.
::   WE: _a - alias do tabeli
::       _b - wskazanie na tablicę zwracaną przez save_fml_all
::----------------------------------------------------------------------------------------------------------------------
_type:=exec('fld_fml_types','#field');
_len:=obj_len(_type);
{! _num:=1.._len
|! exec('restore_fml_type','#field',_a,_type[_num],_b[_num])
!}


\restore_fml_type
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Odtwarza na podstawie tablicy formuły określonego typu przypisane do pól tabeli.
::   WE: _a - alias do tabeli
::       _b - typ formuł
::       _c - wskazanie na tablicę zwracaną przez save_fml_type
::----------------------------------------------------------------------------------------------------------------------
_len:=_a.fld_num();
_pat:='*'+_b;
{! _num:=1.._len
|! {? {? _a.fld_join(_num)<>''
      || _b<>'F3'
      || 1
      ?}
   || _acr:=_a.fld_acr(_num);
      {? _a.fld_fml(_acr,_pat)<>_c[_num]
      || _a.fld_fml(_acr,_b,_c[_num])
      ?}
   ?}
!}


\fld_fml_types
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca tablicę zawierającą nazwy typów formuł pól. Pomocnicza dla formuł save i restore.
::   WE: wskazanie na tablicę
::----------------------------------------------------------------------------------------------------------------------
spli_str('PATTERN,BLANK,BEFORE_DISPLAY,BEFORE_EDIT,F3,AFTER_EDIT,DISPLAY_FORMAT,EDIT_FORMAT',',')


\set_fml_type
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Dla wszystkich pól wskazanej tabeli ustawia jedną wartość formuły określonego typu.
::   WE: _a - Alias tabeli.
::       _b - Typ formuły.
::       _c - Formuła.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_pat:='*'+_b;
{! _num:=1.._a.fld_num()
|! _acr:=_a.fld_acr(_num);
   {? _a.fld_fml(_acr,_pat)<>_c
   || _a.fld_fml(_acr,_b,_c)
   ?}
!}


\fld_6
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Precyzja pola do 6 miejsc
::  OLD: \fap_masan_po/ist01.fml
::       \fap_ilujm_po/ist01.fml
::       \dk_masan_po/ist01.fml
::       \dk_ilujm_po/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
fld(fld$6);
1


\fld_2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Precyzja pola do 2 miejsc
::  OLD: \fap_wf_po/ist01.fml
::       \fap_ws_po/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
fld(fld$2);
1


\fld_0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Precyzja pola do 0 miejsc
::----------------------------------------------------------------------------------------------------------------------
fld(fld$0);
1


\nodate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzenie wypełenienia pola data
::  OLD: \nodate/funkcje.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()=date(0,0,0)
|| FUN.info('Niewypełnione pole %1.'@[cur_nfld()]); 0
|| 1
?}


\fld_prec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2011]
:: OPIS: Funkcja zwraca maksymalna precyzje podanego pola dla biezacego prefix lub filtra ustalajac wg danych
::   WE:  _a  - uchwyt do tabeli
::        _b  - akronim sprawdzanego pola
::       [_c] - Prefix / Filtr (P lub F domyslnie P)
::   WY: ustalona precyzja
::  OLD: \FD.FLD_PREC/funkcje.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3 || {? type_of(_c)<>2 || _c:='P'?} || _c:='P' ?};
_my_prc:=0;
{| _a |!
   cntx_psh();
   {? _c='P'
   ||
      {? first
      || {!
         |?
            _licz:=($('_a.'+_b))(_a);
            _bi_prc:=+form((frac(_licz)))-2;
            {? _bi_prc>_my_prc || _my_prc:=_bi_prc ?};
            next
         !}
      ?}
   ||
      {? f_first
      || {!
         |?
            _licz:=($('_a.'+_b))(_a);
            _bi_prc:=+form((frac(_licz)))-2;
            {? _bi_prc>_my_prc || _my_prc:=_bi_prc ?};
            f_next
         !}
      ?}
   ?};
   cntx_pop()
|};
_my_prc


\le_today
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2010]
:: OPIS: Sprawdza, czy data jest mniejsza-równa dzisiejszej
::   WY: 0 / 1
::  OLD: \le_today/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()>=date()
|| 1
|| FUN.emsg('Data nie może być wcześniejsza niż dzisiejsza.'@);
   0
?}


\no_emp_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Zwraca +(|fld)
::  OLD: \no_emp_1/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
+(|fld)


\fld6
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2010]
:: OPIS: Przypisuje do pola jego wartosc liczbowa zaokraglona do 6 znakow po przecinku
::  OLD: \fld6/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
fld(fld()$6)


\posDate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: ustawia kursor na odpowiedniej pozycji w polu typu DATE
::   WE: _a - typ ustawienia 1-rok 2-miesiac 3-dzien
::   WY: liczba wierszy
::  OLD: \poz_data/podstawy.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=1 || set_cpos(1)
|? _a=2 || set_cpos(6)
|? _a=3 || set_cpos(9)
?}


\valid_time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Walidacja pola typu TIME, zeby mieściło się w godzinach zegarowych
::   WE: _a - TIME
::       _b - 0 - komunikat (domyślnie), 1 - bez komunikatu
::   WY: 0 / 1
::  OLD: \valid_time/libfml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of(0)
|| _b:=0
?};
_msg:='';
_res:=(_a<time(24,0,0));
{? ~_res & ~_b || FUN.info('Godzina musi mieścić się w przedziale %1 ÷ %2.'@['0:0:0','23:59:59']) ?};
_res


\valid_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Walidacja pola typu DATE, żeby nie była zbyt dawna
::   WE: _a - DATE
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
_res:=(_a>=date(1900,1,1));
{? ~_res || FUN.info('Data nie może być wcześniejsza niż %1.'@['1900/01/01']) ?};
_res


\set_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia formuly dla pola
::   WE: _a - tabela
::       _b - pole
::       _c - przed wyswietleniem
::       _d - przed redakcja
::       _e - klawisz F3
::       _f - po redakcji
::----------------------------------------------------------------------------------------------------------------------
_a.fld_fml(_b,'BEFORE_DISPLAY',{? var_pres('_c')>0 || _c || "*" ?});
_a.fld_fml(_b,'BEFORE_EDIT',{? var_pres('_d')>0 || _d || "*" ?});
{? exec('ust_typ','#field',2-!_a,_b)<>'REFERENCE'
|| _a.fld_fml(_b,'F3',{? var_pres('_e')>0 || _e || "*" ?})
?};
_a.fld_fml(_b,'AFTER_EDIT',{? var_pres('_f')>0 || _f || "*" ?})


\nozero
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: sprawdza wypelenienie pola
::  OLD: \nozero/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()=0
|| FUN.emsg('Pole \"%1\" musi być wypełnione.\nNależy uzupełnić brakujące informacje.'@[cur_nfld()]);
   0
|| 1
?}


\f_day_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Dostępna tylko dla pól typu DATE. Zmienia datę na pierwszy dzień miesiąca wynikającego z podanej daty.
::  OLD: \day_fld/util.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=fld();
{? _data<>date(0,0,0)
|| fld(date(_data~1,_data~2,1))
?};
fld()


\l_day_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Dostępna tylko dla pól typu DATE. Zmienia datę na ostatni dzień miesiąca wynikającego z podanej daty.
::  OLD: \day_fld/util.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=fld();
{? _data<>date(0,0,0)
|| fld(date(_data~1,_data~2,0))
?};
fld()


\fld6_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2011]
:: OPIS: Przypisuje do pola jego wartosc liczbowa zaokraglona do 6 znakow po przecinku
::  OLD: \fld6_1/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
fld(fld()$6); 1


\alignment_right
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Format wyświetlania pola - wyrównaj do prawej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'alignment=right'


\alignment_right_cnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Formuła zwracająca treść formuły na wyświetlanie pola zależnie od używanego klienta.
::   WE:
::   WY: treść formuły
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('interm','#system')
|| "exec('alignment_right','#field')"
|| ""
?}


\ae_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: VAR_EDIT: MSC: po redakcji
::  OLD: \VARMSCpr/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
(fld>=1) & (fld<=12)


\ae_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [2010]
:: OPIS: VAR_EDIT: ROK: po redakcji
::  OLD: \VARROKpr/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
fld>=1900


\mark
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia gwiazdkę w polach okna
::   WE: _a - tabela
::       _b - okienko
::       _c ... - akronimy pól
::----------------------------------------------------------------------------------------------------------------------
{! _ii:=3.._
|! _a.efld_opt(_b,'mark=1',_a,_[_ii])
!}


\mark2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia gwiazdkę w polach okna
::   WE: _a - tabela
::       _b - okienko
::       _c - tabela pola
::       _d - akronim pola
::----------------------------------------------------------------------------------------------------------------------
{! _ii:=1..(_-2)/2
|! _a.efld_opt(_b,'mark=1',_[_ii*2+1],_[_ii*2+2])
!}


\in_prec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Format redagowania pola - liczba cyfr dziesiętnych
::   WE: [_a] [NUMBER] - Liczba cyfr dziesiętnych [domyślnie: 2].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'in_prec=%1' [{? var_pres('_a')=type_of(0) || $_a || '2' ?}]


\dtm_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Ładuje D (dni), T (tygodnie) i M (miesiące)
::       z rekordu dowolnej tabeli (musi mieć takie pola) do zmiennej POCZTAV
::   WE: _a - alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

_D:=_tab.D;
{! _i:=1..32 |! ($('POCZTAV.D'+$_i+':=1+_a'))(_D); _D:=1-_D !};
_T:=_tab.T;
{! _i:=1..7 |! ($('POCZTAV.T'+$_i+':=1+_a'))(_T); _T:=1-_T !};
{? _tab.T=7*'T' || POCZTAV.T_ALL:='T' || POCZTAV.T_ALL:='N' ?};
_M:=_tab.M;
{! _i:=1..12 |! ($('POCZTAV.M'+$_i+':=1+_a'))(_M); _M:=1-_M !};
{? _tab.M=12*'T' || POCZTAV.M_ALL:='T' || POCZTAV.M_ALL:='N' ?};
~~


\desc_m_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Ładuje opis z pola "miesiące" do pola BPMN.M
::   WE: _a - tekst
::----------------------------------------------------------------------------------------------------------------------
_months:=exec('str2obj','#convert',_a);
BPMN.M:='';
{! _it:=1..12
|! {? _months[_it]='T'
   || _month:=$(date(2000,_it,1)$8-5);
      _month:=~(1+_month)+(1-_month);
      BPMN.M+=_month+', '
   ?}
!};
BPMN.M-=2;
{? form(BPMN.M)='' || BPMN.M:='< F3 >' ?};
~~


\desc_t_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Ładuje opis z pola "tygodnie" do pola BPMN.T
::   WE: tekst
::----------------------------------------------------------------------------------------------------------------------
_days_of_week:=exec('str2obj','#convert',_a);
_names:=obj_new(7);
_names[1]:='Poniedziałek'@;
_names[2]:='Wtorek'@;
_names[3]:='Środa'@;
_names[4]:='Czwartek'@;
_names[5]:='Piątek'@;
_names[6]:='Sobota'@;
_names[7]:='Niedziela'@;
BPMN.T:='';
{! _it:=1..7
|! {? _days_of_week[_it]='T' || BPMN.T+=_names[_it]+', ' ?}
!};
BPMN.T-=2;
{? form(BPMN.T)='' || BPMN.T:='< F3 >' ?};
~~


\desc_d_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Ładuje opis pola "dni" do pola BPMN.D
::   WE: _a - tekst
::----------------------------------------------------------------------------------------------------------------------
_days_of_month:=exec('str2obj','#convert',_a);
BPMN.D:='';
{! _it:=1..31
|! {? _days_of_month[_it]='T' || BPMN.D+=$_it+', ' ?}
!};
{? _days_of_month[32]='T' || BPMN.D+='ostatni, ' ?};
BPMN.D-=2;
{? form(BPMN.D)='' || BPMN.D:='< F3 >' ?};
~~


\dtm_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Zachowuje D, T i M ze zmiennej POCZTAV do rekordu dowolnej tabeli (musi mieć wskazane pola)
::   WE: _a - alias tabeli
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_tab.D:='';
{! _i:=1..32 |! ($('_a.D+=POCZTAV.D'+$_i))(_tab) !};
_tab.T:='';
{! _i:=1..7 |! ($('_a.T+=POCZTAV.T'+$_i))(_tab) !};
_tab.M:='';
{! _i:=1..12 |! ($('_a.M+=POCZTAV.M'+$_i))(_tab) !};
~~


\m_pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wzorzec redakcji pola BPMN.M
::  TAG: <PROCES><PT>
::  OLD: \m_pattern/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
exec('txt2pattern','#field',params_get().args.fld_m)+'#'


\t_pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wzorzec redakcji pola BPMN.T
::  TAG: <PROCES><PT>
::  OLD: \t_pattern/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
exec('txt2pattern','#field',params_get().args.fld_t)+'#'


\d_pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wzorzec redakcji pola BPMN.D
::  TAG: <PROCES><PT>
::  OLD: \d_pattern/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
exec('txt2pattern','#field',params_get().args.fld_d)+'#'


\m_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa na F3 w polu BPMN.M
::  TAG: <PROCES><F3>
::  OLD: \m_f3/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
params_set(params_get());
POCZTAV.win_edit('RED_M');
exec('dtm_load','#field',_tab);
{? POCZTAV.edit()
|| exec('dtm_save','#field',_tab);
   exec('desc_m_load','#field',_tab.M);
   params_get().args.fld_m:=fld()
|| 0
?}


\t_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa na F3 w polu BPMN.T
::  TAG: <PROCES><F3>
::  OLD: \t_f3/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
params_set(params_get());
POCZTAV.win_edit('RED_T');
exec('dtm_load','#field',_tab);
{? POCZTAV.edit()
|| exec('dtm_save','#field',_tab);
   exec('desc_t_load','#field',_tab.T);
   params_get().args.fld_t:=fld()
|| 0
?}


\d_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa na F3 w polu BPMN.D
::  TAG: <PROCES><F3>
::  OLD: \d_f3/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
params_set(params_get());
POCZTAV.win_edit('RED_D');
exec('dtm_load','#field',_tab);
{? POCZTAV.edit()
|| exec('dtm_save','#field',_tab);
   exec('desc_d_load','#field',_tab.D);
   params_get().args.fld_d:=fld()
|| 0
?}


\m_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pola BPMN.M
::  TAG: <PROCES><BE>
::  OLD: \m_be/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().args.fld_m:=fld();
1


\t_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pola BPMN.T
::  TAG: <PROCES><BE>
::  OLD: \t_be/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().args.fld_t:=fld();
1


\d_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pola BPMN.D
::  TAG: <PROCES><BE>
::  OLD: \d_be/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().args.fld_d:=fld();
1


\m_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola BPMN.M
::  TAG: <PROCES><AE>
::  OLD: \m_ae/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
fld():=params_get().args.fld_m;
1


\t_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola BPMN.T
::  TAG: <PROCES><AE>
::  OLD: \t_ae/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
fld():=params_get().args.fld_t;
1


\d_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola BPMN.D
::  TAG: <PROCES><AE>
::  OLD: \d_ae/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
fld():=params_get().args.fld_d;
1


\pocztav_m_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pól POCZTAV.M*
::  OLD: \pocztav_m_be/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().args.fld_vm:=fld();
1


\pocztav_m_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pól POCZTAV.M*
::  OLD: \pocztav_m_ae/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='M_ALL'
|| {? fld<>params_get().args.fld_vm || {! _it:=1..12 |! ($('POCZTAV.M'+$_it))():=fld() !} ?}
|| {? fld()='N' || POCZTAV.M_ALL:='N' ?}
?};
''


\pocztav_t_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pól POCZTAV.T*
::  OLD: \pocztav_t_be/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().args.fld_vt:=fld();
1


\pocztav_t_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pól POCZTAV.T*
::  OLD: \pocztav_t_ae/#b_timer.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='T_ALL'
|| {? fld<>params_get().args.fld_vt || {! _it:=1..7 |! ($('POCZTAV.T'+$_it))():=fld() !} ?}
|| {? fld()='N' || POCZTAV.T_ALL:='N' ?}
?};
''


\type_name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca nazwę typu kolumny tabeli lub pola zmiennej
::   WE: _a [TABLE] - alias tabeli
::       _b [STRING] - akronim kolumny
::       _c [INTEGER] - dodatkowa informacja (0/1*): długość napisu, tabela w złączeniu
::   WY: nazwa typu kolumny lub '' w przypadku błędu
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG) | var_pres('_b')<>type_of('') | var_pres(_b,_a)<0
|| return('')
?};

_TAB:=_a;
_fld:=_b;
_ext:={? var_pres('_c')=type_of(0) || _c || 1 ?};

_ftp:=var_pres(_fld,_TAB,'diff_blob');

{? _ftp=27
|| _str:='STRING';
   {? _ext
   || '%1[%2]'[_str,$MS.fld_len(_TAB,_fld)]
   || _str
   ?}
|? _ftp=26
|| {? _ext=0
   || return('REFERENCE')
   ?};
   _max:=_TAB.fld_num();
   {! _ii:=1.._max
   |! {? _TAB.fld_acr(_ii)=_fld
      || return('_%1'[_TAB.fld_join(_ii)])
      ?}
   !}
|? _ftp=20 || 'REAL'
|? _ftp=22 || 'INTEGER'
|? _ftp=21 || 'DATE'
|? _ftp=29 || 'TIME'
|? _ftp=39 || 'IDADD'
|? _ftp=40 || 'IDPUT'
|? _ftp=38 || 'IDTIME'
|? _ftp=36 || 'SYS_MEMO'
|? _ftp=32 || 'TREE_REF'
|? _ftp=33 || 'BLOBRAW'
|? _ftp=37 || 'BLOBIMAGE'
|? _ftp=30 || 'REFERENCE'
|? _ftp=24 || 'HEADER'
|? _ftp=25 || 'MEMO'
|| ''
?}


\type_integer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca nazwę typu dla liczby całkowitej.
::   WE:
::   WY: 'INTEGER'
::----------------------------------------------------------------------------------------------------------------------
'INTEGER'


\type_real
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca nazwę typu dla liczby rzeczywistej.
::   WE:
::   WY: 'REAL'
::----------------------------------------------------------------------------------------------------------------------
'REAL'


\type_string
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca nazwę typu dla ciągu znaków.
::   WE:
::   WY: 'STRING'
::----------------------------------------------------------------------------------------------------------------------
'STRING'


\type_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca nazwę typu dla daty.
::   WE:
::   WY: 'DATE'
::----------------------------------------------------------------------------------------------------------------------
'DATE'


\type_time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca nazwę typu dla odstępu czasowego.
::   WE:
::   WY: 'TIME'
::----------------------------------------------------------------------------------------------------------------------
'TIME'


\type_reference
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca nazwę typu dla wskazania wiersza.
::   WE:
::   WY: 'REFERENCE'
::----------------------------------------------------------------------------------------------------------------------
'REFERENCE'


\type_length
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca domyślną długość dla pola podstawowego typu.
::   WE: _a [STRING]/[INTEGER] - nazwa/numer typu danych
::   WY: długość pola
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_type:=_a;

{? type_of(_type)=type_of('')
|| _type:=
      {? _type=exec('type_integer','#field') |
         _type=exec('type_real','#field')      || type_of(0)
      |? _type=exec('type_string','#field')    || type_of('')
      |? _type=exec('type_date','#field')      || type_of(date)
      |? _type=exec('type_time','#field')      || type_of(time)
      |? _type=exec('type_reference','#field') || type_of(null)
      ?}
?};
{? _type=type_of(0)    || 11
|? _type=type_of('')   || 20
|? _type=type_of(date) || 10
|? _type=type_of(time) || 8
|? _type=type_of(null) || 16
?}


\get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Zwraca wartość pola.
::   WE: _a TABLE - alias tabeli
::       _b STRING - akronim pola
::   WY: any/~~ - wartość pola/błąd
::----------------------------------------------------------------------------------------------------------------------
:: kontrola argumentów wywołania
{? var_pres('_a')<>type_of(SYSLOG) |
   var_pres('_b')<>type_of('') |
   var_pres(_b,_a)<=0
:: błędny argument
|| return()
?};

:: wartość pola
($'_a.%1'[_b])(_a)


\set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Ustawia wartość pola.
::   WE: _a TABLE - alias tabeli
::       _b STRING - akronim pola
::       _c ANY - wartość pola
::   WY: any/~~ - wartość pola/błąd
::----------------------------------------------------------------------------------------------------------------------
:: kontrola argumentów wywołania
{? var_pres('_a')<>type_of(SYSLOG) |
   var_pres('_b')<>type_of('') |
   var_pres('_c')<=0 |
   var_pres(_b,_a)<=0
:: błędny argument
|| return()
?};

:: ustaw wartość pola
($'_a.%1:=_b'[_b])(_a,_c)


\isEqual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Porównuje zawartości pola z wartością.
::   WE: _a TABLE - alias tabeli
::       _b STRING - akronim pola
::       _c ANY - wartość do porównaia
::   WY: 0/1/~~ - wartość pola różna/zgodna/błąd
::----------------------------------------------------------------------------------------------------------------------
:: kontrola argumentów wywołania
{? var_pres('_a')<>type_of(SYSLOG) |
   var_pres('_b')<>type_of('') |
   var_pres('_c')<=0
:: błędny argument
|| return()
?};

_val:=exec('get','#field',_a,_b);
{? type_of(_val)=type_of(_c)
:: porównaj wartości
|| _val=_c
|| ~~
?}


\choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Pozwala wybrać kolumnę wskazanej tabeli lub kolumnę ze złączeń.
::   WE: _a [ARRAY] - tablica parametrów działania tworzona przez choose_par
::       [_b] [STRING/ARRAY] - akronimy kolumn, na których ustawić kursor
::   WY: akronim wybranego pola
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_pth:=
   {? var_pres('_b')=type_of('') || spli_str(_b,',')
   |? var_pres('_b')=type_of(obj_new(1)) || _b
   || ~~
   ?};

:: przygotuj interfejs użytkownika
_buf:=exec('choose_buf','#field',_par);

:: wczytaj i udostępnij dane
_buf.load(_par).select(_pth)


\choose_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy pseudoobiekt upraszczający zasadniczy kod.
::   WE: _a [ARRAY] - tablica parametrów działania tworzona przez choose_par
::   WY: tablica nazwana (pseudoobiekt)
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_buf:=obj_new('PAR','BUF','load','scan','add','select');
_buf.PAR:=_par;

_BUF:=tab_tmp(2,
   'PARENT','TREE_REF','Złączenie'@,
   'NUMBER','INTEGER','Numer'@,
   'TABLE','STRING[8]','Tabela'@,
   'FIELD','STRING[8]','Akronim'@,
   'NAME','STRING[60]','Nazwa'@,
   'TYPE','STRING[11]','Typ'@,
   'NODES','INTEGER','Podrzędne'@
);
_wid:='#fchoose_';
:: utwórz okienko wertowania i redakcji
_wer:=_BUF.mk_sel('Kolumny tabeli "%1"'@[_par.TABLE.comment()],'N',0,_wid+'wer',,,,1);
_red:=_BUF.mk_edit('Kolumna tabeli'@,0,_wid+'red');
:: dodawane będą wyspecyfikowane kolumny
_col:=spli_str(_par.VIEW_COLUMNS,',');
_max:=40;
_ext:=4;
{! _ii:=1..obj_len(_col)
|! _len:=MS.fld_len(_BUF,_col[_ii]);
   _len+={? _ii=1 || _ext ?};
   _len+=_par.MAX_JOIN*_ext;
   {? _len>_max
   || _len:=_max
   ?};
:: dodaj kolumnę do okienek
   _BUF.win_fld(_wer,,_col[_ii],,,_len);
   _BUF.win_efld(_red,,_col[_ii],,,_max)
!};
:: dodaj akcje i przyciski okienek
_BUF.win_act(_wer,,'Formuła','Wybierz'@@,,,,"sel_exit()",1,,,,'W');
_BUF.win_act(_wer,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,,"exec('zwin_rozwin','#tree')",,,,,'R');
_BUF.win_act(_wer,,'Szukaj');
_BUF.win_act(_wer,,'Kolejność');
_fml:="
   {? _a=0 || return() ?};
   _TAB:=cur_tab(1,1);
   _wnd:=cur_win(1,1);
   _TAB.actions_grayed(_wnd);
";
{? _par.CAN_CHOOSE.BRANCH=0
:: zabroniony wybów węzłów
|| _fml+="{? _TAB.NODES<>0 || _TAB.actions_grayed(_wnd,'W') ?};"
?};
{? _par.CAN_CHOOSE.LEAF=0
:: zabroniony wybów liści
|| _fml+="{? _TAB.NODES=0 || _TAB.actions_grayed(_wnd,'W') ?};"
?};
_fml+="~~";
_BUF.win_act(_wer,,'Rekord',,,,$_fml);
exec('ok_esc','#window',_BUF,_red);

:: ustaw okienka
_BUF.win_sel(_wer);
_BUF.win_edit(_red);

:: interfejs uzytkownika
_buf.BUF:=_BUF;

:: wczytaj dane kolumn
_buf.load:="
   {? type_of(.PAR)=type_of(~~)
   || .PAR:=_a
   ?};
:: pobierz dane kolumn tabeli
   .scan(.PAR.TABLE,null,0,'');
   _loop:=.BUF.first();
   {!
   |? _loop
   |! .BUF.prefix(#.BUF.ref());
      .BUF.NODES:=.BUF.size();
      .BUF.prefix();
      .BUF.put();
      _loop:=.BUF.next()
   !};
   .BUF.first();
   return(.)
";

:: wczytaj dane kolumn z uwzględnieniem kolumn w złączeniach
_buf.scan:="
   _TAB:=_a;
   _ref:=_b;
   _lvl:=_c;
   _pth:=_d;
   _chk:='[%1]'[!_TAB];
   {? (.PAR.MAX_JOIN>=0 & .PAR.MAX_JOIN<_lvl) | _pth*_chk<>0
::    przekroczono poziom złączeń lub wykryto cykl
   || return()
   ?};
   .BUF.cntx_psh();
   _max:=_TAB.fld_num();
   {! _ii:=1.._max
   |! _ftp:=exec('type_name','#field',_TAB,_TAB.fld_acr(_ii),0);
      {? var_pres(_ftp,.PAR)=type_of(0) & ($'_a.%1'[_ftp])(.PAR)<>0
::       kolumna nie jest typu pomijanego
      || {? .add(_ref,_TAB,_ii)
         || {? (_acr:=_TAB.fld_join(_ii))<>''
::             dodaj kolumny w kolejnym złączeniu
            || .scan(($_acr)(),.BUF.ref(),_lvl+1,_pth+_chk)
            ?}
         ?}
      ?}
   !};
   .BUF.cntx_pop()
";

:: dodanie wiersza do bufora
_buf.add:="
   _ref:=#_a;
   _TAB:=_b;
   _num:=_c;
   .BUF.blank();
   .BUF.PARENT:=_ref;
   .BUF.NUMBER:=.BUF.size()+1;
   .BUF.TABLE:=2-!_TAB;
   .BUF.FIELD:=_TAB.fld_acr(_num);
   .BUF.NAME:=_TAB.fld_name(_num);
   .BUF.TYPE:=exec('type_name','#field',_TAB,.BUF.FIELD);
   .BUF.add()
";

:: wybór kolumn
_buf.select:="
   {? var_pres('_a')=type_of(obj_new(1))
::    podano ścieżkę do elementu
   || _pth:=_a;
      _stt:=type_of('');
      _len:=obj_len(_pth);
      _ref:=0;
      {! _ii:=1.._len
      |? type_of(_pth[_ii])=_stt & _pth[_ii]<>'' &
         .BUF.find_tab(,'PARENT',,'=',_ref,'FIELD',,'=',_pth[_ii])
::       jeśli jest element ścieżki, to postaraj się go odszukać
      |! _ref:=#.BUF.ref()
      !}
   || .BUF.first()
   ?};
   {? .BUF.select(,1)
   || _col:=.BUF.FIELD;
      {!
      |? .BUF.seek(.BUF.PARENT,,1)
      |! _col:='%1().%2'[.BUF.FIELD,_col]
      !};
::    pełne odwołanie do pola
      '%1.%2'[.BUF.TABLE,_col]
   || ''
   ?}
";

:: konfiguracja
_buf


\choose_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca pseudoobiekt parametrów formuły choose dla podanej tabeli.
::       Dostępne pola:
::       TABLE - alias tabeli,
::       MAX_JOIN - maksymalna liczba złączeń (domyślnie 1),
::       INTEGER - uwzględniaj pola wypu INTEGER (domyślnie 1),
::       REAL - uwzględniaj pola typu REAL (domyślnie 1),
::       ...
::       IDTIME - uwzględniaj pola typu IDTIME (domyślnie 1),
::       VIEW_COLUMNS - lista wyświetlanych w widoku kolumn,
::       CAN_CHOOSE - możliwość wyboru wiersza.
::       Metody usprawniające kodowanie:
::       set_all(0/1) - włączenie/wyłączenie wszystkich typów,
::       set_simple(0/1) - włączenie/wyłączenie wszystkich typów prostych (w tym złączeń),
::       set_complex(0/1) - włączenie/wyłączenie wszystkich typów złożonych (w tym TREE_REF),
::       set_system(0/1) - włączenie/wyłączenie wszystkich typów systemowych,
::       setup_view(lista kolumn) - akronimy kolumn (TABLE,FIELD,NAME,TYPE) oddzielone przecinakami,
::       default_view() - ustawienie domyślnego widoku (FIELD,NAME)
::       short_view() - ustawienie uproszczonego widoku (NAME)
::       full_view() - ustawienie pełnego widoku (NAME,TABLE,FIELD,TYPE)
::       dev_view() - ustawienie widoku programisty (TABLE,FIELD,TYPE,NAME).
::       allow_branches(0/1) - zezwalaj na wybów gałęzi
::       allow_leafs(0/1) - zezwalaj na wybów liści
::   WE: [_a] [STRING/TABLE] - akronim/alias tabeli
::   WY: tablica nazwana (pseudoobiekt)
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new(
:: tabela "początkowa"
   'TABLE',
:: maksymalna liczba złączeń
   'MAX_JOIN',
:: uwzględniane kolumny typów prostych
   'INTEGER','REAL','STRING','DATE','TIME','REFERENCE',
:: uwzględniane kolumny typów złożonych
   'TREE_REF','SYS_MEMO','BLOBIMAGE','BLOBRAW',
:: uwzględniane kolumny systemowe
   'IDADD','IDPUT','IDTIME',
:: metody usprawniające obsługę typów
   'set_all','set_simple','set_complex','set_system',
:: kolumny w widoku, akronimy oddzielony przecinkami: TABLE, FIELD, NAME, TYPE
   'VIEW_COLUMNS','setup_view','default_view','short_view','full_view','dev_view',
:: możliwość wyboru wiersza
   'CAN_CHOOSE','allow_branches','allow_leafs'
);
_par.CAN_CHOOSE:=obj_new('BRANCH','LEAF');

:: włączenie/wyłączenie wszystkich typów
_par.set_all:="
   _val:=(_a<>0);
   .set_simple(_val);
   .set_complex(_val);
   .set_system(_val);
   _val
";

:: włączenie/wyłączenie wszystkich typów prostych
_par.set_simple:="
   _val:=(_a<>0);
   .INTEGER:=_val;
   .REAL:=_val;
   .STRING:=_val;
   .DATE:=_val;
   .TIME:=_val;
   .REFERENCE:=_val;
   _val
";

:: włączenie/wyłączenie wszystkich typów złożonych
_par.set_complex:="
   _val:=(_a<>0);
   .TREE_REF:=_val;
   .SYS_MEMO:=_val;
   .BLOBIMAGE:=_val;
   .BLOBRAW:=_val;
   _val
";

:: włączenie/wyłączenie wszystkich typów systemowych
_par.set_system:="
   _val:=(_a<>0);
   .IDADD:=_val;
   .IDPUT:=_val;
   .IDTIME:=_val;
   _val
";

:: ustawienie kolumn widoku
_par.setup_view:=".VIEW_COLUMNS:=_a";

:: ustawienie domyślnego widoku
_par.default_view:=".setup_view('FIELD,NAME')";

:: ustawienie uproszczonego widoku
_par.short_view:=".setup_view('NAME')";

:: ustawienie pełnego widoku
_par.full_view:=".setup_view('NAME,TABLE,FIELD,TYPE')";

:: ustawienie widoku programisty
_par.dev_view:=".setup_view('TABLE,FIELD,TYPE,NAME')";

:: zezwalaj na wybów gałęzi
_par.allow_branches:=".CAN_CHOOSE.BRANCH:=_a";

:: zezwalaj na wybów liści
_par.allow_leafs:=".CAN_CHOOSE.LEAF:=_a";

:: ustal wartości początkowe
_par.TABLE:=
   {? var_pres('_a')=type_of('') & var_pres(_a)=type_of(SYSLOG) || ($_a)()
   |? var_pres('_a')=type_of(SYSLOG) || _a
   || ~~
   ?};
_par.MAX_JOIN:=1;
_par.set_all(1);
_par.default_view();
_par.allow_branches(1);
_par.allow_leafs(1);

:: parametry
_par


:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 e38f47904851df1bf01abc228cf21e3db6682fed5074746b079c50107409f8fec6f6c2d377f76081d976923fbf64a0db2c1df87664ae2554e56e3ccd7a0dde5367cb363359b99ccf1549f8511bcba87dc562ffe8ef50b69cb4381931055d7db0fcef09c3161cd084ef80d468d8e33a1207c0783f03b01df8c9ba742e549ce313
