:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #tm_stamp.fml
:: Utworzony: 29.01.2015
:: Autor: WH
::======================================================================================================================
:: Zawartość: Uniwersalne formuły do obsługi znaczników czasowych (tm_stampów)
::======================================================================================================================


\create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: Zwraca tm_stamp dla podanej daty i czasu
::   WE: [_a] - data
::       [_b] - czas
::   WY: REAL - TM_STAMP
::  OLD: \tm_stamp/libfml.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_date:={? var_pres('_a')=4 || _a || date() ?};
_time:={? var_pres('_b')=5 || _b
       |? var_pres('_b')=1 || time(0,0,0)
                           || time()
       ?};
_result:=0;

:: Dla roku 0 wyliczmy po swojemu
{? _date~1=0
|| _result:=(_date~2)*exec('month','#tm_stamp')+(_date~3)*exec('day','#tm_stamp')+exec('time','#tm_stamp',_time)
:: Ponieważ funkcja systemowa tm_stamp() nie działa powyżej 23 godziny, trzeba kombinować
|? _time~1>23
|| _result:=tm_stamp(_date~1,_date~2,_date~3,0,0,0,0);
   _result+=exec('time','#tm_stamp',_time)
|| _result:=tm_stamp(_date~1,_date~2,_date~3,_time~1,_time~2,_time~3,0)
?};
_result


\to_java
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Przekształca podany tm_stamp MacroBASE do tm_stampa stosowanego w javie
::       Tm_stampy w javie mają o 3 zera mniej, więc podanego tm_stampa trzeba podzielić przez 1000
::   WE: _a - TM_STAMP
::   WY: REAL - TM_STAMP dla javy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tm_stamp:=_a;
_result:=_tm_stamp/1000;
_result


\fsecond
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: zwraca ułamek sekundy wg tm_stamp()
::   WY: REAL
::  OLD: \tm_fsecond/libfml.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
1


\second
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: zwraca sekundę wg tm_stamp()
::   WY: REAL
::  OLD: \tm_second/libfml.fml
::  OLD: \get_second/px_param.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
1000000


\minute
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: zwraca minutę wg tm_stamp()
::   WY: REAL
::  OLD: \tm_minute/libfml.fml
::  OLD: \get_minute/px_param.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
60000000


\hour
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: zwraca godzinę wg tm_stamp()
::   WY: REAL
::  OLD: \tm_hour/libfml.fml
::  OLD: \get_hour/px_param.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
3600000000


\day
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: zwraca dzień wg tm_stamp()
::   WY: REAL
::  OLD: \tm_day/libfml.fml
::  OLD: \get_day/px_param.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
86400000000


\week
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: zwraca tydzień wg tm_stamp()
::   WY: REAL
::  OLD: \tm_week/libfml.fml
::  OLD: \get_week/px_param.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
604800000000


\month
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca liczbę oznaczajacą w nomenklaturze tm_stamp 1 miesiac (31 dni)
::   WY: REAL
::  OLD: \get_month/px_param.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
2678400000000


\quarter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca liczbę oznaczajacą w nomenklaturze tm_stamp 1 kwartal (3 miesiace, 93 dni)
::   WY: REAL
::  OLD: \get_quarter/px_param.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
8035200000000


\time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: zwraca odstęp czasowy w postaci tm_stamp()
::   WE: _a - TIME
::   WY: REAL
::  OLD: \tm_time/libfml.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
((*_a)*exec('minute','#tm_stamp'))$0


\tm_stamp2date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca typ DATE z przekazanego tm_stamp()
::   WE: _a - REAL - tm_stamp
::   WY: DATE
::  OLD: \tm_stamp2date/libfml.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tm_stamp:=_a;
_result:=date(0,0,0);

_form:=tm_form(_tm_stamp);
_result:=date( #(4+_form),
               #(2 + (5-_form)),
               #(2 + (8-_form)));
_result


\tm_stamp2time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca typ TIME z przekazanego tm_stamp()
::   WE: _a - REAL - tm_stamp
::   WY: TIME
::  OLD: \tm_stamp2time/libfml.fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tm_stamp:=_a;
_result:=time(0,0,0);

_form:=tm_form(_tm_stamp);
_result:=time( #(2 + (11-_form)),
               #(2 + (14-_form)),
               #(2 + (17-_form)));
_result


\tm_stamp2longtime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Zwraca typ TIME z przekazanego tm_stamp() - potrafi zwrócić TIME dłuższy niż 24h
::   WE: _a - REAL - tm_stamp
::   WY: TIME
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tm_stamp:=_a;
_result:=time(0,0,0);

_tm_hour:=exec('hour','#tm_stamp');
_tm_min:=exec('minute','#tm_stamp');
_tm_sek:=exec('second','#tm_stamp');

_hour:=_tm_stamp/_tm_hour;
_hour_floor:=exec('floor','#math',_hour);
_tail:=(_hour-_hour_floor)*_tm_hour;
_tail:=exec('round_trash','#math',_tail);

_min:=_tail/_tm_min;
_min_floor:=exec('floor','#math',_min);
_tail:=(_min-_min_floor)*_tm_min;
_tail:=exec('round_trash','#math',_tail);

_sek:=_tail/_tm_sek;
_sek_floor:=exec('floor','#math',_sek);

_result:=time(_hour_floor,_min_floor,_sek_floor);
_result


\tm_stamp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [8.40]
:: OPIS: Zwraca liczbe reprezentującą znacznik czasowy
::   WY: tm_stamp
::  OLD: \tm_stam/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
KST_WAR.tm_stamp


\tm_stamp_str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Zwraca tekstową reprezentacją znacznika czasowego.
::   WE:
::   WY: wartość znacznika czasowego zamieniona na napis
::----------------------------------------------------------------------------------------------------------------------
$exec('tm_stamp','#tm_stamp')


\to_string
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca STRING w formacie 'YYYY/MM/DD HH:MM:SS' lub 'YYYY/MM/DD' na podstawie przekazanego tm_stampa
::   WE: _a - REAL - tm_stamp()
::       _b - INTEGER - [0]/1 - tryb formatowania: 0 - 'YYYY/MM/DD HH:MM:SS', 1 - 'YYYY/MM/DD'
::   WY: STRING[19] w formacie 'YYYY/MM/DD HH:MM:SS'
::  OLD: \tm_stamp2str/libfml.fml
::----------------------------------------------------------------------------------------------------------------------
_tm_stamp:=_a;
_mode:=0;
{? var_pres('_b')=type_of(0)
|| _mode:=_b
?};
{? _tm_stamp>0
|| {? _mode=0
   || _result:=19+tm_form(_tm_stamp)
   |? _mode=1
   || _result:=10+tm_form(_tm_stamp)
   ?}
||
:: tm_stamp zerowy
   {? _mode=0
   || _result:='0000/00/00 00:00:00'
   |? _mode=1
   || _result:='0000/00/00'
   ?}
?};
_result


\diff_tm_stamp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Porównuje dwa tm_stamp i zwraca różnice w sekundach o ile pierwszy jest większy od drugiego
::   WE: _a - tm_stamp 1
::       _b - tm_stamp 2
::   WY: sekundy
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? _a>=_b
|| _dt1:=exec('tm_stamp2date','#tm_stamp',_a);
   _dt2:=exec('tm_stamp2date','#tm_stamp',_b);
   _tm1:=exec('tm_stamp2time','#tm_stamp',_a);
   _tm2:=exec('tm_stamp2time','#tm_stamp',_b);
   {? _dt1=_dt2
   || _res:=*(_tm1-_tm2)*60
   || _res:=(_dt1-_dt2)*24*60*60;
      _res+=*(_tm1-_tm2)*60
   ?}
?};
_res


\round
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Zaokrągla podanego tm_stampa do wartości całkowitej podanej jednostki
::   WE: _a - REAL - tm_stamp którego zaokrąglić
::       _b - REAL - jednostka wg której robić zaokrąglenie np exec('hour','#tm_stamp')
::   WY: REAL - zaokrąglony tm_stamp
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_input:=_a;
_step:=_b;

_div:=_input/_step;
_div:=_div$0;
_result:=_div*_step;
_result


\string2stamp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Przekształca stringa w tm_stamp
::   WE: _a - STRING - wejściowy napisa w formacie: '2018/11/30' lub '2018/10/11 15:00' lub '2018/10/11 10:00:00'
::   WY: REAL - tm_stamp
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_string:=_a;

_result:=0;

{? _string*' '>0
||
:: Jest separator dat i godzin
   _split:=spli_str(_string,' ');
   {? obj_len(_split)>1
   || _s1:=_split[1];
      _s2:=_split[2];
      _res1:=exec('string2stamp','#tm_stamp',_s1);
      _res2:=exec('string2stamp','#tm_stamp',_s2);
      _result:=_res1+_res2
   ?}
||
:: Brak separatora dat i godzin, jest tylko data albo tylko godzina
   {? _string*':'>0
   ||
::    Tylko godzina
      _time:=exec('str2time','#convert',_string);
      _result:=exec('create','#tm_stamp',date(0,0,0),_time)
   |? _string*'/'>0
   ||
::    Tylko data
      _date:=exec('str2date','#convert',_string);
      _result:=exec('create','#tm_stamp',_date,time(0,0,0))
   ?}
?};
_result


\to_utc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Przerabia przekazanego tm_stampa na liczbę w podobnej notacji którą zwraca utc_get()
::       Uwaga! - przy przesunięciu czasu z letniego na zimowy da dwa razy ten sam wynik
::   WE: _a - REAL - tm_stamp
::   WY: REAL - czas w nomenklaturze utc
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_input:=_a;
_dzielnik:=1000000;
_tm_stamp:=((SYSLOG.tm_stamp/_dzielnik)$0);
_utc:=(utc_get()#0);
_diff:=_tm_stamp-_utc;
_result:=_input/_dzielnik-_diff;
_result

:Sign Version 2.0 jowisz:1048 2021/04/09 15:24:22 25007fa3316d76c9ae6581456b11eb784f6b32a707a2003db1a1bdd71696c8292ffc8d6842cde51876d57fe4a76f745b04a508869eb072b3b0037e315896471eb3aa34b1d0dffb51502ee2fb28701fcacd5adad15d4ef799b8d2cd96394002b74096226a1faa63cf86aaf977c609c64e89050a9cd6281458e7f86bc9c9996ff1
