:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #stalesys.fml [2002]
:: Utworzony: 2002/07/04
:: Autor: GS
::======================================================================================================================
:: Zawartosc: Funkcje odpowiedzialne za obsługę stałych systemu.
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Konfiguruje tabele obsługujące stałe systemu.
::   WE: [_a] [NUMBER] - Przetwarzanie wsadowe (bez pytań) [0*/1].
::       [_b] [NUMBER] - Import również wartości [0*/1] - wartość ma znaczenie dla _a=1.
::  OLD: \init/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
{? cli_ver<>'jterm'
|| return
?};

_batch:=var_pres('_a')=type_of(0) & _a;
_zakres:=var_pres('_b')=type_of(0) & _b;

KST_DEF.cntx_psh();
KST_DEF.prefix();
: czy aktualizować konfiguracje przy starcie zerowym?
_import:=
   {? ~KST_DEF.first()
   || exec('init_wer','#stalesys');
      _batch | FUN.ask('Nie znaleziono ustawień stałych systemu.\nCzy uzupełnić konfigurację?'@)
   ?};
KST_DEF.cntx_pop();

: aktualizuj
{? _import
|| exec('imp_def','#stalesys');
   {? {? _batch
      || _zakres
      || FUN.ask('Czy uzupełnić wartości niektórych stałych systemu na podstawie zawartości pliku?'
            '\n\nWybrane stałe systemu (np. adresy serwerów) mogą być uzupełnione automatycznie.'
            '\n(ułatwi i przyśpieszy to przygotowanie programu do pracy)'@)
      ?}
   || exec('imp_war','#stalesys')
   ?}
?}


\init_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Konfiguruje tabele obsługujące stałe systemu - weryfikacja kompletności danych.
::  OLD: \init/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
exec('init_kst','#stalesys',FINFO,HINFO,INFO,KINFO,KONST,KPARAM,KST,KST_PAR,KST_PPK,TINFO,PROJINFO,XINFO)


\edytuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Udostępnia do edycji stałe systemu. Aktualizowana jest zawartość wszystkich zestawów stałych, następnie
::       wskazany zestaw udostępniany jest do edycji w okienku redagowania. Poprawność danych może być zweryfikowana
::       przez formułę. Jeśli dane zostały uznane za poprawne, to następuje ich zapis w bazie danych. Możliwe jest
::       określenie daty, od której będą obowiązywały wprowadzone zmiany. Istnieje możliwość wymuszenia zapisu innych
::       zestawów niż edytowany.
::   WE: _a [TABLE]  - alias do zestawu stałych
::       _b [STRING] - akronim okienka redagowania zestawu
::       _c [RULE]   - formuła weryfikująca poprawność danych, jeśli pominięty, to dane będą zawsze uznane za poprawne
::       _d [NUMBER] - jeśli różny od zera, to zapis bez dialogu z użytkownikiem (bez pytania o datę obowiązywania
::                     danych), gdy typu innego niż liczba lub 0, wyświetlane jest okienko potwierdzenia zapisu z opcją
::                     zmiany daty, od której mają obowiązywać wprowadzone zmiany
::       .. - aliasy do dodatkowych zestawów stałych, których wartości mają być zapisane
::       .. - akronimy pól z podanego wczesniej zestawu
::   WY: Data z jaką zapisane zostały zmiany lub 0/0/0 jeśli zmiany nie zostały zapisane.
::
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \edytuj/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_data:=exec('od_daty','#stalesys',var_pres('_d')=1 & _d);
{? _data.OK<>1
|| return()
?};

: wczytaj wartości wszystkich stałych
exec('stalesys','#stalesys',_data.OD);
_a.win_edit(_b);
: udostępnij zestaw do edycji z weryfikacją danych
{? _a.edit({? var_pres('_c')=3 || _c || "1" ?})
|| _od:=exec('zapisz','#stalesys',_data.OD,_a);
   _tt:=type_of(SYSLOG);
   _args:='';
   {? _>4
   || {! _arg:=5.._
      |! {? type_of(_[_arg])<>_tt
         || _args+=',\''+_[_arg]+'\''
         || {? _args<>''
            || ($('exec(\'zapisz\',\'#stalesys\',_a'+_args+')'))(_data.OD)
            ?};
            _args:=','+!_[_arg]
         ?}
      !}
   ?};
   {? _args<>''
   || ($('exec(\'zapisz\',\'#stalesys\',_a'+_args+')'))(_data.OD)
   ?};
   _data.OD
|| exec('stalesys','#stalesys');
   date(0,0,0)
?}


\jest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Sprawdza, czy dla każdej stałej zestawu określona jest wartość (nawet pusta).
::   WE: _a - alias do zestawu stałych
::   WY: 0 jeśli dla ktorejś ze stałych nie została określona jej wartość - brak rekordow w tabeli KST_WAR
::  OLD: \jest/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
: zweryfikuj kontekst firmy
exec('firma_test','#firma');

_zes:=2-!_a;

KST_WAR.cntx_psh();
KST_WAR.index('KST_DEF');

KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix(_zes,_zes);

_cntx_pop:="
   KST_WAR.cntx_pop();
   KST_MAP.cntx_pop()
";

{! _ndx:=1.._a.fld_num
|! _fld:=_a.fld_acr(_ndx);
   {? KST_MAP.find_key(_fld,_fld)
   || {? KST_MAP.KST_DEF=null
      || FUN.info('Brak definicji dla stałej %1 w zestawie %2.'@[_fld,_zes]);
         _cntx_pop();
         return(0)
      |? KST_MAP.KST_DEF().ZAPIS='T'
      || KST_WAR.prefix({? KST_DEF.WSPOLNA<>'T' || REF.FIRMA || null ?});
         {? ~KST_WAR.find_key(KST_MAP.KST_DEF)
         || _cntx_pop();
            return(0)
         ?}
      ?}
   || FUN.info('Brak konfiguracji stałej %1 w zestawie %2.'@[_fld,_zes]);
      _cntx_pop();
      return(0)
   ?}
!};

_cntx_pop()


\daty_zmian
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Zwraca alias tabeli tymczasowej zawierającej daty zmian wskazanych stałych
::   WE: _a - (opcjonalnie) alias tabeli tymczasowej
::       _b - (opcjonalnie) alias zestawu stałych
::       _c.._m - (opcjonalnie) symbole stałych
::       _n - (opcjonalnie) alias zestawu stałych
::       _o.. - (opcjonalnie) symbole stałych
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
: wartość zwracana
_TAB:=
   {? var_pres('_a')<>type_of(SYSLOG)
   || tab_tmp(1,'DATE','DATE','Data zmiany','UIDREF','STRING[48]','Identyfikator')
   || _a
   ?};

_void:=type_of(~~);
_string:=type_of('');
_table:=type_of(SYSLOG);

KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_DEF.cntx_psh();
KST_WAR.cntx_psh();
KST_WAR.index('FIRMA');

_fld:='';
_ZES:=~~;
{! _ai:=2.._
|! {? type_of(_[_ai])=_table
   || &_ZES;
      _ZES:=_[_ai];
      _fld:=''

   |? type_of(_[_ai])=_string
   || _fld:=_[_ai]

   || &_ZES;
      _ZES:=~~;
      _fld:=''
   ?};

   {? type_of(_ZES)=_table & _fld<>''
   || _VAR:=2-!_ZES;
      KST_MAP.prefix(_VAR,_VAR);
      {? KST_MAP.find_key(_fld,_fld)
      || KST_WAR.prefix(
            KST_MAP.KST_DEF,
            {? KST_MAP.KST_DEF().WSPOLNA='N'
            || exec('ref_firma','ustawienia')
            || null
            ?}
         );

         _val:=~~;
         _loop:=KST_WAR.first();
         {!
         |? _loop
         |! {? ~_TAB.find_key(KST_WAR.DATA) & (type_of(_val)=_void | _val<>KST_WAR.WARTOSC)
            || _TAB.DATE:=KST_WAR.DATA;
               _val:=KST_WAR.WARTOSC;
               _TAB.UIDREF:=KST_WAR.uidref();
               _TAB.add()
            ?};
            _loop:=KST_WAR.next()
         !}

      || FUN.error('Nie znaleziono definicji stałej dla pola "%1" zmiennej "%2".'@[_fld,_VAR])
      ?}
   ?}
!};

KST_WAR.cntx_pop();
KST_DEF.cntx_pop();
KST_MAP.cntx_pop();

_TAB


\czytaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje wartości stałych systemu
::   WE: _a - data, na którą mają być ustalone stale systemu, jeśli pominięta, to przyjęta zostanie bieżąca
::       _b - (opcjonalnie) alias zestawu stałych
::       _c.._m - (opcjonalnie) symbole stałych
::       _n - (opcjonalnie) alias zestawu stałych
::       _o.. - (opcjonalnie) symbole stałych
::  OLD: \czytaj/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
: zweryfikuj kontekst firmy
{? cli_ver='jterm' & REF.WFIRM
|| exec('firma_test','#firma')
?};

_od:={? var_pres('_a')<>4 || date() || _a ?};
_tt:=type_of(SYSLOG);

{? _<2
|| KST_ZES.cntx_psh();
   KST_ZES.index('SYMBOL');
   KST_ZES.prefix();
   _loop:=KST_ZES.first();
   {!
   |? _loop
   |! {? var_pres(KST_ZES.SYMBOL)=_tt
      || exec('czytaj_zes','#stalesys',_od,($KST_ZES.SYMBOL)())
      ?};
      _loop:=KST_ZES.next()
   !};
   KST_ZES.cntx_pop()
|| _fml:="exec('czytaj_zes','#stalesys',_a,_b";
   _exe:=_fml;
   _zes:=_b;
   {? _>2
   || {! _arg:=3.._
      |! {? type_of(_[_arg])=_tt
         || ($(_exe+')'))(_od,_zes);
            _exe:=_fml;
            &_zes;
            _zes:=_[_arg]
         |? type_of(_[_arg])=2
         || _exe+=',\''+_[_arg]+'\''
         ?}
      !}
   ?};
   ($(_exe+')'))(_od,_zes)
?}


\czytaj_zes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje wartości zestawu stałych systemu
::   WE: _a - data, jeśli pominięta, to przyjęta zostanie bieżąca
::       _b - alias do zestawu stałych systemu
::       .. - opcjonalnie symbole stałych
::  OLD: \czytaj_zes/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_zes:=2-!_b;
_od:={? var_pres('_a')<>4 || date() || _a ?};

{? +app_info('web_sesid')
|| _b.blank();
   REF.FIRMA:=exec('from_sym','#firma',exec('firma_symbol','#firma'))
?};

KST_WAR.index('KST_DEF');
KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix(_zes,_zes);
{? _<3
|| _len:=_b.fld_num();
   _buf:=obj_new(_len);
   {! _ndx:=1.._len
   |! _buf[_ndx]:=_b[_ndx]
   !};
   _b.blank();
   _loop:=KST_MAP.first();
   {!
   |? _loop
   |! {? KST_MAP.KST_DEF().ZAPIS<>'T'
      || {! _ndx:=1.._len
         |? {? _b.fld_acr(_ndx)=KST_MAP.SYMBOL
            || _b[_ndx]:=_buf[_ndx];
               0
            || 1
            ?}
         !}
      |? var_pres(KST_MAP.SYMBOL,_b)>0
      || _firma:={? KST_MAP.KST_DEF().WSPOLNA<>'T' || REF.FIRMA || null ?};
         exec('czytaj_war','#stalesys',_b,KST_MAP.SYMBOL,_firma,KST_MAP.KST_DEF,_od)
      ?};
      _loop:=KST_MAP.next()
   !}
|| {! _ndx:=3.._
   |! _fld:=_[_ndx];
      {? var_pres(_fld,_b)>0 & KST_MAP.find_key(_fld,_fld) & KST_MAP.KST_DEF().ZAPIS='T'
      || _firma:={? KST_MAP.KST_DEF().WSPOLNA<>'T' || REF.FIRMA || null ?};
         exec('czytaj_war','#stalesys',_b,_fld,_firma,KST_MAP.KST_DEF,_od)
      ?}
   !}
?};
KST_MAP.cntx_pop()


\czytaj_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje wartości zestawu stałych systemu
::   WE: _a - alias do zestawu stałych systemu
::       _b - akronim pola w zestawie stałych
::       _c - wskazanie na rekord w tabeli FIRMA
::       _d - wskazanie na definicję stałej
::       _e - data
:: UWAGA! Poprawność wywołania nie jest weryfikowana. Wykorzystanie tylko przy indeksie KST_DEF tabeli KST_WAR.
::  OLD: \czytaj_war/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_WAR.prefix(_c,_d);
{? KST_WAR.find_le(_e)
|| _val:=exec('str2val','#convert',KST_WAR.WARTOSC);
   {? type_of(_val)=type_of(($('_a.'+_b))(_a))
   || ($('_a.'+_b+':=_b'))(_a,_val)
   ?}

|| _a.cntx_psh();
   _a.blank();
   _empty:=($('_a.'+_b))(_a);
   _a.cntx_pop();
   ($('_a.'+_b+':=_b'))(_a,_empty)
?}


\od_daty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Ustala datę, na którą będą obsługiwane stałe systemu.
::   WE: _a [INTEGER/DATE] - jeśli liczba różna od 0, to przyjmowana data bieżąca i brak dialogu, jeśli data różna od
::          0/0/0, to przyjmowana podana data i brak dialogu, wpp data pobrana z dialogu z domyślną bieżącą datą
::   WY: wskazanie na tabelę nazwaną o strukturze:
::          OD - ustalona data
::          OK - czy można kontynuować
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('OD','OK');
_ret.OD:=date();
_ret.OK:=1;

_at:=var_pres('_a');

{? _at=type_of(null)
|| _ret.OD:=date(0,0,0);
   return(_ret)

|? _at=type_of(1) & _a
|| return(_ret)

|? _at=type_of(date()) & _a<>date(0,0,0)
|| _ret.OD:=_a;
   return(_ret)
?};

undefine();
define('OD',_ret.OD,'Data zmiany'@,'Data, od której obowiązywały będą podane wartości'@);
def_btn('text=%1,icon=xwin16.png:13'['OK'@],'key:F2');
def_btn('text=%1,icon=xwin16.png:14'['Anuluj'@],'key:Esc');
{? def_edit(,'Stałe systemu'@)
|| _ret.OD:=DEFINE.OD
|| _ret.OK:=0
?};
undefine();

_ret


\zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zapisuje wartości stałych
::   WE: _a - jeśli różny od zera, to zapis bez dialogu z użytkownikiem, jeśli data nie 0/0/0, to bez dialogu i stałe
::            zostaną zapisane z podaną datą
::       .. - opcjonalnie aliasy zestawów stałych
::       .. - opcjonalnie akronimy pól stałych systemu
:: UWAGA! Poprawność opcjonalnych argumentów wywołania nie jest weryfikowana. Zakłada się że są to aliasy do właściwych
::        zmiennych systemowych oraz akronimy pól tych zmiennych.
::  OLD: \zapisz/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
: zweryfikuj kontekst firmy
exec('firma_test','#firma');
_data:=exec('od_daty','#stalesys',
   {? var_pres('_a')=type_of(null) || null
   |? var_pres('_a')>0 || _a
   ?}
);

{? _data.OK
:  potwierdzono zapis
|| _od:=_data.OD;
   KST_ZES.cntx_psh();
   KST_ZES.index('SYMBOL');
   KST_ZES.prefix();
   {? _>1
   || _fml:="exec('zapisz_zes','#stalesys',_a,_b";
      _exe:=_fml;
      _zes:=_b;
      {! _arg:=3.._
      |! {? type_of(_[_arg])=2
         || _exe+=',\''+_[_arg]+'\''
         |? KST_ZES.find_key(2-!_[_arg],2-!_[_arg])
         || ($(_exe+')'))(_od,_zes);
            _exe:=_fml;
            &_zes;
            _zes:=_[_arg]
         ?}
      !};
      ($(_exe+')'))(_od,_zes)
   || _loop:=KST_ZES.first();
      {!
      |? _loop
      |! exec('zapisz_zes','#stalesys',_od,($KST_ZES.SYMBOL)());
         _loop:=KST_ZES.next()
      !}
   ?};
   KST_ZES.cntx_pop
||
:  użytkownik nie zatwierdził zmian
:  podczytaj dotychczasowe wartości
   exec('stalesys','#stalesys')
?};
_data.OD


\zapisz_zes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zapisuje wartości stałych danego zestawu
::   WE: _a - data obowiązywania
::       _b - alias zestawu stałych
::       .. - opcjonalnie akronimy pol
::  OLD: \zapisz_zes/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_date:=
   {? var_pres('_a')=type_of(null) || date(0,0,0)
   |? var_pres('_a')<>4 || date
   || _a
   ?};
_set:=2-!_b;
_zdate:=date(0,0,0);

KST_WAR.cntx_psh();
KST_WAR.index('KST_DEF');

KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix(_set,_set);

{! _ndx:={? _>2 || 3 || 1 ?}..{? _>2 || _ || _b.fld_num() ?}
|! _fld:={? _>2 || _[_ndx] || _b.fld_acr(_ndx) ?};
   {? KST_MAP.find_key(_fld,_fld) & KST_MAP.KST_DEF().ZAPIS='T'
:     znaleziono stałą o utrwalanej wartości oraz jej definicję
   || _comp:={? KST_DEF.WSPOLNA<>'T' || REF.FIRMA || null ?};
      _type:=MS.fld_type(_set,_fld);
      _val:=($(_set+'.'+_fld))();

:     zamien wartość na treść formuły
      _val:=exec('wartosc','#stalesys',_val,_set,_fld);

      KST_WAR.prefix(_comp,KST_DEF.ref());

      {? KST_DEF.HISTORIA<>'T'
:        zapis bez historii
      || {? KST_WAR.first()
         || {!
            |? KST_WAR.size()>1
            |! KST_WAR.del()
            !};
            {? {? KST_WAR.WARTOSC<>_val || KST_WAR.WARTOSC:=_val; 1 ?} +
               {? KST_WAR.DATA<>_zdate || KST_WAR.DATA:=_zdate; 1 ?}
            || KST_WAR.put()
            ?}
         || KST_WAR.blank();
            KST_WAR.FIRMA:=_comp;
            KST_WAR.WARTOSC:=_val;
            KST_WAR.add()
         ?}

      |? KST_WAR.find_key(_date) & KST_WAR.WARTOSC<>_val
:        istnieje zapis na dzień - aktualizacja wartości
      || KST_WAR.WARTOSC:=_val;
         {? KST_WAR.put() & KST_WAR.next() & KST_WAR.WARTOSC=_val
:           istnieje kolejny zapis o identycznej wartości - usuń
         || KST_WAR.del()
         ?}

      |? ~KST_WAR.find_le(_date) & KST_WAR.find_ge(_date) & KST_WAR.WARTOSC=_val
:        istnieje zapis późniejszy z tą samą wartością - przesunięcie daty
      || KST_WAR.DATA:=_date;
         KST_WAR.put()

      |? {? KST_WAR.find_le(_date) || KST_WAR.WARTOSC<>_val || 1 ?}
:        brak danych lub wartości różne - utworzenie zapisu
      || KST_WAR.blank();
         KST_WAR.FIRMA:=_comp;
         KST_WAR.DATA:=_date;
         KST_WAR.WARTOSC:=_val;
         KST_WAR.add()
      ?}
   ?}
!};

KST_MAP.cntx_pop();
KST_WAR.cntx_pop()


\stalesys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje wartości wszystkich stałych systemu.
::   WE: _a [DATE] - data, na którą mają być wczytane stałe, jeśli pominięta, to przyjęta zostanie bieżąca
::  OLD: \stalesys/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',{? var_pres('_a')=type_of(date()) || _a || date() ?})


\kst_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zwraca wskazanie na definicję stałej systemu. Jeśli wyszukanie nie powiodło się, to definicja zostanie utworzo-
::       na.
::   WE: _a - symbol definicji
::       _b - opis definicji
::   WY: wskazanie na definicję stałej
:: UWAGA! Popwarność argumentów nie jest weryfikowana
::  OLD: \kst_def/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
KST_DEF.cntx_psh();
KST_DEF.index('SYMBOL');
KST_DEF.prefix();
{? KST_DEF.find_key(_a,_a)
|| _ref:=KST_DEF.ref()
|| KST_DEF.blank();
   KST_DEF.SYMBOL:=_a;
   KST_DEF.OPIS:=_b;
   {? KST_DEF.add()
   || _ref:=KST_DEF.ref()
   ?}
?};
KST_DEF.cntx_pop();
_ref


\init_kst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS:
::  OLD: \init_kst/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_ || return ?};
_tt:=type_of(SYSLOG);
{! _arg:=1.._
|! {? type_of(_[_arg])=_tt
   || exec('init_zes','#stalesys',_[_arg])
   ?}
!}


\init_zes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Inicjuje wartości w tabelach stałych systemu dla zmiennej o podanym aliasie.
::   WE: _a - alias do zmiennej przechowującej wartości stałych systemu
:: UWAGA! poprawność argumentu wywołania nie jest weryfikowana - zakłada się że _a jest aliasem do zmiennej systemowej
::  OLD: \init_zes/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdź, czy dla danej zmiennej istnieje zapis w tabeli zestawów stałych
: jeśli brak reprezentanta, to utworz wlasciwy wpis (opis pobierz z definicji)
_symbol:=2-!_a;
KST_ZES.cntx_psh();
KST_ZES.clear();
KST_ZES.index('SYMBOL');
{? ~KST_ZES.find_key(_symbol,_symbol)
|| KST_ZES.blank();
   KST_ZES.SYMBOL:=_symbol;
   KST_ZES.OPIS:=_a.comment();
   KST_ZES.add()
?};
exec('init_map','#stalesys',KST_ZES.ref());
KST_ZES.cntx_pop()


\init_map
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Inicjuje wartości w tabeli KST_MAP dla rekordu tabeli KST_ZES
::   WE: _a - wskazanie na rekord w tabeli KST_ZES
:: UWAGA! poprawność argumentu wywołania nie jest weryfikowana
::  OLD: \init_map/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_MAP.cntx_psh();
KST_MAP.index('SYMBOL');
KST_MAP.prefix(_a);
KST_MAP.blank();
KST_MAP.KST_ZES:=_a;
_zes:=KST_MAP.KST_ZES().SYMBOL;
_KST:=($_zes)();
{! _ndx:=1.._KST.fld_num()
|! _acr:=_KST.fld_acr(_ndx);
   _name:=_KST.fld_name(_ndx);
   {? KST_MAP.find_key(_acr,_acr)
   || {? KST_MAP.KST_DEF=null
      || KST_MAP.KST_DEF:=exec('kst_def','#stalesys',_zes+'.'+_acr,_name);
         KST_MAP.put()
      ?}
   || KST_MAP.SYMBOL:=_acr;
      KST_MAP.OPIS:=_name;
      KST_MAP.KST_DEF:=exec('kst_def','#stalesys',_zes+'.'+_acr,_name);
      KST_MAP.add()
   ?}
!};
KST_MAP.cntx_pop()


\wyb_symbol_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy strukturę i elementy interfejsu dla funkcji wyboru elementów definicji.
::   WY: alias do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
: lista elementów
_buf:=tab_tmp(1,
   'SYMBOL','STRING[8]', 'Symbol',
   'OPIS',  'STRING[80]','Opis'
);

: okienko werowania z możliwością sortowania i filtrowania
_wnd:=_buf.mk_sel(,'T',0,'kst_wyb_symbol',15,,15,,'U','T');
_buf.win_fld(_wnd,,'SYMBOL',,,-8,,1,,,'Akronim w definicji systemu'@);
_buf.win_fld(_wnd,,'OPIS',,,-60,,1,,,'Opis w definicji systemu'@);
_buf.win_act(_wnd,,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu'@,,"sel_exit()",1);
_buf.win_sel(_wnd);

_buf


\kst_zes_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed zapisem do tabeli KST_ZES. Ustala wartość pola SYSTEM - zgodność z definicją.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
KST_ZES.SYSTEM:={? KST_ZES.SYMBOL<>'' & var_pres(KST_ZES.SYMBOL)=type_of(SYSLOG) || 'T' || 'N' ?};
1


\kst_zes_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "dołącz przed" tabeli KST_ZES.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('kst_zes_modb','#stalesys')


\kst_zes_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "popraw po" tabeli KST_ZES.
::   WE: _a - wartość przekazywana przez narzędzia do formuły wyzwalacza
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1 & KST_ZES.SYSTEM='T'
|| exec('init_map','#stalesys',KST_ZES.ref())
?};
~~


\kst_zes_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "popraw przed" tabeli KST_ZES.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('kst_zes_modb','#stalesys')


\kst_zes_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "popraw po" tabeli KST_ZES.
::   WE: _a - wartość przekazywana przez narzędzia do formuły wyzwalacza
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| {? KST_ZES.SYSTEM<>bfld('SYSTEM')
   || KST_MAP.cntx_psh();
      KST_MAP.index('SYMBOL');
      KST_MAP.prefix(KST_ZES.ref());
      _loop:=KST_MAP.first();
      {!
      |? _loop
      |! KST_MAP.put();
         _loop:=KST_MAP.next()
      !};
      KST_MAP.cntx_pop()
   ?}
?};
~~


\kst_zes_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws
:: OPIS: Usuwa zapisy powiązane z zestawem. Wyzwalacz usuń przed.
::  OLD: \del_zes/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',KST_MAP,'SYMBOL',KST_ZES.ref()) &
exec('del_ndx','#table',KST_DOM,'UNIQUE',KST_ZES.ref())


\kst_def_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Usuwa zapisy powiązane z definicją. Wyzwalacz usuń przed.
::  OLD: \del_def/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
exec('set_null','#table',KST_MAP,'KST_DEF',KST_DEF.ref()) &
exec('del_ndx','#table',KST_WAR,'FIRMA',KST_DEF.ref())


\kst_map_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed zapisem do tabeli KST_MAP. Ustala wartość pola SYSTEM - zgodność z definicją.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
KST_MAP.SYSTEM:='N';
KST_ZES.cntx_psh();
_zes:=KST_MAP.KST_ZES().SYMBOL;
KST_ZES.cntx_pop();
{? _zes<>'' & var_pres(_zes)=type_of(SYSLOG)
|| {? KST_MAP.SYMBOL<>'' & var_pres(KST_MAP.SYMBOL,($_zes)())>0
   || KST_MAP.SYSTEM:='T'
   ?}
?};
1


\kst_map_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "dołącz przed" tabeli KST_MAP.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('kst_map_modb','#stalesys');
1


\kst_map_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "dołącz przed" tabeli KST_MAP.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('kst_map_modb','#stalesys');
1


\kst_map_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Usuwa zapisy powiązane ze stałą. Wyzwalacz usuń przed.
::  OLD: \del_map/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',KST_LST,'UNIQUE',KST_MAP.ref())


\kst_dom_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Usuwa zapisy powiązane z dziedziną. Wyzwalacz usuń przed.
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',KST_LST,'NUMER',KST_DOM.ref())


\admin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wyświetla konsolę zarządzania konfiguracją stałych systemu
::  OLD: \admin/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
exec('init_wer','#stalesys');

_ctx:=obj_new('zes_ndx','def_ndx');
_ctx.zes_ndx:='SYMBOL';
_ctx.def_ndx:='KST_ZES';
params_set('ctx',_ctx);

: weryfikacja zgodności z definicją
exec('fun_wer_sys','#stalesys');

KST_ZES.cntx_psh();
KST_ZES.win_sel('ADM');
KST_ZES.select();
KST_ZES.cntx_pop();
~~


\adm_bf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wypełnieniem okna ADM tabeli KST_ZES.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_ZES.index('SYMBOL');
KST_ZES.win_dict('SLO');
KST_ZES.win_edit('RED');

KST_DEF.cntx_psh();
KST_DEF.index('SYMBOL');
KST_DEF.win_sel('WER');
KST_DEF.win_edit('RED');

KST_MAP.cntx_psh();
KST_MAP.win_dict('SLO');

KST_DOM.cntx_psh();
KST_DOM.index('DOM_SYM');
KST_DOM.win_edit('RED');

KST_LST.cntx_psh();
KST_LST.index('NUMER');
KST_LST.win_edit('RED');

B_DOMAIN.cntx_psh();

1


\adm_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przy zamknięciu okna ADM tabeli KST_ZES.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_DEF.cntx_pop();
KST_MAP.cntx_pop();
KST_DOM.cntx_pop();
KST_LST.cntx_pop();
B_DOMAIN.cntx_pop();
B_DOMAIN.f_clear();

KST_MAP.fld_fml('KST_DEF','BLANK');
KST_MAP.fld_fml('KST_ZES','BLANK');

1


\adm_zes_1_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER tabeli KST_ZES w oknie ADM tabeli KST_ZES.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
grp_disp(KST_MAP,'ZES',1,1)


\adm_map_zes_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienka ZES tabeli KST_MAP w oknie ADM tabeli KST_ZES.
::   WE: _a - wartość przekazywana do formuły "przed obsługą" zależnie od tryby odświeżania (grp_disp/aktywowanie)
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_MAP.index(params_get().ctx.zes_ndx);
KST_MAP.prefix(KST_ZES.ref());

{? _a
|| KST_MAP.win_edit('ZES');
   KST_MAP.fld_fml('KST_DEF','BLANK');
   KST_MAP.fld_fml('KST_ZES','BLANK',$'KST_ZES.ref')
?}


\adm_map_zes_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po obsłudze okienka ZES tabeli KST_MAP w oknie ADM tabeli KST_ZES.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().ctx.zes_ndx:=KST_MAP.index('?')


\adm_def_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER tabeli KST_DEF w oknie ADM tabeli KST_ZES.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
grp_disp(KST_MAP,'DEF',1,1)


\adm_map_def_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienka DEF tabeli KST_MAP w oknie ADM tabeli KST_ZES.
::   WE: _a - wartość przekazywana do formuły "przed obsługą" zależnie od tryby odświeżania (grp_disp/aktywowanie)
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_MAP.index(params_get().ctx.def_ndx);
KST_MAP.prefix(KST_DEF.ref());

{? _a
|| KST_MAP.win_edit('DEF');
   KST_MAP.fld_fml('KST_ZES','BLANK');
   KST_MAP.fld_fml('KST_DEF','BLANK',$'KST_DEF.ref')
?}


\adm_map_def_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po obsłudze okienka DEF tabeli KST_MAP w oknie ADM tabeli KST_ZES.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().ctx.def_ndx:=KST_MAP.index('?')


\adm_zes_2_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER tabeli KST_ZES w oknie ADM tabeli KST_ZES.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
grp_disp(KST_DOM,'DOM',1,1)


\adm_dom_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka DOM tabeli KST_DOM w oknie ADM tabeli KST_ZES.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
grp_disp(KST_LST,'DOM',1,1)


\adm_dom_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienka DOM tabeli KST_DOM w oknie ADM tabeli KST_ZES.
::   WE: _a - wartość przekazywana do formuły "przed obsługą" zależnie od tryby odświeżania (grp_disp/aktywowanie)
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_DOM.prefix(KST_ZES.ref())


\adm_lst_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienka DOM tabeli KST_LST w oknie ADM tabeli KST_ZES.
::   WE: _a - wartość przekazywana do formuły "przed obsługą" zależnie od tryby odświeżania (grp_disp/aktywowanie)
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_LST.prefix({? KST_DOM.size() || KST_DOM.ref() || null ?});

{? _a
|| KST_MAP.win_edit('ZES');
   KST_MAP.fld_fml('KST_DEF','BLANK');
   KST_MAP.fld_fml('KST_ZES','BLANK',$'KST_DOM.KST_ZES')
?}


\kst_dom_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed dołączeniem dziedziny zestawu.
::  OLD: \admin_cfg/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
exec('kst_dom_filtr','#stalesys',KST_ZES.ref(),'not in')


\kst_dom_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed poprawieniem dziedziny zestawu.
::----------------------------------------------------------------------------------------------------------------------
exec('kst_dom_filtr','#stalesys',KST_ZES.ref(),'not in')


\kst_dom_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed szukaniem dziedziny zestawu.
::   WE: _a - wartość przekazywana do formuły "przed obsługą" zależnie od tryby odświeżania (grp_disp/aktywowanie)
::----------------------------------------------------------------------------------------------------------------------
exec('kst_dom_filtr','#stalesys',KST_ZES.ref(),'in')


\kst_dom_filtr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustawienie filtra na obszary przed rozpoczęciem edycji danych w tabeli KST_DOM.
::----------------------------------------------------------------------------------------------------------------------
B_DOMAIN.prefix();
B_DOMAIN.f_set(
   'SYMBOL',,
   'B_DOMAIN.REFERENCE '+_b+' (select D.B_DOMAIN from KST_DOM as D where D.KST_ZES=:_a)',
   _a
)


\kst_zes_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na bieżący zapis w tabeli KST_ZES.
::----------------------------------------------------------------------------------------------------------------------
KST_ZES.ref()


\kst_def_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na bieżący zapis w tabeli KST_DEF.
::----------------------------------------------------------------------------------------------------------------------
KST_DEF.ref()


\kst_dom_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na bieżący zapis w tabeli KST_DOM.
::----------------------------------------------------------------------------------------------------------------------
KST_DOM.ref()


\kst_firma_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na zapis w tabeli FIRMA lub null.
::----------------------------------------------------------------------------------------------------------------------
{? KST_WAR.KST_DEF & KST_WAR.KST_DEF().WSPOLNA='N'
|| REF.FIRMA
|| null
?}


\kst_def_zapis_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po edycji pola ZAPIS rekordu tabeli KST_DEF.
::----------------------------------------------------------------------------------------------------------------------
{? KST_DEF.ZAPIS='N'
|| KST_DEF.HISTORIA:='N';
   KST_DEF.WSPOLNA:='N'
?};
1


\kst_def_czy_zapis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy wartość stałej jest utrwalana. Przed redakcją pól HISTORIA i WSPOLNA rekordu tabeli KST_DEF.
::----------------------------------------------------------------------------------------------------------------------
KST_DEF.ZAPIS='T'


\kst_zes_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed edycją pola OPIS tabeli KST_ZES.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? KST_ZES.OPIS=''
|| exec('kst_zes_modb','#stalesys');
   {? KST_ZES.SYSTEM='T'
   || KST_ZES.OPIS:=($KST_ZES.SYMBOL)().comment()
   ?}
?};
1


\wyb_zes_symbol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Umożliwia wybór zmiennej systemowej z listy.
::   WY: akronim wybranego zestawu stałych
::----------------------------------------------------------------------------------------------------------------------
: tabelka tymczasowa umożliwiająca wybów
_buf:=exec('wyb_symbol_tab','#stalesys');
_buf.hdr_sel('Zmienne strukturalne'@);

: lista zmiennych systemowych
{! _ndx:=1..tab_num()
|! {? ~tab_real(_ndx)
   || _buf.blank();
      _buf.SYMBOL:=tab_acr(_ndx);
      _buf.OPIS:=($_buf.SYMBOL)().comment();
      _buf.add()
   ?}
!};

: ukryj te, które już występują jako zestawy
_buf.f_set('SYMBOL',,'SYMBOL not in (select SYMBOL from KST_ZES)');

: wybór zestawu
{? _buf.select()
|| _buf.SYMBOL
|| ''
?}


\kst_zes_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws
:: OPIS: Sprawdza poprawność rekordu tabeli KST_ZES
::   WY: akronim pola o blednej wartosci lub 1 jeśli rekord uznany został za poprawny
::  OLD: \spr_zes/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.table(KST_ZES,-menu_txt='popraw',,'SYMBOL','OPIS');
{? (type_of(_chk)=2 & _chk<>'') |
   (type_of(_chk)=1 & ~_chk)
|| return(_chk)
?};

{? var_pres(KST_ZES.SYMBOL)<>type_of(SYSLOG)
|| FUN.ask('Zestaw "%1" nie występuje w definicji systemu.\n'
               'Czy na pewno zapisać podane informacje?'@[KST_ZES.SYMBOL])
|| 1
?}


\kst_def_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Sprawdza poprawność rekordu tabeli KST_DEF
::   WY: akronim pola o błędnej wartosci lub 1 jeśli rekord uznany został za poprawny
::  OLD: \spr_def/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(KST_DEF,-menu_txt='popraw',,'SYMBOL','OPIS')


\kst_map_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed edycją pola OPIS tabeli KST_MAP.
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? KST_MAP.OPIS=''
|| exec('kst_map_modb','#stalesys');
   {? KST_MAP.SYSTEM='T'
   || _loop:=1;
      _ZES:=($KST_MAP.KST_ZES().SYMBOL)();
      {! _ndx:=1.._ZES.fld_num()
      |? _loop
      |! {? _ZES.fld_acr(_ndx)=KST_MAP.SYMBOL
         || KST_MAP.OPIS:=_ZES.fld_comm(_ndx)
         ?}
      !}
   ?}
?};
1


\wyb_map_symbol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Umożliwia wybór pola zmiennej systemowej z listy.
::   WY: akronim wybranej stałej
::----------------------------------------------------------------------------------------------------------------------
{? KST_ZES.SYMBOL='' | KST_ZES.SYSTEM='N'
|| return()
?};

: tabelka tymczasowa umożliwiająca wybów
_buf:=exec('wyb_symbol_tab','#stalesys');
_buf.hdr_sel('Pola zmiennej %1'@[KST_ZES.SYMBOL]);

_ZES:=($KST_ZES.SYMBOL)();
: lista pól zmiennej
{! _ndx:=1.._ZES.fld_num()
|! _buf.blank();
   _buf.SYMBOL:=_ZES.fld_acr(_ndx);
   _buf.OPIS:=_ZES.fld_comm(_ndx);
   _buf.add()
!};

: ukryj te, które już występują jako stałe
_buf.f_set('SYMBOL',,'SYMBOL not in (select SYMBOL from KST_MAP where KST_ZES=:_a)',KST_ZES.ref());

: wybór zestawu
{? _buf.select()
|| _buf.SYMBOL
|| ''
?}


\kst_map_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws
:: OPIS: Sprawdza poprawność rekordu tabeli KST_MAP
::   WY: akronim pola o błędnej wartosci lub 1 jeśli rekord uznany został za poprawny
::  OLD: \spr_map/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_err:=__CHK.table(KST_MAP,-menu_txt='popraw',,'KST_ZES','SYMBOL','OPIS');
{? (type_of(_err)=2 & _err<>'') |
   (type_of(_err)=1 & ~_err)
|| return(_err)
?};

{? ~exec('spr_typ','#stalesys',-menu_txt='popraw')
|| FUN.emsg('Wykryto niezgodność typów danych.'@);
   return('KST_DEF')
?};

{? var_pres(KST_ZES.SYMBOL)<>type_of(SYSLOG) | var_pres(KST_MAP.SYMBOL,($KST_ZES.SYMBOL)())<0
|| FUN.ask(
      'Stała "%1.%2" nie występuje w definicji systemu.\n'
      'Czy na pewno zapisać podane informacje?'@[KST_ZES.SYMBOL,KST_MAP.SYMBOL]
   )
|| 1
?}


\kst_dom_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Sprawdza poprawność rekordu tabeli KST_DOM
::   WY: akronim pola o błędnej wartosci lub 1 jeśli rekord uznany został za poprawny
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(KST_DOM,-menu_txt='popraw',,'KST_ZES','B_DOMAIN')


\kst_lst_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Sprawdza poprawność rekordu tabeli KST_LST
::   WY: akronim pola o błędnej wartosci lub 1 jeśli rekord uznany został za poprawny
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(KST_LST,-menu_txt='popraw',,'NUMER','KST_MAP')


\kst_lst_ad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po dołączeniu rekordu do tabeli KST_LST
::----------------------------------------------------------------------------------------------------------------------
exec('kst_lst_numer_mod','#stalesys')


\kst_lst_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po poprawieniu rekordu w tabeli KST_LST
::----------------------------------------------------------------------------------------------------------------------
exec('kst_lst_numer_mod','#stalesys')


\kst_lst_gbu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed usunięciem grupy rekordów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_nchk()


\kst_lst_au
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po usunięciu rekordu w tabeli KST_LST
::----------------------------------------------------------------------------------------------------------------------
exec('kst_lst_numer_norm','#stalesys')


\kst_lst_numer_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizuje numer porządkujący pola w widoku historii.
::----------------------------------------------------------------------------------------------------------------------
KST_LST.cntx_psh();
KST_LST.clear();
KST_LST.index('NUMER');
KST_LST.prefix(KST_DOM.ref());
{? KST_LST.NUMER>KST_LST.size()
|| KST_LST.NUMER:=KST_LST.size()+1;
   KST_LST.put()
|? KST_LST.NUMER<KST_LST.size()
|| _ref:=KST_LST.ref();
   _nr:=KST_LST.NUMER;
   _loop:=KST_LST.last();
   {!
   |? _loop & _nr<=KST_LST.NUMER
   |! {? KST_LST.ref()<>_ref
      || KST_LST.NUMER+=1;
         KST_LST.put()
      ?};
      _loop:=KST_LST.prev()
   !}
?};
KST_LST.cntx_pop();
exec('kst_lst_numer_norm','#stalesys')


\kst_lst_numer_norm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Normalizuje numerację widoku historii.
::----------------------------------------------------------------------------------------------------------------------
KST_LST.cntx_psh();
KST_LST.index('NUMER');
KST_LST.prefix(KST_DOM.ref());
{? KST_LST.first()
|| _nr:=1;
   {!
   |? KST_LST.NUMER:=_nr;
      _nr+=1;
      KST_LST.put();
      KST_LST.next()
   !}
?};
KST_LST.cntx_pop()


\spr_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Sprawdza, czy modyfikacja zawartości KST_MAP nie doprowadzi do konfliktu typów danych stałych systemu
::   WE: _a - tryb modyfikacji tabeli KST_MAP: 0 - dodawanie, 1 - poprawianie
::   WY: 0 w przypadku wykrycia konfliktu typów, 1 gdy ok
::  OLD: \spr_typ/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=KST_MAP.SYMBOL;
_zes:=KST_MAP.KST_ZES().SYMBOL;
{? (_typ:=exec('kst_typ','#stalesys'))<=0
|| return(1)
?};
_ref:={? _a || KST_MAP.ref() || null ?};
KST_MAP.cntx_psh();
KST_MAP.index('KST_ZES');
KST_MAP.prefix(KST_MAP.KST_DEF);
_loop:=KST_MAP.first();
{!
|? _loop
|! {? KST_MAP.ref()<>_ref
   || {? exec('kst_typ','#stalesys')<>_typ
      || KST_MAP.cntx_pop();
         return(0)
      ?}
   ?};
   _loop:=KST_MAP.next()
!};
KST_MAP.cntx_pop()


\kst_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zwraca typ danych przechowywanych w stałej opisanej przez zawartość bufora tabeli KST_MAP.
::   WY: -1 gdy stała nie istnieje, 0 gdy stała nie przechowuje wartości, numer typu danych w pozostałych przypadkach
::       gdy pole jest typu złączeniowego zwrócony będzie numer tabeli w definicji systemu powiekszony o 100
::  OLD: \kst_typ/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_typ:=-1;
KST_ZES.cntx_psh();
_zes:=KST_MAP.KST_ZES().SYMBOL;
{? var_pres(_zes)=type_of(SYSLOG)
|| _ZES:=($_zes)();
   _fld:=KST_MAP.SYMBOL;
   _typ:=var_pres(_fld,_ZES);
   {? _typ=26
   || {! _n:=1.._ZES.fld_num()
      |! {? _ZES.fld_acr(_n)=_fld
         || _tab:=_ZES.fld_join(_n);
            {! _m:=1..tab_num()
            |! {? tab_acr(_m)=_tab
               || KST_ZES.cntx_pop();
                  return(100+_m)
               ?}
            !}
         ?}
      !}
   ?}
?};
KST_ZES.cntx_pop();
_typ


\spr_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Sprawdza poprawność danych w tabeli KST_WAR
::  OLD: \spr_war/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdź, czy nie wpisano błędnej formuły
_ok:=0;
on_error(2);
_state:=no_msg(1);
($KST_WAR.WARTOSC)();
{? in_error()
|| no_msg(0);
   on_error(2);
   {!
   |? FUN.choice('Wprowadzono błędną treść formuły.'@,'ERROR'@,'Pokaż błąd'@)
   |! ($KST_WAR.WARTOSC)();
      on_error(2)
   !};
   on_error();
   no_msg(_state);
   return('WARTOSC')
?};
: sprawdź zgodność wyniku z typem stalej
KST_MAP.cntx_psh();
KST_MAP.index('KST_ZES');
KST_MAP.prefix(KST_WAR.KST_DEF);
_loop:=KST_MAP.first();
{!
|? _loop
|! _fml:=$(KST_MAP.KST_ZES().SYMBOL+'.'+KST_MAP.SYMBOL+':='+KST_WAR.WARTOSC);
   _fml();
   {? in_error()
   || no_msg(0);
      on_error(2);
      {!
      |? FUN.choice('Formuła zwraca wynik typu innego od oczekiwanego.'@,'ERROR'@,'Pokaż błąd'@)
      |! _fml();
         on_error(2)
      !};
      on_error();
      no_msg(_state);
      KST_MAP.cntx_pop();
      return('WARTOSC')
   ?};
   _loop:=KST_MAP.next()
!};
KST_MAP.cntx_pop();
: formuła poprawna
no_msg(_state);
on_error();
1


\wartosc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Konwertuje wartość na formułę.
::   WE: _a - wartość
::       _b - akronim zestawu stałych
::       _c - akronim stałej (pola)
::   WY: tresc formuly
::  OLD: \wartosc/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
_type:=MS.fld_type(_b,_c);

{? MS.fld_real(_b,_c)
|| form(_a,,2,'9.')

|? _type=1
|| form(_a,,0,'99')

|? _type=2
|| '\''+STR.gsub(_a,'\'','\\\'')+'\''

|? _type=4
|| 'date('+$(_a~1)+','+$(_a~2)+','+$(_a~3)+')'

|? _type=5
|| 'time('+$(_a~1)+','+$(_a~2)+','+$(_a~3)+')'

|? _type=7
|| _tab:=MS.join(_b,_c);
   {? _a
   || '{| '+_tab+' |! cntx_psh; '+
      'use(\''+($(_tab+'.name'))()+'\'); clear;'+
      '_v:={? seek('+$(#_a)+',\''+($(_tab+'.name'))()+'\',1) '+
      '|| ref || null ?}; cntx_pop; _v |}'
   || 'null'
   ?}

|| ''
?}


\exp_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zapisuje do plików tekstowych konfiguracje stałych systemu.
::  OLD: \exp_def/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
_naz:=exec('imex_naz','#stalesys');

KST_DEF.cntx_psh();
KST_DEF.index('SYMBOL');
KST_DEF.prefix();

KST_MAP.cntx_psh;
KST_MAP.index('KST_MAP');
KST_MAP.prefix();

KST_DOM.cntx_psh();
KST_DOM.index('ZES_SYM');
KST_DOM.prefix();

_LST:=sql('
   select
      B_DOMAIN.SYMBOL as B_DOMAIN,
      KST_ZES.SYMBOL as KST_ZES,
      KST_MAP.SYMBOL as KST_MAP,
      KST_LST.NUMER as NUMER
   from
      KST_LST join
      KST_MAP using (KST_LST.KST_MAP,KST_MAP.REFERENCE) join
      KST_DOM using (KST_LST.KST_DOM,KST_DOM.REFERENCE) join
      KST_ZES using (KST_DOM.KST_ZES,KST_ZES.REFERENCE) join
      B_DOMAIN using (KST_DOM.B_DOMAIN,B_DOMAIN.REFERENCE)'
);

_ret:=
   KST_DEF.export(_naz[1],0,'|','Mazovia',1024,
      'SYMBOL',,1,,
      'OPIS',,2,,
      'ZAPIS',,3,,
      'HISTORIA',,4,,
      'WSPOLNA',,5,
   ) &
   KST_MAP.export(_naz[2],0,'|','Mazovia',1024,
      'KST_ZES','SYMBOL',1,,
      'SYMBOL',,2,,
      'OPIS',,3,,
      'KST_DEF','SYMBOL',4,
   ) &
   KST_DOM.export(_naz[3],0,'|','Mazovia',1024,
      'KST_ZES','SYMBOL',1,,
      'B_DOMAIN','SYMBOL',2,
   ) &
   _LST.export(_naz[4],0,'|','Mazovia',1024,
      'B_DOMAIN',,1,,
      'KST_ZES',,2,,
      'KST_MAP',,3,,
      'NUMER',,4,
   );

{? _ret
|| FUN.info('Dane zapisano do plików: %1'@[exec('imex_txt','#stalesys',_naz)])
|| FUN.emsg('Wystąpił błąd podczas zapisu danych do plików.'@)
?};

KST_DOM.cntx_pop();
KST_MAP.cntx_pop();
KST_DEF.cntx_pop();

_ret


\import_st
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Aktualizuje konfiguracje i zawartość stałych systemu na podstawie zawartości plików tekstowych.
::  OLD: \import/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('imp_def','#stalesys')
|| exec('imp_war','#stalesys')
?}


\imp_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje historię wartości stałych.
::  OLD: \imp_war/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
: ustal nazwy plików wymiany danych
_naz:=exec('imex_naz','#stalesys');

KST_WAR.clear();
KST_WAR.erase();
KST_WAR.import(_naz[5],1,0,'^','Mazovia',,
   'KST_DEF','SYMBOL',1,,
   'DATA',,2,,
   'WARTOSC',,3,
);

: uzupełnij kolumnę FIRMA
: zgodnie z definicją stałych
KST_WAR.for_each("
   {? KST_WAR.KST_DEF().WSPOLNA<>'T'
   || KST_WAR.FIRMA:=REF.FIRMA;
      KST_WAR.put()
   ?}
",1);

_rap:=exec('wer_war','#stalesys');
{? type_of(_rap)=type_of(SYSLOG) & _rap.first()
|| _rap.select()
?}


\imex_txt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zwraca tekstową reprezentacje tablicy nazw plików.
:    WE: _a - uchwyt do tablicy zawierającej nazwy plików
::   WY: napis
::  OLD: \imex_txt/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
_txt:='';
{! _n:=1..obj_len(_a)
|! _txt+=', '+_a[_n]
!};
2-_txt


\funkcje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Funkcje narzędziowe do obsługi stałych systemu
::  OLD: \funkcje/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
{? _tab=KST_ZES || exec('fun_zes','#stalesys')
?}


\fun_zes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Funkcje narzędziowe do obsługi stałych systemu
::  OLD: \fun_zes/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
popup(1,menu_txt,
   'Aktualizacja opisów wszystkich stałych na podstawie ich definicji'@,,"exec('fun_aktn','#stalesys')",
   'Usunięcie definicji niewykorzystywanych w stałych'@,,"exec('fun_ddef','#stalesys')",
   'Dołączenie pól zestawu do widoku historii stałych'@,,
      {? KST_ZES.SYSTEM='T' || "exec('fun_awid','#stalesys')" || "" ?},
   'Weryfikacja wartości stałych'@,,"exec('fun_werw','#stalesys')"
::   '--',,,
::   'Eksport definicji i stałych do plików *.tra'@,,"exec('fun_exps','#stalesys')",
::   'Import definicji i stałych z plików *.tra'@,,"exec('fun_imps','#stalesys')"
)


\fun_wer_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Weryfikacja znacznika SYSTEM - zgodności z definicją.
::----------------------------------------------------------------------------------------------------------------------
: sprawdź zestawy
KST_ZES.cntx_psh();
KST_ZES.index('SYMBOL');
KST_ZES.prefix();
_loop:=KST_ZES.first();
{!
|? _loop
|! _system:=KST_ZES.SYSTEM;
   exec('kst_zes_modb','#stalesys');
   {? _system<>KST_ZES.SYSTEM
   || KST_ZES.put()
   || KST_MAP.cntx_psh();
      KST_MAP.index('SYMBOL');
      KST_MAP.prefix(KST_ZES.ref());
      _loop:=KST_MAP.first();
      {!
      |? _loop
      |! _system:=KST_MAP.SYSTEM;
         exec('kst_map_modb','#stalesys');
         {? _system<>KST_MAP.SYSTEM
         || KST_MAP.put()
         ?};
         _loop:=KST_MAP.next()
      !};
      KST_MAP.cntx_pop()
   ?};
   _loop:=KST_ZES.next()
!};
KST_ZES.cntx_pop();
~~


\fun_aktn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Aktualizuje nazwy wszystkich stałych na podstawie definicji.
::  OLD: \fun_aktn/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask('Czy na pewno aktualizować opisy stałych?'@)
|| return()
?};

KST_DEF.cntx_psh();
KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.clear();

_loop:=KST_MAP.first();
{!
|? _loop
|! {? KST_MAP.KST_DEF<>null & KST_MAP.OPIS<>KST_MAP.KST_DEF().OPIS
   || KST_MAP.OPIS:=KST_DEF.OPIS;
      KST_MAP.put()
   ?};
   _loop:=KST_MAP.next()
!};

KST_MAP.cntx_pop();
KST_DEF.cntx_pop();

FUN.info('Zakończono aktualizację opisów.'@)


\fun_ddef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Usuwa definicje niewykorzystywane w stałych
::  OLD: \fun_ddef/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy na pewno usuwać niewykorzystane definicje?'@)
|| exec('cln_def','#stalesys');
   FUN.info('Zakończono usuwanie definicji.'@)
?}


\fun_awid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Dołącza pola zestawu do widoku historii stalych.
::  OLD: \fun_awid/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_LST.cntx_psh();
KST_LST.index('NUMER');
KST_MAP.cntx_psh();
KST_MAP.index('SYMBOL');
KST_DOM.cntx_psh();
KST_DOM.index('DOM_SYM');
KST_DOM.prefix(KST_ZES.ref());

_loop:=KST_DOM.first();
{? _loop=0
|| KST_MAP.cntx_pop();
   KST_LST.cntx_pop();
   KST_DOM.cntx_pop();
   FUN.info('Dla wskazanego zestawu nie określono żadnej dziedziny.\nAkcja została anulowana.'@);
   return()
?};

{!
|? _loop
|! KST_LST.prefix(KST_DOM.ref());
   _numer:={? KST_LST.last() || KST_LST.NUMER ?};
   KST_LST.index('UNIQUE');
   KST_LST.prefix();

   _ZES:=($KST_ZES.SYMBOL)();
   KST_MAP.prefix(KST_ZES.ref());
   {! _ndx:=1.._ZES.fld_num()
   |! _acr:=_ZES.fld_acr(_ndx);
      {? KST_MAP.find_key(_acr,_acr) & ~KST_LST.find_key(KST_MAP.ref(),KST_DOM.ref())
      || KST_LST.blank();
         KST_LST.KST_DOM:=KST_DOM.ref();
         KST_LST.KST_MAP:=KST_MAP.ref();
         KST_LST.NUMER:=(_numer+=1);
         KST_LST.add()
      ?}
   !};
   &_ZES;
   _loop:=KST_DOM.next()
!};

KST_MAP.cntx_pop();
KST_LST.cntx_pop();
KST_DOM.cntx_pop();

FUN.info('Zakończono dołączenie pól zestawu do widoku historii.'@)


\fun_werw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Weryfikuje poprawność wartości dla stałych systemu.
::  OLD: \fun_werw/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
KST_ZES.cntx_psh();
_rap:=exec('wer_war','#stalesys');
{? type_of(_rap)=type_of(SYSLOG)
|| {? _rap.first()
   || _rap.select()
   || FUN.info('Zakończono weryfikację wartości.'@)
   ?}
?};
KST_ZES.cntx_pop()


\fun_exps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zapisuje konfiguracje stałych systemu z plików tekstowych
::  OLD: \export/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy na pewno zapisać informacje do plików?'@)
|| exec('exp_def','#stalesys')
?}


\fun_imps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje konfiguracje stałych systemu z plików tekstowych
::  OLD: \import/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy na pewno aktualizować zawartość tabel?'@) & exec('imp_def','#stalesys')
|| {? FUN.ask('Czy usunąć niewykorzystane definicje?'@)
   || exec('cln_def','#stalesys')
   ?};
   FUN.info('Zakończono aktualizację konfiguracji stałych systemu.'@)
?}


\imex_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zwraca tablicę zawierajacą aliasy tabel pomocniczych.
::   WY: tablica wartości typu tabelowego
::  OLD: \imex_buf/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
_DEF:=tab_tmp(1,
   'SYMBOL','STRING[20]',,
   'OPIS','STRING[80]',,
   'ZAPIS','STRING[1]',,
   'HISTORIA','STRING[1]',,
   'WSPOLNA','STRING[1]',
);
_DEF.index(_DEF.ndx_tmp(,,'SYMBOL',,,'SYMBOL',,));

_MAP:=tab_tmp(1,
   'ZES','STRING[8]',,
   'MAP','STRING[8]',,
   'NAZ','STRING[80]',,
   'DEF','STRING[20]',
);
_MAP.index(_MAP.ndx_tmp(,,'DEF',,,'DEF',,));

_DOM:=tab_tmp(2,
   'ZES','STRING[8]',,
   'DOM','STRING[8]',
);

_LST:=tab_tmp(1,
   'DOM','STRING[8]',,
   'ZES','STRING[8]',,
   'MAP','STRING[8]',,
   'NUM','INTEGER',
);
_LST.index(_LST.ndx_tmp(,,'DOM',,,'ZES',,,'ZES',,,'MAP',,));

_WAR:=tab_tmp(1,
   'DEF','STRING[20]',,
   'DAT','DATE',,
   'WAR','STRING[255]',
);
_WAR.index(_WAR.ndx_tmp(,,'DEF',,,'DEF',,,'DAT',,));

_buf:=obj_new(5);
_buf[1]:=_DEF;
_buf[2]:=_MAP;
_buf[3]:=_DOM;
_buf[4]:=_LST;
_buf[5]:=_WAR;
_buf


\imex_naz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zwraca tablice zawierajaca nazwy plikow wymiany.
::   WY: tablica wartosci typu napisowego
::  OLD: \imex_naz/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
_ext:='.tra';
_naz:=obj_new(5);
_naz[1]:='kst_def'+_ext;
_naz[2]:='kst_map'+_ext;
_naz[3]:='kst_dom'+_ext;
_naz[4]:='kst_lst'+_ext;
_naz[5]:='kst_war'+_ext;
_naz


\wer_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Weryfikuje poprawność wartości dla stałych systemu.
::   WY: alias do tabeli zawierającej komunikaty o błędach
::  OLD: \wer_war/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
_remobj:=0;
{? var_pres('STRING',@.CLASS)<0
|| exec(,'_string')
?};
{? var_pres('STR')<100
|| STR:=obj_new(@.CLASS.STRING);
   _remobj:=1
?};

_rap:=tab_tmp(1,'N','INTEGER','Nr','T','STRING[255]','Komunikat');
_wnd:=_rap.mk_sel('Raport'@,'N',0);
_rap.win_fld(_wnd,,'T',,,120);
_rap.win_sel(_wnd);

_msg:="_a.N+=1;_a.T:=_b;_a.add";

: zweryfikuj wszystkie wartosci
: usun wykryte bledne dane
_state:=no_msg(1);
KST_MAP.cntx_psh();
KST_MAP.index('KST_ZES');
_loop:=KST_WAR.first();
{!
|? _loop
|! KST_MAP.prefix(KST_WAR.KST_DEF);
   _def:=KST_WAR.KST_DEF().SYMBOL;
   {? KST_MAP.first()
   || _error:=0;
      _stop:=0;
      {!
      |? on_error(3);
         _war:=exec('str2val','#convert',KST_WAR.WARTOSC);
         {? in_error
         || _stop:=1;
            _loop:=KST_WAR.del();
            _msg(_rap,'Usunięto błędną wartość '+_def)
         || on_error(3);
            _kst:=KST_MAP.KST_ZES().SYMBOL+'.'+KST_MAP.SYMBOL;
            ($(_kst+':=_a'))(_war);
            {? in_error
            || _error+=1;
               _msg(_rap,'Błędna wartość dla stałej '+_kst)
            ?}
         ?};
         ~_stop & KST_MAP.next()
      !};
      {? KST_MAP.size=_error
      || _loop:=KST_WAR.del();
         _msg(_rap,'Usunięto błędną wartość '+_def)
      |? ~_stop
      || {? _error
         || _msg(_rap,'Pozostawiono błędną wartość '+_def)
         ?};
         _loop:=KST_WAR.next()
      ?}
   || _loop:=KST_WAR.next()
   ?}
!};
KST_MAP.cntx_pop();
no_msg(_state);
on_error();

{? _remobj
|| obj_del(STR);
   &STR
?};

_rap


\rd_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje dane z plikow.
::   WE: _a - wskazanie na tablice aliasów do tabeli
::       _b - wskazanie na tablice nazw plików
::   WY: 1 jeśli sukces, 0 gdy wystapil blad
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \rd_cfg/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('rd_def','#stalesys',_a[1],_b[1]) || exec('rd_err','#stalesys',_b[1])
|? ~exec('rd_map','#stalesys',_a[2],_b[2]) || exec('rd_err','#stalesys',_b[2])
|? ~exec('rd_dom','#stalesys',_a[3],_b[3]) || exec('rd_err','#stalesys',_b[3])
|? ~exec('rd_lst','#stalesys',_a[4],_b[4]) || exec('rd_err','#stalesys',_b[4])
|| return(1)
?};
0


\rd_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje dane z pliku.
::   WE: _a - alias do tabeli
::       _b - nazwa pliku
::   WY: wynik działania metody import
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \rd_def/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
on_error(3);
_state:=no_msg(1);

_ret:=_a.import(_b,1,0,'|','Mazovia',,
   'SYMBOL',,1,,
   'OPIS',,2,,
   'ZAPIS',,3,,
   'HISTORIA',,4,,
   'WSPOLNA',,5,
);

_error:=in_error();
no_msg(_state);
on_error();
{? ~_error
|| _ret
?}


\rd_map
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje dane z pliku.
::   WE: _a - alias do tabeli
::       _b - nazwa pliku
::   WY: wynik działania metody import
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \rd_map/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
on_error(3);
_state:=no_msg(1);

_ret:=_a.import(_b,1,0,'|','Mazovia',,
   'ZES',,1,,
   'MAP',,2,,
   'NAZ',,3,,
   'DEF',,4,
);

_error:=in_error();
no_msg(_state);
on_error();
{? ~_error
|| _ret
?}


\rd_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje dane z pliku.
::   WE: _a - alias do tabeli
::       _b - nazwa pliku
::   WY: wynik działania metody import
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \rd_sys/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
on_error(3);
_state:=no_msg(1);

_ret:=_a.import(_b,1,0,'|','Mazovia',,
   'ZES',,1,,
   'DOM',,2,
);

_error:=in_error();
no_msg(_state);
on_error();
{? ~_error
|| _ret
?}


\rd_lst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wczytuje dane z pliku.
::   WE: _a - alias do tabeli
::       _b - nazwa pliku
::   WY: wynik działania metody import
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \rd_wid/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
on_error(3);
_state:=no_msg(1);

_ret:=_a.import(_b,1,0,'|','Mazovia',,
   'DOM',,1,,
   'ZES',,2,,
   'MAP',,3,,
   'NUM',,4,
);

_error:=in_error();
no_msg(_state);
on_error();
{? ~_error
|| _ret
?}


\rd_err
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wyświetla komunikat o błędzie odczytu pliku.
::   WE: _a - nazwa pliku
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \rd_err/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.emsg('Próba importu danych z pliku %1 nie powiodła się.'@[_a])


\imp_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Aktualizuje konfigurację stałych systemu na podstawie zawartości plików tekstowych.
::  OLD: \imp_def/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('imex_buf','#stalesys');
_naz:=exec('imex_naz','#stalesys');

{? ~exec('rd_cfg','#stalesys',_buf,_naz)
|| return(0)
?};

_DEF:=_buf[1];
_MAP:=_buf[2];
_DOM:=_buf[3];
_LST:=_buf[4];

KST_ZES.cntx_psh();
KST_ZES.index('SYMBOL');
KST_ZES.prefix();

KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');

KST_DEF.cntx_psh();
KST_DEF.index('SYMBOL');
KST_DEF.clear();

KST_DOM.cntx_psh();
KST_DOM.index('DOM_SYM');
KST_DOM.clear();

KST_LST.cntx_psh();
KST_LST.clear();

_loop:=_DEF.first;
{!
|? _loop
|! _def:=_DEF.SYMBOL;
   {? ~KST_DEF.find_key(_def,_def)
   || KST_DEF.blank();
      KST_DEF.SYMBOL:=_DEF.SYMBOL;
      KST_DEF.OPIS:=_DEF.OPIS;
      KST_DEF.ZAPIS:=_DEF.ZAPIS;
      KST_DEF.HISTORIA:=_DEF.HISTORIA;
      KST_DEF.WSPOLNA:=_DEF.WSPOLNA;
      KST_DEF.add()
   || KST_DEF.OPIS:=_DEF.OPIS;
      KST_DEF.ZAPIS:=_DEF.ZAPIS;
      KST_DEF.HISTORIA:=_DEF.HISTORIA;
      KST_DEF.WSPOLNA:=_DEF.WSPOLNA;
      KST_DEF.put()
   ?};
   _MAP.prefix(_def);
   _loop:=_MAP.first();
   {!
   |? _loop
   |! KST_MAP.prefix(_MAP.ZES,_MAP.ZES);
      {? KST_MAP.find_key(_MAP.MAP,_MAP.MAP)
      || KST_MAP.KST_DEF:=KST_DEF.ref();
         KST_MAP.OPIS:=_MAP.NAZ;
         KST_MAP.put()
      ?};
      _loop:=_MAP.next()
   !};
   _loop:=_DEF.next()
!};

{? KST_DOM.first()
|| {! |? KST_DOM.del() !}
?};

_loop:=_DOM.first();
{!
|? _loop
|! _zes:=_DOM.ZES;
   _dom:=exec('domain_ref','#b_domain',_DOM.DOM);
   {? KST_ZES.find_key(_zes,_zes)
   || KST_DOM.prefix(KST_ZES.ref());
      {? ~KST_DOM.find_key(_DOM.DOM,)
      || KST_DOM.blank();
         KST_DOM.KST_ZES:=KST_ZES.ref();
         KST_DOM.B_DOMAIN:=_dom;
         KST_DOM.add()
      ?};
      KST_MAP.prefix(_zes,_zes);
      _LST.prefix(_DOM.DOM,_zes,_zes);
      _loop:=_LST.first();
      {!
      |? _loop
      |! {? KST_MAP.find_key(_LST.MAP,_LST.MAP)
         || KST_LST.blank();
            KST_LST.KST_DOM:=KST_DOM.ref();
            KST_LST.KST_MAP:=KST_MAP.ref();
            KST_LST.NUMER:=_LST.NUM;
            KST_LST.add()
         ?};
         _loop:=_LST.next()
      !}
   ?};
   _loop:=_DOM.next()
!};

KST_LST.cntx_pop();
KST_DOM.cntx_pop();
KST_DEF.cntx_pop();
KST_MAP.cntx_pop();
KST_ZES.cntx_pop();

1


\cln_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Usuwa definicje niewykorzystywane w stałych.
::  OLD: \cln_def/staletrn.fml
::----------------------------------------------------------------------------------------------------------------------
KST_MAP.cntx_psh();
KST_MAP.index('KST_ZES');

KST_DEF.cntx_psh();
KST_DEF.index('SYMBOL');
KST_DEF.prefix();

{? KST_DEF.first()
|| {!
   |? KST_MAP.prefix(KST_DEF.ref());
      {? KST_MAP.first()
      || KST_DEF.next()
      || KST_DEF.del()
      ?}
   !}
?};

KST_DEF.cntx_pop();
KST_MAP.cntx_pop()


\usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła pozwala usunąć wartość wskazanej stałej systemu.
::   WE: _a - Data początku obowiązywania wartości.
::       _b - Tryb wyszukiwania przybliżony:
::             0 - Nie. Do usuniecia wyszukiwana jest wartość z konkretną datą [domyślnie].
::             1 - Tak. Do usunięcia wyszukiwana jest wartość obowiązujaca we wskazanym dniu.
::       _c - Uchwyt zestawu stałych.
::       _d - Akronim pola w zestawie stałych.
::       .. - Akronim pola w zestawie stałych (opcjonalnie).
::   WY: Jeżeli wartość została usunięta, to wynikiem jest pusty napis.
::       W przeciwnym razie wynikiem jest komunikat błędu.
::       Jeżeli rekord do usunięcia nie został znaleziony (ze wzgledu na datę) - sytuacja nie jest traktowana jako
::       błędna. Rezultatem również będzie ''.
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('_a')=4 || _a || return('Niepoprawny typ argumentu DATA.') ?};
_tryb:={? var_pres('_b')=1 || _b || 0 ?};
_zestaw:={? var_pres('_c')=type_of(SYSLOG) || _c || return('Niepoprawny typ argumentu ZESTAW.') ?};

: Zweryfikuj kontekst firmy
exec('firma_test','#firma');

_ret:='';
KST_ZES.cntx_psh();
KST_ZES.index('SYMBOL');
KST_ZES.prefix();
{? KST_ZES.find_key(2-!_zestaw,)
|| KST_MAP.cntx_psh();
   KST_MAP.index('SYMBOL');
   KST_MAP.prefix();
   KST_DEF.cntx_psh();
   KST_DEF.prefix();
   KST_WAR.cntx_psh();
   KST_WAR.index('KST_DEF');
   {! _lp:=4 .. _
   |? _ret=''
   |! {? type_of(_[_lp])<>2
      || _ret:='Niepoprawny typ argumentu wywołania nr '+$_lp+'.'
      |? ~KST_MAP.find_key(KST_ZES.ref(),_[_lp],)
      || _ret:='Niepoprawna wartość argumentu wywołania nr '+$_lp+'.'
      || {? KST_MAP.KST_DEF().WSPOLNA='T'
         || KST_WAR.prefix(null(),KST_DEF.ref())
         || KST_WAR.prefix(REF.FIRMA,KST_DEF.ref())
         ?};
         {? KST_WAR.find_le(_data) & (_tryb | KST_WAR.DATA=_data)
         || {? KST_WAR.del(,1)=0
            || _ret:='Rekord nie został usunięty.'
            ?}
         ?}
      ?}
   !};
   KST_WAR.cntx_pop();
   KST_DEF.cntx_pop();
   KST_MAP.cntx_pop()
|| _ret:='Niepoprawna wartość argumentu ZESTAW.'
?};
KST_ZES.cntx_pop();
_ret


\kst_war_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wprowadzenie zapisu do stalych KST_WAR
::   WE: _a - [STRING] Pole stalej
::       _b - [STRING] Zapis formuly tworzacej wartosc stalej ( w postaci stringa)
::       _c - [DATE] Data obowiązywania
::   WY: 0/1
::  OLD: \kst_war_add/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
   _pole:={? var_pres('_a')=2 || _a || return(_result) ?};
_wartosc:={? var_pres('_b')=2 || _b || return(_result) ?};
   _data:={? var_pres('_c')=4 || _c || return(_result) ?};

KST_DEF.cntx_psh;
KST_DEF.index('SYMBOL');
KST_DEF.prefix(_pole,_pole);
{? KST_DEF.first()
|| KST_WAR.index('KST_DEF');
   _firma:={? KST_DEF.WSPOLNA<>'T' || REF.S_FIRMA || null() ?};
   KST_WAR.prefix(_firma,KST_DEF.ref(),_data);
   {? ~KST_WAR.first()
   || KST_WAR.prefix();
      KST_WAR.DATA:=_data;
      KST_WAR.FIRMA:=_firma;
      KST_WAR.KST_DEF:=KST_DEF.ref();
      KST_WAR.WARTOSC:=_wartosc;
      _result:=KST_WAR.add(1)
   ?}
?};
KST_DEF.cntx_pop();
_result


\add_acr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Automatyczne dodanie pola do struktury stalych systemu oraz do widoku w systemie.
::       Jezeli pole juz istnieje ewentualne dodanie tylko do widoku.
::   WE: _a [STRING] - akronim pola
::       _b [STRING] - opis dla pola
::       _c [STRING] - HISTORIA T/N
::       _d [STRING] - WSPOLNA T/N
::       _e [STRING] - ZAPIS T/N
::       _f - zestaw danych np KST
::       _g... - dziedziny produktu do widoku np 'PKD','PPL, PRC' - przynajmniej jeden musi być podany
::   WY: 1 - dodano pozycje zmiennej
::       0 - nie dodano (prawdopodobnie pozycja zmiennej istnieje w systemie)
::  OLD: \add_acr/stalesys.fml
::----------------------------------------------------------------------------------------------------------------------
_widok:="
   {? KST_DOM.find_key(KST_ZES.ref(),_a)
   || KST_LST.index('NUMER');
      KST_LST.prefix(KST_DOM.ref());
      _lp:={? KST_LST.last() || KST_LST.NUMER ?}+1;
      KST_LST.index('UNIQUE');
      KST_LST.prefix(KST_MAP.ref(),KST_DOM.ref());
      {? ~KST_LST.first()
      || KST_LST.blank();
         KST_LST.KST_MAP:=KST_MAP.ref();
         KST_LST.KST_DOM:=KST_DOM.ref();
         KST_LST.NUMER:=_lp;
         KST_LST.add(1)
      ?}
   ?}";
_wyn:=0;
_jestDEF:=0;
KST_DEF.index('SYMBOL');
KST_DEF.prefix(_f+'.'+_a,);
{? ~KST_DEF.first()
|| KST_DEF.prefix();
   KST_DEF.blank();
   KST_DEF.OPIS:=
      {? var_pres('_b')<>type_of('')
      || exec('fldComment','#field',_f,_a)
      || _b
      ?};
   KST_DEF.SYMBOL:=_f+'.'+_a;
   KST_DEF.HISTORIA:=_c;
   KST_DEF.WSPOLNA:=_d;
   KST_DEF.ZAPIS:=_e;
   {? KST_DEF.add(1)
   || _wyn:=1;
      _jestDEF:=1
   ?}
|| _jestDEF:=1
?};
{? _jestDEF
|| KST_ZES.index('SYMBOL');
   KST_ZES.prefix(_f,);
   {? KST_ZES.first()
   || KST_MAP.index('ZES_DEF');
      KST_MAP.prefix();
      _jestMAP:=0;
      {? ~KST_MAP.find_key(KST_ZES.ref(),KST_DEF.ref(),_a,)
      || KST_MAP.KST_ZES:=KST_ZES.ref();
         KST_MAP.KST_DEF:=KST_DEF.ref();
         KST_MAP.SYMBOL:=_a;
         KST_MAP.OPIS:=KST_DEF.OPIS;
         {? KST_MAP.add(1)
         || _wyn:=1;
            _jestMAP:=1
         ?}
      || _jestMAP:=1
      ?};
      {? _jestMAP
      || KST_LST.prefix();
         KST_DOM.index('DOM_SYM');
         KST_DOM.prefix();
         {? _>7
         || {! _ind:=7.._ |! _widok(_[_ind]) !}
         || _wyn:=_widok(_g)
         ?}
      ?}
   ?}
?};
_wyn


\upd_acr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Aktualizacja pola stalych systemu.
::   WE: _a [STRING] - akronim pola
::      [_b][STRING] - opis dla pola, jeśli nie podano - pozostawienie dotychczasowej wartości
::      [_c][STRING] - HISTORIA T/N, jeśli nie podano - pozostawienie dotychczasowej wartości
::      [_d][STRING] - WSPOLNA T/N, jeśli nie podano - pozostawienie dotychczasowej wartości
::      [_e][STRING] - ZAPIS T/N, jeśli nie podano - pozostawienie dotychczasowej wartości
::       _f [STRING] - zestaw danych np KST
::      [_g]...      - dziedziny produktu do widoku np 'PKD','PPL','PRC' - jeśli nie podano żadnej dziedziny zsotaną
::                     pozostawione dotychczasowe dziedziny
::   WY: 1 - zaltualizowano stałą
::       0 - nie zaktualizowano (nie było zmian lub pozycja zmiennej nie istnieje w systemie)
::----------------------------------------------------------------------------------------------------------------------
_typeS:=type_of('');
:: uzupełnij deficicje stałych
exec('init_wer','#stalesys');
:: akronim pola:
_sym:=_a;
:: opis pola:
_opis:={? var_pres('_b')=_typeS || _b || null() ?};
:: zapis do historii:
_hist:={? var_pres('_c')=_typeS || _c || null() ?};
:: wspólna:
_wsp:={? var_pres('_d')=_typeS || _d || null() ?};
:: zapis (przechowuj wartość):
_zap:={? var_pres('_e')=_typeS || _e || null() ?};
:: zestaw danych, np. KST:
_zes:=_f;

:: czy była jakaś zmiana:
_zm:=0;
:: czy zaktualizowano:
_wyn:=0;

KST_DEF.cntx_psh();
KST_DEF.clear();
KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix(_zes,_zes);
KST_DOM.cntx_psh();
KST_DOM.index('DOM_SYM');
KST_DOM.prefix();
KST_LST.cntx_psh();
:: szukamy pola:
{? KST_MAP.find_key(_sym,_sym)
|| KST_MAP.KST_DEF();
   KST_MAP.KST_ZES();
   {? _>6
::    wyczyszczenie obecnych podpięć do dziedzin produktowych:
   || KST_DOM.prefix(KST_ZES.ref());
      KST_LST.index('UNIQUE');
      {? KST_DOM.first()
      || {!
         |? KST_LST.prefix(KST_MAP.ref(),KST_DOM.ref());
            {? KST_LST.first()
            || {!
               |? KST_LST.del()
               !}
            ?};

            KST_DOM.next()
         !}
      ?};
      KST_DOM.prefix();
::    aktualizacja dziedzin produktowych:
      {! _ii:=7.._
      |! {? KST_DOM.find_key(KST_ZES.ref(),_[_ii])
         || KST_LST.index('NUMER');
            KST_LST.prefix(KST_DOM.ref());
            _lp:={? KST_LST.last() || KST_LST.NUMER ?}+1;
            KST_LST.index('UNIQUE');
            KST_LST.prefix(KST_MAP.ref(),KST_DOM.ref());
            {? ~KST_LST.first()
            || KST_LST.blank();
               KST_LST.KST_MAP:=KST_MAP.ref();
               KST_LST.KST_DOM:=KST_DOM.ref();
               KST_LST.NUMER:=_lp;
               {? KST_LST.add(1) || _zm:=1 ?}
            ?}
         ?}
      !}
   ?};

:: aktualizacja opisu:
   {? type_of(_opis)=_typeS & KST_DEF.OPIS<>_opis
   || KST_DEF.OPIS:=_opis;
      _zm:=1
   ?};
:: aktualizacja zapisu do historii:
   {? type_of(_hist)=_typeS & KST_DEF.HISTORIA<>_hist
   || KST_DEF.HISTORIA:=_hist;
      _zm:=1
   ?};
:: aktualizacja wspólności:
   {? type_of(_wsp)=_typeS & KST_DEF.WSPOLNA<>_wsp
   || KST_DEF.WSPOLNA:=_wsp;
      _zm:=1
   ?};
:: aktualizacja przechowywania wartości:
   {? type_of(_zap)=_typeS & KST_DEF.ZAPIS<>_zap
   || KST_DEF.ZAPIS:=_zap;
      _zm:=1
   ?}
?};
{? _zm
|| _wyn:=KST_DEF.put()
?};
KST_LST.cntx_pop();
KST_DOM.cntx_pop();
KST_MAP.cntx_pop();
KST_DEF.cntx_pop();

_wyn


\stalesys_move
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Przekształca wartość danej stałej systemu z firmowego na wspólny
::       Wykonywane podczas formuł potransferowych
::   WE:  _a - STRING - symbol stałej (np 'XINFO')
::        _b - STRING - nazwa pola stałej
::       [_c] - INTEGER - 0/[1] - czy przepisywać wartość
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_stala:=_a;
_field:=_b;
_transfer_value:=1;
{? var_pres('_c')=type_of(0)
|| _transfer_value:=_c
?};

_result:=0;
_can_continue:=1;

KST_WAR.cntx_psh();
KST_WAR.index('FIRMA');
KST_DEF.cntx_psh();
KST_DEF.clear();
KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix(_stala,_stala);

{? KST_MAP.find_key(_field,) & KST_MAP.KST_DEF().WSPOLNA<>'T'
||
:: Przeputowanie zmiennej do wspólnego wora
   KST_DEF.WSPOLNA:='T';
   _can_continue:=KST_DEF.put();

   {? _can_continue>0 & _transfer_value>0
   ||
::    Transfer wartości z pierwszej firmy która ma niepustą wartość do wspólnego rekordu
      KST_WAR.prefix(KST_DEF.ref());
      _value:='';
      {? KST_WAR.first()
      || {!
         |? {? KST_WAR.FIRMA<>null() & KST_WAR.WARTOSC<>''
            || _value:=KST_WAR.WARTOSC
            ?};
            KST_WAR.next() & _value=''
         !}
      ?};

      {? _value<>''
      ||
::       Znalazłem wartość, zakładam albo putuję rekord wspólny
         KST_WAR.prefix(KST_DEF.ref(),null());
         {? KST_WAR.first()
         || {? KST_WAR.WARTOSC<>_value
            || KST_WAR.WARTOSC:=_value;
               _can_continue:=KST_WAR.put()
            ?}
         || KST_WAR.prefix();
            KST_WAR.blank();
            KST_WAR.KST_DEF:=KST_DEF.ref();
            KST_WAR.FIRMA:=null();
            KST_WAR.WARTOSC:=_value;
            _can_continue:=KST_WAR.add()
         ?}
      ?}
   ?}
?};
KST_MAP.cntx_pop();
KST_DEF.cntx_pop();
KST_WAR.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 c3edcf7546ff2a280ebb60c177c0b9a056109c8bf554967a2f8ef6faadbf8e52c1b8d9cc8cf7cce80aea1f6090347bd04c70c742a392d210363aa843276ff3492a3d491dd4e7d2707b758cebbff57bedfbf6b6b4188724ba5dfe756e5003b72fc8190d4d5db8e82067992cd9d38df2c0301eef07ca23ecdf667f9405344e8bfe
