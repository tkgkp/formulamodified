:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #bi_prel.fml [17.00]
:: Utworzony: 08.07.2013
:: Autor: TMR
::======================================================================================================================
:: Zawartosc: Formuły do obsługi tabeli BI_PREL
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli BI_PREL
::   WY: obj_new()
::----------------------------------------------------------------------------------------------------------------------
exec('BI_PREL','#buffer')


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wyświetla tabelę BI_PREL
::----------------------------------------------------------------------------------------------------------------------
BI_PREL.cntx_psh();
BI_PREL.prefix();
BI_PREL.select();
BI_PREL.cntx_pop()


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Funkcja dodająca wpis do tabeli BI_PREL
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','#bi_prel')
::   WY:      [REFERENCE]  - wskazanie na dodany rekord (lub już istniejący)
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};

_res:=0;
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID');
BI_PREL.prefix(_buffer.UID,);
{? BI_PREL.first()
|| _buffer.get();
   _res:=1
|| BI_PREL.blank(1);
   _buffer.set();
   BI_PREL.IDTIME:=exec('idtime','#blank');
   BI_PREL.DESCTODO:='N';
   {? BI_PREL.add()
   || _buffer.Ref:=BI_PREL.ref();
      _res:=1
   ?}
?};
BI_PREL.cntx_pop();
_res


\put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Funkcja poprawiająca wpis do tabeli BI_PREL
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','#bi_prel')
::   WY:      0/1     - wynik poprawienia rekordu
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};

_res:=0;
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
{? BI_PREL.r_lock(1,,,_buffer.Ref)
|| BI_PREL.prefix();
   {? BI_PREL.seek(_buffer.Ref)
   || _buffer.set();
      _res:=BI_PREL.put()
   || FUN.wdrerror('Krytyczny błąd - nie znaleziono rekordu BI_PREL w funkcji put/#bi_prel')
   ?};
   BI_PREL.r_unlock()
?};
BI_PREL.cntx_pop();
_res


\fillAndAdd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wypełnia bufor tabeli BI_PREL danymi i dodaje do BI_PREL
::   WE: _a - [REFERENCE] - wskazanie na instancję procesu (BI_PROC)
::       _b - [REFERENCE] - wskazanie na element procesu (B_PREL)
::       _c - [REFERENCE] - wskazanie na usera (USERS)
::   WY: bufor tabeli BI_PREL
::----------------------------------------------------------------------------------------------------------------------
_bi_proc:={? var_pres('_a')=type_of(null) || _a || return(null) ?};
_b_prel:={? var_pres('_b')=type_of(null) || _b || return(null) ?};
_user:={? var_pres('_c')=type_of(null) || _c || return(null) ?};

_buffer:=exec('buffer','#bi_prel');

_buffer.UID:=exec('uid','#blank');
_buffer.BI_PROC:=_bi_proc;
_buffer.B_PREL:=_b_prel;
_buffer.USERS:=_user;
_buffer.TM_BORN:=B_PREL.tm_stamp();

_class:=exec('FindAndGet','#table',B_PREL,_buffer.B_PREL,,"CLASS",'');
{? _class='B_ACTION'
|| _buffer.START:=0
|| _buffer.START:=B_PREL.tm_stamp()
?};
_buffer.STOP:=0;
_buffer.BI_STAT:=__Status.OCZEKUJACA;
_buffer.CODE:=exec('new_code','#b_design','BI_PREL',_buffer.UID);
B_PREL.cntx_psh();
B_PREL.prefix();
{? B_PREL.seek(_b_prel)
|| _buffer.B_WORKER:=B_PREL.B_WORKER;
   _buffer.AUTOMAT:=B_PREL.AUTOMAT;
   _buffer.FIRMA:={? B_PREL.B_PROC().MICRO='T' || REF.FIRMA || B_PREL.B_PROC().FIRMA ?}
?};
B_PREL.cntx_pop();

exec('add','#bi_prel',_buffer);
_buffer


\setStatus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Ustawia status elementu w procesie
::   WE:  _a  - [REFERENCE] - wskazanie na instancję elementu w procesie (BI_PREL)
::        _b  - [REFERENCE] - status
::       [_c] - 0 - ustaw status na _b
::              1 - ustaw status na _b i zapamiętaj dotychczasowy
::              2 - ustaw status na BI_PREL.BI_STATR i BI_PREL.BI_STATR na null
::       [_d] - INTEGER - [0]/1 czy wywołanie rekurencyjne
::       [_e] - INTEGER - wartość parametru no_msg dla funkcji r_lock
::   WY: 0 lub 1
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_bi_stat:=_b;
_tryb:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_rec:=0;
{? var_pres('_d')=type_of(0)
|| _rec:=_d
?};

_r_no_msg:=1;
{? var_pres('_e')=type_of(0)
|| _r_no_msg:=_e
?};

_result:=0;
_can_continue:=1;
exec('bistat_status','#bi_stat');

{? do_state()=2
|| return(0)
?};

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
{? BI_PREL.seek(_bi_prel)
|| {? BI_PREL.r_lock(1,_r_no_msg,1)
   || _stop:=BI_PREL.STOP;
      _bi_statr:=
         {? _tryb=1
         || {? BI_PREL.BI_STAT=__Status.ZAWIESZONA
            || BI_PREL.BI_STATR
            || BI_PREL.BI_STAT
            ?}
         || null()
         ?};
      {? _tryb=2
      || _bi_stat:=
            {? BI_PREL.BI_STATR=__Status.ZAWIESZONA
               | BI_PREL.BI_STATR=null()
            || {? BI_PREL.START
               || __Status.FL_CANCEL
               || __Status.OCZEKUJACA
               ?}
            || BI_PREL.BI_STATR
            ?}
      ?};
      {? _bi_stat
      || BI_PREL.BI_STAT:=_bi_stat;
         BI_PREL.BI_STATR:=_bi_statr;
         {? _bi_stat=__Status.ZAKONCZONA
         || BI_PREL.STOP:=B_PREL.tm_stamp();
            BI_PREL.DURATION:=exec('duration','#bi_prel','BI_PREL',_bi_prel,BI_PREL.STOP)
         |? _bi_stat=__Status.URUCHOMIONA
         || {? BI_PREL.START=0
            || BI_PREL.START:=B_PREL.tm_stamp()
            ?}
         ?};
::       Tutaj może się pojawić uwaga 324 (nie jest to błąd):
::       Próba modyfikacji rekordu tabeli BI_PREL poprawionego wcześniej przez innego użytkownika.
::       Rekord został już poprawiony.
         _can_continue:=BI_PREL.put();
         BI_PREL.r_unlock();

         {? _can_continue>0
         ||
            {? BI_PREL.BI_STAT=__Status.ZAKONCZONA | BI_PREL.BI_STAT=__Status.AWARYJNA
            ||
::             Jeśli czynność się skończyła to usuwam key refy
               B_KEYREF.cntx_psh();
               B_KEYREF.index('BI_PREL');
               B_KEYREF.prefix(ref_name(BI_PREL.ref()),BI_PREL.ref());
               {? B_KEYREF.first()
               || {!
                  |? _can_continue:=B_KEYREF.del(,1);
                     B_KEYREF.first() & _can_continue>0
                  !}
               ?};
               B_KEYREF.cntx_pop()
            ?}
         ?};
         {? _can_continue>0
         ||
            {? _stop<>BI_PREL.STOP
            ||
::             Jeżeli zmienił się czas zatrzymania to
::             aktualizuje tm_stampy zakończenia na wszystkich BI_CONNach wychodzących z tego BI_PRELA
               BI_CONN.cntx_psh(); {? BI_CONN.name()='' || BI_CONN.use('bi_c____') ?};
               BI_CONN.index('FROM2');
               BI_CONN.prefix(BI_PREL.BI_PROC,BI_PREL.ref());
               {? BI_CONN.first()
               || {!
                  |? BI_CONN.TM_END:=BI_PREL.STOP;
                     _can_continue:=BI_CONN.put();
                     BI_CONN.next() & _can_continue>0
                  !}
               ?};
               BI_CONN.cntx_pop();
               ~~
            ?}
         ?}
      || BI_PREL.r_unlock()
      ?}
   || {? _rec=0
      ||
         _repeat:=1;
         _delay:=exec('delay','#b_proman');
         _repeat_num:=exec('repeat','#b_proman');
         {? _repeat_num>0
         ||
            {! _it:=1.._repeat_num
            |? _repeat>0
            |! {? _delay>0
               || delay(,_delay)
               ?};
               _rec_no_msg:=1;
               {? _it=_repeat_num
               || _rec_no_msg:=0
               ?};
::             !!! REKURENCJA !!!
               {? exec('setStatus','#bi_prel',_bi_prel,_bi_stat,_tryb,1,_rec_no_msg)>0
               || _repeat:=0
               ?}
            !};
            {? _repeat>0
            || _can_continue:=0;
               _msg:='Błąd krytyczny Menedżera Procesów: ustawienie statusu instancji elementu nie powiodło się.'@;
::               FUN.emsg(_msg);
::               msg(_msg);
               ~~
            || _can_continue:=1
            ?}
         ?}
      ?}
   ?}
?};
BI_PREL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\getStatus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Pobiera status elementu w procesie
::   WE: _a - [REFERENCE] - wskazanie na instancję elementu w procesie (BI_PREL)
::   WY:      [REFERENCE] - wskazanie na status (BI_STAT)
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

_result:=null();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
{? BI_PREL.seek(_bi_prel)
|| _result:=BI_PREL.BI_STAT
?};
BI_PREL.cntx_pop();
_result


\findPrel4BiProc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Znajduje instancję elementu w procesie
::   WE: _a - [REFERENCE] - wskazanie na instancję procesu (BI_PROC)
::       _b - [REFERENCE] - wskazanie na element procesu (B_PREL)
::       [_c]-[REFERENCE] - wskazanie na status elementu (BI_STAT)
::   WY:      [REFERENCE] - wskazanie na instancję elementu w procesie (BI_PREL)
::----------------------------------------------------------------------------------------------------------------------
_bi_proc:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
 _b_prel:={? var_pres('_b')=type_of(null) || _b || return(0) ?};
_bi_stat:={? var_pres('_c')=type_of(null) || _c || null()    ?};

_res:=null();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('PREL');
BI_PREL.prefix(_bi_proc,_b_prel);
{? BI_PREL.first()
|| _dalej:=1;
   {? _bi_stat=null()
   || _res:=BI_PREL.ref()
   ||
      {!
      |? {? BI_PREL.BI_STAT=_bi_stat
         || _res:=BI_PREL.ref();
            _dalej:=0
         ?};
         _dalej & BI_PREL.next()
      !}
   ?}
?};
BI_PREL.cntx_pop();
_res


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kasuje podany rekord tabeli BI_PREL
::   WE: _a - [REFERENCE]  - BI_PREL.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
{? BI_PREL.seek(_ref)
|| {? exec('clean','#bi_prel',_ref)>0
   || {? BI_PREL.PARSES<>''
      || __PARSES.del(BI_PREL.PARSES)
::       Nawet jeżeli dane są popsute i nie ma PARSES-a (powyższa metoda zwróci 0), to chyba instancję procesu
::       powinno się dać usunąć. Dlatego nie badamy wyniku metody.
      ?};
      {? BI_PREL.del(1,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0 || undo() ?};
{? _mydo || end() ?};

BI_PREL.cntx_pop();
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli BI_PREL
::   WE: _a - [REFERENCE] - BI_PREL.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania ---

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
{? BI_PREL.seek(_ref)
||
:: 1. Usuwam instancje portów
   BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
   BI_PORT.index('UNIQUE'); BI_PORT.prefix(_ref);
   {? BI_PORT.first()
   || {!
      |? _can_continue:=exec('delete','#bi_port',BI_PORT.ref());
         BI_PORT.first() & _can_continue>0
      !}
   ?};
   BI_PORT.cntx_pop();

:: 2. usuwam instancje TODO
::    realizowane przez trigger zakladany w exec('triggerOn','#bi_todo')
::   {? _can_continue>0
::   || BI_TODO.cntx_psh();
::      BI_TODO.index('UNIQUE');
::      BI_TODO.prefix(_ref);
::      {? BI_TODO.first()
::      || {!
::         |? _can_continue:=exec('delete','#bi_todo',BI_TODO.ref());
::            BI_TODO.first() & _can_continue>0
::         !}
::      ?};
::      BI_TODO.cntx_pop()
::   ?};

:: 3. usuwam instancje kluczowych elementów (są usuwane w triggerze po zmianie statusu BI_PRELa i BI_PROCa ale...)
   {? _can_continue>0
   || B_KEYREF.cntx_psh();
      B_KEYREF.index('BI_PREL');
      B_KEYREF.prefix(ref_name(_ref),_ref);
      {? B_KEYREF.first()
      || {!
         |? _can_continue:=exec('delete','#b_keyref',B_KEYREF.ref());
            B_KEYREF.first() & _can_continue>0
         !}
      ?};
      B_KEYREF.cntx_pop()
   ?};

:: 4. usuwa kolejke BI_QUEUE
   BI_QUEUE.cntx_psh();
   BI_QUEUE.index('BI_PREL');
   BI_QUEUE.prefix(_ref);
   _loop:=BI_QUEUE.first();
   {!
   |? _loop
   |!
      _loop:=BI_QUEUE.del()
   !};
   BI_QUEUE.cntx_pop();

:: 5. Usuwam BI_CONNY wychodzace z tego elementu
   BI_CONN.cntx_psh(); {? BI_CONN.name()='' || BI_CONN.use('bi_c____') ?};
   BI_CONN.index('FROM');
   BI_CONN.prefix(BI_PREL.BI_PROC,BI_PREL.ref());
   {? BI_CONN.first()
   || {!
      |? _can_continue:=exec('delete','#bi_conn',BI_CONN.ref());
         BI_CONN.first() & _can_continue>0
      !}
   ?};

:: 6. Usuwam BI_CONNy wchodzace do tego elementu
   BI_CONN.index('TO');
   BI_CONN.prefix(BI_PREL.BI_PROC,BI_PREL.ref());
   {? BI_CONN.first()
   || {!
      |? _can_continue:=exec('delete','#bi_conn',BI_CONN.ref());
         BI_CONN.first() & _can_continue>0
      !}
   ?};

:: 7. Usuwam BI_CONNY wychodzace z tego elementu
   BI_CONN.index('FROM1');
   BI_CONN.prefix(BI_PREL.ref());
   {? BI_CONN.first()
   || {!
      |? _can_continue:=exec('delete','#bi_conn',BI_CONN.ref());
         BI_CONN.first() & _can_continue>0
      !}
   ?};

:: 8. Usuwam BI_CONNy wchodzace do tego elementu
   BI_CONN.index('TO1');
   BI_CONN.prefix(BI_PREL.ref());
   {? BI_CONN.first()
   || {!
      |? _can_continue:=exec('delete','#bi_conn',BI_CONN.ref());
         BI_CONN.first() & _can_continue>0
      !}
   ?};

:: 9. Usuwam B_HARM
   B_HARM.index('BI_PREL');
   B_HARM.prefix(BI_PREL.ref());
   {? B_HARM.first()
   || exec('delete','#b_harm',B_HARM.ref())
   ?};

:: 10. Usuwam BI_PORTy ktore wskazuja ten element jako zrodlo wartosci
   BI_PORT.cntx_psh(); {? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
   BI_PORT.index('SOURCE'); BI_PORT.prefix(BI_PREL.ref());
   {? BI_PORT.first()
   || {!
      |? _can_continue:=exec('delete','#bi_port',BI_PORT.ref());
         BI_PORT.first() & _can_continue>0
      !}
   ?};
   BI_PORT.cntx_pop();

:: 11. Usuwam B_WRKHST
   {? _can_continue>0
   || _can_continue:=exec('del_b_wrkhst','#b_worker',BI_PREL.ref())
   ?};

:: 12. Usuwam BI_MSG
   _can_continue:=exec('delete4biprel','#bi_msg');

:: 13. odblokowanie
   exec('unlock','#bi_prel',BI_PREL.ref());

   BI_CONN.cntx_pop();
   ~~
?};
BI_PREL.cntx_pop();

:: --- wszystkie powiazania usuniete? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || _result:=end() ?};
_result


\isWaitOrLaunch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Funkcja sprawdzająca czy czynność jest aktualnie uruchomiona lub oczekująca w jakiejkolwiek instancji procesu
::   WE: _a - [REFERENCE]  - wskazanie na b_prel (czynność)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_b_prel:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
_uruchomiona:=exec('URUCHOMIONA','#bi_stat');
_oczekujaca:=exec('OCZEKUJACA','#bi_stat');
_res:=0;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('ELSTATUS');
BI_PREL.prefix(_b_prel,_oczekujaca);
_res:=BI_PREL.first();
{? _res=0
|| BI_PREL.prefix(_b_prel,_uruchomiona);
   _res:=BI_PREL.first()
?};
BI_PREL.cntx_pop();
_res


\first_conn_aft
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Znajduje pierwszy element za podanym
::   WE: _a - BI_PREL.ref() - instancja elementu
::   WY: B_CONN.ref() lub null()
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;

_result:=null();

B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
{? BI_PREL.seek(_bi_prel)
||
:: Podczytanie B_PREL
   BI_PREL.B_PREL();
   B_CONN.cntx_psh();
   B_CONN.index('FROM');
   B_CONN.prefix(BI_PREL.BI_PROC().B_PROC,B_PREL.ref());
   {? B_CONN.first()
   || _result:=B_CONN.ref()
   ?};
   B_CONN.cntx_pop();
   ~~
?};
B_PREL.cntx_pop();
BI_PREL.cntx_pop();
_result


\back2prel
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Szuka BI_PREL poprzedzającego bramkę _a
::   WE: _a - BI_PREL.ref() - element z którego się cofnąć
::   WY: BI_PREL.ref
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;

_result:=null();


BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
{? BI_PREL.seek(_bi_prel)
||
:: Szukam w poprzednikach na podstawie sciezki ktora szedl proces
   BI_CONN.cntx_psh(); {? BI_CONN.name()='' || BI_CONN.use('bi_c____') ?};
   BI_CONN.index('TO');
   BI_CONN.prefix(BI_PREL.BI_PROC,BI_PREL.ref());
   {? BI_CONN.first()
   || _result:=BI_CONN.FROM
   ?};
   BI_CONN.cntx_pop()
?};
BI_PREL.cntx_pop();
_result


\collect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wypełnia tabelę _d instancjami uruchomionych lub oczekujących elementów na które czeka brama
::   WE: _a - BI_PROC.ref() - instancja procesu
::       _b - BI_PREL.ref() - instancja bramki zbierającej OR
::       _c - B_PROC.ref() - definicja procesu
::       _d - B_PREL.ref() - bramka zbierająca OR w definicji procesu
::       _e - tabela tymczasowa
::       _f - 0-zwróć wszystkie elementy na które czeka brama, 1-zwróć pierwszy z brzegu element na który czeka brama
::----------------------------------------------------------------------------------------------------------------------
_bi_proc:=_a;
_bi_prel:=_b;
_b_proc:=_c;
_b_prel:=_d;
_Biprels:=_e;
_one:=_f;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('BISTATUS');
{! _ii:=1..8
|!
   _stat:=
      {? _ii=1 || __Status.OCZEKUJACA
      |? _ii=2 || __Status.URUCHOMIONA
      |? _ii=3 || __Status.BLAD
      |? _ii=4 || __Status.FL_KEEP
      |? _ii=5 || __Status.FL_DONE
      |? _ii=6 || __Status.FL_CANCEL
      |? _ii=7 || __Status.FL_ERROR
      |? _ii=8 || __Status.ZAWIESZONA
      ?};
   BI_PREL.prefix(_bi_proc,_stat);
   _loop:=BI_PREL.first();
   {!
   |? _loop
   |!
      {? exec('check','#b_gatele',_b_proc,_b_prel,BI_PREL.B_PREL)
      || _Biprels.BI_PREL:=$BI_PREL.ref();
         {? _Biprels.add()
         || {? _one
            || BI_PREL.cntx_pop();
               return()
            ?}
         ?}
      ?};
      _loop:=BI_PREL.next()
   !}
!};
BI_PREL.cntx_pop();

~~


\biprels_tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Zwraca tabelę tymczasową która zawiera listę BI_PRELi z których należy pobierać wartości argumentów
::       Lista ta jest posortowana malejąco po czasie zakończenia się BI_PRELa
::   WY: tab_tmp
::----------------------------------------------------------------------------------------------------------------------
_biprels:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'BI_PREL','STRING[16]','SQL ref BI_PREL'
);
_biprels


\lock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Blokuje instancje elementu procesu na czas wykonywania formuly czynnosci
::   WE: [_a] - BI_PREL.ref()
::       [_b] - czy wyswietlac dialogi (domyslnie 1 - wyswietlac na ekran, 2 - dodawać do KOMM)
::   WY: 0 - nie udalo sie zablokowac
::       1 - udalo sie
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _bi_prel:=_a
|| _bi_prel:=BI_PREL.ref()
?};

{? var_pres('_b')=type_of(0)
|| _display:=_b
|| _display:=1
?};

_result:=0;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
{? BI_PREL.seek(_bi_prel)
||
   _ses_id:=exec('blk_lock','#table','BI_PREL',_bi_prel,,2);
   {? _ses_id=SYSLOG.ses_id()
   || _result:=1
   ||
      _msg:='Element procesu jest uruchomiony lub zablokowany przez użytkownika \''+BI_PREL.ses_info(_ses_id,'log_name')+'\' '+
            'na terminalu \''+BI_PREL.ses_info(_ses_id,'log_tty')+'\'.';
      {? _display=1
      || FUN.emsg(_msg)
      |? _display=2
      || KOMM.add(_msg,2)
      ?}
   ?}
?};
BI_PREL.cntx_pop();
_result


\unlock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Usuniecie blokady elementu procesu
::   WE: _a - BI_PREL.ref()
::       [_b] - obj_new() - stos na którym sprawdzić czy można odblokować element
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _bi_prel:=_a
|| _bi_prel:=BI_PREL.ref()
?};
_stos:=~~;
{? var_pres('_b')>100
|| _stos:=_b
?};
_can_unlock:=1;
{? type_of(_stos)>100
|| {? _stos.countBiPrel(_bi_prel)>0
   ||
::    Jeśli na stosie uruchomionych znajduje się ta instancja czynności to nie mogę
::    jej odblokować, bo ktoś mógłby zacząć ją uruchamiać w innym wątku
      _can_unlock:=0
   ?}
?};
{? _can_unlock>0
|| exec('blk_unlock','#table','BI_PREL',_bi_prel)
?};
~~


\user_access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy podany użytkownik ma prawo wykonać daną instancję elementu procesu
::   WE: _a - USERS.ref()
::       [_b] - BI_PREL.ref() lub bieżący rekord
::       [_c] - USERS.ref() - zastępowany użytkownik
::   WY: 0 - użytkownik nie ma prawa wykonać podanej instancji elementu procesu
::       1 - użytkownik ma prawo wykonać podaną instancję elementu
::  TAG: <PUBLICZNA><MODELER><PROCES><UPRAWNIENIA><UŻYTKOWNIK><CHK>
::----------------------------------------------------------------------------------------------------------------------
_user:=_a;

_ref:=null();
{? var_pres('_b')=type_of(SYSLOG.ref())
|| _ref:=_b
?};

_user_r:=_user;
{? var_pres('_c')=type_of(USERS.ref())
|| _user_r:=_c
?};

_result:=0;
_can_continue:=1;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?}; BI_PREL.index('UID');
{? _ref<>null()
|| BI_PREL.clear();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _tab:=exec('usersAction','#b_desktop',BI_PREL.ref(),,_user,,_user_r);
   {? _tab.find_key($_user)
   || _result:=1
   ?}
?};
BI_PREL.cntx_pop();
_result


\no_access_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla komunikat o braku uprawnień do wykonania danej instancji elementu procesu
::   WE: _a - USERS.ref()
::       [_b] - BI_PREL.ref() lub bieżący rekord
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_user:=_a;

_ref:=null();
{? var_pres('_b')=type_of(SYSLOG.ref())
|| _ref:=_b
?};

_result:=0;
_can_continue:=1;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?}; BI_PREL.index('UID');
{? _ref<>null()
|| BI_PREL.clear();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   USERS.cntx_psh();
   USERS.clear();
   {? USERS.seek(_user)
   ||
      _msg:='Brak uprawnień do wykonania czynności: %1 dla użytkownika %2\n\n'@[BI_PREL.B_PREL().SYMBOL,USERS.KOD];
      _msg+='Użytkownikowi należy nadać odpowiednią rolę lub uprawnienia do danych niezbędne do wykonania czynności.'@;

      {? +app_info('web_sesid')
      ||
::       Ścieżka web terma - tylko info
         FUN.emsg(_msg)
      ||
::       Ścieżka jterma - info i możliwość zgłoszenia problemu
         {!
         |? _choice:=FUN.choice(_msg,,'Zgłoś &problem'@,,,,'Zamknij'@);
            {? _choice=1
            || BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
               BI_TODO.index('UNIQUE'); BI_TODO.prefix(BI_PREL.ref(),USERS.ref());
               {? BI_TODO.first()
               || {? exec('todoError','#bi_msg',1,_msg)>0
                  || _can_continue:=0
                  ?}
               || FUN.emsg('Nie znaleziono zapisu na liście zadań.'@);
                  _can_continue:=0
               ?};
               BI_TODO.cntx_pop()
            || _can_continue:=0
            ?};
            _can_continue>0
         !}
      ?}
   ?};
   USERS.cntx_pop();
   ~~
?};
BI_PREL.cntx_pop();
~~


\back2biprel_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Argumenty dla funkcji \back2biprel
::   WY: obj_new()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
:: Instancja elementu procesu z którego wyruszyć, przez który przejść
   'BI_PREL'
:: Poszukiwany element procesu
   ,'B_PREL'
:: Tablica odwiedzonych elementów
   ,'VISITED'
:: Czy wywołanie rekurencyjne
   ,'REC'
:: Znaleziony bufor BI_PREL
   ,'RESULT'
:: Maksymalna odległość na jaką się zapuszczać
   ,'MAX_DISTANCE'
:: Odległość na jakiej jestem
   ,'DISTANCE'
);
_args.BI_PREL:=null();
_args.B_PREL:=null();
_args.VISITED:=exec('ref_table','#table');
_args.REC:=0;
_args.RESULT:=~~;
_args.MAX_DISTANCE:=0;
_args.DISTANCE:=0;
_args


\back2biprel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Cofa się po instancjach elemetów procesu aż do momentu w którym znajdzie pierwsze
::       wystąpienie elementu procesu podanego jako _args.B_PREL
::   WE: _a - _args - argumenty funkcji uzyskane za pomocą exec('back2biprel_a','#bi_prel')
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
{? BI_PREL.seek(_args.BI_PREL) & _args.VISITED.r_find(_args.BI_PREL)=0
|| _args.VISITED.add(BI_PREL.ref());

   _can_continue:=1;
   {? _args.REC=1
   ||
      _args.DISTANCE+=1;
      {? BI_PREL.B_PREL=_args.B_PREL
      || _can_continue:=0;
         _args.RESULT:=exec('buffer','#bi_prel');
         _args.RESULT.get()
      ?}
   ?};
   {? _can_continue>0
   || {? _args.MAX_DISTANCE>0 & _args.DISTANCE>=_args.MAX_DISTANCE
      || _can_continue:=0
      ?}
   ?};

   {? _can_continue>0
   ||
      BI_CONN.cntx_psh(); {? BI_CONN.name()='' || BI_CONN.use('bi_c____') ?};
      BI_CONN.index('TO');
      BI_CONN.prefix(BI_PREL.BI_PROC,BI_PREL.ref());
      {? BI_CONN.first()
      || {!
         |?
::          !!! REKURENCJA !!!
            _args.BI_PREL:=BI_CONN.FROM;
            _args.REC:=1;
            exec('back2biprel','#bi_prel',_args);
            BI_CONN.next() & type_of(_args.RESULT)=0
         !}
      ?};
      BI_CONN.cntx_pop();
      ~~
   ?}
?};
BI_PREL.cntx_pop();
~~


\get_pl_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Na podstawie planowanego czasu trwania czynności wyznacza planowany czas zakończenia
::       uwzględniając podany kalendarz
::   WE: _a - BI_PREL.ref() - instancja czynności
::       _b - REAL - moment startu czynności
::       [_c] - STRING - nazwa kalendarza który ma zostać użyty do wyznaczenia końca
::   WY: REAL - tm_stamp - planowany koniec
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_start:=_b;

_kalendarz:='';
{? var_pres('_c')=type_of('')
|| _kalendarz:=_c
?};

_result:=0;

:: Na razie bez uwzględnienia kalendarza, bo nie mamy takich metod w obiekcie kalendarza
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
B_PREL.cntx_psh();
{? BI_PREL.seek(_bi_prel)
||
   {? BI_PREL.B_PREL<>null()
   ||
::    Podczytuję definicję
      BI_PREL.B_PREL();

      {? B_PREL.IVAL_DEF<>null()
      || _result:=exec('add_to_point','#interval',_start,B_PREL.IVAL_DEF)
      ?}
   ?}
?};
B_PREL.cntx_pop();
BI_PREL.cntx_pop();
_result


\duration
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Oblicza czas rzeczywitego wykonywania czynności lub procesu
::   WE: _a - STRING - akronim tabeli: 'BI_PROC', 'BI_PREL'
::       _b - Ref rekordu dla którego obliczyć czas trwania
::       _c - REAL - czas zakończenia
::       [_c] - STRING - nazwa kalendarza który ma zostać użyty do wyznaczenia końca
::   WY: REAL - tm_stamp - obliczony czas trwania
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tab_acr:=_a;
_ref:=_b;
_stop:=_c;

_result:=0;

_tab:=($_tab_acr)();
_kalendarz:='';
{? var_pres('_d')=type_of('')
|| _kalendarz:=_d
?};

_tab.cntx_psh(); _tab.clear();
{? _tab.seek(_ref)
|| {? _tab.START>0 & _stop>0
   ||
::    Na razie bez uwzględnienia kalendarza, bo nie mamy takich metod w obiekcie kalendarza
      _start:=exec('min','#math',_tab.START,_stop);
      _end:=exec('max','#math',_tab.START,_stop);

      _result:=_end-_start
   ?}
?};
_tab.cntx_pop();
_result


\delParses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Usuwanie parses powiązanego z instancją czynności
::   WE: _a - BI_PREL.ref()
::   WY: =1-usunięto parses
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;

_ret:=1;
{? exec('FindAndGet','#table',BI_PREL,_bi_prel,,,null())
|| _buffer:=exec('buffer','#bi_prel');
   _buffer.cntx_get(_bi_prel);
   _parses:=_buffer.PARSES;
   {? +_parses=48
   || _ret:=0;
      _buffer.PARSES:='';
      {? exec('put','#bi_prel',_buffer)
      || _ret:=__PARSES.del(_parses)
      ?}
   ?}
?};
_ret


\color_fill1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca kolor wypełnienia pierwszy dla podanego elementu procesu
::   WE: _a - BI_PREL.ref() - element procesu
::       [_b] - STRING - typ zwracanego koloru: HEX   - '#FFFFFF'    - domyślnie
::                                              MBASE - '255:255:255'
::
::   WY: STRING - kolor w wybranym formacie
::  TAG: <PUBLICZNA>
::  OLD: \color_fill1/#graphml.fml
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_mode:='HEX';
{? var_pres('_b')=type_of('')
|| _mode:=_b
?};

_color:='#ffffff';

{? _mode='MBASE'
|| _color:=1-_color;
   _color:=exec('hex2dec','#color',_color)
?};
_color


\color_fill2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca kolor wypełnienia drugi dla podanego elementu procesu
::   WE: _a - BI_PREL.ref() - element procesu
::       [_b] - STRING - typ zwracanego koloru: HEX   - '#FFFFFF'    - domyślnie
::                                              MBASE - '255:255:255'
::
::   WY: STRING - kolor w wybranym formacie
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_mode:='HEX';
{? var_pres('_b')=type_of('')
|| _mode:=_b
?};

_color:='#D4D4D4CC';
{? _mode='MBASE'
|| _color:=1-_color;
   _color:=exec('hex2dec','#color',_color)
?};
_color


\color_line
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca kolor linii dla podanego elementu procesu
::   WE: _a - BI_PREL.ref() - element procesu
::       [_b] - STRING - typ zwracanego koloru: HEX   - '#FFFFFF'    - domyślnie
::                                              MBASE - '255:255:255'
::       [_c] - STRING - wartość domyślna koloru, jeśli nie podane to '#808080'
::   WY: STRING - kolor w wybranym formacie
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_mode:='HEX';
{? var_pres('_b')=type_of('')
|| _mode:=_b
?};

_color:='#808080';
{? var_pres('_c')=type_of('')
|| _color:=_c
?};
B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.clear();
{? BI_PREL.seek(_bi_prel)
||
   {? exec('is_gate','#b_gate',BI_PREL.B_PREL().B_ELE)=1
   || _color:='#ff6600'
   ?};

   _bi_stat:=BI_PREL.BI_STAT;
   _problems:=exec('isProblems','#bi_msg',BI_PREL.ref())<>0;
   {? _bi_stat=exec('BLAD','#bi_stat')
   || _color:='#ff0000'
   |? _problems>0
   || _color:='#ffcc00'
   |? _bi_stat=exec('URUCHOMIONA','#bi_stat') | _bi_stat=exec('URUCHOMIONY','#bi_stat') | _bi_stat=exec('FL_CANCEL','#bi_stat')
   || _color:='#27ae27'
   |? _bi_stat=exec('OCZEKUJACA','#bi_stat') | _bi_stat=exec('OCZEKUJACY','#bi_stat')
   || _color:='#27ae27'
   ?}
?};
BI_PREL.cntx_pop();
B_PREL.cntx_pop();
{? _mode='MBASE'
|| _color:=1-_color;
   _color:=exec('hex2dec','#color',_color)
?};
_color


\color_line_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca kolor linii dla podanego elementu procesu, bieże pod uwagę wszystkie
::       instancje podanego elementu w podanej instancji procesu
::   WE: _a - B_PREL.ref() - element procesu
::       _b - ref_table - instancje procesów w których szukać
::       [_c] - STRING - typ zwracanego koloru: HEX   - '#FFFFFF'    - domyślnie
::                                              MBASE - '255:255:255'
::       [_d] - STRING - wartość domyślna koloru, jeśli nie podane to ''
::   WY: STRING - kolor w wybranym formacie
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;
::_bi_proc:=_b;
_ref_table_proc:=_b;

_mode:='HEX';
{? var_pres('_c')=type_of('')
|| _mode:=_c
?};

_color:='';
{? var_pres('_d')=type_of('')
|| _color:=_d
|| _color:=''
?};
_can_continue:=1;

B_PREL.cntx_psh();
B_PREL.clear();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};

_tab:=_ref_table_proc.tab;
_tab.cntx_psh();
{? B_PREL.seek(_b_prel)
||
   {? exec('is_gate','#b_gate',B_PREL.B_ELE)=1
   || _color:='#ff6600'
   ?};

   BI_PREL.index('PREL');
:: Czy są jakieś instancje z błędem
   {? _tab.first()
   || {!
      |? _bi_proc:=exec('FindAndGet','#table',BI_PROC,_tab.SQL,,,null());
         BI_PREL.prefix(_bi_proc,B_PREL.ref(),exec('BLAD','#bi_stat'));
         {? BI_PREL.first()
         ||
            _can_continue:=0;
            _color:='#ff0000'
         ?};
         _tab.next() & _can_continue>0
      !}
   ?};
   {? _can_continue>0
   ||

::    Sprawdzam czy są jakieś instancje z problemami
      {? _tab.first()
      || {!
         |? _bi_proc:=exec('FindAndGet','#table',BI_PROC,_tab.SQL,,,null());
            BI_MSG.index('B_PREL');
            BI_MSG.prefix('T',B_PREL.ref(),_bi_proc);
            {? BI_MSG.first()
            || _color:='#ffcc00';
               _can_continue:=0
            ?};
            _tab.next() & _can_continue>0
         !}
      ?}
   ?};

   {? _can_continue>0
   ||
::    Sprawdzam czy są jakieś instancje uruchomione lub oczekujące
      _run_color:='#27ae27';
      {? _tab.first()
      || {!
         |? _bi_proc:=exec('FindAndGet','#table',BI_PROC,_tab.SQL,,,null());

            BI_PREL.prefix(_bi_proc,B_PREL.ref(),exec('URUCHOMIONA','#bi_stat'));
            {? BI_PREL.first()
            || _color:=_run_color;
               _can_continue:=0
            ?};
            {? _can_continue>0
            ||
               BI_PREL.prefix(_bi_proc,B_PREL.ref(),exec('URUCHOMIONY','#bi_stat'));
               {? BI_PREL.first()
               || _color:=_run_color;
                  _can_continue:=0
               ?}
            ?};
            {? _can_continue>0
            ||
               BI_PREL.prefix(_bi_proc,B_PREL.ref(),exec('OCZEKUJACA','#bi_stat'));
               {? BI_PREL.first()
               || _color:=_run_color;
                  _can_continue:=0
               ?}
            ?};
            {? _can_continue>0
            ||
               BI_PREL.prefix(_bi_proc,B_PREL.ref(),exec('OCZEKUJACY','#bi_stat'));
               {? BI_PREL.first()
               || _color:=_run_color;
                  _can_continue:=0
               ?}
            ?};
            {? _can_continue>0
            ||
               BI_PREL.prefix(_bi_proc,B_PREL.ref(),exec('FL_CANCEL','#bi_stat'));
               {? BI_PREL.first()
               || _color:=_run_color;
                  _can_continue:=0
               ?}
            ?};
            _tab.next() & _can_continue>0
         !}
      ?}
   ?};
   ~~
?};
_tab.cntx_pop();
BI_MSG.cntx_pop();
BI_PREL.cntx_pop();
B_PREL.cntx_pop();
{? _mode='MBASE'
|| _color:=1-_color;
   _color:=exec('hex2dec','#color',_color)
?};
_color


\closeBiprels
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zamyka instancje elementów na które czeka brama _a
::   WE: _a - tabela zwracana przez exec('biprels_tab','#bi_prel')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_biprels:=_a;

_result:=1;

_loop:=_biprels.first();
{!
|? _loop
|!
   _result:=_result & exec('FindAndGet','#table',BI_PREL,_biprels.BI_PREL,,"
      {? BI_STAT=__Status.BLAD
      ||
:: instancje czynność ze statusem __Status.BLAD nie podlegają anulowaniu aby wiadomo było, że podczas ich wykonania
:: wystąpił problem
         0
      ||
         exec('setStatus','#bi_prel',BI_PREL.ref(),exec('ANULOWANA','#bi_stat'))
      ?}
   ");
   _loop:=_biprels.next()
!};

_result


\user_history
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Historia zadań wykonywanych przez użytkownika
::   WE: _a - USERS.ref(), jeżeli nie podane to OPERATOR.USER
::----------------------------------------------------------------------------------------------------------------------
_user:={? var_pres('_a')=type_of(null()) || _a || OPERATOR.USER ?};

_par:=tab_tmp(1,
   'ENDED','STRING[1]','Czy analizować zapisy zakończone?',
   'OD_DATY','DATE','Od daty'@,
   'DO_DATY','DATE','Do daty'@,
   'START','STRING[1]','Czy analizować zapisy wg terminu uruchomienia?',
   'ARCH','STRING[1]','Czy analizować zapisy archiwalne?'
);

_formula:="
   _tab:=cur_tab(1,1);
   {? _tab.ENDED='N'
   || _tab.START:='T'
   || _tab.START:='N'
   ?};
   _tab.efld_opt(cur_win(),{? _tab.ENDED='N' || 'enable=0' || 'enable=1' ?},,'START');
   1
";
_par.fld_fml('ENDED','AFTER_EDIT',_formula);

_par.blank();
_par.ENDED:='T';
_par.START:='N';
_par.OD_DATY:=date()-30;
_par.DO_DATY:=date();
_par.ARCH:='N';

_red:=_par.mk_edit('Zakres danych'@,0,'userhistorypar');
_par.win_esep(_red,'Dane podstawowe'@);
_par.win_efld(_red,,'ENDED',,,,,,
   'Zadania'@,,,'radio-buttons',,'nie zakończone'@,"'N'",'zakończone'@,"'T'");
_par.win_esep(_red,'Zakres dat'@);
_par.win_efld(_red,,'OD_DATY');
_par.win_efld(_red,,'DO_DATY');
_par.win_efld(_red,,'START',,,,,,
   'Zapisy'@,,,'radio-buttons',,'na podstawie terminów zakończenia'@,"'N'",'na podstawie terminów rozpoczęcia'@,"'T'");
_par.win_esep(_red,'Dane dodatkowe'@);
_par.win_efld(_red,,'ARCH',,,,,,
   'Archiwum'@,,,'check-box','check_label="%1"'['Czy analizować zapisy archiwalne?'@],"'T'","'N'");
_par.win_ebtn(_red,'text=%1'['Zapisz'@],"'key:F2'");
_par.win_ebtn(_red,'text=%1'['Anuluj'@],"'key:Esc'");

_par.win_edit(_red);
_valid:="
   _par:=cur_tab(1,1);
   {? _par.OD_DATY>_par.DO_DATY
   || FUN.info('Końcowa data analizy nie może być wcześniejsza niż data początkowa.'@);
      'DO_DATY'
   |? _par.DO_DATY>date()
   || FUN.info('Końcowa data analizy nie może być późniejsza niż data bieżąca.'@);
      'DO_DATY'
   || 1
   ?}
";
{? _par.edit(_valid)
||
   _from:=exec('create','#tm_stamp',_par.OD_DATY,time(0,0,0));
   _to:=exec('create','#tm_stamp',_par.DO_DATY+1,time(0,0,0));

   _tab:=sql("
      select
         B_PROC.NAME as PROCNAME,
         B_PROC.SYMBOL as PROCSYM,
         B_PROC.VER as PROCVER,
         B_PROC.ACTIVE as PROCACT,
         B_PREL.SYMBOL as PRELSYM,
         'T' as ARCH,
         BI_PREL.DESC as OPIS,
         BI_PREL.TM_BORN as BORN,
         cast(null as DATE_TYPE) as BORN_DT,
         cast(null as TIME_TYPE) as BORN_TM,
         BI_PREL.START as START,
         cast(null as DATE_TYPE) as START_DT,
         cast(null as TIME_TYPE) as START_TM,
         BI_PREL.STOP as STOP,
         cast(null as DATE_TYPE) as STOP_DT,
         cast(null as TIME_TYPE) as STOP_TM,
         BI_PROC.REFERENCE as BI_PROC,
         B_PREL.REFERENCE as B_PREL,
         (case when BI_PROC.BI_STAT=:_c then 'T' else 'N' end) as PROCEND
      from "+{? _par.ARCH='T' || '@' || '' ?}+"BI_PREL
         join "+{? _par.ARCH='T' || '@' || '' ?}+"BI_PROC using(BI_PREL.BI_PROC,BI_PROC.REFERENCE)
            join B_PROC using(BI_PROC.B_PROC,B_PROC.REFERENCE)
         join B_PREL using(BI_PREL.B_PREL,B_PREL.REFERENCE)
            join B_ELE using(B_PREL.B_ELE,B_ELE.REFERENCE)
         join BI_STAT using(BI_PROC.BI_STAT,BI_STAT.REFERENCE)
      where BI_PREL.USERS=:_a
         and "+{? _par.ENDED='T' || "BI_PREL.BI_STAT=:_b" || "BI_PREL.BI_STAT<>:_b" ?}+"
         and B_ELE.CLASS=':_d'
         and (BI_PREL."+{? _par.START='T' || "START" || "STOP" ?}+">=:_e)
         and (BI_PREL."+{? _par.START='T' || "START" || "STOP" ?}+"<=:_f or :_f=0)
      order by "+{? _par.START='T' || "START" || "STOP" ?}+" desc
      ",
      _user,exec('ZAKONCZONA','#bi_stat'),exec('ZAKONCZONY','#bi_stat'),'B_ACTION',_from,_to
   );

   {? _tab.first()
   || {!
      |? _tab.BORN_DT:={? _tab.BORN=0 || date(0,0,0) || exec('tm_stamp2date','#tm_stamp',_tab.BORN) ?};
         _tab.BORN_TM:={? _tab.BORN=0 || time(0,0,0) || exec('tm_stamp2time','#tm_stamp',_tab.BORN) ?};
         _tab.START_DT:={? _tab.START=0 || date(0,0,0) || exec('tm_stamp2date','#tm_stamp',_tab.START) ?};
         _tab.START_TM:={? _tab.START=0 || time(0,0,0) || exec('tm_stamp2time','#tm_stamp',_tab.START) ?};
         _tab.STOP_DT:={? _tab.STOP=0 || date(0,0,0) || exec('tm_stamp2date','#tm_stamp',_tab.STOP) ?};
         _tab.STOP_TM:={? _tab.STOP=0 || time(0,0,0) || exec('tm_stamp2time','#tm_stamp',_tab.STOP) ?};
         {? 8+_tab.BI_PROC='bi_p____' || _tab.ARCH:='N' ?};
         _tab.put();
         _tab.next()
      !}
   ?};

   _tab.first();

   _username:=exec('FindAndGet','#table',USERS,_user,,"USERS.DANE",'');
   _wer:=_tab.mk_sel(
      'Historia zadań użytkownika: %1 (%2 ÷ %3)'@[_username,$_par.OD_DATY,$_par.DO_DATY],,,'#userhistory',,,,,'U'
   );
   _tab.win_fld(_wer,,'PROCNAME',,,30,,,'Proces'@);
   _tab.win_fld(_wer,,'PROCVER',,,5,,,'Wersja'@);
   _tab.win_fld(_wer,,'PROCACT',,,-3,,,'Aktywny'@,,,2,,"'T'","'N'");
   _tab.win_fld(_wer,,'PROCEND',,,-3,,,'Zakończony'@,,,2,,"'T'","'N'");
   _tab.win_fld(_wer,,'ARCH',,,-3,,,'Zarchiwowany'@,,,2,,"'T'","'N'");
   _tab.win_fld(_wer,,'OPIS',,,50,,,'Opis zadania'@);
   _tab.win_fld(_wer,,'BORN_DT',,,-10,,,'Przydział'@);
   _tab.win_fld(_wer,,'BORN_TM',,,-8,,,'Godzina'@);
   _tab.win_fld(_wer,,'START_DT',,,-10,,,'Rozpoczęte'@);
   _tab.win_fld(_wer,,'START_TM',,,-8,,,'Godzina'@);
   _tab.win_fld(_wer,,'STOP_DT',,,-10,,,'Zakończone'@);
   _tab.win_fld(_wer,,'STOP_TM',,,-8,,,'Godzina'@);
   _formula:="
      _tab:=cur_tab(1,1);
      BI_PROC.cntx_psh();
      BI_PREL.cntx_psh();
      B_PROC.cntx_psh();
      {? exec('FindAndGet','#table',BI_PROC,_tab.BI_PROC,,\"B_PROC().MICRO<>'T'\",0)
      || exec('select4biproc_alt','#b_design',
            exec('FindAndGet','#table',BI_PROC,_tab.BI_PROC),
            exec('FindAndGet','#table',B_PREL,_tab.B_PREL),
            'bi_proc_todo'
         )
      || FUN.info('Podgląd procesu niemożliwy dla zadań powiązanych z mikroprocesami.'@)
      ?};
      B_PROC.cntx_pop();
      BI_PREL.cntx_pop();
      BI_PROC.cntx_pop();
      ~~
   ";
   _tab.win_act(_wer,,'Formuła','Pod&gląd procesu'@@,,,_formula,,,,,,'G');
   _formula:="exec('legenda','color','BI_MSG#01#01')";
   _tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');
   _tab.win_act(_wer,,'Kolejność');
   _tab.win_btn(_wer,'text='+'Pod&gląd procesu'@,'menu:G');
   _formula:="exec('icon','#bi_proc',exec('FindAndGet','#table',BI_PROC,cur_tab(1,1).BI_PROC))";
   _tab.win_fml(_wer,,'PROCNAME',,'ICON_BEFORE',_formula);
   _tab.win_sel(_wer);
   _tab.select()
?};
~~


\user_history_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Historia zadań wykonywanych przez użytkownika webterm
::----------------------------------------------------------------------------------------------------------------------
_formula:="
   _tab:=cur_tab(1,1);
   {? _tab.ENDED='N'
   || _tab.START:='T'
   || _tab.START:='N'
   ?};
   _tab.efld_opt(cur_win(),{? _tab.ENDED='N' || 'enable=0' || 'enable=1' ?},,'START');
   1
";

ZM_TODO.ENDED:='T';
ZM_TODO.START:='N';
ZM_TODO.OD_DATY:=date()-30;
ZM_TODO.DO_DATY:=date();
ZM_TODO.ARCH:='N';

ZM_TODO.web_edit('TODO_WEB',,,,"
               {? _a='OK'
               ||
                  _wyn:='';
                  {? ZM_TODO.OD_DATY>ZM_TODO.DO_DATY
                  || FUN.info('Końcowa data analizy nie może być wcześniejsza niż data początkowa.'@);
                     _wyn:='DO_DATY'
                  |? ZM_TODO.DO_DATY>date()
                  || FUN.info('Końcowa data analizy nie może być późniejsza niż data bieżąca.'@);
                     _wyn:='DO_DATY'
                  ?};
                  {? _wyn=''
                  ||
                     ZM_TODO.web_eclose();
                     exec('user_history_web_ok','#bi_prel')
                  ?}
               || ZM_TODO.web_eclose()
               ?}
              ");
''


\user_history_web_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Historia zadań wykonywanych przez użytkownika webterm - klawisz ok
::----------------------------------------------------------------------------------------------------------------------
_user:=OPERATOR.USER;

_from:=exec('create','#tm_stamp',ZM_TODO.OD_DATY,time(0,0,0));
_to:=exec('create','#tm_stamp',ZM_TODO.DO_DATY+1,time(0,0,0));

_tab:=sql("
      select
         B_PROC.NAME as PROCNAME,
         B_PROC.SYMBOL as PROCSYM,
         B_PROC.VER as PROCVER,
         B_PROC.ACTIVE as PROCACT,
         B_PREL.SYMBOL as PRELSYM,
         'T' as ARCH,
         BI_PREL.DESC as OPIS,
         BI_PREL.TM_BORN as BORN,
         cast(null as DATE_TYPE) as BORN_DT,
         cast(null as TIME_TYPE) as BORN_TM,
         BI_PREL.START as START,
         cast(null as DATE_TYPE) as START_DT,
         cast(null as TIME_TYPE) as START_TM,
         BI_PREL.STOP as STOP,
         cast(null as DATE_TYPE) as STOP_DT,
         cast(null as TIME_TYPE) as STOP_TM,
         BI_PROC.REFERENCE as BI_PROC,
         B_PREL.REFERENCE as B_PREL,
         (case when BI_PROC.BI_STAT=:_c then 'T' else 'N' end) as PROCEND
      from "+{? ZM_TODO.ARCH='T' || '@' || '' ?}+"BI_PREL
         join "+{? ZM_TODO.ARCH='T' || '@' || '' ?}+"BI_PROC using(BI_PREL.BI_PROC,BI_PROC.REFERENCE)
            join B_PROC using(BI_PROC.B_PROC,B_PROC.REFERENCE)
         join B_PREL using(BI_PREL.B_PREL,B_PREL.REFERENCE)
            join B_ELE using(B_PREL.B_ELE,B_ELE.REFERENCE)
         join BI_STAT using(BI_PROC.BI_STAT,BI_STAT.REFERENCE)
      where BI_PREL.USERS=:_a
         and "+{? ZM_TODO.ENDED='T' || "BI_PREL.BI_STAT=:_b" || "BI_PREL.BI_STAT<>:_b" ?}+"
         and B_ELE.CLASS=':_d'
         and (BI_PREL."+{? ZM_TODO.START='T' || "START" || "STOP" ?}+">=:_e)
         and (BI_PREL."+{? ZM_TODO.START='T' || "START" || "STOP" ?}+"<=:_f or :_f=0)
      order by "+{? ZM_TODO.START='T' || "START" || "STOP" ?}+" desc
      ",
      _user,exec('ZAKONCZONA','#bi_stat'),exec('ZAKONCZONY','#bi_stat'),'B_ACTION',_from,_to
   );

{? _tab.first()
|| {!
   |? _tab.BORN_DT:={? _tab.BORN=0 || date(0,0,0) || exec('tm_stamp2date','#tm_stamp',_tab.BORN) ?};
      _tab.BORN_TM:={? _tab.BORN=0 || time(0,0,0) || exec('tm_stamp2time','#tm_stamp',_tab.BORN) ?};
      _tab.START_DT:={? _tab.START=0 || date(0,0,0) || exec('tm_stamp2date','#tm_stamp',_tab.START) ?};
      _tab.START_TM:={? _tab.START=0 || time(0,0,0) || exec('tm_stamp2time','#tm_stamp',_tab.START) ?};
      _tab.STOP_DT:={? _tab.STOP=0 || date(0,0,0) || exec('tm_stamp2date','#tm_stamp',_tab.STOP) ?};
      _tab.STOP_TM:={? _tab.STOP=0 || time(0,0,0) || exec('tm_stamp2time','#tm_stamp',_tab.STOP) ?};
      {? 8+_tab.BI_PROC='bi_p____' || _tab.ARCH:='N' ?};
      _tab.put();
      _tab.next()
   !}
?};

_tcid:=app_info('web_tcid');
_mbid:=app_info('web_mbid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');

TAB_WT.index('INDEX05');
TAB_WT.prefix(_tcid,_tabid,6);
{? TAB_WT.first()
|| {! |?  TAB_WT.del() !}
?};

{? _tab.first()
||
   {!
   |?
      TAB_WT.blank(1);
      TAB_WT.SESID:=_sesid;
      TAB_WT.MBID:=_mbid;
      TAB_WT.TCID:=_tcid;
      TAB_WT.TABID:=_tabid;
      TAB_WT.TYP:=6;

::       pola
::         B_PROC.NAME as PROCNAME, str 45
      TAB_WT.TR:=_tab.PROCNAME;

::         B_PROC.SYMBOL as PROCSYM, str 100
      TAB_WT.NAZ:=_tab.PROCSYM;

::         B_PROC.VER as PROCVER, str 5
      TAB_WT.KOD:=_tab.PROCVER;

::         B_PROC.ACTIVE as PROCACT, str 1 (T/N)
      TAB_WT.REF_SQL:=_tab.PROCACT;

::         B_PREL.SYMBOL as PRELSYM, str 100
      TAB_WT.OPIS:=_tab.PRELSYM;

::         'T' as ARCH, str 1 (T/N)
      TAB_WT.STR01:=_tab.ARCH;

::         BI_PREL.DESC as OPIS, str 255
      TAB_WT.STR02:=_tab.OPIS;

::         BI_PREL.TM_BORN as BORN, real
::         cast(null as DATE_TYPE) as BORN_DT,
      TAB_WT.DATE01:=_tab.BORN_DT;

::         cast(null as TIME_TYPE) as BORN_TM,
      TAB_WT.TIME01:=_tab.BORN_TM;

::         BI_PREL.START as START, real
::         cast(null as DATE_TYPE) as START_DT,
      TAB_WT.DATE02:=_tab.START_DT;

::         cast(null as TIME_TYPE) as START_TM,
      TAB_WT.TIME02:=_tab.START_TM;

::         BI_PREL.STOP as STOP, real
::         cast(null as DATE_TYPE) as STOP_DT,
      TAB_WT.DATE03:=_tab.STOP_DT;

::         cast(null as TIME_TYPE) as STOP_TM,
      TAB_WT.TIME03:=_tab.STOP_TM;

::         BI_PROC.REFERENCE as BI_PROC,
::         B_PREL.REFERENCE as B_PREL,
::         (case when BI_PROC.BI_STAT=:_c then 'T' else 'N' end) as PROCEND
      TAB_WT.STR03:=_tab.PROCEND;

      TAB_WT.add();
      _tab.next()
   !}
?};
TAB_WT.index('INDEX05');
TAB_WT.prefix(_tcid,_tabid,6);
TAB_WT.web_select('WER06',,1);
~~


\bi_prel_prior_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Format wyświetlania dla BI_PREL.PRIOR_R
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{? BI_PREL.PRIOR_R=0
|| _result:='empty=1'
|| _result:='empty=0'
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 558bcfea61151305287290dd56a26d55e9210305eeae311125ba77c943a634b243c3cc99abd09f3d839ff2b13de6d66d125efe38dc442adcbc8f0a5cf0e0f5b0aeae2a03fbd64239cf2a5f488796276e6fdc421393afb0b805285b1eab4e428755e72b4663c6d058a9224e7f611ce26fe1bb748b9a639f103a5f23533e1a57d4
