:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_portgr.fml
:: Utworzony: 10.05.2018
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli B_PORTGR
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli B_PORTGR
::   WY: obj_new()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
exec('B_PORTGR','#buffer')



\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Funkcja dodająca rekord do tabeli B_PORTGR
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#b_portgr')
::   WY: [REFERENCE]  - wskazanie na dodany rekord (lub już istniejący)
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};
_res:=null();

B_PORTGR.cntx_psh();
B_PORTGR.index('UNIK');
B_PORTGR.prefix(_buffer.B_ACTION,_buffer.LP,_buffer.B_PORT);
{? B_PORTGR.first()
|| _res:=B_PORTGR.ref()
|| B_PORTGR.blank(1);
   _buffer.set();
   {? B_PORTGR.add()
   || _res:=B_PORTGR.ref()
   ?}
?};
B_PORTGR.cntx_pop();
_res


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Kasuje podany rekord tabeli B_PORTGR (wykonywane w transakcji!!!)
::   WE: _a - B_PORTGR.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><DEL>
::UWAGA: Parametry bez [] są wymagane, formula może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
B_PORTGR.cntx_psh(); B_PORTGR.clear();
{? B_PORTGR.seek(_ref)
|| {? exec('clean','#b_portgr',_ref)>0
   || {? B_PORTGR.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

B_PORTGR.cntx_pop();
{? _mydo || end() ?};
_result


\delete4action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Usuwa wszystkie rekordy B_PORTGR powiązane z czynnością
::   WE: [_a] - B_ACTION.ref() lub
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ACTION.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_ACTION.cntx_psh();
{? _ref<>null()
|| B_ACTION.prefix();
   {? B_ACTION.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_PORTGR.cntx_psh();
   B_PORTGR.index('UNIK');
   B_PORTGR.prefix(B_ACTION.ref());
   {? B_PORTGR.first()
   || {!
      |? _can_continue:=exec('delete','#b_portgr',B_PORTGR.ref());
         B_PORTGR.first() & _can_continue>0
      !}
   ?};
   B_PORTGR.cntx_pop()
?};
B_ACTION.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Czyści powiązania do rekordu tabeli B_PORTGR
::   WE: _a - B_PORTGR.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN>
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Importuje/aktualizuje definicję grup wymagalnych portów dla wszystkich czynności
::   WE: [_a] - czy wyswietlać raport (domyślnie - 1), czy tylko zwrócić wynik działania (0)
::       [_b] - B_DOMAIN.ref - obszar którego czynności aktualizować, jeśli nie podane to wszystkie obszary
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _display:=_a || _display:=1 ?};

_b_domain:=null();
{? var_pres('_b')=type_of(B_DOMAIN.ref())
|| _b_domain:=_b
?};

Cntx.psh(B_ACTION,B_ELE,B_TYPE,B_PORT,B_PORTGR);
_exit:="Cntx.pop(B_ACTION,B_ELE,B_TYPE,B_PORT,B_PORTGR)";

{? _display>0 || KOMM.init(255,,'Importowanie kompletów wymaganych parametrów'@) ?};

{? _b_domain=null()
||
   B_DOMAIN.index('SYMBOL');
   B_DOMAIN.prefix();
   {? B_DOMAIN.first()
   ||
::    iteracja po obszarach
      {!
      |?
::       iteracja po czynnościach
         B_ACTION.index('PROC3');
         B_ACTION.prefix('T','T',B_DOMAIN.ref());
         {? B_ACTION.first()
         || {!
            |? _fun_g:='main';
               _plik:=exec('filename','#b_action');
               exec('imp4action','#b_portgr',_fun_g,_plik);
               B_ACTION.next()
            !}
         ?};
         B_DOMAIN.next()
      !}
   ?}
||
:: iteracja po czynnościach
   B_ACTION.index('PROC3');
   B_ACTION.prefix('T','T',_b_domain);
   {? B_ACTION.first()
   || {!
      |? _fun_g:='main';
         _plik:=exec('filename','#b_action');
         exec('imp4action','#b_portgr',_fun_g,_plik);
         B_ACTION.next()
      !}
   ?}
?};
{? _display>0
||
:: Raportuje błędy i uwagi, o ile są
   {? ~KOMM.empty()
   || KOMM.select()
   ?}
?};
:: gotowe
_exit();
~~


\imp4action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Importuje/aktualizuje definicję grup wymaganych portów dla czynności
::       Kontekst pracy - rekord B_ACTION
::   WE: _a - STRING - nazwa formuły głównej
::       _b - STRING - nazwa pliku fml
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_fun_g:=_a;
_plik:=_b;

_can_continue:=1;
{? _plik=''
|| _txt:='Nie znaleziono pliku z formułą główną %1 czynności.'@[_fun_g];
   exec('komm_info','#b_portgr',_txt);
   _can_continue:=0
|? ~exec('is_fun','#file',_b,_a)
|| _txt:='Brak funkcji %1 w pliku %2.fml'@[_fun_g,_plik];
   exec('komm_info','#b_portgr',_txt);
   _can_continue:=0
?};


:: Najpierw usuwam wszystko co dotychczas było zdefiniowane
{? _can_continue>0
|| _can_continue:=exec('delete4action','#b_portgr')
?};

{? _can_continue>0
||
:: obiekt plikowy z zawartością treści komentarzy do formuły
   _fun_str:=exec('string_fun','#file',_plik,_fun_g,'::# required');
   _split:=spli_str(_fun_str,'\n');

   {? obj_len(_split)>0 & _split[1]<>''
   ||
      {! _it:=1..obj_len(_split)
      |!
         _wiersz:=_split[_it];
         _wiersz:=gsub(_wiersz,' ','');
         _wiersz:=gsub(_wiersz,'\t','');
         {? _wiersz<>'\n' & _wiersz<>''
         || _array:=exec('parse','#b_portgr',_wiersz);
            {? type_of(_array)>100
            || _array_size:=obj_len(_array);

               {! _it2:=1.._array_size
               |! {? var_pres('_obj')>100
                  || obj_del(_obj)
                  ?};
                  _obj:=_array[_it2];
                  {? type_of(_obj)>100 & exec('add','#b_portgr',_obj)=null()
                  ||
::                   Coś się wykrzaczyło, rekord się nie dodał
                     _txt:='Dodanie kompletu parametrów %1 nie powiodło się.'@[_obj.SYMBOL];
                     exec('komm_info','#b_portgr',_txt);
                     _can_continue:=0
                  ?}
               !}
            ?}
         ?}
      !}
   ?}
?};
~~


\parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wyłuskuje pola definicji grupy portów z podanego wiersza
::   WE: _a - wiersz z definicją
::   WY: tablica obiektów z definicją lub ~~
::----------------------------------------------------------------------------------------------------------------------
_wiersz:=_a;

B_PORT.cntx_psh();
B_PORT.index('B_ELE');
_result:=~~;
_split:=spli_str(_wiersz,'|');
_group_count:=obj_len(_split);
{? _group_count>0
||
   _result_size:=0;
   {! _it:=1.._group_count
   |!
      {? var_pres('_split2')>100
      || obj_del(_split2)
      ?};
      _split2:=spli_str(_split[_it],',');

      _element_count:=obj_len(_split2);
      _result_size+=_element_count
   !};
   _result:=obj_new(_result_size);
   {! _it:=1.._result_size
   |! _result[_it]:=~~
   !};

   _it:=0;
   _it2:=0;
   _it_all:=1;

   _lp:=1;
   {! _it:=1.._group_count
   |!
      _can_continue:=1;
      {? _split[_it]*'*'>0
      ||
::       Jeśli grupa zawiera gwiazdkę, to musi być tylko gwiazdka i nic innego
         {?  _split[_it]<>'*'
         || _txt:='Jeżeli komplet parametrów zawiera znak \'*\' to nie może zawierać innych znaków';
            exec('komm_info','#b_portgr',_txt);
            _can_continue:=0
         ?}
      ?};

      {? _can_continue>0
      ||
         {? var_pres('_split2')>100
         || obj_del(_split2)
         ?};
         _split2:=spli_str(_split[_it],',');

         _element_count:=obj_len(_split2);
         {? _element_count>0 & _split2[1]<>''
         ||
            {! _it2:=1.._element_count
            |!
               {? var_pres('_obj')>100
               || obj_del(_obj)
               ?};
               _obj:=exec('buffer','#b_portgr');
               _obj.LP:=_lp;
               _obj.SYMBOL:=_split[_it];
               _obj.B_ACTION:=B_ACTION.ref();

               _port_sym:=_split2[_it2];
               {? _port_sym='*'
               ||
::                Obsługa gwiazdki, czyli wymagamy że nic nie będzie połączone
                  _obj.B_PORT:=null();
                  _result[_it_all]:=_obj
               ||
                  B_PORT.prefix('T',B_ACTION.B_ELE,exec('kind_in','#b_port'),_port_sym,);
                  {? B_PORT.first()
                  || _obj.B_PORT:=B_PORT.ref();
                     _result[_it_all]:=_obj
                  || _txt:='Nie znaleziono aktywnego parametru wejściowego: %1'@[_split2[_it2]];
                     exec('komm_info','#b_portgr',_txt)
                  ?}
               ?};
               _it_all+=1
            !}
         ||
::          Brak portów w grupie, coś się wykrzaczyło
            _txt:='Błędnie zdefiniowany wiersz ::# required w formule głównej czynności.'@;
            exec('komm_info','#b_portgr',_txt)
         ?};
         _lp+=1
      ?}
   !}
||
:: Jest tylko jedna grupa

   _can_continue:=1;
   {? _wiersz*'*'>0
   ||
::    Jeśli grupa zawiera gwiazdkę, to musi być tylko gwiazdka i nic innego
      {?  _wiersz<>'*'
      || _txt:='Jeżeli komplet parametrów zawiera znak \'*\' to nie może zawierać innych znaków'@;
         exec('komm_info','#b_portgr',_txt);
         _can_continue:=0
      ?}
   ?};

   {? _can_continue>0
   ||
      _obj:=exec('buffer','#b_portgr');
      _obj.LP:=1;
      _obj.SYMBOL:=_wiersz;
      _obj.B_ACTION:=B_ACTION.ref();
      _port_sym:=_split2[_it2];
      B_PORT.prefix('T',B_ACTION.B_ELE,exec('kind_in','#b_port'),_port_sym,);
      {? B_PORT.first()
      || _obj.B_PORT:=B_PORT.ref();
         _result[_it_all]:=_obj
      || _txt:='Nie znaleziono aktywnego parametru wejściowego: %1'@[_split2[_it2]];
         exec('komm_info','#b_portgr',_txt)
      ?}
   ?}
?};
B_PORT.cntx_pop();
_result


\komm_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dodaje do komma informację o błędzie
::       KONTEKST PRACY - rekord B_ACTION
::   WE: _a - STRING - treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
_txt:=_a;
_sect:='Czynność: %1 — %2'@[B_ACTION.UID,B_ACTION.NAME];
{? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
KOMM.add(_txt,'xwin16.png:81');
KOMM.sect_end();
~~


\chk
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [18.42]
:: OPIS: Sprawdza czy wszystkie komplety wymaganych portów są powiązane
::   WE: _a - B_PROC.ref()
::       _b - INTEGER - 0/[1] - czy inicjowac i pokazywac KOMMa
::       [_c] - obj_new - argumenty funkcji dla komunikatów - wynik działania exec('komm_args','#b_proc')
::   WY: 0 - sa jakies problemy
::       1 - wszystko jest ok
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_b_proc:=_a;

_komm_init:=0;
{? var_pres('_b')=type_of(0)
|| _komm_init:=_b
?};

_args:=~~;
{? var_pres('_c')>100
|| _args:=exec('obj_ntab_set','#array',_c)
|| _args:=exec('komm_args','#b_proc')
?};

_result:=1;
_can_continue:=0;

_sect:='Weryfikacja powiązań kompletów parametrów dla procesu'@;
{? _komm_init>0
|| KOMM.init(250,,_sect)
?};
B_PORTGR.cntx_psh();
B_PORTGR.index('UNIK');
B_ACTION.cntx_psh();
B_ACTION.index('B_ELE');
B_PROC.cntx_psh(); B_PROC.clear();
{? B_PROC.seek(_b_proc)
||
:: Iteruje po elementach procesu
   B_PREL.cntx_psh();
   B_PREL.index('SYMBOL');
   B_PREL.prefix(B_PROC.ref());
   {? B_PREL.first()
   || {!
      |?
         B_ACTION.prefix(B_PREL.B_ELE);
         {? B_ACTION.first()
         ||
            B_PORTGR.prefix(B_ACTION.ref());

::          Określamy ile kompletów parametrów będzie, da się to określić po poli B_PORTGR.LP
            _count:=0;
            {? B_PORTGR.last()
            || _count:=B_PORTGR.LP
            ?};


            {? _count>0
            ||
               _gr_result:=0;

               B_CONN.cntx_psh();
               B_CONN.index('TO');

::             Każdą strzałkę wejściową analizuję oddzielnie. Na strzałce musi być powiązany
::             któryś z kompletów parametrów
               B_CONN.prefix(_b_proc,B_PREL.ref());
               {? B_CONN.first()
               || {!
                  |?
                     {? exec('chk_conn','#b_portgr',B_ACTION.ref(),,_args)<=0
                     || _result:=0
                     ?};
                     B_CONN.next()
                  !}
               ?};
               B_CONN.cntx_pop()
            ?}
         ?};
         B_PREL.next()
      !}
   ?};
   B_PREL.cntx_pop()
|| _result:=0
?};

{? _komm_init>0
|| KOMM.select()
?};
B_PORTGR.cntx_pop();
B_ACTION.cntx_pop();
B_PROC.cntx_pop();
_result


\chk_conn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Weryfikuje komplety na podanej strzałce
::   WE: _a - B_ACTION.ref() - ref czynności
::       [_b] - B_CONN.ref() - jeśli nie podane to bieżacy rekord
::       [_c] - obj_new - argumenty funkcji dla komunikatów - wynik działania exec('komm_args','#b_proc')
::   WY: 0 - problem
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? type_of(params_get())>100
|| _env:=params_get().env
|| _env:=obj_new('empty')
?};

_b_action:=_a;
_b_conn:=null();
{? var_pres('_b')=type_of(B_CONN.ref())
|| _b_conn:=_b
?};

_args:=~~;
{? var_pres('_c')>100
|| _args:=exec('obj_ntab_set','#array',_c)
|| _args:=exec('komm_args','#b_proc')
?};

_sect:='Weryfikacja powiązań kompletów parametrów dla procesu'@;
_result:=1;
_can_continue:=1;

B_CONN.cntx_psh();
{? _b_conn<>null()
|| B_CONN.prefix();
   {? B_CONN.seek(_b_conn)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _what:='';

   B_POCONN.cntx_psh();
   B_POCONN.index('TO');
   B_PORTGR.cntx_psh();
   B_PORTGR.index('UNIK');
   B_PORT.cntx_psh();
   B_PORT.index('B_ELE');

   B_PORTGR.prefix(_b_action);

:: Określamy ile kompletów parametrów będzie, da się to określić po poli B_PORTGR.LP
   _count:=0;
   {? B_PORTGR.last()
   || _count:=B_PORTGR.LP
   ?};

   {? var_pres('_groups_results')>100
   || obj_del(_groups_results)
   ?};
   _groups_results:=obj_new(_count);
   {! _it:=1.._count
   |! _groups_results[_it]:=1
   !};
   {! _it:=1.._count
   |! B_PORTGR.prefix(_b_action,_it);

      {? B_PORTGR.first()
      || _gr_result:=0;
         {!
         |?
            _symbol:=B_PORTGR.SYMBOL;
            {? _symbol='*'
            || _symbol:='Czynność wymaga by żadne parametry nie były powiazane'@
            ?};

            _symbol:=gsub(_symbol,',',' i ');
            {? _what=''
            || {? _what*_symbol=0
               || _what+=_symbol
               ?}
            || {? _what*_symbol=0
               || _what+=' '+'lub'@+' '+_symbol
               ?}
            ?};

            {? B_PORTGR.SYMBOL='*'
            ||
::             Specjalna obsługa dla gwiazdki. Jeżeli jest gwiazdka, to oznacza
::             że żeby było ok żaden port nie może być powiązany i zredagowany ręcznie
               _groups_results[_it]:=exec('chk_star','#b_portgr');
               ~~
            ||
               {? B_PORTGR.B_PORT<>null()
               || B_PORTGR.B_PORT();
::                Wszystkie porty w danej grupie muszą być powiązane o ile nie mają wartości ręcznej przypisanej
                  _manual_val:=exec('has_manual_val','#b_port',B_PREL.ref());

                  {? _manual_val=0
                  ||
::                   Sprawdzam czy port jest powiązany
                     _connected:=0;
::                   Port wejsciowy powinien miec polaczenia 'do'
                     _connected:=0;
                     B_POCONN.prefix(B_PORT.ref(),B_CONN.B_PROC,B_CONN.TO,B_CONN.ref());
                     {? B_POCONN.first()
                     || _connected:=1
                     ?};
                     {? _connected=0
                     || _groups_results[_it]:=0
                     ?}
                  ?}
               ?}
            ?};
            B_PORTGR.next()
         !}
      ?}
   !};
:: Przeanalizowałem wszystkie komplety parametrów, teraz stwierdzam czy ogólnie jest ok
:: jeżeli gdzieś znajdę 1 to znaczy że któryś komplet jest prawidłowo powiązany
   _err:=1;
   {! _it:=1.._count
   |! {? _groups_results[_it]=1
      || _err:=0
      ?}
   !};
   {? _err>0
   || _result:=0;

      {? var_pres('NR_ROOT',_env)=type_of(0)
      ||
         _sect:='Brak wymaganych powiązań dla kompletów parametrów'@;
         _msg:='Połączenie: %1 (%2)'@[B_CONN.NAME,_what];
         _args.SECT:=_sect;
         _args.MSG:=_msg;
         _args.GRAPH_UID:=B_CONN.UID;
         _args.GRAPH_TYPE:='EDGE';
         exec('komm_add','#b_proc',_args)
      ?}
   ?};
   B_PORTGR.cntx_pop();
   B_POCONN.cntx_pop();
   B_PORT.cntx_pop();
   ~~
?};
B_CONN.cntx_pop();
_result


\has_portgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Sprawdza czy przekazany element ma w swojej definicji zdefiniowane komplety parametrów
::   WE: _a - B_ACTION.ref lub B_PREL.ref
::   WY: 0 - brak kompletów
::       1 - są komplety
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

_result:=0;
_action:=null();
{? _ref<>null()
||
   {? ref_tab(_ref)=B_ACTION
   ||
::    B_ACTION
      _action:=_ref
   |? ref_tab(_ref)=B_PREL
   ||
::    B_PREL
      B_PREL.cntx_psh(); B_PREL.prefix();
      {? B_PREL.seek(_ref)
      || _action:=exec('findAction4Ele','#b_proman',B_PREL.B_ELE).Ref
      ?};
      B_PREL.cntx_pop()
   |? ref_tab(_ref)=B_CONN
   ||
::    B_CONN
      B_CONN.cntx_psh(); B_CONN.prefix();
      {? B_CONN.seek(_ref)
      ||
::       !!! REKURENCJA !!!
         _result:=exec('has_portgr','#b_portgr',B_CONN.TO)
      ?};
      B_CONN.cntx_pop()
   ?};
   {? _action<>null()
   || B_PORTGR.cntx_psh();
      B_PORTGR.index('UNIK');
      B_PORTGR.prefix(_action);
      {? B_PORTGR.size()>0
      || _result:=1
      ?};
      B_PORTGR.cntx_pop()
   ?}
?};
_result


\chk_star
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Weryfikuje komplet pusty czyli gwiadzkę
::   WE: [_a] - B_PREL.ref lub bieżący rekord
::       [_b] - B_CONN.ref lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=null();
{? var_pres('_a')=type_of(B_PREL.ref())
|| _b_prel:=_a
?};
_b_conn:=null();
{? var_pres('_b')=type_of(B_CONN.ref())
|| _b_conn:=_b
?};

_result:=1;
_can_continue:=1;

B_CONN.cntx_psh();
B_PREL.cntx_psh();
{? _b_prel<>null()
|| B_PREL.prefix();
   {? B_PREL.seek(_b_prel)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};
{? _can_continue>0 & _b_conn<>null()
|| B_CONN.prefix();
   {? B_CONN.seek(_b_conn)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_PORT.cntx_psh();
   B_PORT.index('UNIK');
   B_POCONN.cntx_psh();
   B_POCONN.index('TO');
   B_PORTGR.cntx_psh();
   B_PORTGR.index('UNIK');
   B_ACTION.cntx_psh();
   B_ACTION.index('B_ELE');
   B_ACTION.prefix(B_PREL.B_ELE);
   {? B_ACTION.first()
   ||
      B_PORTGR.prefix(B_ACTION.ref());
      {? B_PORTGR.first()
      || {!
         |? {? B_PORTGR.B_PORT<>null()
            || B_PORTGR.B_PORT();

               _connected:=0;
               _manual_val:=exec('has_manual_val','#b_port',B_PREL.ref());
               {? _manual_val>0
               || _result:=0
               ?};
               {? _result>0
               || B_POCONN.prefix(B_PORT.ref(),B_PROC.ref(),B_PREL.ref(),B_CONN.ref());
                  {? B_POCONN.first()
                  || _connected:=1;
                     _result:=0
                  ?}
               ?}
            ?};
            B_PORTGR.next()
         !}
      ?}
   ?};
   B_ACTION.cntx_pop();
   B_PORT.cntx_pop();
   B_PORTGR.cntx_pop();
   B_POCONN.cntx_pop();
   ~~
?};
B_PREL.cntx_pop();
B_CONN.cntx_pop();
_result


\ctrl_verification
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dokonuje weryfikacji poprawności kompletów i aktualizuje napis w kontrolce
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=VALPRT_CR;
_tab:=_env.TAB_PORTGR;
_tab.cntx_psh();

B_PREL.cntx_psh();
B_CONN.cntx_psh(); B_CONN.prefix();
{? B_CONN.seek(_env.B_CONN)
|| _tab.index(_env.INDEX_TAB_PGR3);
   _tab.prefix('G');
   _buffer_act:=exec('findAction4Ele','#b_proman',B_CONN.TO().B_ELE);
   _verify:=exec('chk_conn','#b_portgr',_buffer_act.Ref);
   _elements:=exec('elements_table','#desktop');
   {? _env.B_CONN<>null()
   ||
      {? _verify>0
      ||
         _elements.blank();
         _elements.ID_SYS:='status@desktop';
         _elements.NAME:='Ok'@;
         _elements.add();
         ~~
      ||
         _elements.blank();
         _elements.ID_SYS:='status@desktop';
         _elements.NAME:='Problem'@;
         _elements.add();
         ~~
      ?};
      {? _env.HAS_PORTGR_EMPTY>0
      || _elements.blank();
         _elements.ID_SYS:='label_empty@desktop';
::         _elements.VALUE:='~~empty~~';
         _elements.NAME:='Należy obsłużyć przynajmniej jeden komplet lub nie wiązać/redagować żadnego parametru wew. kompletów.'@;
         _elements.add()
      ||
         _elements.blank();
         _elements.ID_SYS:='label_empty@desktop';
         _elements.NAME:='Należy powiązać/zredagować wszystkie parametry przynajmniej z jednego kompletu.'@;
         _elements.add()
      ?};
      exec('update','#desktop',_elements,_env.ctr_id_portgr);
      {? _verify>0
      || exec('set_foreground','#desktop','',_env.ctr_id_portgr,'status@desktop','51:204:0')
      || exec('set_foreground','#desktop','',_env.ctr_id_portgr,'status@desktop','204:0:0')
      ?}
::      exec('set_foreground','#desktop','',_env.ctr_id_portgr,'label_empty@desktop','204:0:0')
   ?}
?};
B_CONN.cntx_pop();
B_PREL.cntx_pop();

_tab.cntx_pop();
~~


\load_verification_ctrl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Ładuje kontrolkę prezentującą wynik weryfikacji kompletów
::       Kontekst pracy - okienko z #b_valprt
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=VALPRT_CR;
{? _env.HAS_PORTGR>0
|| _elements:=exec('elements_table','#desktop');
   _elements.blank();
   _elements.ID_SYS:='label@desktop';
   _elements.NAME:='Wynik weryfikacji kompletów:'@;
   _elements.add();

   _elements.blank();
   _elements.ID_SYS:='status@desktop';
   _elements.NAME:='Nieznany'@;
   _elements.add();

   exec('load','#desktop',_env.ctr_id_portgr,'#b_portgr.dsk',,,,,_elements);
   ~~
?};
~~

:Sign Version 2.0 jowisz:1045 2020/04/03 17:05:30 b2d112e750165e0e3168bed3650c0f84fb19d11ee655aa6838946185ae444129de2cee732d0c3a0f2a8349f89d7d7ca13b210a5b8bc430716468c5c3f8688671fd5b7fb323902fe6991da0c783c96d1858f292918c0dc0efd44728a99dea236833b41b85286c1cc29d78a360e419c463e95b31c8db7663e238b6a4a113088e81
