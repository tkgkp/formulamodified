:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_signal.fml [17.00]
:: Utworzony: 28.09.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa słownika sygnałów (B_SIGNAL), oraz uruchamiania zdarzeń sygnałowych
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli B_SIGNAL
::   WY: obj_new()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('B_SIGNAL','#buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje do tabeli B_SIGNAL jeden rekord
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#b_signal')
::   WY: B_SIGNAL.ref() lub null()
::  TAG: <PROCES><ADD>
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','#b_signal')
         ?};
_result:=null();
B_SIGNAL.cntx_psh(); B_SIGNAL.clear();
B_SIGNAL.blank();
_buffer.set();
{? B_SIGNAL.add()>0
|| _result:=B_SIGNAL.ref()
?};
B_SIGNAL.cntx_pop();
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kasuje podany rekord tabeli B_SIGNAL (wykonywane w transakcji!!!)
::   WE: _a - B_SIGNAL.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
B_SIGNAL.cntx_psh(); B_SIGNAL.clear();
{? B_SIGNAL.seek(_ref)
|| {? exec('can_delete','#b_signal',_ref)>0
   || {? exec('clean','#b_signal',_ref)>0
      || {? B_SIGNAL.del(,1)>0
         || _result:=1
         || undo();
            _result:=-4
         ?}
      || _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};
B_SIGNAL.cntx_pop();
{? _result<0
|| undo()
?};

{? _mydo || end() ?};
_result


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy można usunąć B_SIGNAL, czyli czy ma powiązania z B_PREL
::   WE: _a - B_SIGNAL.ref()
::----------------------------------------------------------------------------------------------------------------------
_b_signal:=_a;

_result:=1;
_can_continue:=1;

B_PREL.cntx_psh();

:: Sprawdza elementy procesu (zdarzenia) B_PREL
{? _can_continue
|| B_PREL.index('SIGNAL');
   B_PREL.prefix(_b_signal);
   {? B_PREL.first()
   || _result:=0;
      _can_continue:=0
   ?}
?};

B_PREL.cntx_pop();

_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli B_SIGNAL
::   WE: _a - B_SIGNAL.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: Usunięcie typów parametrów przypisanych do sygnału - tabela B_SIGTYP
B_SIGTYP.cntx_psh();
B_SIGTYP.index('PARAMETR');
B_SIGTYP.prefix(_ref);
{? B_SIGTYP.first()
|| {!
   |? _can_continue:=exec('delete','#b_sigtyp',B_SIGTYP.ref());
      B_SIGTYP.first() & _can_continue>0
   !}
?};
B_SIGTYP.cntx_pop();

:: --- wszystkie powiązania usunięte? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};

_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla słownik sygnałów
::----------------------------------------------------------------------------------------------------------------------
B_SIGNAL.win_sel('GRP');
B_SIGNAL.prefix();
B_SIGNAL.select();
win_activate('<');
''


\usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Usuń w oknie B_SIGNAL.WER
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć wskazaną pozycję?'@)
|| _result:=exec('delete','#b_signal',B_SIGNAL.ref());
   {? _result=-2
   || FUN.info('Nie można usunąć pozycji, która jest wykorzystana w zdarzeniach.'@)
   |? _result<=0
   || FUN.info('Nie można usunąć pozycji, która jest powiązana w systemie.'@)
   ?}
?};
~~


\after_record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa 'po rekord' w oknie B_SIGNAL.WER (walidacja)
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(B_SIGNAL);
_chk


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca B_SIGNAL.ref() - do blankowania pola B_SIGTYP.B_SIGNAL
::----------------------------------------------------------------------------------------------------------------------
B_SIGNAL.ref()


\grp_rfrsh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po odświeżeniu okna B_SIGNAL.WER w grupowym B_SIGNAL.GRP
::----------------------------------------------------------------------------------------------------------------------
_can_modify:=exec('can_delete','#b_signal',B_SIGNAL.ref());
{? _can_modify<=0
|| B_SIGNAL.actions_grayed('WER','U');
   B_SIGTYP.actions_grayed('WER','dpU:d')
|| B_SIGNAL.actions_grayed('WER','');
   B_SIGTYP.actions_grayed('WER','')
?};
B_SIGTYP.index('PARAMETR');
B_SIGTYP.prefix(B_SIGNAL.ref());
B_SIGTYP.first();
grp_disp(B_SIGTYP,'WER');
~~


\przypisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przypisanie B_PORT do rekordu B_SIGPRT (wyświetlane są dynamiczne porty wejściowe zdarzenia)
::----------------------------------------------------------------------------------------------------------------------
_wer:=B_PORT.mk_sel('Parametry wejściowe zdarzenia'@,,,'portsin',30,20,10);
B_PORT.win_fld(_wer,,'SYMBOL');
B_PORT.win_fld(_wer,,'NAME',,,50);
B_PORT.win_fld(_wer,,'B_TYPE','SYMBOL',,20,,,'Typ'@);
_formula:="
   {? B_PORT.B_TYPE=B_SIGPRT.B_SIGTYP().B_TYPE
   || sel_exit()
   || FUN.info('Należy wybrać parametr wejściowy typu: %1.'@[B_SIGPRT.B_SIGTYP().B_TYPE().SYMBOL]);
      ~~
   ?}
";
B_PORT.win_act(_wer,,'Formuła','Wybierz'@@,,,_formula,,1,,,,'W');
B_PORT.win_sel(_wer);

B_PORT.index('UNIK');
B_PORT.prefix(null(),B_SIGPRT.B_PREL,null(),exec('kind_in','#b_port'));
{? B_PORT.select()
|| B_SIGPRT.B_PORT:=B_PORT.ref();
   B_SIGPRT.put()
?};
~~


\valid_property
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy element procesu ma ustawione wymagane własności
::   WE: _a - B_PREL.ref()
::   WY: 1 - własności nie są wymagane, albo wymagane własności są ustawione
::       0 - wymagane własności nie są ustawione
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_result:=1;

B_PREL.cntx_psh(); B_SIGPRT.cntx_psh();
B_PREL.prefix();
{? B_PREL.seek(_b_prel)
||
:: Zdarzenie sygnałowe (każde)
   {? exec('is_event','#b_event',B_PREL.B_ELE,,exec('kind_signal','#b_event'))>0
   ||
::    Sygnał musi być przypisany
      {? B_PREL.B_SIGNAL=null()
      || _result:=0

::    Dla zdarzenia rzucającego parametry muszą być przypisane do portów
      |? exec('is_event','#b_event',B_PREL.B_ELE,,,exec('category_throw','#b_event'))>0
      || B_SIGPRT.index('PRELTYP');
         B_SIGPRT.prefix(B_PREL.ref());
         {? B_SIGPRT.first()
         || {!
            |? {? B_SIGPRT.B_PORT=null() || _result:=0 ?};
               _result=1 & B_SIGPRT.next()
            !}
         ?}
      ?}
   ?}
?};
B_PREL.cntx_pop(); B_SIGPRT.cntx_pop();
_result


\broadcast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rozgłasza sygnał, czyli uruchamia zdefiniowane procesy (zdarzenia startowe)
::       albo popycha istniejące instancje procesów (zdarzenia pośrednie)
::   WE: _a - obiekt menadżera procesu (w kontekście zdarzenia rzucającego sygnał)
::----------------------------------------------------------------------------------------------------------------------
_mp:=_a;

_bi_prel:=_mp.bi_prel;
_b_prel:=_mp.b_prel;
_b_signal:=exec('FindAndGet','#table',BI_PREL,_bi_prel,,"B_PREL().B_SIGNAL",null());
_wielofirmowy:=exec('FindAndGet','#table',B_SIGNAL,_b_signal,,"FIRM",'N');
_sig_uid:=exec('FindAndGet','#table',BI_PREL,_bi_prel,,"UID",'');

B_SIGPRT.cntx_psh();
B_SIGTYP.cntx_psh();
B_EVENT.cntx_psh();
B_PORT.cntx_psh();
B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
FIRMA.cntx_psh();

:: Pobranie wartości parametrów wejściowych, które mają być przekazane za pomocą sygnału
_in:=_mp.load(exec('kind_in','#b_port'));
B_SIGPRT.index('PRELTYP');
B_SIGPRT.prefix(_b_prel);
_size:=B_SIGPRT.size();
{? _size>0
|| _sig_val:=obj_new(_size);
   _it:=0;
   {? B_SIGPRT.first()
   || {!
      |? _it+=1;
         _sig_val[_it]:=obj_new('PARAMETR','VALUE');
         _sig_val[_it].PARAMETR:=B_SIGPRT.B_SIGTYP().PARAMETR;
         _sig_val[_it].VALUE:=($('_a.'+B_SIGPRT.B_PORT().SYMBOL))(_in);
         B_SIGPRT.next()
      !}
   ?}
|| _sig_val:=~~
?};

:: Obróbka zdarzeń pośrednich odebrania sygnału (oczekujące instancje)
:: _b_ele - znajdź element będący zdarzeniem pośrednim odebrania sygnału
_b_ele:=null();
B_EVENT.index('TYP');
B_EVENT.prefix(exec('type_intermed','#b_event'),exec('kind_signal','#b_event'),exec('category_catch','#b_event'));
{? B_EVENT.first()
|| _b_ele:=B_EVENT.B_ELE
?};
:: _bi_stat - znajdź status 'oczekująca'
_bi_stat:=exec('OCZEKUJACA','#bi_stat');
_tab:=tab_tmp(1,'REF','STRING[16]','BI_PREL.ref()');
BI_PREL.index('SIGNAL');
BI_PREL.prefix(_bi_stat,_b_ele,_b_signal,'T');
{? BI_PREL.first()
|| {!
   |? _tab.REF:=$BI_PREL.ref();
      _tab.add();
      BI_PREL.next()
   !}
?};
{? _tab.first()
|| {!
   |? _firma:=REF.FIRMA;
      REF.FIRMA:=exec('FindAndGet','#table',BI_PREL,_tab.REF,,"FIRMA",_firma);
      {? (_wielofirmowy='T' & REF.FIRMA().A='T') | REF.FIRMA=_firma
      || _dest_bi_prel:=exec('FindAndGet','#table',BI_PREL,_tab.REF,,"ref()",null());
         _dest_b_prel:=exec('FindAndGet','#table',BI_PREL,_dest_bi_prel,,"B_PREL",null());
         B_SIGPRT.index('PRELTYP');
         B_SIGPRT.prefix(_dest_b_prel);
::       Sygnał oczekuje na konkretne wartości parametrów (powinien być "prefix" na nie-nullowe wartości B_SIGPRT.B_PORT
         {? B_SIGPRT.first()
         || _value_ok:=1;
::            _dest_b_ele:=exec('FindAndGet','#table',B_PREL,_dest_b_prel,,"B_ELE",null());
            _ports:=exec('getPorts','#b_port',_b_ele,exec('kind_in','#b_port'),_dest_b_prel);
            _portsRes:=exec('fillPorts','#bi_port',_dest_bi_prel,'IN',_ports);
            {!
            |? {? B_SIGPRT.B_PORT<>null()
               || _port:=B_SIGPRT.B_PORT().SYMBOL;
                  _port_value:=($('_a.'+_port))(_portsRes);
                  _parametr:=B_SIGPRT.B_SIGTYP().PARAMETR;
                  _parametr_value:=~~;
                  {! _it:=1.. obj_len(_sig_val)
                  |! {? _sig_val[_it].PARAMETR=_parametr
                     || _parametr_value:=_sig_val[_it].VALUE
                     ?}
                  !};
                  _value_ok*=(_port_value=_parametr_value)
               ?};
               B_SIGPRT.next()
            !};
            {? var_pres('_ports')>0 || obj_del(_ports) ?};
            {? var_pres('_portsRes')>0 || obj_del(_portsRes) ?};
            {? _value_ok
            || exec('proMan','#b_proman',_dest_bi_prel,'',,'Proc',_mp.b_worker,,,_sig_uid,_sig_val)
            ?}
         || exec('proMan','#b_proman',_dest_bi_prel,'',,'Proc',_mp.b_worker,,,_sig_uid,_sig_val)
         ?}
      ?};
      REF.FIRMA:=_firma;
      _tab.next()
   !}
?};

:: Obróbka zdarzeń startowych na zaakceptowanych procesach
:: _b_ele - znajdź element będący zdarzeniem startowym odebrania sygnału
_b_ele:=null();
B_EVENT.index('TYP');
B_EVENT.prefix(exec('type_start','#b_event'),exec('kind_signal','#b_event'),exec('category_catch','#b_event'));
{? B_EVENT.first()
|| _b_ele:=B_EVENT.B_ELE
?};
B_PREL.index('ENABLED');
B_PREL.prefix('T','T','T',_b_ele,_b_signal);
{? B_PREL.first()
|| {!
   |? B_PREL.cntx_psh(); B_PROC.cntx_psh();
      _firma:=REF.FIRMA;
      REF.FIRMA:=B_PREL.B_PROC().FIRMA;
      {? (_wielofirmowy='T' & REF.FIRMA().A='T') | REF.FIRMA=_firma
      || exec('proMan','#b_proman',B_PREL.ref(),'',,'Proc',_mp.b_worker,,,_sig_uid,_sig_val)
      ?};
      REF.FIRMA:=_firma;
      B_PREL.cntx_pop(); B_PROC.cntx_pop();
      B_PREL.next()
   !}
?};

B_SIGPRT.cntx_pop();
B_SIGTYP.cntx_pop();
B_EVENT.cntx_pop();
B_PORT.cntx_pop();
B_PREL.cntx_pop();
BI_PREL.cntx_pop();
FIRMA.cntx_pop();
~~


\save_signal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Stempluje instancję zdarzenia przechwytującego UID-em zdarzenia rzucającego
::       oraz zachowuje wartości portów wyjściowych zdarzenia przechwytującego sygnał
::   WE: _a - obiekt menadżera procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=_a;
:: Stempluje instancję zdarzenia przechwytującego UID-em źródłowego zdarzenia rzucającego
_obj:=obj_new('mp'); _obj.mp:=_mp;
exec('FindAndGet','#table',BI_PREL,_mp.bi_prel,,"SRC_UID:=_b.mp.sigUid; put()",~~,_obj);
:: Zachowuje wartości portów wyjściowych zdarzenia przechwytującego sygnał
_sig_val:=_mp.sigVal;
{? type_of(_sig_val)=type_of(obj_new('obj'))
|| {! _it:=1..obj_len(_sig_val)
   |! _val:=_sig_val[_it].VALUE;
      {? var_pres('_val')=type_of(null()) & _val<>null() & ref_tab(_val)=BI_BLOB
      || _blob:=_mp.bl_get(_val);
         {? _blob.first()
         || {!
            |? _mp.bl_add(_sig_val[_it].PARAMETR,exec('kind_out','#b_port'),_blob.BLOB,0,_blob.memo_txt(,1,'DESC'));
               _blob.next()
            !}
         ?};
         _mp.save(exec('kind_out','#b_port'),_sig_val[_it].PARAMETR,~~)
      || _mp.save(exec('kind_out','#b_port'),_sig_val[_it].PARAMETR,_val)
      ?}
   !}
?};
~~


\links_add_bprel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje gałąź do tabeli powiązań sygnałów z B_PREL (definicja zdarzenia)
::   WE: _a - B_SIGNAL.ref()
::       _b - typ zdarzenia
::       _c - rodzaj zdarzenia
::       _d - kategoria zdarzenia
::       _e - etykieta gałęzi
::       [_f] - tablica refów B_PROCów - wynik działania exec('ref_table','#table')
::       [_g] - INTEGER - 1/[2] - tryb przetwarzania procesów: 1 - tylko zaakceptowane
::                                                             2 - wszystkie (domyślnie)
::----------------------------------------------------------------------------------------------------------------------
_b_signal:=_a;
_type:=_b;
_kind:=_c;
_category:=_d;
_label:=_e;

_ref_table:=~~;
{? var_pres('_f')>100
|| _ref_table:=_f
?};

_mode_akc:=2;
{? var_pres('_g')=type_of(0)
|| _mode_akc:=_g
?};

_multifirm:=exec('FindAndGet','#table',B_SIGNAL,_b_signal,,"FIRM",'N');

B_PREL.cntx_psh();
B_PROC.cntx_psh();
_b_ele:=null();
B_EVENT.index('TYP');
B_EVENT.prefix(_type,_kind,_category);
{? B_EVENT.first()
|| _b_ele:=B_EVENT.B_ELE
?};
B_PREL.index('PSIGNAL');
_is_branch:=0;
{! _it:=1.._mode_akc
|! {? _multifirm='T'
   ||
::    Sygnał wielofirmowy, nie prefiksujemy firmą
      B_PREL.prefix({? _it=1 || 'T' || 'N' ?},'T',_b_ele,_b_signal)
   ||
::    Sygnał jednofirmowy, prefiksujemy aktualną firmą
      B_PREL.prefix({? _it=1 || 'T' || 'N' ?},'T',_b_ele,_b_signal,REF.FIRMA)
   ?};
   {? B_PREL.first() || _is_branch:=1 ?}
!};
{? type_of(_ref_table)=0
||
:: Rozpoczynam sekcję tylko jeśli tablica refów nie podana i wszystko idzie do KOMMa
   {? _is_branch || KOMM.sect_beg(_label) ?}
?};
{! _it:=1.._mode_akc
|!
   {? _multifirm='T'
   ||
::    Sygnał wielofirmowy, nie prefiksujemy firmą
      B_PREL.prefix({? _it=1 || 'T' || 'N' ?},'T',_b_ele,_b_signal)
   ||
::    Sygnał jednofirmowy, prefiksujemy aktualną firmą
      B_PREL.prefix({? _it=1 || 'T' || 'N' ?},'T',_b_ele,_b_signal,REF.FIRMA)
   ?};
   {? B_PREL.first()
   ||
      {? type_of(_ref_table)>100
      ||
::       Jeśli podana jest tablica refów to dopisuję B_PROC do niej
         {!
         |? _ref_table.add(B_PREL.B_PROC);
            B_PREL.next()
         !}
      ||
::       Jeśli nie podana tablica refów do dopisuję info do KOMM
         KOMM.sect_beg({? _it=1 || 'w zaakceptowanych procesach:'@ || 'w niezaakceptowanych procesach:'@ ?});
         {!
         |? KOMM.add(
               'firma %1'@[B_PREL.B_PROC().FIRMA().SYMBOL]+
               '; '+'proces %1'@[B_PREL.B_PROC().SYMBOL]+
               ' '+'wersja %1'@[B_PROC.VER]+
               {? B_PREL.SYMBOL<>'' || '; '+'zdarzenie %1'@[B_PREL.SYMBOL] || '' ?}
            );
            B_PREL.next()
         !};
         KOMM.sect_end()
      ?}
   ?}
!};
{? type_of(_ref_table)=0
||
:: Kończę sekcję tylko jeśli tablica refów nie podana i wszystko idzie do KOMMa
   {? _is_branch || KOMM.sect_end() ?}
?};
B_PREL.cntx_pop();
B_PROC.cntx_pop();
~~


\links_add_biprel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje gałąź do tabeli powiązań sygnałów z BI_PREL (instancja zdarzenia)
::   WE: _a - B_SIGNAL.ref()
::       _b - typ zdarzenia
::       _c - rodzaj zdarzenia
::       _d - kategoria zdarzenia
::       _e - etykieta gałęzi
::----------------------------------------------------------------------------------------------------------------------
_b_signal:=_a;
_type:=_b;
_kind:=_c;
_category:=_d;
_label:=_e;
_b_ele:=null();

B_EVENT.index('TYP');
B_EVENT.prefix(_type,_kind,_category);
{? B_EVENT.first()
|| _b_ele:=B_EVENT.B_ELE
?};
:: _bi_stat - znajdź status 'oczekująca'
_bi_stat:=exec('OCZEKUJACA','#bi_stat');
BI_PREL.index('SIGNAL');
BI_PREL.prefix(_bi_stat,_b_ele,_b_signal);
{? BI_PREL.first()
|| KOMM.sect_beg(_label);
   {!
   |? KOMM.add(
         'firma %1'@[BI_PREL.FIRMA().SYMBOL]+
         '; '+'proces %1'@[BI_PREL.BI_PROC().B_PROC().SYMBOL]+
         ' '+'wersja %1'@[B_PROC.VER]+
         {? BI_PREL.B_PREL().SYMBOL<>'' || '; '+'zdarzenie %1'@[BI_PREL.B_PREL().SYMBOL] || '' ?}
      );
      BI_PREL.next()
   !};
   KOMM.sect_end()
?};
~~


\links_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla zdarzenie powiązane z definicją sygnału (akcja w oknie słownika sygnałów = wszystkie powiązania)
::----------------------------------------------------------------------------------------------------------------------
exec('links','#b_signal','');
~~


\links_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla zdarzenia powiązane z użyciem sygnału (akcja w panelu własności zdarzenia)
::       - zdarzenia przechwytująca dla zdarzenia rzucającego
::       - zdarzenia rzucające dla zdarzenia przechwytującego
::----------------------------------------------------------------------------------------------------------------------
B_SIGNAL.cntx_psh();
B_PREL.B_SIGNAL();
{? exec('is_event','#b_event',B_PREL.B_ELE,,,exec('category_catch','#b_event'))
|| exec('links','#b_signal',exec('category_throw','#b_event'))
|? exec('is_event','#b_event',B_PREL.B_ELE,,,exec('category_throw','#b_event'))
|| exec('links','#b_signal',exec('category_catch','#b_event'))
?};
B_SIGNAL.cntx_pop();
''


\links
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla zdarzenia powiązane z definicją sygnału
::   WE: _a - wariant wyświetlania: '', exec('category_throw','#b_event'), exec('category_catch','#b_event')
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _category:=_a || _category:='' ?};

_b_signal:=B_SIGNAL.ref();

FIRMA.cntx_psh();
B_PROC.cntx_psh();
B_EVENT.cntx_psh();
B_PREL.cntx_psh();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();

KOMM.init(100,,'Zdarzenia powiązane z sygnałem \'%1\''@[B_SIGNAL.SYMBOL],'');

{? _category='' | _category=exec('category_throw','#b_event')
|| exec('links_add_bprel','#b_signal',
      _b_signal,
      exec('type_intermed','#b_event'),
      exec('kind_signal','#b_event'),
      exec('category_throw','#b_event'),
      'Zdarzenia pośrednie wysłania sygnału:'@
   );
   exec('links_add_bprel','#b_signal',
      _b_signal,
      exec('type_end','#b_event'),
      exec('kind_signal','#b_event'),
      exec('category_throw','#b_event'),
      'Zdarzenia końcowe wysłania sygnału:'@
   )
?};
{? _category='' | _category=exec('category_catch','#b_event')
|| exec('links_add_bprel','#b_signal',
      _b_signal,
      exec('type_start','#b_event'),
      exec('kind_signal','#b_event'),
      exec('category_catch','#b_event'),
      'Zdarzenia startowe odebrania sygnału:'@
   );
   exec('links_add_bprel','#b_signal',
      _b_signal,
      exec('type_intermed','#b_event'),
      exec('kind_signal','#b_event'),
      exec('category_catch','#b_event'),
      'Zdarzenia pośrednie odebrania sygnału:'@
   );
   exec('links_add_biprel','#b_signal',
      _b_signal,
      exec('type_intermed','#b_event'),
      exec('kind_signal','#b_event'),
      exec('category_catch','#b_event'),
      'Zdarzenia pośrednie odebrania sygnału (oczekujące instancje):'@
   )
?};

{? KOMM.get_size()=0
|| FUN.info('Brak zdarzeń powiązanych z sygnałem \'%1\'.'@[B_SIGNAL.SYMBOL])
|| KOMM.select()
?};

FIRMA.cntx_pop();
B_PROC.cntx_pop();
B_EVENT.cntx_pop();
B_PREL.cntx_pop();
BI_PREL.cntx_pop();
~~


\connected_bproc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Zwraca tabelę z refami powiązanych przez sygnały procesów
::   WE: [_a] - B_PROC.ref - proces z którego powiązania będą analizowane lub bieżący rekord
::       _b - ref_table - tabela w której będą zapisywane rezultaty - wynik formuły exec('ref_table','#table')
::       [_c] - ref_table - tabela z odwiedzonymi procesami - wynik formuły exec('ref_table','#table')
::       [_d] - INTEGER - czy uruchamiać rekurencyjnie
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_PROC.ref())
|| _ref:=_a
?};
_result:=_b;

{? var_pres('_c')>0
|| _visited:=_c
|| _visited:=exec('ref_table','#table')
?};

_rec:=0;
{? var_pres('_d')=type_of(0)
|| _rec:=_d
?};

_can_continue:=1;

B_PROC.cntx_psh();
{? _ref<>null()
|| B_PROC.prefix();
   {? B_PROC.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? _visited.r_find(B_PROC.ref())=0
   ||
      _visited.add(B_PROC.ref());
      _result_local:=exec('ref_table','#table');
      B_PREL.cntx_psh();
      B_PREL.index('PROC');
      _kind:=exec('kind_signal','#b_event');
      B_PREL.prefix(B_PROC.ref(),'B_EVENT');
      {? B_PREL.first()
      ||
         {!
         |?
            _type1:=exec('type_intermed','#b_event');
            _type2:=exec('type_end','#b_event');
            _cat:=exec('category_throw','#b_event');
            {? B_PREL.B_SIGNAL<>null() & (
               exec('is_event','#b_event',B_PREL.B_ELE,_type1,_kind,_cat) |
               exec('is_event','#b_event',B_PREL.B_ELE,_type2,_kind,_cat)
               )
            ||
::             Stoję na zdarzeniu pośrednim lub końcowym wysyłającym, szukam procesów które
::             mogą odebrać ten sygnał
               exec('links_add_bprel','#b_signal'
                  ,B_PREL.B_SIGNAL
                  ,exec('type_intermed','#b_event')
                  ,_kind
                  ,exec('category_catch','#b_event')
                  ,''
                  ,_result_local
                  ,1);
               exec('links_add_bprel','#b_signal'
                  ,B_PREL.B_SIGNAL
                  ,exec('type_start','#b_event')
                  ,_kind
                  ,exec('category_catch','#b_event')
                  ,''
                  ,_result_local
                  ,1);
               ~~
            ?};
            _type1:=exec('type_intermed','#b_event');
            _type2:=exec('type_start','#b_event');
            _cat:=exec('category_catch','#b_event');
            {? B_PREL.B_SIGNAL<>null() & (
               exec('is_event','#b_event',B_PREL.B_ELE,_type1,_kind,_cat) |
               exec('is_event','#b_event',B_PREL.B_ELE,_type2,_kind,_cat)
               )
            ||
::             Stoję na zdarzeniu pośrednim lub początkowym łapiącym, szukam procesów które
::             mogą wysłać ten sygnał
               exec('links_add_bprel','#b_signal'
                  ,B_PREL.B_SIGNAL
                  ,exec('type_intermed','#b_event')
                  ,_kind
                  ,exec('category_throw','#b_event')
                  ,''
                  ,_result_local
                  ,1);
               exec('links_add_bprel','#b_signal'
                  ,B_PREL.B_SIGNAL
                  ,exec('type_end','#b_event')
                  ,_kind
                  ,exec('category_throw','#b_event')
                  ,''
                  ,_result_local
                  ,1);
               ~~
            ?};
            B_PREL.next()
         !}
      ?};

      _res_tab:=_result_local.tab;
      {? _res_tab.first()
      || {!
         |?
::          Przepisuję wynik lokalny do globalnego
            _result_local.copy(_result);

            {? _rec>0
            ||
::             !!! REKURENCJA !!!
               _b_proc:=exec('FindAndGet','#table',B_PROC,_res_tab.SQL,,,null());
               exec('connected_bproc','#b_signal',_b_proc,_result,_visited,_rec)
            ?};
            _res_tab.next()
         !}
      ?};

      B_PREL.cntx_pop()
   ?};
   ~~
?};
B_PROC.cntx_pop();
~~


\connected_biproc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Zwraca tabelę z refami powiązanych przez sygnały procesów dla podanej instancji
::   WE: [_a] - BI_PROC.ref - instancja procesu z którego powiązania będą analizowane lub bieżący rekord
::       _b - ref_table - tabela w której będą zapisywane rezultaty - wynik formuły exec('ref_table','#table')
::       [_c] - ref_table - tabela z odwiedzonymi procesami - wynik formuły exec('ref_table','#table')
::       [_d] - INTEGER - czy uruchamiać rekurencyjnie
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(BI_PROC.ref())
|| _ref:=_a
?};

_result:=_b;
{? var_pres('_c')>0
|| _visited:=_c
|| _visited:=exec('ref_table','#table')
?};

_rec:=0;
{? var_pres('_d')=type_of(0)
|| _rec:=_d
?};

_can_continue:=1;

BI_PROC.cntx_psh();
{? _ref<>null()
|| BI_PROC.prefix();
   {? BI_PROC.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};
{? _can_continue>0
||
   {? _visited.r_find(BI_PROC.ref())=0
   || _visited.add(BI_PROC.ref());
      BI_PREL.cntx_psh();
      BI_PREL.index('CLASS');
      _kind:=exec('kind_signal','#b_event');
      BI_PREL.prefix(BI_PROC.ref(),'B_EVENT');
      {? BI_PREL.first()
      ||
         {!
         |?
            {? BI_PREL.B_PREL().B_SIGNAL<>null()
            ||
::             Szukam procesów które odebrały ten sygnał
               BI_PREL.cntx_psh();
               BI_PROC.cntx_psh();
               BI_PREL.index('UID_SRC');
               BI_PREL.prefix(BI_PREL.UID,);
               {? BI_PREL.first()
               || {!
                  |? {? _result.r_find(BI_PREL.BI_PROC)=0
                     || _result.add(BI_PREL.BI_PROC);
                        {? _rec>0
                        ||
::                         !!! REKURENCJA
                           exec('connected_biproc','#b_signal',BI_PREL.BI_PROC,_result,_visited,_rec)
                        ?}
                     ?};
                     BI_PREL.next()
                  !}
               ?};
               BI_PREL.cntx_pop();
               BI_PROC.cntx_pop();

::             Szukam procesów które wysłały ten sygnał
               {? BI_PREL.SRC_UID<>''
               ||
                  BI_PREL.cntx_psh();
                  BI_PROC.cntx_psh();
                  BI_PREL.index('UID');
                  BI_PREL.prefix(BI_PREL.SRC_UID,);
                  {? BI_PREL.first()
                  || {!
                     |?
                        {? _result.r_find(BI_PREL.BI_PROC)=0
                        || _result.add(BI_PREL.BI_PROC);
                           {? _rec>0
                           ||
::                            !!! REKURENCJA
                              exec('connected_biproc','#b_signal',BI_PREL.BI_PROC,_result,_visited,_rec)
                           ?}
                        ?};
                        BI_PREL.next()
                     !}
                  ?};
                  BI_PROC.cntx_pop();
                  BI_PREL.cntx_pop();
                  ~~
               ?};
               ~~
            ?};
            BI_PREL.next()
         !}
      ?};
      BI_PREL.cntx_pop()
   ?};
   ~~
?};
BI_PROC.cntx_pop();
~~


\force
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Odpalenie "na siłę" sygnału rzucającego bez procesu w celu uruchomienia procesów konsumujących dany sygnał
::   WE: _a - B_SIGNAL.SYMBOL
::       _b - czy wielofirmowy ([N]/T)
::       _c - tablica indeksowana parametrów: obj_new('PARAMETR','VALUE')
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _signal:=_a || return() ?};
{? var_pres('_b')=type_of('') || _wielofirmowy:=_b || _wielofirmowy:='N' ?};
{? var_pres('_c')>100 || _sig_val:=_c || _sig_val:=~~ ?};

B_ELE.cntx_psh();
B_PREL.cntx_psh();
B_EVENT.cntx_psh();

_b_signal:=exec('FindInSet','#table','B_SIGNAL','SYMBOL',_signal,,,1);

:: Obróbka zdarzeń pośrednich odebrania sygnału (oczekujące instancje)
:: _b_ele - znajdź element będący zdarzeniem pośrednim odebrania sygnału
_b_ele:=null();
B_EVENT.index('TYP');
B_EVENT.prefix(exec('type_intermed','#b_event'),exec('kind_signal','#b_event'),exec('category_catch','#b_event'));
{? B_EVENT.first()
|| _b_ele:=B_EVENT.B_ELE
?};
:: _bi_stat - znajdź status 'oczekująca'
_bi_stat:=exec('OCZEKUJACA','#bi_stat');
_tab:=tab_tmp(1,'REF','STRING[16]','BI_PREL.ref()');
BI_PREL.index('SIGNAL');
BI_PREL.prefix(_bi_stat,_b_ele,_b_signal,'T');
{? BI_PREL.first()
|| {!
   |? _tab.REF:=$BI_PREL.ref();
      _tab.add();
      BI_PREL.next()
   !}
?};
{? _tab.first()
|| {!
   |? _firma:=REF.FIRMA;
      REF.FIRMA:=exec('FindAndGet','#table',BI_PREL,_tab.REF,,"FIRMA",_firma);
      {? (_wielofirmowy='T' & REF.FIRMA().A='T') | REF.FIRMA=_firma
      || _dest_bi_prel:=exec('FindAndGet','#table',BI_PREL,_tab.REF,,"ref()",null());
         _dest_b_prel:=exec('FindAndGet','#table',BI_PREL,_dest_bi_prel,,"B_PREL",null());
         B_SIGPRT.index('PRELTYP');
         B_SIGPRT.prefix(_dest_b_prel);
::       Sygnał oczekuje na konkretne wartości parametrów (powinien być "prefix" na nie-nullowe wartości B_SIGPRT.B_PORT
         {? B_SIGPRT.first()
         || _value_ok:=1;
::            _dest_b_ele:=exec('FindAndGet','#table',B_PREL,_dest_b_prel,,"B_ELE",null());
            _ports:=exec('getPorts','#b_port',_b_ele,exec('kind_in','#b_port'),_dest_b_prel);
            _portsRes:=exec('fillPorts','#bi_port',_dest_bi_prel,'IN',_ports);
            {!
            |? {? B_SIGPRT.B_PORT<>null()
               || _port:=B_SIGPRT.B_PORT().SYMBOL;
                  _port_value:=($('_a.'+_port))(_portsRes);
                  _parametr:=B_SIGPRT.B_SIGTYP().PARAMETR;
                  _parametr_value:=~~;
                  {! _it:=1.. obj_len(_sig_val)
                  |! {? _sig_val[_it].PARAMETR=_parametr
                     || _parametr_value:=_sig_val[_it].VALUE
                     ?}
                  !};
                  _value_ok*=(_port_value=_parametr_value)
               ?};
               B_SIGPRT.next()
            !};
            {? var_pres('_ports')>0 || obj_del(_ports) ?};
            {? var_pres('_portsRes')>0 || obj_del(_portsRes) ?};
            {? _value_ok
            || exec('proMan','#b_proman',_dest_bi_prel,'',,'Proc',,,,'forced_uid',_sig_val)
            ?}
         || exec('proMan','#b_proman',_dest_bi_prel,'',,'Proc',,,,'forced_uid',_sig_val)
         ?}
      ?};
      REF.FIRMA:=_firma;
      _tab.next()
   !}
?};

:: Obróbka zdarzeń startowych na zaakceptowanych procesach
:: _b_ele - znajdź element będący zdarzeniem startowym odebrania sygnału
_b_ele:=null();
B_EVENT.index('TYP');
B_EVENT.prefix(exec('type_start','#b_event'),exec('kind_signal','#b_event'),exec('category_catch','#b_event'));
{? B_EVENT.first()
|| _b_ele:=B_EVENT.B_ELE
?};

B_PREL.index('ENABLED');
B_PREL.prefix('T','T','T',_b_ele,_b_signal);
{? B_PREL.first()
|| {!
   |? B_PREL.cntx_psh(); B_PROC.cntx_psh();
      _firma:=REF.FIRMA;
      REF.FIRMA:=B_PREL.B_PROC().FIRMA;
      {? (_wielofirmowy='T' & REF.FIRMA().A='T') | REF.FIRMA=_firma
      || exec('proMan','#b_proman',B_PREL.ref(),'',,'Proc',,,,'forced_uid',_sig_val)
      ?};
      REF.FIRMA:=_firma;
      B_PREL.cntx_pop(); B_PROC.cntx_pop();
      B_PREL.next()
   !}
?};

B_ELE.cntx_pop();
B_PREL.cntx_pop();
B_EVENT.cntx_pop();
~~

:Sign Version 2.0 jowisz:1045 2021/09/17 15:17:04 a79f7af5a0eb635b0bd95116692f674fe52e123e088e8377c7a876f5d5859da3ecead374bb5995181996f2cbc3ac2b5a4d984e700d99a9cf80bedbfd890c2023f45a2df0f3c58fc5d2d61db0ddf97ac126126af854a3183551021b393fedd19f324cafdbb4dc8265c07cd596e5ce7299686ada1ca6aa94b42eb4faa30376dd80
