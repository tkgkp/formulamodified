:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #teryt.fml
:: Utworzony: 02.03.2018
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły obsługi usługi TERYT ws1.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Próba połączenia się z bazą TERYT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Narzędzia
:: Web based SOAP client:  https://wsdlbrowser.com/
:: WDSL Analyzer:          https://www.wsdl-analyzer.com/
::
:: Adres usługi:  https://uslugaterytws1test.stat.gov.pl/terytws1.svc
:: Opis usługi:   https://uslugaterytws1test.stat.gov.pl/TerytWs1.svc?singleWsdl
::
::
:: WOJ      - STRING[2] - symbol województwa.
:: POW      - STRING[2] - symbol powiatu.
:: GMI      - STRING[2] - symbol gminy.
:: RODZ_GMI - STRING[1] - symbol rodzaju gminy
::                      1 - gmina miejska,
::                      2 - gmina wiejska,
::                      3 - gmina miejsko-wiejska,
::                      4 - miasto w gminie miejsko-wiejskiej,
::                      5 - obszar wiejski w gminie miejsko-wiejskiej,
::                      8 - dzielnica w m.st. Warszawa,
::                      9 - delegatury miast: Kraków, Łódź, Poznań i Wrocław
:: MSC      - STRING[7] - symbol miejscowości.
:: RODZ_MSC - STRING[2] - symbol rodzaju miejscowości


::_TAB:=exec('PLGmin','#teryt','10','08');
::{? type_of(_TAB)=type_of('')
::|| FUN.emsg(_TAB)
::|| _ws:=_TAB.mk_sel(,,1,,,,,,'U');
::   _TAB.win_act(_ws,,'Szukaj');
::   _TAB.win_act(_ws,,'Kolejność');
::   _TAB.win_sel(_ws);
::   _TAB.win_edit(_TAB.mk_edit(,1));
::   _TAB.select()
::?}

exec('demo','#teryt','WOJ')


\demo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: DEMO
::   WE: _a [STRING] - Kod akcji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_uu:=exec('_url_user_demo','#teryt');

{? _a='WOJ'
|| _TAB:=exec('PLWojewodztw','#teryt',_uu);
   {? type_of(_TAB)=type_of('')
   || FUN.emsg(_TAB)
   || _ws:=_TAB.mk_sel('Województwa'@,,1,,,,,,'U');
      _TAB.win_act(_ws,,'Formuła','Powiaty'@@,,,"exec('demo','#teryt','POW',cur_tab().WOJ)",,1,,,,'P');
      _TAB.win_act(_ws,,'Szukaj');
      _TAB.win_act(_ws,,'Kolejność');
      _TAB.win_sel(_ws);
      _TAB.win_edit(_TAB.mk_edit(,1));
      _TAB.select()
   ?}

|? _a='POW'
:: _b [STRING] - Kod województwa.
|| _TAB:=exec('PLPowiatow','#teryt',_uu,_b);
   {? type_of(_TAB)=type_of('')
   || FUN.emsg(_TAB)
   || _ws:=_TAB.mk_sel('Powiaty'@,,1,,,,,,'U');
      _TAB.win_act(_ws,,'Formuła','Gminy'@@,,,
         "  _TAB:=cur_tab();
            exec('demo','#teryt','GMI',_TAB.WOJ,_TAB.POW)
         ",,1,,,,'G'
      );
      _TAB.win_act(_ws,,'Szukaj');
      _TAB.win_act(_ws,,'Kolejność');
      _TAB.win_sel(_ws);
      _TAB.win_edit(_TAB.mk_edit(,1));
      _TAB.select()
   ?}

|? _a='GMI'
:: _b [STRING] - Kod województwa.
:: _c [STRING] - Kod powiatu.
|| _TAB:=exec('PLGmin','#teryt',_uu,_b,_c);
   {? type_of(_TAB)=type_of('')
   || FUN.emsg(_TAB)
   || _ws:=_TAB.mk_sel('Gminy'@,,1,,,,,,'U');
      _TAB.win_act(_ws,,'Formuła','Miejscowości'@@,,,
         "  _TAB:=cur_tab();
            exec('demo','#teryt','MSC',_TAB.WOJ,_TAB.POW,_TAB.GMI,_TAB.RODZ_GMI)
         ",,1,,,,'M'
      );
      _TAB.win_act(_ws,,'Szukaj');
      _TAB.win_act(_ws,,'Kolejność');
      _TAB.win_sel(_ws);
      _TAB.win_edit(_TAB.mk_edit(,1));
      _TAB.select()
   ?}

|? _a='MSC'
:: _b [STRING] - Kod województwa.
:: _c [STRING] - Kod powiatu.
:: _d [STRING] - Kod gminy.
:: _e [STRING] - Rodzaj gminy.
|| _TAB:=exec('PLMiejscowosciWGminieZSymbolem','#teryt',_uu,_b,_c,_d,_e);
   {? type_of(_TAB)=type_of('')
   || FUN.emsg(_TAB)
   || _ws:=_TAB.mk_sel('Miejscowości'@,,1,,,,,,'U');
      _TAB.win_act(_ws,,'Formuła','Ulice'@@,,,
         "  _TAB:=cur_tab();
            exec('demo','#teryt','UL',_TAB.WOJ,_TAB.POW,_TAB.GMI,_TAB.RODZ_GMI,_TAB.MSC,1,1)
         ",,1,,,,'U'
      );
      _TAB.win_act(_ws,,'Szukaj');
      _TAB.win_act(_ws,,'Kolejność');
      _TAB.win_sel(_ws);
      _TAB.win_edit(_TAB.mk_edit(,1));
      _TAB.select()
   ?}

|? _a='UL'
::  _b  [STRING] - Kod (dwuznakowy) województwa.
::  _c  [STRING] - Kod (dwuznakowy) powiatu.
::  _d  [STRING] - Kod (dwuznakowy) gminy.
::  _e  [STRING] - Kod (jednoznakowy) rodzaju gminy.
::  _f  [STRING] - Kod (siedmioznakowy) miejscowości.
:: [_g] [NUMBER] - Wersja urzędowa [0*/1]?
:: [_h] [NUMBER] - Wersja adresowa [0*/1]?
|| _TAB:=exec('PLUlicDlaMiejscowosci','#teryt',_uu,_b,_c,_d,_e,_f);
   {? type_of(_TAB)=type_of('')
   || FUN.emsg(_TAB)
   || _ws:=_TAB.mk_sel('Ulice'@,,1,,,,,,'U');
      _TAB.win_act(_ws,,'Szukaj');
      _TAB.win_act(_ws,,'Kolejność');
      _TAB.win_sel(_ws);
      _TAB.win_edit(_TAB.mk_edit(,1));
      _TAB.select()
   ?}
?}


\_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła - silnik. Wysyła żadanie i opracowywuje wynik.
::   WE: _a [ARRAY] - Tablica z żądaniem (patrz \_request).
::       _b [TABLE] - Uchwyt tabeli tymczasowej, w której umieszczony będzie wynik żądania.
::       _c [RULE]  - Formuła wykonywana na początku analizy elementu.
::       _d [RULE]  - Formuła wykonywana na końcu analizy elementu.
::       _e [RULE]  - Formuła wykonywana w trakcie przetwarzania elementu wyniku XML.
::       _f [STRING]- Ścieżka do folderu tymczasowego na serwerze
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Sprawdzić parametry!
_par:=_a;
_TAB:=_b;
_fbegin:=_c;
_fend:=_d;
_ftext:=_e;
_tmp_pth:=_f;

:: Nazwa pliku, w którym będzie umieszczona odpowiedź żądania.
{? _tmp_pth<>''
||
   _fn:=_tmp_pth+'/teryt_'+$SYSLOG.tm_stamp()+'.tmp';

   _fh:=fopen(_fn,'bw',0,1,1);
   {? _fh.is_open()
   || {? (_rs:=exec('_koperta','#teryt',_par))=''
      || _ret:='Przygotowanie żądania nie powiodło się.'
      || _inet:=inet_get(_par.url);

::    ścieżka do pliku z certyfikatem
         {? sys_name(1)='U_LINUX'
         || _pem:='ssl_stat_gov_pl.pem';
            _cert:=pth_dir(_pem)+'/'+_pem;
            _inet.set_cert_path(_cert)
         ?};

         _inet.append_header('Content-Type: text/xml; charset=UTF-8');
::      _inet.set_verbose('teryt_log.txt');
         _code:=_inet.http_post(_fh,_rs);
         {? _code=200
         || _fh.fclose();
            obj_del(_fh);
            _fh:=fopen(_fn,'br',0,1,1);
            {? _fh.is_open()
            || _TAB.blank();
               _work:=obj_new('crc','buf');
               _work.crc:=_TAB.crc();
               params_set(
                  'PATH',exec('_path','#teryt'),
                  'TAB',_TAB,
                  'work',_work,
                  'TMP_PTH',_tmp_pth
               );
               {? xml_sax_parse(_fh,,,_fbegin,_fend,_ftext)
               || _ret:=''
               || _ret:='Błąd przetwarzania odpowiedzi.'
               ?}

            || _ret:='Brak dostępu (odczyt) do pliku %1.' [_fn]
            ?}
         || _ret:='Status odpowiedzi: %1.' [$_code]
         ?}
      ?};
      _fh.fclose();
::   ferase(_fn,0);
      ~~
   || _ret:='Brak dostępu (zapis) do pliku %1.' [_fn]
   ?}
|| _ret:='Nie udało się utworzyć katalogu tymczasowego na serwerze.'
?};
_ret


\_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła wysyłająca żądanie.
::   WE: _a [STRING] - Nazwa pliku, w którym umieszczona zostanie odpowiedź.
::       _b [ARRAY]  - Tablica z żądaniem (patrz \_request).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _fn:=_a
|| return(-1)
?};
{? _>1 & obj_ntab(_b)
|| _ra:=_b
|| return(-2)
?};

_fh:=fopen(_fn,'bw',0,1,1);
{? _fh.is_open()
|| {? (_rs:=exec('_koperta','#teryt',_ra))=''
   || _ret:=-4
   || _inet:=inet_get(_ra.url);
      _inet.append_header('Content-Type: text/xml; charset=UTF-8');
::      _inet.set_verbose('teryt_log.txt');
      _ret:=_inet.http_post(_fh,_rs)
   ?};
   _fh.fclose()
|| _ret.status:=-3
?};
_ret


\_koperta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła pakująca treść zapytania.
::   WE: _a [ARRAY] - Tablica z elementami nazwanymi (patrz \_request).
::   WY: Treść żądania.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('')
?};
'<?xml version="1.0" encoding="UTF-8"?>'
'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">'
   '<soapenv:Header xmlns:wsa="http://www.w3.org/2005/08/addressing">'
      '<wsse:Security soapenv:mustUnderstand="1" '
         'xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" '
      '>'
         '<wsse:UsernameToken>'
            '<wsse:Username>%1</wsse:Username>'
            '<wsse:Password>%2</wsse:Password>'
         '</wsse:UsernameToken>'
      '</wsse:Security>'
      '<wsa:Action>http://tempuri.org/ITerytWs1/%3</wsa:Action>'
   '</soapenv:Header>'
   '<soapenv:Body>%4</soapenv:Body>'
'</soapenv:Envelope>' [_a.user,_a.password,_a.action,_a.body]


\_request
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła tworzy tablicę nazwaną
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_req:=obj_new('action','body','url','user','password');
_req.action:=_req.body:=_req.url:=_req.user:=_req.password:='';
_req


\_url_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formuła tworzy tablicę z adresem i danymi logowania do webservice TERYT
::   WE: [_a] url
::       [_b] user
::       [_c] password
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_req:=obj_new('url','user','password');
_req.url:=_a;
_req.user:=_b;
_req.password:=_c;
_req


\_url_user_demo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formuła tworzy tablicę  z adresem i danymi logowania do webservice TERYT demo
::   WE: [_a] url
::       [_b] user
::       [_c] password
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_req:=exec('_url_user','#teryt','https://uslugaterytws1test.stat.gov.pl/terytws1.svc','TestPubliczny','1234abcd');
_req


\_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formula zwraca "obiekt" wspomagający parsowanie XML-i.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_PATH:=obj_new('TAB','push','pop','path');

_PATH.TAB:=tab_tmp(1,
   'LEVEL','INTEGER','Poziom',
   'NAME','STRING[255]','Nazwa elementu'
);

_PATH.push:=
   "  .TAB.blank();
      .TAB.LEVEL:=.TAB.size()+1;
      .TAB.NAME:=_a;
      .TAB.add()
   ";
_PATH.pop:=
   "  {? .TAB.last() & .TAB.NAME=_a
      || .TAB.del(0,1)
      || -1
      ?}
   ";
_PATH.path:=
   "  _ret:='';
      _loop:=.TAB.first();
      {!
      |? _loop
      |! _ret+='%1 | ' [.TAB.NAME];
         _loop:=.TAB.next()
      !};
      _ret-1
   ";

_PATH


\PLWojewodztw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła pobiera listę wszystkich województw.
::   WE: [_a] tablica z danymi logowania
::       [_b] [DATE] - Data badania stanu [domyślnie: date()].
::   WY: Komunikat błędu lub tabela tymczasowa z listą województw.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

_dt:=date();
{? var_pres('_b')=type_of(_dt)
|| _dt:=_b
?};

_par:=exec('_request','#teryt');
_par.action:='PobierzListeWojewodztw';
_par.body:='<tem:%1><tem:DataStanu>%2</tem:DataStanu></tem:%1>' [_par.action,gsub(_dt$1,'/','-')];
_par.url:=_a.url;
_par.user:=_a.user;
_par.password:=_a.password;

_TAB:=tab_tmp(1,
   'WOJ','STRING[2]','Kod województwa'@,
   'NAZWA','STRING[100]','Nazwa'@,
   'NAZDOD','STRING[50]','Opis'@
);

_fbegin:=
   "  _par:=params_get();
      _par.PATH.push(_a);
      _path:=_par.PATH.path();
      {? _path='Envelope | Body | PobierzListeWojewodztwResponse | PobierzListeWojewodztwResult | '
            'JednostkaTerytorialna |'
      || _par.TAB.blank()
      ?};
      _par.work.buf:='';
      1
   ";

_fend:=
   "  _par:=params_get();
      _TAB:=_par.TAB;
      _path:=_par.PATH.path();
      _buf:=_par.work.buf;
      _jt:='Envelope | Body | PobierzListeWojewodztwResponse | PobierzListeWojewodztwResult | JednostkaTerytorialna |';
      {? _path=_jt+' WOJ |'
      || _TAB.WOJ:=_buf
      |? _path=_jt+' NAZWA |'
      || _TAB.NAZWA:=_buf
      |? _path=_jt+' NAZWA_DOD |'
      || _TAB.NAZDOD:=_buf
      |? _path=_jt & _par.TAB.crc()<>_par.work.crc
      || _par.TAB.add()
      ?};
      _path:=_par.PATH.path();
      _par.PATH.pop(_a);
      1
   ";

_ftext:="params_get().work.buf+=_a; 1";

_ret:=exec('_run','#teryt',_par,_TAB,_fbegin,_fend,_ftext);
{? _ret=''
|| _TAB
|| _ret
?}


\PLPowiatow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła pobiera listę wszystkich powiatów we wskazanym województwie.
::   WE: [_a] tablica z danymi logowania
::       [_b] [STRING] - Kod (dwuznakowy) województwa,
::       [_c] [DATE] - Data badania stanu [domyślnie: date()].
::   WY: Komunikat błędu lub tabela tymczasowa z listą powiatów.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

{? var_pres('_b')=type_of('') & +_b=2
|| _woj:=_b
|| return('Nieprawidłowy parametr WOJ.')
?};

_dt:=date();
{? var_pres('_c')=type_of(_dt)
|| _dt:=_c
?};

_par:=exec('_request','#teryt');
_par.action:='PobierzListePowiatow';
_par.body:=
   '<tem:%1>'
      '<tem:Woj>%3</tem:Woj>'
      '<tem:DataStanu>%2</tem:DataStanu>'
   '</tem:%1>'
   [_par.action,gsub(_dt$1,'/','-'),_woj];
_par.url:=_a.url;
_par.user:=_a.user;
_par.password:=_a.password;

_TAB:=tab_tmp(2,
   'WOJ','STRING[2]','Kod województwa'@,
   'POW','STRING[2]','Kod powiatu'@,
   'NAZWA','STRING[100]','Nazwa'@,
   'NAZDOD','STRING[50]','Opis'@
);

_fbegin:=
   "  _par:=params_get();
      _par.PATH.push(_a);
      _path:=_par.PATH.path();
      {? _path='Envelope | Body | PobierzListePowiatowResponse | PobierzListePowiatowResult | '
            'JednostkaTerytorialna |'
      || _par.TAB.blank()
      ?};
      _par.work.buf:='';
      1
   ";

_fend:=
   "  _par:=params_get();
      _TAB:=_par.TAB;
      _path:=_par.PATH.path();
      _buf:=_par.work.buf;
      _jt:='Envelope | Body | PobierzListePowiatowResponse | PobierzListePowiatowResult | JednostkaTerytorialna |';
      {? _path=_jt+' WOJ |'
      || _TAB.WOJ:=_buf
      |? _path=_jt+' POW |'
      || _TAB.POW:=_buf
      |? _path=_jt+' NAZWA |'
      || _TAB.NAZWA:=_buf
      |? _path=_jt+' NAZWA_DOD |'
      || _TAB.NAZDOD:=_buf
      |? _path=_jt & _par.TAB.crc()<>_par.work.crc
      || _par.TAB.add()
      ?};
      _path:=_par.PATH.path();
      _par.PATH.pop(_a);
      1
   ";

_ftext:="params_get().work.buf+=_a; 1";

_ret:=exec('_run','#teryt',_par,_TAB,_fbegin,_fend,_ftext);
{? _ret=''
|| _TAB
|| _ret
?}


\PLGmin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła pobiera listę wszystkich gmin we wskazanym województwie / powiecie.
::   WE: [_a] tablica z danymi logowania
::       [_b] [STRING] - Kod (dwuznakowy) województwa,
::       [_c] [STRING] - Kod (dwuznakowy) powiatu,
::       [_d] [DATE]   - Data badania stanu [domyślnie: date()].
::   WY: Komunikat błędu lub tabela tymczasowa z listą gmin.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

{? var_pres('_b')=type_of('') & +_b=2
|| _woj:=_b
|| return('Nieprawidłowy parametr WOJ.')
?};

{? var_pres('_c')=type_of('') & +_c=2
|| _pow:=_c
|| return('Nieprawidłowy parametr POW.')
?};

_dt:=date();
{? var_pres('_d')=type_of(_dt)
|| _dt:=_d
?};

_par:=exec('_request','#teryt');
_par.action:='PobierzListeGmin';
_par.body:=
   '<tem:%1>'
      '<tem:Woj>%3</tem:Woj>'
      '<tem:Pow>%4</tem:Pow>'
      '<tem:DataStanu>%2</tem:DataStanu>'
   '</tem:%1>'
   [_par.action,gsub(_dt$1,'/','-'),_woj,_pow];
_par.url:=_a.url;
_par.user:=_a.user;
_par.password:=_a.password;

_TAB:=tab_tmp(2,
   'WOJ','STRING[2]','Kod województwa'@,
   'POW','STRING[2]','Kod powiatu'@,
   'GMI','STRING[2]','Kod gminy'@,
   'NAZWA','STRING[100]','Nazwa'@,
   'NAZDOD','STRING[50]','Opis'@,
   'RODZ_GMI','STRING[1]','Kod rodzaju gminy'@
);

_fbegin:=
   "  _par:=params_get();
      _par.PATH.push(_a);
      _path:=_par.PATH.path();
      {? _path='Envelope | Body | PobierzListeGminResponse | PobierzListeGminResult | JednostkaTerytorialna |'
      || _par.TAB.blank()
      ?};
      _par.work.buf:='';
      1
   ";

_fend:=
   "  _par:=params_get();
      _TAB:=_par.TAB;
      _path:=_par.PATH.path();
      _buf:=_par.work.buf;
      _jt:='Envelope | Body | PobierzListeGminResponse | PobierzListeGminResult | JednostkaTerytorialna |';
      {? _path=_jt+' WOJ |'
      || _TAB.WOJ:=_buf
      |? _path=_jt+' POW |'
      || _TAB.POW:=_buf
      |? _path=_jt+' GMI |'
      || _TAB.GMI:=_buf
      |? _path=_jt+' NAZWA |'
      || _TAB.NAZWA:=_buf
      |? _path=_jt+' NAZWA_DOD |'
      || _TAB.NAZDOD:=_buf
      |? _path=_jt+' RODZ |'
      || _TAB.RODZ_GMI:=_buf
      |? _path=_jt & _par.TAB.crc()<>_par.work.crc
      || _par.TAB.add()
      ?};
      _path:=_par.PATH.path();
      _par.PATH.pop(_a);
      1
   ";

_ftext:="params_get().work.buf+=_a; 1";

_ret:=exec('_run','#teryt',_par,_TAB,_fbegin,_fend,_ftext);
{? _ret=''
|| _TAB
|| _ret
?}


\PLMiejscowosciWGminieZSymbolem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła pobiera listę wszystkich miejscowości we wskazanym województwie / powiecie / gminie / rodzaju gminy.
::   WE: [_a] tablica z danymi logowania
::       [_b] [STRING] - Kod (dwuznakowy) województwa.
::       [_c] [STRING] - Kod (dwuznakowy) powiatu.
::       [_d] [STRING] - Kod (dwuznakowy) gminy.
::       [_e] [STRING] - Kod (jednoznakowy) rodzaju gminy.
::       [_f] [DATE] - Data badania stanu [domyślnie: date()].
::   WY: Komunikat błędu lub tabela tymczasowa z listą miejscowości.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

{? var_pres('_b')=type_of('') & +_b=2
|| _woj:=_b
|| return('Nieprawidłowy parametr WOJ.')
?};

{? var_pres('_c')=type_of('') & +_c=2
|| _pow:=_c
|| return('Nieprawidłowy parametr POW.')
?};

{? var_pres('_d')=type_of('') & +_d=2
|| _gmi:=_d
|| return('Nieprawidłowy parametr GMI.')
?};

{? var_pres('_e')=type_of('') & +_e=1
|| _rg:=_e
|| return('Nieprawidłowy parametr RODZ_GMI.')
?};

_dt:=date();
{? var_pres('_f')=type_of(_dt)
|| _dt:=_f
?};

_par:=exec('_request','#teryt');
_par.action:='PobierzListeMiejscowosciWGminieZSymbolem';
_par.body:=
   '<tem:%1>'
      '<tem:Woj>%3</tem:Woj>'
      '<tem:Pow>%4</tem:Pow>'
      '<tem:Gmi>%5</tem:Gmi>'
      '<tem:Rodz>%6</tem:Rodz>'
      '<tem:DataStanu>%2</tem:DataStanu>'
   '</tem:%1>'
   [_par.action,gsub(_dt$1,'/','-'),_woj,_pow,_gmi,_rg];
_par.url:=_a.url;
_par.user:=_a.user;
_par.password:=_a.password;

_TAB:=tab_tmp(2,
   'WOJ','STRING[2]','Kod województwa'@,
   'POW','STRING[2]','Kod powiatu'@,
   'GMI','STRING[2]','Kod gminy'@,
   'RODZ_GMI','STRING[1]','Kod rodzaju gminy'@,
   'MSC','STRING[7]','Kod miejscowości'@,
   'MSCP','STRING[7]','Kod miejscowości podstawowej'@,
   'NAZWA','STRING[100]','Nazwa'@,
   'NAZDOD','STRING[50]','Opis'@,
   'RODZ_MSC','STRING[3]','Kod rodzaju miejscowości'@
);

_fbegin:=
   "  _par:=params_get();
      _par.PATH.push(_a);
      _path:=_par.PATH.path();
      {? _path='Envelope | Body | PobierzListeMiejscowosciWGminieZSymbolemResponse | '
             'PobierzListeMiejscowosciWGminieZSymbolemResult | MiejscowoscPelna |'
      || _par.TAB.blank()
      ?};
      _par.work.buf:='';
      1
   ";

_fend:=
   "  _par:=params_get();
      _TAB:=_par.TAB;
      _path:=_par.PATH.path();
      _buf:=_par.work.buf;
      _jt:='Envelope | Body | PobierzListeMiejscowosciWGminieZSymbolemResponse | '
         'PobierzListeMiejscowosciWGminieZSymbolemResult | MiejscowoscPelna |';
      {? _path=_jt+' WojSymbol |'
      || _TAB.WOJ:=_buf
      |? _path=_jt+' PowSymbol |'
      || _TAB.POW:=_buf+2
      |? _path=_jt+' GmiSymbol |'
      || _TAB.GMI:=2+(4-_buf)
      |? _path=_jt+' GmiRodzaj |'
      || _TAB.RODZ_GMI:=_buf
      |? _path=_jt+' Nazwa |'
      || _TAB.NAZWA:=_buf
      |? _path=_jt+' RMNazwa |'
      || _TAB.NAZDOD:=_buf
      |? _path=_jt+' RM |'
      || _TAB.RODZ_MSC:=_buf
      |? _path=_jt+' Symbol |'
      || _TAB.MSC:=_buf
      |? _path=_jt+' SymbolPodst |'
      || _TAB.MSCP:=_buf
      |? _path=_jt & _par.TAB.crc()<>_par.work.crc
      || _par.TAB.add()
      ?};
      _path:=_par.PATH.path();
      _par.PATH.pop(_a);
      1
   ";

_ftext:="params_get().work.buf+=_a; 1";

_ret:=exec('_run','#teryt',_par,_TAB,_fbegin,_fend,_ftext);
{? _ret=''
|| _TAB
|| _ret
?}


\PLUlicDlaMiejscowosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła pobiera listę wszystkich ulic w miejscowości.
::   WE: [_a] tablica z danymi logowania
::       [_b] [STRING] - Kod (dwuznakowy) województwa.
::       [_c] [STRING] - Kod (dwuznakowy) powiatu.
::       [_d] [STRING] - Kod (dwuznakowy) gminy.
::       [_e] [STRING] - Kod (jednoznakowy) rodzaju gminy.
::       [_f] [STRING] - Kod (siedmioznakowy) miejscowości.
::       [_g] [NUMBER] - Wersja urzędowa [0*/1]?
::       [_h] [NUMBER] - Wersja adresowa [0*/1]?
::       [_i] [DATE] - Data badania stanu [domyślnie: date()].
::   WY: Komunikat błędu lub tabela tymczasowa z listą ulic.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

{? var_pres('_b')=type_of('') & +_b=2
|| _woj:=_b
|| return('Nieprawidłowy parametr WOJ.')
?};

{? var_pres('_c')=type_of('') & +_c=2
|| _pow:=_c
|| return('Nieprawidłowy parametr POW.')
?};

{? var_pres('_d')=type_of('') & +_d=2
|| _gmi:=_d
|| return('Nieprawidłowy parametr GMI.')
?};

{? var_pres('_e')=type_of('') & +_e=1
|| _rg:=_e
|| return('Nieprawidłowy parametr RODZ_GMI.')
?};

{? var_pres('_f')=type_of('') & +_f=7
|| _msc:=_f
|| return('Nieprawidłowy parametr MSC.')
?};

_vu:={? var_pres('_g')=type_of(0) & _g || 'true' || 'false' ?};
_va:={? var_pres('_h')=type_of(0) & _h || 'true' || 'false' ?};

_dt:=date();
{? var_pres('_i')=type_of(_dt)
|| _dt:=_i
?};

_par:=exec('_request','#teryt');
_par.action:='PobierzListeUlicDlaMiejscowosci';
_par.body:=
   '<tem:%1>'
      '<tem:woj>%3</tem:woj>'
      '<tem:pow>%4</tem:pow>'
      '<tem:gmi>%5</tem:gmi>'
      '<tem:rodzaj>%6</tem:rodzaj>'
      '<tem:msc>%7</tem:msc>'
      '<tem:czyWersjaUrzedowa>%8</tem:czyWersjaUrzedowa>'
      '<tem:czyWersjaAdresowa>%9</tem:czyWersjaAdresowa>'
      '<tem:DataStanu>%2</tem:DataStanu>'
   '</tem:%1>'
   [_par.action,gsub(_dt$1,'/','-'),_woj,_pow,_gmi,_rg,_msc,_vu,_va];
_par.url:=_a.url;
_par.user:=_a.user;
_par.password:=_a.password;

_TAB:=tab_tmp(2,
   'WOJ','STRING[2]','Kod województwa'@,
   'POW','STRING[2]','Kod powiatu'@,
   'GMI','STRING[2]','Kod gminy'@,
   'RODZ_GMI','STRING[1]','Kod rodzaju gminy'@,
   'MSC','STRING[7]','Kod miejscowości'@,
   'MSCP','STRING[7]','Kod miejscowości podstawowej'@,
   'CECHA','STRING[5]','Cecha'@,
   'CECH_OPI','STRING[20]','Opis cechy'@,
   'ULI','STRING[5]','Kod ulicy'@,
   'NAZWA_1','STRING[120]','Nazwa 1'@,
   'NAZWA_2','STRING[120]','Nazwa 2'@
);

_fbegin:=
   "  _par:=params_get();
      _par.PATH.push(_a);
      _path:=_par.PATH.path();
      {? _path='Envelope | Body | PobierzListeUlicDlaMiejscowosciResponse | PobierzListeUlicDlaMiejscowosciResult | '
            'UlicaDrzewo |'
      || _par.TAB.blank()
      ?};
      _par.work.buf:='';
      1
   ";

_fend:=
   "  _par:=params_get();
      _TAB:=_par.TAB;
      _path:=_par.PATH.path();
      _buf:=_par.work.buf;
      _jt:='Envelope | Body | PobierzListeUlicDlaMiejscowosciResponse | PobierzListeUlicDlaMiejscowosciResult | '
         'UlicaDrzewo |';
      {? _path=_jt+' Woj |'
      || _TAB.WOJ:=_buf
      |? _path=_jt+' Pow |'
      || _TAB.POW:=_buf
      |? _path=_jt+' Gmi |'
      || _TAB.GMI:=_buf
      |? _path=_jt+' RodzGmi |'
      || _TAB.RODZ_GMI:=_buf
      |? _path=_jt+' IdentyfikatorMiejscowosci |'
      || _TAB.MSC:=_buf
      |? _path=_jt+' IdentyfikatorMiejscowosciPodstawowej |'
      || _TAB.MSCP:=_buf
      |? _path=_jt+' Cecha |'
      || _TAB.CECHA:=_buf
      |? _path=_jt+' NazwaCechy |'
      || _TAB.CECH_OPI:=_buf
      |? _path=_jt+' Nazwa1 |'
      || _TAB.NAZWA_1:=_buf
      |? _path=_jt+' Nazwa2 |'
      || _TAB.NAZWA_2:=_buf
      |? _path=_jt+' SymbolUlicy |'
      || _TAB.ULI:=_buf
      |? _path=_jt & _par.TAB.crc()<>_par.work.crc
      || _par.TAB.add()
      ?};
      _path:=_par.PATH.path();
      _par.PATH.pop(_a);
      1
   ";

_ftext:="params_get().work.buf+=_a; 1";

_ret:=exec('_run','#teryt',_par,_TAB,_fbegin,_fend,_ftext);
{? _ret=''
|| _TAB
|| _ret
?}


\PLKatalogTERC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formuła pobiera katalog TERCAdr - województwa, powiaty, gminy.
::   WE: [_a] tablica z danymi logowania
::       [_b] [DATE] - Data badania stanu [domyślnie: date()].
::        _c - STRING - katalog tymczasowy na serwerze
::   WY: pełna nazwa pliku xml zawierajacego katalog TERCAdr.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

_dt:=date();
{? var_pres('_b')=type_of(_dt)
|| _dt:=_b
?};
_tmp_pth:=_c;

_ret:=exec('PLKatalog','#teryt',_a,'PobierzKatalogTERCAdr',_dt,_tmp_pth);

_ret


\PLKatalogSIMC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formuła pobiera katalog SIMCAdr - miejscowości.
::   WE: [_a] tablica z danymi logowania
::       [_b] [DATE] - Data badania stanu [domyślnie: date()].
::        _c - STRING - katalog tymczasowy na serwerze
::   WY: pełna nazwa pliku xml zawierajacego katalog SIMCAdr.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

_dt:=date();
{? var_pres('_b')=type_of(_dt)
|| _dt:=_b
?};
_tmp_pth:=_c;

_ret:=exec('PLKatalog','#teryt',_a,'PobierzKatalogSIMCAdr',_dt,_tmp_pth);

_ret


\PLKatalogULIC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formuła pobiera katalog ULICAdr - ulice.
::   WE: [_a] tablica z danymi logowania
::       [_b] [DATE] - Data badania stanu [domyślnie: date()].
::        _c - STRING - katalog tymczasowy na serwerze
::   WY: pełna nazwa pliku xml zawierajacego katalog ULICAdr.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

_dt:=date();
{? var_pres('_b')=type_of(_dt)
|| _dt:=_b
?};
_tmp_pth:=_c;

_ret:=exec('PLKatalog','#teryt',_a,'PobierzKatalogULICAdr',_dt,_tmp_pth);

_ret


\PLKatalog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formuła pobiera katalog zip, rozpakowuje go.
::   WE: [_a] tablica z danymi logowania
::       [_b] rodzaj: polecenie np. PobierzKatalogTERCAdr
::       [_c] [DATE] - Data badania stanu [domyślnie: date()].
::        _d - STRING - katalog tymczasowy na serwerze
::   WY: pełna nazwa pliku xml zawierajacego katalog.
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};
_rodz:='';
{? var_pres('_b')=type_of('')
|| _rodz:=_b
?};
_tmp_pth:=_d;

_dt:=date();
{? var_pres('_c')=type_of(_dt)
|| _dt:=_c
?};

{? _rodz=''
|| return('')
?};

{? _tmp_pth<>''
||
   _par:=exec('_request','#teryt');
   _par.action:=_rodz;
   _par.body:='<tem:%1><tem:DataStanu>%2</tem:DataStanu></tem:%1>' [_par.action,gsub(_dt$1,'/','-')];
   _par.url:=_a.url;
   _par.user:=_a.user;
   _par.password:=_a.password;

   _TAB:=tab_tmp(1,
      'NAZ','STRING[100]','Nazwa'@,
      'PATH_TMC','STRING[200]','Ścieżka ZIP',
      'NAZ_TMC','STRING[200]','Nazwa ZIP'@
   );

   _fbegin:=
     $("_par:=params_get();
         _par.PATH.push(_a);
         _path:=_par.PATH.path();
         _par.work.buf:='';
         _tmp_pth:=_par.TMP_PTH;
         _jt:='Envelope | Body | "+_rodz+"Response | "+_rodz+"Result |';
         {? _path=_jt+' plik_zawartosc |'
         || _fp:=_tmp_pth+'/';
            _fn:='terpl_'+$SYSLOG.tm_stamp()+'.tmp';
            _par.work.buf:=fopen(_fp+_fn,'b',0,1,1)
         |? _path=_jt
         || _par.TAB.blank()
         ?};
         1
      ");

   _fend:=
      $("_par:=params_get();
         _TAB:=_par.TAB;
         _path:=_par.PATH.path();
         _buf:=_par.work.buf;
         _tmp_pth:=_par.TMP_PTH;
         _jt:='Envelope | Body | "+_rodz+"Response | "+_rodz+"Result |';
         {? _path=_jt+' nazwa_pliku |'
         || _TAB.NAZ:=_buf
         |? _path=_jt+' plik_zawartosc |'
         || _fp:=_tmp_pth+'/';
            _fn:='teryt_'+$SYSLOG.tm_stamp()+'.zip';
            _fh:=fopen(_fp+_fn,'bw',0,1,1);
            {? _fh.is_open()
            || base64('decode',_buf,_fh);
               fclose(_fh)
            ?};
            fclose(_buf);
            _TAB.PATH_TMC:=_fp;
            _TAB.NAZ_TMC:=_fn
         |? _path=_jt & _par.TAB.crc()<>_par.work.crc
         || _par.TAB.add()
         ?};
         _path:=_par.PATH.path();
         _par.PATH.pop(_a);
         1
      ");

   _ftext:=
      $("_par:=params_get();
         _path:=_par.PATH.path();
         _jt:='Envelope | Body | "+_rodz+"Response | "+_rodz+"Result |';
         {? _path=_jt+' nazwa_pliku |'
         || _par.work.buf+=_a
         |? _path=_jt+' plik_zawartosc |'
         || fwrite(_par.work.buf,_a)
         ?};
         1
        ");

   _ret:=exec('_run','#teryt',_par,_TAB,_fbegin,_fend,_ftext,_tmp_pth);

   {? _ret='' & _TAB.first()
   || _fp:=_TAB.PATH_TMC;
      _fn:=_TAB.NAZ_TMC;
      funpack(,_fp+_fn,_fp);
      _fx:=_fp+_TAB.NAZ+'.xml';
      {? fexists(_fx)
      || _ret:=_fx
      ?}
   ?}
|| _ret:='Nie przekazano ścieżki do katalogu tymczasowego na serwerze'
?};
_ret


\PLCzyZalogowany
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formuła sprawdza poprawność danych logowania.
::   WE: [_a] tablica z danymi logowania
::   WY: 1 - dane prawidłowe, 0 - nie
::----------------------------------------------------------------------------------------------------------------------
{? ~(_>0 & obj_ntab(_a))
|| return('Brak adresu i danych logowania.')
?};

_par:=exec('_request','#teryt');
_par.action:='CzyZalogowany';
_par.body:='<tem:%1/>'[_par.action];
_par.url:=_a.url;
_par.user:=_a.user;
_par.password:=_a.password;

_tmp_dir:=fmk_tmp_dir(0);
{? type_of(_tmp_dir)<>type_of(~~)
||
   _tmp_pth:=_tmp_dir.get_path();

   _TAB:=tab_tmp(1,
      'CZY','STRING[100]','Czy zalogowany'@
      );

   _fbegin:=
      "  _par:=params_get();
         _par.PATH.push(_a);
         _path:=_par.PATH.path();
         {? _path='Envelope | Body | CzyZalogowanyResponse | CzyZalogowanyResult |'
         || _par.TAB.blank()
         ?};
         _par.work.buf:='';
         1
      ";

   _fend:=
      "  _par:=params_get();
         _TAB:=_par.TAB;
         _path:=_par.PATH.path();
         _buf:=_par.work.buf;
         _jt:='Envelope | Body | CzyZalogowanyResponse | CzyZalogowanyResult |';
         {? _path=_jt
         || _TAB.CZY:=_buf;
            _par.TAB.add()
         ?};
         _path:=_par.PATH.path();
         _par.PATH.pop(_a);
         1
      ";

   _ftext:="params_get().work.buf+=_a; 1";

   _ret:=exec('_run','#teryt',_par,_TAB,_fbegin,_fend,_ftext,_tmp_pth);
   {? _ret=''
   || _czy:=(_TAB.CZY='true')
   || _czy:=0
   ?}
|| FUN.emsg('Nie udało się utworzyć katalogu tymczasowego na serwerze.'@)
?};

_czy

:Sign Version 2.0 jowisz:1045 2021/09/17 15:17:04 9f186373fb3c651d38b339c640ec07e8d764903a32f624600b3df7334f845a3d7a7435bd41dc7045372f2fd49909c3a73757c7a45bbdfe97d8d044432aee56ce4df8fedb038e3d2230034ca67751300ae826a85580ebf1c1adb0d32f2ed2415d9a99c607648cf95b59ba1a0a5131808b46864bb99df259c303bba787ad2e2bce
