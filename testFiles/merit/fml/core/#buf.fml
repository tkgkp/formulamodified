:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #buf.fml [20.14]
:: Utworzony: 03.02.2020
:: Autor: TS
::======================================================================================================================
:: Zawartość: Funkcje wspomagające tworzenie "obiektu" obsługi bufora tabel
::======================================================================================================================


\create_struct
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Tworzy struktury potrzebne do obsługi buforów:
::       - tabelę tymczasową (o ile to możliwe na serwerze) - __buffers
::       - tablicę buforów standardowych (tych bez dodatkowych pól) - __buffers_array
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__buffers')<100 | var_pres('__buffers_array')<100
|| VAR_DEL.delete('__buffers','__buffers_array');
:: Tabela tymczasowa na serwerze
   {? exec('runtime_p60','#system')
   || _index_prefix:='buffers';
      {? SYSLOG.lock(1,,1)
      || _list:=st_list(_index_prefix,0);
         {? _list.first()
         || __buffers:=st_open(_list.IDENT)
         || _tab:=st_create(2
               ,'TAB','STRING[8]','Akronim tabeli'
               ,'ADDS','STRING[255]','Dodatkowe pola'
               ,'FORMULA','SYS_MEMO','Treść formuły'
            );
            _syslog_name:=gsub(SYSLOG.name(1),'?','_');
            _ident:=_tab.st_id_make(_syslog_name,_index_prefix,-1);
            __buffers:=st_open(_ident)
         ?};
         SYSLOG.unlock()
      || _tab:=st_create(2
            ,'TAB','STRING[8]','Akronim tabeli'
            ,'ADDS','STRING[255]','Dodatkowe pola'
            ,'FORMULA','SYS_MEMO','Treść formuły'
         );
         _syslog_name:=gsub(SYSLOG.name(1),'?','_');
         _ident:=_tab.st_id_make(_syslog_name,_index_prefix,-1);
         __buffers:=st_open(_ident)
      ?}
:: Tabela tyczasowa lokalnie (przydatne dla wersji MacroBASE poniżej P_60)
   || __buffers:=tab_tmp(2
         ,'TAB','STRING[8]','Akronim tabeli'
         ,'ADDS','STRING[255]','Dodatkowe pola'
         ,'FORMULA','SYS_MEMO','Treść formuły'
      )
   ?};
:: Tablica nazwana wg akronimów tabel i zmiennych - zainicjowana pustymi tekstami
   _buffers_array:="obj_new(";
   {! _it:=1.. tab_num() |! _buffers_array+="'"+tab_acr(_it)+"'," !};
   _buffers_array-=1;
   _buffers_array+=")";
   __buffers_array:=($_buffers_array)();
   {! _it:=1.. tab_num() |! __buffers_array[_it]:='' !}
?};
~~


\destroy_struct
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Usuwa struktury potrzebne do obsługi buforów
::----------------------------------------------------------------------------------------------------------------------
:: Usunięcie identyfikatorów tabel tymczasowych na serwerze
{? exec('runtime_p60','#system')
|| _index_prefix:='buffers';
   _list:=st_list(_index_prefix,0);
   {? _list.first()
   || {!
      |? _tab:=st_open(_list.IDENT);
         _tab.st_id_remove();
         obj_del(_tab);
         _list.next()
      !}
   ?}
?};
VAR_DEL.delete('__buffers','__buffers_array');
~~


\obj_new
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Tworzy bufor tabeli "X"
::       Przykładowe użycie:
::          _buffer:=exec('obj_new','#buf','M') - tworzy obiekt dla tabeli M
::          _buffer:=exec('obj_new','#buf','M',"'J_KOD','Mgr_KOD'") - tworzy obiekt dla tabeli M z dodatkowymi polami
::   WE: _a - akronim tabeli
::       [_b] FORMULA - dodatkowe pola do obiektu - umieszczane na końcu - nie obsługiwane przez standardowe metody [""]
::   WY: obj_new
::----------------------------------------------------------------------------------------------------------------------
:: Jeżeli treść formuły do budowania bufora jest już zapamiętana, to zwracam obiekt szybciej
{? var_pres('__buffers_array')>100
::& var_pres('__buffers')>100
||
:: Definicja bufora z dodatkowymi polami zawsze jest pobierana z tabeli tymczasowej (nieco wolniej)
   {? var_pres('_b')=3 & form(_b)<>''
   || __buffers.prefix(_a,form(_b));
      {? __buffers.first()
      || _buffer:=__buffers.memo_txt(,1,'FORMULA');
         {? _buffer<>''
         || _buffer:=($_buffer)();
            _buffer.bl_void();
            return(_buffer)
         ?}
      ?}
:: Definicja bufora standardowego najpierw szukana jest w podręcznej tablicy, potem w tabeli tymczasowej
   || _buffer:=($('__buffers_array.'+_a))();
      {? _buffer<>''
      || _buffer:=($_buffer)();
         _buffer.bl_void();
         return(_buffer)
      || __buffers.prefix(_a,);
         {? __buffers.first()
         || _buffer:=__buffers.memo_txt(,1,'FORMULA');
            {? _buffer<>''
            || ($('__buffers_array.'+_a))():=_buffer;
               _buffer:=($_buffer)();
               _buffer.bl_void();
               return(_buffer)
            ?}
         ?}
      ?}
   ?}
?};

{? var_pres('_a')=type_of('')
|| _tab:=($_a)();
   _tab_acr:=_a
|| FUN.emsg('Błędny parametr %1 formuły.'@['_a']);
   return(~~)
?};

_fields:=exec('mbTabFields_tab','#table',_tab);

:: Pola
_buffer:="_buffer:=obj_new('Ref'\n";
{? _fields.first()
|| {!
   |? _buffer+="   ,'"+_fields.FLD_ACR+"'\n";
      _fields.next()
   !}
?};

:: Metody
_buffer+="   ,"+exec('meth_list','#buf');

:: Dodatkowe pola
_buffer+={? var_pres('_b')=3 & form(_b)<>'' || "   ,"+_b || "" ?}+");\n\n";

:: Implementacja metod

::======================================================================================================================
_buffer+="_buffer.blank:=\"
   {? var_pres('_a')=0   || .bl_void()
   |? var_pres('_a')>100 || .bl_table(_a)
   || .bl_table("+_tab_acr+")
   ?}\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.bl_void:=\"\n";
{? _fields.first()
|| {!
   |? _buffer+="   ."+_fields.FLD_ACR+":=~~;\n";
      _fields.next()
   !}
?};
_buffer+="   .Ref:=null();\n   1\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.bl_table:=\"
   _tab:="+_tab_acr+";
   _tab.cntx_psh();
   _tab.blank(1);
   .get(1);
   _tab.cntx_pop();
   _tab.get();
   .Ref:=null();
   1\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.voidize:=\"\n   {? exec('is_empty_value','#var',.Ref)>0 || .Ref:=~~ ?};\n";
{? _fields.first()
|| {!
   |? _buffer+="   {? exec('is_empty_value','#var',."+_fields.FLD_ACR+")>0 || ."+_fields.FLD_ACR+":=~~ ?};\n";
      _fields.next()
   !}
?};
_buffer+="   ~~\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.get:=\"\n   {? var_pres('_a')=type_of(0) || _database:=_a || _database:=0 ?};\n";
{? _fields.first()
|| {!
   |? {? _fields.FLD_TYPE='_SYSMEMO'
      || _buffer+="   ."+_fields.FLD_ACR+":="+_tab_acr+".memo_txt(,_database,'"+_fields.FLD_ACR+"');\n"
      || _buffer+="   ."+_fields.FLD_ACR+":="+_tab_acr+"."+_fields.FLD_ACR+";\n"
      ?};
      _fields.next()
   !}
?};
_buffer+="   .Ref:="+{? exec('tab_or_var','#table',_tab_acr)<>2 || "null()" || _tab_acr+".ref()" ?}+";\n   (.)\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.set:=\"\n";
{? _fields.first()
|| {!
   |? {? _fields.FLD_TYPE='_SYSMEMO'
      || _buffer+="   {? ."+_fields.FLD_ACR+"<>~~ || "+_tab_acr+".memo_set(."+_fields.FLD_ACR+",'"+_fields.FLD_ACR+"') ?};\n"
      || _buffer+="   {? ."+_fields.FLD_ACR+"<>~~ || "+_tab_acr+"."+_fields.FLD_ACR+":=."+_fields.FLD_ACR+" ?};\n"
      ?};
      _fields.next()
   !}
?};
_buffer+="   ~~\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.setf:=\"\n";
{? _fields.first()
|| {!
   |? {? _fields.FLD_TYPE='_SYSMEMO'
      || _buffer+="   "+_tab_acr+".memo_set(."+_fields.FLD_ACR+",'"+_fields.FLD_ACR+"');\n"
      || _buffer+="   "+_tab_acr+"."+_fields.FLD_ACR+":=."+_fields.FLD_ACR+";\n"
      ?};
      _fields.next()
   !}
?};
_buffer+="   ~~\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.mask:=\"\n   {? var_pres('_a')>100 || _target:=_a || _target:="+_tab_acr+" ?};\n";
{? _fields.first()
|| {!
   |? {? _fields.FLD_TYPE='_SYSMEMO'
      || _buffer+="   {? ."+_fields.FLD_ACR+"<>~~ || _target.memo_set(."+_fields.FLD_ACR+",'"+_fields.FLD_ACR+"') ?};\n"
      || _buffer+="   {? ."+_fields.FLD_ACR+"<>~~ || .maskSet(_target,'."+_fields.FLD_ACR+"') ?};\n"
      ?};
      _fields.next()
   !}
?};
_buffer+="   ~~\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.maskSet:=\"
   _val1:=($('_a'+_b))(_a,_b); _val2:=($_b)();
   {? type_of(_val1)<>type_of(_val2)&type_of(_val1)=2
   || ($('_a'+_b+':=$'+_b))(_a,_b)
   || ($('_a'+_b+':='+_b))(_a,_b)
   ?};
   ~~\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.cntx_get:=\"
   _tab:="+_tab_acr+";
   {? type_of(_a)=7 || _ref:=#_a; _mask:=ref_name(_a)
   |? type_of(_a)=1 || _ref:=_a;  _mask:={? var_pres('_b')=2 || _b || _tab.name() ?}
   || .blank(~~); return(.)
   ?};
   {? var_pres('_c')=type_of(0) || _database:=_c || _database:=0 ?};
   _tab.cntx_psh();
   {? {? _tab.name()<>_mask
      || _tab.use(_mask)
      || 1
      ?}
   || _tab.prefix();
      {? _tab.seek(_ref,)
      || .get(_database)
      || .blank(~~)
      ?}
   || .blank(~~)
   ?};
   _tab.cntx_pop();
   (.)\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.memo_put:=\"\n";
{? _fields.first()
|| {!
   |? {? _fields.FLD_TYPE='_SYSMEMO'
      || _buffer+="   "+_tab_acr+".memo_put(,'"+_fields.FLD_ACR+"');\n"
      ?};
      _fields.next()
   !}
?};
_buffer+="   ~~\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.ref:=\".Ref\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.name:=\"'"+_tab_acr+"'\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.this:=\"exec('obj_new','#buf','"+_tab_acr+"')\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.acronyms:=\"\n   _tab:=obj_new("+$(_fields.size()+1)+");\n   _tab[1]:='Ref';\n";
_it:=1;
{? _fields.first()
|| {!
   |? _it+=1;
      _buffer+="   _tab["+$_it+"]:='"+_fields.FLD_ACR+"';\n";
      _fields.next()
   !}
?};
_buffer+="   _tab\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.types:=\"\n   _tab:=obj_new("+$(_fields.size()+1)+");\n   _tab[1]:='_"+_tab_acr+"';\n";
_it:=1;
{? _fields.first()
|| {!
   |? _it+=1;
      _buffer+="   _tab["+$_it+"]:='"+_fields.FLD_TRAW+"';\n";
      _fields.next()
   !}
?};
_buffer+="   _tab\";\n\n";
::======================================================================================================================

::======================================================================================================================
_buffer+="_buffer.methods:=\"exec('methods','#buf',.)\";\n\n";
::======================================================================================================================

_buffer+="_buffer";

:: Zapamiętanie treści formuły
exec('create_struct','#buf');
_adds:={? var_pres('_b')=3 || form(_b) || '' ?};
__buffers.prefix(_a,_adds,);
{? ~__buffers.first()
|| __buffers.TAB:=_a;
   __buffers.ADDS:=_adds;
   __buffers.memo_set(_buffer,'FORMULA');
   {? __buffers.add()
   || __buffers.memo_put(,'FORMULA');
      ($('__buffers_array.'+_a))():=_buffer
   ?}
?};

:: Utworzenie i wypełnienie obiektu voidami
_buffer:=($_buffer)();
_buffer.bl_void();
_buffer


\meth_list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca listę metod
::----------------------------------------------------------------------------------------------------------------------
""+"'blank','bl_void','bl_table','voidize','get','set','setf','mask','maskSet','cntx_get','memo_put','ref','name','this','acronyms','types','methods'"


\methods
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wyświetla listę metod z opisem i ich treścią
::   WE: _buffer
::----------------------------------------------------------------------------------------------------------------------
params_set('buffer',_a);
_methods:=spli_str(gsub(exec('meth_list','#buf'),'\'',''),',');
_tab:=json_tparse(json_obj(_methods));
_wer:=_tab.mk_sel('Metody obiektu buforowego'@,'N',,'methods',,,,1);
_tab.win_fld(_wer,,'VAL',,,20,,,'Metoda'@);
_formula:="
   _tab:=cur_tab(1,1);
   _buffer:=params_get().buffer;
   exec('edit_memo','#edit',($('\"\"+_a.'+_tab.VAL))(_buffer),'Metoda %1'@[_tab.VAL],,80,30,,0,0)
";
_tab.win_act(_wer,,'Formuła','Treść metody'@@,,,_formula,,1,,,,'T');
_tab.win_sel(_wer);
_tab.select();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 9f9a32d71549757b904fa26686d76c5e29572a928aa7b590fa3bf4149f094afc394125bb086d44176ee6ebe5c5e97af4f15b3484459ca02aa9ffb09f507153c5855398ba51f7c8c9754ae9bab5d8d6e131dd48751e63d15e2171e34194f8944cadfcbef2bae7b261ed74ecbd1c096fb779e2c4da7ff4216af7be587cd63ab268
