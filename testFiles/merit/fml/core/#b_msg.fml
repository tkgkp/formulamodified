:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_msg.fml [17.00]
:: Utworzony: 27.04.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa dodatkowych własności zdarzeń komunikatów (tabela B_MSG)
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli B_MSG
::   WY: obj_new()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('B_MSG','#buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje do tabeli B_MSG jeden rekord
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#b_msg')
::   WY: B_MSG.ref() lub null()
::  TAG: <PROCES><ADD>
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','#b_msg')
         ?};
_result:=null();

B_MSG.cntx_psh(); B_MSG.clear();
B_MSG.blank();
_buffer.set();
{? B_MSG.add()>0
|| B_MSG.memo_put(,'BODYT');
   B_MSG.memo_put(,'BODYH');
   B_MSG.memo_put(,'TO');
   B_MSG.memo_put(,'CC');
   B_MSG.memo_put(,'BCC');
   B_MSG.memo_put(,'HEADTAGS');
   _result:=B_MSG.ref()
?};
B_MSG.cntx_pop();
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kasuje podany rekord tabeli B_MSG (wykonywane w transakcji!!!)
::   WE: _a - B_MSG.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::  TAG: <PROCES><DEL>
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
B_MSG.cntx_psh(); B_MSG.clear();
{? B_MSG.seek(_ref)
|| {? exec('can_delete','#b_msg',_ref)>0
   || {? exec('clean','#b_msg',_ref)>0
      || _bi_bloba:=B_MSG.BI_BLOBA;
         _bi_blobe:=B_MSG.BI_BLOBE;
         {? B_MSG.del(,1)>0
         || _result:=1;

::          Jeżeli B_MSG usunięte ale były do niego jakieś załączniki to próbuję je również usunąć
::          pod warunkiem że nie ma do nich żadnych odwołań
            {? _bi_bloba<>null()
            || exec('delete','#bi_blob',_bi_bloba)
            ?};
            {? _bi_blobe<>null()
            || exec('delete','#bi_blob',_bi_blobe)
            ?}
         || undo();
            _result:=-4
         ?}
      || _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};
B_MSG.cntx_pop();
{? _result<0
|| undo()
?};

{? _mydo || end() ?};
_result


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy można usunąć B_MSG
::   WE: _a - B_MSG.ref()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_port:=_a;

_result:=1;
_can_continue:=1;

B_MSG.cntx_psh();
B_MSG.clear();
{? B_MSG.seek(_b_port)
|| _result:=(B_MSG.count()=0)
?};
B_MSG.cntx_pop();

_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli B_MSG
::   WE: _a - B_MSG.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiązania usunięte? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};

_result


\valid_property
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy element procesu ma ustawione wymagane własności
::   WE: _a - B_PREL.ref()
::   WY: 1 - własności nie są wymagane, albo wymagane własności są ustawione
::       0 - wymagane własności nie są ustawione
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_result:=1;

B_PREL.cntx_psh(); B_MSG.cntx_psh();
B_PREL.prefix();
{? B_PREL.seek(_b_prel)
||
:: Zdarzenie wysłania komunikatu (pośrednie albo końcowe)
   {? exec('is_event','#b_event',B_PREL.B_ELE,exec('type_intermed','#b_event'),
                                              exec('kind_message','#b_event'),
                                              exec('category_throw','#b_event'))>0
         |
      exec('is_event','#b_event',B_PREL.B_ELE,exec('type_end','#b_event'),
                                              exec('kind_message','#b_event'),
                                              exec('category_throw','#b_event'))>0
   || _sub_connected:=exec('port_connected','#b_msg',_b_prel,'SUB');
      _rcv_connected:=
         exec('port_connected','#b_msg',_b_prel,'TO') |
         exec('port_connected','#b_msg',_b_prel,'CC') |
         exec('port_connected','#b_msg',_b_prel,'BCC');

      B_MSG.index('B_PREL');
      B_MSG.prefix(_b_prel);

::    Jest definicja komunikatu
      {? B_MSG.first()
      || {? ~_rcv_connected & B_MSG.memo_txt(,1,'TO')='' & B_MSG.memo_txt(,1,'CC')='' & B_MSG.memo_txt(,1,'BCC')=''
         || _result:=0
         |? ~_sub_connected & B_MSG.SUB=''
         || _result:=0
         ?}
::    Brak definicji komunikatu
      || {? ~_sub_connected | ~_rcv_connected || _result:=0 ?}
      ?}
   ?}
?};
B_PREL.cntx_pop(); B_MSG.cntx_pop();
_result


\btn_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przycisk 'Popraw' w oknie osadzonym w oknie grupowym
::       Kontekst wywołania - ustawiony rekord B_PREL
::  TAG: <PROCES><PUT>
::----------------------------------------------------------------------------------------------------------------------
B_MSG.index('B_PREL');
B_MSG.prefix(B_PREL.ref());
_to_edit:=0;
{? B_MSG.first()
|| _to_edit:=1
|| B_MSG.blank();
   B_MSG.B_PREL:=B_PREL.ref();
   _to_edit:=B_MSG.add()
?};
{? _to_edit
|| exec('creator_start_msg','#b_msg');
   win_activate('WINS');
   win_disp()
?};
''


\creator_start_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uruchamia kreatora własności zdarzenia wysłania komunikatu
::       Kontekst wywołania - ustawione rekordy B_PREL i B_MSG
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_buffer:=exec('buffer','#b_msg');
_buffer.get();
B_MSG.win_edit('REDS');
exec('efld_opt','#b_msg');
{? B_MSG.edit("exec('valid','#b_msg')")
|| {? B_MSG.put()
   || B_MSG.memo_put(,'BODYT');
      B_MSG.memo_put(,'TO');
      B_MSG.memo_put(,'CC');
      B_MSG.memo_put(,'BCC')
   ?}
|| _buffer.set()
?};
~~


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Walidacja przy redagowaniu B_MSG
::  TAG: <PROCES><CHK>
::----------------------------------------------------------------------------------------------------------------------
_sub_connected:=exec('port_connected','#b_msg',B_MSG.B_PREL,'SUB');
_rcv_connected:=
   exec('port_connected','#b_msg',B_MSG.B_PREL,'TO') |
   exec('port_connected','#b_msg',B_MSG.B_PREL,'CC') |
   exec('port_connected','#b_msg',B_MSG.B_PREL,'BCC');

B_PREL.cntx_psh(); B_PROC.cntx_psh();
_accepted:=(B_MSG.B_PREL().B_PROC().ACCEPTED='T');
B_PREL.cntx_pop(); B_PROC.cntx_pop();

_chk:='';
{? _chk='' & _accepted &
   ~_rcv_connected & B_MSG.memo_txt(,0,'TO')='' & B_MSG.memo_txt(,0,'CC')='' & B_MSG.memo_txt(,0,'BCC')=''
|| FUN.emsg('Adres odbiorcy musi być wypełniony.\nNależy uzupełnić brakujące informacje.'@);
   _chk:='TO'
?};
{? _chk='' & ~_sub_connected || _chk:=__CHK.record(B_MSG,,'SUB') ?};

{? _chk=''
|| {? 1+B_MSG.FROM<>'$' & ~exec('mail_ok','#email',B_MSG.FROM)
   || FUN.info('Niepoprawny adres e-mail autora.'@);
      _chk:='FROM'
   |? 1+B_MSG.memo_txt(,0,'TO')<>'$' & ~exec('mail_list_ok','#email',B_MSG.memo_txt(,0,'TO'))
   || FUN.info('Niepoprawny adres e-mail na liście odbiorców.'@);
      _chk:='TO'
   |? 1+B_MSG.memo_txt(,0,'CC')<>'$' & ~exec('mail_list_ok','#email',B_MSG.memo_txt(,0,'CC'))
   || FUN.info('Niepoprawny adres e-mail na liście do wiadomości (DW).'@);
      _chk:='CC'
   |? 1+B_MSG.memo_txt(,0,'BCC')<>'$' & ~exec('mail_list_ok','#email',B_MSG.memo_txt(,0,'BCC'))
   || FUN.info('Niepoprawny adres e-mail na liście ukryte do wiadomości (UDW).'@);
      _chk:='BCC'
   ?}
?};

{? _chk='' & 1+B_MSG.FROM='$'
|| _chk:={? exec('valid_formula','#field',1-B_MSG.FROM) || '' || 'FROM' ?}
?};
{? _chk='' & 1+B_MSG.memo_txt(,0,'TO')='$'
|| _chk:={? exec('valid_formula','#field',1-B_MSG.memo_txt(,0,'TO')) || '' || 'TO' ?}
?};
{? _chk='' & 1+B_MSG.memo_txt(,0,'CC')='$'
|| _chk:={? exec('valid_formula','#field',1-B_MSG.memo_txt(,0,'CC')) || '' || 'CC' ?}
?};
{? _chk='' & 1+B_MSG.memo_txt(,0,'BCC')='$'
|| _chk:={? exec('valid_formula','#field',1-B_MSG.memo_txt(,0,'BCC')) || '' || 'BCC' ?}
?};
{? _chk='' & 1+B_MSG.SUB='$'
|| _chk:={? exec('valid_formula','#field',1-B_MSG.SUB) || '' || 'SUB' ?}
?};
{? _chk='' & 1+B_MSG.memo_txt(,0,'BODYT')='$'
|| _chk:={? exec('valid_formula','#field',1-B_MSG.memo_txt(,0,'BODYT')) || '' || 'BODYT' ?}
?};
_chk


\rcv_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa na F3 dla pola B_MSG.RCV
::----------------------------------------------------------------------------------------------------------------------
POCZTARC.index('ADRES');
POCZTARC.prefix(REF.FIRMA);
POCZTARC.win_sel('WER');
POCZTARC.actions('WER','ZO','T');
POCZTARC.find_key(fld());
{? POCZTARC.select(,1,10)
|| POCZTARC.ADRES
|| ~~
?}


\add_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje do skrzynki nadawczej e-mail wg definicji
::   WE: _a - menadżer procesów
::----------------------------------------------------------------------------------------------------------------------
_mp:=_a;
_ports:=exec('getPorts','#b_port',_mp.buf_eve.B_ELE,'IN',_mp.b_prel);
_in:=exec('fillPorts','#bi_port',_mp.bi_prel,'IN',_ports);
params_set('mp',_mp,'in',_in);

B_MSG.cntx_psh();
B_MSG.index('B_PREL');
B_MSG.prefix(_mp.b_prel);

:: Jest definicja komunikatu:
:: W przypadku, gdy wartość pól zaczyna się od '$' jest ona traktowana jako formuła,
:: wtedy może ona interpretować porty wejściowe przekazane w zmiennej _a (czyli np.: _a.p01)
:: albo jako params_get().in (czyli np.: params_get().in.p01).
:: Dodatkowo w formułach można wykorzystać obiekt menadżera procesów dostępny jako params_get().mp.
:: Jeżeli parametr przekazany jest bezpośrednio przez dedykowany port wejściowy, to jest on ważniejszy niż
:: zdefiniowany w zdarzeniu (oprócz list odbiorców, załączników i tagów, które są odpowiednio uzupełniane).
{? B_MSG.first()
|| _args:=exec('add_email_a','#mailbox');
   {? var_pres('SUB',_in)=type_of('') & _in.SUB<>''
   || _args.SUB:=_in.SUB
   || _args.SUB:={? 1+B_MSG.SUB='$' || ($((1-B_MSG.SUB)))(_in) || B_MSG.SUB ?}
   ?};
   {? var_pres('FROM',_in)=type_of('') & _in.FROM<>''
   || _args.FROM:=_in.FROM
   || _args.FROM:={? 1+B_MSG.FROM='$' || ($((1-B_MSG.FROM)))(_in) || B_MSG.FROM ?}
   ?};
   {? var_pres('SENDER',_in)=type_of('') & _in.SENDER<>''
   || _args.SENDER:=_in.SENDER
   || _args.SENDER:={? 1+B_MSG.SENDER='$' || ($((1-B_MSG.SENDER)))(_in) || B_MSG.SENDER ?}
   ?};
   {? var_pres('REPLYTO',_in)=type_of('') & _in.REPLYTO<>''
   || _args.REPLYTO:=_in.REPLYTO
   || _args.REPLYTO:={? 1+B_MSG.REPLYTO='$' || ($((1-B_MSG.REPLYTO)))(_in) || B_MSG.REPLYTO ?}
   ?};
   {? var_pres('BODYT',_in)=type_of('') & _in.BODYT<>''
   || _args.BODYT:=_in.BODYT
   || _txt:=B_MSG.memo_txt(,1,'BODYT');
      _args.BODYT:={? 1+_txt='$' || ($((1-_txt)))(_in) || _txt ?}
   ?};
   {? var_pres('BODYH',_in)=type_of('') & _in.BODYH<>''
   || _args.BODYH:=_in.BODYH
   || _txt:=B_MSG.memo_txt(,1,'BODYH');
      _args.BODYH:={? 1+_txt='$' || ($((1-_txt)))(_in) || _txt ?}
   ?};
   {? var_pres('RETURN',_in)=type_of('') & _in.RETURN<>''
   || _args.RETURN:=_in.RETURN
   || _args.RETURN:=B_MSG.RETURN
   ?};
:: Lista odbiorców z definicji zdarzenia uzupełniana jest na podstawie list odbiorców przekazanych portami wejściowymi
   _rcv:=tab_tmp(,'ADRES','STRING[100]','Adres','R','STRING[1]','Rodzaj');
   _add:="
      {? var_pres('_a')=type_of('') & _a<>''
      || _tab:=exec('mail_from_list','#email',_a);
         {? _tab.first()
         || {!
            |? _b.ADRES:=_tab.ADRES; _b.R:=_c; _b.add();
               _tab.next()
            !}
         ?}
      ?}
   ";
   _add(_in.TO,_rcv,'T');
   _add(_in.CC,_rcv,'C');
   _add(_in.BCC,_rcv,'B');
   _add(_txt:=B_MSG.memo_txt(,1,'TO');{? 1+_txt='$' || ($((1-_txt)))(_in) || _txt ?},_rcv,'T');
   _add(_txt:=B_MSG.memo_txt(,1,'CC');{? 1+_txt='$' || ($((1-_txt)))(_in) || _txt ?},_rcv,'C');
   _add(_txt:=B_MSG.memo_txt(,1,'BCC');{? 1+_txt='$' || ($((1-_txt)))(_in) || _txt ?},_rcv,'B');
   _args.RCV:=_rcv;
:: Załączniki z definicji zdarzenia uzupełniane są załącznikami przekazanymi portami wejściowymi
   _att:=tab_tmp(,
      'FILENAME','STRING[100]','Nazwa pliku',
      'BLOB','BLOBRAW','Załącznik',
      'AE','STRING[1]','Dołączony/Osadzony'
   );
   _add:="
      {? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=BI_BLOB
      || BI_BLOP.cntx_psh();
         BI_BLOP.index('BI_BLOB');
         BI_BLOP.prefix(_a);
         {? BI_BLOP.first()
         || {!
            |? _b.BLOB:=BI_BLOP.BLOB;
               _b.AE:=_c;
               _b.add();
               BI_BLOP.next()
            !}
         ?};
         BI_BLOP.cntx_pop()
      ?}
   ";
   _add(_in.FILE_A,_att,'A');
   _add(_in.FILE_E,_att,'E');
   _add(B_MSG.BI_BLOBA,_att,'A');
   _add(B_MSG.BI_BLOBE,_att,'E');
   _args.ATTACH:=_att;

   _txt:=B_MSG.memo_txt(,1,'HEADTAGS');
    _args.HEADTAGS:={? 1+_txt='$' || ($((1-_txt)))() || _txt ?};

   {? var_pres('HEADTAGS',_in)=type_of('') & _in.HEADTAGS<>''
   ||
      {? _args.HEADTAGS<>''
      ||
::       Łączymy tagi z dwóch źródeł
         _args.HEADTAGS+='\n'+_in.HEADTAGS
      || _args.HEADTAGS:=_in.HEADTAGS
      ?}
   ?};

   {? var_pres('TEMPLATE',_in)=type_of('') & _in.TEMPLATE<>''
   || _args.TEMPLATE:=_in.TEMPLATE
   || _args.TEMPLATE:={? 1+B_MSG.TEMPLATE='$' || ($((1-B_MSG.TEMPLATE)))(_in) || B_MSG.TEMPLATE ?}
   ?};

:: Proces (symbol i wersja) oraz kod instancji
   _args.PROC:=exec('FindAndGet','#table',B_PROC,_mp.b_proc,,"B_PROC.SYMBOL+' ('+B_PROC.VER+')'",'');
   _args.INS_CODE:=exec('FindAndGet','#table',BI_PROC,_mp.bi_proc,,"BI_PROC.CODE",'');

   exec('add_email','#mailbox',_args)

:: Nie ma definicji komunikatu - tylko obsługa na podstawie zawartości portów
|| _args:=exec('add_email_a','#mailbox');
   {? var_pres('SUB',_in)=type_of('') & _in.SUB<>''
   || _args.SUB:=_in.SUB
   ?};
   {? var_pres('FROM',_in)=type_of('') & _in.FROM<>''
   || _args.FROM:=_in.FROM
   ?};
   {? var_pres('SENDER',_in)=type_of('') & _in.SENDER<>''
   || _args.SENDER:=_in.SENDER
   ?};
   {? var_pres('REPLYTO',_in)=type_of('') & _in.REPLYTO<>''
   || _args.REPLYTO:=_in.REPLYTO
   ?};
   {? var_pres('BODYT',_in)=type_of('') & _in.BODYT<>''
   || _args.BODYT:=_in.BODYT
   ?};
   {? var_pres('BODYH',_in)=type_of('') & _in.BODYH<>''
   || _args.BODYH:=_in.BODYH
   ?};
   {? var_pres('RETURN',_in)=type_of('') & _in.RETURN<>''
   || _args.RETURN:=_in.RETURN
   ?};
:: Lista odbiorców zdarzenia wypełniana jest na podstawie list odbiorców przekazanych portami wejściowymi
   _rcv:=tab_tmp(,'ADRES','STRING[100]','Adres','R','STRING[1]','Rodzaj');
   _add:="
      {? var_pres('_a')=type_of('') & _a<>''
      || _tab:=exec('mail_from_list','#email',_a);
         {? _tab.first()
         || {!
            |? _b.ADRES:=_tab.ADRES; _b.R:=_c; _b.add();
               _tab.next()
            !}
         ?}
      ?}
   ";
   _add(_in.TO,_rcv,'T');
   _add(_in.CC,_rcv,'C');
   _add(_in.BCC,_rcv,'B');
   _args.RCV:=_rcv;
:: Załączniki wypełniane na podstawie portów wejściowych
   _att:=tab_tmp(,
      'FILENAME','STRING[100]','Nazwa pliku',
      'BLOB','BLOBRAW','Załącznik',
      'AE','STRING[1]','Dołączony/Osadzony'
   );
   _add:="
      {? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=BI_BLOB
      || BI_BLOP.cntx_psh();
         BI_BLOP.index('BI_BLOB');
         BI_BLOP.prefix(_a);
         {? BI_BLOP.first()
         || {!
            |? _b.BLOB:=BI_BLOP.BLOB;
               _b.AE:=_c;
               _b.add();
               BI_BLOP.next()
            !}
         ?};
         BI_BLOP.cntx_pop()
      ?}
   ";
   _add(_in.FILE_A,_att,'A');
   _add(_in.FILE_E,_att,'E');
   _args.ATTACH:=_att;

   {? var_pres('HEADTAGS',_in)=type_of('') & _in.HEADTAGS<>''
   || {? _args.HEADTAGS<>''
      ||
::       Łączymy tagi z dwóch źródeł
         _args.HEADTAGS+='\n'+_in.HEADTAGS
      || _args.HEADTAGS:=_in.HEADTAGS
      ?}
   ?};

   {? var_pres('TEMPLATE',_in)=type_of('') & _in.TEMPLATE<>''
   || _args.TEMPLATE:=_in.TEMPLATE
   ?};

:: Proces (symbol i wersja) oraz kod instancji
   _args.PROC:=exec('FindAndGet','#table',B_PROC,_mp.b_proc,,"B_PROC.SYMBOL+' ('+B_PROC.VER+')'",'');
   _args.INS_CODE:=exec('FindAndGet','#table',BI_PROC,_mp.bi_proc,,"BI_PROC.CODE",'');

   exec('add_email','#mailbox',_args)
?};
B_MSG.cntx_pop();
~~


\efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ustawia opcje pól w oknie redakcyjnym B_MSG
::----------------------------------------------------------------------------------------------------------------------
B_MSG.efld_opt('REDS',{? exec('port_connected','#b_msg',B_MSG.B_PREL,'SUB') || 'mark=0' || 'mark=1' ?},,'SUB');
{? B_MSG.memo_txt(,0,'TO')='' & B_MSG.memo_txt(,0,'CC')='' & B_MSG.memo_txt(,0,'BCC')='' &
   ~exec('port_connected','#b_msg',B_MSG.B_PREL,'TO') &
   ~exec('port_connected','#b_msg',B_MSG.B_PREL,'CC') &
   ~exec('port_connected','#b_msg',B_MSG.B_PREL,'BCC')
|| _mark_adres:=1
|| _mark_adres:=0
?};
B_MSG.efld_opt('REDS',{? _mark_adres || 'mark=1' || 'mark=0' ?},,'TO');
B_MSG.efld_opt('REDS',{? _mark_adres || 'mark=1' || 'mark=0' ?},,'CC');
B_MSG.efld_opt('REDS',{? _mark_adres || 'mark=1' || 'mark=0' ?},,'BCC');
~~


\fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redagowaniu pól w tabeli B_MSG: TO, CC, BCC
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='TO' | cur_afld()='CC' | cur_afld()='BCC'
|| exec('efld_opt','#b_msg')
?};
~~


\port_connected
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza port wejściowy elementu, czy jest powiązany w procesie albo ma przypisaną wartość
::   WE: _a - B_PREL.ref()
::       _b - symbol portu
::   WY: 0 - nie jest powiązany, 1 - są powiązania
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;
_b_ele:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_ELE",null());
_b_proc:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_PROC",null());
_symbol:=_b;

_connected:=0;
B_PORT.index('B_ELE');
B_PORT.prefix('T',_b_ele,exec('kind_in','#b_port'),_symbol,);
{? B_PORT.first()
||
:: 1. port jest powiązany w procesie
   B_POCONN.index('TO');
   B_POCONN.prefix(B_PORT.ref(),_b_proc,_b_prel);
   {? B_POCONN.first() || _connected:=1 ?};
:: 2. port ma przypisaną wartość
   B_VALPRT.index('UNIK');
   B_VALPRT.prefix(_b_prel,B_PORT.ref());
   {? B_VALPRT.first() || _connected:=1 ?}
?};
_connected


\html
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Redagowanie treści HTML
::----------------------------------------------------------------------------------------------------------------------
::B_MSG.memo_get(,'BODYH');
::{? B_MSG.memo_edi(,'BODYH')
::|| {? 1+B_MSG.memo_txt(,0,'BODYH')='$'
::   || {? exec('valid_formula','#field',1-B_MSG.memo_txt(,0,'BODYH'))
::      || B_MSG.memo_put(,'BODYH')
::      ?}
::   || B_MSG.memo_put(,'BODYH')
::   ?}
::?};
_valid:="
   _memo:=_a;
   _result:=1;
   _prefix:='<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<p>';
   _suffix:='</p>\n</body>\n</html>\n';
   {? _memo*_prefix>0 & _memo*_suffix>0
   || _memo:=gsub(_memo,_prefix,'');
      _memo:=gsub(_memo,_suffix,'');
      {? 1+_memo='$'
      || _result:=exec('valid_formula','#field',1-_memo)
      ?}
   ?};
   _result
";

_edited:=exec('edit_html_sysmemo','#edit',B_MSG,'BODYH','b_msg_html',,'Treść HTML'@,1,_valid);
{? _edited>0
||
   _memo:=B_MSG.memo_txt(,1,'BODYH');
   _prefix:='<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<p>';
   _suffix:='</p>\n</body>\n</html>\n';
   {? _memo*_prefix>0 & _memo*_suffix>0
   || _memo:=gsub(_memo,_prefix,'');
      _memo:=gsub(_memo,_suffix,'');
      {? 1+_memo='$'
      || B_MSG.memo_set(_memo,'BODYH');
         B_MSG.memo_put(,'BODYH')
      ?}
   ?};
   _empty:='<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\n</body>\n</html>\n';
   {? _memo*_empty>0
   || _memo:=gsub(_memo,_empty,'');
      B_MSG.memo_set(_memo,'BODYH');
      B_MSG.memo_put(,'BODYH')
   ?}
?};
''


\file_att
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Redagowanie listy załączników dołączonych
::----------------------------------------------------------------------------------------------------------------------
_blob:=exec('edit','#bi_blob',B_MSG.BI_BLOBA,,'Pliki dołączone'@);
{? var_pres('_blob')=type_of(null())
|| B_MSG.BI_BLOBA:=_blob;
   B_MSG.put()
?};
''


\file_emb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Redagowanie listy załączników osadzonych
::----------------------------------------------------------------------------------------------------------------------
_blob:=exec('edit','#bi_blob',B_MSG.BI_BLOBE,,'Pliki osadzone'@);
{? var_pres('_blob')=type_of(null())
|| B_MSG.BI_BLOBE:=_blob;
   B_MSG.put()
?};
''


\head_tags_properties
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Redagowanie tagów dodawanych do nagłówka od strony właściwości zdarzenia
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
B_MSG.memo_get(,'HEADTAGS');

_value:=B_MSG.memo_txt(,0,'HEADTAGS');
_valid:="
   _txt:=cur_tab(1,1).memo_txt(,,'MEMO');
   exec('head_tags_valid','#b_msg',_txt,'MEMO')
";
_result:=exec('edit_memo','#edit',_value,'Tagi do nagłówka wiadomości'@,,,10,_valid);

{? type_of(_result)=type_of('')
|| B_MSG.memo_set(_result,'HEADTAGS');
   B_MSG.memo_put(,'HEADTAGS')
?};
''


\head_tags_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Redagowanie tagów dodawanych do nagłówka od strony parametrów
::   WE: [_a] - TEXT - wartość początkowa
::       [_b] - STRING - akronim parametru
::   WY: STRING - wartość parametru
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _value:=_a || _value:='' ?};
{? var_pres('_b')=type_of('') || _port:=_b || _port:='' ?};

_valid:="
   _txt:=cur_tab(1,1).memo_txt(,,'MEMO');
   exec('head_tags_valid','#b_msg',_txt,'MEMO')
";
_result:=exec('edit_memo','#edit',_value,'Wartość parametru %1'@[_port],,,10,_valid);
{? type_of(_result)=type_of('')
|| _result
|| _value
?}


\head_tags_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Walidacja tagów dodawanych do nagłówka
::   WE: _a - STRING - wartość
::       [_b] - STRING - opcjonalnie pole do któego wrócić
::   WY: '' lub akronim pola do którego wrócić
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_txt:=_a;

_fld:='';
{? var_pres('_b')=type_of('')
|| _fld:=_b
?};

_result:='';

{? 1+_txt='$'
|| {? exec('valid_formula','#field',1-_txt)=0
   || _result:=_fld
   ?}
|| {? _txt<>'' & _txt*'='=0
   || _msg:='Aby tagi zadziałały poprawnie muszą być w formacie: %1=%2.\n'
            'Każdy tag musi być w osobnej linii.\n\n'
            'Przykład:\n'
            '%3\n'
            '%4'@['nazwa'@,'wartość'@,'Sensitivity=private','Importance=high'];
      FUN.emsg(_msg);
      _result:=_fld
   ?}
?};
_result


\template_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Obsługa na F3 w polu B_MSG.TEMPLATE
::----------------------------------------------------------------------------------------------------------------------
exec('template_f3','#mailbox')


\template_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Obsługa po redagowaniu pola B_MSG.TEMPLATE
::----------------------------------------------------------------------------------------------------------------------
exec('template_ae','#mailbox')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 34c3833ba6cfa332503febe7e7dda3b55599c4ac3cf4cf902e924dbd8dad23a15747f36cd298c985d9fe0650555821b12dd3ca8b99513d2d07b84c0ae10744c55ee5e91e21c63e6ea1a80ed031313e2be8d6d433a2613785b6e359ba4d1ac14375efe34891c2048edda037f1ad70e544993396e90dc276cfe9e55272ccf36cea
