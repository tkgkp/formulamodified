:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_harm.fml [17.00]
:: Utworzony: 11.02.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa harmonogramu zdarzeń (tabela B_HARM)
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli B_HARM
::   WY: obj_new()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
exec('B_HARM','#buffer')


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kasuje podany rekord tabeli B_HARM (wykonywane w transakcji!!!)
::   WE: _a - B_HARM.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::  TAG: <PROCES><DEL>
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
B_HARM.cntx_psh(); B_HARM.clear();
{? B_HARM.seek(_ref)
|| {? exec('can_delete','#b_harm',_ref)>0
   || {? exec('clean','#b_harm',_ref)>0
      || {? B_HARM.del(,1)>0
         || _result:=1
         || undo();
            _result:=-4
         ?}
      || _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};
B_HARM.cntx_pop();
{? _result<0
|| undo()
?};

{? _mydo || end() ?};
_result


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy można usunąć B_HARM
::   WE: _a - B_HARM.ref()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_port:=_a;

_result:=1;
_can_continue:=1;

B_HARM.cntx_psh();
B_HARM.clear();
{? B_HARM.seek(_b_port)
|| _result:=(B_HARM.count()=0)
?};
B_HARM.cntx_pop();

_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli B_HARM
::   WE: _a - B_HARM.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiązania usunięte? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};

_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Selekcja harmonogramu
::  TAG: <PROCES><LISTA>
::----------------------------------------------------------------------------------------------------------------------
B_HARM.index('DATETIME');
B_HARM.prefix();
B_HARM.win_sel('WER');
B_HARM.select();
''


\brecord
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed rekord w oknie harmonogramu
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
{? B_HARM.B_PREL<>null()
|| BPMN.PREL_SYM:=B_HARM.B_PREL().SYMBOL+' ['+B_PREL.B_ELE().SYMBOL+']'
|? B_HARM.BI_PREL<>null()
|| BPMN.PREL_SYM:=B_HARM.BI_PREL().B_PREL().SYMBOL+' ['+B_PREL.B_ELE().SYMBOL+']'
|| BPMN.PREL_SYM:='< brak powiązania >'@
?};
~~


\display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla szczegóły pozycji harmonogramu
::       Kontekst pracy - rekord B_HARM
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
{? B_HARM.B_PREL<>null()
|| exec('display4prel','#b_timer',B_HARM.B_PREL)
|? B_HARM.BI_PREL<>null()
|| exec('display4prel','#b_timer',B_HARM.BI_PREL().B_PREL)
|| FUN.info('Brak powiązania.'@)
?};
~~


\run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uruchamia zdarzenie powiązane z pozycją harmonogramu
::       oraz ustala nowy termin (dla B_PREL) albo kasuje pozycję harmonogramu (dla BI_PREL)
::   WE: _a - B_HARM.ref()
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_b_harm:=_a;

B_HARM.cntx_psh();
B_HARM.prefix();
{? B_HARM.seek(_b_harm)
||
:: Nadszedł czas
   {? B_HARM.TM_STAMP<=B_HARM.tm_stamp()
   ||
::    Zdarzenie czasowe pośrednie (jest BI_PREL)
      {? B_HARM.BI_PREL<>null()
      || {? exec('proMan','#b_proman',B_HARM.BI_PREL,'',,'Proc',B_HARM.B_WORKER)
         || B_HARM.del()
         ?}

::    Zdarzenie czasowe początkowe (nie ma BI_PREL, jest tylko B_PREL)
      |? B_HARM.B_PREL<>null()
      ||
::       Jeżeli pozycja została wygenerowana z serii powtórzeń, to:
::       - dla B_HARM.SINGLE='T', jeżeli jest niezakończona instancja tego procesu, to pozycja zostaje usunięta
::       - po wzbudzeniu zdarzenia zostaje usunięta
         {? B_HARM.REPEATED='T'
         || _has_instances:=exec('has_instances','#b_proc',B_HARM.B_PROC);
            {? B_HARM.SINGLE='T' & _has_instances>0
            || B_HARM.del()
            |? exec('proMan','#b_proman',B_HARM.B_PREL,'',,'Proc',B_HARM.B_WORKER)
            || B_HARM.del()
            ?}

::       Dla B_HARM.SINGLE='T', nie przeznaczonych do wykonania 'tylko raz',
::       jeżeli jest niezakończona instancja tego procesu, to pozycja nie jest wykonywana,
::       a kolejne uruchomienie i powtórzenia generowane są normalnie
         || _can_run:=1;
            _date:=date();
            _has_instances:=exec('has_instances','#b_proc',B_HARM.B_PROC);
            {? B_HARM.SINGLE='T' & B_TIMER.TRYB<>'R' & _has_instances>0
            || B_HARM.DATE:=date(0,0,0);
               B_HARM.put();
               _can_run:=0
            ?};
            {? {? _can_run
               || exec('proMan','#b_proman',B_HARM.B_PREL,'',,'Proc',B_HARM.B_WORKER)
               || 1
               ?}
            || B_TIMER.index('B_PREL');
               B_TIMER.prefix(B_HARM.B_PREL);
               {? B_TIMER.first()
               ||
::                Tylko raz - po wykonaniu zerujemy pozycję harmonogramu (potem będzie skasowana)
                  {? B_TIMER.TRYB='R'
                  || B_HARM.DATE:=date(0,0,0);
                     B_HARM.put()
::                Codziennie
                  |? B_TIMER.TRYB='D'
                  || B_HARM.DATE:=_date+B_TIMER.REPLY;
                     B_HARM.TIME:=B_TIMER.TM;
                     B_HARM.put()
::                Cotygodniowo
                  |? B_TIMER.TRYB='T'
                  || B_HARM.DATE:=exec('near_day_of_week','#b_harm',_date+1,B_TIMER.T);
                     B_HARM.TIME:=B_TIMER.TM;
                     B_HARM.put()
::                Comiesięcznie
                  |? B_TIMER.TRYB='M'
                  || B_HARM.DATE:=exec('near_day_of_month','#b_harm',_date+1,B_TIMER.M,B_TIMER.D);
                     B_HARM.TIME:=B_TIMER.TM;
                     B_HARM.put()
                  ?};
::                Jeżeli jest włączone powtarzanie, to generowanie serii powtórzeń
                  {? B_TIMER.REPEAT='T'
                  || B_HARM.cntx_psh();
                     {? B_TIMER.DURATION<>0 & B_TIMER.INTERVAL<>0
                     || _duration:=B_TIMER.DURATION*exec('second','#tm_stamp');
                        _interval:=B_TIMER.INTERVAL*exec('second','#tm_stamp');
                        _start:=B_TIMER.tm_stamp();
                        _end:=_start+_duration;
                        _start+=_interval;
                        {!
                        |? B_HARM.REPEATED:='T';
                           B_HARM.DATE:=exec('tm_stamp2date','#tm_stamp',_start);
                           B_HARM.TIME:=exec('tm_stamp2time','#tm_stamp',_start);
                           B_HARM.add();
                           _start+=_interval;
                           _start<=_end
                        !}
                     ?};
                     B_HARM.cntx_pop()
                  ?};
::                Jeżeli termin wypada po dezaktywacji, to kasujemy pozycję harmonogramu
                  _tme:={? B_TIMER.EXPIRES='T' || exec('create','#tm_stamp',B_TIMER.DTE,B_TIMER.TME) || 0 ?};
                  {? _tme<>0 & B_HARM.TM_STAMP>_tme
                  || B_HARM.del()
                  |? B_HARM.DATE=date(0,0,0)
                  || B_HARM.del()
                  ?}
               || B_HARM.del()
               ?}
            ?}
         ?}
      ?}
   ?}
?};
B_HARM.cntx_pop();
~~


\trigger_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Trigger przed add
::  TAG: <PROCES><TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
B_HARM.TM_STAMP:=exec('create','#tm_stamp',B_HARM.DATE,B_HARM.TIME);
1


\trigger_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Trigger przed put
::  TAG: <PROCES><TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
B_HARM.TM_STAMP:=exec('create','#tm_stamp',B_HARM.DATE,B_HARM.TIME);
1


\add_b_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje pozycje harmonogramu dla procesu
::   WE: _a - B_PROC.ref()
::  TAG: <PROCES><ADD>
::----------------------------------------------------------------------------------------------------------------------
_b_proc:=_a;
B_PREL.cntx_psh();
B_PREL.index('PROCSTAR');
B_PREL.prefix(_b_proc,'T');
{? B_PREL.first()
|| {!
   |? exec('add_b_prel','#b_harm',B_PREL.ref());
      B_PREL.next()
   !}
?};
B_PREL.cntx_pop();
~~


\add_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje pozycję harmonogramu dla elementu procesu
::   WE: _a - B_PREL.ref()
::  TAG: <PROCES><ADD>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;
B_HARM.cntx_psh();
B_HARM.prefix();
B_TIMER.cntx_psh();
B_TIMER.index('B_PREL');
B_TIMER.prefix(B_PREL.ref());
{? B_TIMER.first()
|| _can_continue:=0;
   {? B_TIMER.TRYB<>'N' & B_TIMER.TRYB<>'S' & B_TIMER.TRYB<>'Q' & B_TIMER.TRYB<>'O' & B_TIMER.ON='T'
   || {? exec('create','#tm_stamp',B_TIMER.DT,B_TIMER.TM)<B_TIMER.tm_stamp()
      || {? B_TIMER.TM<time() || _start_date:=date()+1 || _start_date:=date() ?}
      || _start_date:=B_TIMER.DT
      ?};
      B_HARM.blank();
      B_HARM.B_PREL:=_b_prel;
      B_HARM.B_PROC:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_PROC",null());
      B_HARM.B_WORKER:=B_TIMER.B_WORKER;
      B_HARM.SINGLE:=B_TIMER.SINGLE;
::    Harmonogram 'jeden raz' albo 'codziennie'
      {? B_TIMER.TRYB='R' | B_TIMER.TRYB='D'
      || B_HARM.DATE:=_start_date;
         B_HARM.TIME:=B_TIMER.TM
::    Harmonogram 'cotygodniowo'
      |? B_TIMER.TRYB='T'
      || B_HARM.DATE:=exec('near_day_of_week','#b_harm',_start_date,B_TIMER.T);
         B_HARM.TIME:=B_TIMER.TM
::    Harmonogram 'comiesięcznie'
      |? B_TIMER.TRYB='M'
      || B_HARM.DATE:=exec('near_day_of_month','#b_harm',_start_date,B_TIMER.M,B_TIMER.D);
         B_HARM.TIME:=B_TIMER.TM
      ?};
      _can_continue:=B_HARM.add()
   ?};
:: Jeżeli dodana pozycja wypadnie poza terminem wygaśnięcia, to usuwamy
   _tm:={? B_TIMER.EXPIRES='T' || exec('create','#tm_stamp',B_TIMER.DTE,B_TIMER.TME) || 0 ?};
   {? _can_continue & _tm<>0 & B_HARM.TM_STAMP>_tm
   || B_HARM.del()
   ?}
?};
B_TIMER.cntx_pop();
B_HARM.cntx_pop();
~~


\add_bi_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje pozycję harmonogramu dla elementu instancji procesu
::   WE: _a - BI_PREL.ref()
::  TAG: <PROCES><ADD>
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;

B_HARM.cntx_psh();
B_HARM.prefix();
B_TIMER.cntx_psh();
B_TIMER.index('B_PREL');
B_TIMER.prefix(exec('FindAndGet','#table',BI_PREL,_bi_prel,,"B_PREL",null()));
{? B_TIMER.first()
|| _can_continue:=0;
   {? B_TIMER.TRYB<>'N' & B_TIMER.ON='T'
   || B_HARM.blank();
      B_HARM.BI_PREL:=_bi_prel;
      B_HARM.B_PREL:=B_HARM.BI_PREL().B_PREL;
      B_HARM.BI_PROC:=B_HARM.BI_PREL().BI_PROC;
      B_HARM.B_PROC:=B_HARM.BI_PROC().B_PROC;
      B_HARM.B_WORKER:=B_TIMER.B_WORKER;
      B_HARM.SINGLE:=B_TIMER.SINGLE;
      B_HARM.TM_STAMP:=exec('add_to_point','#interval',B_TIMER.tm_stamp(),B_TIMER.IVAL_DEF);
      B_HARM.DATE:=exec('tm_stamp2date','#tm_stamp',B_HARM.TM_STAMP);
      B_HARM.TIME:=exec('tm_stamp2time','#tm_stamp',B_HARM.TM_STAMP);
      B_HARM.add()
   ?}
?};
B_TIMER.cntx_pop();
B_HARM.cntx_pop();
~~


\del_b_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Usuwa pozycje harmonogramu dla procesu
::   WE: _a - B_PROC.ref()
::  TAG: <PROCES><DEL>
::----------------------------------------------------------------------------------------------------------------------
_b_proc:=_a;
B_PREL.cntx_psh();
B_PREL.index('PROCSTAR');
B_PREL.prefix(_b_proc,'T');
{? B_PREL.first()
|| {!
   |? exec('del_b_prel','#b_harm',B_PREL.ref());
      B_PREL.next()
   !}
?};
B_PREL.cntx_pop();
~~


\del_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Usuwa pozycje harmonogramu dla elementu procesu
::   WE: _a - B_PREL.ref()
::  TAG: <PROCES><DEL>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;
_can_continue:=1;
B_HARM.cntx_psh();
B_HARM.index('B_PREL');
B_HARM.prefix(_b_prel);
{? B_HARM.first()
|| {!
   |? _can_continue:=exec('delete','#b_harm',B_HARM.ref());
      B_HARM.first() & _can_continue
   !}
?};
B_HARM.cntx_pop();
_can_continue


\del_bi_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Usuwa pozycje harmonogramu dla instancji elementu procesu
::   WE: _a - BI_PREL.ref()
::  TAG: <PROCES><DEL>
::----------------------------------------------------------------------------------------------------------------------
_bi_prel:=_a;
_can_continue:=1;
B_HARM.cntx_psh();
B_HARM.index('BI_PREL');
B_HARM.prefix(_bi_prel);
{? B_HARM.first()
|| {!
   |? _can_continue:=exec('delete','#b_harm',B_HARM.ref());
      B_HARM.first() & _can_continue
   !}
?};
B_HARM.cntx_pop();
_can_continue


\near_day_of_week
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca datę najbliższą z wymienionych dni tygodnia w stosunku do podanej daty
::   WE: _a - data
::       _b - dni tygodnia (tekst, np. 'NTTNNNN' - wtorek, środa)
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_date:=_a;
_days_of_week:=exec('str2obj','#convert',_b);
{! _ii:=1..7
|! _result:=_date+_ii-1;
   {! _jj:=1..7 |! {? _result~4=_jj & _days_of_week[_jj]='T' || return(_result) ?} !}
!};
_result


\near_day_of_month
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca datę najbliższą z wymienionych dni w miesiącach w stosunku do podanej daty
::   WE: _a - data
::       _b - miesiące (tekst, np. 'NTNNNNNNNNTN' - luty, listopad)
::       _c - dni miesiąca (tekst, np. 'TNNNNNNNNTNNNNNNNNNNNNNNNNNNNNNT' - 1., 10. i ostatni)
::  TAG: <PROCES>
::----------------------------------------------------------------------------------------------------------------------
_date:=_a;
_months:=exec('str2obj','#convert',_b);
_days_of_month:=exec('str2obj','#convert',_c);
_last_day_of_month:=_days_of_month[32];
{! _ii:=1..400
|! _result:=_date+_ii-1;
   {! _jj:=1..12
   |! {! _kk:=1..31
      |! {? _result~2=_jj & _months[_jj]='T' & _result~3=_kk & _days_of_month[_kk]='T'
         || return(_result)
         ?}
      !};
      {? _last_day_of_month='T' & _result~2=_jj & _months[_jj]='T' & _result=date(_result~1,_result~2,0)
      || return(_result)
      ?}
   !}
!};
_result


\disp_harm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.42]
:: OPIS: Wyświetlenie harmonogramu dla określonego procesu i elementu
::  TAG: <PROCES><LISTA>
::----------------------------------------------------------------------------------------------------------------------
B_HARM.cntx_psh;
_proc:=params_get().env.SEL_PROC;
_elem:=params_get().env.B_PREL;
B_HARM.index('B_PROC');
B_HARM.prefix(_proc,_elem);
B_HARM.win_sel('WER');
B_HARM.select(,,,'G');
B_HARM.cntx_pop();
''


\proc4harm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Wyświetla proces dla pozycji harmonogramu
::       Kontekst wywołania: rekord tabeli B_HARM
::----------------------------------------------------------------------------------------------------------------------
{? B_HARM.BI_PROC<>null()
|| exec('select4biproc_alt','#b_design',B_HARM.BI_PROC,B_HARM.B_PREL,'bi_proc_todo')
|| exec('select4proc','#b_design',B_HARM.B_PROC,0,B_HARM.B_PREL)
?};
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 dd28da40bcc9fed5ec78d057b78e3f0cab888be985f4ca46fd16a2b55fb6c22ef7a00e2194c369a9ef0be6112c1cc9e84972ed283f46b02d971acbb7bd5cd32fd9326b542307257b9d77d537d043c129fb873255e4cb26c2db606fbb0925850b620c0cdea4f8e21e565211f35da3ec5e19673c82a4dfca384b70c0b7a1c06b94
