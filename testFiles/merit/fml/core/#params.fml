:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: #params.fml [17.00]
:: Utworzony: 17.12.2014
:: Autor: AK
::======================================================================================================================
:: Zawartość: Formuły obsługujące mechanizm uniwersalnych parametrów wykorzystywanych w różnych obszarach
::======================================================================================================================


\get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca wartość parametru o podanym numerze
::   WE:  _a  - INTEGER   - numer parametru którego wartość zwrócić
::       [_b] - INTEGER   - numer typu zwracanej wartości jaki spodziewamy się dostać np. wynik type_of(0). Wykorzystywane
::                          wyłącznie jeżeli parametru nie znaleziono w bazie (w awaryjnych przypadkach).
::       [_c] - USERS.ref - użytkownik którego wartość parametru zwrócić
::       [_d] - INTEGER - [0]/1 - czy wywołanie rekurencyjne
::       [_e] - STRING - T/[N] - czy dotyczy parametru wdrożeniowego
::   WY: ANY - oczekiwana wartość parametru lub domyślna wartość danego typu (pusta)
::
::  TAG: <PUBLICZNA><PARAMS_APL><POBIERANIE><TAB:FO_USR><TAB:FO_DEF>
::  OLD: \fo_wart/funkcje.fml
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_result:=~~;

_type:=~~;
{? var_pres('_b')=type_of(0)
|| _type:=_b
?};

_user:=null();
{? var_pres('_c')=type_of(USERS.ref())
|| _user:=_c
?};

_rec:=0;
{? var_pres('_d')=type_of(0)
|| _rec:=_d
?};

_wdr:='N';
{? var_pres('_e')=type_of('')
|| _wdr:=_e
?};

{? do_state()=2
||
:: Zerwana transakcja - zwracam pustą wartość żądanego typu lub falki
   {? type_of(_type)>0
   || _result:=exec('empty_value','#var',_type)
   ?};
   return(_result)
?};

FO_DOM.cntx_psh();

{? _user=null()
||
:: Jeśli użytkownik nie podany to zwracam parametr aplikacji
   FO_DEF.cntx_psh();
   FO_DEF.index('NR');
   FO_DEF.prefix('A',_wdr,_nr);
   {? FO_DEF.first()
   || _interface:=exec('interface','#params');
      _result:=_interface.get()
   ||
      FO_DEF.prefix('A','',_nr);
      {? FO_DEF.first()
      || _interface:=exec('interface','#params');
         _result:=_interface.get()
      ||
         {? _rec=0
         ||
::          Nie znaleziono parametru o tym numerze więc wykonuję inicjalizację i uruchamiam się ponownie
            {? cli_ver()<>'cgi' || exec('init','params') ?};
::          !!! REKURENCJA !!!
            _result:=exec('get','#params',_nr,_type,_user,1)
         ||
::          Nie znaleziono w bazie parametru o takim numerze, więc jeśli typ podany to zwracam
::          pustą wartość dla takiego typu
            {? cli_ver()<>'cgi'
            || FUN.wdrerror('Nie znaleziono parametru: %1\nNależy przenieść jego definicję i obsługę do pliku params.fml'@[$_nr])
            ?};
            {? type_of(_type)>0
            || _result:=exec('empty_value','#var',_type)
            ?}
         ?}
      ?}
   ?};
   FO_DEF.cntx_pop();
   ~~
||
:: Paremetry użytkownika
   FO_USR.cntx_psh();
   FO_USR.index('USERS');
   FO_USR.prefix(_user,_wdr,_nr);
   {? FO_USR.first()
   || _interface:=exec('interface','#params','U');
      _result:=_interface.get()
   ||
      FO_USR.prefix(_user,'',_nr);
      {? FO_USR.first()
      || _interface:=exec('interface','#params','U');
         _result:=_interface.get()
      ||
::       Nie znaleziono parametru użytkownika więc szukam czy jest w ogóle definicja tego parametru
         FO_DEF.cntx_psh();
         FO_DEF.index('NR');
         FO_DEF.prefix('U',_wdr,_nr);
         {? FO_DEF.first()
         || _interface:=exec('interface','#params');
            _result:=_interface.get()
         ||
            FO_DEF.prefix('U','',_nr);
            {? FO_DEF.first()
            || _interface:=exec('interface','#params');
               _result:=_interface.get()
            ||
               {? _rec=0
               ||
::                Nie znaleziono definicji parametru więc wykonuję inicjalizację
                  {? cli_ver()<>'cgi' || exec('init_usr','params') ?};
::                !!! REKURENCJA !!!
                  _result:=exec('get','#params',_nr,_type,_user,1)
               ||
::                Nie znaleziono w bazie parametru o takim numerze, więc jeśli typ podany to zwracam
::                pustą wartość dla takiego typu
                  {? cli_ver()<>'cgi'
                  || FUN.wdrerror('Nie znaleziono parametru: %1\nNależy przenieść jego definicję i obsługę do pliku params.fml'@[$_nr])
                  ?};
                  {? type_of(_type)>0
                  || _result:=exec('empty_value','#var',_type)
                  ?}
               ?}
            ?}
         ?};
         FO_DEF.cntx_pop()
      ?}
   ?};
   FO_USR.cntx_pop()
?};
FO_DOM.cntx_pop();
_result


\get_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Zwraca wartość parametru o podanym numerze
::   WE: _a   - INTEGER   - numer parametru którego wartość zwrócić
::       [_b] - INTEGER   - numer typu zwracanej wartości jaki spodziewamy się dostać np. wynik type_of(0)
::       [_c] - USERS.ref - użytkownik którego wartość parametru zwrócić
::   WY: ANY - oczekiwana wartość parametru lub domyślna wartość danego typu (pusta)
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_type:=~~;
{? var_pres('_b')=type_of(0)
|| _type:=_b
?};

_user:=null();
{? var_pres('_c')=type_of(USERS.ref())
|| _user:=_c
?};
exec('get','#params',_nr,_type,_user,0,'T')


\set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009+]
:: OPIS: Ustawia wartość parametru _b dla użytkownika _a
::   WE:  _a  - INTEGER - nr parametru
::        _b  - ANY - wartość parametru
::       [_c] - USERS.ref - użytkownik któremu ustawić wartość parametru
::       [_d] - USERSGRP.ref()
::       [_e] - STRING - 'T' - treść tylko z formuły użytkownika,
::                       'N' - najpierw z grupy jeśli zdefiniowano
::       [_f] - INTEGER - [0]/1 - czy wywołanie rekurencyjne
::       [_g] - STRING - T/[N] - czy dotyczy parametru wdrożeniowego
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \set_fo/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_value:=_b;

_user:=null();
{? var_pres('_c')=type_of(USERS.ref())
|| _user:=_c
?};
_usersgrp:={? var_pres('_d')=type_of(SYSLOG.ref()) || _d || null() ?};
_useronly:={? var_pres('_e')=type_of('')          || _e || ''     ?};
_rec:={? var_pres('_f')=type_of(0) || _f || 0 ?};

_wdr:='N';
{? var_pres('_g')=type_of('')
|| _wdr:=_g
?};

_result:=0;

{? _user=null
||
   FO_DEF.cntx_psh();
   FO_DEF.index('NR');
   FO_DEF.prefix('A',_wdr,_nr);
   {? FO_DEF.first()
   || _inteface:=exec('interface','#params');
      _result:=_inteface.save(_value);
      {? _result>0 & _useronly<>''
      || FO_DEF.USERONLY:=_useronly;
         FO_DEF.put()
      ?}
   ||
      {? _rec=0
      ||
::       Nie znaleziono parametru o tym numerze więc wykonuję inicjalizację i uruchamiam się ponownie
         exec('init','params');
::       !!! REKURENCJA !!!
         _result:=exec('set','#params',_nr,_value,_user,_usersgrp,_useronly,1,_wdr)
      ?}
   ?};
   FO_DEF.cntx_pop();
   FO_DEF.get()
||
   FO_USR.cntx_psh();
   FO_USR.index('USERS');
   FO_USR.prefix(_user,_wdr,_nr);
   {? FO_USR.first()
   || _inteface:=exec('interface','#params','U');
      _result:=_inteface.save(_value)
   ||
      {? _rec=0
      ||
::       Nie znaleziono parametru o tym numerze więc wykonuję inicjalizację i uruchamiam się ponownie
         exec('init','params');
::       !!! REKURENCJA !!!
         _result:=exec('set','#params',_nr,_value,_user,_usersgrp,_useronly,1,_wdr)
      ?}

   ?};
   FO_USR.cntx_pop();
   FO_USR.get()
?};
_result


\set_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Ustawia wartość parametru _b dla użytkownika _a
::   WE:  _a  - INTEGER - nr parametru
::        _b  - ANY - wartość parametru
::       [_c] - USERS.ref - użytkownik któremu ustawić wartość parametru
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \set_fo/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_value:=_b;
_user:=null();
{? var_pres('_c')=type_of(USERS.ref())
|| _user:=_c
?};
exec('set','#params',_nr,_value,_user,,,,'T')


\default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Przywraca wartość domyślną parametru _a dla użytkownika _b
::   WE:  _a  - INTEGER - nr parametru
::       [_b] - USERS.ref - użytkownik któremu ustawić wartość parametru
::       [_c] - INTEGER - [0]/1 - czy wywołanie rekurencyjne
::       [_d] - STRING - T/[N] - czy dotyczy parametru wdrożeniowego
::       [_e] - INTEGER -[0]/1 - czy wywołanie z dialogiem
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \set_fo/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;

_user:=null();
{? var_pres('_b')=type_of(USERS.ref())
|| _user:=_b
?};
_rec:={? var_pres('_d')=type_of(0) || _d || 0 ?};

_wdr:='N';
{? var_pres('_d')=type_of('')
|| _wdr:=_d
?};

_dialog:=0;
{? var_pres('_e')=type_of(0)
|| _dialog:=_e
?};

_result:=0;

{? _user=null
||
   FO_DEF.cntx_psh();
   FO_DEF.index('NR');
   FO_DEF.prefix('A',_wdr,_nr);
   {? FO_DEF.first()
   || _interface:=exec('interface','#params');
::    Tworzę nazwę formuły którą będę chciał uruchomić na przywrócenie wartości domyślnej
      _fml_name:='p'+$_interface.nr()+'_default';
      {? FO_DEF.WDR='T'
      || _fml_file:=exec('get','#params',100001,type_of(''));
         _fml_file:=gsub(_fml_file,'.fml','')
      || _fml_file:='params'
      ?};
::    Sprawdzam czy istnieje formuła w pliku
      {? exec('is_fun','#file',_fml_file,_fml_name)>0
      ||
::       Jest formuła więc przygotowuję się do jej wykonania
         _fml:=$('exec(\''+_fml_name+'\',\''+_fml_file+'\',_a,_b)');
         _result:=_fml(_interface,_dialog)
      ||
::       Nie ma formuły zdefiniowanej w pliku więc uruchamiam standardową obsługę - pobieram wartość
::       domyślną i ją zapisuję
         _default:=_interface.default();
         _result:=_interface.save(_default)
      ?}
   ||
      {? _rec=0
      ||
::       Nie znaleziono parametru o tym numerze więc wykonuję inicjalizację i uruchamiam się ponownie
         exec('init','params');
::       !!! REKURENCJA !!!
         _result:=exec('default','#params',_nr,_user,1,_wdr)
      ?}
   ?};
   FO_DEF.cntx_pop();
   FO_DEF.get()
||
   FO_USR.cntx_psh();
   FO_USR.index('USERS');
   FO_USR.prefix(_user,_wdr,_nr);
   {? FO_USR.first()
   ||
      _interface:=exec('interface','#params','U');
::    Tworzę nazwę formuły którą będę chciał uruchomić na przywrócenie wartości domyślnej
      _fml_name:='p'+$_interface.nr()+'_default';
      {? FO_USR.WDR='T'
      || _fml_file:=exec('get','#params',100001,type_of(''));
         _fml_file:=gsub(_fml_file,'.fml','')
      || _fml_file:='params'
      ?};
::    Sprawdzam czy istnieje formuła w pliku
      {? exec('is_fun','#file',_fml_file,_fml_name)>0
      ||
::       Jest formuła więc przygotowuję się do jej wykonania
         _fml:=$('exec(\''+_fml_name+'\',\''+_fml_file+'\',_a)');
         _result:=_fml(_interface)
      ||
::       Nie ma formuły zdefiniowanej w pliku więc uruchamiam standardową obsługę - pobieram wartość
::       domyślną i ją zapisuję
         _default:=_interface.default();
         _result:=_interface.save(_default)
      ?}
   ||
      {? _rec=0
      ||
::       Nie znaleziono parametru o tym numerze więc wykonuję inicjalizację i uruchamiam się ponownie
         exec('init','params');
::       !!! REKURENCJA !!!
         _result:=exec('default','#params',_nr,_user,1,_wdr)
      ?}
   ?};
   FO_USR.cntx_pop();
   FO_USR.get()
?};
_result


\default_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Przywraca wartość domyślną parametru wdrożeniowego _a dla użytkownika _b
::   WE: _a  - INTEGER - nr parametru
::       [_b] - USERS.ref - użytkownik któremu ustawić wartość parametru
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_user:=null();
{? var_pres('_b')=type_of(USERS.ref())
|| _user:=_b
?};
_result:=exec('default','#params',_nr,_user,,'T');
~~


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje lub aktualizuje uniwersalny parametr aplikacji
::   WE:  _a  - INTEGER - numer parametru
::        _b  - STRING  - nazwa parametru
::        _c  - ANY     - wartość domyślna parametru
::        _d  - STRING  - nazwa zakładki na której pojawia się parametr
::       [_e] - INTEGER - [0]/1 - czy umieszczać wartość domyślną w polu typu SYS_MEMO
::       [_f] - STRING  - rodzaj parametru: 'A' - aplikacji, 'U' - użytkownika
::       [_g] - STRING  - T/[N] - tylko użytkownika - określa zachowanie funkcji get:
::                                     'T' - wartość tylko dla użytkownika
::                                     'N' - najpierw z grupy jeśli wartość dla grupy zdefiniowana
::       [_h] - STRING  - T/[N] - czy parametr wdrożeniowy
::       [_i] - STRING  - wartość domyślna parametru w formie STRING (żeby nie robić ponownie konwersji)
::       [_j] - FORMULA - wartość domyślna parametru w formie FORMULA (żeby nie robić ponownie konwersji)
::       [_k] - obj_new - interfejs aplikacyjny do obsługi parametrów
::   WY: FO_DEF.ref - ref dodanego/zaktualizowanego rekordu lub null() jeśli nie udało się dodać/zaktualizować
::
::  TAG: <PUBLICZNA><PARAMS_APL><ADD><PUT><TAB:FO_DEF>
::  OLD: \add_fo/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_name:=_b;
_default:=_c;
_tab:=_d;

_sysmemo:=0;
{? var_pres('_e')=type_of(0)
|| _sysmemo:=_e
?};

_kind:='A';
{? var_pres('_f')=type_of('')
|| _kind:=_f
?};
_useronly:='N';
{? var_pres('_g')=type_of('')
|| _useronly:=_g
?};

_wdr:='N';
{? var_pres('_h')=type_of('')
|| _wdr:=_h
?};

_default_disp:='';
{? var_pres('_i')=type_of('')
|| _default_disp:=_i
?};

_default_fml:="";
{? var_pres('_j')=type_of("")
|| _default_fml:=_j
?};

_interface_a:=~~;
{? var_pres('_k')>100
|| _interface_a:=_k
?};

{? HELP.G='W'
|| _wdr:='T';
   _tab:=' Wdrożeniowe'
?};

_can_continue:=1;
_result:=null();

_tab_acr:=~~;
{? type_of(_default)=type_of(SYSLOG.ref())
|| {? _default<>null()
   || _table:=ref_tab(_default);
      _tab_acr:=exec('tab_acr','#table',_table);
::    Sprawdzam czy tabela zawiera pole typu IDADD
      {? exec('has_idadd','#table',_table)=0
      || _can_continue:=0;
         _msg0:='';
         _msg1:='Parametr: \'%1\' przechowuje wskazanie na rekord tabeli %2,'@[$_nr,_tab_acr];
         _msg2:='ale tabela ta nie zawiera pola typu IDADD.'@;
         _msg3:='Aby przechowywać wartości typu złączeniowego w parametrach, należy dodać do tabeli pole typu IDADD.'@;
         _msg_glued:=exec('form','#string','L',_msg1,_msg2,_msg0,_msg3);
         FUN.info(_msg_glued)
      ?}
   || _can_continue:=0;
      _msg0:='';
      _msg1:='Wartość domyślna parametru: \'%1\' nie może być wartością null().'@[$_nr];
      _msg2:='Jeżeli parametr ma przechowywać wskazanie na rekord, to jego wartość domyślna'@;
      _msg3:='nie może być pusta.'@;
      _msg_glued:=exec('form','#string','L',_msg1,_msg0,_msg2,_msg3);
      FUN.info(_msg_glued)
   ?}
?};

:: PARAMETRY które obsługiwały SYS_MEMO
:: 'DSZi'

{? _can_continue>0
||
   FO_DEF.cntx_psh();
   FO_DEF.index('NR');
   FO_DEF.prefix(_kind,_wdr,_nr);

   _type:=type_of(_default);
:: Podaną wartość domyślną konwertuję na postać formułową którą zapiszę w bazie
   {? _default_fml<>""
   || _val_fml:=_default_fml
   || _val_fml:=exec('val2fml','#convert',_default,_type,_tab_acr)
   ?};

:: Podaną wartość domyślną konwertuję na postać czytelną
   {? _default_disp<>''
   || _val_display:=_default_disp
   || _val_display:=exec('val2display','#convert',_default)
   ?};

   {? FO_DEF.first()
   || {? type_of(_interface_a)>0
      || _interface_a.cntx()
      || _interface_a:=exec('interface','#params')
      ?};
      _val_default:=_interface_a.default();
::    Jest już parametr o takim numerze - aktualizuję definicję
      {? FO_DEF.NAME<>_name |
         FO_DEF.TAB<>_tab |
         FO_DEF.DEF_FML<>_val_fml |
         FO_DEF.USERONLY<>_useronly |
         FO_DEF.KIND<>_kind |
         FO_DEF.TYPE<>_type |
         (type_of(_val_default)=type_of(_default) & _val_default<>_default) | type_of(_val_default)<>type_of(_default) |
         (_sysmemo>0 & FO_DEF.DEF_MEMO=null()) |
         (_sysmemo=0 & FO_DEF.DEF_MEMO<>null())
      ||
         FO_DEF.NAME:=_name;
         FO_DEF.TAB:=_tab;
         FO_DEF.KIND:=_kind;
         FO_DEF.USERONLY:=_useronly;
         FO_DEF.TYPE:=_type;
         {? (type_of(_val_default)=type_of(_default) & _val_default<>_default) | type_of(_val_default)<>type_of(_default)
         || FO_DEF.VALUE:=_val_display;
            FO_DEF.VAL_FML:=_val_fml;
            FO_DEF.DEF_FML:=_val_fml
         ?};
         FO_DEF.WDR:=_wdr;
         _can_continue:=FO_DEF.put();
         {? _can_continue>0
         || _result:=FO_DEF.ref()
         ?};
         {? _can_continue>0 & _sysmemo>0 &
            ((type_of(_val_default)=type_of(_default) & _val_default<>_default) | type_of(_val_default)<>type_of(_default)) |
            (_sysmemo>0 & FO_DEF.DEF_MEMO=null())
         ||
::          Aktualizacja pola notatnikowego
            {? (type_of(_val_default)=type_of(_default) & _val_default<>_default) | type_of(_val_default)<>type_of(_default)
            || FO_DEF.memo_set(_val_fml,'VAL_MEMO')
            || FO_DEF.memo_set(FO_DEF.VAL_FML,'VAL_MEMO')
            ?};
            _can_continue:=FO_DEF.memo_put(,'VAL_MEMO');
            FO_DEF.memo_set(_val_fml,'DEF_MEMO');
            _can_continue:=FO_DEF.memo_put(,'DEF_MEMO')
         ?};
         {? _can_continue>0 & _sysmemo=0 & FO_DEF.DEF_MEMO<>null()
         ||
::          Usuwanie wartości sysmemo, jeżeli wg definicji już niepotrzebna
            FO_DEF.memo_set('','VAL_MEMO');
            _can_continue:=FO_DEF.memo_put(,'VAL_MEMO');
            FO_DEF.memo_set('','DEF_MEMO');
            _can_continue:=FO_DEF.memo_put(,'DEF_MEMO')
         ?};
         {? _kind='U'
         ||
::          Oznaczam że parametr użytkownika się zmienił
            {? var_pres('__changed_fo_usr')>0
            || __changed_fo_usr:=1
            ?}
         ?}
      || _result:=FO_DEF.ref()
      ?}
   ||
      FO_DEF.prefix(_kind,'',_nr);
      {? FO_DEF.first()=0
      || FO_DEF.clear();
::       Dodajemy nowy parametr
         FO_DEF.blank();
         FO_DEF.NR:=_nr;
         FO_DEF.NAME:=_name;
         FO_DEF.KIND:=_kind;
         FO_DEF.TAB:=_tab;
         FO_DEF.KIND:=_kind;
         FO_DEF.USERONLY:=_useronly;
         FO_DEF.TYPE:=_type;
         FO_DEF.VALUE:=_val_display;
         FO_DEF.DEF_FML:=_val_fml;
         FO_DEF.VAL_FML:=_val_fml;
         FO_DEF.WDR:=_wdr;
         _can_continue:=FO_DEF.add();
         {? _can_continue>0
         || _result:=FO_DEF.ref()
         ?};
         {? _can_continue>0 & _sysmemo>0
         ||
::          Ustalenie wartości pola notatnikowego
            FO_DEF.memo_set(_val_fml,'VAL_MEMO');
            _can_continue:=FO_DEF.memo_put(,'VAL_MEMO');
            FO_DEF.memo_set(_val_fml,'DEF_MEMO');
            _can_continue:=FO_DEF.memo_put(,'DEF_MEMO')
         ?}
      ||
::       Zabezpiecznie na wypadek błędnych danych
::       Jeżeli znajdzie się rekord bez wypełnionego pola WDR
::       to naprawiam mu to pole wg tego co przekazano w zmiennej _wdr
         FO_DEF.clear();
         FO_DEF.WDR:=_wdr;
         _can_continue:=FO_DEF.put();
         {? _can_continue>0
         || _result:=FO_DEF.ref()
         ?}
      ?}
   ?};
   FO_DEF.cntx_pop();
   FO_DEF.get()
?};
_result


\add_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodaje lub aktualizuje wartość uniwersalnego parametru aplikacji
::   WE:  _a  - INTEGER        - numer parametru
::        _b  - STRING         - nazwa parametru
::        _c  - ANY            - wartość parametru
::        _d  - STRING         - nazwa zakładki na której pojawia się parametr
::       [_e] - INTEGER        - [0]/1 - czy umieszczać wartość w polu typu SYS_MEMO
::       [_f] - USERS.ref()    - użytkownik dla którego dodać wartość
::       [_g] - USERSGRP.ref() -  grupa użytkowników dla której założyć wartość parametru - domyślnie null()
::       [_h] - STRING         - T/[N] - tylko użytkownika - określa zachowanie funkcji get:
::                                        'T' - wartość tylko dla użytkownika
::                                        'N' - najpierw z grupy jeśli wartość dla grupy zdefiniowana
::       [_i] - STRING         - T/[N] - czy parametr wdrożeniowy
::       [_j] - obj_new        - interfejs do odczytania aktualnej wartości aplikacyjnej
::       [_k] - obj_new        - interfejs do odczytania aktualnej wartości użytkownika
::   WY: FO_DER.ref() - ref definicji jeśli parametr _f był nullem
::       FO_USR.ref() - ref dodanego/zaktualizowanego rekordu z wartością parametru lub null() w przypadku niepowodzenia
::
::  TAG: <PUBLICZNA><PARAMS_APL><PARAMS_USR><ADD><PUT><TAB:FO_USR>
::  OLD: \add_fo/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_name:=_b;
_value:=_c;
_tab:=_d;

_sysmemo:=0;
{? var_pres('_e')=type_of(0)
|| _sysmemo:=_e
?};

_user:=null();
{? var_pres('_f')=type_of(USERS.ref())
|| _user:=_f
?};

_usersgrp:=null();
{? var_pres('_g')=type_of(USERSGRP.ref())
|| _usersgrp:=_g
?};
_useronly:='N';
{? var_pres('_h')=type_of('')
|| _useronly:=_h
?};
_wdr:='N';
{? var_pres('_i')=type_of('')
|| _wdr:=_i
?};

_interface_a:=~~;
{? var_pres('_j')>100
|| _interface_a:=_j
?};

_interface_u:=~~;
{? var_pres('_k')>100
|| _interface_u:=_k
?};

_can_continue:=1;
_result:=null();

FO_DEF.cntx_psh(); FO_DEF.clear();
FO_USR.cntx_psh();

:: Podaną wartość konwertuję na postać formułową którą zapiszę w bazie
_val_fml:=exec('val2fml','#convert',_value,type_of(_value));

:: Podaną wartość konwertuję na postać czytelną dla użytkownika
_val_display:=exec('val2display','#convert',_value);

:: Najpierw dodajemy lub aktualizujemy definicję
_kind:='U';
{? HELP.G='Z'
|| _wdr:='T';
   _tab:=' Wdrożeniowe'
?};
__changed_fo_usr:=0;
_fo_def:=exec('add','#params',_nr,_name,_value,_tab,_sysmemo,_kind,_useronly,_wdr,_val_display,_val_fml,_interface_a);
{? _fo_def<>null()
|| {? FO_DEF.seek(_fo_def)
   || _result:=FO_DEF.ref();

      {? _user<>null | _usersgrp<>null
      ||
         FO_USR.index('FO_DEF');
         {? _usersgrp<>null()
         || FO_USR.prefix(FO_DEF.ref(),_usersgrp,null())
         || FO_USR.prefix(FO_DEF.ref(),null(),_user)
         ?};

         {? FO_USR.first()
         ||
            {? type_of(_interface_u)>0
            || _interface_u.cntx()
            || _interface_u:=exec('interface','#params')
            ?};
            _val_old:=_interface_u.get();
            {? type_of(_val_old)<>type_of(_value)
            || FO_USR.VALUE:=_val_display;
               FO_USR.VAL_FML:=_val_fml
            ?};
            FO_USR.USERS:=_user;
            FO_USR.USERSGRP:=_usersgrp;
            _can_continue:=FO_USR.put();
            {? _can_continue>0
            || _result:=FO_USR.ref()
            ?};

            {? _can_continue>0 & _sysmemo>0
            ||
::             Aktualizacja pola notatnikowego
               {? type_of(_val_old)<>type_of(_value)
               || FO_USR.memo_set(_val_fml,'VAL_MEMO')
               || FO_USR.memo_set(FO_USR.VAL_FML,'VAL_MEMO')
               ?};
               _can_continue:=FO_USR.memo_put(,'VAL_MEMO')
            ?};
            {? _can_continue>0 & _sysmemo=0
            ||
::             Usuwanie wartości sysmemo, jeżeli wg definicji już niepotrzebna
               FO_USR.memo_set('','VAL_MEMO');
               _can_continue:=FO_USR.memo_put(,'VAL_MEMO')
            ?}
         ||
            FO_USR.blank();
            FO_USR.FO_DEF:=FO_DEF.ref();
            FO_USR.NR:=FO_DEF.NR;
            FO_USR.WDR:=FO_DEF.WDR;
            FO_USR.VALUE:=_val_display;
            FO_USR.VAL_FML:=_val_fml;
            FO_USR.USERSGRP:=_usersgrp;
            FO_USR.USERS:=_user;
            _can_continue:=FO_USR.add();
            {? _can_continue>0
            || _result:=FO_USR.ref()
            ?};
            {? _can_continue>0 & _sysmemo>0
            ||
::             Ustalenie wartości pola notatnikowego
               FO_USR.memo_set(_val_fml,'VAL_MEMO');
               _can_continue:=FO_USR.memo_put(,'VAL_MEMO')
            ?}
         ?}
      || {? __changed_fo_usr>0
         ||
::          Jeżeli definicja parametru się zmieniła to trzeba zaktualizować rekordy FO_USR dla wszystkich użytkowników
::          danego parametru
            _interface_a2:=exec('interface','#params','A');
            _interface_a2.cntx();

            _interface_u2:=exec('interface','#params','U');
            FO_USR.cntx_psh();
            FO_USR.index('FO_DEF');
            FO_USR.prefix(FO_DEF.ref());
            {? FO_USR.first()
            || {!
               |?
                  _interface_u2.cntx();
                  _sysmemo:=0;
                  {? FO_DEF.VAL_MEMO<>null()
                  || _sysmemo:=1
                  ?};
                  _ref:=exec('add_user','#params'  ,FO_DEF.NR
                                                   ,FO_DEF.NAME
                                                   ,_interface_a2.get()
                                                   ,FO_DEF.TAB
                                                   ,_sysmemo
                                                   ,FO_USR.USERS
                                                   ,
                                                   ,
                                                   ,FO_DEF.WDR
                                                   ,_interface_a2
                                                   ,_interface_u2);
                  FO_USR.next()
               !}
            ?};
            FO_USR.cntx_pop()
         ?}
      ?}
   ?}
?};
FO_USR.cntx_pop();
FO_DEF.cntx_pop();
FO_DEF.get();
FO_USR.get();
_result


\bind
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Przyporządkowuje parametr do dziedziny produktowej
::   WE: _a - FO_DEF.ref() lub FO_USR.ref - parametr który przyporządkować
::       _b - STRING - symbol dziedziny produktowej do której przypiąć parametr np 'ZWS'
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA><PARAMS_APL><ADD><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_domain:=_b;

_result:=0;

{? _ref<>null()
||
   {? ref_tab(_ref)=FO_DEF
   ||
      _dom_ref:=exec('domain_ref','#b_domain',_domain);
      {? _dom_ref<>null()
      ||
         FO_DOM.cntx_psh();
         FO_DOM.index('FO_DEF');
         FO_DOM.prefix(_ref,_dom_ref);
         {? FO_DOM.size()=0
         || FO_DOM.blank();
            FO_DOM.FO_DEF:=_ref;
            FO_DOM.B_DOMAIN:=_dom_ref;
            _result:=FO_DOM.add()
         ?};
         FO_DOM.cntx_pop()
      ?}
   |? ref_tab(_ref)=FO_USR
   ||
      FO_USR.cntx_psh(); FO_USR.clear();
      {? FO_USR.seek(_ref)
      ||
::       !!! REKURENCJA !!!
         _result:=exec('bind','#params',FO_USR.FO_DEF,_domain)
      ?};
      FO_USR.cntx_pop()
   ?}
?};
_result


\unbind
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuwa przyporządkowanie podanego parametru do wszystkich obszarów
::   WE: [_a] - FO_DEF.ref() - parametr któremu usunąć przyporządkowanie lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA><PARAMS_APL><DEL><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_can_continue:=1;
_result:=0;

_result:=0;
_can_continue:=1;

FO_DEF.cntx_psh();
{? _ref<>null()
|| FO_DEF.clear();
   {? FO_DEF.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _mydo:=do_state()=0;
   {? _mydo>0
   || do()
   ?};
   FO_DOM.cntx_psh();
   FO_DOM.index('FO_DEF');
   FO_DOM.prefix(FO_DEF.ref());
   {? FO_DOM.first()
   || {!
      |? _can_continue:=exec('delete_fo_dom','#params',FO_DOM.ref());
         FO_DOM.first() & _can_continue>0
      !}
   ?};
   FO_DOM.cntx_pop();
   {? _can_continue>0
   || _result:=1
   || undo()
   ?};
   {? _mydo>0
   || end()
   ?}
?};
FO_DEF.cntx_pop();
_result


\unbind_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuwa przyporządkowanie wszystkich parametrów do wszystkich obszarów
::   WE: _a - STRING - rodzaj parametrów dla których usunąć powiązania: 'A' - aplikacyjne
::                                                                      'U' - użytkowników
::       _b - STRING - T/[N] - czy dotyczy parametrów wdrożeniowych
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA><PARAMS_APL><DEL><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
_kind:=_a;
_wdr:=_b;

_can_continue:=1;
_result:=0;

FO_DEF.cntx_psh();
FO_DEF.index('NR');
FO_DEF.prefix(_kind,_wdr);
{? FO_DEF.first()
|| _mydo:=do_state()=0;
   {? _mydo>0
   || do()
   ?};
   {!
   |? _can_continue:=exec('unbind','#params');
      FO_DEF.next() & _can_continue>0
   !};
   {? _can_continue>0
   || _result:=1
   || undo()
   ?};
   {? _mydo>0
   || end()
   ?}
?};
FO_DEF.cntx_pop();
_result


\delete_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuwa wszystkie zdefiniowane parametry, ich wartości użytkowników, powiązania z obszarami
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA><PARAMS_APL><DEL><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------

_result:=0;
_can_continue:=1;

FO_DEF.cntx_psh();
FO_DEF.index('NR');
FO_DEF.clear();
_mydo:=do_state()=0;
{? _mydo>0
|| do()
?};
{? FO_DEF.first()
|| {!
   |? _can_continue:=exec('delete_fo_def','#params',FO_DEF.ref());
      FO_DEF.first() & _can_continue>0
   !}
?};
{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo>0
|| end()
?};
FO_DEF.cntx_pop();
_result


\delete_fo_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje podany rekord tabeli FO_DEF (wykonywane w transakcji!!!)
::   WE: _a - FO_DEF.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><PARAMS_APL><DEL><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
FO_DEF.cntx_psh(); FO_DEF.clear();
{? FO_DEF.seek(_ref)
|| {? exec('clean_fo_def','#params',_ref)>0
   || {? FO_DEF.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

FO_DEF.cntx_pop();
{? _mydo || end() ?};
_result


\clean_fo_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli FO_DEF
::   WE: _a - FO_DEF.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN><PARAMS_APL><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---
FO_DEF.cntx_psh(); FO_DEF.clear();
{? FO_DEF.seek(_ref)
||
:: 1. Powiązania z obszarami
   FO_DOM.cntx_psh();
   FO_DOM.index('FO_DEF');
   FO_DOM.prefix(FO_DEF.ref());
   {? FO_DOM.first()
   || {!
      |? _can_continue:=exec('delete_fo_dom','#params',FO_DOM.ref());
         FO_DOM.first() & _can_continue>0
      !}
   ?};
   FO_DOM.cntx_pop();

:: 2. Wartości użytkowników
   FO_USR.cntx_psh();
   FO_USR.index('FO_DEF');
   FO_USR.prefix(FO_DEF.ref());
   {? FO_USR.first()
   || {!
      |? _can_continue:=exec('delete_fo_usr','#params',FO_USR.ref());
         FO_USR.first() & _can_continue>0
      !}
   ?};
   FO_USR.cntx_pop()
?};
FO_DEF.cntx_pop();

:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};
_result


\delete_fo_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje podany rekord tabeli FO_DOM (wykonywane w transakcji!!!)
::   WE: _a - FO_DOM.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><DEL><PARAMS_APL><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
FO_DOM.cntx_psh(); FO_DOM.clear();
{? FO_DOM.seek(_ref)
|| {? exec('clean_fo_dom','#params',_ref)>0
   || {? FO_DOM.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

FO_DOM.cntx_pop();
{? _mydo || end() ?};
_result


\clean_fo_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli FO_DOM
::   WE: _a - FO_DOM.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN><PARAMS_APL><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\delete_fo_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje podany rekord tabeli FO_USR (wykonywane w transakcji!!!)
::   WE: _a - FO_USR.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><DEL><PARAMS_APL><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;
:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
FO_USR.cntx_psh(); FO_USR.clear();
{? FO_USR.seek(_ref)
|| {? exec('clean_fo_usr','#params',_ref)>0
   || {? FO_USR.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

FO_USR.cntx_pop();
{? _mydo || end() ?};
_result


\clean_fo_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli FO_USR
::   WE: _a - FO_USR.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN><PARAMS_APL><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\select_domain
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów aplikacji w podziale na obszary (parametry nie przypisane do użytkowników)
::   WE: [_a] - STRING - obszar dla którego wyświetlić, jeśli nie podane to wyświetla wszystkie
::  TAG: <PUBLICZNA><PARAMS_APL><WERTOWANIE>
::  OLD: \sl_form/firma.fml
::----------------------------------------------------------------------------------------------------------------------
_dom_sym:='';
{? var_pres('_a')=type_of('')
|| _dom_sym:=_a
?};
_dom_ref:=null();

_it:=1;
{!
|?
   BEER.NAWIGTEN:=0;
   {? var_pres('_tabs')>100
   || obj_del(_tabs)
   ?};
   _tabs:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
      'TAB','STRING[50]','Nazwa pola 1'
   );
:: Najpierw zbieram jakie zakładki trzeba dodać do okna
   FO_DEF.cntx_psh();
   FO_DOM.cntx_psh();
   FO_DOM.index('B_DOMAIN');
   {? _dom_sym<>''
   || _dom_ref:=exec('domain_ref','#b_domain',_dom_sym);
      FO_DOM.prefix('A',_dom_ref)
   || FO_DOM.prefix('A')
   ?};

   _tab_empty:='Pozostałe';

   {? FO_DOM.first()
   || {!
      |? {? FO_DOM.FO_DEF().TAB<>''
         ||
            _tabs.prefix(FO_DOM.FO_DEF().TAB);
            {? _tabs.size()=0
            || _tabs.blank();
               _tabs.TAB:=FO_DOM.FO_DEF().TAB;
               _tabs.add()
            ?}
         || _tabs.prefix(_tab_empty);
            {? _tabs.size()=0
            || _tabs.blank();
               _tabs.TAB:=_tab_empty;
               _tabs.add()
            ?}
         ?};
         FO_DOM.next()
      !}
   ?};

:: Tworzymy okno grupowe
   _title:='Uniwersalne parametry aplikacyjne';
   _grp:=FO_DOM.grp_make(_title,,'#fodomselect');

   params_set('dom_ref',_dom_ref);

:: Dodajemy kolejno okienka na zakładki
   _tabs.clear();

   _multitab:=1;
   {? _tabs.size()=1 & _tabs.first() & _tabs.TAB=_tab_empty
   ||
::    Jeśli jest tylko jedna zakładka o nazwie 'Pozostałe' to tak naprawdę oznacza że nie
::    ma żadnych zakładek i nie opłaca się robic okna z zakładkami
      _multitab:=0
   ?};

   {? _tabs.first() & _multitab>0
   ||
::    Dodaję zakładki do okna, które występują
      {!
      |?
         {? _tabs.TAB=_tab_empty
         ||
::          Zakładka Pozostałe - prefiksujemy parametry pustą zakładką
            _before:='
               _dom_ref:=params_get().dom_ref;
               FO_DOM.index(\'TAB\');
               {? _dom_ref<>null()
               || FO_DOM.prefix(\'A\',\'\',_dom_ref)
               || FO_DOM.prefix(\'A\',\'\')
               ?};
               FO_DOM.first();
               ~~
            '
         ||
::          Zakładka normalna - prefiksujemy parametry nazwą zakładki
            _before:='
               _dom_ref:=params_get().dom_ref;
               FO_DOM.index(\'TAB\');
               {? _dom_ref<>null()
               || FO_DOM.prefix(\'A\',\''+_tabs.TAB+'\',_dom_ref)
               || FO_DOM.prefix(\'A\',\''+_tabs.TAB+'\')
               ?};
               FO_DOM.first();
               ~~
            '
         ?};
         FO_DOM.grp_sel(_grp,,'WER',_tabs.TAB,"exec('after_rfr_dom','#params')",,,,$_before,,,,'maximized');
         _tabs.next()
      !}
   ||
::    Brak zakładek - dodaję jedno okno ze wszystkimi parametrami
      _before:='
         _dom_ref:=params_get().dom_ref;
         FO_DOM.index(\'B_DOMAIN\');
         {? _dom_ref<>null()
         || FO_DOM.prefix(\'A\',_dom_ref)
         || FO_DOM.prefix(\'A\')
         ?};
         FO_DOM.first();
         ~~
      ';
      FO_DOM.grp_sel(_grp,,'WER',_tabs.TAB,"exec('after_rfr_dom','#params')",,,,$_before,,,,'maximized')
   ?};
   FO_DOM.win_sel(_grp);
   _warn:=1;
   {? _it=1
   || _warn:=exec('warning','#params')
   ?};
   {? _warn>0
   || FO_DOM.select()
   ?};
   _it+=1;
   FO_DOM.cntx_pop();
   FO_DEF.cntx_pop();
   BEER.NAWIGTEN
!};
~~


\select_domain_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów użytkownika w podziale na obszary
::   WE: [_a] - STRING - obszar dla którego wyświetlić, jeśli nie podane to wyświetla wszystkie
::  TAG: <PUBLICZNA><PARAMS_APL><WERTOWANIE>
::  OLD: \sl_user/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_dom_sym:='';
{? var_pres('_a')=type_of('')
|| _dom_sym:=_a
?};
_dom_ref:=null();

_it:=1;
{!
|?
   BEER.NAWIGTEN:=0;
   {? var_pres('_tabs')>100
   || obj_del(_tabs)
   ?};
   _tabs:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
      'TAB','STRING[50]','Nazwa pola 1'
   );
:: Najpierw zbieram jakie zakładki trzeba dodać do okna
   FO_DEF.cntx_psh();
   FO_DOM.cntx_psh();
   FO_DOM.index('B_DOMAIN');
   {? _dom_sym<>''
   || _dom_ref:=exec('domain_ref','#b_domain',_dom_sym);
      FO_DOM.prefix('U',_dom_ref)
   || FO_DOM.prefix('U')
   ?};

   _tab_empty:='Pozostałe';

   {? FO_DOM.first()
   || {!
      |? {? FO_DOM.FO_DEF().TAB<>''
         ||
            _tabs.prefix(FO_DOM.FO_DEF().TAB);
            {? _tabs.size()=0
            || _tabs.blank();
               _tabs.TAB:=FO_DOM.FO_DEF().TAB;
               _tabs.add()
            ?}
         || _tabs.prefix(_tab_empty);
            {? _tabs.size()=0
            || _tabs.blank();
               _tabs.TAB:=_tab_empty;
               _tabs.add()
            ?}
         ?};
         FO_DOM.next()
      !}
   ?};

:: Tworzymy okno grupowe
   _title:='Uniwersalne parametry użytkowników'@;
   _grp:=FO_DOM.grp_make(_title,,'#fousrdomselect');

   {? var_pres('_params_win')>100
   || obj_del(_params_win)
   ?};
   _params_win:=obj_new(
      'dom_ref',
      'tab'
   );
   _params_win.dom_ref:=_dom_ref;
   _params_win.tab:='';

   params_set('params_win',_params_win);

:: Dodajemy kolejno okienka na zakładki
   _tabs.clear();

   _multitab:=1;
   {? _tabs.size()=1 & _tabs.first() & _tabs.TAB=_tab_empty
   ||
::    Jeśli jest tylko jedna zakładka o nazwie 'Pozostałe' to tak naprawdę oznacza że nie
::    ma żadnych zakładek i nie opłaca się robic okna z zakładkami
      _multitab:=0
   ?};

   {? _tabs.first() & _multitab>0
   ||
::    Dodaję zakładki do okna, które występują
      {!
      |?
         {? _tabs.TAB=_tab_empty
         ||
::          Zakładka Pozostałe - prefiksujemy parametry pustą zakładką
            _before:='
               _refresh:=0;
               {? params_get().params_win.tab<>\''+_tab_empty+'\'
               || _refresh:=1
               ?};
               {? _a>0 & _refresh>0
               ||
                  _dom_ref:=params_get().params_win.dom_ref;
                  FO_DOM.index(\'TAB\');
                  {? _dom_ref<>null()
                  || FO_DOM.prefix(\'U\',\'\',_dom_ref)
                  || FO_DOM.prefix(\'U\',\'\')
                  ?};
                  FO_DOM.first()
               ?};
               ~~
            ';
            _after:='
               _params_win:=params_get().params_win;
               _params_win.tab:=\''+_tab_empty+'\';
               params_set(\'params_win\',_params_win)
            '
         ||
::          Zakładka normalna - prefiksujemy parametry nazwą zakładki
            _before:='
               _refresh:=0;
               {? params_get().params_win.tab<>\''+_tabs.TAB+'\'
               || _refresh:=1
               ?};
               {? _a>0 & _refresh>0
               ||
                  _dom_ref:=params_get().params_win.dom_ref;
                  FO_DOM.index(\'TAB\');
                  {? _dom_ref<>null()
                  || FO_DOM.prefix(\'U\',\''+_tabs.TAB+'\',_dom_ref)
                  || FO_DOM.prefix(\'U\',\''+_tabs.TAB+'\')
                  ?};
                  FO_DOM.first()
               ?};
               ~~
            ';
            _after:='
               _params_win:=params_get().params_win;
               _params_win.tab:=\''+_tabs.TAB+'\';
               params_set(\'params_win\',_params_win)
            '
         ?};
         FO_DOM.grp_sel(_grp,,'WER_USR',_tabs.TAB,"exec('after_rfr_usr','#params')",,,,$_before,$_after,,,'maximized');
         _tabs.next()
      !}
   ||
::    Brak zakładek - dodaję jedno okno ze wszystkimi parametrami
      FO_DOM.index('B_DOMAIN');
      {? _dom_ref<>null()
      || FO_DOM.prefix('U',_dom_ref)
      || FO_DOM.prefix('U')
      ?};
      FO_DOM.first();
      FO_DOM.grp_sel(_grp,,'WER_USR',_tabs.TAB,"exec('after_rfr_usr','#params')",,,,,,,,'maximized')
   ?};
   FO_DOM.grp_splt(_grp,'panel0','vertical','left');
   FO_DOM.grp_sel(_grp,FO_USR,'WER',,"",,,,"",,,,'maximized');

   FO_DOM.win_sel(_grp);
   _warn:=1;
   {? _it=1
   || _warn:=exec('warning','#params')
   ?};
   {? _warn>0
   || FO_DOM.select()
   ?};
   _it+=1;
   FO_DOM.cntx_pop();
   FO_DEF.cntx_pop();
   BEER.NAWIGTEN
!};
~~


\warning
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla ostrzeżenie przy wchodzeniu do okna parametrów
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_msg0:='';
_msg1:='Modyfikacja parametrów może spowodować nieprawidłową pracę systemu.'@;
_msg2:='Zmiany niektórych parametrów będą uwzględnione dopiero po restarcie systemu.'@;
_msg3:='Kontynuować?'@;
_msg_glued:=exec('form','#string','L',_msg1,_msg2,_msg0,_msg3);
_result:=FUN.ask(_msg_glued);
_result


\select_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów aplikacji - wszystkie parametry, bez podziału na obszary
::       (parametry nie przypisane do użytkowników)
::   WE: [_a] - STRING - nazwa zakładki, z której parametry tylko pokazywać, jeśli nie podane to wszystkie zakładki
::       [_b] - STRING - kontekst pomocy kontekstowej
::  TAG: <PUBLICZNA><PARAMS_APL><WERTOWANIE>
::  OLD: \sl_form/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _tab:=_a || _tab:='' ?};
{? var_pres('_b')=type_of('') || _set_help:=_b || _set_help:='' ?};
_tabs:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'TAB','STRING[50]','Nazwa pola 1'
);
:: Najpierw zbieram jakie zakładki trzeba dodać do okna
FO_DEF.cntx_psh();
{? _tab<>''
|| FO_DEF.index('TAB');
   FO_DEF.prefix('A',_tab,)
|| FO_DEF.index('NR');
   FO_DEF.prefix('A')
?};

_tab_empty:='Pozostałe';
{? FO_DEF.first()
|| {!
   |? {? FO_DEF.TAB<>''
      || _tabs.prefix(FO_DEF.TAB);
         {? _tabs.size()=0
         || _tabs.blank();
            _tabs.TAB:=FO_DEF.TAB;
            _tabs.add()
         ?}
      || _tabs.prefix(_tab_empty);
         {? _tabs.size()=0
         || _tabs.blank();
            _tabs.TAB:=_tab_empty;
            _tabs.add()
         ?}
      ?};
      FO_DEF.next()
   !}
?};

:: Tworzymy okno grupowe
_title:='Uniwersalne parametry aplikacyjne';
_grp:=FO_DEF.grp_make(_title,,'#fodefselect');

{? _tab<>''
||
:: Zakładka w parametrze podana więc dodaję okno tylko z nią
   _before:='
      FO_DEF.index(\'TAB\');
      FO_DEF.prefix(\'A\',\''+_tab+'\',);
      FO_DEF.first();
      ~~
   ';
   FO_DEF.grp_sel(_grp,,'WER',_tab,,,,,$_before,,,,'maximized');
   ~~
||
:: Dodajemy kolejno okienka na zakładki
   _tabs.clear();

   _multitab:=1;
   {? _tabs.size()=1 & _tabs.first() & _tabs.TAB=_tab_empty
   ||
:: Jeśli jest tylko jedna zakładka o nazwie 'Pozostałe' to tak naprawdę oznacza że nie
:: ma żadnych zakładek i nie opłaca się robic okna z zakładkami
      _multitab:=0
   ?};

   {? _tabs.first() & _multitab>0
   ||
::    Dodaję zakładki do okna, które występują
      {!
      |?
         {? _tabs.TAB=_tab_empty
         ||
::          Zakładka Pozostałe - prefiksujemy parametry pustą zakładką
            _before:='
               FO_DEF.index(\'TAB\');
               FO_DEF.prefix(\'A\',\'\',);
               FO_DEF.first();
               ~~
            '
         ||
::          Zakładka normalna - prefiksujemy parametry nazwą zakładki
            _before:='
               FO_DEF.index(\'TAB\');
               FO_DEF.prefix(\'A\',\''+_tabs.TAB+'\',);
               FO_DEF.first();
               ~~
            '
         ?};
         FO_DEF.grp_sel(_grp,,'WER',_tabs.TAB,,,,,$_before,,,,'maximized');
         _tabs.next()
      !}
   ||
::    Brak zakładek - dodaję jedno okno ze wszystkimi parametrami
      _before:='
         FO_DEF.index(\'NR\');
         FO_DEF.prefix(\'A\');
         FO_DEF.first();
         ~~
      ';
      FO_DEF.grp_sel(_grp,,'WER',_tabs.TAB,,,,,$_before,,,,'maximized')
   ?}
?};
FO_DEF.win_sel(_grp);

{? exec('warning','#params')>0
|| {? _set_help<>''
   || _path:=exec('set_help','#help',_set_help);
      _jTerm:=app_info('web_sesid')='';
      {? _jTerm || set_help(_path) || web_set_help(_path) ?}
   ?};
   FO_DEF.select()
?};
FO_DEF.cntx_pop();
''


\select_def_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów aplikacji - wszystkie parametry, bez podziału na obszary i zakładki
::       (parametry nie przypisane do użytkowników)
::   WE: [_a] - STRING - nazwa zakładki, z której parametry tylko pokazywać, jeśli nie podane to wszystkie zakładki
::       [_b] - STRING - kontekst pomocy kontekstowej
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _tab:=_a || _tab:='' ?};
{? var_pres('_b')=type_of('') || _set_help:=_b || _set_help:='' ?};
_tabs:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'TAB','STRING[50]','Nazwa pola 1'
);
:: Najpierw zbieram jakie zakładki trzeba dodać do okna
FO_DEF.cntx_psh();
{? _tab<>''
|| FO_DEF.index('TAB');
   FO_DEF.prefix('A',_tab,)
|| FO_DEF.index('ALL');
   FO_DEF.prefix('A')
?};

:: Tworzymy okno grupowe
_title:='Uniwersalne parametry aplikacyjne'@;
_grp:=FO_DEF.grp_make(_title,,'#fodefselectall');

:: Brak zakładek - dodaję jedno okno ze wszystkimi parametrami
_before:='
   FO_DEF.index(\'ALL\');
   FO_DEF.prefix(\'A\');
   FO_DEF.first();
   ~~
';
FO_DEF.grp_sel(_grp,,'WER_ALL',_tabs.TAB,,,,,$_before,,,,'maximized');
FO_DEF.win_sel(_grp);

{? _set_help<>''
|| exec('set_help','#help',_set_help);
   _jTerm:=app_info('web_sesid')='';
  {? _jTerm || set_help(_path) || web_set_help(_path) ?}
?};
FO_DEF.select();
FO_DEF.cntx_pop();
''


\select_def_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów użytkownika - wszystkie parametry bez podziału na obszary
::  TAG: <PUBLICZNA><PARAMS_USR><WERTOWANIE>
::  OLD: \sl_form/firma.fml
::----------------------------------------------------------------------------------------------------------------------
_tabs:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'TAB','STRING[50]','Nazwa pola 1'
);
:: Najpierw zbieram jakie zakładki trzeba dodać do okna
FO_DEF.cntx_psh();
FO_DEF.index('NR');
FO_DEF.prefix('U');

_tab_empty:='Pozostałe';
{? FO_DEF.first()
|| {!
   |? {? FO_DEF.TAB<>''
      || _tabs.prefix(FO_DEF.TAB);
         {? _tabs.size()=0
         || _tabs.blank();
            _tabs.TAB:=FO_DEF.TAB;
            _tabs.add()
         ?}
      || _tabs.prefix(_tab_empty);
         {? _tabs.size()=0
         || _tabs.blank();
            _tabs.TAB:=_tab_empty;
            _tabs.add()
         ?}
      ?};
      FO_DEF.next()
   !}
?};

:: Tworzymy okno grupowe
_title:='Uniwersalne parametry użytkowników';
_grp:=FO_DEF.grp_make(_title,,'#fodefusrselect');


_params_win:=obj_new(
   'tab'
);
_params_win.tab:='';

params_set('params_win',_params_win);

:: Dodajemy kolejno okienka na zakładki
_tabs.clear();

_multitab:=1;
{? _tabs.size()=1 & _tabs.first() & _tabs.TAB=_tab_empty
||
:: Jeśli jest tylko jedna zakładka o nazwie 'Pozostałe' to tak naprawdę oznacza że nie
:: ma żadnych zakładek i nie opłaca się robic okna z zakładkami
   _multitab:=0
?};

{? _tabs.first() & _multitab
||
:: Dodaję zakładki do okna, które występują
   {!
   |?
      {? _tabs.TAB=_tab_empty
      ||
::       Zakładka Pozostałe - prefiksujemy parametry pustą zakładką
         _before:='
            _refresh:=0;
            {? params_get().params_win.tab<>\''+_tabs.TAB+'\'
            || _refresh:=1
            ?};
            {? _a>0 & _refresh>0
            ||
               FO_DEF.index(\'TAB\');
               FO_DEF.prefix(\'U\',\'\');
               FO_DEF.first()
            ?};
            ~~
         ';
         _after:='
            _params_win:=params_get().params_win;
            _params_win.tab:=\''+_tab_empty+'\';
            params_set(\'params_win\',_params_win)
         '
      ||
::       Zakładka normalna - prefiksujemy parametry nazwą zakładki
         _before:='
            _refresh:=0;
            {? params_get().params_win.tab<>\''+_tabs.TAB+'\'
            || _refresh:=1
            ?};
            {? _a>0 & _refresh>0
            ||
               FO_DEF.index(\'TAB\');
               FO_DEF.prefix(\'U\',\''+_tabs.TAB+'\');
               FO_DEF.first()
            ?};
            ~~
         ';
         _after:='
            _params_win:=params_get().params_win;
            _params_win.tab:=\''+_tabs.TAB+'\';
            params_set(\'params_win\',_params_win)
         '
      ?};
      FO_DEF.grp_sel(_grp,,'WER_USR',_tabs.TAB,"exec('after_rfr_usr2','#params')",,,,$_before,$_after,,,'maximized');
      _tabs.next()
   !}
||
:: Brak zakładek - dodaję jedno okno ze wszystkimi parametrami
   FO_DEF.index('NR');
   FO_DEF.prefix('U');
   FO_DEF.first();
   FO_DEF.grp_sel(_grp,,'WER_USR',,"exec('after_rfr_usr2','#params')",,,,,,,,'maximized')
?};
FO_DEF.grp_splt(_grp,'panel0','vertical','left');
FO_DEF.grp_sel(_grp,FO_USR,'WER',,"",,,,"",,,,'maximized');

FO_DEF.win_sel(_grp);

{? exec('warning','#params')>0
|| FO_DEF.select()
?};
FO_DEF.cntx_pop();
''


\select_def_user_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów użytkownika - wszystkie parametry bez podziału na obszary i zakładki
::   WE: [_a] - INTEGER - 0/[1] - czy inicjować parametry przed wyświetleniem, domyślnie tak
::  TAG: <PUBLICZNA><PARAMS_USR><WERTOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_init:=1;
{? var_pres('_a')=type_of(0)
|| _init:=_a
?};
{? _init>0
||
:: Aktualizacja parametrów użytkownika
   exec('init_usr','params');
   exec('init_wdr','params')
?};

_tabs:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'TAB','STRING[50]','Nazwa pola 1'
);
:: Najpierw zbieram jakie zakładki trzeba dodać do okna
FO_DEF.cntx_psh();
FO_DEF.index('ALL');
FO_DEF.prefix('U');

:: Tworzymy okno grupowe
_title:='Uniwersalne parametry użytkowników';
_grp:=FO_DEF.grp_make(_title,,'#fodefusrselall');

FO_DEF.index('ALL');
FO_DEF.prefix('U');
FO_DEF.first();
FO_DEF.grp_sel(_grp,,'WER_UALL',,"exec('after_rfr_usr2','#params')",,,,,,,,'maximized');
FO_DEF.grp_splt(_grp,'panel0','vertical','left');
FO_DEF.grp_sel(_grp,FO_USR,'WER',,"",,,,"",,,,'maximized');

FO_DEF.win_sel(_grp);

FO_DEF.select();
FO_DEF.cntx_pop();
''


\select_funpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów aplikacji (parametry nie przypisane do użytkowników)
::       w kontekście obszaru roboczego ZWS_PAR - parametryzator
::   WE: _a - STRING - 'A' - wyświetla parametry aplikacyjne
::                     'U' - wyświetla parametry użytkownika
::  TAG: <PUBLICZNA><PARAMS_APL><WERTOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_kind:=_a;

_fp_tree:=params_get().in.FP_TREE;
{? type_of(_fp_tree)>0
||
   _root:=_fp_tree.ROOT_ID;
   {? _root<>''
   ||
      B_DOMAIN.cntx_psh();
      B_DOMAIN.index('SYMBOL');
      B_DOMAIN.prefix(_root);
      {? B_DOMAIN.first()
      ||
::       Na wszelki wypadek inicjalizuję parametry zanim je wyświetlę
         {? _kind='A'
         || exec('init','params',0,,B_DOMAIN.ref())
         |? _kind='U'
         || exec('init_usr','params',B_DOMAIN.ref());
            exec('init_wdr','params',B_DOMAIN.ref());
            {? B_DOMAIN.SYMBOL='ZWS'
            || exec('add_users4zws','#params','T');
               exec('add_users4zws','#params','N')
            ?}
         ?};

::       Uruchomiono z elementu drzewa parametryzatora które jest obszarem, więc pokazuję FO w obrębie tego obszaru
         {? _kind='A'
         || exec('select_domain','#params',B_DOMAIN.SYMBOL)
         |? _kind='U'
         || exec('select_domain_user','#params',B_DOMAIN.SYMBOL)
         ?}
      ||
::       Na wszelki wypadek inicjalizuję parametry zanim je wyświetlę
         {? _kind='A'
         || exec('init','params',0)
         |? _kind='U'
         || exec('init_usr','params');
            exec('init_wdr','params')
         ?};

::       Uruchomiono z elementu drzewa parametryzatora które nie jest obszarem, pokazuję całe FO
         {? _kind='A'
         || exec('select_def','#params')
         |? _kind='U'
         || exec('select_def_user','#params')
         ?}
      ?};
      B_DOMAIN.cntx_pop();
      ~~
   ?}
|| FUN.info('Brak przekazanego parametru dotyczącego kontekstu wywołania.'@)
?};
~~


\select_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla okno parametrów użytkownika
::   WE: _a - USERS.ref()
::       _b - 0-bez zakładek, 1-z zakładkami
::   WY: 0 - użytkownik zamknął okno
::       1 - użytkownik zakończył redakcję za pomocą przycisku 'Zakończ'
::  TAG: <PUBLICZNA><PARAMS_USR><WERTOWANIE>
::----------------------------------------------------------------------------------------------------------------------
_user:={? var_pres('_a')=type_of(null()) || _a || USERS.ref() ?};
_view:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_result:=0;

:: Na wszelki wypadek inicjalizuję parametry zanim je wyświetlę
exec('init','params',1);

FO_USR.cntx_psh();
FO_USR.index('USERS');
USERS.cntx_psh(); USERS.clear();
{? USERS.seek(_user)
||
   _tabs:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
      'TAB','STRING[50]','Nazwa pola 1'
   );
:: Najpierw zbieram jakie zakładki trzeba dodać do okna
   FO_USR.prefix(_user);
   _tab_empty:='Pozostałe';
   {? _view & FO_USR.first()
   || {!
      |? {? FO_USR.FO_DEF().TAB<>''
         || _tabs.prefix(FO_DEF.TAB);
            {? _tabs.size()=0
            || _tabs.blank();
               _tabs.TAB:=FO_DEF.TAB;
               _tabs.add()
            ?}
         || _tabs.prefix(_tab_empty);
            {? _tabs.size()=0
            || _tabs.blank();
               _tabs.TAB:=_tab_empty;
               _tabs.add()
            ?}
         ?};
         FO_USR.next()
      !}
   ?};
:: Tworzymy okno grupowe
   _title:='Wartości parametrów dla użytkownika: '+USERS.KOD+' - '+USERS.DANE;
   _grp:=FO_USR.grp_make(_title,,'#fousrselect');

   _params_win:=obj_new(
      'user'
   );
   _params_win.user:=USERS.ref();

   params_set('params_win',_params_win);


:: Dodajemy kolejno okienka na zakładki
   _tabs.clear();

   _multitab:=1;
   {? _tabs.size()=1 & _tabs.first() & _tabs.TAB=_tab_empty
   ||
::    Jeśli jest tylko jedna zakładka o nazwie 'Pozostałe' to tak naprawdę oznacza że nie
::    ma żadnych zakładek i nie opłaca się robic okna z zakładkami
      _multitab:=0
   ?};

   {? _tabs.first() & _multitab
   ||
::    Dodaję zakładki do okna, które występują
      {!
      |?
         {? _tabs.TAB=_tab_empty
         ||
::          Zakładka Pozostałe - prefiksujemy parametry pustą zakładką
            _before:='
               {? _a>0
               || _user:=params_get().params_win.user;
                  FO_USR.index(\'TAB\');
                  FO_USR.prefix(_user,\'\');
                  FO_USR.first()
               ?};
               ~~
            '
         ||
::          Zakładka normalna - prefiksujemy parametry nazwą zakładki
            _before:='
               {? _a>0
               || _user:=params_get().params_win.user;
                  FO_USR.index(\'TAB\');
                  FO_USR.prefix(_user,\''+_tabs.TAB+'\',);
                  FO_USR.first()
               ?};
               ~~
            '
         ?};
         FO_USR.grp_sel(_grp,,'WER_USR',_tabs.TAB,,,,,$_before,,,,'maximized');
         _tabs.next()
      !};
      _act:=''
   ||
::    Brak zakładek - dodaję jedno okno ze wszystkimi parametrami
      FO_USR.index('USERS');
      FO_USR.prefix(USERS.ref());
      FO_USR.grp_sel(_grp,,'WER_USR',,,,,,,,,,'maximized');
      _act:='T:T'
   ?};
   FO_USR.first();
   FO_USR.win_sel(_grp);
   FO_USR.actions_grayed('WER_USR',_act);
   _result:=FO_USR.select();
   FO_USR.actions_grayed('WER_USR','')
|| FUN.info('Nie znaleziono użytkownika.'@)
?};
USERS.cntx_pop();
FO_USR.cntx_pop();
FO_USR.get();
_result


\edit_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - uruchamia redakcję parametru aktualnie zaznaczonego
::       Kontekst pracy - rekord FO_DEF
::   WE: _a - INTEGER - 0/[1] - czy po edycji skoczyć na ten parametr na którym stałem przed edycją
::   WY: ANY - wynik formuły na edycję
::  TAG: <MBUILDER><AKCJA><PARAMS_APL><REDAKCJA>
::----------------------------------------------------------------------------------------------------------------------
_jump:=1;
{? var_pres('_a')=type_of(0)
|| _jump:=_a
?};

{? FO_DEF.TAB='_Archiwum'
|| FUN.info('Nie można ustawić wartości parametru archiwalnego (już nieużywanego).'@);
   return(~~)
?};

:: Zapamiętuję parametr na którym stałem przed wywołaniem edycji
_nr_before:=FO_DEF.NR;
_wdr_before:=FO_DEF.WDR;

FO_DEF.cntx_psh();
FO_DOM.cntx_psh();
FO_USR.cntx_psh();

_result:=~~;
_interface:=exec('interface','#params');
{? FO_DEF.WDR_FML<>''
||

:: Wykonuję formułę wdrożeniową na redakcję parametru
   _fml:=$FO_DEF.WDR_FML;
   _fml(_interface)
||
:: Tworzę nazwę formuły którą będę chciał uruchomić
   _fml_name:='p'+$FO_DEF.NR;
   {? FO_DEF.WDR='T'
   || _fml_file:=exec('get','#params',100001,type_of(''));
      _fml_file:=gsub(_fml_file,'.fml','')
   || _fml_file:='params'
   ?};
:: Sprawdzam czy istnieje formuła w pliku
   {? exec('is_fun','#file',_fml_file,_fml_name)>0
   ||
::    Jest formuła więc przygotowuję się do jej wykonania
      _fml:=$('exec(\''+_fml_name+'\',\''+_fml_file+'\',_a)');
      _fml(_interface)
   ||
::    Nie ma formuły zdefiniowanej w pliku więc uruchamiam standardową obsługę typów prostych
      _fml:=$('exec(\'std_simple\',\'params\',_a)');
      _res:=_fml(_interface);
      {? _res=0
      || _msg0:='';
         _msg1:='Brak zdefiniowanej formuły obsługującej niestandartowy typ redagowanego parametru nr '+$FO_DEF.NR+'.';
         _msg2:='Formuła: \''+_fml_name+'\'';
         _msg3:='Plik:    \''+_fml_file+'.fml\'';
         _msg_glued:=exec('form','#string','L',_msg1,_msg0,_msg2,_msg3);
         FUN.info(_msg_glued)
      ?}
   ?}
?};

FO_USR.cntx_pop();
FO_DOM.cntx_pop();
FO_DEF.cntx_pop();
FO_DEF.get();
FO_DOM.get();

{? _jump>0
||
:: Staję w oknie na parametrze na którym stałem przed wykonaniem edycji
   {? cur_tab(1,1)=FO_DOM
   || _jump:=null();
      FO_DOM.cntx_psh();
      FO_DOM.index('ADD');
      _dom_ref:=params_get().dom_ref;
      {? _dom_ref<>null()
      || FO_DOM.prefix('A',_wdr_before,_dom_ref,_nr_before);
         {? FO_DOM.first()
         || _jump:=FO_DOM.ref()
         ?}
      ?};
      FO_DOM.cntx_pop();
      {? _jump<>null()
      || FO_DOM.seek(_jump)
      ?}
   |? cur_tab(1,1)=FO_DEF
   || _jump:=null();
      FO_DEF.cntx_psh();
      FO_DEF.index('NR');
      FO_DEF.prefix('A',_wdr_before,_nr_before);
      {? FO_DEF.first()
      || _jump:=FO_DEF.ref()
      ?};
      FO_DEF.cntx_pop();
      {? _jump<>null()
      || FO_DEF.seek(_jump)
      ?}
   ?}
?};
~~


\edit_usr_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - uruchamia redakcję parametru użytkownika aktualnie zaznaczonego
::       Kontekst pracy - rekord FO_USR
::   WE: _a - obj_new - obiekt umożliwiający zapis parametru
::  TAG: <MBUILDER><AKCJA><PARAMS_USR><REDAKCJA>
::----------------------------------------------------------------------------------------------------------------------
{? FO_DEF.TAB='_Archiwum'
|| FUN.info('Nie można ustawić wartości parametru archiwalnego (już nieużywanego).'@);
   return(~~)
?};

:: Zapamiętuję parametr na którym stałem przed wywołaniem edycji
_nr_before:=FO_USR.NR;
_user_before:=FO_USR.USERS;
_wdr_before:=FO_USR.WDR;

FO_DEF.cntx_psh();
FO_DOM.cntx_psh();
FO_USR.cntx_psh();

{? var_pres('_a')>100
|| _interface:=_a
|| _interface:=exec('interface','#params','U')
?};

{? FO_USR.FO_DEF().WDR_FML<>''
||
:: Wykonuję formułę wdrożeniową na redakcję parametru
   _fml:=$FO_DEF.WDR_FML;
   _fml(_interface)
||
:: Tworzę nazwę formuły którą będę chciał uruchomić
   _fml_name:='p'+$FO_USR.NR;
   {? FO_USR.WDR='T'
   || _fml_file:=exec('get','#params',100001,type_of(''));
      _fml_file:=gsub(_fml_file,'.fml','')
   || _fml_file:='params'
   ?};
:: Sprawdzam czy istnieje formuła w pliku
   {? exec('is_fun','#file',_fml_file,_fml_name)>0
   ||
::    Jest formuła więc przygotowuję się do jej wykonania
      _fml:=$('exec(\''+_fml_name+'\',\''+_fml_file+'\',_a)');
      _fml(_interface)
   ||
::    Nie ma formuły zdefiniowanej w pliku więc uruchamiam standardową obsługę typów prostych
      _fml:=$('exec(\'std_simple\',\'params\',_a)');
      _res:=_fml(_interface);
      {? _res=0
      || _msg0:='';
         _msg1:='Brak zdefiniowanej formuły obsługującej niestandartowy typ redagowanego parametru nr '+$FO_DEF.NR+'.';
         _msg2:='Formuła: \''+_fml_name+'\'';
         _msg3:='Plik:    \''+_fml_file+'.fml\'';
         _msg_glued:=exec('form','#string','L',_msg1,_msg0,_msg2,_msg3);
         FUN.info(_msg_glued)
      ?}
   ?}
?};

FO_USR.cntx_pop();
FO_DOM.cntx_pop();
FO_DEF.cntx_pop();
FO_DEF.get();
FO_DOM.get();
FO_USR.get();

:: Staję w oknie na parametrze na którym stałem przed wykonaniem edycji
{? cur_tab(1,1)=FO_USR
|| _jump:=null();
   FO_USR.cntx_psh();
   FO_USR.index('USERS');
   FO_USR.prefix(_user_before,_wdr_before,_nr_before);
   {? FO_USR.first()
   || _jump:=FO_USR.ref()
   ?};
   FO_USR.cntx_pop();
   {? _jump<>null()
   || FO_USR.seek(_jump)
   ?}
?};
~~


\edit_usr_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Ustaw' grupa przed w oknie wartości parametrów dla użytkowników
::   WE:
::   WY:
::  TAG: <MBUILDER><AKCJA><GRUPA><PARAMS_USR><REDAKCJA>
::----------------------------------------------------------------------------------------------------------------------
FO_USR.cntx_psh();
_selected:=FO_USR.sel_aget();
{? _selected.first()
|| _edit:=1;
   _value:=~~;
   {!
   |?
      FO_USR.clear();
      {? FO_USR.seek(_selected.REF,)
      ||
         {? _edit>0
         || _interface:=exec('interface','#params','U');
::          Dla pierwszego zaznaczonego rekordu uruchamiam redakcję parametru
            exec('edit_usr_action','#params',_interface);
            _edit:=0;

::          Zapamiętuję ustawioną wartość, będę ją przypisywał pozostałym rekordom
            {? _interface.SAVED>0
            || _int_current:=exec('interface','#params','U');
               _value:=_int_current.get()
            ?}
         || {? type_of(_value)>0
            || {? var_pres('_int_current')>100
               || obj_del(_int_current)
               ?};
               _int_current:=exec('interface','#params','U');
               _int_current.save(_value)
            ?}
         ?}
      ?};
      _selected.next()
   !};
   FO_USR.sel_adel();
   grp_disp(FO_USR,'WER');
   ~~
?};
FO_USR.cntx_pop();
FO_USR.get();
0


\edit_usr_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Ustaw' grupa po w oknie wartości parametrów dla użytkowników
::   WE:
::   WY:
::  TAG: <MBUILDER><AKCJA>GRUPA><PARAMS_USR><REDAKCJA>
::----------------------------------------------------------------------------------------------------------------------
grp_disp(FO_USR,'WER');
~~


\default_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - przywraca wartość domyślną dla parametru
::       Kontekst pracy - rekord FO_DEF
::   WE: [_a] - INTEGER - numer parametru któremu przywrócić domyślną wartość lub bieżacy rekord FO_DEF
::       [_b] - STRING - T/[N] - czy dotyczy parametru wdrożeniowego
::       [_c] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER><PARAMS_APL><REDAKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
{? FO_DEF.TAB='_Archiwum'
|| FUN.info('Nie można ustawić wartości parametru archiwalnego (już nieużywanego).'@);
   return(~~)
?};

FO_DEF.cntx_psh();
FO_DOM.cntx_psh();
FO_USR.cntx_psh();

FO_DEF.index('NR');

_result:=0;
_can_continue:=1;

_nr:=FO_DEF.NR;
{? var_pres('_a')=type_of(0)
|| _nr:=_a
?};

_wdr:=FO_DEF.WDR;
{? var_pres('_b')=type_of('')
|| _wdr:=_b
?};

_dialog:=1;
{? var_pres('_c')=type_of(0)
|| _dialog:=_c
?};

{? _can_continue>0
||
   _tab:=cur_tab(1,1);

   _group:=0;
   {? _tab.sel_size()>0
   || _group:=1;
      _dialog:=0
   ?};

   {? _dialog>0
   || _can_continue:=FUN.ask('Przywrócić wartość domyślną dla parametru: %1?'@[$_nr])
   ?};
   {? _can_continue>0
   || _result:=exec('default','#params',_nr,null(),,_wdr,_dialog)
   ?};
   ~~
?};
FO_USR.cntx_pop();
FO_DOM.cntx_pop();
FO_DEF.cntx_pop();
FO_DEF.get();
FO_USR.get();
_result


\default_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Wartość domyślna' grupa przed w oknie parametrów aplikacyjnych
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <MBUILDER><AKCJA><GRUPA><PARAMS_APL><REDAKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczonych parametrów: %1. Czy nadać im wszystkim wartości domyślne?'@[$_tab.sel_size()])
|| _result:=1;
   sel_nchk();
   KOMM.init(200,,'Nadawanie wartości domyślnych parametrom','')
?};
_result


\default_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Wartość domyślna' grupa po w oknie parametrów aplikacyjnych
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MBUILDER><AKCJA><GRUPA><PARAMS_APL><REDAKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\default_usr_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - przywraca wartość domyślną dla parametru użytkownika
::       Kontekst pracy - rekord FO_USR
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER><PARAMS_USR><REDAKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
FO_DEF.cntx_psh();
FO_DOM.cntx_psh();
FO_USR.cntx_psh();

FO_USR.index('NR');

_result:=0;
_can_continue:=1;

_nr:=FO_USR.NR;
_wdr:=FO_USR.WDR;
_user:=FO_USR.USERS;

_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};

{? _can_continue>0
||
   _tab:=cur_tab(1,1);

   _group:=0;
   {? _tab.sel_size()>0
   || _group:=1;
      _dialog:=0
   ?};

   {? _dialog>0
   || _can_continue:=FUN.ask('Przywrócić wartość domyślną dla parametru: %1?'@[$FO_USR.NR])
   ?};
   {? _can_continue>0
   || exec('default','#params',_nr,_user,,_wdr)
   ?};
   ~~
?};
FO_USR.cntx_pop();
FO_DOM.cntx_pop();
FO_DEF.cntx_pop();
FO_DEF.get();
FO_USR.get();
_result


\default_usr_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Wartość domyślna' grupa przed w oknie parametrów użytkownika
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <MBUILDER><AKCJA><GRUPA><PARAMS_APL><REDAKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczonych parametrów: '+$_tab.sel_size()+'. Czy nadać im wszystkim wartości domyślne?')
|| _result:=1;
   sel_nchk();
   KOMM.init(200,,'Nadawanie wartości domyślnych parametrom użytkownika','')
?};
_result


\default_usr_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Wartość domyślna' grupa po w oknie parametrów użytkownika
::   WE: _a - _env - środowisko kreatora exec('env','#b_valprt')
::  TAG: <MBUILDER><AKCJA><GRUPA><PARAMS_APL><REDAKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\interface
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy obiekt udostępniający metody zapisu i pobierania wartości aktualnego parametru.
::       Dostępne metody:
::          save(ANY) - zapisuje aktualnie redagowany parametr
::          get() - zwraca wartość parametru przed redakcją
::          default() - zwraca wartość domyślną parametru
::          nr() - zwraca numer redagowanego parametru
::          name() - zwraca nazwę redagowanego parametru
::          type() - zwraca typ redagowanego parametru
::   WE: [_a] - STRING - ['A'] - obiekt będzie operował na parametrach aplikacyjnych
::                        'U' - obiekt będzie operował na parametrach użytkownika
::       [_b] - STRING - T/[N] - czy dotyczy parametru wdrożeniowego
::       [_c] - INTEGER - nr parametru dla którego zainicjować obiekt lub bieżący rekord
::       [_d] - STRING - kod użytkownika dla którego odszukać parametr użytkownika
::   WY: obj_new() lub ~~ jeśli nie udało się zainicjować obiektu
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_kind:='A';
{? var_pres('_a')=type_of('')
|| _kind:=_a
?};

_wdr:='N';
{? var_pres('_b')=type_of('')
|| _wdr:=_b
?};

_nr:=~~;
{? var_pres('_c')=type_of(0)
|| _nr:=_c
?};

_usr_kod:='';
{? var_pres('_d')=type_of('')
|| _usr_kod:=_d
?};

_result:=~~;
_can_continue:=1;

FO_DEF.cntx_psh();
FO_USR.cntx_psh();

{? _kind='A'
||
   {? type_of(_nr)>0
   || FO_DEF.index('NR');
      FO_DEF.prefix(_kind,_wdr,_nr);
      _can_continue:=FO_DEF.first()
   ?}
|? _kind='U'
|| {? type_of(_nr)>0
   || FO_USR.index('NR');
      {? _usr_kod<>''
      || FO_USR.prefix(_nr,_wdr,_usr_kod)
      || FO_USR.prefix(_nr,_wdr)
      ?};
      _can_continue:=FO_USR.first()
   ?}
?};

{? _can_continue>0
||
   _result:=obj_new(
::    Ref redagowanego rekordu
      'REF',
::    Formuła zwracająca wartość przed redakcją
      'VAL_FML',
::    Formuła przechowana w memo zwracająca wartość przed redakcją
      'VAL_MEMO',
::    Typ redagowanego parametru
      'TYPE',
::    Tabela którą redaguję
      'FO_TAB',
::    Czy został dokonany zapis parametru
      'SAVED',
::    Rodzaj parametru - A - aplikacyjny, U - użytkownika
      'KIND',

::    Metoda zapisująca zredagowaną wartość parametru
      'save',
::    Metoda zwracajaca wartość parametru przed redakcją
      'get',
::    Metoda ustawiająca kontekst obiektu
      'cntx',
::    Metoda zwracająca wartość domyślną parametru
      'default',
::    Metoda zwracająca nr parametru
      'nr',
::    Metoda zwracajaca nazwę parametru
      'name',
::    Metoda zwracająca typ parametru
      'type',
::    Metoda zwracająca kod użytkownika dla parametru rodzaju 'U'
      'user'
      );
   _result.SAVED:=0;
   _result.KIND:=_kind;

   _tab:=~~;
   {? _kind='A'
   || _result.FO_TAB:=FO_DEF
   |? _kind='U'
   || _result.FO_TAB:=FO_USR
   ?};

:: Metoda ustawiająca wartość parametru
:: _a - ANY - wartość parametru
   _result.save:="
      _value:=_a;

      _result:=0;
      _can_continue:=1;

      .FO_TAB.cntx_psh(); .FO_TAB.clear();
      {? .FO_TAB.seek(.REF)
      ||
::       Najpierw sprawdzam czy typ się zgadza
         {? type_of(_value)=.type()
         ||
            _tab_acr:=~~;
            {? type_of(_value)=type_of(SYSLOG.ref())
            || {? _value<>null()
               || _table:=ref_tab(_value);
                  _tab_acr:=exec('tab_acr','#table',_table)
               ?}
            ?};
::          Podaną wartość konwertuję na postać formułową którą zapiszę w bazie
            {? type_of(_value)=type_of('')
            || _val_fml:=exec('val2fml','#convert',253+_value,.type(),_tab_acr)
            || _val_fml:=exec('val2fml','#convert',_value,.type(),_tab_acr)
            ?};

::          Podaną wartość konwertuję na postać czytelną dla użytkownika
            _val_display:=exec('val2display','#convert',_value);

            .FO_TAB.VAL_FML:=_val_fml;
            .FO_TAB.VALUE:=_val_display;
            _can_continue:=.FO_TAB.put();
            {? _can_continue
            || _memo:=(.FO_TAB.VAL_MEMO<>null());
               {? ~_memo & .KIND='U'
               || _memo:=FO_DEF.VAL_MEMO<>null()
               ?};
               {? _memo
               ||
::                Ustalenie wartości pola notatnikowego
                  _val_fml2:=exec('val2fml','#convert',_value,.type(),_tab_acr);
                  .FO_TAB.memo_set(_val_fml2,'VAL_MEMO');
                  _can_continue:=.FO_TAB.memo_put(,'VAL_MEMO')
               ?}
            ?};
            {? _can_continue>0
            || _result:=1
            ?}
         ||
            FUN.info('Zapis parametru %1 zakończony niepowodzeniem. Przekazano wartość błędnego typu.'@[$.FO_TAB.NR])
         ?}
      ?};
      .SAVED:=_result;
      .FO_TAB.cntx_pop();
      _result
   ";
:: Metoda zwracająca wartość parametru przed redakcją
   _result.get:="
      _result:=~~;
      {? .VAL_MEMO<>'' & .VAL_MEMO<>'\\'\\''
      || _fml:=.VAL_MEMO
      ||
::       Jeżeli memo puste, lub ma wartość '' to zwracam formułę z pola nie memo (błąd spis)
         _fml:=.VAL_FML
      ?};
      {? _fml<>''
      || _result:=($_fml)()
      || _result:=exec('empty_value','#var',.TYPE)
      ?};
      _result
   ";
:: Metoda zwracająca numer redagowanego parametru
   _result.nr:="
      _result:=0;
      .FO_TAB.cntx_psh(); .FO_TAB.clear();
      {? .FO_TAB.seek(.REF)
      || _result:=.FO_TAB.NR
      ?};
      .FO_TAB.cntx_pop();
      _result
   ";
:: Metoda zwracająca użytkownika redagowanego parametru
   _result.user:="
      _result:='';
      USERS.cntx_psh();
      .FO_TAB.cntx_psh(); .FO_TAB.clear();
      {? .FO_TAB.seek(.REF)
      || {? .FO_TAB=FO_USR
         || _result:=.FO_TAB.USERS().KOD
         ?}
      ?};
      .FO_TAB.cntx_pop();
      USERS.cntx_pop();
      _result
   ";

:: Metoda zwracająca typ redagowanego parametru
   _result.type:="
      _result:=.TYPE;
      _result
   ";

   _result.cntx:="
      {? .KIND='A'
      ||
         .REF:=FO_DEF.ref();
         .VAL_FML:=FO_DEF.VAL_FML;
         {? FO_DEF.VAL_MEMO<>null()
         || .VAL_MEMO:=FO_DEF.memo_txt(,1,'VAL_MEMO')
         || .VAL_MEMO:=''
         ?};
         .TYPE:=FO_DEF.TYPE;
         ~~
      |? .KIND='U'
      ||
         .REF:=FO_USR.ref();
         .VAL_FML:=FO_USR.VAL_FML;
         {? FO_USR.VAL_MEMO<>null()
         || .VAL_MEMO:=FO_USR.memo_txt(,1,'VAL_MEMO')
         || .VAL_MEMO:=''
         ?};
         .TYPE:=FO_USR.FO_DEF().TYPE;
         ~~
      ?}
   ";
   _result.cntx();

   {? _kind='A'
   ||
::    PARAMETRY APLIKACYJNE

::    Metoda zwracająca wartość domyślną parametru
      _result.default:="
         _result:=~~;
         FO_DEF.cntx_psh(); FO_DEF.clear();
         {? FO_DEF.seek(.REF)
         ||
            {? FO_DEF.DEF_MEMO<>null()
            || _fml:=FO_DEF.memo_txt(,1,'DEF_MEMO')
            || _fml:=FO_DEF.DEF_FML
            ?};
            {? _fml<>''
            || _result:=($_fml)()
            || _result:=exec('empty_value','#var',.TYPE)
            ?}
         ?};
         FO_DEF.cntx_pop();
         _result
      ";

::    Metoda zwracająca nazwę redagowanego parametru
      _result.name:="
         _result:='';
         FO_DEF.cntx_psh(); FO_DEF.clear();
         {? FO_DEF.seek(.REF)
         || _result:=FO_DEF.NAME
         ?};
         FO_DEF.cntx_pop();
         _result
      "
   |? _kind='U'
   ||
::    PARAMETRY UŻYTKOWNIKA

::    --- METODY ---

::    Metoda zwracająca wartość domyślną parametru
      _result.default:="
         _result:=~~;
         FO_USR.cntx_psh(); FO_USR.clear();
         {? FO_USR.seek(.REF)
         || FO_USR.FO_DEF();
            {? FO_DEF.VAL_MEMO<>null()
            || _fml:=FO_DEF.memo_txt(,1,'VAL_MEMO')
            || _fml:=FO_DEF.VAL_FML
            ?};
            {? _fml<>''
            || _result:=($_fml)()
            || _result:=exec('empty_value','#var',.TYPE)
            ?}
         ?};
         FO_USR.cntx_pop();
         _result
      ";

::    Metoda zwracająca nazwę redagowanego parametru
      _result.name:="
         _result:='';
         FO_USR.cntx_psh(); FO_USR.clear();
         {? FO_USR.seek(.REF)
         || _result:=FO_USR.FO_DEF().NAME
         ?};
         FO_USR.cntx_pop();
         _result
      "
   ?}
?};
FO_USR.cntx_pop();
FO_DEF.cntx_pop();
{? app_info('web_sesid')=''
|| FO_USR.get();
   FO_DEF.get();
   ~~
?};
_result


\refresh_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja Odswież w oknach wertowania parametrów
::  TAG: <MBUILDER><AKCJA><PARAMS_APL><ZASILANIE>
::----------------------------------------------------------------------------------------------------------------------
FO_DEF.cntx_psh();
FO_DOM.cntx_psh();
FO_USR.cntx_psh();

{? FUN.ask('Czy odświeżyć listę wszystkich parametrów?'@)>0
|| exec('upgrade_apl','#params');
   cur_tab(1,1).first();
   ~~
?};
FO_USR.cntx_pop();
FO_DOM.cntx_pop();
FO_DEF.cntx_pop();
~~


\refresh_usr_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja Odswież w oknach wertowania parametrów użytkownika
::  TAG: <MBUILDER><AKCJA><PARAMS_USR><ZASILANIE>
::----------------------------------------------------------------------------------------------------------------------
FO_DEF.cntx_psh();
FO_DOM.cntx_psh();
FO_USR.cntx_psh();

{? FUN.ask('Czy odświeżyć listę wszystkich parametrów?'@)>0
|| exec('upgrade_usr','#params');
   cur_tab(1,1).first();
   ~~
?};
FO_USR.cntx_pop();
FO_DOM.cntx_pop();
FO_DEF.cntx_pop();
~~


\fo_def_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na wartość początkową dla pól w tabeli FO_DEF
::   WY:
::  TAG: <MBUILDER><BL><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_webTerm:=app_info('web_sesid')<>'';
_fld:={? _webTerm || web_top_fld_acr(,1) || cur_afld() ?};
{? _fld='KIND'
|| _result:=exec('bl_form','#params')
|? _fld='USERONLY'
|| _result:=exec('str_n_','#blank')
?};
_result


\fo_def_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed wyświetleniem dla pól w tabeli FO_DEF
::   WY:
::  TAG: <MBUILDER><BD><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_def_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed redakcją dla pól w tabeli FO_DEF
::   WY: 0/1
::  TAG: <MBUILDER><BE><TAB:FO_DEF>
::  OLD: \pr_fonr/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_fld:=cur_afld();
{? _fld='NR'
|| {? BEER.US=null
   || _result:=1
   || {? (1+menu_txt())='P' & (FO.NR%*1000)<=500
      || _result:=0
      ?}
   ?}
?};
_result


\fo_def_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły po redakcji dla pól w tabeli FO_DEF
::   WY: 0/1
::  TAG: <MBUILDER><AE><TAB:FO_DEF>
::  OLD: \po_fog/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_fld:=cur_afld();
{? _fld='KIND'
|| {? ~('dDZzlLpc'*FO_DEF.KIND) & FO_DEF.KIND<>'' || FO_DEF.KIND:='' ?}
?};
_result


\fo_def_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły obsługi na F3 dla pól w tabeli FO_DEF
::   WY: ANY - wartość pola po F3
::  TAG: <MBUILDER><F3><TAB:FO_DEF>
::  OLD: \f3_fog/fo_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_fld:=cur_afld();
{? _fld='KIND'
||
   VAR_DEL.delete('XFOG');
   XFOG:=tab_tmp(,'KD','STRING[1]',''
          ,'OP','STRING[30]','');
   _acr_sel:=XFOG.mk_sel('Typy formuły'@,'T',0,'f3_fog_acrsel');
   XFOG.win_fld(_acr_sel,,'KD',,,1,,1,'');
   XFOG.win_fld(_acr_sel,,'OP',,,30,,1,'Opis'@);
   XFOG.win_act(_acr_sel,0,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu'@,"sel_exit()",,1,,,,'W');
   XFOG.win_sel(_acr_sel);
   XFOG.KD:='d'; XFOG.OP:='wybór jednego dokumentu'@; XFOG.add(1);
   XFOG.KD:='D'; XFOG.OP:='wybór kilku dokumentów'@; XFOG.add(1);
   XFOG.KD:='l'; XFOG.OP:='warunek logiczny 0/1'@; XFOG.add(1);
   XFOG.KD:='L'; XFOG.OP:='warunek logiczny T/N'@; XFOG.add(1);
   XFOG.KD:='p'; XFOG.OP:='liczba dodatnia'@; XFOG.add(1);
   XFOG.KD:='c'; XFOG.OP:='liczba całkowita'@; XFOG.add(1);
   {? XFOG.select() || _result:=XFOG.KD ?};
   VAR_DEL.delete('XFOG')
?};
_result


\fo_def_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format wyświetlania dla pól w tabeli FO_DEF
::   WY:
::  TAG: <MBUILDER><FD><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_def_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format redagowania dla pól w tabeli FO_DEF
::   WY:
::  TAG: <MBUILDER><FE><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_usr_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na wartość początkową dla pól w tabeli FO_USR
::   WY:
::  TAG: <MBUILDER><BL><TAB:FO_USR>
::  OLD: \bl_fo_us/pommag.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_webTerm:=app_info('web_sesid')<>'';
_fld:={? _webTerm || web_top_fld_acr(,1) || cur_afld() ?};
{? _fld='USERS'
|| _result:=BEER.US
?};
~~


\fo_usr_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed wyświetleniem dla pól w tabeli FO_USR
::   WY:
::  TAG: <MBUILDER><BD><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_usr_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed redkacją dla pól w tabeli FO_USR
::   WY:
::  TAG: <MBUILDER><BE><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
1


\fo_usr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły po redakcji dla pól w tabeli FO_USR
::   WY:
::  TAG: <MBUILDER><AE><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
1


\fo_usr_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły obsługi na F3 dla pól w tabeli FO_USR
::   WY:
::  TAG: <MBUILDER><F3><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
~~


\fo_usr_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format wyświetlania dla pól w tabeli FO_USR
::   WY:
::  TAG: <MBUILDER><FD><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_usr_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format redagowania dla pól w tabeli FO_USR
::   WY:
::  TAG: <MBUILDER><FE><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_dom_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na wartość początkową dla pól w tabeli FO_DOM
::   WY:
::  TAG: <MBUILDER><BL><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
:: Uwaga może być wywołane pod webterm, gdzie nie ma cur_afld. W przypadku rozbudowy odkomentować
::_webTerm:=app_info('web_sesid')<>'';
::_fld:={? _webTerm || web_top_fld_acr(,1) || cur_afld() ?};
~~


\fo_dom_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed wyświetleniem dla pól w tabeli FO_DOM
::   WY:
::  TAG: <MBUILDER><BD><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_dom_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed redkacją dla pól w tabeli FO_DOM
::   WY:
::  TAG: <MBUILDER><BE><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
1


\fo_dom_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły po redakcji dla pól w tabeli FO_DOM
::   WY:
::  TAG: <MBUILDER><AE><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
1


\fo_dom_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły obsługi na F3 dla pól w tabeli FO_DOM
::   WY:
::  TAG: <MBUILDER><F3><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
~~


\fo_dom_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format wyświetlania dla pól w tabeli FO_DOM
::   WY:
::  TAG: <MBUILDER><FD><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
''


\fo_dom_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format redagowania dla pól w tabeli FO_DOM
::   WY:
::  TAG: <MBUILDER><FE><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
''


\bl_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: wartosc pola HELP.G
::  OLD: \bl_form/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
HELP.G


\after_rfr_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła po odśwież w oknach tabeli FO_DOM
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
:: Podczytuję rekord FO_DEF
FO_DOM.FO_DEF();
~~


\after_rfr_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła po odśwież w oknie WER_USR tabeli FO_DOM
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
:: Podczytuję rekord FO_DEF
FO_DOM.FO_DEF();

:: Prefiksuje parametry użytkownika
FO_USR.index('NR');
FO_USR.prefix(FO_DOM.FO_DEF().NR,FO_DEF.WDR);
FO_USR.first();
grp_disp(FO_USR,'WER');
~~


\after_rfr_usr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła po odśwież w oknie WER_USR tabeli FO_DEF
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------

:: Prefiksuje parametry użytkownika
FO_USR.index('NR');
FO_USR.prefix(FO_DEF.NR,FO_DEF.WDR);
FO_USR.first();
grp_disp(FO_USR,'WER');
~~


\fo_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Akcja legenda dla FO
::  OLD: \fo_legenda/fo_usr.fml
::  TAG: <MBUILDER><AKCJA><PARAMS_APL><TAB:FO_DOM>
::---------------------------------------------------------------------------------------------------------------------
exec('legenda','color','FO_DEF#01#')


\fo_dom_berec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: Akcja rekord przed dla FO_DOM
::  OLD: \fo_act/fo_usr.fml
::  TAG: <MBUILDER><AKCJA><PARAMS_APL><TAB:FO_DOM>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
FO_DEF.cntx_psh();
{? FO_DOM.FO_DEF().VAL_FML<>FO_DEF.DEF_FML
|| _result:=Color.fnd_kol('FO_DEF#01#01')
?};
FO_DEF.cntx_pop();
_result


\fo_usr_berec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: Akcja rekord przed dla FO_USR
::  OLD: \fo_act/fo_usr.fml
::  TAG: <MBUILDER><AKCJA><PARAMS_USR><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
FO_DEF.cntx_psh();
{? FO_USR.VAL_FML<>FO_USR.FO_DEF().VAL_FML
|| _result:=Color.fnd_kol('FO_DEF#01#01')
?};
FO_DEF.cntx_pop();
_result


\fo_def_berec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: Akcja rekord przed dla FO_DEF
::  OLD: \fo_act/fo_usr.fml
::  TAG: <MBUILDER><AKCJA><PARAMS_APL><TAB:FO_DEF>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
{? FO_DEF.VAL_FML<>FO_DEF.DEF_FML
|| _result:=Color.fnd_kol('FO_DEF#01#01')
?};
_result


\add_users_by_domain
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zakłada parametry użytkownikom biorąc pod uwagę to do jakich dziedzin należy parametr i
::       z jakich dziedzin użytkownik ma uprawnienia do czynności
::   WE: _a - STRING  - T/[N] - czy parametr wdrożeniowy
::       [_b] - B_DOMAIN.ref() - dziedzina do której ograniczyć odświeżanie
::  TAG: <PUBLICZNA><PARAMS_USR><ZASILANIE><TAB:FO_USR>
::----------------------------------------------------------------------------------------------------------------------
_wdr:=_a;
_ref_table:=exec('ref_table','#table');

_result:=0;
_can_continue:=1;

_b_domain:=null();
_dom_sym:='';
{? var_pres('_b')=type_of(B_DOMAIN.ref())
|| _b_domain:=_b;
   _dom_sym:=exec('FindAndGet','#table',B_DOMAIN,_b_domain,,"SYMBOL",'')
?};
B_DOMAIN.cntx_psh(); B_DOMAIN.clear();
FO_USR.cntx_psh();
FO_USR.index('USERS');
FO_DOM.cntx_psh();
FO_DOM.index('ADD');
USERS.cntx_psh();
USERS.index('USR_AKOD');
USERS.prefix('T');
B_USRDOM.cntx_psh();
B_USRDOM.index('USERS');
{? USERS.first()
||
   _interface_a:=exec('interface','#params','A');
   _interface_u:=exec('interface','#params','U');
   {!
   |?
      {? _b_domain<>null()
      || B_USRDOM.prefix(REF.FIRMA,USERS.ref(),_b_domain)
      || B_USRDOM.prefix(REF.FIRMA,USERS.ref())
      ?};
      {? B_USRDOM.first()
      || {!
         |?
            {? B_USRDOM.B_DOMAIN<>null()
            || {? B_DOMAIN.seek(B_USRDOM.B_DOMAIN)
               ||
                  {? B_DOMAIN.SYMBOL<>'ZWS'
                  ||
                     FO_DOM.prefix('U',_wdr,B_DOMAIN.ref());
                     {? FO_DOM.first()
                     ||
                        {!
                        |?
::                         Podczytuję definicję parametru
                           FO_DOM.FO_DEF();
                           _sysmemo:=0;
                           {? FO_DEF.VAL_MEMO<>null()
                           || _sysmemo:=1
                           ?};
                           _interface_a.cntx();
                           _ref:=exec('add_user','#params'  ,FO_DEF.NR
                                                            ,FO_DEF.NAME
                                                            ,_interface_a.get()
                                                            ,FO_DEF.TAB
                                                            ,_sysmemo
                                                            ,USERS.ref()
                                                            ,
                                                            ,
                                                            ,FO_DEF.WDR
                                                            ,_interface_a
                                                            ,_interface_u);
                           {? _ref<>null()
                           || _can_continue:=1
                           || _can_continue:=0
                           ?};
                           FO_DOM.next() & _can_continue>0
                        !}
                     ?}
                  ?}
               ?}
            ?};
            B_USRDOM.next() & _can_continue>0
         !}
      ?};

      {? _can_continue>0
      ||
::       Parametry ZWS są dostępne zawsze, dla każdego użytkownika, niezależnie od tego czy ma
::       jakąś czynność
         {? _dom_sym='' | _dom_sym='ZWS'
         ||
            B_DOMAIN.cntx_psh();
            B_DOMAIN.index('SYMBOL');
            B_DOMAIN.prefix('ZWS',);
            {? B_DOMAIN.first()
            || FO_DOM.prefix('U',_wdr,B_DOMAIN.ref());
               {? FO_DOM.first()
               ||
                  {!
                  |?
::                Podczytuję definicję parametru
                     FO_DOM.FO_DEF();
                     _sysmemo:=0;
                     {? FO_DEF.VAL_MEMO<>null()
                     || _sysmemo:=1
                     ?};
                     _interface_a.cntx();
                     _ref:=exec('add_user','#params'  ,FO_DEF.NR
                                                      ,FO_DEF.NAME
                                                      ,_interface_a.get()
                                                      ,FO_DEF.TAB
                                                      ,_sysmemo
                                                      ,USERS.ref()
                                                      ,
                                                      ,
                                                      ,FO_DEF.WDR
                                                      ,_interface_a
                                                      ,_interface_u);
                     {? _ref<>null()
                     || _can_continue:=1
                     || _can_continue:=0
                     ?};
                     FO_DOM.next() & _can_continue>0
                  !}
               ?}
            ?};
            B_DOMAIN.cntx_pop() & _can_continue>0
         ?}
      ?};
      USERS.next()
   !};

   {? _can_continue>0
   ||
::    Usuwam zbędne parametry które już nie są potrzebne, bo ich użytkownik stracił uprawnienia
::    do obszaru z którymi parametry są powiązane
      {? _b_domain<>null()
      ||
         FO_DOM.cntx_psh();
         FO_USR.cntx_psh();
         FO_USR.index('NR');
         FO_DOM.index('ADD');
         FO_DOM.prefix('U',_wdr,_b_domain);
         {? FO_DOM.first() & FO_DOM.B_DOMAIN().SYMBOL<>'ZWS'
         || {!
            |? FO_USR.prefix(FO_DOM.FO_DEF().NR,_wdr);
               {? FO_USR.first()
               || {!
                  |? _next:=0;
                     _ref_nxt:=null();
                     FO_USR.cntx_psh();
                     {? FO_USR.next()
                     || _ref_nxt:=FO_USR.ref()
                     ?};
                     FO_USR.cntx_pop();

                     _has_upr:=0;
                     B_USRDOM.prefix(REF.FIRMA,FO_USR.USERS,FO_DOM.B_DOMAIN);
                     {? B_USRDOM.first()
                     || _has_upr:=1
                     ?};

                     {? _has_upr=0
                     || _can_continue:=exec('delete_fo_usr','#params',FO_USR.ref())
                     ?};

                     {? _ref_nxt<>null()
                     || _next:=FO_USR.seek(_ref_nxt)
                     ?};
                     _next>0 & _can_continue>0
                  !}
               ?};
               FO_DOM.next() & _can_continue>0
            !}
         ?};
         FO_USR.cntx_pop();
         FO_DOM.cntx_pop();
         ~~
      ||
         FO_DOM.cntx_psh();
         FO_DOM.index('NR');
         FO_USR.cntx_psh();
         FO_USR.index('WDR');
         FO_USR.prefix(_wdr,);
         {? FO_USR.first()
         || {!
            |?
               _can_continue:=1;
               _next:=0;
               _ref_nxt:=null();
               FO_USR.cntx_psh();
               {? FO_USR.next()
               || _ref_nxt:=FO_USR.ref()
               ?};
               FO_USR.cntx_pop();

               _has_upr:=0;
               FO_DOM.prefix('U',_wdr,FO_USR.NR);
               {? FO_DOM.first()
               || {!
                  |?
                     {? FO_DOM.B_DOMAIN().SYMBOL='ZWS'
                     ||
::                      Uprawnienia do parametrów ZWS ma każdy
                        _has_upr:=1
                     ||
                        B_USRDOM.prefix(REF.FIRMA,FO_USR.USERS,FO_DOM.B_DOMAIN);
                        {? B_USRDOM.first()
                        || _has_upr:=1
                        ?}
                     ?};
                     FO_DOM.next() & _has_upr=0
                  !}
               ?};

               {? _has_upr=0
               || _can_continue:=exec('delete_fo_usr','#params',FO_USR.ref())
               ?};

               {? _ref_nxt<>null()
               || _next:=FO_USR.seek(_ref_nxt)
               ?};
               _next>0 & _can_continue>0
            !}
         ?};
         FO_DOM.cntx_pop();
         FO_USR.cntx_pop()
      ?}
   ?}
?};
B_USRDOM.cntx_pop();
USERS.cntx_pop();
FO_USR.cntx_pop();
FO_DOM.cntx_pop();
B_DOMAIN.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\b_usrdom_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Formuła wykonywana po uzyskaniu przez użytkownika uprawnien do podanej dziedziny
::   WE: _a - STRING - symbol dziedziny która została dodana
::       _b - USERS.ref - użytkownik
::       [_c] - STRING - 'T'/['N'] - czy parametry wdrożeniowe
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_dom_sym:=_a;
_users:=_b;
_wdr:='N';
{? var_pres('_c')=type_of('')
|| _wdr:=_c
?};

_result:=0;
_can_continue:=1;

{? _can_continue>0
||
   FO_DEF.cntx_psh();
   B_DOMAIN.cntx_psh();
   B_DOMAIN.index('SYMBOL');
   FO_DOM.cntx_psh();
   FO_DOM.index('ADD');
   FO_USR.cntx_psh();
   FO_USR.index('USERS');
   B_DOMAIN.prefix(_dom_sym,);
   {? B_DOMAIN.first()
   ||
      _interface_a:=exec('interface','#params','A');
      _interface_u:=exec('interface','#params','U');

      FO_DOM.prefix('U',_wdr,B_DOMAIN.ref());
      {? FO_DOM.first()
      ||
         {!
         |?
::          Podczytuję definicję parametru
            FO_DOM.FO_DEF();

            FO_USR.prefix(_users,_wdr,FO_DEF.NR);

            {? FO_USR.first()=0
            ||
::             Dodaję tylko jeżeli użytkownik nie miał jeszcze tego parametru
               FO_USR.prefix();
               _sysmemo:=0;
               {? FO_DEF.VAL_MEMO<>null()
               || _sysmemo:=1
               ?};
               _interface_a.cntx();
               _ref:=exec('add_user','#params'  ,FO_DEF.NR
                                                ,FO_DEF.NAME
                                                ,_interface_a.get()
                                                ,FO_DEF.TAB
                                                ,_sysmemo
                                                ,_users
                                                ,
                                                ,
                                                ,FO_DEF.WDR
                                                ,_interface_a
                                                ,_interface_u);
               {? _ref<>null()
               || _can_continue:=1
               || _can_continue:=0
               ?}
            ?};
            FO_DOM.next() & _can_continue>0
         !}
      ?}
   ?};
   FO_DEF.cntx_pop();
   FO_USR.cntx_pop();
   FO_DOM.cntx_pop();
   B_DOMAIN.cntx_pop();
   ~~
?};
{? _can_continue>0
|| _result:=1
?};
_result


\b_usrdom_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Formuła wykonywana po utracie przez użytkownika uprawnien do podanej dziedziny
::   WE: _a - STRING - dziedzina którą utracił użytkownik
::       _b - USERS.ref() - użytkownik
::       [_c] - STRING - 'T'/['N'] - czy parametry wdrożeniowe
::       [_d] - INTEGER - [0]/1 - czy wykonywać również dla ZWS
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_dom_sym:=_a;
_users:=_b;

_wdr:='N';
{? var_pres('_c')=type_of('')
|| _wdr:=_c
?};

_can_zws:=0;
{? var_pres('_d')=type_of(0)
|| _can_zws:=_d
?};

_result:=0;
_can_continue:=1;

FO_USR.cntx_psh();
FO_USR.index('USERS');
FO_DOM.cntx_psh();
FO_DOM.index('ADD');
B_DOMAIN.cntx_psh();
B_DOMAIN.index('SYMBOL');
B_DOMAIN.prefix(_dom_sym,);
{? B_DOMAIN.first()
|| USERS.cntx_psh(); USERS.prefix();
   {? USERS.seek(_users)
   ||
      _can_del:=1;
      {? B_DOMAIN.SYMBOL='ZWS'
      || _can_del:=_can_zws
      ?};

      {? _can_del>0
      || FO_DOM.prefix('U',_wdr,B_DOMAIN.ref());
         {? FO_DOM.first()
         || {!
            |?
::             Podczytuję definicję parametru
               FO_DOM.FO_DEF();

               FO_USR.prefix(USERS.ref(),_wdr,FO_DEF.NR);
               {? FO_USR.first()
               || _can_continue:=exec('delete_fo_usr','#params',FO_USR.ref())
               ?};
               FO_DOM.next() & _can_continue>0
            !}
         ?}
      ?}
   ?};
   USERS.cntx_pop()
?};
B_DOMAIN.cntx_pop();
FO_USR.cntx_pop();
FO_DOM.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\add_users4zws
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Wszystkim użytkownikom dodaje parametry dziedziny ZWS o ile jeszcze nie mają takiego parametru
::       Nie aktualizuje parametrów - tylko dodaje brakujące
::   WE: [_a] - STRING - 'T'/['N'] - czy parametry wdrożeniowe
::       [_b] - USERS.ref() - użytkownik do którego ograniczyć dziedzinę
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_wdr:='N';
{? var_pres('_a')=type_of('')
|| _wdr:=_a
?};
_user:=null();
{? var_pres('_b')=type_of(USERS.ref())
|| _user:=_b
?};

_result:=1;
_can_continue:=1;

B_DOMAIN.cntx_psh();
FO_USR.cntx_psh();
FO_USR.index('USERS');
FO_DOM.cntx_psh();
FO_DOM.index('ADD');
USERS.cntx_psh();
USERS.index('USR_AKOD');

{? _user<>null()
|| USERS.prefix();
   _can_continue:=USERS.seek(_user);
   {? _can_continue>0
   || USERS.prefix('T',USERS.KOD,)
   ?}
|| USERS.prefix('T');
   _can_continue:=USERS.first()
?};
B_USRDOM.cntx_psh();
B_USRDOM.index('USERS');

B_DOMAIN.index('SYMBOL');
B_DOMAIN.prefix('ZWS',);
{? USERS.first() & B_DOMAIN.first()
||
   _interface_a:=exec('interface','#params','A');
   _interface_u:=exec('interface','#params','U');

   {!
   |?
      _can_continue:=1;
      FO_DOM.prefix('U',_wdr,B_DOMAIN.ref());
      {? FO_DOM.first()
      ||
         {!
         |?
::          Podczytuję definicję parametru
            FO_DOM.FO_DEF();

            FO_USR.prefix(USERS.ref(),_wdr,FO_DEF.NR);

            {? FO_USR.first()=0
            || FO_USR.prefix();
               _sysmemo:=0;
               {? FO_DEF.VAL_MEMO<>null()
               || _sysmemo:=1
               ?};
               _interface_a.cntx();
               _ref:=exec('add_user','#params'  ,FO_DEF.NR
                                                ,FO_DEF.NAME
                                                ,_interface_a.get()
                                                ,FO_DEF.TAB
                                                ,_sysmemo
                                                ,USERS.ref()
                                                ,
                                                ,
                                                ,FO_DEF.WDR
                                                ,_interface_a
                                                ,_interface_u);
               {? _ref<>null()
               || _can_continue:=1
               || _can_continue:=0
               ?}
            ?};
            FO_DOM.next() & _can_continue>0
         !}
      ?};
      {? _can_continue<=0
      || _result:=0
      ?};
      USERS.next()
   !}
?};

B_DOMAIN.cntx_pop();
FO_USR.cntx_pop();
FO_DOM.cntx_pop();
USERS.cntx_pop();
B_USRDOM.cntx_pop();
_result


\trigger_import_on
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Włącza triggery dla tabel FO_* na czas importu
::  TAG: <PRYWATNA><TAB:FO_DEF><TAB:FO_USR><TRIGGER><IMPORT>
::----------------------------------------------------------------------------------------------------------------------
:: Wyłączamy możliwość dodawania nowych parametrów
FO_DEF.trig_b('add',"
   _result:=0;
   FO_DEF.cntx_psh();
   FO_DEF.index('NR');
   FO_DEF.prefix(FO_DEF.KIND,FO_DEF.WDR,FO_DEF.NR);
   {? FO_DEF.first()
   ||
::    Jest taki parametr już więc zwracam 1 żeby mógł się zrobić na nim put()
      _result:=1
   ?};
   FO_DEF.cntx_pop();
   _result
",'fodeftrigimport');
FO_USR.trig_b('add',"
   _result:=0;
   FO_USR.cntx_psh();
   FO_DEF.cntx_psh();
   FO_USR.index('USERS');
   FO_USR.prefix(FO_USR.USERS,FO_USR.WDR,FO_USR.NR);
   {? FO_USR.first()
   ||
::    Jest taki parametr już więc zwracam 1 żeby mógł się zrobić na nim put()
      _result:=1
   ?};
   FO_DEF.cntx_pop();
   FO_USR.cntx_pop();
   _result
",'fousrtrigimport');

:: Wyłączamy możliwość uaktualniania niektórych typów parametrów np refów
FO_DEF.trig_b('put',"
   _result:=1;
   {? FO_DEF.TYPE=type_of(SYSLOG.ref())
   || _result:=0;
      _msg:='Wartość parametru '+$FO_DEF.NR+' '+FO_DEF.NAME+' nie została zaimportowana, ponieważ parametr jest typu złączeniowego';
      {? KOMM.find_msg(_msg)=0
      || KOMM.add(_msg,7,,1)
      ?}
   ?};
   _result
",'fodeftrigimp2');
~~


\trigger_import_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyłącza triggery dla tabel FO_* po imporcie
::  TAG: <PRYWATNA><TAB:FO_DEF><TAB:FO_USR><TRIGGER><IMPORT>
::----------------------------------------------------------------------------------------------------------------------
:: Włączamy możliwość dodawania nowych parametrów
FO_DEF.trig_b('add',"",'fodeftrigimport');
FO_USR.trig_b('add',"",'fousrtrigimport');

FO_DEF.trig_b('put',"",'fodeftrigimp2');

~~


\clean_not_binded
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuwa definicje parametrów które nie zostały przypisane do żadnej dziedziny
::   WE: _a - STRING - rodzaj parametrów: 'A' - aplikacyjne, 'U' - użytkownika
::       _b - STRING - T/[N] - czy dotyczy parametru wdrożeniowego
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_kind:=_a;
_wdr:=_b;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};

FO_DOM.cntx_psh();
FO_DOM.index('FO_DEF');
FO_DEF.cntx_psh();
FO_DEF.index('NR');
FO_DEF.prefix(_kind,_wdr);
{? FO_DEF.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      FO_DEF.cntx_psh();
      {? FO_DEF.next()
      || _ref_nxt:=FO_DEF.ref()
      ?};
      FO_DEF.cntx_pop();

      FO_DOM.prefix(FO_DEF.ref());
      {? FO_DOM.size()=0
      || _can_continue:=exec('delete_fo_def','#params',FO_DEF.ref())
      ?};
      {? _ref_nxt<>null()
      || _next:=FO_DEF.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
FO_DEF.cntx_pop();
FO_DOM.cntx_pop();
{? _mydo || end() ?};
{? _can_continue>0
|| _result:=1
?};
_result


\is_used
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy wartość parametru podana w argumencie jest używana w formułach użytkownika
::   WE: _a - INTEGER - numer parametru
::       _b - STRING - wartość parametru
::   WY: 0 - nie jest używana
::       1 - jest używana
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_val:=_b;

_result:=0;

FO_USR.cntx_psh();
FO_USR.index('NR');
FO_USR.prefix(_nr,'N',);
{? FO_USR.first()
|| {!
   |? {? var_pres('_interface')>100
      || obj_del(_interface)
      ?};
      _interface:=exec('interface','#params','U','N',_nr,FO_USR.USERS().KOD);
      {? _interface.get()=_val
      || _result:=1
      ?};
      FO_USR.next() & _result=0
   !}
?};
FO_USR.cntx_pop();
_result


\name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Zwraca nazwę parametru o podanym numerze
::   WE: _a - nr parametru którego nazwę zwrócić
::       _b - STRING - typ parametru: 'A' - Aplikacyjny 'U' - użytkownika
::       [_c] - STRING - T/[N] - czy dotyczy parametru wdrożeniowego
::       [_d] - INTEGER - czy wywołanie rekurencyjne
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_kind:=_b;

_wdr:='N';
{? var_pres('_c')=type_of('')
|| _wdr:=_c
?};

_rec:=0;
{? var_pres('_d')=type_of(0)
|| _rec:=_d
?};

_result:='';

FO_DEF.cntx_psh();
FO_DEF.index('NR');
{? _kind='A'
||
   FO_DEF.prefix(_kind,_wdr,_nr);
   {? FO_DEF.first()
   || _interface:=exec('interface','#params','A');
      _result:=_interface.name()
   ||
      {? _rec=0
      ||
::       Nie znaleziono parametru o tym numerze więc wykonuję inicjalizację i uruchamiam się ponownie
         {? cli_ver()<>'cgi' || exec('init','params') ?};
::       !!! REKURENCJA !!!
         _result:=exec('name','#params',_nr,_kind,_wdr,1)
      ?}
   ?}
|? _kind='U'
|| FO_DEF.prefix(_kind,_wdr,_nr);
   {? FO_DEF.first()
   ||
      _interface:=exec('interface','#params','A');
      _result:=_interface.name()
   ||
      {? _rec=0
      ||
::       Nie znaleziono parametru o tym numerze więc wykonuję inicjalizację i uruchamiam się ponownie
         {? cli_ver()<>'cgi' || exec('init_usr','params') ?};
::       !!! REKURENCJA !!!
         _result:=exec('name','#params',_nr,_kind,_wdr,1)
      ?}
   ?}
?};
FO_DEF.cntx_pop();
_result


\name_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Zwraca wartość parametru o podanym numerze
::   WE: _a   - INTEGER   - numer parametru którego nazwę zwrócić
::       _b - STRING - typ parametru: 'A' - Aplikacyjny 'U' - użytkownika
::   WY: ANY - oczekiwana wartość parametru lub domyślna wartość danego typu (pusta)
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_kind:=_b;
exec('name','#params',_nr,_kind,'T')


\import_xpertis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w menu - import wartości z Xpertis
::   WE: [_a] - STRING - nazwa pliku
::       [_b] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_filename:='';
{? var_pres('_a')=type_of('')
|| _filename:=_a
?};
_dialog:=1;
{? var_pres('_b')=type_of(0)
|| _dialog:=_b
?};

_komm:=1;

_result:=0;
_can_continue:=1;

{? _filename=''
||
   _files:=files('fo_*.tra');
   {? _files.size()
   || _wer:=_files.mk_sel('Wybierz plik'@,,,'files',,,,,'U');
      _files.win_fld(_wer,,'FILENAME',,,,,,,1);
      _files.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
      _files.win_sel(_wer);
      {? _files.select()
      || _filename:=_files.FILENAME
      || _can_continue:=-1
      ?}
   || FUN.info('Brak plików do zaimportowania.'@);
      _can_continue:=0
   ?}
?};

::_filename:='fo_def_xpertis.tra';
{? _can_continue>0
||
   _sep:=';';
   _sepfile:=exec('sep','#file');
   _filepath:=pth_dir(_filename)+_sepfile+_filename
?};

FO_DEF.cntx_psh();
FO_DEF.index('NR');
{? _dialog>0 & _can_continue>0
|| _msg0:='';
   _msg:='Czy rozpocząć import wartości uniwersalnych parametrów aplikacji z systemu Xpertis?\n'
         'Importowane są wszystkie parametry ze wszystkich dziedzin produktowych.\n\n'
         'Ścieżka do pliku: %1\n\n'
         'Uwaga! Istniejące wartości parametrów zostaną nadpisane.'@[_filepath];
   {? FUN.ask(_msg)>0
   || _can_continue:=1
   || _can_continue:=-1
   ?}
?};
{? _can_continue>0
||
:: Sprawdzam czy na serwerze jest plik
   {? fexists(_filename,1)
   || {? _komm>0
      || KOMM.init(250,,'Import wartości parametrów aplikacji')
      ?};
::    Otwieram plik na serwerze z zgodnie z deklaracją ścieżek w pth
      _file:=fopen(_filename,'ur',1,1);

      {? _file>0
      ||
         {!
         |?
            _line:=gsub(fread(_file),'""','"');
::            _line:=fread(_file);
            {? _line<>''
            ||
               {? var_pres('_split')>100
               || obj_del(_split)
               ?};
               _split:=spli_str(_line,_sep);
               {? obj_len(_split)>2
               ||
                  _nr:=#_split[1];
                  _name:=_split[2];
                  _tr:=_split[3];

                  {? type_of(_nr)=type_of(0)
                  ||
                     FO_DEF.prefix('A','N',_nr);
                     {? FO_DEF.first()
                     ||
                        {? _tr<>''
                        ||
                           _value:=~~;
::                            Kontrola typów
                           {? var_pres('_interface')>100
                           || obj_del(_interface)
                           ?};
                           _interface:=exec('interface','#params','A',_nr);

                           _old_type:=~~;
                           {? (1+_tr)='\'' & (_tr+1)='\''
                           || _old_type:=type_of('');
                              _value:=1-_tr-1
                           ?};
                           {? (1+_tr)='\"' & (_tr+1)='\"'
                           || _old_type:=type_of('');
                              _buf:=1-_tr-1;
                              {? (1+_buf)='\'' & (_buf+1)='\''
                              ||
::                               [rr] parametr, który był przekazywany jako część filtra np. 300501
                                 _value:=1-_buf-1;
                                 _value:=gsub(_value,'\\\'','\'')
                              || _value:=_buf
                              ?}
                           ?};
                           {? exec('isDigit','#string',1+_tr)
                           || _old_type:=type_of(0);
                              _value:=#_tr
                           ?};

                           _can_import:=1;
                           {? _nr=540001 | _nr=540010 | _nr=540011 | _nr=540012 | _nr=540013
                           ||
::                            Ikony w kwalifikacji dostaw. Od wersji 22.26 nie ma już ikon starych karteczek
::                            które były w xpertis, dlatego jeżeli w folderze ich nie ma, to nie importujemy ich
::                            pozostawiając wartości domyślne w Merit
                              _plik:=_value;
                              {? _plik*':'>0
                              || {? var_pres('_split')>100
                                 || obj_del(_split)
                                 ?};
                                 _split:=spli_str(_value,':');
                                 _plik:=_split[1]
                              ?};
                              {? _plik<>''
                              || {? fexists(_plik,1)=0
                                 || _can_import:=0;
                                    KOMM.add('Parametr %1 nie został zaimportowany, pliku z ikonami: %2 nie ma na ścieżce pth'@[$_nr,_plik],2,,1)
                                 ?}
                              ?}
                           ?};

                           {? _can_import>0
                           ||
                              {? _old_type=_interface.type()
                              ||
::                               Typ się zgadza - przepisuję wartość
                                 _interface.save(_value)
                              ||
::                               Typ sie nie zgadza - dodaję info o KOMMa
                                 KOMM.add('Typ parametru: %1 - %2 zmienił się i jego wartość nie została zaimportowana'@[$_nr,_name],2,,1)
                              ?}
                           ?}
                        ?}
                     || KOMM.add('Nie znaleziono parametru: %1 - %2'@[$_nr,_name],2,,1)
                     ?}
                  ?}
               ?}
            ?};
            _line<>'\n' & _can_continue>0
         !}
      || FUN.emsg('Nie udało się otwarcie pliku importu: %1'@[_filepath]);
         _can_continue:=0
      ?};

      {? _komm>0
      || KOMM.select()
      ?}
   || FUN.emsg('Brak pliku importu: %1'@[_filepath]);
      _can_continue:=0
   ?};
   ~~
?};
FO_DEF.cntx_pop();
{? _can_continue>0
|| _result:=1
|? _can_continue=-1
|| _result:=-1
?};
_result


\select_user_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.02]
:: OPIS: Wszystkie uniwersalne parametry użytkownika
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FO_USR.cntx_psh();
exec('select_user','#params',,0);
FO_USR.cntx_pop()


\wdr_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Akcja 'Wdrożeniowe' parametry
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
FO_DEF.cntx_psh();
FO_DEF.index('NR');
FO_DEF.prefix('A','N',100001);
{? FO_DEF.first()
|| exec('edit_action','#params',0)
|| FUN.emsg('Nie znaleziono parametru 100001. Należy odświeżyć listę parametrów.'@)
?};
FO_DEF.cntx_pop();
~~


\upgrade_apl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Formuła używana na upgrade - po takiej zmianie parametru aplikacyjnego
::       która wymaga odświeżenia listy parametrów, regeneracji dziedzin
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
exec('init','params',0);

_result:=0;
_can_continue:=1;

{? _can_continue>0
|| _can_continue:=exec('clean_not_binded','#params','A','T')
?};
{? _can_continue>0
|| _can_continue:=exec('clean_not_binded','#params','A','N')
?};
{? _can_continue>0
|| _result:=1
?};
_result


\upgrade_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Formuła używana na upgrade - po takiej zmianie parametru użytkownika
::       która wymaga odświeżenia listy parametrów, regeneracji dziedzin i użytkowników
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
exec('init_usr','params');
exec('init_wdr','params');

_result:=0;
_can_continue:=1;

{? _can_continue>0
|| _can_continue:=exec('clean_not_binded','#params','U','T')
?};
{? _can_continue>0
|| _can_continue:=exec('clean_not_binded','#params','U','N')
?};

{? _can_continue>0
|| _can_continue:=exec('add_users_by_domain','#params','T')
?};
{? _can_continue>0
|| _can_continue:=exec('add_users_by_domain','#params','N')
?};
{? _can_continue>0
|| _result:=1
?};
_result


\clean_zws_params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Czyści dla podanego użytkownika wszystkie parametry ZWS
::   WE: [_a] - USERS.ref
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _ref:=_a
?};
_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.prefix();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| FO_USR.cntx_psh();
   _can_continue:=exec('b_usrdom_del','#params','ZWS',USERS.ref(),'T',1);
   {? _can_continue>0
   || _can_continue:=exec('b_usrdom_del','#params','ZWS',USERS.ref(),'N',1)
   ?};
   FO_USR.cntx_pop()
?};
USERS.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\copy_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Kopiuje wartości parametrów z jednego usera na drugiego
::   WE: _a - USERS.ref - użytkownik źródłowy
::       _b - USERS.ref - użytkownik docelowy
::       _c - INTEGER - 0/1 - czy dodawać brakujące, czy nadpisywać istniejące ochrony
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_user_src:=_a;
_user_dst:=_b;

_overwrite:=_c;

_kod_src:=exec('FindAndGet','#table',USERS,_user_src,,"KOD",'');
_kod_dst:=exec('FindAndGet','#table',USERS,_user_dst,,"KOD",'');

_can_continue:=1;
_result:=0;

:: Aktualizacja parametrów dla ZWS dla źródłowego i docelowego użytkownika
:: trzeba to zrobić w tym miejscu, bo po założeniu nowego użytkownika może jeszcze nie być
:: parametrów ZWS dla nowego użytkownika
exec('add_users4zws','#params','N',_user_src);
exec('add_users4zws','#params','T',_user_src);
exec('add_users4zws','#params','N',_user_dst);
exec('add_users4zws','#params','T',_user_dst);

_interface:=exec('interface','#params','U');
FO_USR.cntx_psh();
FO_USR.index('USERS');
FO_USR.prefix(_user_src);

{? FO_USR.first()
|| {!
   |?
      _interface.cntx();
      _value:=_interface.get();

      {? var_pres('_interface_dst')>100
      || obj_del(_interface_dst)
      ?};
      _interface_dst:=exec('interface','#params','U',FO_USR.WDR,FO_USR.NR,_kod_dst);
      _value_dst:=_interface_dst.get();

      _can_change:=0;

      {? _value<>_value_dst
      || _can_change:=1
      ?};
      {? _interface_dst.default()<>_value_dst
      || {? _overwrite>0
         || _can_change:=1
         || _can_change:=0
         ?}
      ?};

      {? _can_change>0
      || _can_continue:=_interface_dst.save(_value)
      ?};
      FO_USR.next() & _can_continue>0
   !}
?};
FO_USR.cntx_pop();
{? _can_continue>0
|| _result:=1
|| FUN.emsg('Kopiowanie uniwersalnych parametrów użytkownika zakończone niepowodzeniem'@)
?};
_result


\bind_check_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Sprawdza, czy parametr jest przyporządkowany do dziedziny produktowej
::   WE: _a - FO_DEF.ref() lub FO_USR.ref - parametr
::       _b - STRING - symbol dziedziny produktowej np 'ZWS'
::   WY: 0 - nie, 1 - tak
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_domain:=_b;

_result:=0;

{? _ref<>null()
|| {? ref_tab(_ref)=FO_DEF
   || _dom_ref:=exec('domain_ref','#b_domain',_domain);
      {? _dom_ref<>null()
      || FO_DOM.cntx_psh();
         FO_DOM.index('FO_DEF');
         FO_DOM.prefix(_ref,_dom_ref);
         _result:=(FO_DOM.size()>0);
         FO_DOM.cntx_pop()
      ?}
   |? ref_tab(_ref)=FO_USR
   || FO_USR.cntx_psh();
      FO_USR.clear();
      {? FO_USR.seek(_ref)
      || _result:=exec('bind_check_1','#params',FO_USR.FO_DEF,_domain)
      ?};
      FO_USR.cntx_pop()
   ?}
?};
_result



\bind_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Sprawdza, czy parametr jest przyporządkowany do dziedziny produktowej z podanej listy
::   WE: _a - FO_DEF.ref() lub FO_USR.ref - parametr
::       _b - STRING - symbole dziedzin produktowych np 'ZWS,LSP'
::   WY: 0 - nie, 1 - tak
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_domains:=_b;
_dom_tab:=spli_str(_domains,',');
_result:=0;
_len:=obj_len(_dom_tab);
_nn:=1;
{!
|? _nn<=_len & ~_result
|! _result:=exec('bind_check_1','#params',_ref,_dom_tab[_nn]);
   _nn+=1
!};
_result

:Sign Version 2.0 jowisz:1045 2024/01/12 14:53:03 8b3316708e01b657f550ffedbef33b6d6dd757fea0e1652aa57ee760f429050e6fa6716a93a354c8a700e8b615775a565b0c526a1237c10a9643982fd5a446c72c67326f34cb55a96cfe5d6167e5e83a1f371fb0540adf9a14d1e097ee19258c42917d05f7ff2305e2debcf15cfb7cd8cbf337aab26f0a1f5a795a3cce44749e
