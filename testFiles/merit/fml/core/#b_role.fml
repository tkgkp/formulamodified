:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_role.fml
:: Utworzony: 05.07.2013 [17.00]
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli B_ROLE
::======================================================================================================================


\spr_b_actrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Dodawanie roli do czynności
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
{? B_ACTROL.B_ROLE=null
|| FUN.info('Nie wybrano roli.'@); _zwrot:=0
|| {? -menu_txt='popraw' || _ref:=B_ACTROL.ref() ?};
   B_ACTROL.cntx_psh();
   B_ACTROL.index('DISP2'); B_ACTROL.prefix(REF.FIRMA,B_ACTION.ref(),B_ACTROL.B_ROLE().NAME,);
   {? B_ACTROL.first() & {? -menu_txt='popraw' || B_ACTROL.ref()<>_ref || 1 ?}
   || FUN.info('Dana czynność ma już przypisaną wybraną rolę.'@); _zwrot:=0
   ?};
   B_ACTROL.cntx_pop()
?};
_zwrot


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje podany rekord tabeli B_ROLE (wykonywane w transakcji!!!)
::   WE: _a - B_ROLE.ref()
::       [_b] - INTEGER - czy wyświetlać komunikaty: [0] - nie
::                                                    1  - wyskakujący komunikat
::                                                    2  - w KOMM
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><PROCES><MODELE><DEL><ROLE>
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystapić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_display:=0;
{? var_pres('_b')=type_of(0)
|| _display:=_b
?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
B_ROLE.cntx_psh(); B_ROLE.clear();
{? B_ROLE.seek(_ref)
|| {? exec('clean','#b_role',_ref)>0
   || {? B_ROLE.count()=0
      ||
         {? B_ROLE.del(,1)>0
         || _result:=1
         || undo();
            _result:=-3
         ?}
      || undo();
         _msg:='Nie można usunąć roli: %1 ponieważ jest używana w systemie.'@[B_ROLE.NAME];
         {? _display=1
         || FUN.emsg(_msg)
         |? _display=2
         || KOMM.add(_msg,'xwin16.png:2',,1)
         ?}
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

B_ROLE.cntx_pop();
{? _mydo || end() ?};
_result


\delete_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - usunięcie rekordu
::   WE: [_a] - INTEGER - 0/[1]/2 - sposób wyświetlania komunikatów - 0 - brak, [1] - ekran, 2 - KOMM
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><DEL><MODELER><PROCES><ROLE>
::----------------------------------------------------------------------------------------------------------------------
_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};

_result:=0;
_can_continue:=1;

_tab:=cur_tab(1,1);

_group:=0;
{? _tab.sel_size()>0
|| _group:=1;
   _dialog:=2
?};

:: Sprawdzam czy można usunąć
_can_continue:=exec('can_delete','#b_role',,_dialog);

{? _dialog=1 & _can_continue>0
|| _can_continue:=FUN.ask('Usunąć rolę: %1?'@[B_ROLE.NAME])
?};
{? _can_continue>0
|| _result:=exec('delete','#b_role',B_ROLE.ref(),_dialog)
?};
_result


\delete_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli B_ROLE
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL><MODELER><PROCES><ROLE>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczonych ról: %1. Czy usunąć je wszystkie?'@[$_tab.sel_size()])
|| _result:=1;
   sel_nchk();
   KOMM.init(200,,'Usuwanie ról.'@,'')
?};
_result


\delete_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli B_ROLE
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza mozliwosc usuniecia rekordu B_ROLE
::   WE: [_a] - B_ROLE.ref, jeśli nie podany to aktualny rekord
::       [_b] - INTEGER - czy wyświetlać komunikaty:  0  - nie
::                                                   [1] - wyskakujący komunikat
::                                                    2  - w KOMM
::  TAG: <PRIVATE><DEL><KONTROLA><MODELER><PROCES><ROLE>
::   WY: 0 - nie można usunąć rekordu
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();

_display:=1;
{? var_pres('_b')=type_of(0)
|| _display:=_b
?};

_result:=1;
_can_continue:=1;


B_ROLE.cntx_psh();
{? var_pres('_a')=type_of(B_ROLE.ref())
|| _can_continue:=0;
   B_ROLE.clear();
   {? B_ROLE.seek(_ref)
   || _can_continue:=1
   ?}
?};

{? _can_continue>0
||
   B_PREL.cntx_psh();
   B_USRROL.cntx_psh();

   B_PREL.index('B_ROLE');
   B_PREL.prefix(B_ROLE.ref());
   {? B_PREL.first()
   || _can_continue:=0;
      _result:=0;
      _msg:='Nie można usunąć roli: %1 ponieważ jest używana w procesach.'@[B_ROLE.NAME];
      {? _display=1
      || FUN.emsg(_msg)
      |? _display=2
      || KOMM.add(_msg,'xwin16.png:2')
      ?}
   ?};

   {? _can_continue>0
   ||
      B_USRROL.index('B_ROLE');
      B_USRROL.prefix(B_ROLE.ref());
      {? B_USRROL.first()
      ||
         _can_continue:=0;
         _result:=0;
         _msg:='Nie można usunąć roli: %1 ponieważ są do niej uprawnieni użytkownicy.'@[B_ROLE.NAME];
         {? _display=1
         || FUN.emsg(_msg)
         |? _display=2
         || KOMM.add(_msg,'xwin16.png:2')
         ?}
      ?}
   ?};

   B_USRROL.cntx_pop();
   B_PREL.cntx_pop()
?};
B_ROLE.cntx_pop();
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Czyści powiazania do rekordu tabeli B_ROLE
::   WE: _a - B_ROLE.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN><MODELER><PROCES><ROLE>
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystapić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

B_LANE.cntx_psh();
B_LANE.index('B_ROLE');
B_LANE.prefix(REF.FIRMA,_ref);
{? B_LANE.first()
|| {!
   |? _can_continue:=exec('delete','#b_lane',B_LANE.ref());
      B_LANE.first() & _can_continue>0
   !}
?};
B_LANE.cntx_pop();

{? _can_continue>0
|| B_ACTROL.cntx_psh();
   B_ACTROL.index('B_ROLE');
   B_ACTROL.prefix(B_ROLE.ref());
   {? B_ACTROL.first()
   || {!
      |? _can_continue:=exec('actrol_del_core','#b_role');
         B_ACTROL.first() & _can_continue>0
      !}
   ?};
   B_ACTROL.cntx_pop()
?};

{? _can_continue>0
||
   B_PROTRO.cntx_psh();
   B_PROTRO.index('UNIK');
   B_PROTRO.prefix(_ref);
   _tab:=tab_tmp(1,'PROT_KEY','STRING[100]','Nazwa pola 1'
                  ,'CAN_DEL','INTEGER','Czy można usunąć');
   {? B_PROTRO.first()
   || {!
      |?
         _prot_key:=B_PROTRO.B_PROT().PROT_KEY;

         {? _prot_key<>''
         ||
            _tab.prefix(_prot_key,);
            {? _tab.first()=0
            || _tab.blank();
               _tab.PROT_KEY:=B_PROTRO.B_PROT().PROT_KEY;
               _tab.CAN_DEL:=1;
               _tab.add()
            ?}
         ?};
         B_PROTRO.next()
      !}
   ?};
   _tab.prefix();
   _can_continue:=exec('b_protro_del','#b_role',_ref,_tab,2,0);
   B_PROTRO.cntx_pop()
?};

{? _can_continue>0
||
   _fml:="
         _result:=0;
         _ref:=_b;
         _can_continue:=1;
         B_URHIS.cntx_psh();
         B_URHIS.index('B_ROLE');
         B_URHIS.prefix(_ref);
         {? B_URHIS.first()
         || {!
            |? _can_continue:=B_URHIS.del(,1);
               B_URHIS.first() & _can_continue>0
            !}
         ?};
         B_URHIS.cntx_pop();
         {? _can_continue>0
         || _result:=1
         ?};
         _result
      ";
      _can_continue:=exec('for_each_mask','#table',B_URHIS,_fml,,,B_ROLE.ref(),1)
?};

{? _can_continue>0
||
   _fml:="
      _result:=0;
      _ref:=_b;
      _can_continue:=1;
      B_ARHIS.cntx_psh();
      B_ARHIS.index('ROLE');
      B_ARHIS.prefix(_ref);
      {? B_ARHIS.first()
      || {!
         |? _can_continue:=B_ARHIS.del(,1);
            B_ARHIS.first() & _can_continue>0
         !}
      ?};
      B_ARHIS.cntx_pop();
      {? _can_continue>0
      || _result:=1
      ?};
      _result
   ";
   _can_continue:=exec('for_each_mask','#table',B_ARHIS,_fml,,,B_ROLE.ref(),1)
?};

:: --- wszystkie powiązania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: B_ROLE - select
::----------------------------------------------------------------------------------------------------------------------
exec('b_prot_update','#b_role');

_env:=exec('env_role','#b_role');
params_set('env',_env);
_env.select();
''


\rol_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: B_ROLE - select słownik
::   WE: [_a] - STRING - typ zwracanego wyniku:
::                                              ['ref'] - B_ROLE.ref() - domyślny
::                                              'sql' - $B_ROLE.ref()
::                                              'name' - B_ROLE.NAME
::                                              'uid'  - B_ROLE.uidref()
::   WY: B_ROLE.ref lub STRING
::----------------------------------------------------------------------------------------------------------------------
_type:='ref';
{? var_pres('_a')=type_of('')
|| _type:=_a
?};

{? _type='sql' | _type='name' | _type='uid'
|| _wyn:=''
|| _wyn:=null()
?};

B_ROLE.cntx_psh();
B_ROLE.index('UNIK');
B_ROLE.prefix(REF.FIRMA);
{? B_ROLE.first() & ~B_ROLE.next()
|| {? _type='sql'
   || _wyn:=$B_ROLE.ref()
   |? _type='name'
   || _wyn:=B_ROLE.NAME
   |? _type='uid'
   || _wyn:=B_ROLE.uidref()
   || _wyn:=B_ROLE.ref()
   ?}
|? B_ROLE.first()
|| _wer:=exec('win_role_slo','#b_role');
   B_ROLE.win_sel(_wer);
   {? B_ROLE.select()
   || {? _type='sql'
      || _wyn:=$B_ROLE.ref()
      |? _type='name'
      || _wyn:=B_ROLE.NAME
      |? _type='uid'
      || _wyn:=B_ROLE.uidref()
      || _wyn:=B_ROLE.ref()
      ?}
   ?}
?};
B_ROLE.cntx_pop();
_wyn


\win_role_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: B_ROLE - okienko słownika
::----------------------------------------------------------------------------------------------------------------------
_wer:=B_ROLE.mk_sel('Role'@);
B_ROLE.win_fld(_wer,,'NAME',,,,,,,1);
B_ROLE.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
B_ROLE.win_act(_wer,,'Dołącz');
B_ROLE.win_act(_wer,,'Popraw');
_fml_del:="exec('delete_act','#b_role')";
_fml_del_gr1:="exec('delete_act_gr1','#b_role')";
_fml_del_gr2:="exec('delete_act_gr2','#b_role')";
B_ROLE.win_act(_wer,,'Formuła','Usuń'@@,,'Usuwa wybrane role'@,_fml_del,,,1,_fml_del_gr1,_fml_del_gr2,'U');
_wer


\win_role_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: B_ROLE - okienko wertowania
::----------------------------------------------------------------------------------------------------------------------
_wer:=B_ROLE.mk_sel('Role'@,,,,,,,,'U');
B_ROLE.win_fld(_wer,,'NAME',,,60,,,,1);
B_ROLE.win_act(_wer,0,'Dołącz',,,,,,1);
B_ROLE.win_act(_wer,1,'Dołącz',,,,,,1);
B_ROLE.win_act(_wer,,'Popraw',,,,"exec('edit_act_before','#b_role')");
_fml:="exec('delete_act','#b_role')";
_fml_gr1:="exec('delete_act_gr1','#b_role')";
_fml_gr2:="exec('delete_act_gr2','#b_role')";
B_ROLE.win_act(_wer,,'Formuła','&Usuń'@@,,'Usuwa wybrane role'@,_fml,,,1,_fml_gr1,_fml_gr2,'U');

_fml:="
   params_set(params_get());
   _env:=params_get().env;
   USERS.cntx_psh();
   B_USRROL.cntx_psh();
   B_USRROL.index('B_ROLE');
   B_USRROL.prefix(B_ROLE.ref());
   exec('win_usrrol','#b_role',_env,'#brole_ussro',0,1);
   B_USRROL.hdr_sel('');
   B_USRROL.hdr_sel(': %1'@[exec('B_ROLE','#to_string')]);
   B_USRROL.select();
   B_USRROL.cntx_pop();
   USERS.cntx_pop();
   ~~
";

B_ROLE.win_act(_wer,,'Formuła','Uży&tkownicy'@@,,'Użytkownicy roli'@,_fml,,,,,,'T');

B_ROLE.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['&Dołącz'@],'menu:D');
B_ROLE.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['&Popraw'@],'menu:P');
B_ROLE.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['&Usuń'@],'menu:U');
B_ROLE.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['Uży&tkownicy'@],'menu:T');
_wer


\upr_dev
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Uprawnienia - środowisko
::   WE: [_a] - obiekt środowiska
::   WE: Środowisko nadawania uprawnień
::----------------------------------------------------------------------------------------------------------------------
{? _ || __Upr:=_a ?};
__Upr


\actrol_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Usuwa B_ACTROL jeśli nie ma procesu, w którym czynność wykonywana jest w roli wg definicji B_ACTROL
::       W przeciwnym przypadku oznacza B_ACTROL jako niedodany ręcznie.
::   WE: _a - B_ACTROL.ref()
::       [_b] - B_PROC.ref - proces który omijać podczas sprawdzania
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_b_actrol:=_a;

_omit:=null();
{? var_pres('_b')=type_of(B_PROC.ref())
|| _omit:=_b
?};

_result:=1;

B_ACTROL.cntx_psh();
B_ACTROL.prefix();
{? B_ACTROL.seek(_b_actrol)
|| _b_role:=B_ACTROL.B_ROLE;
   B_ACTION.cntx_psh();
   _b_ele:=B_ACTROL.B_ACTION().B_ELE;
   B_ACTION.cntx_pop();

   _del:=1;
   B_PROC.cntx_psh();
   B_PREL.cntx_psh();
   B_PREL.index('B_ROLE');
   B_PREL.prefix(_b_role);
   _loop:=B_PREL.first();
   {!
   |? _loop
   |!
      {? _omit<>null()
      || {? B_PREL.B_PROC=_omit
         || _del:=1
         || _del:=B_PREL.TYPE='S' | B_PREL.B_PROC().ACCEPTED='N' | B_PREL.B_PROC().ACTIVE='N' | B_PREL.B_ELE<>_b_ele
         ?}
      || _del:=B_PREL.TYPE='S' | B_PREL.B_PROC().ACCEPTED='N' | B_PREL.B_PROC().ACTIVE='N' | B_PREL.B_ELE<>_b_ele
      ?};
      _loop:=_del & B_PREL.next()
   !};
   B_PREL.cntx_pop();
   B_PROC.cntx_pop();

   {? _del
   || _result:=exec('actrol_del_core','#b_role')
   || B_ACTROL.MANUAL:='N';
      _result:=B_ACTROL.put()
   ?}
?};
B_ACTROL.cntx_pop();
_result


\actrol_del_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuwa rekord B_ACTROL
::   WE: [_a] - B_ACTROL.ref lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ACTROL.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_ACTROL.cntx_psh();
{? _ref<>null()
|| B_ACTROL.prefix();
   {? B_ACTROL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _buffer:=exec('B_ACTROL','#buffer');
   _buffer.get();
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _b_action:=B_ACTROL.B_ACTION;
   _b_role:=B_ACTROL.B_ROLE;

   {? B_ACTROL.del(,1)
   ||
      _result:=exec('after_del_actrole','#b_usrdom',_b_action,_b_role);
      {? _result>0
      || _result:=exec('add_arhis','#b_history',_buffer)
      ?}
   ?};

   {? _result<=0
   || undo()
   ?};

   {? _mydo || end() ?};

   {? _result>0
   || exec('delUsrActTodo','#bi_todo',_buffer.FIRMA,_buffer.B_ROLE,null(),_buffer.B_ACTION)
   ?};
   ~~
?};
B_ACTROL.cntx_pop();
_result


\proc_actrol_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Usuwa przypisania czynności do ról jeśli nie są rącznie dodane i nie występują w procesach.
::       Analiza dotyczy czynności procesu _a.
::   WE: _a - B_PROC.ref()
::       [_b] - INTEGER - 0/[1] czy przed usunięciem uprawnienia dokonywać sprawdzenia czy istnieje aktywny i zaakceptowany
::                        proces
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_b_proc:=_a;

_chk_proc:=1;
{? var_pres('_b')=type_of(0)
|| _chk_proc:=_b
?};

_result:=0;
_can_continue:=1;

B_PREL.cntx_psh();
B_PREL.index('PREL');
B_PREL.prefix(_b_proc);
_loop:=B_PREL.first();
{!
|? _loop
|!
   {? B_PREL.CLASS='B_ACTION'
   || _can_continue:=exec('prel_actrol_del','#b_role')
   ?};
   _loop:=B_PREL.next() & _can_continue>0
!};
B_PREL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\prel_actrol_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuwa przypisania czynności do ról jeśli nie są rącznie dodane i nie występują w procesach.
::   WE: [_a] - B_PREL.ref - czynność w procesie, jeśli nie
::       [_b] - B_PROC.ref - proces który omijać podczas sprawdzania
::       [_c] - B_ROLE.ref - rola, jeśli nie podana to aktualna rola z B_PREL (B_PREL.B_ROLE)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------

_ref:=null();
{? var_pres('_a')=type_of(B_PREL.ref())
|| _ref:=_a
?};

_omit:=null();
{? var_pres('_b')=type_of(B_PROC.ref())
|| _omit:=_b
?};

_role:=null();
{? var_pres('_c')=type_of(B_ROLE.ref())
|| _role:=_c
?};

_result:=0;
_can_continue:=1;

B_PREL.cntx_psh();
{? _ref<>null()
|| B_PREL.prefix();
   {? B_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};
{? _can_continue>0
|| B_ACTROL.cntx_psh();
   B_ACTROL.index('ACTION');
   _b_action:=exec('FindInSet','#table','B_ACTION','B_ELE',B_PREL.B_ELE);

   {? _role=null()
   || _role:=B_PREL.B_ROLE
   ?};

   B_ACTROL.prefix(_b_action,_role);
   {? B_ACTROL.first()
   || {!
      |? _next:=0;
         _ref_nxt:=null();
         B_ACTROL.cntx_psh();
         {? B_ACTROL.next()
         || _ref_nxt:=B_ACTROL.ref()
         ?};
         B_ACTROL.cntx_pop();

         {? B_ACTROL.PROCES='T'
         ||
::          Sprawdzam czy jeszcze istnieje jakiś proces który nadaje uprawnienia
            _can_del:=1;
            {? exec('is_roleupr_proc','#b_role',B_ACTROL.B_ROLE,B_ACTROL.B_ACTION,_omit)>0
            || _can_del:=0
            ?};
            {? _can_del>0
            || B_ACTROL.PROCES:='N';
               _can_continue:=B_ACTROL.put()
            ?}
         ?};
         {? B_ACTROL.PROCES<>'T' & B_ACTROL.MANUAL<>'T'
         || _can_continue:=exec('actrol_del','#b_role',B_ACTROL.ref(),_omit)
         ?};
         {? _ref_nxt<>null()
         || _next:=B_ACTROL.seek(_ref_nxt)
         ?};
         _next>0 & _can_continue>0
      !}
   ?};
   B_ACTROL.cntx_pop()
?};
B_PREL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Środowisko modułu uprawnień
::   WY: obj_new()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
::UWAGA: _fld, i _mth to formułki pomocnicze, zeby wygodniej tworzyć tablicę i komentować poszczególne jej elementy
::       powiedzmy, że to będzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to będzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
   _fld('ENV_ID','System: 0 - JTerm, 1 - InTerm')
:: obsługa kontekstu okien
   ,_fld('SEL_ROLE','Rola na której stoję')
   ,_fld('SEL_USER','Użytkownik na którym stoję - zakładka "Role, użytkownicy i czynności", "Role i użytkownicy"')
   ,_fld('SEL_USER0','Użytkownik na którym stoję - zakładka "Użytkownicy, role i czynności", "Użytkownicy i role"')
   ,_fld('SEL_ACTION','Czynność na której stoję')
   ,_fld('SEL_ACTROL','B_ACTROL na którym stoję')
   ,_fld('SEL_USRROL','B_USRROL na którym stoję')
   ,_fld('TAB_ROLE','Tabelka tymczasowa z refami zaznaczonych ról')
   ,_fld('TAB_ROLE_ALL','Tabelka tymczasowa z refami zaznaczonych ról')
   ,_fld('TAB_ACTIONS','Tabelka tymczasowa z refami zaznaczonych czynności')
   ,_fld('CRC_ROLE','Suma kontrolna zaznaczonych rekordów w tabeli ról')
   ,_fld('TAB_USERS','Tabelka tymczasowa z refami zaznaczonych użytkowników')
   ,_fld('CRC_USERS','Suma kontrolna zaznaczonych rekordów w tabeli użytkowników')
   ,_fld('CLEAR_ROLE','Znacznik czy wyczyścić zaznaczenie w tabeli wszystkich ról')
   ,_fld('CLEAR_USERS','Znacznik czy wyczyścić zaznaczenie w tabeli wszystkich użytkowników')
   ,_fld('CLEAR_ACTIONS','Znacznik czy wyczyścić zaznaczenie w tabeli wszystkich czynności')

:: Okna
   ,_fld('WIN_MAIN','Główne okno grupowe')
   ,_fld('WIN_ROLE_ALL','Okno wertowania wszystkich ról (interm - akcja "Czynności")')
   ,_fld('WIN_ROLE_ALL2','Okno wertowania wszystkich ról (tylko interm)')
   ,_fld('WIN_ROLE_ALL3','Okno wertowania wszystkich ról (interm - akcje "Czynności","Nadaj")')
   ,_fld('WIN_ROLE_USR','Okno wertowania ról użytkownika')
   ,_fld('WIN_USR_ROLE','Okno wertowania użytkowników przypisanych do roli')
   ,_fld('WIN_USR_ALL','Okno wertowania wszystkich użytkowników (interm - akcja "Nadaj")')
   ,_fld('WIN_USR_ALL2','Okno wertowania wszystkich użytkowników (akcje "Kopiuj z", "Czynności")')
   ,_fld('WIN_ACT_ROLE','Okno wertowania czynności do roli')
   ,_fld('WIN_ACT_ROLE2','Okno wertowania czynności do roli (tylko jterm)')
   ,_fld('WIN_ACT_ALL','Okno wertowania wszystkich czynności (interm - akcja "Nadaj")')
   ,_fld('WIN_PERM_USR','Okno uprawnień do danych (tylko jterm)')

:: Identyfikatory okien
   ,_fld('wid_main','Identyfikator okna')
   ,_fld('wid_role_all','Identyfikator okna')
   ,_fld('wid_role_all2','Identyfikator okna')
   ,_fld('wid_role_all3','Identyfikator okna')
   ,_fld('wid_role_usr','Identyfikator okna')
   ,_fld('wid_usr_all','Identyfikator okna')
   ,_fld('wid_usr_all2','Identyfikator okna')
   ,_fld('wid_usr_role','Identyfikator okna')
   ,_fld('wid_act_all','Identyfikator okna')
   ,_fld('wid_act_role','Identyfikator okna')
   ,_fld('wid_act_role2','Identyfikator okna')
   ,_fld('wid_perm_usr','Identyfikator okna')

   ,_fld('tit_main','Tytuł głównego okienka')
   ,_fld('tit_role_usr','Tytuł zakładki "Role, użytkownicy i czynności" albo "Role i użytkownicy"')
   ,_fld('tit_role_act','Tytuł zakładki "Role i czynności"')
   ,_fld('tit_usr_role','Tytuł zakładki "Użytkownicy, role i czynności" albo "Użytkownicy i role"')

:: metody
   ,_mth('select','uruchamia wertowanie okna')
   ,_mth('clear','czyści zmienne')

);
_env.ENV_ID:=0;
_env.SEL_ROLE:=null();
_env.SEL_USER:=null();
_env.SEL_USER0:=null();
_env.SEL_ACTION:=null();
_env.SEL_ACTROL:=null();
_env.SEL_USRROL:=null();
_env.TAB_ROLE:=~~;
_env.TAB_ROLE_ALL:=~~;
_env.CRC_ROLE:=0;
_env.TAB_USERS:=~~;
_env.CRC_USERS:=0;
_env.TAB_ACTIONS:='';
_env.CLEAR_ROLE:=0;
_env.CLEAR_USERS:=0;
_env.CLEAR_ACTIONS:=0;

_env.WIN_MAIN:='';
_env.WIN_ROLE_ALL:='';
_env.WIN_ROLE_ALL2:='';
_env.WIN_ROLE_ALL3:='';
_env.WIN_ROLE_USR:='';
_env.WIN_USR_ROLE:='';
_env.WIN_USR_ALL:='';
_env.WIN_USR_ALL2:='';
_env.WIN_ACT_ROLE:='';
_env.WIN_ACT_ROLE2:='';
_env.WIN_ACT_ALL:='';
_env.WIN_PERM_USR:='';

_env.wid_main:='#upr_main';
_env.wid_role_all:='#upr_role_all';
_env.wid_role_all2:='#upr_role_all2';
_env.wid_role_all3:='#upr_role_all3';
_env.wid_role_usr:='#upr_role_usr';
_env.wid_usr_all:='#upr_usr_all';
_env.wid_usr_all2:='#upr_usr_all2';
_env.wid_usr_role:='#upr_usr_role';
_env.wid_act_all:='#upr_act_all';
_env.wid_act_role:='#upr_act_role';
_env.wid_act_role2:='#upr_act_role2';
_env.wid_perm_usr:='#upr_perm_usr';

_env.tit_main:='Nadawanie uprawnień';
_env.tit_role_usr:='';
_env.tit_role_act:='';
_env.tit_usr_role:='';

_env.clear:="

   .WIN_MAIN:='';
   .CRC_ROLE:=0;
   .CRC_USERS:=0;
   .CLEAR_ROLE:=0;
   .CLEAR_USERS:=0;
   .CLEAR_ACTIONS:=0;

   {? var_pres('TAB_ROLE',.)>100
   || obj_del(.TAB_ROLE)
   ?};
   {? var_pres('TAB_ROLE_ALL',.)>100
   || obj_del(.TAB_ROLE_ALL)
   ?};
   {? var_pres('TAB_USERS',.)>100
   || obj_del(.TAB_USERS)
   ?};
   {? var_pres('TAB_ACTIONS',.)>100
   || obj_del(.TAB_ACTIONS)
   ?};
   .SEL_ROLE:=null();
   .SEL_USER:=null();
   .SEL_ACTION:=null();
   .SEL_ACTROL:=null();
   .SEL_USRROL:=null();
   ~~
";

_env.select:="

   B_ROLE.cntx_psh();
   B_ACTROL.cntx_psh();
   B_USRROL.cntx_psh();
   B_ROLE.cntx_psh();
   B_ACTION.cntx_psh();
   USERS.cntx_psh();
   params_set(params_get());

   _result:=0;

:: Zakładki
   {? .ENV_ID=1
   || .tit_role_usr:='Role i użytkownicy'@;
      .tit_role_act:='Role i czynności'@;
      .tit_usr_role:='Użytkownicy i role'@
   || .tit_role_usr:='Role, użytkownicy i czynności'@;
      .tit_usr_role:='Użytkownicy, role i czynności'@
   ?};

:: Tworzymy okna
   {? .ENV_ID=1
   || .WIN_ROLE_ALL:=exec('win_role','#b_role',.,.wid_role_all,1)
   || .WIN_ROLE_ALL:=exec('win_role','#b_role',.,.wid_role_all)
   ?};
   .WIN_USR_ROLE:=exec('win_usrrol','#b_role',.,.wid_usr_role,,1,'R');
   .WIN_ACT_ROLE:=exec('win_actrol','#b_role',.,.wid_act_role,'ACTION',1,1);
   {? .ENV_ID=1
   || .WIN_USR_ALL:=exec('win_user_all','#b_role',.,.wid_usr_all,0,0,1)
   || .WIN_USR_ALL:=exec('win_user_all','#b_role',.,.wid_usr_all)
   ?};
   {? .ENV_ID=1
   || .WIN_ACT_ALL:=exec('win_act_all','#b_role',.,.wid_act_all,1,,1)
   || .WIN_ACT_ALL:=exec('win_act_all','#b_role',.,.wid_act_all,1)
   ?};
   .WIN_USR_ALL2:=exec('win_user_all','#b_role',.,.wid_usr_all2,0,1);
   .WIN_ROLE_USR:=exec('win_usrrol','#b_role',.,.wid_role_usr,,1,'U');
   {? .ENV_ID=1
   || .WIN_ROLE_ALL2:=exec('win_role','#b_role',.,.wid_role_all2)
   ?};
   {? .ENV_ID=1
   || .WIN_ROLE_ALL3:=exec('win_role','#b_role',.,.wid_role_all3,1,1)
   || .WIN_ROLE_ALL3:=exec('win_role','#b_role',.,.wid_role_all3)
   ?};
   {? .ENV_ID=0
   || .WIN_ACT_ROLE2:=exec('win_actrol','#b_role',.,.wid_act_role2,'ACTION');
      .WIN_PERM_USR:=Perm.userWin()
   ?};

:: Inicjalizacja dnd
   {? .ENV_ID=0
   || exec('dnd_act_init','#b_role',.,1);
      exec('dnd_usr_init','#b_role',.,1);
      exec('dnd_usrrol_init','#b_role',.,1);
      exec('dnd_role_init','#b_role',.,1);
      exec('dnd_actrol_init','#b_role',.,1)
   ?};

:: Tworzymy okno główne
   {? .ENV_ID=1
   || .WIN_MAIN:=exec('grp_make_role_usr_act','#b_role1',.)
   || .WIN_MAIN:=exec('grp_make_role','#b_role',.)
   ?};

:: Ustawiamy kontekst
   {? B_ROLE.f_active()>0
   || B_ROLE.f_clear(1)
   ?};
   B_ROLE.index('UNIK');
   B_ROLE.prefix(REF.FIRMA);
   B_ROLE.first();

   {? USERS.f_active()>0
   || USERS.f_clear(1)
   ?};
   USERS.index('USR_KKOD');
   USERS.prefix();
   USERS.first();
   .SEL_USER:=USERS.ref();

   B_ACTION.index('UNIK');
   B_ACTION.prefix();
   B_ACTION.first();
   .SEL_ACTION:=B_ACTION.ref();

:: Pokazujemy okno
   _result:=B_ROLE.select();

   .clear();

   B_ACTION.cntx_pop();
   {? B_ACTION.f_active()>0
   || B_ACTION.f_clear()
   ?};
   USERS.cntx_pop();
   {? USERS.f_active()>0
   || USERS.f_clear()
   ?};
   B_ROLE.cntx_pop();
   B_ACTROL.cntx_pop();
   {? B_ACTROL.f_active()>0
   || B_ACTROL.f_clear()
   ?};
   B_USRROL.cntx_pop();
   {? B_USRROL.f_active()>0
   || B_USRROL.f_clear()
   ?};
   B_ROLE.cntx_pop();
   _result
";
_env


\win_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania ról
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role') albo exec('env','#b_role1')
::       _b - STRING - identyfikator okna
::       [_c] - INTEGER - [0]/1 - czy dodawać akcję "Czynności roli"
::       [_d] - INTEGER - [0]/1 - czy dodawać akcję "Nadaj" (tylko interm)
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;
_view_actions:=0;
{? var_pres('_c')=type_of(0)
|| _view_actions:=_c
?};
_act_select:=0;
{? var_pres('_d')=type_of(0)
|| _act_select:=_c
?};

_tab:=B_ROLE;

_title:='Role systemu'@;

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');

_width:=30;
::{? _env.ENV_ID=0
::|| {? _env.MODE='USER'
::   || _width:=39
::   ?}
::?};
_tab.win_fld(_wer,,'NAME',,,_width,,,'Nazwa'@,0);

{? _act_select>0 & _env.ENV_ID=1
|| _formula:="
      params_set(params_get());
      _env:=params_get().env;
::    Przenoszę rolę
      exec('tab_role_all','#b_role1');
      _env.CLEAR_ROLE:=1;
      exec('add_usrrole_role','#b_role',_env.TAB_ROLE_ALL,1);
      _env.CLEAR_ROLE:=0;
      ~~
   ";

   _gr1:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_USRROL.sel_size()>0
      || B_USRROL.sel_adel()
      ?};
::    Przenoszę rolę
      exec('tab_role_all','#b_role1');
      _env.CLEAR_ROLE:=1;
      exec('add_usrrole_role','#b_role',_env.TAB_ROLE_ALL,1);
      _env.CLEAR_ROLE:=0;
      0
   ";

   _help:='Nadaje uprawnienie do roli dla użytkownika z listy.'@;
   _tab.win_act(_wer,,'Formuła','Nadaj'@@,,_help,_formula,,,1,_gr1,,'N')

?};

{? _view_actions>0
|| _formula:="
      params_exec('show_role_actions','#b_role1',B_ROLE.ref())
   ";
   _tab.win_act(_wer,0,'Formuła','Czynności roli'@@,,,_formula,,,,,,'C')
?};

_formula:="
   params_exec('show_role_prot','#b_role',B_ROLE)
";
_tab.win_act(_wer,0,'Formuła','Grupy ochron &roli'@@,,,_formula,,,,,,'R');

_tab.win_act(_wer,,'Rekord',,,,"exec('rekprzed','color','B_ROLE#01')");
_tab.win_act(_wer,,'Kolejność');
_tab.win_act(_wer,,'Formuła','Legenda'@@,,'Opis znaczenia kolorów wierszy'@,,"exec('legenda','color','B_ROLE#01')",,,,,'L');

_tab.win_sel(_wer);
_wer


\win_usrrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania użytkowników
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role') albo exec('env','#b_role1')
::       _b - STRING - identyfikator okna
::       [_c] - INTEGER - czy dodawać akcje edycyjne
::       [_d] - INTEGER - czy dodawać akcję: Grupy ochron
::       [_e] - STRING - R - użytkownicy roli (domyślnie), U - role użytkownika
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;

_actions:=1;
{? var_pres('_c')=type_of(0)
|| _actions:=_c
?};

_act_prot:=0;
{? var_pres('_d')=type_of(0)
|| _act_prot:=_d
?};

_tryb:='R';
{? var_pres('_e')=type_of('') & (_e='R' | _e='U')
|| _tryb:=_e
?};

_tab:=B_USRROL;

_title:='???';

{? _tryb='R'
|| _title:='Użytkownicy roli'@
|| _title:='Role użytkownika'@
?};

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');
{? _tryb='R'
|| _tab.win_fld(_wer,USERS,'AKT',,,5,,,'Aktywny'@,,,2,,"\'T\'","\'N\'");
   _tab.win_fld(_wer,,'USERS','KOD',,28,,,'Login'@,0);
   _tab.win_fld(_wer,,'USERS','DANE',,30,,,'Nazwa'@,0)
|? _tryb='U'
|| _tab.win_fld(_wer,,'B_ROLE','NAME',,55,,,'Nazwa'@,0)
?};

{? _actions>0 & _env.ENV_ID=0
|| {? _tryb='R'
   || _formula:="
         params_set(params_get());
         _env:=params_get().env;
::       Przenoszę użytkownika
         _env.CLEAR_USERS:=1;
         exec('add_usrrole_user','#b_role',_env.TAB_USERS,1);
         _env.CLEAR_USERS:=0;
         ~~
      ";
      _gr1:="
         params_set(params_get());
         _env:=params_get().env;
         {? B_USRROL.sel_size()>0
         || B_USRROL.sel_adel()
         ?};
::       Przenoszę użytkownika
         _env.CLEAR_USERS:=1;
         exec('add_usrrole_user','#b_role',_env.TAB_USERS,1);
         _env.CLEAR_USERS:=0;
         0
      "
   || _formula:="
         params_set(params_get());
         _env:=params_get().env;
::       Przenoszę rolę
         _env.CLEAR_ROLE:=1;
         exec('add_usrrole_role','#b_role',_env.TAB_ROLE_ALL,1);
         _env.CLEAR_ROLE:=0;
         ~~
      ";
      _gr1:="
         params_set(params_get());
         _env:=params_get().env;
         {? B_USRROL.sel_size()>0
         || B_USRROL.sel_adel()
         ?};
::       Przenoszę rolę
         _env.CLEAR_ROLE:=1;
         exec('add_usrrole_role','#b_role',_env.TAB_ROLE_ALL,1);
         _env.CLEAR_ROLE:=0;
         0
      "
   ?};
   _help:='Nadaje uprawnienie do roli dla użytkownika z listy.'@;
   _tab.win_act(_wer,0,'Formuła','Nadaj'@@,,_help,_formula,,,1,_gr1,,'N');
   _tab.win_act(_wer,1,'Formuła','Nadaj'@@,,_help,_formula,,,,,,'N');
   _btn:=_tab.win_btn(_wer,'text=<<<,panel=right,align=begin','menu:N');
   _tab.btn_opt(_btn,'tooltip='+_help)
?};

{? _actions>0
|| _formula:=$("
      params_exec('delete_usrrol_act','#b_role',,,'"+_tryb+"')
   ");
   _gr1:=$("
      params_exec('delete_usrrol_act_gr1','#b_role','"+_tryb+"')
   ");
   _gr2:=$("
      params_exec('delete_usrrol_act_gr2','#b_role','"+_tryb+"')
   ");
   _help:='Odbiera uprawnienie do roli dla użytkownika z listy.'@;
   _tab.win_act(_wer,0,'Formuła','Odbierz'@@,,_help,_formula,,,1,_gr1,_gr2,'O');
   _btn:=_tab.win_btn(_wer,'text=>>>,panel=right,align=begin','menu:O');
   _tab.btn_opt(_btn,'tooltip='+_help)
?};

{? _tryb='U' & _env.ENV_ID=1
|| _formula:="
      params_exec('show_role_actions','#b_role1',B_ROLE.ref())
   ";
   _tab.win_act(_wer,0,'Formuła','Czynności roli'@@,,,_formula,,,,,,'C')
?};

{? _act_prot>0
|| {? _tryb='R'
   || _formula:="
         params_set(params_get());
         _env:=params_get().env;
         exec('user_prot_select','#b_role');
         ~~
      ";
      _tab.win_act(_wer,0,'Formuła','&Grupy ochron użytkownika'@@,,,_formula,,,,,,'G')
   |? _tryb='U'
   || _formula:="
         params_exec('show_role_prot','#b_role',B_USRROL.B_ROLE)
      ";
      _tab.win_act(_wer,0,'Formuła','Grupy ochron &roli'@@,,,_formula,,,,,,'R')
   ?}
?};

{? _tryb='R'
|| _formula:="B_USRROL.USERS();~~";
   _tab.win_act(_wer,0,'Rekord',,,,_formula)
?};
_tab.win_act(_wer,,'Kolejność');
_tab.win_sel(_wer);
_wer


\win_user_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania użytkowników
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role') albo exec('env','#b_role1')
::       _b - STRING - identyfikator okna
::       [_c] - INTEGER - [0]/1 - czy dodawać akcję wybierz
::       [_d] - INGEGER - [0]/1 - czy dodawać akcję i przycisk 'kopiuj z' oraz Czynności
::       [_e] - INTEGER - [0]/1 - czy dodawać akcję "Nadaj" (tylko interm)
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;
_act_select:=0;
{? var_pres('_c')=type_of(0)
|| _act_select:=_c
?};
_act_copy:=0;
{? var_pres('_d')=type_of(0)
|| _act_copy:=_d
?};
_act_select1:=0;
{? var_pres('_e')=type_of(0)
|| _act_select1:=_e
?};

_tab:=USERS;

_title:='Użytkownicy systemu'@;

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');
_width:=8;
::{? _env.ENV_ID=0
::|| {? var_pres('MODE',_env)>0 & _env.MODE='ROLE'
::   || _width:=20
::   ?}
::?};
_tab.win_fld(_wer,,'AKT',,,5,,,'Aktywny'@,0,,2,,"\'T\'","\'N\'");
_tab.win_fld(_wer,,'KOD',,,_width,,,'Nazwa'@,0);
_tab.win_fld(_wer,,'DANE',,,30,,,'Dane użytkownika'@,0);

{? _act_select1>0 & _env.ENV_ID=1
|| _formula:="
      params_set(params_get());
      _env:=params_get().env;
::    Przenoszę użytkownika
      exec('tab_users','#b_role1');
      _env.CLEAR_USERS:=1;
      exec('add_usrrole_user','#b_role',_env.TAB_USERS,1);
      _env.CLEAR_USERS:=0;
      ~~
   ";

    _gr1:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_USRROL.sel_size()>0
      || B_USRROL.sel_adel()
      ?};
::    Przenoszę użytkownika
      exec('tab_users','#b_role1');
      _env.CLEAR_USERS:=1;
      exec('add_usrrole_user','#b_role',_env.TAB_USERS,1);
      _env.CLEAR_USERS:=0;
      0
   ";

   _help:='Nadaje uprawnienie do roli dla użytkownika z listy.'@;
   _tab.win_act(_wer,,'Formuła','Nadaj'@@,,_help,_formula,,,1,_gr1,,'N')
?};

{? _act_copy>0
||
   _formula:="
      params_set(params_get());
      _env:=params_get().env;

      exec('copy_from_act_grp','#b_role');
      ~~
   ";
   _tab.win_act(_wer,0,'Formuła','K&opiuj z'@@,,,_formula,,,1,_formula,,'O');
   {? _env.ENV_ID=0
   || _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['K&opiuj z'@],'menu:O')
   ?};

   _formula:="
      params_set(params_get());
      _env:=params_get().env;

      exec('user_actions','#b_role',USERS.ref());
      ~~
   ";
   _tab.win_act(_wer,0,'Formuła','&Czynności'@@,,,_formula,,,,,,'C');
   {? _env.ENV_ID=0
   || _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['&Czynności'@],'menu:C')
   ?}
?};

{? _act_select>0
||
   _formula:="
      params_set(params_get());
      _env:=params_get().env;

      sel_exit()
   ";
   _tab.win_act(_wer,0,'Formuła','Wybierz'@@,,,_formula,,1,,,,'W')
?};

_formula:="
   params_set(params_get());
   _env:=params_get().env;
   exec('user_prot_select','#b_role');
   ~~
";
_tab.win_act(_wer,0,'Formuła','&Grupy ochron użytkownika'@@,,,_formula,,,,,,'G');

_tab.win_act(_wer,,'Kolejność');

_tab.win_sel(_wer);
_wer


\win_actrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania czynności
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role') albo exec('env','#b_role1')
::       _b - STRING - identyfikator okna
::       _c - STRING - tryb tworzenia okna: 'ACTION', 'ROLE'
::       [_d] - INTEGER - 0/1 - czy dodawać akcję 'Odbierz'
::       [_e] - INTEGER - [0]/1 - czy dodawać akcje 'Pokaż role' i 'Pokaż procesy'
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;
_mode:=_c;

_act_del:=0;
{? var_pres('_d')=type_of(0)
|| _act_del:=_d
?};

_act_show:=0;
{? var_pres('_e')=type_of(0)
|| _act_show:=_e
?};

_tab:=B_ACTROL;

{? _mode='ACTION'
|| _title:='Czynności roli'@
|? _mode='ROLE'
|| _title:='Role czynności'@
?};

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');
_width:=31;
_widt2:=-11;
::{? _env.ENV_ID=0
::|| {? _env.MODE='USER'
::   || _width:=11;
::      _widt2:=-7
::   ?}
::?};

{? _mode='ACTION'
|| _tab.win_fld(_wer,,'B_ACTION','UID',,-14,,,'Identyfikator'@,0);
   _tab.win_fld(_wer,,'B_ACTION','NAME',,_width,,,'Nazwa'@,0);
   _tab.win_fld(_wer,,'PROCES',,,_widt2,,,'Przez proces?'@,0,'Czy uprawnienie zostało nadane za pomocą procesu?'@,2,,"\'T\'","\'N\'");
   _tab.win_fld(_wer,,'MANUAL',,,_widt2,,,'Ręcznie?'@,0,'Czy uprawnienie zostało nadane ręcznie?'@,2,,"\'T\'","\'N\'")
|? _mode='ROLE'
|| _tab.win_fld(_wer,,'B_ROLE','NAME',,30,,,'Nazwa'@,0)
?};

{? _act_del>0
||
   {? _env.ENV_ID=0
   || _formula:="
         params_set(params_get());
         _env:=params_get().env;
::       Przenoszę czynność systemu
         _env.CLEAR_USERS:=1;
         exec('add_actrole','#b_role',_env.TAB_ACTIONS,1);
         _env.CLEAR_USERS:=0;
         ~~
      ";
      _gr1:="
         params_set(params_get());
         _env:=params_get().env;
         {? B_ACTROL.sel_size()>0
         || B_ACTROL.sel_adel()
         ?};
::       Przenoszę czynność systemu
         _env.CLEAR_USERS:=1;
         exec('add_actrole','#b_role',_env.TAB_ACTIONS,1);
         _env.CLEAR_USERS:=0;
         0
      ";
      _help:='Nadaje uprawnienie roli do czynności z listy.'@;
      _tab.win_act(_wer,0,'Formuła','Nadaj'@@,,_help,_formula,,,1,_gr1,,'N');
      _tab.win_act(_wer,1,'Formuła','Nadaj'@@,,_help,_formula,,,,,,'N');
      _btn:=_tab.win_btn(_wer,'text=<<<,panel=right,align=begin','menu:N');
      _tab.btn_opt(_btn,'tooltip='+_help)
   ?};

   _formula:="
      params_exec('delete_actrol_act','#b_role')
   ";
   _gr1:="
      params_exec('delete_actrol_act_gr1','#b_role')
   ";
   _gr2:="
      params_exec('delete_actrol_act_gr2','#b_role')
   ";
   _help:='Odbiera uprawnienie roli do czynności z listy.'@;
   _tab.win_act(_wer,0,'Formuła','Odbierz'@@,,_help,_formula,,,1,_gr1,_gr2,'O');
   {? _env.ENV_ID=0
   || _btn:=_tab.win_btn(_wer,'text=>>>,panel=right,align=begin','menu:O');
      _tab.btn_opt(_btn,'tooltip='+_help)
   ?}
?};

{? _act_show>0
|| _formula:="
      params_exec('show_action_roles','#b_role',B_ACTROL.B_ACTION)
   ";
   _tab.win_act(_wer,0,'Formuła','Pokaż role'@@,,,_formula,,,,,,'P');

   _formula:="
      params_exec('show_role_proc','#b_role',B_ACTROL.B_ROLE,B_ACTROL.B_ACTION)
   ";
   _tab.win_act(_wer,0,'Formuła','Pokaż p&rocesy'@@,,,_formula,,,,,,'R')

?};

::_tab.win_act(_wer,0,'Formuła','Akcja',,,_formula);
_tab.win_act(_wer,,'Formuła','Opis &czynności'@@,,,"exec('help','#help',B_ACTROL.B_ACTION().UID)",,,,,,'C');

_tab.win_act(_wer,,'Rekord',,,,"exec('rekprzed','color','B_ACTROL#01')");
_tab.win_act(_wer,,'Kolejność');
_tab.win_act(_wer,,'Formuła','Legenda'@@,,'Opis znaczenia kolorów wierszy'@,,"exec('legenda','color','B_ACTROL#01')",,,,,'L');

_tab.win_sel(_wer);

_wer


\win_act_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno wertowania czynności
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role') albo exec('env','#b_role1')
::       _b - STRING - identyfikator okna
::       [_c] - INTEGER - [0]/1 - czy dodawać akcje 'Pokaż role'
::       [_d] - STRING - tytuł okna, jeśli nie podane to Czynności systemu
::       [_e] - INTEGER - [0]/1 - czy dodawać akcję "Nadaj" (tylko interm)
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;

_act_show:=0;
{? var_pres('_c')=type_of(0)
|| _act_show:=_c
?};

_tab:=B_ACTION;

_title:='Czynności systemu'@;
{? var_pres('_d')=type_of('')
|| _title:=_d
?};

_act_select:=0;
{? var_pres('_e')=type_of(0) & _env.ENV_ID=1
|| _act_select:=_e
?};

_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');
_tab.win_fld(_wer,,'UID',,,25,,,'Identyfikator'@,0);
_tab.win_fld(_wer,,'NAME',,,33,,,'Nazwa'@,0);

{? _act_select>0
|| _formula:="
      params_set(params_get());
      _env:=params_get().env;
::    Przenoszę czynność systemu
      exec('tab_actions','#b_role1');
      _env.CLEAR_USERS:=1;
      exec('add_actrole','#b_role',_env.TAB_ACTIONS,1);
      _env.CLEAR_USERS:=0;
      ~~
   ";
   _gr1:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_ACTROL.sel_size()>0
      || B_ACTROL.sel_adel()
      ?};
::    Przenoszę czynność systemu
      exec('tab_actions','#b_role1');
      _env.CLEAR_USERS:=1;
      exec('add_actrole','#b_role',_env.TAB_ACTIONS,1);
      _env.CLEAR_USERS:=0;
      0
   ";
   _help:='Nadaje uprawnienie roli do czynności z listy.'@;
   _tab.win_act(_wer,0,'Formuła','Nadaj'@@,,_help,_formula,,,1,_gr1,,'N')
?};

{? _act_show>0
|| _formula:="
      params_exec('show_action_roles','#b_role',B_ACTION.ref())
   ";
   _tab.win_act(_wer,0,'Formuła','Pokaż role'@@,,,_formula,,,,,,'P')
?};

_tab.win_act(_wer,,'Formuła','Opis &czynności'@@,,,"exec('help','#help',cur_tab(1,1).UID)",,,,,,'C');
_tab.win_act(_wer,,'Rekord',,,,"exec('rekprzed','color','B_ACTION#01')");
_tab.win_act(_wer,,'Kolejność');
_tab.win_act(_wer,,'Formuła','Legenda'@@,,'Opis znaczenia kolorów wierszy'@,,"exec('legenda','color','B_ACTION#01')",,,,,'L');

_tab.win_sel(_wer);
_wer


\grp_make_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno grupowe
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=B_ROLE;
{? _env.WIN_MAIN=''
||
   _grpbefor:="
         params_set(params_get());
         _env:=params_get().env;

         grp_disp(USERS,_env.WIN_USR_ALL);
         grp_disp(B_ACTION,_env.WIN_ACT_ALL);
         ~~
      ";
:: Okno główne
   {? exec('runtime_r10','#system')>0
   || _grp:=_tab.grp_make(_env.tit_main,_grpbefor,_env.wid_main,1,1,,,,'jterm')
   || _grp:=_tab.grp_make(_env.tit_main,_grpbefor,_env.wid_main,1,1)
   ?};

:: Okno role, zakładka "Role, użytkownicy i czynności"
   _before:="{? _a || B_ROLE.f_clear(1);B_ROLE.index('UNIK');B_ROLE.prefix(REF.FIRMA) ?}; ~~";
   _rfr:="params_set(params_get());exec('after_rfr_role_main','#b_role')";
   _tab.grp_sel(_grp,B_ROLE,_env.WIN_ROLE_ALL,_env.tit_role_usr,_rfr,,,20,_before,,,1,'maximized_with_title');

:: Okno użytkownicy ról
   _tab.tab_splt(_grp,,'vertical','prawygorny');
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_USRROL.f_active()>0 & B_USRROL.sel_size()=0
      || B_USRROL.f_rfresh()
      ?};
      ~~
   ";
   _rfr:="params_exec('after_rfr_usrrol','#b_role')";
   _tab.grp_sel(_grp,B_USRROL,_env.WIN_USR_ROLE,,_rfr,,,,_before,,,,'maximized_with_title');

:: Okno czynności ról
   _tab.tab_splt(_grp,'prawygorny','horizontal','prawydolny',20);
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_ACTROL.f_active()>0 & B_ACTROL.sel_size()=0
      || B_ACTROL.f_rfresh()
      ?};
      ~~
   ";
   _rfr:="params_exec('after_rfr_actrol','#b_role')";
   _tab.grp_sel(_grp,B_ACTROL,_env.WIN_ACT_ROLE,,_rfr,,,,,_before,,,,'maximized_with_title');

:: Okno użytkownicy wszyscy
   _tab.tab_splt(_grp,'prawygorny','vertical','prawy2');
   _before:="
      _user_action:=_a;
      params_set(params_get());
      _env:=params_get().env;
      {? _env.SEL_USER<>null()
      || {? USERS.f_active()>0 & USERS.sel_size()=0
         || USERS.f_rfresh();
            USERS.f_seek(_env.SEL_USER)
         || USERS.seek(_env.SEL_USER)
         ?}
      || {? USERS.f_active()>0 & USERS.sel_size()=0
         || USERS.f_rfresh()
         ?}
      ?};
      ~~
   ";
   _after:="
      params_set(params_get());
      _env:=params_get().env;
::    Zapamiętuję zaznaczenie
      exec('tab_users','#b_role1');
      ~~
   ";
   _rfr:="params_exec('after_rfr_users','#b_role')";
   _tab.grp_sel(_grp,USERS,_env.WIN_USR_ALL,,_rfr,,,,_before,_after,,,'maximized_with_title');

:: Okno czynności wszystkie
   _tab.tab_splt(_grp,'prawydolny','vertical','prawydolny2');
   _before:="
      _user_action:=_a;
      params_set(params_get());
      _env:=params_get().env;
      {? _env.SEL_ACTION<>null()
      || {? B_ACTION.f_active()>0 & B_ACTION.sel_size()=0
         || B_ACTION.f_rfresh();
            B_ACTION.f_seek(_env.SEL_ACTION)
         || B_ACTION.seek(_env.SEL_ACTION)
         ?}
      || {? B_ACTION.f_active()>0 & B_ACTION.sel_size()=0
         || B_ACTION.f_rfresh()
         ?}
      ?};
      ~~
   ";
   _after:="
      params_set(params_get());
      _env:=params_get().env;
::    Zapamiętuję zaznaczenie
      exec('tab_actions','#b_role1');
      ~~
   ";
   _rfr:="params_exec('after_rfr_actions','#b_role')";
   _tab.grp_sel(_grp,B_ACTION,_env.WIN_ACT_ALL,,_rfr,,,,_before,_after,,,'maximized_with_title');

:: okno użytkownicy, zakładka "Użytkownicy, role i czynności"
   _before:="USERS.f_clear(1);~~";
   _rfr:="params_set(params_get());exec('after_rfr_users_main','#b_role')";
   _tab.grp_sel(_grp,USERS,_env.WIN_USR_ALL2,_env.tit_usr_role,_rfr,,,20,_before,,,,'maximized_with_title');

:: Okno role użytkowników
   _tab.tab_splt(_grp,,'vertical','prawygorny');
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_USRROL.f_active()>0 & B_USRROL.sel_size()=0
      || B_USRROL.f_rfresh()
      ?};
      ~~
   ";
   _rfr:="params_exec('after_rfr_role','#b_role')";
   _tab.grp_sel(_grp,B_USRROL,_env.WIN_ROLE_USR,,_rfr,,,,_before,,,,'maximized_with_title');

:: Okno uprawnienia do danych
   _tab.tab_splt(_grp,'prawygorny','horizontal','prawydolny',20);
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      ~~
   ";
   _tab.grp_sel(_grp,B_PERM_U,_env.WIN_PERM_USR,,,,,,_before,,,,'maximized_with_title');

:: Okno wszystkie role
   _tab.tab_splt(_grp,'prawygorny','vertical','prawy2');
   _before:="
      _user_action:=_a;
      params_set(params_get());
      _env:=params_get().env;
      {? _env.SEL_ROLE<>null()
      || {? B_ROLE.f_active()>0 &  B_ROLE.sel_size()=0
         || B_ROLE.f_rfresh();
            B_ROLE.f_seek(_env.SEL_ROLE)
         || B_ROLE.seek(_env.SEL_ROLE)
         ?}
      || {? B_ROLE.f_active()>0 & B_ROLE.sel_size()=0
         || B_ROLE.f_rfresh()
         ?}
      ?};
      ~~
   ";
   _after:="
      params_set(params_get());
      _env:=params_get().env;
::    Zapamiętuję zaznaczenie
      exec('tab_role_all','#b_role1');
      ~~
   ";
   _rfr:="params_exec('after_rfr_role','#b_role')";
   _tab.grp_sel(_grp,B_ROLE,_env.WIN_ROLE_ALL3,,_rfr,,,,_before,_after,,,'maximized_with_title');

:: Okno czynności ról
   _tab.tab_splt(_grp,'prawydolny','vertical','prawy2dolny');
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_ACTROL.f_active()>0 & B_ACTROL.sel_size()=0
      || B_ACTROL.f_rfresh()
      ?};
      ~~
   ";
   _rfr:="params_exec('after_rfr_actrol','#b_role')";
   _tab.grp_sel(_grp,B_ACTROL,_env.WIN_ACT_ROLE2,,_rfr,,,,_before,,,,'maximized_with_title');

   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\after_rfr_role_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na odśwież po w głównym oknie B_ROLE
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

{? var_pres('TAB_ROLE',_env)>100
|| obj_del(_env.TAB_ROLE)
?};
_env.SEL_USER0:=null();

:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
{? grp_empty(cur_tab(1,1),cur_win(1,1))=1
|| _can_continue:=0
?};

FIRMA.cntx_psh();
_czapa:='N';
{? REF.FIRMA().TYP='C'
|| _czapa:='T'
?};

{? _can_continue>0
||
   {? B_ROLE.sel_size()>0
   ||
::    Zaznaczenie grupowe

      B_USRROL.hdr_sel(''@);
      B_USRROL.hdr_sel(' (zaznaczenie grupowe)'@);

      B_ACTROL.hdr_sel(''@);
      B_ACTROL.hdr_sel(' (zaznaczenie grupowe)'@);

      _env.TAB_ROLE:=B_ROLE.sel_aget();

::    Sprawdzam sumę kontrolną z zaznaczenia - jeżeli się nie zmieniła to nic nie robię

      _crc:=-1;
      _sum:=sql('select SUM(CRC) as SUMA from :_a',_env.TAB_ROLE);
      {? _sum.first()
      || _crc:=_sum.SUMA
      ?};

      {? _crc<>_env.CRC_ROLE
      || _env.CRC_ROLE:=_crc;
         _can_continue:=1
      || _can_continue:=0
      ?};

      {? _can_continue>0
      ||
::       Obsługa użytkowników ról
         _tab_usr:=tab_tmp(1,
            'USERS','STRING[16]','Ref SQL USERS',
            'B_USRROL','STRING[16]','Ref SQL B_USRROL'
         );
         B_USRROL.cntx_psh();
         B_USRROL.index('WER1');
         _empty:=0;
         {? _env.TAB_ROLE.first()
         || {!
            |?
               _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
               {? _b_role<>null()
               || B_USRROL.prefix(REF.FIRMA,_b_role);
                  {? B_USRROL.first()
                  || {!
                     |?
::                      Sprawdzam czy użytkownik występuje we wszystkich zaznaczonych rolach
                        _can_add:=exec('chk_b_usrrol','#b_role',_env.TAB_ROLE,B_USRROL.USERS);

                        {? _can_add>0
                        || _tab_usr.prefix($B_USRROL.USERS);
                           {? _tab_usr.size()=0
                           || _tab_usr.blank();
                              _tab_usr.USERS:=$B_USRROL.USERS;
                              _tab_usr.B_USRROL:=$B_USRROL.ref();
                              _tab_usr.add()
                           ?}
                        ?};
                        B_USRROL.next()
                     !}
                  ||
::                   Zaznaczona rola nie ma żadnych użytkowników, więc przerywam i pokazuje pustą
::                   tabelkę użytkowników
                     _empty:=1
                  ?}
               ?};
               _env.TAB_ROLE.next() & _empty=0
            !}
         ?};
         B_USRROL.cntx_pop();
         {? _empty>0
         ||
::          Pusta dziedzina użytkowników ról
            {? B_USRROL.f_active()>0
            || B_USRROL.f_clear(1)
            ?};
            B_USRROL.index('UNIK');
            B_USRROL.prefix(null(),null(),null());

            {? USERS.f_active()>0
            || USERS.f_clear(1)
            ?};
            USERS.index('USR_KKOD');
            USERS.prefix()
         ||
::          Zakładam filtry
            USERS.prefix();
            _where:='USERS.AKT=\'T\' AND USERS.REFERENCE not in (select :_a.USERS from :_a)';
            USERS.f_set('KOD','',_where,_tab_usr);

            B_USRROL.prefix();
            _where:='B_USRROL.REFERENCE in (select :_a.B_USRROL from :_a)';
            B_USRROL.f_set('USERS(KOD)','',_where,_tab_usr);
            B_USRROL.f_first()
         ?};

::       Obsługa czynności ról
         _tab_act:=tab_tmp(1,
            'B_ACTION','STRING[16]','Ref SQL B_ACTION',
            'B_ACTROL','STRING[16]','Ref SQL B_ACTROL'
         );
         B_ACTROL.cntx_psh();
         B_ACTROL.index('B_ROLE');
         _empty:=0;
         {? _env.TAB_ROLE.first()
         || {!
            |?
               _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
               {? _b_role<>null()
               || B_ACTROL.prefix(_b_role);
                  {? B_ACTROL.first()
                  || {!
                     |?
::                   Sprawdzam czy użytkownik występuje we wszystkich zaznaczonych rolach
                        _can_add:=exec('chk_b_actrol','#b_role',_env.TAB_ROLE,B_ACTROL.B_ACTION);

                        {? _can_add>0
                        || _tab_act.prefix($B_ACTROL.B_ACTION);
                           {? _tab_act.size()=0
                           || _tab_act.blank();
                              _tab_act.B_ACTION:=$B_ACTROL.B_ACTION;
                              _tab_act.B_ACTROL:=$B_ACTROL.ref();
                              _tab_act.add()
                           ?}
                        ?};
                        B_ACTROL.next()
                     !}
                  ||
::                Zaznaczona rola nie ma żadnych użytkowników, więc przerywam i pokazuje pustą
::                tabelkę użytkowników
                     _empty:=1
                  ?}
               ?};
               _env.TAB_ROLE.next() & _empty=0
            !}
         ?};
         B_ACTROL.cntx_pop();
         {? _empty>0
         ||
::          Pusta dziedzina czynności ról
            {? B_ACTROL.f_active()>0
            || B_ACTROL.f_clear(1)
            ?};
            B_ACTROL.index('UNIK');
            B_ACTROL.prefix(null(),null(),null());


            {? B_ACTION.f_active()>0
            || B_ACTION.f_clear(1)
            ?};
            B_ACTION.index('UNIK');
            B_ACTION.prefix()
         ||
::          Zakładam filtry
            B_ACTION.prefix();
            {? _czapa='T'
            || _where:='B_ACTION.GRP_FIRM=\'T\' and B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE not in (select :_a.B_ACTION from :_a)'
            || _where:='B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE not in (select :_a.B_ACTION from :_a)'
            ?};
            B_ACTION.f_set('UID','',_where,_tab_act);

            B_ACTROL.prefix();
            _where:='B_ACTROL.REFERENCE in (select :_a.B_ACTROL from :_a)';
            B_ACTROL.f_set('B_ACTION(UID)','',_where,_tab_act);
            B_ACTROL.f_first()
         ?}
      ?}
   ||
::    Brak zaznaczenia grupowego

      B_USRROL.hdr_sel('');
      B_USRROL.hdr_sel(': %1'[B_ROLE.NAME]);

      B_ACTROL.hdr_sel('');
      B_ACTROL.hdr_sel(': %1'[B_ROLE.NAME]);

      _env.CRC_ROLE:=0;
      _env.TAB_ROLE:=tab_tmp(1,
         'REF','INTEGER','#B_ROLE'
      );
      _env.TAB_ROLE.blank();
      _env.TAB_ROLE.REF:=#B_ROLE.ref();
      _env.TAB_ROLE.add();

::    Użytkownicy ról
      B_USRROL.f_clear(1);
      B_USRROL.index('WER1');
      B_USRROL.prefix(REF.FIRMA,B_ROLE.ref());
      {? _env.SEL_USRROL<>null()
      || {? B_USRROL.seek(_env.SEL_USRROL)=0
         || B_USRROL.first()
         ?}
      || B_USRROL.first()
      ?};

::    Użytkownicy wszyscy
      USERS.prefix();
      _where:='USERS.AKT=\'T\' AND USERS.REFERENCE not in (select B_USRROL.USERS from B_USRROL where B_USRROL.B_ROLE=:_a and B_USRROL.FIRMA=:_b)';
      USERS.f_set('KOD','',_where,B_ROLE.ref(),REF.FIRMA);

::    Czynności
      B_ACTROL.f_clear(1);
      B_ACTROL.index('B_ROLE');
      B_ACTROL.prefix(B_ROLE.ref());
      {? _env.SEL_ACTROL<>null()
      || {? B_ACTROL.seek(_env.SEL_ACTROL)=0
         || B_ACTROL.first()
         ?}
      || B_ACTROL.first()
      ?};

::    Czynności wszystkie
      B_ACTION.prefix();
      {? _czapa='T'
      || _where:='B_ACTION.GRP_FIRM=\'T\' and B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE not in (select B_ACTROL.B_ACTION from B_ACTROL where B_ACTROL.B_ROLE=:_a and B_ACTROL.FIRMA=:_b)'
      || _where:='B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE not in (select B_ACTROL.B_ACTION from B_ACTROL where B_ACTROL.B_ROLE=:_a and B_ACTROL.FIRMA=:_b)'
      ?};
      B_ACTION.f_set('UID','',_where,B_ROLE.ref(),REF.FIRMA);
      ~~
   ?}
||
:: Pusta dziedzina ról
   B_USRROL.hdr_sel(''@);
   B_ACTROL.hdr_sel(''@);

   _env.SEL_ROLE:=null();
   {? B_ACTROL.f_active()>0
   || B_ACTROL.f_clear(1)
   ?};
   B_ACTROL.index('UNIK');
   B_ACTROL.prefix(null(),null(),null());

   {? B_USRROL.f_active()>0
   || B_USRROL.f_clear(1)
   ?};
   B_USRROL.index('UNIK');
   B_USRROL.prefix(null(),null(),null());


   {? USERS.f_active()>0
   || USERS.f_clear(1)
   ?};
   USERS.index('USR_KKOD');
   USERS.prefix();

   {? B_ACTION.f_active()>0
   || B_ACTION.f_clear(1)
   ?};
   B_ACTION.index('UNIK');
   B_ACTION.prefix()

?};
FIRMA.cntx_pop();
grp_disp(USERS,_env.WIN_USR_ALL);

grp_disp(B_ACTION,_env.WIN_ACT_ALL);
{? grp_empty(USERS,_env.WIN_USR_ALL)=1 | grp_empty(B_ROLE,_env.WIN_ROLE_ALL)=1
|| B_USRROL.actions_grayed(_env.WIN_USR_ROLE,'N:N')
|| B_USRROL.actions_grayed(_env.WIN_USR_ROLE,'')
?};
grp_disp(B_USRROL,_env.WIN_USR_ROLE);
{? grp_empty(B_ACTION,_env.WIN_ACT_ALL)=1 | grp_empty(B_ROLE,_env.WIN_ROLE_ALL)=1
|| B_ACTROL.actions_grayed(_env.WIN_ACT_ROLE,'N:N')
|| B_ACTROL.actions_grayed(_env.WIN_ACT_ROLE,'')
?};
grp_disp(B_ACTROL,_env.WIN_ACT_ROLE);
~~


\after_rfr_users_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na odśwież po w głównym oknie USERS, jterm - zakładka "Użytkownicy, role i czynności",
::       interm - zakładka "Użytkownicy i role"
::   WE:
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

{? var_pres('TAB_USERS',_env)>100
|| obj_del(_env.TAB_USERS)
?};
:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
{? grp_empty(cur_tab(1,1),cur_win(1,1))=1
|| _can_continue:=0
?};
:: czy odświeżać zależne okna
_disp:=1;
_grayed:=':';
{? _can_continue>0
||
   {? USERS.sel_size()>0
   ||
::    Zaznaczenie grupowe
      B_USRROL.hdr_sel(''@);
      B_USRROL.hdr_sel(' (zaznaczenie grupowe)'@);

      _env.TAB_USERS:=USERS.sel_aget();

::    Sprawdzam sumę kontrolną z zaznaczenia - jeżeli się nie zmieniła to nic nie robię

      _crc:=-1;
      _sum:=sql('select SUM(CRC) as SUMA from :_a',_env.TAB_USERS);
      {? _sum.first()
      || _crc:=_sum.SUMA
      ?};

      {? _crc<>_env.CRC_USERS
      || _env.CRC_USERS:=_crc;
         _can_continue:=1
      || _can_continue:=0
      ?};

      {? _can_continue>0
      ||
::       Obsługa roli użytkownika
         _tab_role:=tab_tmp(1,
            'B_ROLE','STRING[16]','Ref SQL B_ROLE',
            'B_USRROL','STRING[16]','Ref SQL B_USRROL'
         );
         B_USRROL.cntx_psh();
         B_USRROL.index('USER');
         _empty:=0;
         {? _env.TAB_USERS.first()
         || {!
            |?
               _user:=exec('FindAndGet','#table',USERS,_env.TAB_USERS.REF,USERS.name(),,null());
               {? _user<>null()
               || B_USRROL.prefix(REF.FIRMA,_user);
                  {? B_USRROL.first()
                  || {!
                     |?
::                      Sprawdzam czy rola występuje dla wszystkich zaznaczonych użytkowników
                        _can_add:=exec('chk_b_usrrol2','#b_role',_env.TAB_USERS,B_USRROL.B_ROLE);

                        {? _can_add>0
                        || _tab_role.prefix($B_USRROL.B_ROLE);
                           {? _tab_role.size()=0
                           || _tab_role.blank();
                              _tab_role.B_ROLE:=$B_USRROL.B_ROLE;
                              _tab_role.B_USRROL:=$B_USRROL.ref();
                              _tab_role.add()
                           ?}
                        ?};
                        B_USRROL.next()
                     !}
                  ||
::                   Zaznaczony użytkownik nie ma żadnych ról, więc przerywam i pokazuje pustą
::                   tabelkę ról
                     _empty:=1
                  ?}
               ?};
               _env.TAB_USERS.next() & _empty=0
            !}
         ?};
         B_USRROL.cntx_pop();
         {? _empty>0
         ||
::          Pusta dziedzina ról użytkownika
            {? B_USRROL.f_active()>0
            || B_USRROL.f_clear(1)
            ?};
            B_USRROL.index('UNIK');
            B_USRROL.prefix(null(),null(),null());

            {? B_ROLE.f_active()>0
            || B_ROLE.f_clear(1)
            ?};
            B_ROLE.index('UNIK');
            B_ROLE.prefix(REF.FIRMA)
         ||
::          Zakładam filtry
            B_ROLE.prefix();
            _where:='B_ROLE.REFERENCE not in (select :_a.B_ROLE from :_a) and B_ROLE.FIRMA=:_b';
            B_ROLE.f_set('NAME','',_where,_tab_role,REF.FIRMA);

            B_USRROL.prefix();
            _where:='B_USRROL.REFERENCE in (select :_a.B_USRROL from :_a)';
            B_USRROL.f_set('B_ROLE(NAME)','',_where,_tab_role);
            B_USRROL.f_first()
         ?}
      ?}
   ||
::    Brak zaznaczenia grupowego

      {? _env.SEL_USER0<>null() & USERS.ref()=_env.SEL_USER0
      || _can_continue:=0
      || _can_continue:=1;
         _env.SEL_USER0:=USERS.ref()
      ?};

      {? _can_continue
      ||

      B_USRROL.hdr_sel('');
      B_USRROL.hdr_sel(': %1'[USERS.DANE]);

      _env.CRC_USERS:=0;
      _env.TAB_USERS:=tab_tmp(1,
         'REF','INTEGER','#USERS'
      );
      _env.TAB_USERS.blank();
      _env.TAB_USERS.REF:=#USERS.ref();
      _env.TAB_USERS.add();

::    Role użytkownika
      B_USRROL.f_clear(1);
      B_USRROL.index('WER3');
      B_USRROL.prefix(REF.FIRMA,USERS.ref());
      B_USRROL.first();

::    Role wszystkie
      B_ROLE.prefix();
      _tab:=sql('select B_USRROL.B_ROLE from B_USRROL where B_USRROL.USERS=:_a and B_USRROL.FIRMA=:_b',USERS.ref(),REF.FIRMA);
      {? _tab.first()
      || _where:='B_ROLE.REFERENCE not in (select :_a.B_ROLE from :_a) and B_ROLE.FIRMA=:_b'
      || _where:='B_ROLE.FIRMA=:_b'
      ?};
      B_ROLE.f_set('NAME','',_where,_tab,REF.FIRMA)
      ?}
   ?};
:: Uprawnienia do danych
   {? _env.ENV_ID=0
   || Perm.setUser(USERS.ref())
   ?};
   {? ~_can_continue
   || _disp:=0
   ?}
||
:: Pusta dziedzina użytkowników
   B_USRROL.hdr_sel(''@);
   _env.SEL_USER:=null();
   {? B_USRROL.f_active()>0
   || B_USRROL.f_clear(1)
   ?};
   B_USRROL.index('UNIK');
   B_USRROL.prefix(null(),null(),null());

   {? B_ROLE.f_active()>0
   || B_ROLE.f_clear(1)
   ?};
   B_ROLE.index('UNIK');
   B_ROLE.prefix(REF.FIRMA);

   {? _env.ENV_ID=0
   || Perm.setUser(null())
   ?}
?};

{? _disp
|| {? _env.ENV_ID=0
   || grp_disp(B_PERM_U,Perm.userWin(),1);
      grp_disp(B_ROLE,_env.WIN_ROLE_ALL3,1,1)
   |? _env.ENV_ID=1
   || grp_disp(B_ROLE,_env.WIN_ROLE_ALL3,,1)
   ?};
   grp_disp(B_USRROL,_env.WIN_ROLE_USR,,1)
?};
~~


\after_rfr_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na odśwież po w oknie USERS, jterm - zakładka "Role, użytkownicy i czynności",
::       interm - zakładka "Role i użytkownicy"
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
{? grp_empty(cur_tab(1,1),cur_win(1,1))=1
|| _can_continue:=0;
   {? _env.ENV_ID=0
   || B_USRROL.actions_grayed(_env.WIN_USR_ROLE,'N:N')
   ?}
|? _env.ENV_ID=0
|| B_USRROL.actions_grayed(_env.WIN_USR_ROLE,'')
?};

{? _can_continue>0
|| _env.SEL_USER:=USERS.ref()
|| _env.SEL_USER:=null()
?};
USERS.cntx_psh();
grp_disp(B_USRROL,_env.WIN_USR_ROLE,,1);
USERS.cntx_pop();
~~


\after_rfr_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na odśwież po w oknie B_ROLE lub w oknie B_USRROL, jterm - zakładka "Użytkownicy, role i czynności",
::       interm - zakładka "Użytkownicy i role"
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_env.SEL_ROLE:=B_ROLE.ref();

{? var_pres('TAB_ROLE',_env)>100
|| obj_del(_env.TAB_ROLE)
?};
_tab:=cur_tab(1,1);

FIRMA.cntx_psh();
_czapa:='N';
{? REF.FIRMA().TYP='C'
|| _czapa:='T'
?};

:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
{? grp_empty(_tab,cur_win(1,1))=1
|| _can_continue:=0
?};

{? _can_continue>0
||
   {? _tab.sel_size()>0
   ||
      B_ACTROL.hdr_sel(''@);
      B_ACTROL.hdr_sel(' (zaznaczenie grupowe)'@);

::    Zaznaczenie grupowe

      {? _tab=B_ROLE
      || _env.TAB_ROLE:=_tab.sel_aget()
      |? _tab=B_USRROL
      ||
::       Przekształcam zaznaczenie B_USRROL w B_ROLE
         B_USRROL.cntx_psh();
         B_USRROL.prefix();
         _env.TAB_ROLE:=tab_tmp(1,
            'REF','INTEGER','#B_ROLE.ref'
            ,'CRC','REAL','Suma kontrolna'
         );
         _selection:=_tab.sel_aget();
         {? _selection.first()
         || {!
            |? {? B_USRROL.seek(_selection.REF,)
               || _env.TAB_ROLE.blank();
                  _env.TAB_ROLE.REF:=#B_USRROL.B_ROLE;
                  _env.TAB_ROLE.CRC:=_selection.CRC;
                  _env.TAB_ROLE.add()
               ?};
               _selection.next()
            !}
         ?};
         B_USRROL.cntx_pop()
      ?};

::    Sprawdzam sumę kontrolną z zaznaczenia - jeżeli się nie zmieniła to nic nie robię

      _crc:=-1;
      _sum:=sql('select SUM(CRC) as SUMA from :_a',_env.TAB_ROLE);
      {? _sum.first()
      || _crc:=_sum.SUMA
      ?};

      {? _crc<>_env.CRC_ROLE
      || _env.CRC_ROLE:=_crc;
         _can_continue:=1
      || _can_continue:=0
      ?};

      {? _can_continue>0
      ||
::       Obsługa czynności ról
         _tab_act:=tab_tmp(1,
            'B_ACTION','STRING[16]','Ref SQL B_ACTION',
            'B_ACTROL','STRING[16]','Ref SQL B_ACTROL'
         );
         B_ACTROL.cntx_psh();
         B_ACTROL.index('B_ROLE');
         _empty:=0;
         {? _env.TAB_ROLE.first()
         || {!
            |?
               _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
               {? _b_role<>null()
               || B_ACTROL.prefix(_b_role);
                  {? B_ACTROL.first()
                  || {!
                     |?
::                      Sprawdzam czy czynność występuje we wszystkich zaznaczonych rolach
                        _can_add:=exec('chk_b_actrol','#b_role',_env.TAB_ROLE,B_ACTROL.B_ACTION);

                        {? _can_add>0
                        || _tab_act.prefix($B_ACTROL.B_ACTION);
                           {? _tab_act.size()=0
                           || _tab_act.blank();
                              _tab_act.B_ACTION:=$B_ACTROL.B_ACTION;
                              _tab_act.B_ACTROL:=$B_ACTROL.ref();
                              _tab_act.add()
                           ?}
                        ?};
                        B_ACTROL.next()
                     !}
                  ||
::                   Zaznaczona rola nie ma żadnych użytkowników, więc przerywam i pokazuje pustą
::                   tabelkę użytkowników
                     _empty:=1
                  ?}
               ?};
               _env.TAB_ROLE.next() & _empty=0
            !}
         ?};
         B_ACTROL.cntx_pop();
         {? _empty>0
         ||
::          Pusta dziedzina czynności ról
            {? B_ACTROL.f_active()>0
            || B_ACTROL.f_clear(1)
            ?};
            B_ACTROL.index('UNIK');
            B_ACTROL.prefix(null(),null(),null());


            {? B_ACTION.f_active()>0
            || B_ACTION.f_clear(1)
            ?};
            B_ACTION.index('UNIK');
            B_ACTION.prefix()
         ||
::          Zakładam filtry
            B_ACTION.prefix();
            {? _czapa='T'
            || _where:='B_ACTION.GRP_FIRM=\'T\' and B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE not in (select :_a.B_ACTION from :_a)'
            || _where:='B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE not in (select :_a.B_ACTION from :_a)'
            ?};
            B_ACTION.f_set('UID','',_where,_tab_act);

            B_ACTROL.prefix();
            _where:='B_ACTROL.REFERENCE in (select :_a.B_ACTROL from :_a)';
            B_ACTROL.f_set('B_ACTION(UID)','',_where,_tab_act);
            B_ACTROL.f_first()
         ?}
      ?}
   ||
::    Brak zaznaczenia grupowego
      B_ACTROL.hdr_sel('');
      B_ACTROL.hdr_sel(': %1'[B_ROLE.NAME]);
      _env.CRC_ROLE:=0;
      _env.TAB_ROLE:=tab_tmp(1,
         'REF','INTEGER','#B_ROLE'
      );
      _env.TAB_ROLE.blank();
      _env.TAB_ROLE.REF:=#B_ROLE.ref();
      _env.TAB_ROLE.add();

::    Czynności
      B_ACTROL.f_clear(1);
      B_ACTROL.index('B_ROLE');
      B_ACTROL.prefix(B_ROLE.ref());
      B_ACTROL.first();
      ~~
   ?}
||
   B_ACTROL.hdr_sel('');
   {? B_ACTROL.f_active()>0
   || B_ACTROL.f_clear(1)
   ?};
   B_ACTROL.index('UNIK');
   B_ACTROL.prefix(null(),null(),null())
?};
FIRMA.cntx_pop();

{? _env.ENV_ID=0
|| _grayed:=':';
   {? grp_empty(B_ROLE,_env.WIN_ROLE_ALL3)=1
   || _grayed:='N'+_grayed+'N'
   ?};
   B_USRROL.actions_grayed(_env.WIN_ROLE_USR,_grayed)
?};

{? _tab=B_ROLE
|| B_ROLE.cntx_psh();
   grp_disp(B_USRROL,_env.WIN_ROLE_USR,,1);
   B_ROLE.cntx_pop()
?};
{? _env.ENV_ID=0
|| grp_disp(B_ACTROL,_env.WIN_ACT_ROLE2,,1)
?};
~~


\after_rfr_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na odśwież po w oknie B_ACTION, jterm - zakładka "Role, użytkownicy i czynności",
::       interm - zakładka "Role i czynności"
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_env.SEL_ACTION:=B_ACTION.ref();

{? _env.ENV_ID=0
|| {? grp_empty(B_ACTION,_env.WIN_ACT_ALL)=1
   || B_ACTROL.actions_grayed(_env.WIN_ACT_ROLE,'N:N')
   || B_ACTROL.actions_grayed(_env.WIN_ACT_ROLE,'')
   ?}
?};
B_ACTION.cntx_psh();
grp_disp(B_ACTROL,_env.WIN_ACT_ROLE,,1);
B_ACTION.cntx_pop();
~~


\after_rfr_actrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na odśwież po w oknie B_ACTROL, jterm - obie zakładki, interm - zakładka "Role i czynności"
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_env.SEL_ACTROL:=null();
:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
_actions:='';
{? grp_empty(cur_tab(1,1),cur_win(1,1))=1
|| _can_continue:=0;
   _actions:='R:R'
||
   _env.SEL_ACTROL:=B_ACTROL.ref();
   {? B_ACTROL.PROCES<>'T'
   || _actions:='R:R'
   ?}
?};
B_ACTROL.actions_grayed(_env.WIN_ACT_ROLE,_actions);

USERS.cntx_psh();
grp_disp(B_ACTROL,_env.WIN_ACT_ROLE,,1);
{? _env.ENV_ID=0
|| grp_disp(B_ACTROL,_env.WIN_ACT_ROLE2,,1)
?};
USERS.cntx_pop();
~~


\after_rfr_usrrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuła na odśwież po w oknie B_USRROL, jterm - zakładka "Role, użytkownicy i czynności",
::       interm - zakładka "Role i użytkownicy"
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_env.SEL_USRROL:=null();
:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
{? grp_empty(cur_tab(1,1),cur_win(1,1))=1
|| _can_continue:=0
|| _env.SEL_USRROL:=B_USRROL.ref()
?};
~~


\select_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla konfigurator uprawnień
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=exec('env','#b_role');
{? exec('interm','#system')
|| _env.ENV_ID:=1
|| _env.ENV_ID:=0
?};
params_set('env',_env);

_env.select()


\chk_b_usrrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy podany użytkownik posiada uprawnienia do wszystkich zaznaczonych role
::   WE: _a - tab_tmp - tablica tymczasowa zaznaczonych ról
::       _b - USERS.ref - użytkownik
::   WY: 0 - nie posiada
::       1 - posiada do wszystkich ról
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_users:=_b;

_result:=0;

B_USRROL.cntx_psh();
B_USRROL.index('UNIK');
_selected.cntx_psh();
_selected.clear();
{? _selected.first()
|| {!
   |? _b_role:=exec('FindAndGet','#table',B_ROLE,_selected.REF,B_ROLE.name(),,null());
      {? _b_role<>null()
      || B_USRROL.prefix(REF.FIRMA,_b_role,_users);
         {? B_USRROL.size()>0
         || _result:=1
         || _result:=0
         ?}
      ?};
      _selected.next() & _result>0
   !}
?};
_selected.cntx_pop();
B_USRROL.cntx_pop();
_result


\chk_b_usrrol2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy podana rola występuje dla wszystkich zaznaczonych użytkowników
::   WE: _a - tab_tmp - tablica tymczasowa zaznaczonych użytkowników
::       _b - B_ROLE.ref - rola
::   WY: 0 - nie występuje
::       1 - występuje dla wszystkich użytkowników
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_b_role:=_b;

_result:=0;

B_USRROL.cntx_psh();
B_USRROL.index('UNIK');
_selected.cntx_psh();
_selected.clear();
{? _selected.first()
|| {!
   |? _users:=exec('FindAndGet','#table',USERS,_selected.REF,USERS.name(),,null());
      {? _users<>null()
      || B_USRROL.prefix(REF.FIRMA,_b_role,_users);
         {? B_USRROL.size()>0
         || _result:=1
         || _result:=0
         ?}
      ?};
      _selected.next() & _result>0
   !}
?};
_selected.cntx_pop();
B_USRROL.cntx_pop();
_result


\chk_b_actrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy podana czynność jest powiązana ze wszystkimi zaznaczonymi rolami
::   WE: _a - tab_tmp - tablica tymczasowa zaznaczonych ról
::       _b - B_ACTION.ref - czynność
::   WY: 0 - nie powiązana
::       1 - powiązana ze wszystkimi rolami
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_action:=_b;

_result:=0;

B_ACTROL.cntx_psh();
B_ACTROL.index('UNIK');
_selected.cntx_psh();
_selected.clear();
{? _selected.first()
|| {!
   |? _b_role:=exec('FindAndGet','#table',B_ROLE,_selected.REF,B_ROLE.name(),,null());
      {? _b_role<>null()
      || B_ACTROL.prefix(REF.FIRMA,_b_role,_action);
         {? B_ACTROL.size()>0
         || _result:=1
         || _result:=0
         ?}
      ?};
      _selected.next() & _result>0
   !}
?};
_selected.cntx_pop();
B_ACTROL.cntx_pop();
_result


\dnd_usr_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Instaluje obsługę d'n'd w oknie użytkowników ról
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role')
::       _b - INTEGER - 0/1 - dnd wyłączone lub włączone
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_enabled:=_b;

{? _enabled>0
|| _formula:="params_exec('dnd_drop_usr','#b_role')"
|| _formula:=""
?};
{? _env.WIN_USR_ROLE<>''
|| B_USRROL.dnd_sel(_env.WIN_USR_ROLE,,'records.USERS',_formula)
?};
~~


\dnd_usrrol_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Instaluje obsługę d'n'd w oknie użytkowników systemu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role')
::       _b - INTEGER - 0/1 - dnd wyłączone lub włączone
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_enabled:=_b;

{? _env.WIN_USR_ALL<>''
|| {? _enabled>0
   || _formula:="params_exec('dnd_drop_usrrol','#b_role','R')"
   || _formula:=""
   ?};
   USERS.dnd_sel(_env.WIN_USR_ALL,,'records.B_USRROL',_formula)
?};
{? _env.WIN_ROLE_ALL3<>''
|| {? _enabled>0
   || _formula:="params_exec('dnd_drop_usrrol','#b_role','U')"
   || _formula:=""
   ?};
   B_ROLE.dnd_sel(_env.WIN_ROLE_ALL3,,'records.B_USRROL',_formula)
?};
~~


\dnd_act_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Instaluje obsługę d'n'd w oknie czynności ról
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role')
::       _b - INTEGER - 0/1 - dnd wyłączone lub włączone
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_enabled:=_b;

{? _enabled>0
|| _formula:="params_exec('dnd_drop_act','#b_role')"
|| _formula:=""
?};
{? _env.WIN_ACT_ROLE<>''
|| B_ACTROL.dnd_sel(_env.WIN_ACT_ROLE,,'records.B_ACTION',_formula)
?};
~~


\dnd_actrol_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Instaluje obsługę d'n'd w oknie czynności systemu
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role')
::       _b - INTEGER - 0/1 - dnd wyłączone lub włączone
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_enabled:=_b;

{? _enabled>0
|| _formula:="params_exec('dnd_drop_actrol','#b_role')"
|| _formula:=""
?};
{? _env.WIN_ACT_ALL<>''
|| B_ACTION.dnd_sel(_env.WIN_ACT_ALL,,'records.B_ACTROL',_formula)
?};
~~


\dnd_role_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Instaluje obsługę d'n'd w oknie ról użytkownika
::   WE: _a - env - środowisko działania - wynik działania exec('env','#b_role')
::       _b - INTEGER - 0/1 - dnd wyłączone lub włączone
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_enabled:=_b;

{? _enabled>0
|| _formula:="params_exec('dnd_drop_role','#b_role')"
|| _formula:=""
?};
{? _env.WIN_ROLE_USR<>''
|| B_USRROL.dnd_sel(_env.WIN_ROLE_USR,,'records.B_ROLE',_formula)
?};
~~


\dnd_drop_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na upuszczanie użytkowników
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_name:=dnd_info('table_name');
{? _name=USERS.name()
|| _tab:=dnd_info('dropped_records');
   exec('add_usrrole_user','#b_role',_tab,1)
?};
~~


\dnd_drop_usrrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na upuszczanie użytkowników roli
::       [_a] - STRING - R - użytkownicy roli (domyślnie), U - role użytkownika
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_tryb:='R';
{? var_pres('_a')=type_of('') & (_a='R' | _a='U')
|| _tryb:=_a
?};

_name:=dnd_info('table_name');
_progress:=1;

{? _name=B_USRROL.name()
|| _tab:=dnd_info('dropped_records');
   _tab.cntx_psh();
   {? _tab.first()
   ||
      {? _progress>0
      || _size:=_tab.size();
         FUN.prg_start(_size,'Usuwanie ról dla użytkowników...',,,1)
      ?};
      {!
      |? {? B_USRROL.seek(_tab.REF,)
         || exec('delete_usrrol_act','#b_role',0,,_tryb)
         ?};
         {? _progress>0
         || FUN.prg_next()
         ?};
         _tab.next()
      !};
      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?};
   _tab.cntx_pop();
   ~~
?};
~~


\dnd_drop_actrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na upuszczanie czynności roli
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_progress:=1;

_name:=dnd_info('table_name');
{? _name=B_ACTROL.name()
|| _tab:=dnd_info('dropped_records');
   _tab.cntx_psh();
   {? _tab.first()
   ||
      {? _progress>0
      || _size:=_tab.size();
         FUN.prg_start(_size,'Usuwanie czynności dla ról...',,,1)
      ?};

      {!
      |? {? B_ACTROL.seek(_tab.REF,)
         || exec('delete_actrol_act','#b_role',0)
         ?};
         {? _progress>0
         || FUN.prg_next()
         ?};
         _tab.next()
      !};
      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?};
   _tab.cntx_pop();
   ~~
?};
~~


\add_usrrole_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodawanie roli dla użytkownika, jterm - zakładka "Role, użytkownicy i czynności",
::       interm - zakładka "Role i użytkownicy"
::   WE: _a - tabelka zawierająca upuszczanych/zaznaczonych userów (ma co najmniej pole REF)
::       [_b] - INTEGER - 0/1 czy inicjować i wyświetlać własnego progressa
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_tab:=_a;

_progres:=0;
{? var_pres('_b')=type_of(0)
|| _progres:=_b
?};

USERS.cntx_psh();
_buffer:=exec('buffer','#b_usrrol');
KOMM.init(250,,'Przypisywanie użytkowników do ról'@);
{? type_of(_tab)>100
||
   {? _tab.first()
   ||
      {? _progres>0 & var_pres('TAB_ROLE',_env)>100
      || _size:=_tab.size()*_env.TAB_ROLE.size();
         FUN.prg_start(_size,'Przypisywanie użytkowników do ról...',,,1)
      ?};

      {!
      |? USERS.prefix();
         {? USERS.seek(_tab.REF,USERS.name())
         ||
            _buffer.FIRMA:=REF.FIRMA;
            _buffer.USERS:=USERS.ref();
::          Iteruję po zaznaczonych w oknie rolach
            {? var_pres('TAB_ROLE',_env)>100
            || {? _env.TAB_ROLE.first()
               || {!
                  |?
                     _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
                     {? _b_role<>null()
                     || _buffer.B_ROLE:=_b_role;
                        exec('add','#b_usrrol',_buffer,,2)
                     ?};
                     {? _progres>0
                     || FUN.prg_next()
                     ?};
                     _env.TAB_ROLE.next()
                  !}
               ?}
            ?}
         ?};
         _tab.next()
      !};

      {? _progres>0
      || FUN.prg_stop()
      ?}

   ?}
?};
KOMM.select();
USERS.cntx_pop();
_env.CRC_ROLE:=0;
grp_disp(B_ROLE,_env.WIN_ROLE_ALL,1,1);

~~


\dnd_drop_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na upuszczanie czynności
::   WE:
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_name:=dnd_info('table_name');
{? _name=B_ACTION.name()
||
   _tab:=dnd_info('dropped_records');
   exec('add_actrole','#b_role',_tab,1);
   ~~
?};
~~


\add_actrole
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodawanie czynności dla roli, jterm - zakładka "Role, użytkownicy i czynności",
::       interm - zakładka "Role i czynności"
::   WE: _a - tabelka zawierająca upuszaczane/zaznaczone czynności (ma co najmniej pole REF)
::       [_b] - INTEGER - 0/1 czy inicjować i wyświetlać własnego progressa
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
params_set(params_get());
_env:=params_get().env;

_progres:=0;
{? var_pres('_b')=type_of(0)
|| _progres:=_b
?};

B_ACTION.cntx_psh();
B_ACTROL.cntx_psh();
B_ACTROL.index('UNIK');
_buffer:=exec('buffer','#b_usrrol');
{? type_of(_tab)>100
||
   {? _tab.first()
   ||
      {? _progres>0 & var_pres('TAB_ROLE',_env)>100
      || _size:=_tab.size()*_env.TAB_ROLE.size();
         FUN.prg_start(_size,'Przypisywanie czynności do ról...',,,1)
      ?};
      {!
      |? B_ACTION.prefix();
         {? B_ACTION.seek(_tab.REF,B_ACTION.name())
         ||
::          Iteruję po zaznaczonych w oknie rolach
            {? var_pres('TAB_ROLE',_env)>100
            || {? _env.TAB_ROLE.first()
               || {!
                  |?
                     _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
                     {? _b_role<>null()
                     ||
                        B_ACTROL.prefix(REF.FIRMA,_b_role,B_ACTION.ref());
                        {? B_ACTROL.first()
                        || B_ACTROL.MANUAL:='T';
                           B_ACTROL.U1_KOD:=exec('username','#users');
                           B_ACTROL.U1_DANE:=userdata();
                           B_ACTROL.put(1)
                        ||
                           B_ACTROL.blank();
                           B_ACTROL.B_ACTION:=B_ACTION.ref();
                           B_ACTROL.B_ROLE:=_b_role;
                           B_ACTROL.FIRMA:=REF.FIRMA;
                           B_ACTROL.MANUAL:='T';
                           B_ACTROL.TM_START:=B_ACTROL.tm_stamp();
                           B_ACTROL.STARTD:=date();
                           B_ACTROL.STARTT:=time();
                           B_ACTROL.U1_KOD:=exec('username','#users');
                           B_ACTROL.U1_DANE:=userdata();
                           {? B_ACTROL.add(1)>0
                           || exec('after_add_actrole','#b_usrdom')
                           ?}
                        ?}
                     ?};

                     {? _progres>0
                     || FUN.prg_next()
                     ?};

                     _env.TAB_ROLE.next()
                  !}
               ?}
            ?}
         ?};
         _tab.next()
      !};

      {? _progres>0
      || FUN.prg_stop()
      ?}

   ?}
?};

B_ACTION.cntx_pop();
B_ACTROL.cntx_pop();
_env.CRC_ROLE:=0;
{? _env.ENV_ID=1
|| grp_disp(B_ROLE,_env.WIN_ROLE_ALL2,1,1)
|| grp_disp(B_ROLE,_env.WIN_ROLE_ALL,1,1)
?};
~~


\dnd_drop_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła na upuszczanie ról
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_name:=dnd_info('table_name');
{? _name=B_ROLE.name()
|| _tab:=dnd_info('dropped_records');
   exec('add_usrrole_role','#b_role',_tab,1);
   ~~
?};
~~


\add_usrrole_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dodawanie roli dla użytkownika, jterm - zakładka "Użytkownicy, role i czynności",
::       interm - zakładka "Użytkownicy i role"
::   WE: _a - tabelka zawierająca upuszczane/zaznaczone role (ma co najmniej pole REF)
::       [_b] - INTEGER - 0/1 czy inicjować i wyświetlać własnego progressa
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_tab:=_a;
_progres:=0;
{? var_pres('_b')=type_of(0)
|| _progres:=_b
?};
_group:=0;
{? var_pres('TAB_USERS',_env)>100
|| {? _env.TAB_USERS.size()>1
   || _group:=1;
      KOMM.init(250,,'Nadawanie uprawnień')
   ?}
?};
USERS.cntx_psh(); USERS.prefix();
B_ROLE.cntx_psh();
_buffer:=exec('buffer','#b_usrrol');
{? type_of(_tab)>100
||
   {? _tab.first()
   ||
      {? _progres>0 & var_pres('TAB_USERS',_env)>100
      || _size:=_tab.size()*_env.TAB_USERS.size();
         FUN.prg_start(_size,'Przypisywanie użytkowników do ról...',,,1)
      ?};

      {!
      |? B_ROLE.prefix();
         {? B_ROLE.seek(_tab.REF,B_ROLE.name())
         ||
            _buffer.FIRMA:=REF.FIRMA;
            _buffer.B_ROLE:=B_ROLE.ref();
::          Iteruję po zaznaczonych w oknie użytkownikach
            {? var_pres('TAB_USERS',_env)>100
            ||
               _can_continue:=1;
               {? _env.TAB_USERS.first()
               || {!
                  |? {? USERS.seek(_env.TAB_USERS.REF,)
                     ||
                        {? USERS.AKT<>'T'
                        ||
                           _can_continue:=0;
                           {? _group>0
                           || _msg:='Jeden z zaznaczonych użytkowników jest nieaktywny, nadawanie nowych ról niedozwolone.'@;
                              KOMM.add(_msg,2)
                           || _msg:='Użytkownik %1 jest nieaktywny, nadawanie mu nowych ról niedozwolone.'@[USERS.DANE];
                              FUN.emsg(_msg)
                           ?}
                        ?}
                     ?};
                     _env.TAB_USERS.next() & _can_continue>0
                  !}
               ?};

               {? _can_continue>0 & _env.TAB_USERS.first()
               || {!
                  |?
                     {? USERS.seek(_env.TAB_USERS.REF,)
                     ||
                        _buffer.USERS:=USERS.ref();
                        exec('add','#b_usrrol',_buffer,,{? _group>0 || 2 || 1 ?})
                     ?};
                     {? _progres>0
                     || FUN.prg_next()
                     ?};
                     _env.TAB_USERS.next()
                  !}
               ?}
            ?}
         ?};
         _tab.next()
      !};

      {? _progres>0
      || FUN.prg_stop()
      ?}
   ?}
?};
{? _group>0
|| KOMM.select()
?};
B_ROLE.cntx_pop();
USERS.cntx_pop();
_env.CRC_USERS:=0;
_env.SEL_USER0:=null();
grp_disp(USERS,_env.WIN_USR_ALL2,1,1);
~~


\delete_usrrol_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - usunięcie rekordu w oknie użytkownicy ról
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi
::       [_b] - INTEGER - 0/1 czy inicjować i wyświetlać własnego progressa
::       [_c] - STRING - R - użytkownicy roli (domyślnie), U - role użytkownika
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};

_progres:=0;
{? var_pres('_b')=type_of(0)
|| _progres:=_b
?};

_tryb:='R';
{? var_pres('_c')=type_of('') & (_c='R' | _c='U')
|| _tryb:=_c
?};

_result:=0;
_can_continue:=1;

_tab:=B_USRROL;

_group:=0;
{? _tab.sel_size()>0
|| _group:=1;
   _dialog:=0
?};

USERS.cntx_psh();
B_ROLE.cntx_psh();
B_USRROL.cntx_psh();
B_USRROL.index('UNIK');

{? _dialog>0 & _can_continue>0
|| {? _tryb='R'
   || _can_continue:=FUN.ask('Odebrać uprawnienie użytkownikowi: %1 ?'@[B_USRROL.USERS().DANE])
   |? _tryb='U'
   || _can_continue:=FUN.ask('Odebrać uprawnienie do roli: %1 ?'@[B_USRROL.B_ROLE().NAME])
   ?}
?};

_sel_tab:=~~;
{? _tryb='R'
|| _sel_tab:=_env.TAB_ROLE
|? _tryb='U'
|| _sel_tab:=_env.TAB_USERS
?};

KOMM.init(250,,'Przypisywanie użytkowników do ról'@);
:: Iteruję po zaznaczonych rekordach
{? _can_continue>0 & type_of(_sel_tab)>100
|| {? _sel_tab.first()
   ||
      {? _progres>0
      || _size:=_sel_tab.size();
         FUN.prg_start(_size,'Przypisywanie użytkowników do ról...',,,1)
      ?};

      {!
      |?
         {? _tryb='R'
         || _b_role:=exec('FindAndGet','#table',B_ROLE,_sel_tab.REF,B_ROLE.name(),,null());
            {? _b_role=null()
            || _can_continue:=0
            ?};
            B_USRROL.prefix(REF.FIRMA,_b_role,B_USRROL.USERS)
         |? _tryb='U'
         || _users:=exec('FindAndGet','#table',USERS,_sel_tab.REF,USERS.name(),,null());
            {? _users=null()
            || _can_continue:=0
            ?};
            B_USRROL.prefix(REF.FIRMA,B_USRROL.B_ROLE,_users)
         ?};
         {? _can_continue>0
         ||
            {? B_USRROL.first()
            || {!
               |?
::                Sprawdzam czy można usunąć
                  {? _group>0
                  || _can_continue:=exec('can_delete_usrrol','#b_role',,2)
                  || _can_continue:=exec('can_delete_usrrol','#b_role',,1)
                  ?};
                  {? _can_continue>0
                  || _can_continue:=exec('delete','#b_usrrol',_tab.ref(),2)
                  ?};
                  B_USRROL.first() & _can_continue>0
               !}
            ?}
         ?};

         {? _progres>0
         || FUN.prg_next()
         ?};

         _sel_tab.next() & _can_continue>0
      !};

      {? _progres>0
      || FUN.prg_stop()
      ?}
   ?}
?};
KOMM.select();
B_USRROL.cntx_pop();
USERS.cntx_pop();
B_ROLE.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
{? _group=0 & _result>0
|| {? _tryb='R'
   || _env.CRC_ROLE:=0;
      grp_disp(B_ROLE,_env.WIN_ROLE_ALL,1,1)
   |? _tryb='U'
   || _env.CRC_USERS:=0;
      _env.SEL_USER0:=null();
      grp_disp(USERS,_env.WIN_USR_ALL2,1,1)
   ?}
?};
_result


\delete_usrrol_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli B_USRROL
::   WY: 0 - porazka
::       1 - sukces
::       [_a] - STRING - R - użytkownicy roli (domyślnie), U - role użytkownika
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_tryb:='R';
{? var_pres('_a')=type_of('') & (_a='R' | _a='U')
|| _tryb:=_a
?};
_result:=0;
_tab:=cur_tab(1,1);
{? _tryb='R'
|| _msg:='Zaznaczono: %1 użytkowników. Czy odebrać im wszystkim uprawnienia?'@[$_tab.sel_size()]
|? _tryb='U'
|| _msg:='Zaznaczono: %1 role. Czy odebrać uprawnienia do nich wszystkich?'@[$_tab.sel_size()]
?};
{? FUN.ask(_msg)
|| _result:=1;
   sel_nchk();
   KOMM.init(200,,'Usuwanie użytkowników dla ról'@)
?};
_result


\delete_usrrol_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli B_USRROL
::       [_a] - STRING - R - użytkownicy roli (domyślnie), U - role użytkownika
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_tryb:='R';
{? var_pres('_a')=type_of('') & (_a='R' | _a='U')
|| _tryb:=_a
?};
KOMM.select(,,,,,0);
{? _tryb='R'
|| _env.CRC_ROLE:=0;
   grp_disp(B_ROLE,_env.WIN_ROLE_ALL,1,1)
|? _tryb='U'
|| _env.CRC_USERS:=0;
   _env.SEL_USER0:=null();
   grp_disp(USERS,_env.WIN_USR_ALL2,1,1)
?};
~~


\can_delete_usrrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza możliwość usunięcia rekordu B_USRROL
::   WE: [_a] - B_USRROL.ref, jeśli nie podany to aktualny rekord
::       [_b] - INTEGER - czy wyswietlac komunikaty:  0  - nie
::                                                   [1] - wyskakujący komunikat
::                                                    2  - w KOMM
::   WY: 0 - nie można usunąć rekordu
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();

_display:=1;
{? var_pres('_b')=type_of(0)
|| _display:=_b
?};

_result:=1;
_can_continue:=1;


B_USRROL.cntx_psh();
{? var_pres('_a')=type_of(B_USRROL.ref())
|| _can_continue:=0;
   B_USRROL.clear();
   {? B_USRROL.seek(_ref)
   || _can_continue:=1
   ?}
?};

{? _can_continue>0
|| _result:=1
?};

B_USRROL.cntx_pop();
_result


\delete_actrol_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie - usunięcie rekordu, interm - zakładka "Role i czynności"
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};

_result:=0;
_can_continue:=1;

_tab:=B_ACTROL;

_group:=0;
{? _tab.sel_size()>0
|| _group:=1;
   _dialog:=0
?};

B_ACTROL.cntx_psh();
B_ACTROL.index('UNIK');

{? _dialog>0 & _can_continue>0
|| _can_continue:=FUN.ask('Odebrać uprawnienia do czynności: %1 ?'@[B_ACTROL.B_ACTION().UID])
?};

:: Iteruję po zaznaczonych rolach
{? _can_continue>0 & var_pres('TAB_ROLE',_env)>100
|| {? _env.TAB_ROLE.first()
   || {!
      |?
         _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
         {? _b_role<>null()
         || B_ACTROL.prefix(REF.FIRMA,_b_role,B_ACTROL.B_ACTION);
            {? B_ACTROL.first()
            || {!
               |?
                  _ref_nxt:=null();
                  _next:=0;
                  B_ACTROL.cntx_psh();
                  {? B_ACTROL.next()
                  || _ref_nxt:=B_ACTROL.ref()
                  ?};

                  B_ACTROL.cntx_pop();
::                Sprawdzam czy można usunąć
                  {? _group>0
                  || _can_continue:=exec('can_delete_actrol','#b_role',,2)
                  || _can_continue:=exec('can_delete_actrol','#b_role',,1)
                  ?};
                  {? _can_continue>0
                  || _can_continue:=exec('actrol_del','#b_role',_tab.ref())
                  ?};
                  {? _ref_nxt<>null()
                  || _next:=B_ACTROL.seek(_ref_nxt)
                  ?};
                  _next>0 & _can_continue>0
               !}
            ?}
         ?};
         _env.TAB_ROLE.next() & _can_continue>0
      !}
   ?}
?};
B_ACTROL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
{? _group=0 & _result>0
|| _env.CRC_ROLE:=0;
   {? _env.ENV_ID=1
   || grp_disp(B_ROLE,_env.WIN_ROLE_ALL2,1,1)
   || grp_disp(B_ROLE,_env.WIN_ROLE_ALL,1,1)
   ?}
?};
_result


\delete_actrol_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli B_ACTROL, interm - zakładka "Role i czynności"
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 czynności. Czy odebrać roli uprawnienia do nich wszystkich?'@[$_tab.sel_size()])
|| _result:=1;
   sel_nchk();
   KOMM.init(200,,'Usuwanie czynności dla ról'@)
?};
_result


\delete_actrol_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli B_ACTROL, interm - zakładka "Role i czynności"
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
KOMM.select(,,,,,0);
_env.CRC_ROLE:=0;
{? _env.ENV_ID=1
|| grp_disp(B_ROLE,_env.WIN_ROLE_ALL2,1,1)
|| grp_disp(B_ROLE,_env.WIN_ROLE_ALL,1,1)
?};
~~


\can_delete_actrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza możliwość usunięcia rekordu B_ACTROL
::   WE: [_a] - B_ACTROL.ref, jeśli nie podany to aktualny rekord
::       [_b] - INTEGER - czy wyswietlac komunikaty:  0  - nie
::                                                   [1] - wyskakujący komunikat
::                                                    2  - w KOMM
::   WY: 0 - nie można usunąć rekordu
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();

_display:=1;
{? var_pres('_b')=type_of(0)
|| _display:=_b
?};

_result:=1;
_can_continue:=1;

B_ACTROL.cntx_psh();
B_ACTION.cntx_psh();
B_ROLE.cntx_psh();
{? var_pres('_a')=type_of(B_ACTROL.ref())
|| _ref:=_a;
   _can_continue:=0;
   B_ACTROL.clear();
   {? B_ACTROL.seek(_ref)
   || _can_continue:=1
   ?}
?};

{? _can_continue>0
||
   {? B_ACTROL.PROCES='T'
   || _result:=0;
      _msg:='Uprawnienie do czynności: %1 dla roli: %2'@[B_ACTROL.B_ACTION().UID,B_ACTROL.B_ROLE().NAME];
      _msg+=' zostało nadane za pomocą procesu. Usunięcie niemożliwe.'@;
      {? _display=1
      || FUN.emsg(_msg)
      |? _display=2
      || KOMM.add(_msg,2,,1)
      ?}
   || _result:=1
   ?}
?};
B_ACTION.cntx_pop();
B_ROLE.cntx_pop();
B_ACTROL.cntx_pop();
_result


\copy_from_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kopiuje listę ról dla podanego użytkownika
::   WE: _a - USERS.ref() - użytkownik dla którego skopiować
::       [_b] - 0/1 - czy akcja wywoływana jako grupowa
::       [_c] - 1-Dodaj do istniejących; 2-Zastąp
::       [_d] - USERS.ref() - użytkownik którego skopiować
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_user:=_a;
_grp:={? var_pres('_b')=type_of(1) || _b || 0 ?};
_choice:={? var_pres('_c')=type_of(1) || _c || 0 ?};
_selected:={? var_pres('_d')=type_of(null()) || _d || null() ?};

_result:=0;
_can_continue:=1;
{? USERS.AKT<>'T'
|| _can_continue:=0;
   _msg:='Użytkownik: %1 jest nieaktywny. Nadawanie uprawnień niedozwolone.'@[USERS.KOD];
   {? _grp
   || exec('add_kom','#message',_msg,2)
   || FUN.emsg(_msg)
   ?}
?};

{? _can_continue>0 & ~_choice
|| _msg:='Czy skopiować:\n\n'
         '1. Role\n'
         '2. Uprawnienia do danych\n'
         '3. Ochrony\n'
         '4. Uniwersalne parametry (użytkownika)\n'
         '\ndla użytkownika: \'%1\'?'@[USERS.KOD];
   _choice:=FUN.choice(_msg,,'Dodaj do istniejących'@,'Zastąp'@)
?};

{? _can_continue>0 & _choice>0
||
   {? ~_grp || KOMM.init(250,,'Kopiowanie ról'@) ?};
   USERS.cntx_psh();
   USERS.prefix();
   _where:='USERS.REFERENCE not in (select USERS.REFERENCE from USERS where USERS.REFERENCE=:_a)';
   USERS.f_set('KOD','',_where,_user);
   _wer:=exec('win_user_all','#b_role',_env,'#usr_copy_usrol',1,0);
   USERS.win_sel(_wer);
   {? _selected | USERS.select()>0
   ||
      {? ~_selected || _selected:=USERS.ref() ?};
      {? _choice=2
      ||
::       Jeśli ma być zastąp to najpierw usuwam wszystkie role dla użytkownika
         B_USRROL.cntx_psh();
         B_USRROL.index('USER');
         B_USRROL.prefix(REF.FIRMA,_user);
         {? B_USRROL.first()
         || {!
            |?
::             Sprawdzam czy można usunąć
               _can_continue:=exec('can_delete_usrrol','#b_role',,1);
               {? _can_continue>0
               || _can_continue:=exec('delete','#b_usrrol',B_USRROL.ref(),2)
               ?};
               B_USRROL.first() & _can_continue>0
            !}
         ?};
         B_USRROL.cntx_pop()
      ?};

      {? _can_continue>0
      ||
         B_USRROL.cntx_psh();
         B_USRROL.index('USER');
         B_USRROL.prefix(REF.FIRMA,_selected);
         _buffer:=exec('buffer','#b_usrrol');
         {? B_USRROL.first()
         || {!
            |? _buffer.get();
               _buffer.USERS:=_user;
               _added:=exec('add','#b_usrrol',_buffer,,2);
               {? _added=null()
               || _can_continue:=0
               ?};
               B_USRROL.next() & _can_continue>0
            !}
         ?};
         B_USRROL.cntx_pop()
      ?};

      {? _can_continue>0
      || Perm.copy(_selected,_user,_choice=2)
      ?};

::    Kopiowanie grup ochron
      {? _can_continue>0
      || _can_continue:=exec('b_protro_copy','#b_role',_selected,_user,_choice=2)
      ?};

::    Koiopwanie parametrów FO
      {? _can_continue>0
      || _can_continue:=exec('copy_usr','#params',_selected,_user,_choice=2)
      ?}
   ?};
   {? ~_grp || KOMM.select() ?};
   USERS.f_clear(1);
   USERS.cntx_pop()
?};
{? _can_continue>0
|| _result:=1
?};
_result


\show_action_roles
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Pokazuje role z którymi skojarzona jest czynność
::   WE: _a - B_ACTION.ref
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_action:=_a;
params_set(params_get());
_env:=params_get().env;

B_ACTROL.cntx_psh();
_wer:=exec('win_actrol','#b_role',_env,'#upr_act_roles','ROLE',0,0);
B_ACTROL.index('DISP2');
B_ACTROL.prefix(REF.FIRMA,_action);
B_ACTROL.win_sel(_wer);
B_ACTROL.select();
B_ACTROL.cntx_pop();
~~


\user_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja czynności użytkownika w oknie użytkowników systemu, interm - zakładka "Użytkownicy i role"
::   WE: [_a] - USERS.ref lub bieżący rekord
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_ref:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

FIRMA.cntx_psh();
_czapa:='N';
{? REF.FIRMA().TYP='C'
|| _czapa:='T'
?};

B_ACTION.cntx_psh();
USERS.cntx_psh();
{? _ref<>null()
|| USERS.clear();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _win:=exec('win_act_all','#b_role',_env,'#b_actionuser',1,'Czynności użytkownika: '@+USERS.DANE);
   B_ACTION.win_sel(_win);

:: Buduję listę czynności użytkownik
   _tab_act:=tab_tmp(1,
      'B_ACTION','STRING[16]','Ref SQL B_ACTION',
      'B_ACTROL','STRING[16]','Ref SQL B_ACTROL'
   );
   B_USRROL.cntx_psh();
   B_USRROL.index('USER');
   B_USRROL.prefix(REF.FIRMA,USERS.ref());
   B_ACTROL.cntx_psh();
   B_ACTROL.index('B_ROLE');
   {? B_USRROL.first()
   || {!
      |?
         B_ACTROL.prefix(B_USRROL.B_ROLE);
         {? B_ACTROL.first()
         || {!
            |?
               _tab_act.prefix($B_ACTROL.B_ACTION);
               {? _tab_act.size()=0
               || _tab_act.blank();
                  _tab_act.B_ACTION:=$B_ACTROL.B_ACTION;
                  _tab_act.B_ACTROL:=$B_ACTROL.ref();
                  _tab_act.add()
               ?};
               B_ACTROL.next()
            !}
         ?};
         B_USRROL.next()
      !}
   ?};
   B_ACTROL.cntx_pop();
   B_USRROL.cntx_pop();

   B_ACTION.prefix();
   {? _czapa='T'
   || _where:='B_ACTION.GRP_FIRM=\'T\' and B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE in (select :_a.B_ACTION from :_a)'
   || _where:='B_ACTION.AKT=\'T\' and B_ACTION.REFERENCE in (select :_a.B_ACTION from :_a)'
   ?};
   B_ACTION.f_set('UID','',_where,_tab_act);

   B_ACTION.select();
   ~~
?};
USERS.cntx_pop();
B_ACTION.cntx_pop();
FIRMA.cntx_pop();

_env.CRC_USERS:=0;
_env.SEL_USER0:=null();
{? _env.ENV_ID=1
|| grp_disp(USERS,_env.WIN_USR_ALL2,,1)
|| grp_disp(USERS,_env.WIN_USR_ALL,,1)
?};
~~


\b_prot_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Aktualizacja tabeli B_PROT
::----------------------------------------------------------------------------------------------------------------------
_prot_all:=prot_all();

_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};

B_PROTRO.cntx_psh();
B_PROT.cntx_psh();
B_PROT.index('UNIK');
:: Usuwanie śmieci
_prot_all.prefix('{domyślna}',);
{? _prot_all.first()
|| _can_continue:=_prot_all.del(,1)
?};
{? _can_continue>0
||
   _prot_all.prefix('wdrożenia',);
   {? _prot_all.first()
   || _can_continue:=_prot_all.del(,1)
   ?}
?};

:: Dodawanie brakujących i update tych które są
_prot_all.prefix();
{? _can_continue>0 & _prot_all.first()
|| {!
   |? B_PROT.prefix(_prot_all.PROT_KEY,_prot_all.PROT_KEY,);
      {? B_PROT.first()
      || B_PROT.DESC:=_prot_all.DESC;
         _can_continue:=B_PROT.put()
      || B_PROT.blank();
         B_PROT.PROT_KEY:=_prot_all.PROT_KEY;
         B_PROT.DESC:=_prot_all.DESC;
         _can_continue:=B_PROT.add()
      ?};
      _prot_all.next() & _can_continue>0
   !}
?};

:: Usuwanie tych których już nie ma w MacroPASS
{? _can_continue>0
||
   B_PROT.prefix();
   {? B_PROT.first()
   || {!
      |? _next:=0;
         _ref_nxt:=null();
         B_PROT.cntx_psh();
         {? B_PROT.next()
         || _ref_nxt:=B_PROT.ref()
         ?};
         B_PROT.cntx_pop();

         _prot_all.prefix(B_PROT.PROT_KEY,);
         {? _prot_all.first()=0
         || _can_continue:=exec('b_prot_del','#b_role')
         ?};

         {? _ref_nxt<>null()
         || _next:=B_PROT.seek(_ref_nxt)
         ?};
         _next>0 & _can_continue>0
      !}
   ?}
?};

{? _can_continue<=0
|| undo()
?};
{? _mydo || end() ?};

B_PROT.cntx_pop();
B_PROTRO.cntx_pop();
~~


\b_prot_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Usuwa rekord B_PROT
::   WE: [_a] - B_PROT.ref lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_PROT.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_PROT.cntx_psh();
{? _ref<>null()
|| B_PROT.prefix();
   {? B_PROT.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_PROTRO.cntx_psh();
   B_PROTRO.index('B_PROT');
   B_PROTRO.prefix(B_PROT.ref());
   {? B_PROTRO.first()
   || {!
      |? _can_continue:=B_PROTRO.del(,1);
         B_PROTRO.first()
      !}
   ?};
   B_PROTRO.cntx_pop();

   B_PROTU.cntx_psh();
   B_PROTU.index('UNIK');
   B_PROTU.prefix(B_PROT.PROT_KEY,);
   {? B_PROTU.first()
   || {!
      |? _can_continue:=B_PROTU.del(,1);
         B_PROTU.first() & _can_continue>0
      !}
   ?};
   B_PROTU.cntx_pop();

   {? _can_continue>0
   || _can_continue:=B_PROT.del(,1)
   ?}
?};
B_PROT.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\users_prot_role_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Obsługa Grup ochron MacroPASS przed dodaniem użytkownikowi roli
::   WE: [_a] - USERS.ref - użytkownik lub bieżący rekord
::       [_b] - B_ROLE.ref - rola dla użytkownika
::       [_c] - INTEGER - 0/[1]/2 - czy wyświetlać komunikaty: 0 - nie, 1 - na ekran, 2 - do KOMMa
::       [_d] - STRING - lista ochron do nadania
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_users:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _users:=_a
?};

_b_role:=null();
{? var_pres('_b')=type_of(B_ROLE.ref())
|| _b_role:=_b
?};

_dialog:=1;
{? var_pres('_c')=type_of(0)
|| _dialog:=_c
?};

_list:='';
{? var_pres('_d')=type_of('')
|| _list:=_d
?};

:: Pobieram obiekt systemowy do obsługi SYSSUSER
{? _dialog=0 | _dialog=2
|| _sysobj:=exec(,'__sysusr');
:: Wyłączenie komunikatów
   _sysobj.showMessages(0);
   ~~
|? _dialog=1
|| _sysobj:=exec(,'__sysusr',1)
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _users<>null()
|| USERS.prefix();
   {? USERS.seek(_users)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_ROLE.cntx_psh();
   {? _b_role<>null()
   || B_ROLE.prefix();
      {? B_ROLE.seek(_b_role)
      || _can_continue:=1
      || _can_continue:=0
      ?}
   ?};
   {? _can_continue>0
   ||
      _user_str:=exec('USERS','#to_string');
      {? _list=''
      ||
::       Zbieram grupy ochron dla roli
         B_PROTRO.cntx_psh();
         B_PROTRO.index('UNIK');
         B_PROTRO.prefix(B_ROLE.ref());
         {? B_PROTRO.first()
         || {!
            |? {? B_PROTRO.B_PROT<>null()
               || B_PROTRO.B_PROT();

                  {? _list*(B_PROT.PROT_KEY+',')=0
                  || _list+=B_PROT.PROT_KEY+','
                  ?}
               ?};
               B_PROTRO.next() & _can_continue>0
            !}
         ?};
         B_PROTRO.cntx_pop()
      ?};

::    Grupy ochron zebrane, pobieram systemową strukturę użytkowników i robię jej update ochron
      {? _can_continue>0 & _list<>''
      || _obj_list:=spli_str(_list,',');
         _sysusr:=_sysobj.getUser(USERS.KOD);
         _list2:='';
         _new:=0;
         {? var_pres('_sysusr')>100
         ||
            _groups:=_sysobj.getGroup(_sysusr);
            {? var_pres('_groups')>100
            ||
               {! _it:=1..obj_len(_groups)
               |! _val:=_groups[_it]+',';
                  _list2+=_val
               !}
            ?};
            {? var_pres('_obj_list')>100
            ||
               {! _it:=1..obj_len(_obj_list)
               |? _new=0
               |! _val:=_obj_list[_it];
                  {? _val<>'' & _list2*_val=0
                  || _new:=1
                  ?}
               !}
            ?}
         || _can_continue:=0;
            _msg:='Błąd podczas nadawania roli: %1. Nie odnaleziono użytkownika: %2 na serwerze.'@[B_ROLE.NAME,_user_str];
            {? _dialog=1
            || FUN.emsg(_msg)
            |? _dialog=2
            || KOMM.add(_msg,2,,1)
            ?}
         ?};
         {? _can_continue>0 & _new>0
         ||
            {? USERS.KOD='admin'
            ||
::             Admin wymaga admina
               {? OPERATOR.USER().KOD<>'admin'
               || _can_continue:=0;
                  _msg:='Brak uprawnień do nadania roli: %1. Tylko: %2 może modyfikować swoje grupy ochron (poprzez role)'@[B_ROLE.NAME,'admin'];
                  KOMM.add(_msg,2,,1)
               ?}
            |? _sysusr.Superuser>0
            ||
::             Superuser wymaga admina albo innego superusera (o ile parametr sysuser_poweruser_mode ma odpowiednią wartość)
               _res_mod:=exec('can_mod_superuser','#users');
               {? _res_mod.RESULT=0
               || _can_continue:=0;
                  _msg:='Brak uprawnień do nadania roli: %1. %2'@[B_ROLE.NAME,_res_mod.MSG];
                  KOMM.add(_msg,2,,1)
               ?}
            ||
::             Zwykły użytkownik wymaga superusera
               {? sec_superuser()=0
               || _can_continue:=0;
                  _msg:='Brak uprawnień do nadania roli: %1. Tylko użytkownik specjalny może modyfikować grupy ochron innych użytkowników (poprzez role)'@[B_ROLE.NAME];
                  KOMM.add(_msg,2,,1)
               ?}
            ?}
         ?};

         {? _can_continue>0 & _new>0
         || {? var_pres('_obj_list')>100
            ||
               {! _it:=1..obj_len(_obj_list)
               |? _can_continue>0
               |!
                  _can_mod:=0;
                  _grp:=_obj_list[_it];
                  {? _grp<>'' & _list2='' | (_list2<>'' & _list2*(_grp+',')=0)
                  || _can_mod:=1
                  ?};

                  {? _can_mod>0
                  ||
                     _can_continue:=_sysobj.addGroup(_sysusr,_grp);
                     {? _can_continue=0
                     || _msg:='Nie udało się nadać użytkownikowi: %1 grupy ochron MacroPASS: %2 związanej z rolą: %3'@[_user_str,_grp,B_ROLE.NAME];
                        {? _dialog=1
                        || FUN.emsg(_msg)
                        |? _dialog=2
                        || KOMM.add(_msg,2,,1)
                        ?}
                     ?};
                     {? _can_continue>0
                     || _can_continue:=_sysobj.putUser(_sysusr);
                        {? _can_continue=0
                        || _msg:='Nie udało się poprawić systemowej struktury użytkownika: %1 podczas nadawania roli: %2'@[_user_str,B_ROLE.NAME];
                           {? _dialog=1
                           || FUN.emsg(_msg)
                           |? _dialog=2
                           || KOMM.add(_msg,2,,1)
                           ?}
                        ?}
                     ?}
                  ?}
               !}
            ?}
         ?}
      ?};
      ~~
   ?};
   B_ROLE.cntx_pop();
   ~~
?};
USERS.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\users_prot_role_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Obsługa Grup ochron MacroPASS przed usunięciem użytkownikowi roli
::   WE: [_a] - USERS.ref - użytkownik lub bieżący rekord
::       [_b] - B_ROLE.ref - rola dla użytkownika
::       [_c] - INTEGER - 0/[1]/2 - czy wyświetlać komunikaty: 0 - nie, 1 - na ekran, 2 - do KOMMa
::       [_d] - tab_tmp - lista ochron do odebrania
::       [_e] - INTEGER - 0/1 ignorować fakt
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_users:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _users:=_a
?};

_b_role:=null();
{? var_pres('_b')=type_of(B_ROLE.ref())
|| _b_role:=_b
?};

_dialog:=1;
{? var_pres('_c')=type_of(0)
|| _dialog:=_c
?};

{? var_pres('_d')>100
|| _tab:=_d
|| _tab:=tab_tmp(1,'PROT_KEY','STRING[100]','Nazwa pola 1'
                  ,'CAN_DEL','INTEGER','Czy można usunąć')
?};

:: Pobieram obiekt systemowy do obsługi SYSSUSER
{? _dialog=0 | _dialog=2
|| _sysobj:=exec(,'__sysusr');
:: Wyłączenie komunikatów
   _sysobj.showMessages(0);
   ~~
|? _dialog=1
|| _sysobj:=exec(,'__sysusr',1)
?};

_result:=0;
_can_continue:=1;

_list:='';


B_PROT.cntx_psh();
B_PROT.index('UNIK');
USERS.cntx_psh();
{? _users<>null()
|| USERS.prefix();
   {? USERS.seek(_users)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_ROLE.cntx_psh();
   {? _b_role<>null()
   || B_ROLE.prefix();
      {? B_ROLE.seek(_b_role)
      || _can_continue:=1
      || _can_continue:=0
      ?}
   ?};
   {? _can_continue>0
   ||
      _user_str:=exec('USERS','#to_string');
::    Zbieram grupy ochron dla roli
      B_PROTRO.cntx_psh();
      B_PROTRO.index('UNIK');
      {? _tab.size()=0
      ||
         B_PROTRO.prefix(B_ROLE.ref());
         {? B_PROTRO.first()
         || {!
            |? {? B_PROTRO.B_PROT<>null()
               || B_PROTRO.B_PROT();

                  _tab.prefix(B_PROT.PROT_KEY,);
                  {? _tab.first()=0
                  || _tab.blank();
                     _tab.PROT_KEY:=B_PROT.PROT_KEY;
                     _tab.CAN_DEL:=1;
                     _can_continue:=_tab.add()
                  ?}
               ?};
               B_PROTRO.next() & _can_continue>0
            !}
         ?}
      ?};
      B_USRROL.cntx_psh();
      B_USRROL.index('USER');
      B_USRROL.prefix(REF.FIRMA,USERS.ref());
      {? B_USRROL.first()
      || {!
         |? {? B_USRROL.B_ROLE<>B_ROLE.ref()
            ||
               B_PROTRO.prefix(B_USRROL.B_ROLE);
               {? B_PROTRO.first()
               || {!
                  |?
                     _tab.prefix();
                     {? _tab.first()
                     || {!
                        |? {? B_PROTRO.B_PROT().PROT_KEY=_tab.PROT_KEY
                           ||
::                            User ma jakąś inną rolę, która daje mu tą Grupę ochron
                              _tab.CAN_DEL:=0;
                              _can_continue:=_tab.put()
                           ?};
                           _tab.next() & _can_continue>0
                        !}
                     ?};
                     B_PROTRO.next() & _can_continue>0
                  !}
               ?}
            ?};
            B_USRROL.next() & _can_continue>0
         !}
      ?};
      B_USRROL.cntx_pop();
      B_PROTRO.cntx_pop();

      {? _can_continue>0
      || B_PROTU.cntx_psh();
         B_PROTU.index('UNIK');
         _tab.prefix();
         {? _tab.first()
         || {!
            |? {? _tab.CAN_DEL>0
               ||
                  B_PROTU.prefix(_tab.PROT_KEY,USERS.ref());
                  {? B_PROTU.first()
                  ||
::                   Użytkownik miał tą grupę ochron nadaną ręcznie - nie pozwalam na jej usunięcie
                     _tab.CAN_DEL:=0;
                     _can_continue:=_tab.put()
                  ?}
               ?};
               _tab.next()
            !}
         ?};
         B_PROTU.cntx_pop()
      ?};

      _list:='';
      _i2:=_tab.ndx_tmp(,,'CAN_DEL',,);
      _tab.index(_i2);
      _tab.prefix(1);
      {? _tab.first()
      || {!
         |? _list+=_tab.PROT_KEY+',';
            _tab.next()
         !}
      ?};
      _tab.ndx_drop(_i2);

::    Grupy ochron do usunięcia zebrane, pobieram systemową strukturę użytkowników i robię jej update ochron
      {? _can_continue>0 & _list<>''
      || _obj_list:=spli_str(_list,',');
         _sysusr:=_sysobj.getUser(USERS.KOD);

         _can_del:=1;
         {? var_pres('_sysusr')>100
         || {? USERS.KOD='admin'
            ||
::             Admin wymaga admina
               {? OPERATOR.USER().KOD<>'admin'
               || _can_continue:=0;
                  _can_del:=0;
                  _msg:='Brak uprawnień do usunięcia roli: %1. Tylko: %2 może modyfikować swoje grupy ochron (poprzez role)'@[B_ROLE.NAME,'admin'];
                  KOMM.add(_msg,2,,1)
               ?}
            |? _sysusr.Superuser>0
            ||
::             Superuser wymaga admina albo innego superusera (o ile parametr sysuser_poweruser_mode ma odpowiednią wartość)
               _res_mod:=exec('can_mod_superuser','#users');
               {? _res_mod.RESULT=0
               || _can_continue:=0;
                  _can_del:=0;
                  _msg:='Brak uprawnień do usunięcia roli: %1. %2'@[B_ROLE.NAME,_res_mod.MSG];
                  KOMM.add(_msg,2,,1)
               ?}
             ||
::             Zwykły użytkownik wymaga superusera
               {? sec_superuser()=0
               || _can_continue:=0;
                  _can_del:=0;
                  _msg:='Brak uprawnień do usunięcia roli: %1. Tylko użytkownik specjalny może modyfikować grupy ochron innych użytkowników (poprzez role)'@[B_ROLE.NAME];
                  KOMM.add(_msg,2,,1)
               ?}
            ?}
         ||
::          Jeżeli użytkownika nie ma na serwerze (np nieaktywny) to nie ma potrzeby usuwania
::          mu grupy ochron, ale jednocześnie zwracam 1 żeby nie blokować usunięcia mu roli
            _can_del:=0
         ?};

         {? _can_del>0
         || {? var_pres('_obj_list')>100
            ||
               _groups:=_sysobj.getGroup(_sysusr);
               _list2:=',';
               {? var_pres('_groups')>100
               ||
                  {! _it:=1..obj_len(_groups)
                  |! _list2+=_groups[_it]+','
                  !}
               ?};

               {! _it:=1..obj_len(_obj_list)
               |? _can_continue>0
               |!
                  _can_mod:=0;
                  _grp:=_obj_list[_it];

                  {? _grp<>'' & _list2<>'' & _list2*(','+_grp+',')>0
                  || _can_mod:=1
                  ?};
                  {? _can_mod>0
                  ||
::                     _can_continue:=_sysobj.addGroup(_sysusr,_grp);
                     _can_continue:=_sysobj.delGroup(_sysusr,_grp);
                     {? _can_continue=0
                     ||
                        _msg:='Nie udało się usunąć użytkownikowi: %1 grupy ochron MacroPASS: %2 podczas usuwania roli: %3, błąd: %4'@[_user_str,_grp,B_ROLE.NAME,$_sysobj.LastError];
                        {? _dialog=1
                        || FUN.emsg(_msg)
                        |? _dialog=2
                        || KOMM.add(_msg,2,,1)
                        ?}
                     ?};
                     {? _can_continue>0
                     || _can_continue:=_sysobj.putUser(_sysusr);
                        {? _can_continue=0
                        || _msg:='Nie udało się poprawić systemowej struktury użytkownika: %1 podczas usuwania roli: %2'@[_user_str,B_ROLE.NAME];
                           {? _dialog=1
                           || FUN.emsg(_msg)
                           |? _dialog=2
                           || KOMM.add(_msg,2,,1)
                           ?}
                        ?}
                     ?}
                  ?}
               !}
            ?}
         ?}
      ?};
      ~~
   ?};
   B_ROLE.cntx_pop();
   ~~
?};
USERS.cntx_pop();
B_PROT.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\roleGroup_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Powołuje tabelę grup ochron dla ról
::   WE:
::   WY: uchwyt do tabeli
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(3
   ,'B_ROLE'   ,'STRING[16]'  ,'$B_ROLE.ref()'
   ,'PROT_KEY' ,'STRING[13]'  ,'Nazwa'
   ,'DESC'     ,'STRING[255]' ,'Opis')


\roleGroup_tab_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wypełnia tabelę exec('roleGroup_tab','#b_role')
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_roleGroup:=_a;

_roleGroup.cntx_psh();
_roleGroup.prefix();
_loop:=_roleGroup.first();
{!
|? _loop
|!
   _loop:=_roleGroup.del()
!};

_su:=exec(,'__sysusr');

_prot_all:=prot_all();

USERS.cntx_psh();
B_ROLE.cntx_psh();
B_ROLE.index('UNIK');
B_ROLE.prefix(REF.FIRMA);
_loop:=B_ROLE.first();
{!
|? _loop
|!
   _b_role:=B_ROLE.ref();
   B_USRROL.cntx_psh();
   B_USRROL.index('B_ROLE');
   B_USRROL.prefix(_b_role);
   _loop:=B_USRROL.first();
   {!
   |? _loop
   |!
      _userGroup:=_su.getGroup(_su.getUser(B_USRROL.USERS().KOD));
      {? var_pres('_userGroup')<>type_of(~~)
      ||
         _loop:=obj_len(_userGroup);
         {!
         |? _loop
         |!
            _prot_key:=_userGroup[_loop];
            {? _prot_key<>'{domyślna}' & _prot_key<>'wdrożenia'
               & ~_roleGroup.find_key($_b_role,_prot_key)
            || _roleGroup.B_ROLE:=$_b_role;
               _roleGroup.PROT_KEY:=_prot_key;
               _roleGroup.DESC:={? _prot_all.find_key(_prot_key) || _prot_all.DESC || '' ?};
               _roleGroup.add()
            ?};
            _loop-=1
         !};
         obj_del(_userGroup)
      ?};
      _loop:=B_USRROL.next()
   !};
   B_USRROL.cntx_pop();
   _loop:=B_ROLE.next()
!};
B_ROLE.cntx_pop();
USERS.cntx_pop();
_roleGroup.cntx_pop()


\actrol_napraw_proces
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Nawija wszystkim rekordom B_ACTROL pole PROCES
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_fml:="
   B_ACTROL.PROCES:='N';
   {? exec('is_roleupr_proc','#b_role',B_ACTROL.B_ROLE,B_ACTROL.B_ACTION)>0
   || B_ACTROL.PROCES:='T'
   ?};
   B_ACTROL.put();
   1
";
exec('for_each','#table',B_ACTROL,_fml);
~~


\is_roleupr_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy uprawenienie do czynności przez daną rolę zostało nadane w procesie
::   WE: _a - B_ROLE.ref() - rola
::       _b - B_ACTION.ref - czynność
::       [_c] - B_PROC.ref - proces który omijać podczas sprawdzania
::   WY: 0 - nie ma aktywnego i zaakceptowanego procesu który dawałby roli tę czynność
::       1 - jest jakiś proces który uprawnia tę rolę do tej czynności
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_role:=_a;
_b_action:=_b;

_omit:=null();
{? var_pres('_c')=type_of(B_PROC.ref())
|| _omit:=_c
?};

_result:=0;
_can_continue:=1;

B_ACTION.cntx_psh();
B_ACTION.prefix();
B_PROC.cntx_psh();
B_PREL.cntx_psh();
B_PREL.index('ELEROL');
{? B_ACTION.seek(_b_action)
||
   B_PREL.prefix(B_ACTION.B_ELE,_b_role);
   {? B_PREL.first()
   || {!
      |?
         _can_continue:=1;
         {? _omit<>null()
         || {? B_PREL.B_PROC=_omit
            || _can_continue:=0
            ?}
         ?};
         {? _can_continue>0
         ||
            {? B_PREL.B_PROC().ACCEPTED='T' & B_PROC.ACTIVE='T'
            || _result:=1
            ?}
         ?};
         B_PREL.next() & _result=0
      !}
   ?}
?};
B_PREL.cntx_pop();
B_PROC.cntx_pop();
B_ACTION.cntx_pop();
_result


\show_role_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dla podanej roli i czynności pokazuje jakie procesy dają uprawnienia czynność-rola
::   WE: _a - B_ROLE.ref() - rola
::       _b - B_ACTION.ref - czynność
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_role:=_a;
_b_action:=_b;

_result:=0;

_tab:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'REF_PROC','STRING[16]','Ref SQL procesu',
   'SYMBOL','STRING[100]','Symbol procesu',
   'NAME'  ,'STRING[100]','Nazwa procesu',
   'VER'   ,'STRING[10]' ,'Wersja procesu'
);

B_ACTION.cntx_psh();
B_ACTION.prefix();
B_PROC.cntx_psh();
B_PREL.cntx_psh();
B_PREL.index('ELEROL');
{? B_ACTION.seek(_b_action)
||
   B_PREL.prefix(B_ACTION.B_ELE,_b_role);
   {? B_PREL.first()
   || {!
      |?
         {? B_PREL.B_PROC().ACCEPTED='T' & B_PROC.ACTIVE='T'
         || _tab.prefix($B_PROC.ref());
            {? _tab.size()=0
            || _tab.blank();
               _tab.REF_PROC:=$B_PROC.ref();
               _tab.SYMBOL:=B_PROC.SYMBOL;
               _tab.NAME:=B_PROC.NAME;
               _tab.VER:=B_PROC.VER;
               _tab.add()
            ?}
         ?};
         B_PREL.next()
      !}
   ?};

   _tab.clear();

   _role_name:=exec('FindAndGet','#table',B_ROLE,_b_role,,"NAME",'');
   _act_sym:=B_ACTION.UID+' - '+B_ACTION.NAME;

   _title:='Procesy uprawniające rolę: %1 do czynności: %2'@[_role_name,_act_sym];

   _wer:=_tab.mk_sel(_title,'P',0,'#shroleupr_proc',1,1,,,'U');

   _tab.win_fld(_wer,,'SYMBOL',,,40,,,'Symbol'@,0);
   _tab.win_fld(_wer,,'NAME',,,40,,,'Nazwa'@,0);
   _tab.win_fld(_wer,,'VER',,,10,,,'Wersja'@,0);

   _formula:="
      _proc:=exec('FindAndGet','#table',B_PROC,cur_tab(1,1).REF_PROC);
      exec('select4proc','#b_design',_proc,0)

   ";
   _tab.win_act(_wer,0,'Formuła','&Podgląd procesu'@@,,,_formula,,1);
   _tab.win_btn(_wer,'text='+'&Podgląd procesu'@+',panel=right,align=begin','menu:P');
   _tab.win_act(_wer,,'Kolejność');
   _tab.win_sel(_wer);
   _tab.select()
?};
B_PREL.cntx_pop();
B_PROC.cntx_pop();
B_ACTION.cntx_pop();
~~


\edit_act_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja sprawdzająca czy daną rolę można edytować - wywoływana na przed popraw
::       Kontekst pracy - rekord B_ROLE
::   WY: 0 - nie można poprawiać
::       1 - można poprawiać
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
B_PREL.cntx_psh();
B_PREL.index('B_ROLE');
B_PREL.prefix(B_ROLE.ref());

_proc_tab:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'REF_PROC','STRING[16]','Wskazanie na proces'
   ,'SYMBOL','STRING[100]','Symbol'@
   ,'NAME','STRING[100]','Nazwa'@
   ,'VERSION','STRING[10]','Wersja'@
   ,'FIRMA','STRING[20]','Firma'@
   ,'ACCEPTED','STRING[1]','Zaakceptowany?'@
   ,'ACTIVE','STRING[1]','Aktywny?'@
);

{? B_PREL.first()
|| _result:=0;
   {!
   |? _proc_tab.prefix($B_PREL.B_PROC);
      {? _proc_tab.size()=0
      || _proc_tab.blank();
         _proc_tab.REF_PROC:=$B_PREL.B_PROC;
         _proc_tab.SYMBOL:=B_PREL.B_PROC().SYMBOL;
         _proc_tab.NAME:=B_PROC.NAME;
         _proc_tab.VERSION:=B_PROC.VER;
         _proc_tab.FIRMA:=B_PROC.FIRMA().SYMBOL;
         _proc_tab.ACCEPTED:=B_PROC.ACCEPTED;
         _proc_tab.ACTIVE:=B_PROC.ACTIVE;
         _proc_tab.add()
      ?};
      B_PREL.next()
   !}
?};
_proc_tab.clear();
_sel:=_proc_tab.mk_sel('Procesy w których występuje rola: %1'@[B_ROLE.NAME],,0,'#proc_role',,,,,'U');
_proc_tab.win_fld(_sel,,'SYMBOL',,,20);
_proc_tab.win_fld(_sel,,'NAME',,,20);
_proc_tab.win_fld(_sel,,'VERSION',,,-5);
_proc_tab.win_fld(_sel,,'FIRMA',,,4);
_proc_tab.win_fld(_sel,,'ACCEPTED',,,-5,,,,,,2,,"\'T\'","\'N\'");
_proc_tab.win_fld(_sel,,'ACTIVE',,,-5,,,,,,2,,"\'T\'","\'N\'");

_fb:="
   _proc:=exec('FindAndGet','#table',B_PROC,cur_tab(1,1).REF_PROC);
   exec('select4proc','#b_design',_proc,0)

";
_proc_tab.win_act(_sel,,'Formuła','&Podgląd procesu'@@,,,_fb,,1,,,,'P');
_proc_tab.win_btn(_sel,'text='+'&Podgląd procesu'@+',panel=right,align=begin','menu:P');

_proc_tab.win_sel(_sel);

{? _result=0
|| _msg:='Nie można poprawiać roli: %1 ponieważ jest używana w procesach.'@[B_ROLE.NAME];
   _can_continue:=1;
   {!
   |? _choice:=FUN.choice(_msg,,'Szczegóły'@,,,,'Zamknij'@);
      {? _choice=1
      || _proc_tab.select()
      || _can_continue:=0
      ?};
      _can_continue>0
   !}
?};
B_PREL.cntx_pop();
_result


\b_action_kolor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PS] [17.00]
:: OPIS: Rekord przed na okienka wertowania z czynnościami roli.
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic','#b_action',B_ACTION.ref())
|| ''
|| 'B_ACTION#01#01'
?}


\b_actrol_kolor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PS] [17.00]
:: OPIS: Rekord przed na okienka wertowania z czynnościami roli.
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic','#b_action',B_ACTROL.B_ACTION().ref())
|| ''
|| 'B_ACTROL#01#01'
?}


\b_role_kolor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PS] [17.00]
:: OPIS: Rekord przed na okienka wertowania z czynnościami roli.
::----------------------------------------------------------------------------------------------------------------------
B_ACTROL.cntx_psh(); B_ACTION.cntx_psh();
B_ACTROL.index('B_ROLE');
B_ACTROL.prefix(B_ROLE.ref());
_hasLicence:=1;
{? B_ACTROL.first()
|| {!
   |? _hasLicence:=exec('lic','#b_action',B_ACTROL.B_ACTION().ref());
      _hasLicence & B_ACTROL.next()
   !}
?};
B_ACTROL.cntx_pop(); B_ACTION.cntx_pop();
{? _hasLicence
|| ''
|| 'B_ROLE#01#01'
?}


\import_sel_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PS] [17.14]
:: OPIS: Akcja na rekord w okienku tworzonym przez exec('temp_win_role','#b_role')
::----------------------------------------------------------------------------------------------------------------------
_roletab:=params_get().env_imex.TAB_ROLE;
_sel:=params_get().env_imex.WIN_ROLE;

_grayed:='';

{? _roletab.EXISTS='T'
|| _grayed+='OZ'
|? _roletab.SEL='T'
|| _roletab.actions(_sel,,'O',1);
   _grayed+='Z'
|? _roletab.SEL='N'
|| _roletab.actions(_sel,,'Z',1);
   _grayed+='O'
?};

_anyselected:=0;
_current:=_roletab.ref();
_roletab.first();
{!
|? _anyselected:=(_roletab.SEL='T');
   _roletab.next() & ~_anyselected
!};
_roletab.seek(_current);
{? ~_anyselected
|| _grayed+='A'
?};
_roletab.actions_grayed(_sel,_grayed)


\add_actrol_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.42]
:: OPIS: Dodawanie czynności dla roli dla bieżącej fimy - REF.FIRMA
::   WE: _a - Nazwa roli
::       _b - Kod czynności
::       [_c] FIRMA.ref - firma
::   WY: czy udało się dodać 1/0
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

_firma:=REF.FIRMA;
{? var_pres('_c')=type_of(FIRMA.ref())
|| _firma:=_c
?};

_b_role:=exec('FindInSet','#table','B_ROLE','UNIK',_a,_firma,,1);
_b_action:=exec('FindInSet','#table','B_ACTION','UNIK',_b,,1);

B_ACTROL.index('UNIK');
{? _b_role<>null() & _b_action<>null
||
   B_ACTROL.prefix(_firma,_b_role,_b_action);
   {? B_ACTROL.first()
   || B_ACTROL.MANUAL:='T';
      B_ACTROL.U1_KOD:=exec('username','#users');
      B_ACTROL.U1_DANE:=userdata();
      {? B_ACTROL.put(1)
      || _wyn:=1
      ?}
   ||
      B_ACTROL.blank();
      B_ACTROL.B_ACTION:=_b_action;
      B_ACTROL.B_ROLE:=_b_role;
      B_ACTROL.FIRMA:=_firma;
      B_ACTROL.MANUAL:='T';
      B_ACTROL.TM_START:=B_ACTROL.tm_stamp();
      B_ACTROL.STARTD:=date();
      B_ACTROL.STARTT:=time();
      B_ACTROL.U1_KOD:=exec('username','#users');
      B_ACTROL.U1_DANE:=userdata();
      {? B_ACTROL.add(1)>0
      || _wyn:=1
      ?}
   ?}
?};
_wyn


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Formuła zwraca wskazanie roli.
::   WE:  _a  [STRING]    - Nazwa roli.
::       [_b] [REFERENCE] - Wskazanie firmy [domyślnie: bieżąca].
::       [_c] [NUMBER]    - Dodawać brakującą rolę [0*/1].
::   WY: Wskazanie roli lub null() w przypadku błędu lub braku roli.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _name:=_a
|| return(null())
?};
_firma:={? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=FIRMA || _b || exec('firma','ustawienia') ?};
_add:=var_pres('_c')=type_of(0) & _c;

_ret:=null();
B_ROLE.cntx_psh();
B_ROLE.index('UNIK');
B_ROLE.prefix(_firma,_name,);
{? B_ROLE.first()
|| _ret:=B_ROLE.ref()
|? _add
|| B_ROLE.blank();
   B_ROLE.FIRMA:=_firma;
   B_ROLE.NAME:=_name;
   {? B_ROLE.add()
   || _ret:=B_ROLE.ref()
   ?}
?};
B_ROLE.cntx_pop();
_ret


\env_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Środowisko okienka z rolami
::   WY: obj_new()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
::UWAGA: _fld, i _mth to formułki pomocnicze, zeby wygodniej tworzyć tablicę i komentować poszczególne jej elementy
::       powiedzmy, że to będzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to będzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
   _fld('MODE','Tryb wyświetlania: ROLE - od strony ról, USER - od strony użytkowników')
:: obsługa kontekstu okien
   ,_fld('SEL_ROLE','Rola na której stoję')
   ,_fld('SEL_PROTRO','Grupa ochron roli na której stoję')
   ,_fld('SEL_PROT','Grupa ochron na której stoję')
   ,_fld('TAB_ROLE','Tabelka tymczasowa z refami zaznaczonych ról')
   ,_fld('TAB_PROTS','Tabelka tymczasowa z refami zaznaczonych ochron')
   ,_fld('CRC_ROLE','Suma kontrolna zaznaczonych rekordów w tabeli ról')

:: Okna
   ,_fld('WIN_MAIN','Główne okno grupowe')
   ,_fld('WIN_ROLE','Okno wertowania wszystkich ról')
   ,_fld('WIN_PROTRO','Okno wertowania ochron roli')
   ,_fld('WIN_PROT','Okno wertowania grup ochron')

:: Identyfikatory okien
   ,_fld('wid_main','Identyfikator okna')
   ,_fld('wid_role','Identyfikator okna')
   ,_fld('wid_protro','Identyfikator okna')
   ,_fld('wid_prot','Identyfikator okna')

   ,_fld('tit_main','Tytuł głównego okienka')

:: metody
   ,_mth('select','uruchamia wertowanie okna')
   ,_mth('clear','czyści zmienne')

);
_env.MODE:='ROLE';
_env.SEL_ROLE:=null();
_env.SEL_PROTRO:=null();
_env.TAB_ROLE:=~~;
_env.TAB_PROTS:=~~;
_env.CRC_ROLE:=~~;

_env.WIN_MAIN:='';
_env.WIN_ROLE:='';
_env.WIN_PROTRO:='';
_env.WIN_PROT:='';

_env.wid_main:='#role_main';
_env.wid_role:='#role_role';
_env.wid_protro:='#role_protro';
_env.wid_prot:='#role_prot';

_env.tit_main:='Role systemu'@;
_env.clear:="

   .WIN_MAIN:='';
   .SEL_ROLE:=null();
   ~~
";

_env.select:="

   B_ROLE.cntx_psh();
   B_PROTRO.cntx_psh();
   B_PROT.cntx_psh();
   params_set(params_get());

   _result:=0;
   {!
   |?
      {? .MODE='ROLE'
      ||
         .tit_main:='Role i grupy ochron';
::       Tworzymy okna
         .WIN_ROLE:=exec('win_role_all','#b_role');
         .WIN_PROTRO:=exec('win_protro','#b_role',.,.wid_protro,1);
         .WIN_PROT:=exec('win_prot','#b_role',.,.wid_prot);

::       Tworzymy okno główne
         .WIN_MAIN:=exec('grp_make_prot','#b_role',.);

::       Ustawiamy kontekst
         {? B_ROLE.f_active()>0
         || B_ROLE.f_clear(1)
         ?};
         B_ROLE.index('UNIK');
         B_ROLE.prefix(REF.FIRMA);
         B_ROLE.first();

         B_PROT.index('UNIK');
         B_PROT.prefix();
         B_PROT.first();
         .SEL_PROT:=B_PROT.ref();

::       Pokazujemy okno
         _result:=B_ROLE.select()

      ?};
      .clear();
      _result<>0
   !};
   B_ROLE.cntx_pop();
   B_PROTRO.cntx_pop();
   B_PROT.cntx_pop();
   _result
";
_env


\win_protro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Tworzy okno wertowania B_PROTRO
::   WE: _a - env - środowisko działania - wynik działania exec('env_role','#b_role')
::       _b - STRING - identyfikator okna
::       _c - INTEGER - 0/1 - czy dodawać akcje: Nadaj/Odbierz
::       [_d] - STRING - tytuł okienka
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;
_actions:=_c;

_tab:=B_PROTRO;

_title:='Grupy ochron roli'@;
{? var_pres('_d')=type_of('')
|| _title:=_d
?};
_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');


_tab.win_fld(_wer,,'B_PROT','PROT_KEY',,20,,,'Nazwa'@);
_tab.win_fld(_wer,,'B_PROT','DESC',,40,,,'Opis'@);

{? _actions>0
||
   {? ~exec('interm','#system')
   || _formula:="
         params_set(params_get());
         _env:=params_get().env;

         exec('b_protro_add_act','#b_role',_env.TAB_PROTS,1);
        ~~
      ";
      _gr1:="
         params_set(params_get());
         _env:=params_get().env;

         {? B_PROTRO.sel_size()>0
         || B_PROTRO.sel_adel()
         ?};
         exec('b_protro_add_act','#b_role',_env.TAB_PROTS,1);
         0
      ";
      _help:='Nadaje grupę ochron roli'@;
      _tab.win_act(_wer,0,'Formuła','Nadaj'@@,,_help,_formula,,,1,_gr1,,'N');
      _tab.win_act(_wer,1,'Formuła','Nadaj'@@,,_help,_formula,,,,,,'N');
      _btn:=_tab.win_btn(_wer,'text=<<<,panel=right,align=begin','menu:N');
      _tab.btn_opt(_btn,'tooltip='+_help)
   ?};

   _formula:="
      params_set(params_get());
      _env:=params_get().env;

      exec('b_protro_del_act','#b_role',1);
      ~~
   ";
   _gr1:="
      params_set(params_get());
      exec('b_protro_del_act_gr1','#b_role')
   ";
   _gr2:="
      params_set(params_get());
      exec('b_protro_del_act_gr2','#b_role')
   ";
   _help:='Odbiera grupę ochron roli.'@;
   _tab.win_act(_wer,0,'Formuła','Odbierz'@@,,_help,_formula,,,1,_gr1,_gr2,'O');
   _btn:=_tab.win_btn(_wer,'text=>>>,panel=right,align=begin','menu:O');
   _tab.btn_opt(_btn,'tooltip='+_help)
?};

_tab.win_act(_wer,,'Kolejność');
_tab.win_sel(_wer);
_wer


\win_protro2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Tworzy okno wertowania B_PROTRO
::   WE: _a - env - środowisko działania - wynik działania exec('env_role','#b_role')
::       _b - STRING - identyfikator okna
::       _c - tab_tmp - tabela dla której wyświetlić okno
::       [_d] - STRING - tytuł okienka
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;
_tab:=_c;

_title:='Role nadające grupę ochron'@;
{? var_pres('_d')=type_of('')
|| _title:=_d
?};
_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');

_tab.win_fld(_wer,,'B_ROLE',,,100,,,'Nazwa'@);

_tab.win_act(_wer,,'Kolejność');
_tab.win_sel(_wer);
_wer


\win_prot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Tworzy okno wertowania B_PROT
::   WE: _a - env - środowisko działania - wynik działania exec('env_role','#b_role')
::       _b - STRING - identyfikator okna
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_wid:=_b;

_tab:=B_PROT;

_title:='Dostępne grupy ochron'@;
_wer:=_tab.mk_sel(_title,'P',0,_wid,1,1,,,'U');


_tab.win_fld(_wer,,'PROT_KEY',,,20,,,'Nazwa'@);
_tab.win_fld(_wer,,'DESC',,,40,,,'Opis'@);


{? exec('interm','#system')
|| _formula:="
      params_set(params_get());
      _env:=params_get().env;
      exec('tab_prots','#b_role');
      exec('b_protro_add_act','#b_role',_env.TAB_PROTS,1);
      ~~
   ";
   _gr1:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_PROTRO.sel_size()>0
      || B_PROTRO.sel_adel()
      ?};
      exec('tab_prots','#b_role');
      exec('b_protro_add_act','#b_role',_env.TAB_PROTS,1);
      0
   ";
   _help:='Nadaje grupę ochron roli'@;
   _tab.win_act(_wer,0,'Formuła','Nadaj'@@,,_help,_formula,,,1,_gr1,,'N')
?};

_tab.win_act(_wer,,'Kolejność');
_tab.win_sel(_wer);
_wer


\grp_make_prot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Tworzy okno grupowe
::   WE: _a - env - środowisko działania - wynik działania exec('env_role','#b_role')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=B_ROLE;
{? _env.WIN_MAIN=''
||
   _grpbefor:="
         params_set(params_get());
         _env:=params_get().env;

         grp_disp(B_PROT,_env.WIN_PROT);
         ~~
      ";
:: Okno główne - role
   _grp:=_tab.grp_make(_env.tit_main,_grpbefor,_env.wid_main,1,1);
   _tab.grp_sel(_grp,B_ROLE,_env.WIN_ROLE,,"params_set(params_get());exec('after_rfr_role_prot','#b_role')",,,20,,,,,'maximized_with_title');


:: Okno ochrony ról
   _tab.grp_splt(_grp,,'horizontal','dolny');
   _before:="
      params_set(params_get());
      _env:=params_get().env;
      {? B_PROTRO.f_active()>0 & B_PROTRO.sel_size()=0
      || B_PROTRO.f_rfresh()
      ?};

      ~~
   ";
   _tab.grp_sel(_grp,B_PROTRO,_env.WIN_PROTRO,,"params_exec('after_rfr_protro','#b_role')",,,,_before,,,,'maximized_with_title');

:: Okno ochrony wszystkie
   _tab.grp_splt(_grp,'dolny','vertical','prawydolny');
   _before:="
      _user_action:=_a;
      params_set(params_get());
      _env:=params_get().env;

      {? _env.SEL_PROT<>null()
      || {? B_PROT.f_active()>0 & B_PROT.sel_size()=0
         || B_PROT.f_rfresh();
            B_PROT.f_seek(_env.SEL_PROT)
         || B_PROT.seek(_env.SEL_PROT)
         ?}
      || {? B_PROT.f_active()>0 & B_PROT.sel_size()=0
         || B_PROT.f_rfresh()
         ?}
      ?};
      ~~
   ";
   _after:="
      params_set(params_get());
      _env:=params_get().env;

::    Zapamiętuję zaznaczenie
      exec('tab_prots','#b_role');
      ~~
   ";

   _tab.grp_sel(_grp,B_PROT,_env.WIN_PROT,,"params_exec('after_rfr_prot','#b_role')",,,,_before,_after,,,'maximized_with_title');

   _tab.win_sel(_grp);
   _env.WIN_MAIN:=_grp;
   ~~
?};
~~


\after_rfr_role_prot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Formuła na odśwież po w głównym oknie B_ROLE
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

{? var_pres('TAB_ROLE',_env)>100
|| obj_del(_env.TAB_ROLE)
?};
:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
{? grp_empty(cur_tab(1,1),cur_win(1,1))=1
|| _can_continue:=0
?};

{? _can_continue>0
||
   {? B_ROLE.sel_size()>0
   ||
::    Zaznaczenie grupowe

      B_PROTRO.hdr_sel('');
      B_PROTRO.hdr_sel(' (zaznaczenie grupowe)'@);

      _env.TAB_ROLE:=B_ROLE.sel_aget();

::    Sprawdzam sumę kontrolną z zaznaczenia - jeżeli się nie zmieniła to nic nie robię
      _crc:=-1;
      _sum:=sql('select SUM(CRC) as SUMA from :_a',_env.TAB_ROLE);
      {? _sum.first()
      || _crc:=_sum.SUMA
      ?};

      {? _crc<>_env.CRC_ROLE
      || _env.CRC_ROLE:=_crc;
         _can_continue:=1
      || _can_continue:=0
      ?};

      {? _can_continue>0
      ||
::       Obsługa grup ochron dla ról
         _tab_pro:=tab_tmp(1,
            'B_PROT','STRING[16]','Ref SQL B_PROT',
            'B_PROTRO','STRING[16]','Ref SQL B_PROTRO'
         );
         B_PROTRO.cntx_psh();
         B_PROTRO.index('UNIK');
         _empty:=0;
         {? _env.TAB_ROLE.first()
         || {!
            |?
               _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
               {? _b_role<>null()
               || B_PROTRO.prefix(_b_role);
                  {? B_PROTRO.first()
                  || {!
                     |?
::                      Sprawdzam czy użytkownik występuje we wszystkich zaznaczonych rolach
                        _can_add:=exec('chk_b_protro','#b_role',_env.TAB_ROLE,B_PROTRO.B_PROT);

                        {? _can_add>0
                        || _tab_pro.prefix($B_PROTRO.B_PROT);
                           {? _tab_pro.size()=0
                           || _tab_pro.blank();
                              _tab_pro.B_PROT:=$B_PROTRO.B_PROT;
                              _tab_pro.B_PROTRO:=$B_PROTRO.ref();
                              _tab_pro.add()
                           ?}
                        ?};
                        B_PROTRO.next()
                     !}
                  ||
::                   Zaznaczona rola nie ma żadnych ochron, więc przerywam i pokazuje pustą
::                   tabelkę ochron
                     _empty:=1
                  ?}
               ?};
               _env.TAB_ROLE.next() & _empty=0
            !}
         ?};
         B_PROTRO.cntx_pop();
         {? _empty>0
         ||
::          Pusta dziedzina czynności ról
            {? B_PROTRO.f_active()>0
            || B_PROTRO.f_clear(1)
            ?};
            B_PROTRO.index('UNIK');
            B_PROTRO.prefix(null(),null());

            {? B_PROT.f_active()>0
            || B_PROT.f_clear(1)
            ?};
            B_PROT.index('UNIK');
            B_PROT.prefix()
         ||
::          Zakładam filtry
            B_PROT.prefix();
            _where:='B_PROT.REFERENCE not in (select :_a.B_PROT from :_a)';
            B_PROT.f_set('PROT_KEY','',_where,_tab_pro);

            B_PROTRO.prefix();
            _where:='B_PROTRO.REFERENCE in (select :_a.B_PROTRO from :_a)';
            B_PROTRO.f_set('B_PROT(PROT_KEY)','',_where,_tab_pro);
            B_PROTRO.f_first()
         ?}
      ?}
   ||
::    Brak zaznaczenia grupowego

      B_PROTRO.hdr_sel('');
      B_PROTRO.hdr_sel(': %1'[B_ROLE.NAME]);

      _env.CRC_ROLE:=0;
      _env.TAB_ROLE:=tab_tmp(1,
         'REF','INTEGER','#B_ROLE'
      );
      _env.TAB_ROLE.blank();
      _env.TAB_ROLE.REF:=#B_ROLE.ref();
      _env.TAB_ROLE.add();

::    Ochrony roli
      B_PROTRO.f_clear(1);
      B_PROTRO.index('UNIK');
      B_PROTRO.prefix(B_ROLE.ref());
      {? _env.SEL_PROTRO<>null()
      || {? B_PROTRO.seek(_env.SEL_PROTRO)=0
         || B_PROTRO.first()
         ?}
      || B_PROTRO.first()
      ?};

::    Ochrony wszystkie
      B_PROT.prefix();
      _where:='B_PROT.REFERENCE not in (select B_PROTRO.B_PROT from B_PROTRO where B_PROTRO.B_ROLE=:_a)';
      B_PROT.f_set('PROT_KEY','',_where,B_ROLE.ref());
      ~~
   ?}
||
:: Pusta dziedzina ról
   B_PROTRO.hdr_sel(''@);

   _env.SEL_ROLE:=null();
   {? B_PROTRO.f_active()>0
   || B_PROTRO.f_clear(1)
   ?};
   B_PROTRO.index('UNIK');
   B_PROTRO.prefix(null(),null());

   {? B_PROT.f_active()>0
   || B_PROT.f_clear(1)
   ?};
   B_PROT.index('UNIK');
   B_PROT.prefix()
?};

grp_disp(B_PROT,_env.WIN_PROT);
{? ~exec('interm','#system')
|| {? grp_empty(B_PROT,_env.WIN_PROT)=1 | grp_empty(B_ROLE,_env.WIN_ROLE)=1
   || B_PROTRO.actions_grayed(_env.WIN_PROTRO,'N:N')
   || B_PROTRO.actions_grayed(_env.WIN_PROTRO,'')
   ?}
?};
grp_disp(B_PROTRO,_env.WIN_PROTRO);
~~


\chk_b_protro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Sprawdza czy podana grupa ochron jest powiązana ze wszystkimi zaznaczonymi rolami
::   WE: _a - tab_tmp - tablica tymczasowa zaznaczonych ról
::       _b - B_PROT.ref - grupa ochron
::   WY: 0 - nie powiązana
::       1 - powiązana ze wszystkimi rolami
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_selected:=_a;
_b_prot:=_b;

_result:=0;

B_PROTRO.cntx_psh();
B_PROTRO.index('UNIK');
_selected.cntx_psh();
_selected.clear();
{? _selected.first()
|| {!
   |? _b_role:=exec('FindAndGet','#table',B_ROLE,_selected.REF,B_ROLE.name(),,null());
      {? _b_role<>null()
      || B_PROTRO.prefix(_b_role,_b_prot);
         {? B_PROTRO.size()>0
         || _result:=1
         || _result:=0
         ?}
      ?};
      _selected.next() & _result>0
   !}
?};
_selected.cntx_pop();
B_PROTRO.cntx_pop();
_result


\after_rfr_protro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Formuła na odśwież po w oknie B_PROTRO
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_env.SEL_PROTRO:=null();
:: Sprawdzam czy jest sens robić coś, czyli czy dziedzina nie jest pusta
_can_continue:=1;
_actions:='';
{? grp_empty(cur_tab(1,1),cur_win(1,1))=1
|| ~~
|| _env.SEL_PROTRO:=B_ACTROL.ref()
?};

{? _can_continue>0 & grp_empty(B_PROT,_env.WIN_PROT)=1
|| _can_continue:=0;
   _actions:='N:N'
?};

B_PROTRO.actions_grayed(_env.WIN_PROTRO,_actions);

B_PROT.cntx_psh();
grp_disp(B_PROTRO,_env.WIN_PROTRO);
grp_disp(B_PROT,_env.WIN_PROT,1);
B_PROT.cntx_pop();
~~


\after_rfr_prot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Formuła na odśwież po w oknie B_PROT
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_env.SEL_PROT:=B_PROT.ref();

{? grp_empty(B_PROT,_env.WIN_PROT)=1
|| B_PROTRO.actions_grayed(_env.WIN_PROTRO,'N:N')
|| B_PROTRO.actions_grayed(_env.WIN_PROTRO,'')
?};
B_PROT.cntx_psh();
grp_disp(B_PROTRO,_env.WIN_PROTRO);
B_PROT.cntx_pop();
~~


\b_protro_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Dodanie grupy ochron dla roli
::   WE: [_a] - B_ROLE.ref() - rola lub bieżący rekord
::       [_b] - STRING - lista ochron do nadania separowana przecinkiem, jeżeli nie podano
::                       to bieżący B_PROT
::       [_c] - INTEGER - 0/[1]/2 - czy wyświetlać komunikaty: 0 - nie, 1 - na ekran, 2 - do KOMMa
::       [_d] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMM
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_role:=null();
{? var_pres('_a')=type_of(B_ROLE.ref())
|| _b_role:=_a
?};
_list:=B_PROT.PROT_KEY+',';
{? var_pres('_b')=type_of('')
|| _list:=_b
?};

_dialog:=1;
{? var_pres('_c')=type_of(0)
|| _dialog:=_c
?};

_komm:=1;
{? var_pres('_d')=type_of(0)
|| _komm:=_d
?};

{? _komm>0
|| KOMM.init(250,,'Nadawanie grup ochron dla ról'@)
?};

_result:=0;
_can_continue:=1;

B_PROTRO.cntx_psh();
B_PROTRO.index('UNIK');
B_ROLE.cntx_psh();
B_PROT.cntx_psh();
B_PROT.index('UNIK');
{? _b_role<>null()
|| B_ROLE.prefix();
   {? B_ROLE.seek(_b_role)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

:: Najpierw sprawdzam czy się systemowo uda, dodać grupę ochron wszystkim użytkownikom roli
   B_USRROL.cntx_psh();
   B_USRROL.index('B_ROLE');
   B_USRROL.prefix(B_ROLE.ref());
   {? B_USRROL.first()
   || {!
      |? _can_continue:=exec('users_prot_role_add','#b_role',B_USRROL.USERS,B_USRROL.B_ROLE,_dialog,_list);
         B_USRROL.next() & _can_continue>0
      !}
   ?};
   B_USRROL.cntx_pop();

   {? _can_continue>0
   || _obj_list:=spli_str(_list,',');
      _len:=obj_len(_obj_list);
      {? _len>0
      || {! _it:=1.._len
         |? _can_continue>0
         |! _prot:=_obj_list[_it];
            {? _prot<>''
            || B_PROT.prefix(_prot,_prot,);
               {? B_PROT.first()
               ||
                  B_PROTRO.prefix(B_ROLE.ref(),B_PROT.ref());
                  {? B_PROTRO.first()=0
                  ||
                     B_PROTRO.blank();
                     B_PROTRO.B_PROT:=B_PROT.ref();
                     B_PROTRO.B_ROLE:=B_ROLE.ref();
                     _can_continue:=B_PROTRO.add()
                  ?}
               || _can_continue:=0;
                  _msg:='Nie udało się znaleźć grupy ochron: %1. Wszystkie zmiany wycofane.'@[_prot];
                  KOMM.add(_msg,2,,1)
               ?}
            ?}
         !}
      ?}
   ?};

   {? _can_continue=0
   || undo()
   ?};

   {? _mydo || end() ?};
   ~~
?};

{? _komm>0
|| KOMM.select()
?};

B_ROLE.cntx_pop();
B_PROT.cntx_pop();
B_PROTRO.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\b_protro_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Usunięcie grupy ochron dla roli
::   WE: [_a] - B_ROLE.ref() - rola lub bieżący rekord
::       [_b] - tab_tmp - lista ochron do odebrania, jeżeli nie podano to bieżący B_PROT
::       [_c] - INTEGER - 0/[1]/2 - czy wyświetlać komunikaty: 0 - nie, 1 - na ekran, 2 - do KOMMa
::       [_d] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMMa
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_role:=null();
{? var_pres('_a')=type_of(B_ROLE.ref())
|| _b_role:=_a
?};

{? var_pres('_b')>100
|| _tab:=_b
|| _tab:=tab_tmp(1,'PROT_KEY','STRING[100]','Nazwa pola 1'
                  ,'CAN_DEL','INTEGER','Czy można usunąć');
   _tab.blank();
   _tab.PROT_KEY:=B_PROT.PROT_KEY;
   _tab.CAN_DEL:=1;
   _tab.add()
?};

_dialog:=1;
{? var_pres('_c')=type_of(0)
|| _dialog:=_c
?};

_komm:=1;
{? var_pres('_d')=type_of(0)
|| _komm:=_d
?};

{? _komm>0
|| KOMM.init(250,,'Usuwanie grup ochron dla ról'@)
?};

_result:=0;
_can_continue:=1;

B_PROTRO.cntx_psh();
B_PROTRO.index('UNIK');
B_ROLE.cntx_psh();
B_PROT.cntx_psh();
B_PROT.index('UNIK');
{? _b_role<>null()
|| B_ROLE.prefix();
   {? B_ROLE.seek(_b_role)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

:: Najpierw sprawdzam czy się systemowo uda, usunąć grupę ochron wszystkim użytkownikom roli
   B_USRROL.cntx_psh();
   B_USRROL.index('B_ROLE');
   B_USRROL.prefix(B_ROLE.ref());
   {? B_USRROL.first()
   || {!
      |? _can_continue:=exec('users_prot_role_del','#b_role',B_USRROL.USERS,B_USRROL.B_ROLE,_dialog,_tab);

         {? _can_continue>0
         ||
            _tab.prefix();
            {? _tab.first()
            || {!
               |? _tab.CAN_DEL:=1;
                  _can_continue:=_tab.put();
                  _tab.next()
               !}
            ?}
         ?};
         B_USRROL.next() & _can_continue>0
      !}
   ?};
   B_USRROL.cntx_pop();

   {? _can_continue>0
   || _tab.prefix();
      {? _tab.first()
      || {!
         |?
            B_PROT.prefix(_tab.PROT_KEY,_tab.PROT_KEY,);
            {? B_PROT.first()
            || B_PROTRO.prefix(B_ROLE.ref(),B_PROT.ref());
               {? B_PROTRO.first()
               || {!
                  |? _can_continue:=B_PROTRO.del(,1);
                     {? _can_continue=0
                     || _msg:='Nie udało się usunąć grupy ochron: %1 dla roli: %2'@[B_PROT.PROT_KEY,B_ROLE.NAME];
                        KOMM.add(_msg,2,,1)
                     ?};
                     B_PROTRO.first() & _can_continue>0
                  !}
               ?}
            ?};
            _tab.next() & _can_continue>0
         !}
      ?}
   ?};

   {? _can_continue=0
   || undo()
   ?};

   {? _mydo || end() ?};
   ~~
?};

{? _komm>0
|| KOMM.select()
?};

B_ROLE.cntx_pop();
B_PROT.cntx_pop();
B_PROTRO.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\b_protro_add_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Akcja dodawania ochron dla roli
::   WE: _a - tabelka zawierająca zaznaczone ochrony (ma co najmniej pole REF)
::       [_b] - INTEGER - 0/1 czy inicjować i wyświetlać własnego progressa
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
params_set(params_get());
_env:=params_get().env;

_progres:=0;
{? var_pres('_b')=type_of(0)
|| _progres:=_b
?};

_can_continue:=1;

B_PROT.cntx_psh();
B_PROTRO.cntx_psh();
B_PROTRO.index('UNIK');
_buffer:=exec('buffer','#b_usrrol');
{? type_of(_tab)>100
||
   {? _tab.first()
   ||
      KOMM.init(250,,'Przypisywanie ochron do ról'@);

      _tab_role:=_env.TAB_ROLE;
      _tab_role.prefix();
      {? _tab_role.first()
      || {!
         |? _b_role:=exec('FindAndGet','#table',B_ROLE,_tab_role.REF,B_ROLE.name(),,null());
            {? _b_role<>null()
            || _can_continue:=exec('role_upr_cascade','#b_role',_b_role)
            ?};
            _tab_role.next() & _can_continue>0
         !}
      ?};

      {? _can_continue>0
      ||
         {? _progres>0 & var_pres('TAB_ROLE',_env)>100
         || _size:=_tab.size()*_env.TAB_ROLE.size();
            FUN.prg_start(_size,'Przypisywanie ochron do ról'@+'...',,,1)
         ?};
         {!
         |? B_PROT.prefix();
            {? B_PROT.seek(_tab.REF,B_PROT.name())
            ||
::          Iteruję po zaznaczonych w oknie rolach
               {? var_pres('TAB_ROLE',_env)>100
               || {? _env.TAB_ROLE.first()
                  || {!
                     |?
                        _b_role:=exec('FindAndGet','#table',B_ROLE,_env.TAB_ROLE.REF,B_ROLE.name(),,null());
                        {? _b_role<>null()
                        || _can_continue:=exec('b_protro_add','#b_role',_b_role,,2,0)
                        ?};

                        {? _progres>0
                        || FUN.prg_next()
                        ?};
                        _env.TAB_ROLE.next() & _can_continue>0
                     !}
                  ?}
               ?}
            ?};
            _tab.next() & _can_continue>0
         !};

         {? _progres>0
         || FUN.prg_stop()
         ?}
      ?};
      KOMM.select()
   ?}
?};
B_PROT.cntx_pop();
B_PROTRO.cntx_pop();
_env.CRC_ROLE:=0;
grp_disp(B_ROLE,_env.WIN_ROLE,1);
~~


\b_protro_del_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Akcja usuwania ochron dla roli
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};

_result:=0;
_can_continue:=1;

_tab:=B_PROTRO;

_group:=0;
{? _tab.sel_size()>0
|| _group:=1;
   _dialog:=0
?};

B_PROT.cntx_psh();
B_PROTRO.cntx_psh();
B_PROTRO.index('UNIK');

{? _dialog>0 & _can_continue>0
|| _can_continue:=FUN.ask('Odebrać ochronę: %1 ?'@[B_PROTRO.B_PROT().PROT_KEY])
?};

{? _group=0
|| KOMM.init(250,,'Usuwanie ochron dla ról'@)
?};

:: Iteruję po zaznaczonych rolach
{? _can_continue>0 & var_pres('TAB_ROLE',_env)>100
||
   _tab_role:=_env.TAB_ROLE;
   _tab_role.prefix();
   {? _tab_role.first()
   || {!
      |? _b_role:=exec('FindAndGet','#table',B_ROLE,_tab_role.REF,B_ROLE.name(),,null());
         {? _b_role<>null()
         || _can_continue:=exec('role_upr_cascade','#b_role',_b_role)
         ?};
         _tab_role.next() & _can_continue>0
      !}
   ?};

   {? _can_continue>0 & _tab_role.first()
   || {!
      |?
         _b_role:=exec('FindAndGet','#table',B_ROLE,_tab_role.REF,B_ROLE.name(),,null());
         {? _b_role<>null()
         || B_PROTRO.prefix(_b_role,B_PROTRO.B_PROT);
            {? B_PROTRO.first()
            || {!
               |?
                  _ref_nxt:=null();
                  _next:=0;
                  B_PROTRO.cntx_psh();
                  {? B_PROTRO.next()
                  || _ref_nxt:=B_PROTRO.ref()
                  ?};
                  B_PROTRO.cntx_pop();

                  _can_continue:=exec('b_protro_del','#b_role',_b_role,,2,0);
                  {? _ref_nxt<>null()
                  || _next:=B_PROTRO.seek(_ref_nxt)
                  ?};
                  _next>0 & _can_continue>0
               !}
            ?}
         ?};
         _tab_role.next() & _can_continue>0
      !}
   ?}
?};
B_PROTRO.cntx_pop();
B_PROT.cntx_pop();

{? _group=0
|| KOMM.select()
?};

{? _can_continue>0
|| _result:=1
?};
{? _group=0 & _result>0
|| _env.CRC_ROLE:=0;
   grp_disp(B_ROLE,_env.WIN_ROLE,1)
?};
_result


\b_protro_del_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli B_PROTRO
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_result:=0;
_can_continue:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 ochron. Czy odebrać roli wszystkie zaznaczone ochrony?'@[$_tab.sel_size()])
|| _can_continue:=1
?};
{? _can_continue>0
|| KOMM.init(200,,'Usuwanie ochron dla ról'@);
:: Iteruję po zaznaczonych rolach
   {? var_pres('TAB_ROLE',_env)>100
   ||
      _tab_role:=_env.TAB_ROLE;
      _tab_role.prefix();
      {? _tab_role.first()
      || {!
         |? _b_role:=exec('FindAndGet','#table',B_ROLE,_tab_role.REF,B_ROLE.name(),,null());
            {? _b_role<>null()
            || _can_continue:=exec('role_upr_cascade','#b_role',_b_role)
            ?};
            _tab_role.next() & _can_continue>0
         !}
      ?}
   ?};

   {? _can_continue>0
   || _result:=1;
      sel_nchk()
   || KOMM.select()
   ?}
?};
_result


\b_protro_del_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli B_ACTROL
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
KOMM.select(,,,,,0);
_env.CRC_ROLE:=0;
grp_disp(B_ROLE,_env.WIN_ROLE,1);
~~


\role_upr_cascade
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Sprawdza czy mogę modyfikować daną rolę, tzn czy zachowana jest systemowa kaskada
::       uprawnień admin -> superuser -> zwykły
::   WE: [_a] - B_ROLE.ref lub bieżący rekord
::   WY: 0 - brak uprawnień
::       1 - można coś robić z rolą
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ROLE.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_ROLE.cntx_psh();
{? _ref<>null()
|| B_ROLE.prefix();
   {? B_ROLE.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _sysobj:=exec(,'__sysusr');
:: Wyłączenie komunikatów
   _sysobj.showMessages(0);

   _role_level:=1;
   USERS.cntx_psh();
   B_USRROL.cntx_psh();
   B_USRROL.index('B_ROLE');
   B_USRROL.prefix(B_ROLE.ref());
   {? B_USRROL.first()
   || {!
      |? {? B_USRROL.USERS<>null()
         ||
            B_USRROL.USERS();

            {? USERS.KOD='admin'
            || _role_level:=3
            ||
               {? _role_level<3
               ||
                  {? var_pres('_sysusr')>100
                  || obj_del(_sysusr)
                  ?};
                  _sysusr:=_sysobj.getUser(USERS.KOD);
                  {? var_pres('_sysusr')>100
                  || {? _sysusr.Superuser>0
                     || _role_level:=2
                     ?}
                  ?}
               ?}
            ?}
         ?};
         B_USRROL.next()
      !}
   ?};

   {? _role_level=3
   ||
::    Admin wymaga admina
      {? OPERATOR.USER().KOD<>'admin'
      || _can_continue:=0;
         _msg:='Brak uprawnień do modyfikowania roli: %1. Tylko: %2 może modyfikować uprawnienia roli, której członkiem jest on sam.'@[B_ROLE.NAME,'admin'];
         KOMM.add(_msg,2,,1)
      ?}
   |? _role_level=2
   ||
::    Superuser wymaga admina albo innego superusera (o ile parametr sysuser_poweruser_mode ma odpowiednią wartość)
      _res_mod:=exec('can_mod_superuser','#users','uprawnienia roli, której członkiem są użytkownicy specjalni');
      {? _res_mod.RESULT=0
      || _can_continue:=0;
         _msg:='Brak uprawnień do modyfikowania roli: %1. %2'@[B_ROLE.NAME,_res_mod.MSG];
         KOMM.add(_msg,2,,1)
      ?}
   ||
::    Zwykły użytkownik wymaga superusera
      {? sec_superuser()=0
      || _can_continue:=0;
         _msg:='Brak uprawnień do modyfikowania roli: %1. Tylko użytkownik specjalny może modyfikować uprawnienia innych ról.'@[B_ROLE.NAME];
         KOMM.add(_msg,2,,1)
      ?}
   ?};
   USERS.cntx_pop();
   B_USRROL.cntx_pop();
   ~~
?};
B_ROLE.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\upr_cascade_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Sprawdza czy mogę modyfikować danego użytkownika, tzn czy zachowana jest systemowa kaskada
::       uprawnień admin -> superuser -> zwykły
::   WE: [_a] - USERS.ref lub bieżący rekord
::       [_b] - INTEGER - [1]/2 - tryb wyświetlania dialogów: 1 - ekran, 2 - do pola .MSG obiektu _c
::       [_c] - obj_new - obiekt z polem .MSG do przechwycenia komunikatów
::   WY: 0 - brak uprawnień
::       1 - można coś robić z rolą
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _ref:=_a
?};

_dialog_mode:=1;
{? var_pres('_b')=type_of(0)
|| _dialog_mode:=_b
?};

_obj_msg:=~~;
{? var_pres('_c')>100
|| _obj_msg:=_c
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.prefix();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _what:=exec('USERS','#to_string');

   _sysobj:=exec(,'__sysusr');
:: Wyłączenie komunikatów
   _sysobj.showMessages(0);

   _role_level:=1;

   {? USERS.KOD='admin'
   || _role_level:=3
   ||
      {? _role_level<3
      ||
         {? var_pres('_sysusr')>100
         || obj_del(_sysusr)
         ?};
         _sysusr:=_sysobj.getUser(USERS.KOD);
         {? var_pres('_sysusr')>100
         || {? _sysusr.Superuser>0
            || _role_level:=2
            ?}
         ?}
      ?}
   ?};

   {? _role_level=3
   ||
::    Admin wymaga admina
      {? OPERATOR.USER().KOD<>'admin'
      || _can_continue:=0;
         _msg:='Brak uprawnień do modyfikowania użytkownika: %1. '
               'Tylko: %1 może modyfikować swoje uprawnienia.'@['admin'];
         {? _dialog_mode=1
         || FUN.emsg(_msg)
         |? _dialog_mode=2
         || {? type_of(_obj_msg)>100
            || _obj_msg.MSG:=_msg
            ?}
         ?}
      ?}
   |? _role_level=2
   ||
::    Superuser wymaga admina albo innego superusera (o ile parametr sysuser_poweruser_mode ma odpowiednią wartość)
      _res_mod:=exec('can_mod_superuser','#users');
      {? _res_mod.RESULT=0
      || _can_continue:=0;
         _msg:='Brak uprawnień do modyfikowania użytkownika: %1. %2'@[_what,_res_mod.MSG];
         {? _dialog_mode=1
         || FUN.emsg(_msg)
         |? _dialog_mode=2
         || {? type_of(_obj_msg)>100
            || _obj_msg.MSG:=_msg
            ?}
         ?}
      ?}
   ||
::    Zwykły użytkownik wymaga superusera
      {? sec_superuser()=0
      || _can_continue:=0;
         _msg:='Brak uprawnień do modyfikowania użytkowania: %1. '
               'Tylko użytkownik specjalny może modyfikować uprawnienia innych użytkowników.'@[_what];
         {? _dialog_mode=1
         || FUN.emsg(_msg)
         |? _dialog_mode=2
         || {? type_of(_obj_msg)>100
            || _obj_msg.MSG:=_msg
            ?}
         ?}
      ?}
   ?};
   ~~
?};
USERS.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\user_prot_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Wyświetla grupy ochron dla użytkownika
::   WE: [_a] - USERS.ref lub bieżący rekord
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.prefix();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _env:=exec('env_prot','#b_role');
   _env.USERS:=USERS.ref();
   params_set('env',_env);
   _env.select()
?};
USERS.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\b_protro_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Kopiuje grupy ochron z jednego usera na drugiego
::   WE: _a - USERS.ref - użytkownik źródłowy
::       _b - USERS.ref - użytkownik docelowy
::       _c - INTEGER - 0/1 - czy dodawać brakujące, czy nadpisywać istniejące ochrony
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_user_src:=_a;
_user_dst:=_b;

_overwrite:=_c;

_can_continue:=1;
_result:=1;

USERS.cntx_psh();
_sysobj:=exec(,'__sysusr');
_kod_src:=exec('FindAndGet','#table',USERS,_user_src,,"KOD",'');
_kod_dst:=exec('FindAndGet','#table',USERS,_user_dst,,"KOD",'');

_sys_src:=_sysobj.getUser(_kod_src);
_list:=~~;
{? var_pres('_sys_src')>100
|| _list:=_sysobj.getGroup(_sys_src)
?};

{? type_of(_list)>100
|| _sys_dst:=_sysobj.getUser(_kod_dst);
   {? var_pres('_sys_dst')>100
   || {? _overwrite>0
      || _can_continue:=_sysobj.setGroup(_sys_dst,_list)
      || _can_continue:=_sysobj.addGroup(_sys_dst,_list)
      ?};
      {? _can_continue>0
      || _result:=_sysobj.putUser(_sys_dst);
         {? _result=0
         || FUN.emsg('Nie udało się kopiowanie grup ochron dla użytkownika: %1'@[_kod_dst])
         ?}
      ?}
   ?}
?};
USERS.cntx_pop();
_result


\env_prot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Środowisko okienka z grupami ochron dla użytkownika
::   WY: obj_new()
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
::UWAGA: _fld, i _mth to formułki pomocnicze, zeby wygodniej tworzyć tablicę i komentować poszczególne jej elementy
::       powiedzmy, że to będzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to będzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
   _fld('USERS','Użytkownik którego dotyczy')
:: obsługa kontekstu okien
   ,_fld('SEL_PROT','Grupa ochron na której stoję')
   ,_fld('TAB_PROTU','Tabelka tymczasowa ochron użytkownika')

:: Okna
   ,_fld('WIN_PROTU','Okienko wertowania ochron użytkownika')

:: Identyfikatory okien
   ,_fld('wid_protu','Identyfikator okna')

   ,_fld('tit_main','Tytuł głównego okienka')

:: metody
   ,_mth('select','uruchamia wertowanie okna')
   ,_mth('load','uruchamia ładowanie tabeli')
);
_env.USERS:=null();
_env.SEL_PROT:=null();
_env.TAB_PROTU:=tab_tmp(1
         ,'PROT_KEY','STRING[30]','Nazwa pola 1'
         ,'DESC','STRING[255]','Nazwa pola 1'
         ,'ROLE','STRING[1]','Nazwa pola 1');

_env.WIN_PROTU:='';

_env.wid_protu:='#usr_protu';

_env.tit_main:='Grupy ochron użytkownika: %1'@[exec('USERS','#to_string')];

_env.load:="
   params_set(params_get());

   exec('b_prot_update','#b_role');
   _tab:=.TAB_PROTU;

   _prot_prev:='';
   _prot_curr:='';

   _tab.prefix();
   {? _tab.size()>0
   || _tab.cntx_psh();
      _prot_curr:=_tab.PROT_KEY;
      {? _tab.prev()
      || _prot_prev:=_tab.PROT_KEY
      ?};
      _tab.cntx_pop();
      _tab.erase()
   ?};

   _sysobj:=exec(,'__sysusr');
   _sysusr:=_sysobj.getUser(USERS.KOD);
   {? var_pres('_sysusr')>100
   ||
      _list:=_sysobj.getGroup(_sysusr);

      {? type_of(_list)>100
      ||
         _len:=obj_len(_list);
         {? _len>0
         || {! _it:=1.._len
            |! _tab.blank();
               _tab.PROT_KEY:=_list[_it];

               B_PROTRO.cntx_psh();
               B_PROTRO.index('B_PROT');
               B_PROT.cntx_psh();
               B_PROT.index('UNIK');
               B_PROT.prefix(_tab.PROT_KEY,_tab.PROT_KEY,);
               {? B_PROT.first()
               || _tab.DESC:=B_PROT.DESC;

                  B_USRROL.cntx_psh();
                  B_USRROL.index('USER');
                  B_USRROL.prefix(REF.FIRMA,USERS.ref());
                  {? B_USRROL.first()
                  || {!
                     |?
                        B_PROTRO.prefix(B_PROT.ref(),B_USRROL.B_ROLE);
                        {? B_PROTRO.first()
                        || _tab.ROLE:='T'
                        ?};
                        B_USRROL.next() & _tab.ROLE<>'T'
                     !}
                  ?};
                  B_USRROL.cntx_pop()
               ?};
               B_PROT.cntx_pop();
               B_PROTRO.cntx_pop();
               _tab.add()
            !}
         ?}
      ?}
   ?};

:: Obsługa ustawienia się ponownie na tym samym rekordzie, lub poprzednim
   _view:=null();
   {? _prot_curr<>''
   || _tab.cntx_psh();
      _tab.prefix(_prot_curr,);
      {? _tab.first()
      || _view:=_tab.ref()
      ?};
      _tab.cntx_pop()
   ?};
   {? _view=null() & _prot_prev<>''
   || _tab.cntx_psh();
      _tab.prefix(_prot_prev,);
      {? _tab.first()
      || _view:=_tab.ref()
      ?};
      _tab.cntx_pop()
   ?};

   {? _view<>null() & _tab.seek(_view)
   || ~~
   || _tab.first()
   ?};
   ~~
";

_env.select:="

   params_set(params_get());
   _sysobj:=exec(,'__sysusr');
   _sysusr:=_sysobj.getUser(USERS.KOD);
   {? var_pres('_sysusr')>100
   ||
      _list:=_sysobj.getGroup(_sysusr);

      _tab:=.TAB_PROTU;

      .load();

      exec('win_protu','#b_role',.);
      _tab.select()
   || FUN.emsg('Nie znaleziono użytkownika: %1 na serwerze.'@[exec('USERS','#to_string')])
   ?};
   ~~
";
_env


\win_protu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Tworzy okienko grup ochron dla użytkownika
::   WE: _a - obj_new - środowisko mechanizmu - wynik działania exec('env_prot','#b_role')
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_tab:=_env.TAB_PROTU;

_wer:=_tab.mk_sel(_env.tit_main,'P',0,_env.wid_protu,1,1,,,'U');

_tab.win_fld(_wer,,'PROT_KEY',,,20,,,'Nazwa'@);
_tab.win_fld(_wer,,'DESC',,,40,,,'Opis'@);
_tab.win_fld(_wer,,'ROLE',,,20,,,'Wynika z ról?'@,,'Czy grupa ochron nadana przez role użytkownika? (T/N)'@,2,,"'T'","'N'");

_fml:="
   params_set(params_get());
   exec('user_prot_add','#b_role')
";
_tab.win_act(_wer,,'Formuła','Dołącz'@@,,'Dodaje grupę ochron'@,_fml,,1,,,,'D');
_tab.win_act(_wer,1,'Formuła','Dołącz'@@,,'Dodaje grupę ochron'@,_fml,,1,,,,'D');
_tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['Dołącz'@],'menu:D');

_fml:="
   params_set(params_get());
   exec('user_prot_del','#b_role')
";
_tab.win_act(_wer,,'Formuła','&Usuń'@@,,'Usuwa wybrane grupy ochron'@,_fml,,,,,,'U');
_tab.win_btn(_wer,'text=%1,btn_label_align=center,panel=right,align=begin'['&Usuń'@],'menu:U');

_fml:="
   params_set(params_get());
   _tab:=cur_tab(1,1);
   {? _tab.ROLE='T'
   || exec('show_prot_role','#b_role',_tab.PROT_KEY)
   || FUN.emsg('Grupa ochron nie wynika z ról.'@)
   ?}
";
_tab.win_act(_wer,,'Formuła','Role nadające'@@,,'Pokazuje role nadające tą grupę ochron'@,_fml,,,,,,'R');

_tab.win_act(_wer,,'Kolejność');
_tab.win_sel(_wer);
_wer


\user_prot_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Akcja Dołącz w okienku ochron użytkowników
::   WE: [_a] - USERS.ref lub bieżący rekord
::       [_b] - INTEGER - czy wyświetlać dialogi (czy akcja w kontekście okna)
::       [_c] - STRING - lista ochron separowana znakiem ',' (dla pracy bezdialogowej)
::       [_d] - obj_new - obiekt z polem .MSG do przechwycenia komunikatów
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_ref:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _ref:=_a
?};

_dialog:=1;
{? var_pres('_b')=type_of(0)
|| _dialog:=_b
?};

_komm:=1;

_list:='';
{? var_pres('_c')=type_of('')
|| _list:=_c
?};

_obj_msg:=~~;
{? var_pres('_d')>100
|| _obj_msg:=_d
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.prefix();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

_can_continue:=1;
_result:=0;

{? _can_continue>0
|| _can_continue:=exec('upr_cascade_user','#b_role',,{? _dialog=0 || 2 || 1 ?},_obj_msg)
?};

{? _can_continue>0
||
   {? _dialog>0
   ||
      _env:=params_get().env;
      _tab_protu:=_env.TAB_PROTU;

      _tab:=tab_tmp(1
         ,'PROT_KEY','STRING[20]','Nazwa'@
         ,'REF','STRING[16]','SQL ref'
         ,'SELECTED','STRING[1]','Czy wybrano'
         ,'DESC','STRING[255]','Opis'@
      );
      _ndx:=_tab.ndx_tmp(,,'SELECTED',,,'PROT_KEY',,);
      _tab_protu.cntx_psh();
      B_PROT.cntx_psh();
      B_PROT.index('UNIK');
      B_PROT.prefix();
      {? B_PROT.first()
      || {!
         |? _tab_protu.prefix(B_PROT.PROT_KEY,);
            {? _tab_protu.first()=0
            ||
               _tab.blank();
               _tab.PROT_KEY:=B_PROT.PROT_KEY;
               _tab.REF:=$B_PROT.ref();
               _tab.SELECTED:='N';
               _tab.DESC:=B_PROT.DESC;
               _tab.add()
            ?};
            B_PROT.next()
         !}
      ?};
      _tab_protu.cntx_pop();
      B_PROT.cntx_pop();

      _can_continue:=exec('select_action','#table',_tab,'PROT_KEY,DESC',30,'Dostępne grupy ochron'@);
      {? _can_continue>0
      ||
::       Wybieram zaznaczone
         _tab.index(_ndx);
         _tab.prefix('T');
         _list:='';
         {? _tab.first()
         || {!
            |? _list+=_tab.PROT_KEY+',';
               _tab.next()
            !}
         ?}
      ||
::       Użytkownik zrezygnował z nadawania
         _komm:=0
      ?}
   ?};
   {? _can_continue>0 & _list<>''
   || _can_continue:=exec('users_prot_role_add','#b_role',,,1,_list);

      {? _can_continue>0
      ||
::       Jeżeli się udało po stronie systemowej, to dodaję do tabeli B_PROTU info
::       żeby wiedzieć że te grupy ochron zostały w aplikacji nadane ręcznie
         B_PROTU.cntx_psh();
         B_PROTU.index('UNIK');

         _split:=spli_str(_list,',');

         {? obj_len(_split)>0
         || {! _it:=1..obj_len(_split)
            |! _prot_key:=_split[_it];
               {? _prot_key<>''
               ||
                  B_PROTU.prefix(_prot_key,USERS.ref());
                  {? B_PROTU.first()=0
                  || B_PROTU.blank();
                     B_PROTU.PROT_KEY:=_prot_key;
                     B_PROTU.USERS:=USERS.ref();
                     _can_continue:=B_PROTU.add()
                  ?}
               ?}
            !}
         ?};
         B_PROTU.cntx_pop();

         {? _dialog>0
         || _env.load()
         ?}
      ?}
   ?}
?};

USERS.cntx_pop();

{? _can_continue>0
|| _result:=1
?};

{? _result=0
|| _user_str:=exec('USERS','#to_string');
   {? _dialog>0 & _komm>0
   || FUN.emsg('Nie powiodło się dodanie nowych grup ochron dla użytkownika: %1'@[_user_str])
   ?}
?};
_result


\user_prot_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Akcja Usuń w okienku ochron użytkowników
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_tab:=_env.TAB_PROTU;

_can_continue:=1;
_result:=0;

_can_continue:=exec('upr_cascade_user','#b_role');

{? _can_continue>0
|| {? _tab.ROLE='T'
   || FUN.emsg('Grupy ochron wynikajacej z ról nie można usuwać (należy odebrać użytkownikowi rolę).'@);
      _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _can_continue:=FUN.ask('Usunąć grupę ochron: %1?'@[_tab.PROT_KEY])
?};

{? _can_continue>0
||
   {? _can_continue>0
   ||
      _sysobj:=exec(,'__sysusr');
      _sysusr:=_sysobj.getUser(USERS.KOD);
      {? var_pres('_sysusr')>100
      || _can_continue:=_sysobj.delGroup(_sysusr,_tab.PROT_KEY);
         {? _can_continue>0
         || _can_continue:=_sysobj.putUser(_sysusr)
         ?};

         {? _can_continue>0
         || B_PROTU.cntx_psh();
            B_PROTU.index('UNIK');
            B_PROTU.prefix(_tab.PROT_KEY,USERS.ref());
            {? B_PROTU.first()
            || _can_continue:=B_PROTU.del(,1)
            ?};
            B_PROTU.cntx_pop()
         ?};

         {? _can_continue>0
         || _env.load()
         ?}
      ?};

      {? _can_continue=0
      || _user_str:=exec('USERS','#to_string');
         FUN.emsg('Nie powiodło się usunięcie grupy ochron: %1 dla użytkownika: %2'@[_tab.PROT_KEY,_user_str])
      ?}
   ?}
?};
{? _can_continue>0
|| _result:=1
?};

_result


\show_role_prot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Pokazuje grupy ochron powiązane z rolą
::   WE: [_a] - B_ROLE.ref lub bieżący rekord
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ROLE.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_ROLE.cntx_psh();
{? _ref<>null()
|| B_ROLE.prefix();
   {? B_ROLE.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_PROTRO.cntx_psh();
   B_PROTRO.index('UNIK');
   B_PROTRO.prefix(B_ROLE.ref());
   _title:='Grupy ochron roli: %1'@[exec('B_ROLE','#to_string')];
   _env:=exec('env_prot','#b_role');
   _env.USERS:=USERS.ref();
   _wer:=exec('win_protro','#b_role',_env,'#shrolprot',0,_title);
   B_PROTRO.select();

   B_PROTRO.cntx_pop();
   ~~
?};
B_ROLE.cntx_pop();
~~


\show_prot_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Pokazuje role, które nadają daną grupę ochron
::   WE: _a - STRING - nazwa grupy ochron
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_prot_key:=_a;

B_PROT.cntx_psh();
B_PROT.index('UNIK');
B_PROT.prefix(_prot_key,_prot_key,);
{? B_PROT.first()
||
   _user_str:=exec('record','#to_string',_env.USERS);
   B_ROLE.cntx_psh();
   B_USRROL.cntx_psh();
   B_USRROL.index('UNIK');
   B_PROTRO.cntx_psh();
   B_PROTRO.index('B_PROT');
   B_PROTRO.prefix(B_PROT.ref());

   _tab:=tab_tmp(1,
      'B_ROLE','STRING[100]','Nazwa pola 1'
   );

   {? B_PROTRO.first()
   || {!
      |? B_USRROL.prefix(REF.FIRMA,B_PROTRO.B_ROLE,_env.USERS);
         {? B_USRROL.first()
         || _tab.prefix(B_PROTRO.B_ROLE().NAME,);
            {? _tab.first()=0
            || _tab.blank();
               _tab.B_ROLE:=B_PROTRO.B_ROLE().NAME;
               _tab.add()
            ?}
         ?};
         B_PROTRO.next()
      !}
   ?};
   _tab.prefix();
   _tab.first();
   _title:='Role nadające grupę ochron: %1 użytkownikowi: %2'@[exec('B_PROT','#to_string'),_user_str];
   _wer:=exec('win_protro2','#b_role',_env,'#shprotrol',_tab,_title);
   _tab.select();

   B_PROTRO.cntx_pop();
   B_USRROL.cntx_pop();
   B_ROLE.cntx_pop();
   ~~
|| FUN.emsg('Grupa ochron: %1 nie została odnaleziona w systemie.'@[_prot_key])
?};
B_PROT.cntx_pop();
~~


\chk_b_actrol_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Sprawdza czy powiązanie czynności z rolą wynika z procesu
::   WE: _a - B_ACTION.ref() - czynność
::       _b - B_ROLE.ref() - rola
::   WY: 0 - nie wynika z procesu
::       1 - wynika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_action:=_a;
_b_role:=_b;

_result:=0;

B_ACTION.cntx_psh();
B_ACTION.prefix();
B_PROC.cntx_psh();
B_PREL.cntx_psh();
B_PREL.index('ELEROL');
{? B_ACTION.seek(_b_action)
||
   B_PREL.prefix(B_ACTION.B_ELE,_b_role);
   {? B_PREL.first()
   || {!
      |?
         {? B_PREL.TYPE<>'S' & B_PREL.B_PROC().ACCEPTED='T' & B_PROC.ACTIVE='T'
         || _result:=1
         ?};
         B_PREL.next() & _result=0
      !}
   ?}
?};
B_ACTION.cntx_pop();
B_PROC.cntx_pop();
B_PREL.cntx_pop();
_result


\fix_b_actrol_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Funkcja - naprawcza - usuwa przypisania czynność-rola dla rekordów utworzonych
::       na podstawie procesu, dla którego nie ma procesu
::   WY: 0 - porażka
::       1 - suces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_can_continue:=1;
_result:=0;

KOMM.init(250,,'Formuła naprawcza uprawnień: czynności->role'@);
FIRMA.cntx_psh();
B_ACTION.cntx_psh();
B_PREL.cntx_psh();
B_PROC.cntx_psh();
B_ACTROL.cntx_psh();
B_ACTROL.index('UNIK');
B_ACTROL.prefix();
{? B_ACTROL.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      B_ACTROL.cntx_psh();
      {? B_ACTROL.next()
      || _ref_nxt:=B_ACTROL.ref()
      ?};
      B_ACTROL.cntx_pop();

      {? B_ACTROL.PROCES='T' & B_ACTROL.MANUAL='N'
      || {? exec('chk_b_actrol_proc','#b_role',B_ACTROL.B_ACTION,B_ACTROL.B_ROLE)=0
         || B_ACTROL.B_ACTION();
            B_ACTROL.B_ROLE();
            _str_firma:=B_ACTROL.FIRMA().SYMBOL;
            _str_act:=exec('B_ACTION','#to_string');
            _str_role:=exec('B_ROLE','#to_string');
            _can_continue:=exec('actrol_del','#b_role',B_ACTROL.ref());
            {? _can_continue>0
            || KOMM.add('Usunięto powiązanie czynności: %1 z rolą: %2 w firmie: %3'@[_str_act,_str_role,_str_firma],1)
            || KOMM.add('Nie udało się usunąć powiązania czynności: %1 z rolą: %2 w firmie: %3'@[_str_act,_str_role,_str_firma],2)
            ?}
         ?}
      ?};
      {? _ref_nxt<>null()
      || _next:=B_ACTROL.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
B_ACTROL.cntx_pop();
B_ACTION.cntx_pop();
B_PREL.cntx_pop();
B_PROC.cntx_pop();
FIRMA.cntx_pop();
KOMM.select();
{? _can_continue>0
|| _result:=1
?};
_result


\del_actrol_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Usuwanie czynności dla roli dla bieżącej fimy - REF.FIRMA
::   WE: _a - Nazwa roli
::       _b - Kod czynności
::       [_c] FIRMA.ref - firma
::   WY: czy udało się usunąć w przypadku, gdy znaleziona / nieznaleziona / operacja usunięcia nie powiodła się 1/-1/0
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

_firma:=REF.FIRMA;
{? var_pres('_c')=type_of(FIRMA.ref())
|| _firma:=_c
?};

_b_role:=exec('FindInSet','#table','B_ROLE','UNIK',_a,_firma,,1);
_b_action:=exec('FindInSet','#table','B_ACTION','UNIK',_b,,1);

B_ACTROL.index('UNIK');
{? _b_role<>null() & _b_action<>null
||
   B_ACTROL.prefix(_firma,_b_role,_b_action);
   {? B_ACTROL.first()
   || {? B_ACTROL.del(,1)
      || _wyn:=1
      ?}
   || _wyn:=-1
   ?}
?};
_wyn


\tab_prots
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [23.25]
:: OPIS: zapisuje wybrane grupy ochron w _env.TAB_PROTS
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

::    Zapamiętuję zaznaczenie
{? var_pres('TAB_PROTS',_env)>100
|| obj_del(_env.TAB_PROTS)
?};

_tab:=cur_tab(1,1);
{? _tab.sel_size()>0
|| _env.TAB_PROTS:=_tab.sel_aget()
|? grp_empty(cur_tab(1,1),cur_win(1,1))<>1
|| _env.TAB_PROTS:=tab_tmp(1,
      'REF','INTEGER','#B_PROT');
   _env.TAB_PROTS.blank();
   _env.TAB_PROTS.REF:=#_tab.ref();
   _env.TAB_PROTS.add()
?};
~~


\copy_from_act_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Kopiuje listę ról dla podanych użytkowników
::   WE:
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_grp:=USERS.sel_size()>1;
_wyn:=1;
{? _grp
||
   _msg:='Czy skopiować:\n\n'
         '1. Role\n'
         '2. Uprawnienia do danych\n'
         '3. Ochrony\n'
         '4. Uniwersalne parametry (użytkownika)\n'
         '\ndla użytkowników?'@;
   _choice:=FUN.choice(_msg,,'Dodaj do istniejących'@,'Zastąp'@);
   exec('ini_kom','#message','Informacje o skopiowanych dancyh dla użytkowników.'@);
   _sel:=USERS.sel_aget();
   USERS.sel_adel();
   {? _sel.first()
   ||
      _users:='';
      USERS.cntx_psh();
      USERS.prefix();
      _sel.cntx_psh();
      {!|?
         {? USERS.seek(_sel.REF) || _users+='\''+$USERS.ref()+'\',' ?};
         _sel.next()
      !};
      _sel.cntx_pop();
      _users:=_users-1;
      _where:='USERS.REFERENCE not in (%1)'[_users];
      USERS.f_set('KOD','',_where);
      _wer:=exec('win_user_all','#b_role',_env,'#usr_copy_usrol',1,0);
      USERS.win_sel(_wer);
      {? USERS.select()
      || _user:=USERS.ref();
         USERS.f_clear(1);
         USERS.prefix();
         {!|?
            {? USERS.seek(_sel.REF)
            || _wyn:=params_exec('copy_from_act','#b_role',USERS.ref(),1,_choice, _user);
               {? _wyn
               || exec('add_kom','#message','Uzupełniono dane dla użytkownika %1.'@[USERS.KOD],2)
               || exec('add_kom','#message','Nie uzupełniono danych dla użytkownika %1.'@[USERS.KOD],2)
               ?}
            ?};
            _sel.next()
         !}
      || USERS.f_clear(1)
      ?};
      USERS.cntx_pop()
   ?};
   exec('end_kom','#message')
|| _wyn:=params_exec('copy_from_act','#b_role',USERS.ref())
?};
_wyn


\user_prot_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Zwraca obiekt do manipulowania grupami ochron użytkowników
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
   'TAB','I_USER','I_B_PROT',
   'update'
);
_obj.TAB:=_tab:=tab_tmp(2,
   'USER','INTEGER','USERS_REF',
   'B_PROT','INTEGER','B_PROT_REF',
   'PROT_KEY','STRING[13]','PROT_KEY',
   'DESC','STRING[255]','DESC'
);
_obj.I_USER:=_obj.TAB.index('?');
_obj.I_B_PROT:=_obj.TAB.ndx_tmp(,,'B_PROT',,0,'USER',,0);
_obj.update:="
   _usr:=_a;
   USERS.cntx_psh();
   USERS.prefix();
   {? USERS.seek(_usr)
   || _tab:=.TAB;
      _tab.cntx_psh();
      _tab.index(.I_USER);
      _tab.prefix(USERS.ref());
      {? _tab.first() || {! |? _tab.del !} ?};
      _sysobj:=exec(,'__sysusr');
      _sysusr:=_sysobj.getUser(USERS.KOD);
      {? var_pres('_sysusr')>100
      || _list:=_sysobj.getGroup(_sysusr);
         {? type_of(_list)>100
         || _len:=obj_len(_list);
            {? _len>0
            || B_PROT.cntx_psh();
               B_PROT.index('UNIK'); B_PROT.prefix();
               {! _it:=1.._len
               |! _tab.blank(1);
                  _tab.USER:=USERS.ref();
                  _tab.PROT_KEY:=_list[_it];
                  {? B_PROT.find_key(_tab.PROT_KEY,)
                  || _tab.B_PROT:=B_PROT.ref();
                     _tab.DESC:=B_PROT.DESC
                  ?};
                  _tab.add()
               !};
               B_PROT.cntx_pop()
            ?}
         ?}
      ?};
      _tab.cntx_pop()
   ?};
   USERS.cntx_pop()
";
_obj


\copy_from_firm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [RR.xx]
:: OPIS: Kopiuje podaną rolę do bieżącej firmy, jeżeli w bieżącej firmie jest już taka rola
::       to zwraca jej ref
::   WE: [_a] - B_ROLE.ref() lub bieżący rekord
::   WY: B_ROLE.ref - ref skopiowanej firmy lub null jeżeli się nie udało
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ROLE.ref()) | var_pres('_a')=type_of('')
|| _ref:=_a
?};

_result:=null();
_can_continue:=1;

B_ROLE.cntx_psh();
{? _ref<>null()
|| B_ROLE.prefix();
   {? B_ROLE.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _name:=B_ROLE.NAME;
   _buffer:=exec('obj_new','#buf','B_ROLE');
   _buffer.get();
   B_ROLE.index('UNIK');
   B_ROLE.prefix(REF.FIRMA,_name,);
   {? B_ROLE.first()
   || _result:=B_ROLE.ref()
   || B_ROLE.prefix();
      _buffer.FIRMA:=REF.FIRMA;
      _buffer.set();
      {? B_ROLE.add()
      || _result:=B_ROLE.ref()
      ?}
   ?}
?};
B_ROLE.cntx_pop();
_result


:Sign Version 2.0 jowisz:1045 2023/08/23 10:46:47 26a129c273e47f14cbe37b24f95a7422686a7aa09829554d0f5c9141a2c3fc181ce9b236c2e7be4744bbd0f7cfce764f7abba22daef0f4f434c486e3398c0ee8b2d19739fd6192da28ce0683dcd09fb4c8c5c32d7e759e5c834a6a7becc47e2a473decc41665b3a4a2a70a1bdd905a739589177e0caa954e4bac6d8270f23d6b
