:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_action.fml
:: Utworzony: 29.12.2014 [17.00]
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli B_ACTION
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli B_ACTION
::   WY: obj_new()
::----------------------------------------------------------------------------------------------------------------------
exec('B_ACTION','#buffer')


\imp_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [17.00]
:: OPIS: Import czynności z definicji systemu
::   WE: [_a] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMMa
::       [_b] - B_DOMAIN.ref - obszar którego czynności aktualizować, jeśli nie podane to wszystkie obszary
::       [_c] - INTEGER - 0/[1] - czy komunikaty o nieprawidłowościach dodawać do KOMMa
::       [_d] - INTEGER - [0]/1 - czy wyświetlać progress
::----------------------------------------------------------------------------------------------------------------------
_komm_init:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_b_domain:=null();
{? var_pres('_b')=type_of(B_DOMAIN.ref())
|| _b_domain:=_b
?};

_komm:=1;
{? var_pres('_c')=type_of(0)
|| _komm:=_c
?};

_progress:=0;
{? var_pres('_d')=type_of(0)
|| _progress:=_d
?};

:: element ogólny - czynność
_b_chain:=exec('add','#b_chain','B_ACTION','Czynność');

{? _komm_init>0
|| KOMM.init(,,'Import czynności')
?};

_fields:=exec('mbTabFields_tab','#table',B_ACTION);
_ndx:=_fields.ndx_tmp('',1,'FLD_ACR',,);
_fields.index(_ndx);
B_ACTION.cntx_psh();
B_DOMAIN.cntx_psh();
B_DOMAIN.index('SYMBOL');
B_DOMAIN.prefix();

B_ACTION.index('UNIK');
_task:=app_info('task');

{? _b_domain=null()
||
:: Brak obszaru - aktualizuje wszystko
   _task.prefix();
   B_ACTION.prefix();
   B_ACTION.for_each(" B_ACTION.AKT:='N';B_ACTION.GRP_FIRM:='N'; B_ACTION.put()")
||
:: Jest podany obszar, więc aktualizuję tylko z niego

:: Dezaktywuję wszystkie aktywne czynności obszaru
   B_ACTION.cntx_psh();
   B_ACTION.index('B_DOMAIN');
   B_ACTION.prefix('T',_b_domain);
   {? B_ACTION.first()
   || {!
      |? B_ACTION.cntx_psh();
         B_ACTION.prefix();
         B_ACTION.AKT:='N';
         B_ACTION.GRP_FIRM:='N';
         _can_continue:=B_ACTION.put();
         B_ACTION.cntx_pop();
         B_ACTION.first() & _can_continue>0
      !}
   ?};
   B_ACTION.cntx_pop();
:: Zakładam prefiks na listę czynności
   _dom_sym:=exec('FindAndGet','#table',B_DOMAIN,_b_domain,,"SYMBOL",'');
   {? _dom_sym<>''
   || _task.prefix(_dom_sym)
   ?}
?};

_prg_step:=10;
{? _task.first()
||
   _lp:=1;
   {? _progress>0
   || FUN.prg_start(_task.size()/_prg_step,'Import czynności z definicji systemu...'@,1,,1)
   ?};

   {!
   |? {? _progress>0
      || {? _lp%*_prg_step=0
         || FUN.prg_next()
         ?}
      ?};
      {? ~B_DOMAIN.find_key(_task.B_DOM,)
      || {? _komm
         || KOMM.add('Nie zaimportowano czynności '+_task.SYMBOL+' — brak definicji obszaru '+_task.B_DOM+'.'
             ,'xwin16.png:81')
         ?}
      ||
         {? B_ACTION.find_key(_task.SYMBOL,)
         || _is_used:=exec('is_used','#b_action',B_ACTION.ref());
            {? B_ACTION.B_DOMAIN<>B_DOMAIN.ref()
            || B_ACTION.B_DOMAIN:=B_DOMAIN.ref()
            ?};
            {? B_ACTION.NAME<>_task.NAME_ORG
            || B_ACTION.NAME:=_task.NAME_ORG
            ?};
            {? B_ACTION.B_CAN<>_task.B_CAN
            || {? _komm & _is_used=1
               || KOMM.add('Zmiana wskazania na kanał dostępu — czynność '+_task.SYMBOL+' — jest używana w procesie '
                   ,'xwin16.png:81')
               ?};
               B_ACTION.B_CAN:=_task.B_CAN
            ?};
            {? B_ACTION.AUTOMAT<>_task.AUTOMAT
            || B_ACTION.AUTOMAT:=_task.AUTOMAT
            ?};
            {? B_ACTION.PROC<>_task.PROC
            || {? _komm & _is_used=1
               || KOMM.add('Zmiana znacznika występowania w procesie — czynność '+_task.SYMBOL+
                   ' — jest używana w procesie ','xwin16.png:81')
               ?};
               B_ACTION.PROC:=_task.PROC
            ?};
            {? B_ACTION.FMMAIN<>_task.FMMAIN
            || B_ACTION.FMMAIN:=_task.FMMAIN
            ?};
            {? B_ACTION.FMTODO<>_task.FMTODO
            || B_ACTION.FMTODO:=_task.FMTODO
            ?};
            {? B_ACTION.ICON<>_task.ICON
            || B_ACTION.ICON:=_task.ICON
            ?};
            {? B_ACTION.REP<>_task.REP
            || B_ACTION.REP:=_task.REP
            ?};
            B_ACTION.AKT:='T';
            B_ACTION.MANUAL:='N';
            B_ACTION.USER:='T';
            B_ACTION.SERVICE='N';
            B_ACTION.GRP_FIRM:='N';
            {? B_ACTION.INTERM<>_task.INTERM
            || B_ACTION.INTERM:=_task.INTERM
            ?};
            {? B_ACTION.MOBILE<>_task.MOBILE
            || B_ACTION.MOBILE:=_task.MOBILE
            ?};

            exec('import_access','#b_action','main',exec('filename','#b_action'),1,_komm);
            exec('import_properties','#b_action','main',exec('filename','#b_action'),_fields,1,_komm);
            exec('import','#portal','main',exec('filename','#b_action'),_komm);
            exec('import_nrun','#b_action','n_main',exec('filename','#b_action'),_komm);
            exec('perm4act','#b_perm',0);
            {? B_ACTION.MANUAL='T'
            || B_ACTION.USER:='N';
               B_ACTION.SERVICE:='N'
            ?};
            {? B_ACTION.SEND='T'
            || B_ACTION.USER:='N';
               B_ACTION.MANUAL:='N'
            ?};
            {? B_ACTION.put(1) & B_ACTION.memo_put(,'PORT_OPR')
            || {? B_ACTION.PROC='T'
               || exec('chk_desc','#b_action',exec('filename','#b_action'),_komm)
               ?};
               exec('update_micro','#b_action');
               FIRMA.cntx_psh();
               FIRMA.index('SYMBOL');
               FIRMA.prefix();
               {? FIRMA.first()
               || {!
                  |? exec('update_b_actpro','#b_action',FIRMA.ref());
                     FIRMA.next()
                  !}
               ?};
               FIRMA.cntx_pop();
               exec('imp4act','#parses',0)
            ?}
         || B_ACTION.blank(1);
            _ele:=exec('add','#b_ele',_b_chain,_task.SYMBOL);
            B_ACTION.B_ELE:=_ele;
            B_ACTION.UID:=_task.SYMBOL;
            B_ACTION.B_DOMAIN:=B_DOMAIN.ref();
            B_ACTION.NAME:=_task.NAME_ORG;
            B_ACTION.B_CAN:=_task.B_CAN;
            B_ACTION.AUTOMAT:=_task.AUTOMAT;
            B_ACTION.PROC:=_task.PROC;
            B_ACTION.FMMAIN:=_task.FMMAIN;
            B_ACTION.FMTODO:=_task.FMTODO;
            B_ACTION.ICON:=_task.ICON;
            B_ACTION.REP:=_task.REP;
            B_ACTION.AKT:='T';
            B_ACTION.MANUAL:='N';
            B_ACTION.USER:='T';
            B_ACTION.SERVICE='N';
            B_ACTION.GRP_FIRM:='N';
            B_ACTION.INTERM:=_task.INTERM;
            B_ACTION.MOBILE:=_task.MOBILE;

            exec('import_access','#b_action','main',exec('filename','#b_action'),,_komm);
            exec('import_properties','#b_action','main',exec('filename','#b_action'),_fields,,_komm);
            exec('import','#portal','main',exec('filename','#b_action'),_komm);
            exec('import_nrun','#b_action','n_main',exec('filename','#b_action'),_komm);
            {? B_ACTION.MANUAL='T'
            || B_ACTION.USER:='N';
               B_ACTION.SERVICE:='N'
            ?};
            {? B_ACTION.SEND='T'
            || B_ACTION.USER:='N';
               B_ACTION.MANUAL:='N'
            ?};
            {? B_ACTION.add(1) & B_ACTION.memo_put(,'PORT_OPR')
            || {? B_ACTION.PROC='T'
               || exec('chk_desc','#b_action',exec('filename','#b_action'),_komm)
               ?};
               exec('perm4act','#b_perm',0);
               exec('update_micro','#b_action');
               FIRMA.cntx_psh();
               FIRMA.index('SYMBOL');
               FIRMA.prefix();
               {? FIRMA.first()
               || {!
                  |? exec('update_b_actpro','#b_action',FIRMA.ref());
                     FIRMA.next()
                  !}
               ?};
               FIRMA.cntx_pop();
               exec('imp4act','#parses',0)
            ?}
         ?}
      ?};
      _lp+=1;
      _task.next()
   !};
   {? _progress>0
   || FUN.prg_stop()
   ?}
?};
B_ACTION.cntx_pop();
B_DOMAIN.cntx_pop();

{? _komm_init>0 & ~KOMM.empty()
|| KOMM.select()
?};

~~


\is_used
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [17.00]
:: OPIS: Sprawdza, czy można poprawić B_ACTION
::       Uwagi wpisuje do KOMMa
::   WE: _a - B_ACTION.ref()
::   WY: 0 / 1 - czy można usunąć czynność
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

_result:=1;
_can_continue:=1;

B_ACTION.cntx_psh(); B_PREL.cntx_psh(); B_PROC.cntx_psh();
B_ACTION.clear();
{? B_ACTION.seek(_ref)
||
:: Sprawdza czy czynnosc jest elementem procesu (ale nie mikroprocesu)
   B_PREL.index('ELSTART');
   B_PREL.prefix(B_ACTION.B_ELE);
   {? B_PREL.first()
   || {!
      |? {? B_PREL.B_PROC().MICRO<>'T'
         || _result:=0
         ?};
         B_PREL.next()
      !}
   ?}
?};
B_ACTION.cntx_pop(); B_PREL.cntx_pop(); B_PROC.cntx_pop();

_result


\add_domain
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [17.00]
:: OPIS: Dodaje obszary z buildera
::----------------------------------------------------------------------------------------------------------------------
 B_DOMAIN.cntx_psh();
 B_DOMAIN.index('SYMBOL');
 B_DOMAIN.prefix();
_domain:=app_info('domain');
{? _domain.first()
|| {!
   |?
      {? B_DOMAIN.find_key(_domain.SYMBOL,)
      || {? B_DOMAIN.NAME<>_domain.NAME_ORG
         || B_DOMAIN.NAME:=_domain.NAME_ORG
         ?};
         {? B_DOMAIN.COLOR<>_domain.COLOR
         || B_DOMAIN.COLOR:=_domain.COLOR
         ?};
         {? B_DOMAIN.ICON<>_domain.ICON
         || B_DOMAIN.ICON:=_domain.ICON
         ?};
         {? B_DOMAIN.FM<>_domain.FM
         || B_DOMAIN.FM:=_domain.FM
         ?};
         {? B_DOMAIN.TCALL<>_domain.TCALL
         || B_DOMAIN.TCALL:=_domain.TCALL
         ?};
         {? B_DOMAIN.INTERM<>_domain.INTERM
         || B_DOMAIN.INTERM:=_domain.INTERM
         ?};
         {? B_DOMAIN.MOBILE<>_domain.MOBILE
         || B_DOMAIN.MOBILE:=_domain.MOBILE
         ?};
         B_DOMAIN.put(1)
      || B_DOMAIN.blank(1);
         B_DOMAIN.SYMBOL:=_domain.SYMBOL;
         B_DOMAIN.NAME:=_domain.NAME_ORG;
         B_DOMAIN.COLOR:=_domain.COLOR;
         B_DOMAIN.ICON:=_domain.ICON;
         B_DOMAIN.FM:=_domain.FM;
         B_DOMAIN.TCALL:=_domain.TCALL;
         B_DOMAIN.INTERM:=_domain.INTERM;
         B_DOMAIN.MOBILE:=_domain.MOBILE;
         B_DOMAIN.add(1)
      ?};
      _domain.next()
   !}
?};
 B_DOMAIN.cntx_pop();
~~


\valid_grp_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdzenie czynności - przed akcją grupowa
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Sprawdzenie konfiguracji czynności');
VAR.GRUPA:='T';
1


\valid_grp_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdzenie czynności - po akcji grupowej
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select(,,,,'Szczegóły');
~~


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy można usunąć B_ACTION
::       Uwagi wpisuje do KOMMa
::   WE: _a - B_ACTION.ref()
::   WY: 0 / 1 - czy można usunąć czynność
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystapić błąd.
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

_result:=1;
_can_continue:=1;

B_ACTION.cntx_psh(); B_PREL.cntx_psh(); B_PROC.cntx_psh(); B_ACTROL.cntx_psh(); B_C_ACT.cntx_psh();
B_ACTION.clear();
{? B_ACTION.seek(_ref)
||
:: Sprawdza czy czynność jest elementem procesu (ale nie mikroprocesu)
   B_PREL.index('ELSTART');
   B_PREL.prefix(B_ACTION.B_ELE);
   {? B_PREL.first()
   || {!
      |? {? B_PREL.B_PROC().MICRO<>'T'
         || KOMM.add(
               'Nie można usunąć czynności %1 — jest elementem procesu %2.'@[B_ACTION.UID,B_PREL.B_PROC().SYMBOL],
               'xwin16.png:81',,1
            );
            _result:=0
         ?};
         B_PREL.next()
      !}
   ?};

:: Sprawdza czy czynność jest powiązana z rolami
   B_ACTROL.index('ACTION');
   B_ACTROL.prefix(B_ACTION.ref());
   {? B_ACTROL.first()
   || KOMM.add('Nie można usunąć czynności %1 — jest powiązana z rolami.'@[B_ACTION.UID],'xwin16.png:81',,1);
      _result:=0
   ?};

:: Sprawdza czy czynność jest powiązana z obszarem roboczym
   B_C_ACT.index('B_ACTION');
   B_C_ACT.prefix(B_ACTION.ref());
   {? B_C_ACT.first()
   || KOMM.add('Nie można usunąć czynności %1 — jest powiązana z obszarem roboczym.'@[B_ACTION.UID],'xwin16.png:81',,1);
      _result:=0
   ?}

?};
B_ACTION.cntx_pop(); B_PREL.cntx_pop(); B_PROC.cntx_pop(); B_ACTROL.cntx_pop(); B_C_ACT.cntx_pop();

_result


\filename
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zwraca nazwe pliku z formuła główna czynności
::   WE: [_a] - wskazanie na czynność, domyślnie bieżąca czynność
::   WY: nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
_plik:='';
{? var_pres('_a')>0
|| B_ACTION.cntx_psh();
   {? B_ACTION.seek(_a)
   || _plik:='!'+B_ACTION.UID
   ?};
   B_ACTION.cntx_pop()
|| _plik:='!'+B_ACTION.UID
?};
(-~_plik)


\name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca nazwe czynności
::   WE: _a - B_ACTION.UID
::----------------------------------------------------------------------------------------------------------------------
_uid:=_a;

_name:='';

B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_uid,);
{? B_ACTION.first()
|| _name:=B_ACTION.NAME
?};
B_ACTION.cntx_pop();

_name


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Zwraca wskazanie czynności na podstawie identyfikatora.
::   WE: _a [STRING] - Identyfikator czynności.
::   WY: Wskazanie czynności lub null().
::----------------------------------------------------------------------------------------------------------------------
_uid:={? var_pres('_a')=type_of('') || _a || '' ?};

B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_uid,);
_ref:={? B_ACTION.first() || B_ACTION.ref() || null() ?};
B_ACTION.cntx_pop();

_ref


\procrol2actrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Przepisanie ról czynności w procesie do czynności i akceptacja niezaakceptowanych ról
::   WE: _a - B_ELE.ref()
::       _b - B_ROLE.ref()
::----------------------------------------------------------------------------------------------------------------------
_b_ele:=_a;
_b_role:=_b;

_b_action:=exec('FindInSet','#table','B_ACTION','B_ELE',_b_ele);

{? _b_action=null() || return() ?};

B_ACTROL.cntx_psh();
B_ACTROL.index('ACTION');
B_ACTROL.prefix(_b_action,_b_role);
{? B_ACTROL.first()
|| B_ACTROL.PROCES:='T';
   B_ACTROL.put()
|| B_ACTROL.blank();
   B_ACTROL.B_ACTION:=_b_action;
   B_ACTROL.B_ROLE:=_b_role;
   B_ACTROL.MANUAL:='N';
   B_ACTROL.PROCES:='T';
   B_ACTROL.TM_START:=B_ACTROL.tm_stamp();
   B_ACTROL.STARTD:=date();
   B_ACTROL.STARTT:=time();
   B_ACTROL.U1_KOD:=exec('username','#users');
   B_ACTROL.U1_DANE:=userdata();
   {? B_ACTROL.add()>0
   || exec('after_add_actrole','#b_usrdom')
   ?}
?};
B_ACTROL.cntx_pop()


\valid_idadd
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy porty czynności są typu złączeniowego i czy te tabele mają pole typu IDADD
::   WE: [_a] - B_ACTION.ref
::       [_b] - INTEGER - 0/[1] - Czy dodawać info o problemie do KOMMa
::       [_c] - INTEGER - [1]/2 - Sposób grupowania komunikatów o błędach:
::                                                                        1 - grupuje po kodzie czynności
::                                                                        2 - grupuje na zasadzie Błędy -> Opis błędu -> treść
::       [_d] - tab_tmp - tabelka tymczasowa do optymalizacji zawierająca akronimy tabel i info czy jest tam pole IDADD
::                        wynik działania exec('tab_optimize_idadd','#b_action')
::       [_e] - obj_new - argumenty funkcji dla komunikatów - wynik działania exec('komm_args','#b_proc')
::   WY: 0 - nie wszystkie tabele wystepujące w portach maja pola IDADD
::       1 - wszystko ok
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};
_komm:=1;
{? var_pres('_b')=type_of(0)
|| _komm:=_b
?};
_komm_gr:=1;
{? var_pres('_c')=type_of(0)
|| _komm_gr:=_c
?};

{? var_pres('_d')>100
|| _tab_optimize:=_d
|| _tab_optimize:=exec('tab_optimize_idadd','#b_action')
?};

_args:=~~;
{? var_pres('_e')>100
|| _args:=exec('obj_ntab_set','#array',_e)
|| _args:=exec('komm_args','#b_proc')
?};

_result:=1;
_can_continue:=1;

B_ACTION.cntx_psh();
{? _ref<>null()
|| B_ACTION.clear();
   {? B_ACTION.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_PORT.cntx_psh();
   B_PORT.index('B_ELE');
   B_PORT.prefix('T',B_ACTION.B_ELE);
   {? B_PORT.first()
   || {!
      |?
         _tab_acr:=1-B_PORT.B_TYPE().SYMBOL;
         {? B_PORT.B_TYPE().TYPE=exec('type_joined','#b_type')
         || _has_idadd:=0;
            {? 1+B_TYPE.SYMBOL='_'
            ||
               _tab_optimize.cntx_psh();
               _tab_optimize.prefix(_tab_acr);
               {? _tab_optimize.first()
               ||
::                Było już sprawdzane dla takiej tabeli
                  _has_idadd:=_tab_optimize.IDADD
               ||
::                Nie badałem dla takiej tabeli więc pobieram liste pól tabeli
                  {? var_pres('_tab')>100
                  || obj_del(_tab)
                  ?};
                  _tab:=($_tab_acr)();

                  _has_idadd:=exec('has_idadd','#table',_tab);
                  _tab_optimize.blank();
                  _tab_optimize.TAB_ACR:=_tab_acr;
                  _tab_optimize.IDADD:=_has_idadd;
                  _tab_optimize.add(1)
               ?};
               _tab_optimize.cntx_pop()
            ?};
            {? _has_idadd<=0
            ||
               {? _komm>0
               || _txt:='Tabela \''+_tab_acr+'\' będąca parametrem czynności \''+B_ACTION.NAME+'\', nie zawiera pola typu IDADD.';
                  {? _komm_gr=1
                  || _sect:='Czynność: '+B_ACTION.UID+' — '+B_ACTION.NAME;
                     {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
                     {? KOMM.find_msg(_txt)=0
                     || KOMM.add(_txt,'xwin16.png:81')
                     ?};
                     KOMM.sect_end();
                     ~~
                  |? _komm_gr=2
                  ||
                     _sect:='Braki pól typu IDADD w tabelach'@;

                     _args.SECT:=_sect;
                     _args.MSG:=_txt;
                     _args.GRAPH_UID:=B_PORT.B_PREL().UID;
                     _args.ICON:=81;
                     exec('komm_add','#b_proc',_args);
                     ~~
                  ?}
               ?};
               _result:=0
            ?}
         ?};
         B_PORT.next()
      !}
   ?};
   B_PORT.cntx_pop()
?};
B_ACTION.cntx_pop();
_result


\valid_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy wszystkie czynności są poprawnie skonfigurowane
::   WE: _a - czy wyświetlać raport (1), czy tylko zwrócić wynik działania
::   WY: 0 / 1 - jeżeli wszystkie czynnosci ok, to (1)
::       Dodatkowo każda niepoprawnie skonfigurowana czynność dostaje znacznik B_ACTION.PROBLEM:='T'
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _display:=_a || _display:=1 ?};

_result:=1;

{? _display>0 || KOMM.init(,,'Sprawdzenie konfiguracji czynności') ?};
VAR.GRUPA:='T';

B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix();
{? B_ACTION.first()
|| {!
   |? _ok:=exec('valid_one','#b_action',_display,B_ACTION.ref());
      {? ~_ok || _result:=0 ?};
      B_ACTION.next()
   !}
?};
B_ACTION.cntx_pop();

VAR.GRUPA:='N';
{? _display || KOMM.select(,,,,'Szczegóły') ?};

_result


\valid_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza pojedyncza czynność, czy jest poprawnie skonfigurowana
::   WE: [_a] - czy wyświetlać raport (domyślnie - 1), czy tylko zwrócic wynik działania (0)
::       [_b] - B_ACTION.ref() - domyślnie bieżący rekord
::   WY: 0 / 1 - jeżeli ok, to (1)
::       Dodatkowo niepoprawnie skonfigurowana czynność dostaje znacznik B_ACTION.PROBLEM:='T'
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _display:=_a || _display:=1 ?};
{? var_pres('_b')=type_of(null()) || _action:=_b || _action:=B_ACTION.ref() ?};

_result:=1;
_dalej:=1;

{? _display>0 & VAR.GRUPA<>'T' || KOMM.init(,,'Sprawdzenie konfiguracji czynności') ?};

_sect:='Czynność: '+B_ACTION.UID+' — '+B_ACTION.NAME;
{? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};

Cntx.psh(B_ACTION,B_ELE,B_DOMAIN);
Cntx.clr(B_ACTION,B_ELE);

{? B_ACTION.seek(_action)
||
   _error:=0; _remark:=0;

:: 1. musi być plik kategorii a w nim formuła główna (błąd)
:: znajdz plik formuły (analogicznie jak w metodzie .runAction)
   _plik:=exec('filename','#b_action');
   {? _plik=''
   || KOMM.add('Nie udało się wyłuskać nazwy pliku dla obszaru '+B_DOMAIN.SYMBOL+'.','xwin16.png:81',,,"");
      _error:=1;
      _dalej:=0
   ?};
:: znajdź główną formułe obsługi czynności
   {? _dalej
   ||
      _fun_g:='main';
      {? ~exec('is_fun','#file',_plik,_fun_g)
      || _txt:='Brak funkcji \\'+_fun_g+' w pliku '+_plik+'.fml.';
         KOMM.add(_txt,'xwin16.png:81',,,$('FUN.info('''+gsub(_txt,'\\','\\\\')+''')'));
         _error:=1
      ?}
   ?};
:: Sprawdzam czy w MacroBUILDER przypisano formułę główną
   {? _dalej>0
   || {? B_ACTION.FMMAIN=''
      || KOMM.add('Nie przypisano formuły głównej czynności w MacroBUILDER.','xwin16.png:81',,,"");
         _error:=1
      ?}
   ?};
:: Sprawdzam czy w MacroBUILDER przypisano formułę na opis todo
   {? _dalej>0
   || {? B_ACTION.FMTODO=''
      || KOMM.add('Nie przypisano formuły na opis TODO w MacroBUILDER.','xwin16.png:15',,,"");
         _remark:=1
      ?}
   ?};
:: Sprawdzam czy w MacroBUILDER przypisano formułę inicjującą obszar
   {? _dalej>0 & B_ACTION.B_DOMAIN<>null()
   || {? B_ACTION.B_DOMAIN().FM=''
      || KOMM.add('Nie przypisano formuły inicjującej obszar: '+B_DOMAIN.SYMBOL+' w MacroBUILDER.','xwin16.png:15',,,"");
         _remark:=1
      ?}
   ?};

:: Ładuje tabele tymczasowa z definicja portów z komentarzy w formule głównej czynności
   _b_port:=exec('ports','#b_port',_plik,_fun_g);

   _tab:=exec('join_tab','#b_type');
   B_PORT.index('UNIK');
   B_PORT.prefix(B_ACTION.B_ELE,null(),null());
   {? B_PORT.first()
   || {!
      |?
::       2. sprawdz, czy port jest w komentarzach fomuły głównej czynnosci
         _b_port.prefix(B_PORT.KIND,B_PORT.SYMBOL,);
         {? B_PORT.ACTIVE='T' & ~_b_port.first()
         || _txt:=
               'Parametr '+exec('kind_opis','#b_port',B_PORT.KIND).M+': '+B_PORT.SYMBOL+
               ' nie występuje w definicji formuły.';
            KOMM.add(_txt,'xwin16.png:81',,,$('FUN.info('''+gsub(_txt,'\\','\\\\')+''')'));
            _error:=1
         ?};

::       3. porty używają typów złączeniowych, których nie ma w definicji systemu (błąd)
         {? B_PORT.B_TYPE().TYPE=exec('type_joined','#b_type')
         ||
            _tab.prefix(B_PORT.B_TYPE().SYMBOL,);
            {? ~_tab.first()
            || _txt:=
                  'Parametr '+exec('kind_opis','#b_port',B_PORT.KIND).M+': '+B_PORT.SYMBOL+
                  ' używa niepoprawnego typu złączeniowego: '+B_PORT.B_TYPE().SYMBOL+'.';
               KOMM.add(_txt,'xwin16.png:81',,,$('FUN.info('''+gsub(_txt,'\\','\\\\')+''')'));
               _error:=1
            ?}
         ?};

::       4. nie powinno być nieaktywnych portów (uwaga)
         {? B_PORT.ACTIVE='N'
         || _txt:='Nieaktywny parametr '+exec('kind_opis','#b_port',B_PORT.KIND).M+': '+B_PORT.SYMBOL+'.';
            KOMM.add(_txt,'xwin16.png:15',,,$('FUN.info('''+gsub(_txt,'\\','\\\\')+''')'));
            _remark:=1
         ?};

::       5. typy portów muszą pasować do typów połączonych portów innych czynności (błąd)
         B_POCONN.index('FROM');
         B_POCONN.prefix(B_PORT.ref());
         {? B_POCONN.first()
         || {!
            |? B_PORT.cntx_psh();
               _t_to:=B_POCONN.TO().B_TYPE;
               _ts_to:=B_POCONN.TO().B_TYPE().SYMBOL;
               _p_to:=B_POCONN.TO().SYMBOL;
               _a_to:=B_POCONN.TO().B_ELE().SYMBOL;
               _psym:=B_POCONN.B_CONN().B_PROC().SYMBOL;
               _pnaz:=B_POCONN.B_CONN().B_PROC().NAME;
               _pver:=B_POCONN.B_CONN().B_PROC().VER;
               B_PORT.cntx_pop();
               {? B_PORT.B_TYPE<>_t_to
               || _txt:=
                     'Błędne powiązanie typów parametrów: '+B_PORT.SYMBOL+
                     ' -> '+_a_to+' '+_p_to+' (proces '+_psym+')';
                  _formula:=$(
                     'FUN.info('''+
                     'Błędne powiązanie typów parametrów w procesie: '+_psym+' "'+_pnaz+'" wer. '+_pver+'.\n\n'+
                     'Parametr wyjściowy '+B_PORT.SYMBOL+' czynności '+
                     B_PORT.B_ELE().SYMBOL+' jest typu '+B_PORT.B_TYPE().SYMBOL+'.\n'+
                     'Parametr wejściowy '+_p_to+' czynności '+
                     _a_to+' jest typu '+_ts_to+'.'+
                     ''')'
                  );
                  KOMM.add(_txt,'xwin16.png:81',,,_formula);
                  _error:=1
               ?};
               B_POCONN.next()
            !}
         ?};
         B_POCONN.index('TO');
         B_POCONN.prefix(B_PORT.ref());
         {? B_POCONN.first()
         || {!
            |? B_PORT.cntx_psh();
               _t_from:=B_POCONN.FROM().B_TYPE;
               _ts_from:=B_POCONN.FROM().B_TYPE().SYMBOL;
               _p_from:=B_POCONN.FROM().SYMBOL;
               _a_from:=B_POCONN.FROM().B_ELE().SYMBOL;
               _psym:=B_POCONN.B_CONN().B_PROC().SYMBOL;
               _pnaz:=B_POCONN.B_CONN().B_PROC().NAME;
               _pver:=B_POCONN.B_CONN().B_PROC().VER;
               B_PORT.cntx_pop();
               {? B_PORT.B_TYPE<>_t_from
               || _txt:=
                     'Błędne powiązanie typów parametrów: '+B_PORT.SYMBOL+
                     ' -> '+_a_from+' '+_p_from+' (proces '+_psym+')';
                  _formula:=$(
                     'FUN.info('''+
                     'Błędne powiązanie typów parametrów w procesie: '+_psym+' "'+_pnaz+'" wer. '+_pver+'.\n\n'+
                     'Parametr wyjściowy '+_p_from+' czynności '+
                     _a_from+' jest typu '+_ts_from+'.\n'+
                     'Parametr wejściowy '+B_PORT.SYMBOL+' czynności '+
                     B_PORT.B_ELE().SYMBOL+' jest typu '+B_PORT.B_TYPE().SYMBOL+'.'+
                     ''')'
                  );
                  KOMM.add(_txt,'xwin16.png:81',,,_formula);
                  _error:=1
               ?};
               B_POCONN.next()
            !}
         ?};
         ~~;

         B_PORT.next()
      !}
   ?};
:: Sprawdzam czy tabele złączeniowe w portach maja pola typu IDADD
   {? exec('valid_idadd','#b_action')=0
   || _error:=1
   ?};

:: Sprawdzam czy jest licencja
   {? exec('lic','#b_action',B_ACTION.ref())=0
   || KOMM.add('Brak licencji dla czynności.','xwin16.png:15',,,"");
      _error:=1
   ?};
   {? _error
   || B_ACTION.PROBLEM:='T'
   |? _remark
   || B_ACTION.PROBLEM:='N';
::      KOMM.add('Zgłoszone uwagi do konfiguracji czynności','xwin16.png:15');
      ~~
   || B_ACTION.PROBLEM:='N';
      _txt:='Poprawna konfiguracja czynności.';
      KOMM.add(_txt,'xwin16.png:13',,,$('FUN.info('''+gsub(_txt,'\\','\\\\')+''')'))
   ?};
   B_ACTION.put()
?};

Cntx.pop(B_ACTION,B_ELE,B_DOMAIN);

KOMM.sect_end();
{? _display>0 & VAR.GRUPA<>'T' || KOMM.select(,,,,'Szczegóły') ?};

{? ~_error || _result:=0 ?};
_result


\lic
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [17.00]
:: OPIS: Sprawdza, czy obszar dla czynności jest licencjonowany
::   WE: _a - B_ACTION.ref lub B_ACTION.UID
::       [_b] - tab_tmp - tabela z licencjonowanymi dziedzinami
::   WY: 1 - jest licencja
::       0 - nie ma licencji
::----------------------------------------------------------------------------------------------------------------------
_action:={? var_pres('_a')=type_of(null) || _a || null ?};
_uid:='';
{? var_pres('_a')=type_of('')
|| _uid:=_a
?};

_domain_lic:=~~;
{? var_pres('_b')>100
|| _domain_lic:=_b
|| _proenv:=exec('proenv','#b_proman');
   _domain_lic:=_proenv.DOM_LIC
?};

{? _uid<>''
|| B_ACTION.cntx_psh();
   B_ACTION.index('UNIK');
   B_ACTION.prefix(_uid,);
   {? B_ACTION.first()
   || _action:=B_ACTION.ref()
   ?};
   B_ACTION.cntx_pop()
?};

_result:=0;
B_DOMAIN.cntx_psh();
B_ACTION.cntx_psh();
B_ACTION.clear();
{? _action<>null & B_ACTION.seek(_action)
||
   _domain_lic.prefix();
   {? _domain_lic.first()
   ||  _domain_lic.prefix(B_ACTION.B_DOMAIN().SYMBOL);
      {? _domain_lic.first()
      || {? B_ACTION.B_CAN='Q'
         ||
::          Jeżeli czynnosć Qlik to dodatkowo sprawdzamy czy jest poprawnie skonfigurowana (akcja Parametry)
::          (to działanie ustalone w porozumieniu z zespołem Qlika)
            _result:=B_ACTION.memo_line('MEMO')<>'\n'
         || _result:=1
         ?}
      ?}
   ?}
?};
B_ACTION.cntx_pop();
B_DOMAIN.cntx_pop();
_result


\erase
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Usuwa zawartość tabeli B_ACTION - uwagi o nieusunietych rekordach umieszcza w KOMM,
::       ew. formuła exec('delete','#b_action') umieści uwagi w KOMM
::   WY: 1 - ok, 0 - gdy przynajmniej jednego rekordu nie udało sie usunąć
::----------------------------------------------------------------------------------------------------------------------
_result:=1;

_b_act:=tab_tmp(1,'REF','INTEGER','#B_ACTION.ref()');

B_ACTION.cntx_psh();
B_ACTION.clear();
{? B_ACTION.first()
|| {!
   |? _b_act.REF:=#B_ACTION.ref();
      _b_act.add();
      B_ACTION.next()
   !}
?};

{? _b_act.first()
|| {!
   |? _deleted:=exec('delete','#b_action',exec('FindAndGet','#table',B_ACTION,_b_act.REF,,"ref()",null()));
      {? _deleted<1
      || _result:=0
      ?};
      _b_act.next()
   !}
?};

B_ACTION.cntx_pop();

_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kasuje podany rekord tabeli B_ACTION (wykonywane w transakcji!!!)
::   WE: _a - B_ACTION.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystapić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
B_ACTION.cntx_psh(); B_ACTION.clear();
{? B_ACTION.seek(_ref)
|| {? exec('can_delete','#b_action',_ref)>0
   || {? exec('clean','#b_action',_ref)>0
      || {? B_ACTION.del(,1)>0
         || _result:=1
         || undo();
            _result:=-4
         ?}
      || _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

B_ACTION.cntx_pop();
{? _mydo || end() ?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Czyści powiazania do rekordu tabeli B_ACTION
::   WE: _a - B_ACTION.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystapić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: 1. usuwam mikroproces dla czynności
B_ACTION.cntx_psh(); B_PROC.cntx_psh();
B_ACTION.clear();
{? B_ACTION.seek(_ref)
|| B_PROC.index('SYM');
   B_PROC.prefix('T',null(),B_ACTION.UID,);
   {? B_PROC.first()
   || {!
      |? _can_continue:=exec('delete','#b_proc',B_PROC.ref());
         B_PROC.first() & _can_continue>0
      !}
   ?}
?};
B_ACTION.cntx_pop(); B_PROC.cntx_pop();

:: 2. usuń definicje funkcji parametryzacji
{? _can_continue
|| exec('del_tmp','#table',FP_DEF,'B_ACTION',_ref);
   _can_continue+=1
?};

:: 3. Usuwanie kompletów parametrów
{? _can_continue>0
|| exec('delete4action','#b_portgr',_ref)
?};

:: --- wszystkie powiązania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\ports_count
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca ilość portów danego rodzaju dla czynności
::   WE: _a - B_ELE.ref()
::       _b - rodzaj portu - exec('kind_*','#b_port')
::       _C - B_PREL.ref()
::----------------------------------------------------------------------------------------------------------------------
_b_ele:=_a;
_kind:=_b;
_b_prel:=_c;
B_PORT.cntx_psh();
B_PORT.index('UNIK');
B_PORT.prefix(_b_ele,null(),null(),_kind);
_count:=B_PORT.size();
B_PORT.prefix(null(),_b_prel,null(),_kind);
_count+=B_PORT.size();
B_PORT.cntx_pop();
_count


\type_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Typ czynności - użytkownika
::----------------------------------------------------------------------------------------------------------------------
'U'


\type_manual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Typ czynności - ręczna
::----------------------------------------------------------------------------------------------------------------------
'M'


\type_service
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Typ czynności - usługa
::----------------------------------------------------------------------------------------------------------------------
'S'


\dictionary
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Wyświetla słownik czynności
::   WE: [_a] - STRING - typ zwracanego wyniku:
::                                              'ref' - B_ACTION.ref()
::                                              'sql' - $B_ACTION.ref()
::                                              'name' - B_ACTION.UID
::                                              'uid_bele'  - B_ELE.uidref()
::       [_b] - STRING - typ czynności
::   WY: B_ACTION.ref lub STRING
::----------------------------------------------------------------------------------------------------------------------
_type:='ref';
{? var_pres('_a')=type_of('')
|| _type:=_a
?};
_type:='';
{? var_pres('_b')=type_of('')
|| _type:=_b
?};

{? _type='sql' | _type='name' | _type='uid'
|| _wyn:=''
|| _wyn:=null()
?};

FIRMA.cntx_psh();
_czapa:='N';
{? REF.FIRMA().TYP='C'
|| _czapa:='T'
?};

B_ACTION.cntx_psh();
B_ELE.cntx_psh();
{? _type=''
|| {? _czapa='T'
   || B_ACTION.index('PROC');
      B_ACTION.prefix(_czapa,'T','T')
   || B_ACTION.index('PROC2');
      B_ACTION.prefix('T','T')
   ?}
|| {? _type='U'
   || {? _czapa='T'
      || B_ACTION.index('USER');
         B_ACTION.prefix(_czapa,'T','T','T')
      || B_ACTION.index('USER2');
         B_ACTION.prefix('T','T','T')
      ?}
   |? _type='M'
   || {? _czapa='T'
      || B_ACTION.index('MANUAL');
         B_ACTION.prefix(_czapa,'T','T','T')
      || B_ACTION.index('MANUAL2');
         B_ACTION.prefix('T','T','T')
      ?}
   |? _type='S'
   || {? _czapa='T'
      || B_ACTION.index('SERVICE');
         B_ACTION.prefix(_czapa,'T','T','T')
      || B_ACTION.index('SERVICE2');
         B_ACTION.prefix('T','T','T')
      ?}
   |? _type='E'
   || {? _czapa='T'
      || B_ACTION.index('SEND');
         B_ACTION.prefix(_czapa,'T','T','T')
      || B_ACTION.index('SEND2');
         B_ACTION.prefix('T','T','T')
      ?}
   ?}
?};

_win:=exec('wer_dict','#b_action');
B_ACTION.win_sel(_win);

_can_continue:=0;
{? B_ACTION.size()>1
|| B_ACTION.first();
   _can_continue:=B_ACTION.select()
|? B_ACTION.size()=1
|| _can_continue:=B_ACTION.first()
|| FUN.info('Brak czynności danego typu z zadanego obszaru.'@)
?};

{? _can_continue
|| {? _type='sql'
   || _wyn:=$B_ACTION.ref()
   |? _type='name'
   || _wyn:=B_ACTION.NAME
   |? _type='uid_bele'
   || _wyn:=B_ACTION.B_ELE().uidref()
   || _wyn:=B_ACTION.ref()
   ?}
?};
B_ACTION.cntx_pop();
B_ELE.cntx_pop();
FIRMA.cntx_pop();
_wyn


\wer_dict
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy okno słownika czynności
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_wer:=B_ACTION.mk_sel('Czynności'@,'P',,'action_wer_dict',,,,,'U');
B_ACTION.win_fld(_wer,,'UID',,,15,,,'Symbol'@);
B_ACTION.win_fld(_wer,,'NAME',,,,,,'Nazwa'@);
B_ACTION.win_fld(_wer,,'B_DOMAIN','SYMBOL',,10,,,'Obszar'@);
B_ACTION.win_fld(_wer,,'B_CAN',,,-5,,,'Wywołanie'@,,'M=jTerm, W=webTerm, B=jTerm+webTerm, O=OLAP, Q=Aplikacja QlikView'@);
B_ACTION.win_fld(_wer,,'AUTOMAT',,,-5,,,'Automatyczna?'@,0,,2,,"\'T\'","\'N\'");
B_ACTION.win_fld(_wer,,'PROC',,,-5,,,'Procesowa?'@,0,,2,,"\'T\'","\'N\'");
B_ACTION.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
B_ACTION.win_act(_wer,,'Formuła','Opis &czynności'@@,,,"exec('help','#help',B_ACTION.UID)",,,,,,'C');
B_ACTION.win_act(_wer,,'Szukaj');
B_ACTION.win_act(_wer,,'Kolejność');
B_ACTION.win_fml(_wer,,'UID',,'ICON_BEFORE',"
   _tab:=cur_tab(1,1);
   {? _tab.ICON<>''
   || _tab.ICON
   || 'xwin16.png:110'
   ?}

");
_wer


\is_proces
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy czynność o podanym identyfikatorze może występować w procesie
::   WE: _a - STRING - B_ACTION.UID
::   WY: 0 - czynność nieprocesowa
::       1 - czynność procesowa
::  TAG: <MODELER><PROCES><CZYNNOŚĆ><KONTROLA>
::----------------------------------------------------------------------------------------------------------------------
_uid:=_a;
_result:=0;
B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_uid);
{? B_ACTION.first()
|| {? B_ACTION.PROC='T'
   || _result:=1
   ?}
?};
B_ACTION.cntx_pop();
_result


\is_def
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [20.42]
:: OPIS: Sprawdza czy czynność o podanym identyfikatorze występuje w defie
::   WE: _a - STRING - B_ACTION.UID
::       [_b] - tab_tmp - opcjonalna tabela z czynnościami z defa (wynik app_info('task'))
::   WY: 0 - brak czynności w defie
::       1 - jest w defie
::  TAG: <MODELER><PROCES><CZYNNOŚĆ><KONTROLA>
::----------------------------------------------------------------------------------------------------------------------
_uid:=_a;
_result:=0;

_task:=~~;
{? var_pres('_b')>100
|| _task:=_b
|| _task:=app_info('task')
?};
_task.prefix(3+_uid,_uid,);
{? _task.first()
|| _result:=1
?};
_result


\import_access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wczytuje formułę ograniczającą ilość zapisów na TODO. Formuła jest określana
::       w komentarzu formuły głównej czynności w linii ::# access=
::       Kontekst pracy - bufor B_ACTION któremu nawinąć pole B_ACTION.FMACCESS
::   WE: _a - nazwa formuły głównej
::       _b - plik w którym znajduje się formuła główna
::       [_c] - INTEGER - [0]/1 - czy aktualizować istniejącym B_PRELom formułę uprawnień
::       [_d] - INTEGER - 0/[1] - czy dodwać komunikaty do KOMM
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_fun_g:=_a;
_plik:=_b;
_upd_prels:=0;
{? var_pres('_c')=type_of(0)
|| _upd_prels:=_c
?};

_komm:=1;
{? var_pres('_d')=type_of(0)
|| _komm:=_d
?};

_access:='';
{? exec('is_fun','#file',_plik,_fun_g)>0
||
   _fun_str:=exec('string_fun','#file',_plik,_fun_g,'::# access=');
   _split:=spli_str(_fun_str,'\n');

   {? obj_len(_split)>0
   ||
      {! _it:=1..obj_len(_split)
      |!
         _wiersz:=_split[_it];

         {? _wiersz<>'\n' & _wiersz<>''
         || {? _access=''
            || _access:=_wiersz
            ||
               {? _komm>0
               || _msg:='W formule czynności: '+_fun_g+'\\'+(-_plik)+'.fml znajdują się dwie formuły ograniczające uprawnienia TODO. ';
                  _msg+='Została użyta pierwsza z nich.';
                  _sect:='Czynność: '+B_ACTION.UID+' — '+B_ACTION.NAME;
                  {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
                  KOMM.add(_msg,'xwin16.png:15');
                  KOMM.sect_end()
               ?}
            ?}
         ?}
      !}
   ?}
?};
{? _upd_prels>0 & B_ACTION.FMACCESS<>_access
|| _can_continue:=0;
   B_PREL.cntx_psh();
   B_PREL.index('ACCESS');
   B_PREL.prefix(B_ACTION.B_ELE,B_ACTION.FMACCESS,);
   {? B_PREL.first()
   || {!
      |? B_PREL.cntx_psh();
         B_PREL.prefix();
         B_PREL.FMACCESS:=_access;
         _can_continue:=B_PREL.put();
         B_PREL.cntx_pop();
         B_PREL.first() & _can_continue>0
      !}
   ?};
   B_PREL.cntx_pop();
   ~~
?};
B_ACTION.FMACCESS:=_access;
~~


\import_properties
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Importuje właściwości czynności określane w formule głównej czynności w linii ::# properties
::   WE: _a - nazwa formuły głównej
::       _b - plik w którym znajduje się formuła główna
::       [_c] - tablica zawierająca definicję tabeli B_ACTION
::       [_d] - INTEGER - [0]/1 - czy aktualizować istniejące B_PRELe
::       [_e] - INTEGER- 0/[1] - czy dodawać komunikaty do KOMMa
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_fun_g:=_a;
_plik:=_b;

_fields:={? var_pres('_c')>100
         || _c
         || exec('mbTabFields_tab','#table',B_ACTION)
         ?};
{? var_pres('_c')=0
|| _ndx:=_fields.ndx_tmp('',1,'FLD_ACR',,);
   _fields.index(_ndx)
?};

_upd_prels:=0;
{? var_pres('_d')=type_of(0)
|| _upd_prels:=_d
?};

_komm:=1;
{? var_pres('_e')=type_of(0)
|| _komm:=_e
?};

_props:='';
_sect:='Czynność: '+B_ACTION.UID+' — '+B_ACTION.NAME;
B_ACTION.SERVICE:='N';
B_ACTION.LOOP:='N';
B_ACTION.TODOTRIG:='N';
B_ACTION.RUNMICRO:='';
B_ACTION.TAKEOVER:='';
B_ACTION.RELEASE:='';
{? exec('is_fun','#file',_plik,_fun_g)>0
||
   _fun_str:=exec('string_fun','#file',_plik,_fun_g,'::# properties=');
   _split:=spli_str(_fun_str,'\n');

   {? obj_len(_split)>0
   ||
      {! _it:=1..obj_len(_split)
      |!
         _wiersz:=_split[_it];

         {? _wiersz<>'\n' & _wiersz<>''
         || {? _props=''
            || _props:=_wiersz;
               _spli_prop:=spli_str(_props,',');
               {? obj_len(_spli_prop)>0
               || {! _it:=1..obj_len(_spli_prop)
                  |! _property:=_spli_prop[_it];

                     _on:=_property*'~'=0;
                     _property:={? ~_on || 1-_property || _property ?};

                     {? _property<>'' & _property<>'\n'
                     ||
                        _fields.prefix(_property,);
                        _found:=0;
                        {? _fields.first()
                        ||
                           {? _fields.FLD_TYPE='STRING[1]'
                           || _found:=1;
                              _rule:=$('B_ACTION.'+_property+{? _on || ':=\'T\'' || ':=\'N\'' ?});
                              _rule()
                           |? _fields.FLD_TYPE='INTEGER' | _fields.FLD_TYPE='REAL'
                           || _found:=1;
                              _rule:=$('B_ACTION.'+_property+{? _on || ':=1' || ':=0' ?});
                              _rule()
                           ?}
                        ?};
                        {? _found=0
                        || {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
                           KOMM.add('Nierozpoznana właściwość czynności: '+_property,'xwin16.png:15');
                           KOMM.sect_end()
                        ?}
                     ?}
                  !}
               ?}
            || {? _komm>0
               || _msg:='W formule czynności: '+_fun_g+'\\'+(-_plik)+'.fml znajdują się dwa wiersze ustawiające właściwości czynności. ';
                  _msg+='Został użyty pierwszy z nich.';
                  {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
                  KOMM.add(_msg,'xwin16.png:15');
                  KOMM.sect_end()
               ?}
            ?}
         ?}
      !}
   ?}
?};
{? _upd_prels>0
||
   _can_continue:=1;
   B_PREL.cntx_psh();
   B_PREL.index('ELSTART');
   B_PREL.prefix(B_ACTION.B_ELE);
   {? B_PREL.first()
   || {!
      |? B_PREL.LOOP:=B_ACTION.LOOP;
         _can_continue:=B_PREL.put();
         B_PREL.next() & _can_continue>0
      !}
   ?};
   B_PREL.cntx_pop()
?};
~~


\win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy tymczasowe okno edycyjne czynności, dokleja do okna część dotyczącą planowanego czasu trwania czynności
::   WE: _a - obj_new - środowisko okna, wynik exec('env','#b_valprt')
::       [_b] - STRING - akronim okienka który ma być podstawą (lub '', gdy tylko okna dotycz†ce czasu trwania)
::       [_c] - INTEGER - [0]/1 - czy dodawać przyciski Ok, Anuluj
::       [_d] - INTEGER - [0]/1 - czy dodawać przycisk Popraw
::       [_e] - FORMULA - formula na popraw
::       [_f] - INTEGER - 0/[1] - czy dodawać część dotyczącą planowanego czasu trwania
::       [_g] - STRING - zmienna do której dodawać identyfikator przycisku
::   WY: STRING - akronim utworzonego okna
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_base:='ACT_USR';
{? var_pres('_b')=type_of('')
|| _base:=_b
?};
_btn_ok:=0;
{? var_pres('_c')=type_of(0)
|| _btn_ok:=_c
?};
_btn_popraw:=0;
{? var_pres('_d')=type_of(0)
|| _btn_popraw:=_d
?};
_rule_popraw:="";
{? var_pres('_e')=type_of("")
|| _rule_popraw:=_e
?};
_intervals:=1;
{? var_pres('_f')=type_of(0)
|| _intervals:=_f
?};
_pop_var:='win_act_edit';
{? var_pres('_g')=type_of('')
|| _pop_var:=_g
?};
_title:='Element procesu';
{? B_PREL.ref()<>null()
|| {? B_PREL.SYMBOL<>''
   || _title:='Element procesu: %1'@[B_PREL.SYMBOL]
   || B_ELE.cntx_psh();
      _title:='Element procesu: %1'@[B_PREL.B_ELE().SYMBOL];
      B_ELE.cntx_pop()
   ?}
?};
_win:=B_PREL.mk_edit(_title,0,'#b_proc_red');

{? _base<>''
|| B_PREL.win_ewin(_win,B_PREL,_base)
?};
{? _intervals>0
|| B_PREL.win_ewin(_win,IVAL_DEF,'RED','Planowany czas trwania'@);
   B_PREL.win_ewin(_win,B_PREL,'TR_MODE','Termin realizacji'@)
?};

:: Przyciski
{? _btn_ok>0
|| B_PREL.win_ebtn(_win,'text=%1,panel=bottom,align=end'['&Zapisz'@],'key:F2');
   B_PREL.win_ebtn(_win,'text=%1,panel=bottom,align=end'['&Anuluj'@],'key:Esc')
?};
{? _btn_popraw>0
|| _rule:='_env:=_a;_btn:=_b;_env.'+_pop_var+':=_btn';
   _btn:=B_PREL.win_ebtn(_win,'text=%1,display=1,panel=bottom,align=begin'['Popraw'@],_rule_popraw);
   ($_rule)(_env,_btn)
?};

:: Importuje nazwy interwałów
{? _intervals>0 || exec('import_names','#interval') ?};

exec('edit_enablator','#interval',_win,B_PREL);
_win


\import_hash
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wszystkim aktywnym czynnościom oblicza hash z kluczowych zapisów formuły main i zapamiętuję
::       go w rekordzie B_ACTION
::   WE: [_a] - B_DOMAIN.ref - obszar którego czynności aktualizować, jeśli nie podane to wszystkie obszary
::       [_b] - INTEGER - [0]/1 - czy wyświetlać progress
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_b_domain:=null();
{? var_pres('_a')=type_of(B_DOMAIN.ref())
|| _b_domain:=_a
?};

_progress:=0;
{? var_pres('_b')=type_of(0)
|| _progress:=_b
?};

_result:=0;
_can_continue:=1;

B_ACTION.cntx_psh();
{? _b_domain=null()
||
:: Wszystkie obszary
   B_ACTION.index('UNIK');
   B_ACTION.prefix()
||
:: Wybrany obszar
   B_ACTION.index('B_DOMAIN');
   B_ACTION.prefix('T',_b_domain)
?};
_prg_step:=10;
{? B_ACTION.first()
||
   _lp:=1;
   {? _progress>0
   || FUN.prg_start(B_ACTION.size()/_prg_step,'Import właściwości czynności z plików *.fml'@,1,,1)
   ?};

   {!
   |? {? _progress>0
      || {? _lp%*_prg_step=0
         || FUN.prg_next()
         ?}
      ?};
      {? B_ACTION.AKT='T'
      || _hash:=exec('hash_params','#b_action');
         {? _hash<>''
         || B_ACTION.PAR_HASH:=_hash;
            _can_continue:=B_ACTION.put()
         ?}
      ?};
      _lp+=1;
      B_ACTION.next()
   !};
   {? _progress>0
   || FUN.prg_stop()
   ?}
?};
B_ACTION.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\hash_params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Dla podanej czynności oblicza hash z kluczowych zapisów w formule main podanej czynności
::   WE: [_a] - B_ACTION.ref lub bieżący rekord
::   WY: STRING - obliczony hash
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ACTION.ref())
|| _ref:=_a
?};

_result:='';
_can_continue:=1;

B_ACTION.cntx_psh();
{? _ref<>null()
|| B_ACTION.prefix();
   {? B_ACTION.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _plik_act:=exec('filename','#b_action');
   _filename:=__FileLayer.real_name({? _plik_act+4='.fml' || _plik_act-4 || _plik_act ?},'fml','main');

   _key_values:='';
   _key_values+=exec('string_fun','#file',_filename,'main','::# kind=',,'^','::#',,0);
   _key_values+=exec('string_fun','#file',_filename,'main','::# permissions=',,,,,0);
   _key_values+=exec('string_fun','#file',_filename,'main','::# properties=',,,,,0);

   _result:=hash(_key_values,'sha1');
   ~~
?};
B_ACTION.cntx_pop();
_result


\hash_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Formuła zwraca "odcisk palca czynności".
::   WE: _a [STRING/FILE] - Nazwa lub uchwyt pliku czynności.
::   WY: Odcisk palca czynności.
::----------------------------------------------------------------------------------------------------------------------
_vp:=var_pres('_a');
{? _vp<>type_of('') & _vp<>type_of(@.CLASS.FILE_T)
|| return('')
?};

_TAB:=exec('get_fun_tab','#file',_a,'main','::# ',,'^','::#',,0);
_ndx:=_TAB.ndx_tmp(,,'PARENT',,, 'UID',,);
_TAB.prefix();

_key_values:='';

_prop:=spli_str('kind=|permissions=|properties=','|');
{! _lp:=1 .. obj_len(_prop)
|! {? _TAB.first()
   || {!
      |? {? _TAB.LINE*_prop[_lp]>0
         || _key_values+=
               gsub(_TAB.memo_txt(,1,'MEMO'),_prop[_lp],'')+
               exec('hash_recurency','#b_action',_TAB,_ndx,_TAB.UID,_prop[_lp])
         ?};
         _TAB.next()
      !}
   ?}
!};

hash(_key_values,'sha1')


\hash_params2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Dla podanej czynności oblicza hash z kluczowych zapisów w formule main podanej czynności
::       Bardziej optymalna wersja
::   WE: [_a] - B_ACTION.ref lub bieżący rekord
::   WY: STRING - obliczony hash
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ACTION.ref())
|| _ref:=_a
?};

_result:='';
_can_continue:=1;

B_ACTION.cntx_psh();
{? _ref<>null()
|| B_ACTION.prefix();
   {? B_ACTION.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _plik_act:=exec('filename','#b_action');
   _filename:=__FileLayer.real_name({? _plik_act+4='.fml' || _plik_act-4 || _plik_act ?},'fml','main');

   _result:=exec('hash_core','#b_action',_filename)

?};
B_ACTION.cntx_pop();
_result


\hash_recurency
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Dodaje złamane wiersze do zawartości formuły
::   WE: _a - tab_tmp - tabela z zawartością formuły
::       _b - STRING - indeks tabeli
::       _c - REAL - identyfikator rekordu
::       _d - STRING - prefix rodzaji elementu
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_ndx:=_b;
_uid:=_c;
_prefix:=_d;

_result:='';
_tab.cntx_psh();
_tab.index(_ndx);
_tab.prefix(_uid);
{? _tab.first()
|| {!
   |? _memo:=|_tab.memo_txt(,1,'MEMO');
      _memo:=gsub(_memo,_prefix,'');
      _result+=_memo;

::    !!! REKURENCJA !!!
      _result+=exec('hash_recurency','#b_action',_tab,_ndx,_tab.UID,_prefix);

      _tab.next()
   !}
?};
_tab.cntx_pop();
_result


\hash_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Porownuje dwie metody hashowania właściwości czynności: starą (wolną) i nową (szybszą)
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix();

_can_continue:=1;
_uid:='';
{? B_ACTION.first()
|| {!
   |?
      _hash_old:=exec('hash_params','#b_action');
      _hash_new:=exec('hash_params2','#b_action');
      {? _hash_new<>_hash_old
      || _can_continue:=0;
         _uid:=B_ACTION.UID;
         FUN.emsg('Niezgodność dla czynności: %1'@[B_ACTION.UID])
      ?};
      B_ACTION.next() & _can_continue>0
   !}
?};

{? _can_continue=0 & _uid<>''
||
   B_ACTION.prefix(_uid,);
   {? B_ACTION.first()
   ||
      _hash_old:=exec('hash_params','#b_action');
      _hash_new:=exec('hash_params2','#b_action');
      ~~
   ?}
?};
B_ACTION.cntx_pop();
~~


\tab_optimize_idadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca tabelkę tymczasową optymalizującą formułę exec('valid_idadd','#b_action')
::   WY: tab_tmp
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tab_optimize:=tab_tmp(2,
   'TAB_ACR','STRING[8]','Akronim tabeli',
   'IDADD','INTEGER','Jest IDDAD czy nie'
);
_tab_optimize


\update_micro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Aktualizuje mikroprocesy dla czynności
::       Kontekst działania - rekord B_ACTION
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
:: dodawanie mikroprocesu dla czynności
B_ELE.cntx_psh();
B_PREL.cntx_psh();
B_PREL.index('MICRO');
B_PROC.cntx_psh();
B_PROC.index('SYM');
_symbol:=B_ACTION.UID;
_name:=B_ACTION.NAME;
_b_proc:=null();
{? B_ACTION.PROC='T'
||
:: Dla czynności które występują w procesach generujemy mikroprocesy
   _b_proc:=exec('add','#b_proc',null(),_symbol,_name,'0','T','','T');
   {? _b_proc<>null()
   ||
      B_PREL.prefix('T',B_ACTION.B_ELE);
::    Dodaje tylko jesli nie ma jeszcze takiego mikroprocesu
      {? B_PREL.size()=0
      ||
::       dodanie czynności jako pojedyńczego elementu w mikroprocesie
         _b_prel:=exec('buffer','#b_prel');
         _b_prel.B_PROC:=_b_proc;
         _b_prel.SYMBOL:=_symbol;
         _b_prel.B_ELE:=B_ACTION.B_ELE;
         _b_prel.UID:=exec('uid','#blank');
         _b_prel.CLASS:=B_ACTION.B_ELE().CLASS;
         _b_prel.START:='T';
         exec('add','#b_prel',_b_prel)
      ?};
      ~~
   ?}
||
:: Czynność nie procesowa, sprawdzam czy jest mikroproces i go usuwam jeśli był
   B_PROC.prefix('T',null(),_symbol,'0');
   {? B_PROC.first()
   || {? exec('delete','#b_proc',B_PROC.ref(),0)>0
      || B_PREL.prefix('T',B_ACTION.B_ELE);
         {? B_PREL.first()>0
         || exec('delete','#b_prel',B_PREL.ref())
         ?}
      ?}
   ?}
?};
B_PREL.cntx_pop();
B_ELE.cntx_pop();
B_PROC.cntx_pop();
~~


\b_action_ports
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla parametry czynności
::   WE: [_a] - B_ACTION.ref lub bieżący rekord
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(B_ACTION.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

B_PORTGR.cntx_psh();
B_ACTION.cntx_psh();
{? _ref<>null()
|| B_ACTION.prefix();
   {? B_ACTION.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? B_ACTION.B_CAN='Q'
   || B_ACTION.memo_get(,'MEMO');
      B_ACTION.win_edit('RED_BIQ');
      {? B_ACTION.edit()
      || B_ACTION.memo_put(,'MEMO')
      ?}
   ||
      B_PORTGR.index('UNIK');
      B_PORTGR.prefix(B_ACTION.ref());

      {? var_pres('MOD_ENV')>100
      || _wer:=exec('win_port','#b_design',MOD_ENV)
      || _wer:=exec('win_port','#b_design')
      ?};
      params_set('WIN_IN',_wer.IN,'WIN_INTERNAL',_wer.INTERNAL,'WIN_OUT',_wer.OUT);

      _form:="_par:=params_get();
              exec('ports_before','#b_design',exec('kind_in','#b_port'));
              B_PORT.first();
              grp_disp(B_PORT,_par.WIN_IN);
              exec('ports_before','#b_design',exec('kind_internal','#b_port'));
              B_PORT.first();
              grp_disp(B_PORT,_par.WIN_INTERNAL);
              exec('ports_before','#b_design',exec('kind_out','#b_port'));
              B_PORT.first();
              grp_disp(B_PORT,_par.WIN_OUT);
              B_PORTGR.first();
              grp_disp(B_PORTGR,'WER')
              ";

      _grp:=B_PORT.grp_make('Czynność: %1 — %2'@[B_ACTION.UID,B_ACTION.NAME],_form,'#b_port_act',1,1,,,'normal');

      _before:="exec('ports_before','#b_design',exec('kind_in','#b_port'))";
      B_PORT.grp_sel(_grp,B_PORT,_wer.IN,,,,,4,_before,,,,'maximized_with_title');
      B_PORT.grp_splt(_grp,,'horizontal','port_internal');
      _before:="exec('ports_before','#b_design',exec('kind_internal','#b_port'))";
      B_PORT.grp_sel(_grp,B_PORT,_wer.INTERNAL,,,,,4,_before,,,,'maximized_with_title');
      B_PORT.grp_splt(_grp,'port_internal','horizontal','port_out');
      _before:="exec('ports_before','#b_design',exec('kind_out','#b_port'))";
      B_PORT.grp_sel(_grp,B_PORT,_wer.OUT,,,,,,_before,,,,'maximized_with_title');

      B_PORT.grp_splt(_grp,,'vertical','left');
      _before:="";
      B_PORT.grp_sel(_grp,B_PORTGR,'WER',,,,,,_before,,,,'maximized_with_title');

      B_PORT.win_sel(_grp);
      B_PORT.win_edit('RED');
      B_PORT.select()
   ?}
?};
B_ACTION.cntx_pop();
B_PORTGR.cntx_pop();
~~


\b_can_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Opisowo wywołanie (kanał dostępu) czynności
::   WE: _a - M, W, B, O, Q
::   WY: wartość opisowa
::----------------------------------------------------------------------------------------------------------------------
{? _a='M'
|| 'jTerm'
|? _a='W'
|| 'webTerm'
|? _a='B'
|| 'jTerm+webTerm'
|? _a='O'
|| 'Przeglądarka OLAP'
|? _a='Q'
|| 'Aplikacja QlikView'
|| ''
?}


\b_actpro_runmicro_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: przed redakcją B_ACTPRO.RUNMICRO
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
B_ACTION.cntx_psh();
_result:=B_ACTPRO.B_ACTION().RUNMICRO='';
B_ACTION.cntx_pop();
_result


\b_actpro_takeover_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: przed redakcją B_ACTPRO.TAKEOVER
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
B_ACTION.cntx_psh();
_result:=B_ACTPRO.B_ACTION().TAKEOVER='';
B_ACTION.cntx_pop();
_result


\b_actpro_release_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: przed redakcją B_ACTPRO.RELEASE
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
B_ACTION.cntx_psh();
_result:=B_ACTPRO.B_ACTION().RELEASE='';
B_ACTION.cntx_pop();
_result


\update_b_actpro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: aktualizacja własności dodatkowych czynności
::       przed wywołaniem funkcji należy wczytać do bufora tabeli B_ACTION odpowiedni rekord
::   WE: [_a] - FIRMA.ref - ref firmy. Jeżeli nie podany to REF.FIRMA
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_firma:=REF.FIRMA;
{? var_pres('_a')=type_of(FIRMA.ref())
|| _firma:=_a
?};

_result:=0;

B_ACTPRO.cntx_psh();
B_ACTPRO.index('UNIK');
B_ACTPRO.prefix(B_ACTION.ref(),_firma);
{? B_ACTPRO.first()
||
   _put:=0;
   {? (B_ACTION.RUNMICRO='T' | B_ACTION.RUNMICRO='N') & B_ACTION.RUNMICRO<>B_ACTPRO.RUNMICRO
   ||
::    pobranie wartości z definicji czynności
      B_ACTPRO.RUNMICRO:=B_ACTION.RUNMICRO;
      _put:=1

   |? B_ACTPRO.RUNMICRO<>'T' & B_ACTPRO.RUNMICRO<>'N'
   ||
::    nieoczekiwana wartość więc przypisanie T
      B_ACTPRO.RUNMICRO:='T';
      _put:=1
   ?};
   {? (B_ACTION.TAKEOVER='T' | B_ACTION.TAKEOVER='N') & B_ACTION.TAKEOVER<>B_ACTPRO.TAKEOVER
   ||
::    pobranie wartości z definicji czynności
      B_ACTPRO.TAKEOVER:=B_ACTION.TAKEOVER;
      _put:=1
   |? B_ACTPRO.TAKEOVER<>'T' & B_ACTPRO.TAKEOVER<>'N'
   ||
::    nieoczekiwana wartość więc przypisanie T
      B_ACTPRO.TAKEOVER:='T';
      _put:=1
   ?};
   {? (B_ACTION.RELEASE='T' | B_ACTION.RELEASE='N') & B_ACTION.RELEASE<>B_ACTPRO.RELEASE
   ||
::    pobranie wartości z definicji czynności
      B_ACTPRO.RELEASE:=B_ACTION.RELEASE;
      _put:=1
   |? B_ACTPRO.RELEASE<>'T' & B_ACTPRO.RELEASE<>'N'
   ||
::    nieoczekiwana wartość więc przypisanie T
      B_ACTPRO.RELEASE:='T';
      _put:=1
   ?};
   {? _put
   || _result:=B_ACTPRO.put();
      {? _result>0
      ||
         {? B_ACTPRO.RUNMICRO='T'
         ||
            exec('b_actrop_del','#b_action',exec('typ_runmicro','#b_action'),B_ACTION.ref())
         ?};
         {? B_ACTPRO.TAKEOVER='T'
         ||
            exec('b_actrop_del','#b_action',exec('typ_takeover','#b_action'),B_ACTION.ref())
         ?}
      ?}
   ?}
||
   B_ACTPRO.blank();
   B_ACTPRO.B_ACTION:=B_ACTION.ref();
   B_ACTPRO.FIRMA:=_firma;
   B_ACTPRO.RUNMICRO:={? B_ACTION.RUNMICRO<>'T' & B_ACTION.RUNMICRO<>'N' || 'T' || B_ACTION.RUNMICRO ?};
   B_ACTPRO.TAKEOVER:={? B_ACTION.TAKEOVER<>'T' & B_ACTION.TAKEOVER<>'N' || 'T' || B_ACTION.TAKEOVER ?};
   B_ACTPRO.RELEASE:={? B_ACTION.RELEASE<>'T' & B_ACTION.RELEASE<>'N' || 'T' || B_ACTION.RELEASE ?};
   B_ACTPRO.RUNNPROC:='N';
   _result:=B_ACTPRO.add()
?};
B_ACTPRO.cntx_pop();
_result


\update_b_actpro_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Aktualizuje własności dla wszystkich czynności w danej firmie
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
B_ACTION.cntx_psh();
B_ACTION.index('B_DOMAIN');
B_ACTION.prefix('T');
{? B_ACTION.first()
|| {!
   |? exec('update_b_actpro','#b_action');
      B_ACTION.next()
   !}
?};
B_ACTION.cntx_pop();
~~


\b_actpro_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: właściwości dodatkowe czynności - poprawa
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_Tab:=_env.TAB;
_B_action:=_env.B_ACTION;
_grupa:=_env.GRUPA;
_runmicro:=_env.RUNMICRO;
_takeover:=_env.TAKEOVER;
_release:=_env.RELEASE;
_runnproc:=_env.RUNNPROC;

_Tab.cntx_psh();
:: wiele czynności
{? _grupa || KOMM.init(,,'Uwagi dotyczące konfiguracji czynności'@) ?};
B_ACTION.cntx_psh();
_loop:=_B_action.first();
{!
|? _loop
|!
   _continue:=1;
   {? _Tab.seek(_B_action.REF,)
   ||
      {? ~B_ACTION.seek(_Tab.B_ACT)
      ||
         _txt:='Brak definicji czynności %1.'@[_Tab.SYMBOL];
         {? _grupa
         || KOMM.add(_txt)
         || FUN.info(_txt)
         ?}

      |? B_ACTION.PROC<>'T'
      ||
         _txt:='Czynność %1 jest nieprocesowa.'@[B_ACTION.UID]+' '+'Konfiguracja niedostępna.'@;
         {? _grupa
         || KOMM.add(_txt)
         || FUN.info(_txt)
         ?}
      ||
         B_ACTPRO.index('UNIK');
         B_ACTPRO.prefix(B_ACTION.ref(),REF.FIRMA);
         {? ~B_ACTPRO.first()
         ||
            _txt:='Uruchom aktualizację czynności.'@;
            {? _grupa
            || KOMM.add(_txt)
            || FUN.info(_txt)
            ?};
            _continue:=0
         ||
            {? _runmicro='' & _takeover='' & _release='' & _runnproc=''
            ||
::             brak zmian
               ~~

            |? ~B_ACTPRO.r_lock(1,1,1)
            ||
               _txt:='Konfigurację %1 blokuje inny użytkownik.'@[B_ACTION.UID];
               {? _grupa
               || KOMM.add(_txt)
               || FUN.info(_txt)
               ?}
            ||
               {? _runmicro<>'' & B_ACTION.RUNMICRO=''
               ||
                  B_ACTPRO.RUNMICRO:=_runmicro

               |? _runmicro<>'' & B_ACTPRO.RUNMICRO<>_runmicro
               ||
                  _txt:=
                     {? B_ACTION.RUNMICRO='T'
                     || 'Czynność %1 ma trwale włączoną własność:'@[B_ACTION.UID]
                     || 'Czynność %1 ma trwale wyłączoną własność:'@[B_ACTION.UID]
                     ?}
                     +' '+'uruchamianie czynności poza procesem.'@
                     +' '+'Konfiguracja niedostępna.'@;
                  {? _grupa
                  || KOMM.add(_txt)
                  || FUN.info(_txt)
                  ?}
               ?};
               {? _takeover<>'' || B_ACTPRO.TAKEOVER:=_takeover ?};
               {? _release<>'' & B_ACTION.RELEASE=''
               ||
                  B_ACTPRO.RELEASE:=_release

               |? _release<>'' & B_ACTPRO.RELEASE<>_release
               ||
                  _txt:=
                     {? B_ACTION.RELEASE='T'
                     || 'Czynność %1 ma trwale włączoną własność:'@[B_ACTION.UID]
                     || 'Czynność %1 ma trwale wyłączoną własność:'@[B_ACTION.UID]
                     ?}
                     +' '+'zwalnianie zadania.'@
                     +' '+'Konfiguracja niedostępna.'@;
                  {? _grupa
                  || KOMM.add(_txt)
                  || FUN.info(_txt)
                  ?}
               ?};
               {? _runnproc<>'' || B_ACTPRO.RUNNPROC:=_runnproc ?};
               {? B_ACTPRO.put()
               ||
                  _Tab.RUNMICRO:=B_ACTPRO.RUNMICRO;
                  _Tab.TAKEOVER:=B_ACTPRO.TAKEOVER;
                  _Tab.RELEASE:=B_ACTPRO.RELEASE;
                  _Tab.RUNNPROC:=B_ACTPRO.RUNNPROC;
                  {? _Tab.put()
                  ||
                     {? B_ACTPRO.RUNMICRO='T'
                     ||
                        exec('b_actrop_del','#b_action',exec('typ_runmicro','#b_action'),B_ACTION.ref())
                     ?};
                     {? B_ACTPRO.TAKEOVER='T'
                     ||
                        exec('b_actrop_del','#b_action',exec('typ_takeover','#b_action'),B_ACTION.ref())
                     ?}
                  ?}
               ?};
               B_ACTPRO.r_unlock()
            ?}
         ?}
      ?}
   ?};
   _loop:=_continue & _B_action.next()
!};
B_ACTION.cntx_pop();
{? _grupa || KOMM.select() ?};
_Tab.cntx_pop();
''


\b_actpro_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: przypisz role typu _a
::   WE: _a - typ nadawanych uprawnień
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:=_a;
_env:=params_get().env;
_tab:=_env.TAB_ACT;
:: grupa rekordów
_grupa:=_env.GRUPA;

:: pobranie wybranych czynności
_Sel:=_tab.sel_aget();
{? ~_Sel.first() || _Sel.REF:=#_tab.ref(); _Sel.add() ?};

_env1:=obj_new('TAB','B_ACTION','GRUPA');
_env1.TAB:=_tab;
_env1.B_ACTION:=_Sel;
_env1.GRUPA:=_grupa;
params_set('env',_env1);
{? _typ=exec('typ_runmicro','#b_action')
|| exec('role_ustaw','#b_action',exec('typ_runmicro','#b_action'))
|? _typ=exec('typ_takeover','#b_action')
|| exec('role_ustaw','#b_action',exec('typ_takeover','#b_action'))
?};
_tab.sel_adel();
0


\b_actrop_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: usuwanie ról typu _a z B_ACTROP
::   WE: _a - typ
::       _b - B_ACTION.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
B_ACTROP.cntx_psh();
B_ACTROP.index('UNIK');
B_ACTROP.prefix(_a,REF.FIRMA,_b);
_loop:=B_ACTROP.first();
{!
|? _loop
|!
   _loop:=B_ACTROP.del()
!};
B_ACTROP.cntx_pop();
~~


\role_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: ustaw domyślne rachunki bankowe
::   WE: _a - typ nadawanych uprawnień
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:=_a;

_env:=params_get().env;
_Tab1:=_env.TAB;
_B_action:=_env.B_ACTION;
:: grupa rekordów
_grupa:=_env.GRUPA;

_Tab:=tab_tmp(1
   ,'NAME'     ,'STRING[100]' ,'Nazwa'
   ,'SEL'      ,'STRING[1]'   ,'Wybrany'
   ,'B_ROLE'   ,'STRING[16]'  ,'B_ROLE.uidref()');
_runmicro:=_typ=exec('typ_runmicro','#b_action');
_takeover:=_typ=exec('typ_takeover','#b_action');

B_ACTION.cntx_psh();
B_ACTION.prefix();
B_ACTROP.cntx_psh();
B_ACTROP.index('UNIK');
B_ACTROP.prefix();
B_ROLE.cntx_psh();
B_ROLE.index('UNIK');
B_ROLE.prefix(REF.FIRMA);
_loop:=B_ROLE.first();
{!
|? _loop
|!
   _loop:=_B_action.first();
   {!
   |? _loop
   |!
      {? _Tab1.seek(_B_action.REF,)
      ||
         {? B_ACTION.seek(_Tab1.B_ACT)
         ||
            {? _Tab.find_key(B_ROLE.NAME,)
            ||
               {? _Tab.SEL='T'
               ||
::                ewentualna zmiana na N jeśli czynność nie ma uprawnień do roli
                  _Tab.SEL:={? B_ACTROP.find_key(_typ,REF.FIRMA,B_ACTION.ref(),B_ROLE.ref()) || 'T' || 'N' ?};
                  _Tab.put()
               ?}
            ||
               _Tab.NAME:=B_ROLE.NAME;
               _Tab.SEL:={? B_ACTROP.find_key(_typ,REF.FIRMA,B_ACTION.ref(),B_ROLE.ref()) || 'T' || 'N' ?};
               _Tab.B_ROLE:=$B_ROLE.ref();
               _Tab.add()
            ?}
         ?}
      ?};
      _loop:=_B_action.next()
   !};
   _loop:=B_ROLE.next()
!};
B_ROLE.cntx_pop();
B_ACTROP.cntx_pop();
B_ACTION.cntx_pop();
B_ACTION.prefix();

{? ~_Tab.first()
||
   FUN.info('Brak ról.'@)
||
   _title:=
      {? _typ=exec('typ_runmicro','#b_action') || 'Role, które mogą uruchamiać czynność bez zadania'@
      |? _typ=exec('typ_takeover','#b_action') || 'Role, którym może być przydzielane zadanie'@
      || ''
      ?};
   _wer:=_Tab.mk_sel(_title,,,'actrop'+(-_typ),,,,,'U');
   _Tab.win_fld(_wer,,'SEL',,,,,,'Wybrany'@,,,2,,"'T'","'N'");
   _Tab.win_fld(_wer,,'NAME',,,50,,,'Nazwa'@);
   _fb:="
      _Tab:=cur_tab();
      {? menu_txt()='Wybierz'
      || {? _Tab.SEL='T' || return(0) ?}
      || {? _Tab.SEL='N' || return(0) ?}
      ?};
      _Tab.SEL:={? _Tab.SEL='N' || 'T' || 'N' ?};
      _Tab.put()
   ";
   _Tab.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,1,1);
   _Tab.win_btn(_wer,'text=%1,panel=right'['Wybierz'@],'menu:W');
   _cfg:=',btn_label_align=center,panel=bottom,align=end';
   _Tab.win_act(_wer,,'Formuła','Odbierz'@@,,,_fb,,1,1);
   _Tab.win_btn(_wer,'text=%1,panel=right'['Odbierz'@],'menu:O');
   _cfg:=',btn_label_align=center,panel=bottom,align=end';
   _fb:="sel_exit()";
   _Tab.win_act(_wer,,'Formuła','&Akceptuj'@@,,,_fb,,,1,,,'A');
   _fb:="_Tab:=cur_tab(); _Tab.actions(_Tab.win_sel('?'),,{? _Tab.SEL='N' || 'W' || 'O' ?},1); ~~";
   _Tab.win_act(_wer,,'Rekord',,,,_fb);
   _Tab.win_btn(_wer,'text=%1'['Akceptuj'@]+_cfg,'menu:A');
   _Tab.win_btn(_wer,'text=%1'['A&nuluj'@]+_cfg,'key:Esc');

   _Tab.win_sel(_wer);
   {? _Tab.select()
   ||
      _komm:=_grupa;
      _sep:='\n';
      _txt_typ:=
         {? _typ=exec('typ_runmicro','#b_action') || 'uruchamiania poza procesem'@
         |? _typ=exec('typ_takeover','#b_action') || 'przejmowania zadań'@
         || ''
         ?};
      {? _komm
      || KOMM.init(,,'Uwagi dotyczące nadawania uprawnień do %1'@[_txt_typ]);
         _sep:=' '
      ?};
      B_ACTROP.cntx_psh();
      B_ACTROP.index('UNIK');
      B_ACTROP.prefix(_typ,REF.FIRMA);
      _loop:=_B_action.first();
      {!
      |? _loop
      |!
         {? _Tab1.seek(_B_action.REF,)
         ||
            {? ~B_ACTION.seek(_Tab1.B_ACT)
            ||
               _txt:='Brak definicji czynności %1.'@[_Tab1.SYMBOL];
               {? _komm
               || KOMM.add(_txt)
               || FUN.info(_txt)
               ?}

            |? B_ACTION.PROC<>'T'
            ||
               _txt:='Czynność %1 jest nieprocesowa.'@[B_ACTION.UID]
                  +_sep+'Nadawanie uprawnień do %1 jest niedostępne.'@[_txt_typ];
               {? _komm
               || KOMM.add(_txt)
               || FUN.info(_txt)
               ?}
            ||
               B_ACTPRO.cntx_psh();
               B_ACTPRO.index('UNIK');
               B_ACTPRO.prefix(B_ACTION.ref(),REF.FIRMA);
               {? B_ACTPRO.first()
               ||
                  _Tab.index(_Tab.ndx_tmp(,,'SEL',,));
                  _loop:=_Tab.first();
                  {!
                  |? _loop
                  |!
                     _b_role:=exec('FindAndGet','#table',B_ROLE,_Tab.B_ROLE,,,null());
                     {? _b_role<>null()
                     ||
                        {? _Tab.SEL='T' & (_runmicro & B_ACTPRO.RUNMICRO='N' | _takeover & B_ACTPRO.TAKEOVER='N' )
                        ||
                           {? ~B_ACTROP.find_key(B_ACTION.ref(),_b_role)
                           ||
                              B_ACTROP.blank();
                              B_ACTROP.B_ACTION:=B_ACTION.ref();
                              B_ACTROP.B_ROLE:=_b_role;
                              B_ACTROP.FIRMA:=REF.FIRMA;
                              B_ACTROP.TYP:=_typ;
                              B_ACTROP.TM_START:=B_ACTROL.tm_stamp();
                              B_ACTROP.STARTD:=date();
                              B_ACTROP.STARTT:=time();
                              B_ACTROP.add()
                           ?}
                        ||
                           {? B_ACTROP.find_key(B_ACTION.ref(),_b_role) || B_ACTROP.del() ?}
                        ?}
                     ?};
                     _loop:=_Tab.next()
                  !}
               ?};
               B_ACTPRO.cntx_pop()
            ?}
         ?};
         _loop:=_B_action.next()
      !};
      B_ACTROP.cntx_pop();
      KOMM.select()
   ?}
?}


\runmicro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: sprawdza czy użytkownik może uruchomić czynność w trybie micro
::   WE: _a - B_ACTION.UID
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('b_actrop_chk','#b_action',_a,exec('typ_runmicro','#b_action'))


\takeover
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: Sprawdza czy użytkownik może przejąć zadanie
::   WE: _a - B_ACTION.UID
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('b_actrop_chk','#b_action',_a,exec('typ_takeover','#b_action'))


\release
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Sprawdza czy użytkownik może zwolnić zadanie
::   WE: _a - B_ACTION.UID
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('b_actrop_chk','#b_action',_a,exec('typ_release','#b_action'))


\b_actrop_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: sprawdza
::   WE: _a - B_ACTION.UID
::       _b - typ nadawanych uprawnień
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_uid:=_a;
_typ:=_b;

_result:=1;

B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_uid);
{? B_ACTION.first()
||
   B_ACTPRO.cntx_psh();
   B_ACTPRO.index('UNIK');
   B_ACTPRO.prefix(B_ACTION.ref(),REF.FIRMA);
   {? B_ACTPRO.first()
   ||
      _result:={? _typ=exec('typ_runmicro','#b_action')
               || B_ACTPRO.RUNMICRO='T'
               |? _typ=exec('typ_takeover','#b_action')
               || B_ACTPRO.TAKEOVER='T'
               |? _typ=exec('typ_release','#b_action')
               || B_ACTPRO.RELEASE='T'
               || 0
               ?};
      {? _result=0
      ||
         B_ACTROP.cntx_psh();
         B_ACTROP.index('UNIK');
         B_ACTROP.prefix(_typ,REF.FIRMA,B_ACTION.ref());
         _loop:=B_ACTROP.first();
         {!
         |? _loop
         |!
            B_USRROL.index('UNIK');
            B_USRROL.prefix(REF.FIRMA,B_ACTROP.B_ROLE,OPERATOR.USER);
            _result:=B_USRROL.first();
            _loop:=_result=0 & B_ACTROP.next()
         !};
         B_ACTROP.cntx_pop()
      ?}
   ?};
   B_ACTPRO.cntx_pop()
?};
B_ACTION.cntx_pop();
_result


\typ_runmicro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: typ nadawanych uprawnień: 'RUNMICRO'
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'RUNMICRO'


\typ_takeover
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: typ nadawanych uprawnień: 'TAKEOVER'
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'TAKEOVER'


\typ_release
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: typ nadawanych uprawnień: 'RELEASE'
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'RELEASE'


\chk_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Sprawdz czy formuły na opis TODO czynności są przystosowane do tłumaczeń
::   WE: _a - plik w którym znajduje się formuła na opis TODO
::       [_b] - INTEGER - 0/[1] - czy dodwać komunikaty do KOMM
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_plik:=_a;
_komm:=1;
{? var_pres('_b')=type_of(0)
|| _komm:=_b
?};

{? B_ACTION.UID='ZWS_SER_VICE'
||
:: Omijam czynność serwisową, bo póki co ma formułę desc nigdzie nie używaną
   return()
?};

_fun_g:='desc';

{? B_ACTION.FMTODO<>'' & exec('is_fun','#file',_plik,_fun_g)>0
||
   _fun_str:=exec('string_fun','#file',_plik,_fun_g);
   {? _fun_str*'@@'=0
   ||
      {? _komm>0
      ||
         _msg:='Formuła ToDo czynności: '+_fun_g+'\\'+(-_plik)+'.fml jest niedostosowana do tłumaczeń.';
         _sect:='Czynność: '+B_ACTION.UID+' — '+B_ACTION.NAME;
         {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
         KOMM.add(_msg,'xwin16.png:15');
         KOMM.sect_end()
      ?}
   ?}
?};
{? _komm>0 & B_ACTION.FWTODO<>'' & B_ACTION.FWTODO*'@@'=0
||
   _msg:='Formuła wdrożeniowa ToDo czynności jest niedostosowana do tłumaczeń.';
   _sect:='Czynność: '+B_ACTION.UID+' — '+B_ACTION.NAME;
   {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
   KOMM.add(_msg,'xwin16.png:15');
   KOMM.sect_end()
?};
{? B_ACTION.UID='ZWS_MAN_UALL'
||
   B_PROC.cntx_psh();
   B_PREL.cntx_psh();
   B_PREL.index('ACCESS');
   B_PREL.prefix(B_ACTION.B_ELE);
   _loop:=B_PREL.first();
   {!
   |? _loop
   |!
      {? _komm>0 & B_PREL.FMANDESC<>'' & B_PREL.FMANDESC*'@@'=0
      ||
         _msg:='Formuła ToDo czynności jest niedostosowana do tłumaczeń. Proces %1, element %2.'[B_PREL.B_PROC().NAME,
            B_PREL.SYMBOL];
         _sect:='Czynność: '+B_ACTION.UID+' — '+B_ACTION.NAME;
         {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
         KOMM.add(_msg,'xwin16.png:15');
         KOMM.sect_end()
      ?};
      _loop:=B_PREL.next()
   !};
   B_PREL.cntx_pop();
   B_PROC.cntx_pop()
?}


\b_action_access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Sprawdza czy czynność jest dostępna na danym urządzeniu (interm, tryb mobilny)
::   WE: _a - STRING - B_ACTION.UID - identyfikator czynności
::   WY: 0 - nie jest dostępna
::       1 - jest
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_uid:=_a;

_result:=1;
B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_uid,);
{? B_ACTION.first()
|| {? exec('interm','#system')
   || {? B_ACTION.INTERM<>'T'
      || _result:=0
      ?}
   ?};
   {? exec('mobile','#system')
   || {? B_ACTION.MOBILE<>'T'
      || _result
      ?}
   ?}
?};
B_ACTION.cntx_pop();
_result


\b_action_params_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [22.26]
:: OPIS: Sprawdza wypełnienie parametrów dla podanej czynności.
::   WE: _a - unikalny identyfikator czynności
::   WY: 1 - wypełnione 0 - niewypełnione
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_a);
{? B_ACTION.first()
|| _params:=B_ACTION.memo_txt(,1,'MEMO');
   {? +_params
   || _wyn:=1
   ?}
?};
B_ACTION.cntx_pop();
_wyn


\import_nrun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wczytuje informację o tym, czy czynność może być wywoływana w sposób uproszczony (nieprocesowo).
::       Kontekst pracy - bufor B_ACTION któremu nawinąć pole B_ACTION.RUNNPROC
::   WE: _a - nazwa formuły nieprocesowej
::       _b - plik w którym znajduje się formuła główna
::       [_c] - INTEGER - 0/[1] - czy dodawać komunikaty do KOMM
::----------------------------------------------------------------------------------------------------------------------
_fun_n:=_a;
_plik:=_b;

_komm:=1;
{? var_pres('_c')=type_of(0)
|| _komm:=_c
?};

{? exec('is_fun','#file',_plik,_fun_n)>0
|| B_ACTION.RUNNPROC:='T'
|| B_ACTION.RUNNPROC:='N'
?};
~~


\b_actpro_runnproc_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Przed redakcją pola B_ACTPRO.RUNNPROC
::----------------------------------------------------------------------------------------------------------------------
1

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 63697ab38cd255a697be5f7dea8bcc169718fd878d60510ac0e8ad3697cce2e5e6082a9092bf02677a7a15bad2b91a0f58dd272884623f552ab35ed871eb71fb139d71cd44dd10582a66389b8535ffad08a467f21a213d78a9ddd34ba61dc5fb78aa915690a809ea714bdff0a7a548f905424a9a574d10cf9530a7458fd4d1d3
