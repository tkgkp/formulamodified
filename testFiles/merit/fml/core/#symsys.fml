:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #symsys.fml [21.14]
:: Utworzony: 26.10.2020
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły do obsługi pól separujących dane DRO i GHW.
::======================================================================================================================


\mod_uid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Ustalenie kodu dla aktualizacji.
::   WE: _a [TABLE] - alias tabeli
::       _b [STRING] - akronim pola z oznaczeniem zapisu systemowego
::       _c [STRING] - akronim pola zawierającego kod aktualizacji
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: kontrola argumentów wywołania
{? var_pres('_a')<>type_of(SYSLOG) |
   var_pres('_b')<>type_of('') |
   var_pres('_c')<>type_of('')
:: błędny argument
|| return()
?};

:: mapa argumentów
_TAB:=_a;
_lck:=_b;
_fld:=_c;

_usr:=exec('isEqual','#field',_TAB,_lck,'N');
_val:=exec('get','#field',_TAB,_fld);
{? type_of(_usr)=type_of(~~) |
   type_of(_val)<>type_of('')
:: błąd wykonania
|| return()
?};

{? _usr=0 & #_val<>0
:: ochrona wartości systemowych
|| exec('set','#field',_TAB,_fld,'')

|? _usr<>0 & (_val='' | #_val=0)
:: uzupełnij kod dla aktualizacji zapisu
|| exec('set','#field',_TAB,_fld,$_TAB.tm_stamp())
?};
~~


\chk_chars
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Kontrola dozwolonych znaków.
::   WE: _a [OBJECT] - wskazanie obiektu __CHK
::       _b [TABLE] - alias tabeli
::       _c [STRING] - akronim pola napisowego
::   WY: _c/1 - niedozwolony znak/tekst poprawny
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
:: mapa argumentów
_chk:=_a;
_TAB:=_b;
_sym:=_c;

_set:='ABCDFEGHIJKLMNOPQRSTUVWXYZ_0123456789';
_val:=exec('get','#field',_TAB,_sym);
_len:=+_val;
{! _ii:=1.._len
|! {? _set*(_ii+_val+1)=0
::    niedozwolone znaki w symbolu
   || _chk.err_fld(_TAB,_sym,1,
         'Użyto znaku "%1".\n\n'
         'Dozwolone znaki to:\n'
         ' - wielkie litery alfabetu łacińskiego,\n'
         ' - cyfry arabskie,\n'
         ' - podkreślenie.'@[_ii+_val+1]
      );
      return(_sym)
   ?}
!};
return(1)


\chk_code
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Kontrola kodu z uwzględnieniem znacznika zapisu systemowego.
::   WE: _a [OBJECT] - wskazanie obiektu __CHK
::       _b [TABLE] - alias tabeli
::       _c [STRING] - akronim pola z oznaczeniem zapisu systemowego
::       _d [STRING] - akronim pola zawierającego kod
::   WY: 1/_c/~~ - poprawna/błędna wartość kodu/błąd
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_chk:=_a;
_TAB:=_b;
_lck:=_c;
_sym:=_d;
_fld:=MS.name(_TAB,_sym);

_usr:=exec('isEqual','#field',_TAB,_lck,'N');
_val:=exec('get','#field',_TAB,_sym);
{? type_of(_usr)=type_of(~~) |
   type_of(_val)=type_of(~~)
:: błąd wykonania
|| return()
?};

_val:=gsub(form(_val),'0','1');

{? _usr & #_val=0
:: błędny elemeny klienta
|| _chk.err_fld(_TAB,_sym,1,'Dozwolone są tylko cyfry arabskie.'@)

|? ~_usr & #_val<>0
:: błędny elemeny standardowy
|| _chk.err_fld(_TAB,_sym,1,'"%1" nie może składać się wyłącznie z cyfr.'@[_fld])

|| return(exec('chk_chars','#symsys',_chk,_TAB,_sym))
?};

_sym


\chk_symbol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Kontrola symbolu z uwzględnieniem znacznika zapisu systemowego.
::   WE: _a [OBJECT] - wskazanie obiektu __CHK
::       _b [TABLE] - alias tabeli
::       _c [STRING] - akronim pola z oznaczeniem zapisu systemowego
::       _d [STRING] - akronim pola zawierającego symbol
::   WY: 1/_c/~~ - poprawna/błędna wartość symbolu/błąd
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_chk:=_a;
_TAB:=_b;
_lck:=_c;
_sym:=_d;
_fld:=MS.name(_TAB,_sym);

_usr:=exec('isEqual','#field',_TAB,_lck,'N');
_val:=exec('get','#field',_TAB,_sym);
{? type_of(_usr)=type_of(~~) |
   type_of(_val)=type_of(~~)
:: błąd wykonania
|| return()
?};

_fls:=~-(1+|_val);

{? ~_usr & _fls='Q'
:: błędny element standardowy
|| _chk.err_fld(_TAB,_sym,1,'"%1" nie może zaczynać się od litery Q.'@[_fld])

|? _usr & _fls<>'Q'
:: błędny elemeny klienta
|| _chk.err_fld(_TAB,_sym,1,'"%1" musi zaczynać się od litery Q.'@[_fld])

|| return(exec('chk_chars','#symsys',_chk,_TAB,_sym))
?};

_sym


\chk_yes_no
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Kontrola wartości napisowej pola znacznikowego (T/N).
::   WE: _a [OBJECT] - wskazanie obiektu __CHK
::       _b [TABLE] - alias tabeli
::       _c [STRING] - akronim pola znacznikowego
::   WY: 1/_c/~~ - poprawna/błędna wartość symbolu/błąd
::----------------------------------------------------------------------------------------------------------------------
:: kontrola argumentów wywołania
{? var_pres('_b')<>type_of(SYSLOG) |
   var_pres('_c')<>type_of('')
:: błędny argument
|| return()
?};

:: mapa argumentów
_chk:=_a;
_TAB:=_b;
_fld:=_c;

_chk.in_set(_TAB,_fld,,'T','N')


\is_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE: _a [TABLE] - alias tabeli
::       _b [STRING] - akronim pola znacznika blokady
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('isEqual','#field',_a,_b,'N') | exec('runtime_dro','#system')


\mk_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy i zapamiętuje okienko edycji tabeli zależnie od wersji narzędzi.
::   WE: _a [TABLE] - alias tabeli, dla której będzie tworzone okienko
::       _b [STRING] - akronim okienka podstawowego i jednocześnie identyfikatro okna
::       _c [STRING] - akronim okienka standaryzacji
::       _d [STRING] - tytuł tworzonego okienka (domyślnie opis tabeli)
::       _e [STRING] - tryb wyświetlania okienka (domyślnie 'normal')
::       _f [INTEGER] - dodawaj przyciski (0/1*)
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_red:=_b;
_std:=_c;
_hdr:=
   {? var_pres('_d')<>type_of('')
   || _TAB.comment()
   || _d
   ?};
_btn:=
   {? var_pres('_f')=type_of(0)
   || _f<>0
   || 1
   ?};

exec('__WND','object');
_cfg:=__WND.EDIT;
_acr:=_red;

{? exec('runtime_dro','#system')
|| {? (_acr:=_cfg.get(_TAB,_red))<>''
   || return(_acr)
   ?};
   _acr:=_TAB.mk_edit(_hdr,0,'#%1_%2'[-(2-!_TAB),-_red]);
   _TAB.win_ewin(_acr,,_std,'Dane wzorcowe'@,1);
   _TAB.win_esep(_acr);
   _TAB.win_ewin(_acr,,_red,,1);
   {? _btn<>0
   || exec('ok_esc','#window',_TAB,_acr,,,,,,,exec('text_red_ok','#window'))
   ?}
?};

_cfg.put(_TAB,_red,_acr);

_acr


\setup_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy i zapamiętuje okienko edycji tabeli zależnie od wersji narzędzi. Ustawia okno edycji i wzorca.
::   WE: _a [TABLE] - alias tabeli, dla której będzie tworzone okienko
::       _b [STRING] - akronim okienka podstawowego i jednocześnie identyfikatro okna
::       _c [STRING] - akronim okienka standaryzacji
::       _d [STRING] - tytuł tworzonego okienka (domyślnie opis tabeli)
::       _e [STRING] - tryb wyświetlania okienka (domyślnie 'normal')
::       _f [STRING] - akronim okienka wzorca
::       _g [INTEGER] - dodawaj przyciski do okna redakcji (0/1*)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_red:=_b;
_std:=_c;
_hdr:={? var_pres('_d')=type_of('') || _d || ~~ ?};
_mod:={? var_pres('_e')=type_of('') || _e || ~~ ?};
_btn:={? var_pres('_g')=type_of(0)  || _g ||  1 ?};

:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
_TAB.win_edit(exec('mk_edit','#symsys',_TAB,_red,_std,_hdr,_mod,_btn));

:: ustaw alternatywne okno wzorca
{? var_pres('_f')=type_of('')
|| _TAB.win_patt(_f)
?};
~~


\chk_match
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza zgodność kodów. W przypadku rozbieżności użytkownik jest proszony o potwierdzenie.
::   WE: _a [STRING] - kod aktualny
::       _b [STRING] - kod zalecany
::       _c [INTEGER] - typ komunikatu
::   WY: wynik porównania lub decyzji użytkownika
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_cur:=_a;
_new:=_b;
_ask:={? var_pres('_c')=type_of(0) || _c ?};

{? _cur=_new
|| return(1)
?};

{? _ask=1
|| FUN.ask(
      'Kod "%1" jest niezgodny z zalecanym "%2".\n\n'
      'Czy zapisać dane w obecnej postaci?\n\n'
      'UWAGA: Jeżeli dane zostały wyemitowane w poprzedniej wersji programu,\n'
      'to kodu nie należy zmieniać, ponieważ może wystąpić powielenie danych.'@
      [_cur,_new]
   )
|? _ask=2
|| FUN.ask(
      'Wygenerowany kod "%1" jest różny od aktualnego "%2".\n'
      'Czy na pewno zastąpić aktualny kod wygenerowanym?'@
      [_cur,_new]
   )
|? _cur<>_new
|| FUN.ask(
      'Kod "%1" jest różny od "%2".\n'
      'Czy kontynuować działanie?'@
      [_cur,_new]
   )
?}


\can_gen_code
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy można wygenerować kod dla bieżącego wiersza. Wyświetla komunikat o zablokowanym generowaniu kodu.
::   WE: _a [TABLE] - alias tabeli
::       _b [STRING] - akronim pola z oznaczeniem zapisu systemowego
::   WY: 0/1 - kod nie może być wygenerowany/można wygenerować kod
::----------------------------------------------------------------------------------------------------------------------
:: kontrola argumentów wywołania
{? var_pres('_a')<>type_of(SYSLOG) |
   var_pres('_b')<>type_of('')
:: błędny argument
|| return(0)
?};

:: mapa argumentów
_TAB:=_a;
_lck:=_b;

{? exec('isEqual','#field',_TAB,_lck,'T')
|| return(1)
?};

_fld:=MS.name(_TAB,_lck);
FUN.info('Kod może być wygenerowany tylko dla zapisu z włączonym znacznikiem "%1".'@[_fld]);
0


\restore_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przywraca funkcjonalność pól na podstawie definicji systemu.
::   WE: _a [ARRAY] - akronimy tabel
::   WY: 0/1 - czy potrzebne było przywrócenie funkcjonalności
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('runtime_dro','#system')
|| return(0)
?};

:: mapa ragumentów
_tab:=_a;

_ttp:=type_of(SYSLOG);
_fml:=exec('fld_fml_types','#field');
_ftl:=obj_len(_fml);
_len:=obj_len(_tab);
{! _ni:=1.._len
|! {? var_pres(_tab[_ni])=_ttp
   || _TAB:=($_tab[_ni])();
      _num:=_TAB.fld_num();
      {! _mi:=1.._num
      |! {! _ii:=1.._ftl
         |! {? {? _fml[_ii]='F3' || _TAB.fld_join(_mi)='' || 1 ?}
            || _TAB.fld_fml(_TAB.fld_acr(_mi),_fml[_ii],"*")
            ?}
         !}
      !};
      &_TAB
   ?}
!};
1


\setup_dro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustawia funkcjonalność pól na potrzeby DRO.
::   WE: _a [ARRAY] - akronimy tabel
::   WY: 0/1 - czy potrzebna była zmiana funkcjonalności
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('runtime_dro','#system')
|| return(0)
?};

:: mapa ragumentów
_tab:=_a;

_stt:=var_pres('SYMBOL',FIRMA);
_ttp:=type_of(SYSLOG);
_len:=obj_len(_tab);
{! _ii:=1.._len
|! {? var_pres(_tab[_ii])=_ttp
   || _TAB:=($_tab[_ii])();
      {? var_pres('SYSTEM',_TAB)=_stt
      || _TAB.fld_fml('SYSTEM','BLANK',"'T'")
      ?};
      {? var_pres('KOD',_TAB)=_stt
      || _TAB.fld_fml('KOD','BLANK',"")
      ?};
      &_TAB
   ?}
!};
1


:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 0b0f2fbec399470111d959f57ce0169b9b1a59f5a360ab91d96108383ab20ed1f75d2dd7a96b156d84c9a73754033e1a0a79a3a6521b17b90c7a33efe1e0cd7d0ac43e30c11f6e34fde25f0ca11b35c73a9f6d8be5d18a8bf8cb5a2648fca76e14fa8b70f9cc449b0772f94034fc958013b735f325bc65d79850abe6a6d53d9c
