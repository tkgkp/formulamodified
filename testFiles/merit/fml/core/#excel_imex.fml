:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: #excel_imex.fml
:: Utworzony: 09.07.2018
:: Autor: WH
::======================================================================================================================
:: Zawartosc: Klasy wykorzystywane do exportu i importu parametryzacji przez Excel
::======================================================================================================================


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca zmienną środowiskową do obsługi eksportów i importów przez Excel
::   WY: obj_new - tablica nazwana zawierajaca wszystko co potrzebne
::----------------------------------------------------------------------------------------------------------------------

::UWAGA: _fld, i _mth to formułki pomocnicze, zeby wygodniej tworzyć tablicę i komentować poszczególne jej elementy
::       powiedzmy, że to bedzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to bedzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
::             Zmienne pomocnicze
                _fld('KOMM','Obiekt do obsługi komunikatów')
               ,_fld('TRANSACTIONS','Czy transakcje aktywne')
               ,_fld('RANDOM_TEST','Czy dodawać na końcu randomowy wiersz')
               ,_fld('NR_ROOT','Numer root-a komunikatów')
               ,_fld('PROGRESS','Czy pokazywać progress')
               ,_fld('DEF','Obiekt definicji nagłówka')
               ,_fld('INIT_FML','Aktualnie wykonywana formuła inicjująca mechanizm imex')
               ,_fld('DIR','Ścieżka do katalogu gdzie będą pliki excel z zawartością')
               ,_fld('FILEPATH','Ścieżka do pliku Excel do którego pisać')
               ,_fld('FILENAME','Nazwa pliku Excel do którego pisać')
               ,_fld('TYPES','Tablica z typami (potrzebne do metody .emtpy_value)')
               ,_fld('EXP_TAB','Uchwyt do tabeli którą aktualnie eksportuję')
               ,_fld('FIELDS_OK','Czy poprawnie zaczytano definicję pól')
               ,_fld('SEP','Separator')
               ,_fld('KIND','Import czy eksport')
               ,_fld('IMP_MODE','Tryb importowania')
               ,_fld('IMP_MSG','Czy podczas importu będą zbierane informacje nt dodawanych, modyfikowanych rekordów')
               ,_fld('TAB_IMP_CHK','Czy sprawdzac wypełnienie pola TAB_IMP w definicji')
               ,_fld('IMP_PROC','Czy importować procesy')
               ,_fld('TIME_JM','Jednostka miary do pomiaru czasów')
               ,_fld('TIME_CLOCK','Wartość jednostki miary do pomiaru czasów')
               ,_fld('EXPORT_MODE','Tryb eksportowania - 1 - minimalizacja plików, 2 - każdy eksport do jednego pliku')
               ,_fld('STORE','Obiekt trzymający tabele tym. z eksportowaną zawartością')
               ,_fld('STORE_NDX_REF','Obiekt trzymający indeksy tabel .STORE')
               ,_fld('ASYNC','Czy eksport asynchroniczny możliwy')
               ,_fld('ACCEPT_ALLOW','Czy akceptacja okna możliwa')
               ,_fld('ARGSPROG','Obiekt multiprogressa')
               ,_fld('PROG_STEP','Krok progressu')
               ,_fld('PROG_ALLOC','Udział pierwszego etapu eksportu w globalnym pasku')
               ,_fld('PROG_IMEX','Udział drugiego etapu eksportu w globalnym pasku')
               ,_fld('PROG_SAVE','Udział trzeciego etapu eksportu w globalnym pasku')
               ,_fld('FUNPAR','Czy uruchomione z kodami liści parametryzatora')
               ,_fld('FILTER','Czy uruchomione z kodami do ograniczenia dziedziny')
               ,_fld('LANG_PARAMS','Mechanizm do tłumaczenia listków w Ustawienia i parametryzacja')
               ,_fld('ID_GRP','Wspólny identyfikator grupy rekordów')
               ,_fld('INTERM','Czy uruchomione w interm')
               ,_fld('DIR_ON_SERVER','Czy eksport wykonywany na serwerze')
               ,_fld('ZWS_FO_APPL_DOM','Domeny dla importu funpar ZWS_FO_APPL')
               ,_fld('ZWS_FO_USER_DOM','Domeny dla importu funpar ZWS_FO_USER')
               ,_fld('DEF_MODE','Domyślny tryb importowania')
               ,_fld('DOUBLE_CHK','Czy pytać ponownie przy wybraniu importowania z nadpisywaniem')
               ,_fld('ASYNC_LEVEL','Poziom zagłębienia write_async')
               ,_fld('FORMULA_RECURSION','Ile może być maksymalnych zagłębień rekurecyjnych')
               ,_fld('ZIP_NAME','Nazwa archiwum zip dla eksportu na interm, bez rozszerzenia')
               ,_fld('DANEWZOR','Czy eksport danych wzorcowych')
               ,_fld('SINGLEFIRM','Czy eksport/import tylko danych w obrębie aktualnej firmy?')
               ,_fld('FIRM_SRC','Symbol źródłowej firmy')
::             identyfikatory okienek
               ,_fld('wid_export','ID okienka z wyborem elementów do eksportu')

::             tytuły okienek
               ,_fld('tit_export','Tytuł okienka z wyborem elementów do eksportu')
               ,_fld('tit_import','Tytuł okienka z podsumowaniem importu')
               ,_fld('tit_pos','Tytuł okienka z pozycjami definicji')
               ,_fld('tit_hist','Tytuł okienka z historią')

::             tabele tymczasowe
               ,_fld('TAB_HEAD','Tablica tymczasowa z nagłowkami definicji imex')
               ,_fld('TAB_POS','Tablica tymczasowa z pozycjami definicji imex')
               ,_fld('TAB_SEL','Tablica tymczasowa z wybranymi do importu rekordami')
               ,_fld('TAB_HIST','Tablica tymczasowa z historią zapisu')
               ,_fld('TAB_ITER','Tablica tymczasowa z licznikami do zapisu')
               ,_fld('TAB_LINKS','Tablica tymczasowa z powiązaniami eksportów')
               ,_fld('TAB_FUNPAR','Tablica tymczasowa z identyfikatorami FUNPAR')
               ,_fld('TAB_FILTER','Tablica tymczasowa z identyfikatorami ograniczenia dziedziny')
               ,_fld('TAB_FUNPAR_LINKS','Tablica tymczasowa powiązanych identyfikatorów imex')
               ,_fld('TAB_HFUN','Tablica tymczasowa z id imex i id FUNPAR')
               ,_fld('TAB_MEMO_HISTORY','Tablica tymczasowa trzymająca poprzednie wartości dla pól memo')

::             indeksy tymczasowych tabel
               ,_fld('NDX_HEAD1','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD2','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD3','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD4','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD5','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD6','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD7','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD8','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD9','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_HEAD10','Indeks tabeli tymczasowej .TAB_HEAD')
               ,_fld('NDX_POS1','Indeks tabeli tymczasowej .TAB_POS')
               ,_fld('NDX_POS2','Indeks tabeli tymczasowej .TAB_POS')
               ,_fld('NDX_POS3','Indeks tabeli tymczasowej .TAB_POS')
               ,_fld('NDX_SEL1','Indeks tabeli tymczasowej .TAB_SEL')
               ,_fld('NDX_SEL2','Indeks tabeli tymczasowej .TAB_SEL')
               ,_fld('NDX_HIST1','Indeks tabeli tymczasowej .TAB_HIST')
               ,_fld('NDX_HIST2','Indeks tabeli tymczasowej .TAB_HIST')
               ,_fld('NDX_HIST3','Indeks tabeli tymczasowej .TAB_HIST')
               ,_fld('NDX_HIST4','Indeks tabeli tymczasowej .TAB_HIST')
               ,_fld('NDX_HIST5','Indeks tabeli tymczasowej .TAB_HIST')
               ,_fld('NDX_HIST6','Indeks tabeli tymczasowej .TAB_HIST')
               ,_fld('NDX_HIST7','Indeks tabeli tymczasowej .TAB_HIST')
               ,_fld('NDX_ITER1','Indeks tabeli tymczasowej .TAB_ITER')
               ,_fld('NDX_ITER2','Indeks tabeli tymczasowej .TAB_ITER')
               ,_fld('NDX_FUNPAR1','Indeks tabeli tymczasowej .TAB_FUNPAR')
               ,_fld('NDX_FILTER1','Indeks tabeli tymczasowej .TAB_FILTER')
               ,_fld('NDX_LINKS1','Indeks tabeli tymczasowej .TAB_LINKS')
               ,_fld('NDX_LINKS2','Indeks tabeli tymczasowej .TAB_LINKS')
               ,_fld('NDX_LINKS3','Indeks tabeli tymczasowej .TAB_LINKS')
               ,_fld('NDX_HFUN1','Indeks tabeli tymczasowej .TAB_HFUN')
               ,_fld('NDX_HFUN2','Indeks tabeli tymczasowej .TAB_HFUN')

::             uchwyty do okien
               ,_fld('WIN_EXPORT','Uchwyt okienka z wyborem elementów do eksportu')
               ,_fld('WIN_IMPORT','Uchwyt okienka z podsumowaniem importu')
               ,_fld('WIN_POS','Uchwyt okienka z pozycjami definicji imex')
               ,_fld('WIN_HIST','Uchwyt okienka z historią')
               ,_fld('WIN_HIST1','Uchwyt okienka z historią')
               ,_fld('WIN_HIST2','Uchwyt okienka z historią')
::             obsługa arkusza Excel
               ,_fld('XLS','Obiekt do obsługi arkuszy Excel')
               ,_fld('ADD_ROWS','Liczba dodatkowych redagowalnych wierszy (wartość standardowa)')

::             METODY
               ,_mth('load','Wczytuje definicje')
               ,_mth('select','Pokazuje okno z dialogiem eksportu')
               ,_mth('select4funpar','Pokazuje okno z dialogiem eksportu')
               ,_mth('init','Uruchamia formułę inicjującą')
               ,_mth('add_definition','Dodaje definicję imex')
               ,_mth('add_field','Dodaje pole do definicji imex')
               ,_mth('write_async','Uruchamia eksport asynchroniczny przekazanego rekordu')
               ,_mth('empty_value','Zwraca pustą wartość ')
               ,_mth('table','Zwraca uchwyt do aktualnej tabeli którą eksportuje')
               ,_mth('erase','Metoda czyszcząca to co można wyczyścić')
               ,_mth('column','Zwraca nazwę kolumny w Excel na podtawie akronimu MacroBase')
               ,_mth('funpar_chk','Sprawdza czy można wczytać definicję na podstawie przekazanych kodów FUNPAR')
               ,_mth('filter_chk','Sprawdza czy można wczytać definicję na podstawie przekazanych identyfikatorów IMEX')

::             METODY "publiczne" do obsługi plików Excel
               ,_mth('create','Tworzy zestaw obiektów do obsługi plików Excel')
               ,_mth('save','Zapisuje pojedynczy plik Excel')
               ,_mth('close','Zamyka pojedynczy plik Excel (z utratą danych, o ile nie wykonano save)')
               ,_mth('auto_size','Ustawia automatyczny rozmiar kolumn z danymi w danym pliku')
               ,_mth('write_description','Wpisuje opis zakładki')
               ,_mth('write_header','Wpisuje nagłówek tabeli')
               ,_mth('write_row','Wpisuje wiersz tabeli (z danymi) na podstawie obiektu')
               ,_mth('write_row2','Wpisuje wiersz tabeli (z danymi) na podstawie rekordu tabeli')
               ,_mth('read_load','Ładuje dane z arkuszy do pamięci do późniejszego odczytu')
               ,_mth('read_row','Pobiera wiersz tabeli (z danymi)')
               ,_mth('read_id','Udostępnia tabelę z identyfikatorami')
               ,_mth('write_empty_rows','Wpisuje puste wiersze pod wszystkimi tabelami w danym pliku')
               ,_mth('done','Zakończenie pracy z plikami xlsx')
               ,_mth('store_row','Zapamiętuje wiersz w tabeli tymczasowej do późniejszego zapisu')
               ,_mth('store_fix_order','Naprawia kolejność która mogła być popsuta przez .write_async')
               ,_mth('add_link','Dodaje powiązanie między definicjami')
               ,_mth('chk_links','Sprawdza linki')
               ,_mth('analize_fml','Analizator formuł')
               ,_mth('analize_line','Analizator formuł')
               ,_mth('is_danewzor','Czy eksport danych wzorcowych')
             );
exec('JCQ_decl','#message');
_env.TRANSACTIONS:=0;
_env.RANDOM_TEST:=0;
_env.LANG_PARAMS:=exec(,'__fmlang','param.lang',,,lang_language(1));
_env.ID_GRP:='';
_env.DIR:='';
_env.KOMM:=obj_new(@.CLASS.JCQ);
_env.FILEPATH:='';
_env.FILENAME:='';
_env.PROGRESS:=1;
_env.IMP_PROC:=1;
_env.IMP_MSG:=0;
_env.FUNPAR:=0;
_env.FILTER:=0;
_env.ASYNC_LEVEL:=0;
_env.FORMULA_RECURSION:=#cfg_info('formula_recursion');
_env.TAB_IMP_CHK:=1;
::_env.KOMM.init(250,,'Import/eksport parametryzacji'@);
_env.DEF:=exec('args_init','#excel_imex',_env);
_env.INIT_FML:="";
_env.NR_ROOT:=0;
_env.EXP_TAB:=~~;
_env.DEF_MODE:='D';
_env.DOUBLE_CHK:=1;
_env.PROG_STEP:=20;
_env.PROG_ALLOC:=10;
_env.PROG_IMEX:=80;
_env.PROG_SAVE:=10;
_env.ZIP_NAME:='Parametryzacja'@;
_env.wid_export:='#xls_imex_exp';
_env.tit_export:='Eksport do arkuszy Excel'@;
_env.tit_import:='Podsumowanie importu'@;
_env.tit_pos:='Pozycje definicji imex'@;
_env.TAB_HEAD:=exec('tab_head','#excel_imex',_env);
_env.TAB_POS:=exec('tab_pos','#excel_imex',_env);
_env.TAB_SEL:=exec('tab_sel','#excel_imex',_env);
_env.TAB_HIST:=exec('tab_hist','#excel_imex',_env);
_env.TAB_ITER:=exec('tab_iter','#excel_imex',_env);
_env.TAB_FUNPAR:=exec('tab_funpar','#excel_imex',_env);
_env.TAB_FILTER:=exec('tab_filter','#excel_imex',_env);
_env.TAB_LINKS:=exec('tab_links','#excel_imex',_env);
_env.TAB_HFUN:=exec('tab_hfun','#excel_imex',_env);
_env.TAB_MEMO_HISTORY:=exec('tab_memo_history','#excel_imex',_env);
_env.XLS:=exec('xls_obj','#excel_imex',_env);
_env.ADD_ROWS:=20;
_env.TYPES:=exec('mbFieldsType','#table');
_env.FIELDS_OK:=1;
_env.SEP:=exec('sep','#file');
_env.KIND:='';
_env.TIME_JM:='sek'@;
_env.TIME_CLOCK:=exec('second','#tm_stamp');
_env.EXPORT_MODE:=2;
_env.STORE:=~~;
_env.STORE_NDX_REF:=~~;
_env.ASYNC:=1;
_env.ACCEPT_ALLOW:=1;
_env.INTERM:=0;
_env.DIR_ON_SERVER:=0;
_env.ZWS_FO_APPL_DOM:='';
_env.ZWS_FO_USER_DOM:='';
_env.DANEWZOR:=0;
_env.SINGLEFIRM:=0;

_env.load:="

   _funpar:=~~;
   _filter:=~~;
   {? var_pres('_a')>100
   || _funpar:=_a;
      _tab:=.TAB_FUNPAR;
      {! _it:=1..obj_len(_funpar)
      |!
         .FUNPAR:=1;
         _id:=_funpar[_it];
         _tab.cntx_psh();
         _tab.prefix(_id,);
         {? _tab.first()=0
         || _tab.blank();
            _tab.ID:=_id;
            _tab.add()
         ?};
         _tab.cntx_pop();
         {? _id='ZWS_FO_APPL' & var_pres('__ZWS_FO_APPL_DOM')>0
         || .ZWS_FO_APPL_DOM:=__ZWS_FO_APPL_DOM;
            VAR_DEL.delete('__ZWS_FO_APPL_DOM')
         ?};
         {? _id='ZWS_FO_USER' & var_pres('__ZWS_FO_USER_DOM')>0
         || .ZWS_FO_USER_DOM:=__ZWS_FO_USER_DOM;
            VAR_DEL.delete('__ZWS_FO_USER_DOM')
         ?};
         ~~
      !};
      _tab.clear();
      _tab.first()
   ?};

   _alt_init:='';
   {? var_pres('_b')=type_of('')
   || _alt_init:=_b
   ?};

   {? var_pres('_c')=type_of('') & _c<>''
   ||
      {? _c*','>0
      || _filter:=spli_str(_c,',')
      || _filter:=obj_new(1);
         _filter[1]:=_c
      ?};
      _tab2:=.TAB_FILTER;
      {! _it:=1..obj_len(_filter)
      |!
         .FILTER:=1;
         _id:=_filter[_it];
         _tab2.cntx_psh();
         _tab2.prefix(_id,);
         {? _tab2.first()=0
         || _tab2.blank();
            _tab2.ID:=_id;
            _tab2.add()
         ?};
         _tab2.cntx_pop();
         ~~
      !};
      _tab2.clear();
      _tab2.first()
   ?};

   _msg:='Inicjalizacja definicji eksportu/importu'@;
   .KOMM.init(250,,_msg);
   progress(,_msg+'…',exec('nazwa','#system'),1);

   {? _alt_init<>''
   || ($_alt_init)(.)
   || exec('init','xls__init',.)
   ?};

   {? .EXPORT_MODE=2
   ||
      _tab_head:=.TAB_HEAD;
      _tab_head.cntx_psh();
      _tab_head.index(.NDX_HEAD8);
      _tab_head.prefix();
      _size:=_tab_head.size();
      {? _size>0
      ||
         .STORE:=obj_new(_size);
         .STORE_NDX_REF:=obj_new(_size);
         {! _it:=1.._size
         |! .STORE[_it]:=~~;
            .STORE_NDX_REF[_it]:=~~
         !}
      ?};
      _tab_head.cntx_pop()
   ?};
   prgs_clr();
   .KOMM.select()
";

_env.select:="
   params_set(params_get());

   .WIN_POS:=exec('win_export_pos','#excel_imex',.);

   {? .KIND='EXPORT'
   || .WIN_EXPORT:=exec('win_export_nag','#excel_imex',.);
      .TAB_HEAD.win_sel(.WIN_EXPORT);
      .TAB_HEAD.index(.NDX_HEAD1);
      .TAB_HEAD.prefix('N')
   |? .KIND='IMPORT'
   || .WIN_IMPORT:=exec('win_import_nag','#excel_imex',.);
      .TAB_HEAD.win_sel(.WIN_IMPORT);
      .TAB_HEAD.index(.NDX_HEAD4);
      .TAB_HEAD.prefix('T')
   ?};

   .TAB_HEAD.select();
   ~~
";

_env.select4funpar:="
   params_set(params_get());
   _dialogs:=1;
   {? var_pres('_a')=type_of(0)
   || _dialogs:=_a
   ?};
::
   _imex_id:='';
   {? var_pres('_b')=type_of('')
   || _imex_id:=_b
   ?};

   .WIN_POS:=exec('win_export_pos','#excel_imex',.);

   _can_continue:=1;

   {? .KIND='EXPORT'
   || .WIN_EXPORT:=exec('win_export_nag','#excel_imex',.);
      _tab_head:=.TAB_HEAD;
      _tab_head.win_sel(.WIN_EXPORT);
      _tab_funpar:=.TAB_FUNPAR;
      _tab_funpar.prefix();
      _tab_head.prefix();
      _msg_error:='Zaznaczone elementy parametryzacji nie zostały poprawnie obsłużone w mechanizmie eksportu do Excel.'@;
      {? _dialogs>0
      ||
::       Wyświetlam okno żeby user sobie wybrał co chce eksportować
         {? _imex_id<>''
         || _tab_head.index(.NDX_HEAD2);
            _tab_head.prefix(_imex_id,)
         || _tab_head.index(.NDX_HEAD1);
            _tab_head.prefix('N')
         ?};

         {? _tab_head.first()
         || {!
            |? {? .funpar_chk(_tab_head.FUNPAR)
               || _tab_head.FUNPAROK:='T';
                  _tab_head.SELECTED:='T';
                  _tab_head.put()
               ?};
               _tab_head.next()
            !}
         ?};
         _tab_head.index(.NDX_HEAD5);
         _tab_head.prefix('T');
         {? _tab_head.size()>0
         || _tab_head.select()
         || FUN.info(_msg_error)
         ?}
      ||
::       Brak dialogów tylko od razu uruchamiam eksport
         _tab_head.cntx_psh();
         {? _imex_id<>''
         || _tab_head.index(.NDX_HEAD2);
            _tab_head.prefix(_imex_id,)
         || _tab_head.index(.NDX_HEAD1);
            _tab_head.prefix('N')
         ?};
         {? _tab_head.first()
         || {!
            |?
               {? .funpar_chk(_tab_head.FUNPAR)
               || _tab_head.SELECTED:='T';
                  _tab_head.put()
               ?};
               _tab_head.next()
            !}
         ?};
         _tab_head.index(.NDX_HEAD3);
         _tab_head.prefix('T');
         {? _tab_head.size()=0
         || _can_continue:=0;
            FUN.info(_msg_error)
         ?};
         _tab_head.cntx_pop();
         {? _can_continue>0
         || exec('export_accept','#excel_imex')
         ?}
      ?}
   ?};
   ~~
";

_env.init:="
   params_set(params_get());
   _fml:=_a;
   {? type_of(_fml)=type_of(\"\") & _fml<>\"\"
   || .INIT_FML:=_fml;
::    Uruchamiam implementację programisty imex
      _fml(.DEF);

      _can_add:=1;

      {? .FUNPAR>0
      || _can_add:=0;
         {? .KIND='IMPORT'
         ||
::          Przy imporcie wystarczy sprawdzić czy ładowana definicja znajduje się TAB_FUNPAR
            {? .DEF.FUNPAR<>''
            || _can_add:=.funpar_chk(.DEF.FUNPAR)
            ?}
         |? .KIND='EXPORT'
         ||
            {? type_of(.TAB_FUNPAR_LINKS)=0
            || .TAB_FUNPAR_LINKS:=exec('links4funpar','#excel_imex',.)
            ?};
::          Przy eksporcie, ze względu na write_async trzeba sprawdzić czy ładowana definicja
::          znajduje się wśród powiązanych ze sobą definicji, których źródłem jest TAB_FUNPAR
            {? .DEF.ID<>''
            || _tab:=.TAB_FUNPAR_LINKS;
               _tab.cntx_psh();
               _tab.prefix(.DEF.ID,);
               _can_add:=_tab.first();
               _tab.cntx_pop()
            ?};

            {? _can_add=0
            ||
::             Jeśli nie ma w powiązaniach, to może wystarczy sprawdzić czy
::             ładowana pozycja jest na liście w TAB_FUNPAR
               {? .DEF.FUNPAR<>''
               || _can_add:=.funpar_chk(.DEF.FUNPAR)
               ?}
            ?}
         ?}
      || {? .KIND='IMPORT'
         ||
::          Przy imporcie bez tablicy z kodami z parametryzatora sprawdzam czy definicja nie miała znacznika pominięcia
            {? .DEF.SKIP='T'
            || _can_add:=0
            ?}
         ?}
      ?};

      {? _can_add>0 & .FILTER>0
      || _can_add:=.filter_chk(.DEF.ID,.DEF.FILE)
      ?};

      {? _can_add>0 & .SINGLEFIRM>0
      || {? .DEF.MULTIFIR='T'
         || _can_add:=0
         ?}
      ?};

      {? _can_add>0
      ||
::       Dodaję imex do definicji
         .add_definition(.DEF)
      ?};
::    Blankuję tablicę nazwaną, żeby następna implementacja programisty miała czyste konto
      .DEF.blank()
   || _msg:='Nieprawidłowy typ argumentu przekazany do metody .init()';
      exec('komm_add','#excel_imex',_msg,3,.)
   ?}
";

_env.create:=".XLS.create()";
_env.save:=".XLS.save(_a)";
_env.close:=".XLS.close(_a)";
_env.auto_size:=".XLS.auto_size(_a)";
_env.write_description:=".XLS.write_description(_a)";
_env.write_header:=".XLS.write_header(_a)";
_env.write_row:=".XLS.write_row(_a,_b)";
_env.write_row2:=".XLS.write_row2(_a,_b)";
_env.read_load:=".XLS.read_load(_a,{? params_get().env_xls.DIR_ON_SERVER || 1 || 0 ?})";
_env.read_row:=".XLS.read_row(_a,_b)";
_env.read_id:=".XLS.read_id()";
_env.write_empty_rows:=".XLS.write_empty_rows(_a)";
_env.done:=".XLS.done(_a)";

_env.write_async:="

   {? .ASYNC=0
   || return(1)
   ?};

   _can_continue:=1;
   .ASYNC_LEVEL+=1;
:: bieżący poziom stosu
   _stack_current:=obj_len(form_stack(-1));

:: ile mogą zająć podrzędne wywołania write_async
   _stack_safe:=10;

:: zabezpieczenie na wypadek przekroczenia głębokości rekurencji
   {? _stack_current+_stack_safe>=.FORMULA_RECURSION
   || _can_continue:=0;
      _msg:='Błąd wywołania metody write_async dla: %1. Przekroczono maksymalny poziom rekurencji: %2'[.TAB_HEAD.ID,$.FORMULA_RECURSION];
      {? _stack_current+5<.FORMULA_RECURSION
      || exec('komm_add','#excel_imex',_msg,3,.)
      || choice(_msg,'Merit ERP','INFO')
      ?}
   ?};

   _result:=~~;
   _id:='';
   {? var_pres('_a')=type_of('')
   || _id:=_a
   || _can_continue:=0;
      _msg:='Błąd wywołania metody write_async. Parametr _a (identyfikator imex) musi być podany';
      exec('komm_add','#excel_imex',_msg,3,.)
   ?};
   _ref:=1;
   {? var_pres('_b')>0
   || _ref:=_b
   || _can_continue:=0;
      _msg:='Błąd wywołania metody write_async. Parametr _b (ref rekordu) musi być podany';
      exec('komm_add','#excel_imex',_msg,3,.)
   ?};

   {? _can_continue>0
   || {? type_of(_ref)=type_of(SYSLOG.ref())
      || {? _ref=null()
         ||
::          Jeżeli ref jest nullem to od razu kończę działanie, żeby nie wykonywać
::          niepotrzebnie hektaru kodu (optymalizacja)
            _can_continue:=0
         ?}
      ?}
   ?};
   _tab:=.TAB_HEAD;
   _tab_links:=.TAB_LINKS;

   {? _can_continue>0
   ||
::    Sprawdzam czy jest powiazanie
      _tab_links.cntx_psh();
      _tab_links.index(.NDX_LINKS1);
      _tab_links.prefix(_id,_tab.ID,);
      {? _tab_links.first()=0
      || _can_continue:=0;
         _sect:=exec('komm_sect_head','#excel_imex',.);
         _msg:='Błąd wywołania metody write_async. Nie powiązano definicji, źródło: %1, cel: %2'[_id,_tab.ID];
         exec('komm_add','#excel_imex',_msg,3,.,_sect)
      ?};
      _tab_links.cntx_pop()
   ?};

   {? _can_continue>0
   ||
      _tab.cntx_psh();
      _tab.index(.NDX_HEAD2);
      _tab.prefix(_id,);
      {? _tab.first()
      ||
         _table:=.EXP_TAB;
         _result:=exec('export_main','#excel_imex',.,2,_ref);
         obj_del(.EXP_TAB); .EXP_TAB:=_table
      ||
         {? .SINGLEFIRM=0
         ||
            _sect:=exec('komm_sect_head','#excel_imex',.);
            _msg:='Błąd wywołania metody write_async. Nie znaleziono eksportu o identyfikatorze: %1'[_id];
            exec('komm_add','#excel_imex',_msg,3,.,_sect)
         ?}
      ?};
      _tab.cntx_pop()
   ?};
   _result
";

_env.empty_value:="
   _type:=_a;

   _result:=~~;

   {? _type>0
   || {? _type>0 & _type<=obj_len(.TYPES.default)
      || _result:=.TYPES.default[_type]
      || FUN.info('Nieznany typ: %1'@[$_type])
      ?}
   ?};
   _result
";

_env.add_definition:="
   params_set(params_get());
   _def:=_a;

   {? _def.TAB_IMP=\"\"
   || _def.TAB_IMP:=_def.TABLE
   ?};

   _result:=0;
   {? _def.valid_before()
   || _result:=exec('def2table_head','#excel_imex',_def,.)
   ?};
   _result
";

_env.funpar_chk:="
   params_set(params_get());
   _funpar:=_a;

   _result:=1;
   _tab:=.TAB_FUNPAR;
   _tab.cntx_psh();
   _tab.index(.NDX_FUNPAR1);
   _tab.prefix();
   {? _tab.size()>0
   ||
      {? _funpar<>''
      || _tab.prefix(_funpar,);
         {? _tab.first()=0
         || _result:=0
         ?}
      || _result:=0
      ?}
   ?};
   _tab.cntx_pop();
   _result
";


_env.filter_chk:="
   params_set(params_get());
   _id:=_a;
   _file:=_b;

   _result:=0;
   _tab:=.TAB_FILTER;
   _tab.cntx_psh();
   _tab.index(.NDX_FILTER1);
   _tab.prefix();
   {? _tab.size()>0
   ||
      {? _id<>''
      || _tab.prefix(_id,);
         {? _tab.first()
         || _result:=1
         ?}
      ?};
      {? _result=0 & _file<>''
      || _tab.prefix(_file,);
         {? _tab.first()
         || _result:=1
         ?}
      ?}
   ?};
   _tab.cntx_pop();
   _result
";

_env.add_field:="
   params_set(params_get());
   _def:=_a;
   _result:=exec('obj2table_pos','#excel_imex',_def,.TAB_HEAD.ref(),.);
   {? _result<=0
   || .FIELDS_OK:=0
   ?};
   _result
";
_env.table:="
   .EXP_TAB
";
_env.erase:="
   .TAB_HIST.erase();
   .TAB_ITER.erase();
   .TAB_MEMO_HISTORY.erase();

   _tab_head:=.TAB_HEAD;
   _tab_head.cntx_psh();
   _tab_head.prefix();
   {? _tab_head.first()
   || {!
      |? _tab_head.TIME_ALL:=0;
         _tab_head.TIME_IMP:=0;
         _tab_head.HISTSIZE:=0;

         {? .EXPORT_MODE=2
         ||
            {? var_pres('_content')>100
            || obj_del(_content)
            ?};
            _content:=.STORE[_tab_head.LP];
            {? var_pres('_content')>100
            || _content.erase();
               obj_del(.STORE[_tab_head.LP]);
               .STORE_NDX_REF[_tab_head.LP]:=~~
            ?}
         ?};
         _tab_head.put();
         _tab_head.next()
      !}
   ?};
   _tab_head.cntx_pop();
   _tab_head.get();
   ~~
";

_env.column:="
   _field:=_a;

   _result:='Błędny akronim pola'@;
   _tab_pos:=.TAB_POS;

   _tab_pos.cntx_psh();
   _tab_pos.index(.NDX_POS2);
   _tab_pos.prefix(#.TAB_HEAD.ref(),_field);
   {? _tab_pos.first()
   || _result:=_tab_pos.COLUMN
   ?};
   _tab_pos.cntx_pop();
   _result
";

_env.store_row:="
::  UTW: WH [19.02]
:: OPIS: Zapamiętuje obiekt reprezentujący wiersz w Excelu w wewnętrznej tabeli tymczasowej
::       do późniejszego zapisu w Excel
::       Kontekst pracy - rekord tabeli TAB_HEAD i rekord tabeli_c
::   WE: _a - STRING    - Nazwa pliku
::       _b - obj_new() - obiekt zasilony wartościami
::       _c - TABLE     - Uchwyt do tabeli z której jest realizowany zapis


   _filename:=_a;
   _obj:=_b;
   _table:=_c;
   _tab_head:=.TAB_HEAD;

   _tab:=.STORE[_tab_head.LP];
   {? var_pres('_tab')<100
   ||
::    Tabela zapamiętująca jeszcze nie została utworzona więc ją robię
      _tab:=exec('store_tab','#excel_imex',_table,_obj,.);
      {? var_pres('_tab')>100
      || .STORE[_tab_head.LP]:=_tab;
         .STORE_NDX_REF[_tab_head.LP]:=_tab.ndx_tmp(,,'REFFFFFF',,)
      ?}
   ?};
   exec('store_tab_add','#excel_imex',.,_tab,_obj,_table)
";

_env.store_fix_order:="
::  UTW: WH [23.25]
:: OPIS: Naprawia kolejność do eksportu. Rekordy mogły być wcześniej wypchnięte do eksportu
::       w losowej kolejności przy write_async. Właściwy eksport z dobrym indeksem powinien tą kolejność
::       naprawić
::       Kontekst pracy - rekord tabeli TAB_HEAD i rekord tabeli _c
::   WE: _a - obj_new() - obiekt zasilony wartościami
::       _b - TABLE     - Uchwyt do tabeli tymczasowej z której jest realizowany zapis

   _obj:=_a;
   _table:=_b;
   _tab_head:=.TAB_HEAD;

   _tab:=.STORE[_tab_head.LP];
   _ndx:=.STORE_NDX_REF[_tab_head.LP];
   {? var_pres('_tab')<100
   ||
::    Tabela zapamiętująca jeszcze nie została utworzona więc ją robię
      _tab:=exec('store_tab','#excel_imex',_table,_obj,.);
      {? var_pres('_tab')>100
      || .STORE[_tab_head.LP]:=_tab;
         .STORE_NDX_REF[_tab_head.LP]:=_tab.ndx_tmp(,,'REFFFFFF',,);
         _ndx:=.STORE_NDX_REF[_tab_head.LP]
      ?}
   ?};
   exec('store_tab_put','#excel_imex',.,_tab,_ndx,_table)
";

_env.add_link:="
::  UTW: WH [19.42]
:: OPIS: Dodaje powiązanie
::   WE: _a - STRING - Identyfikator źródła
::       _b - STRING - Identyfikator celu
::       [_c] - STRING - identyfikator FUNPAR źródła
::       [_d] - STRING - identyfikator FUNPAR celu
::       [_e] - STRING - pochodzenie powiązania
::   WY: 0/1

   _src:=_a;
   _dst:=_b;

   _src_funpar:='';
   {? var_pres('_c')=type_of('')
   || _src_funpar:=_c
   ?};

   _dst_funpar:='';
   {? var_pres('_d')=type_of('')
   || _dst_funpar:=_d
   ?};

   _orgin:='Formuła';
   {? var_pres('_e')=type_of('')
   || _orgin:=_e
   ?};

   _tab:=.TAB_LINKS;
   _tab_hfun:=.TAB_HFUN;

   _result:=1;

   _tab.cntx_psh();
   _tab.index(.NDX_LINKS1);
   _tab.prefix(_src,_dst,);
   {? _tab.first()=0
   || _tab.blank();
      _tab.FROM:=_src;
      _tab.TO:=_dst;
      _tab.ORGIN:=_orgin;
      _tab.F_FUNPAR:=_src_funpar;
      _tab.T_FUNPAR:=_dst_funpar;
      _result:=_tab.add()
   ?};
   _tab.cntx_pop();

   _tab_hfun.cntx_psh();
   _tab_hfun.index(.NDX_HFUN1);
   {? _result>0
   || {? _src<>'' & _src_funpar<>''
      || _tab_hfun.prefix(_src,_src_funpar,);
         {? _tab_hfun.first()=0
         || _tab_hfun.blank();
            _tab_hfun.ID:=_src;
            _tab_hfun.FUNPAR:=_src_funpar;
            _tab_hfun.add()
         ?}
      ?};
      {? _dst<>'' & _dst_funpar<>''
      || _tab_hfun.prefix(_dst,_dst_funpar,);
         {? _tab_hfun.first()=0
         || _tab_hfun.blank();
            _tab_hfun.ID:=_dst;
            _tab_hfun.FUNPAR:=_dst_funpar;
            _tab_hfun.add()
         ?}
      ?}
   ?};
   _tab_hfun.cntx_pop();

   _result
";

_env.chk_links:="
::  UTW: WH [19.42]
:: OPIS: Sprawdza czy linki sa w porzadku - czyli czy zgadzaja sie identyfikatory FUNPAR
::       na linkach i w tabeli .TAB_HEAD
::       Kontekst - pracy - rekord .TAB_HEAD
::   WE: _a - STRING - Identyfikator źródła
::       _b - STRING - Identyfikator celu
::       [_c] - STRING - identyfikator FUNPAR źródła
::       [_d] - STRING - identyfikator FUNPAR celu
::       [_e] - STRING - pochodzenie powiązania
::   WY: 0/1

   _can_continue:=1;
   _result:=0;

   _tab_head:=.TAB_HEAD;
   _my_funpar:=_tab_head.FUNPAR;
   _tab_links:=.TAB_LINKS;
   _tab_links.cntx_psh();

:: Nastepniki
   _tab_links.index(.NDX_LINKS1);
   _tab_links.prefix(_tab_head.ID,);
   {? _tab_links.first()
   || {!
      |?
         {? _my_funpar<>_tab_links.F_FUNPAR
         || _can_continue:=0;
            _sect:=exec('komm_sect_head','#excel_imex',.);
            _msg:='Błąd definicji powiązań. Metoda add_link ma podane błędne identyfikatory FUNPAR (ma: %1, powinno być %2)'[_tab_links.F_FUNPAR,_my_funpar];
            exec('komm_add','#excel_imex',_msg,3,.,_sect)
         ?};
         _tab_links.next()
      !}
   ?};

:: Poprzedniki
   _tab_links.index(.NDX_LINKS2);
   _tab_links.prefix(_tab_head.ID,);
   {? _tab_links.first()
   || {!
      |?
         {? _my_funpar<>_tab_links.T_FUNPAR
         || _can_continue:=0;
            _sect:=exec('komm_sect_head','#excel_imex',.);
            _msg:='Błąd definicji powiązań. Metoda add_link ma podane błędne identyfikatory FUNPAR (ma: %1, powinno być %2)'[_tab_links.T_FUNPAR,_my_funpar];
            exec('komm_add','#excel_imex',_msg,3,.,_sect)
         ?};
         _tab_links.next()
      !}
   ?};
   _tab_links.cntx_pop();

   {? _can_continue>0
   || _result:=1
   ?};
   _result
";

_env.analize_fml:="

   _tresc:=_a;

   _tresc:=|_tresc;

   _tab:=~~;
   {? var_pres('_b')>100
   || _tab:=_b
   || _tab:=tab_tmp(1,'ID','STRING[255]','Identyfikator imex','FILE','STRING[255]','Nazwa pliku')
   ?};

   {? var_pres('_c')>100
   || _visited:=_c
   || _visited:=tab_tmp(2,
         'NAME','STRING[40]','Nazwa formuły',
         'FILE','STRING[30]','Nazwa pliku')
   ?};
   _file:='';
   {? var_pres('_d')=type_of('')
   || _file:=_d
   ?};

   {? _tresc*'\n'
   || _split:=spli_str(_tresc,'\n');
      {! _it:=1..obj_len(_split)
      |! _line:=_split[_it];
         _line:=|_line;
         {? _line<>'' & 1+_line<>':'
         || .analize_line(_line,_tab,_visited,_file)
         ?}
      !}
   || .analize_line(_tresc,_tab,_visited,_file)
   ?};
   _tab
";

_env.analize_line:="

   _line:=_a;
   _tab:=~~;
   {? var_pres('_b')>100
   || _tab:=_b
   || _tab:=tab_tmp(1,'ID','STRING[255]','Identyfikator imex','FILE','STRING[255]','Nazwa pliku')
   ?};

   {? var_pres('_c')>100
   || _visited:=_c
   ||
      _visited:=tab_tmp(2,
         'NAME','STRING[40]','Nazwa formuły',
         'FILE','STRING[30]','Nazwa pliku')
   ?};
   _file:='';
   {? var_pres('_d')=type_of('')
   || _file:=_d
   ?};

   _line:=|_line;

   {? 1+_line<>':'
   ||
      {? _line*'.write_async('>0
      || _split:=spli_str(_line,'.write_async(');
         {? obj_len(_split)>1
         || _part:=_split[2];

            _split2:=spli_str(_part,',');
            {? obj_len(_split2)>0
            || _id:=_split2[1];

               {? _id<>''
               || _id:=gsub(_id,'\\'','');
                  _id:=gsub(_id,'\\\\','');
                  _tab.cntx_psh();
                  _tab.prefix(_id,);
                  {? _tab.first()=0
                  || _tab.blank();
                     _tab.ID:=_id;
                     _tab.FILE:=_file;
                     _tab.add()
                  ?};
                  _tab.cntx_pop()
               ?}
            ?}
         ?}
      ?};

::    Teraz analizujemy formuły podrzędne
      _pod:=exec('parse_exec','#file',_line);
      {? _pod.first()
      || {!
         |?
            _name:=_pod.NAME;
            _file:=_pod.FILE;

            _str:=exec('string_fun','#file',_file,_name);
            {? _str<>''
            ||
               _visited.cntx_psh();
               _visited.prefix(_name,_file,);
               {? _visited.first()=0
               ||
                  _visited.prefix();
                  _visited.blank();
                  _visited.FILE:=_file;
                  _visited.NAME:=_name;
                  _visited.add();
                  .analize_fml(_str,_tab,_visited,_file)
               ?};
               _visited.cntx_pop()
            ?};
            _pod.next()
         !}
      ?}
   ?};
   _tab
";
_env.is_danewzor:="
   .DANEWZOR
";

_env


\export_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia eksport
::   WE: [_a] - obj_new - tablica z kodami z parametryzatora
::       [_b] - INTEGER - 0/[1] - czy wyświetlać dialog z wyborem imex
::       [_c] - STRING - nazwa nagłowka definicji imex, która ma zostać wyświetlona
::                      (w oknie wyboru będzie wyświetlona tylko definicja o podanym ID)
::       [_d] - STRING - nazwa archiwum .zip dla interm, domyślnie Parametryzacja.zip
::       [_e] - INTEGER - [0]/1 - czy export danych wzorcowych
::       [_f] - STRING - identyfikatory imex do których ograniczyć działanie
::       [_g] - STRING - ścieżka katalogu zapisu
::       [_h] - INTEGER - [0]/1 - czy export danych wyłącznie z bieżącej firmy (z wyłączeniem elementów wielofirmowych)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_funpar:=~~;
{? var_pres('_a')>100
|| _funpar:=_a
?};
_dialogs:=1;
{? var_pres('_b')=type_of(0)
|| _dialogs:=_b
?};
_imex_id:='';
{? var_pres('_c')=type_of('')
|| _imex_id:=_c
?};
_zip_name:='';
{? var_pres('_d')=type_of('')
|| _zip_name:=_d
?};
_danewzor:=0;
{? var_pres('_e')=type_of(0)
|| _danewzor:=_e
?};
_filter:=~~;
{? var_pres('_f')=type_of('')
|| _filter:=_f
?};
_dir:='';
{? var_pres('_g')=type_of('')
|| _dir:=_g
?};
_singlefirm:=0;
{? var_pres('_h')=type_of(0)
|| _singlefirm:=_h
?};

_env_xls:=exec('env','#excel_imex');
_env_xls.XLS.XLS.TRYB:=1;
{? _zip_name<>''
|| _env_xls.ZIP_NAME:=_zip_name
?};
{? _dir<>'' & fexists(_dir)=2
|| {? 1+_dir='@'
   || _env_xls.DIR_ON_SERVER:=0;
      _env_xls.DIR:=1-_dir
   || _env_xls.DIR_ON_SERVER:=1;
      _env_xls.DIR:=_dir
   ?}
?};
VAR_DEL.delete('EXCEL_ENV');
EXCEL_ENV:=_env_xls;
params_set('env_xls',_env_xls);
_env_xls.KIND:='EXPORT';
_env_xls.DANEWZOR:=_danewzor;
_env_xls.SINGLEFIRM:=_singlefirm;
{? type_of(_funpar)>100
|| _env_xls.load(_funpar,,_filter);
   _env_xls.select4funpar(_dialogs,_imex_id)
|? _danewzor>0
|| _env_xls.load();
   _tab_head:=_env_xls.TAB_HEAD;
   _tab_head.index(_env_xls.NDX_HEAD1);
   _tab_head.prefix('N',);
   {? _tab_head.first()
   || {!
      |? _can_select:=1;
::         {? _tab_head.ID='B_PROC' & exec('interm','#system')>0
::         || _can_select:=0
::         ?};
         {? _can_select>0
         || _tab_head.SELECTED:='T';
            _tab_head.put()
         ?};
         _tab_head.next()
      !}
   ?};
   exec('export_accept','#excel_imex');
   {? _env_xls.DIR_ON_SERVER=1 & exec('interm','#system')=0
   || obj_del(Xls)
   ?}
|| _env_xls.load(,,_filter);
   _env_xls.select()
?};
VAR_DEL.delete('EXCEL_ENV');
{? FORMULA.f_active() || FORMULA.f_clear() ?};
''


\args_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tablicę nazwaną wypełnianą przez programistów podczas definiowania importu/eksportu
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: obj_new
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;


:: Założenie - pola z dużych liter muszą mieć swoje odzwierciedlenie w strukturze
:: .TAB_HEAD
_result:=obj_new(
::                Środowisko imex
                  'env'
::                Identyfikator imex
                  ,'ID'
::                Nazwa imex
                  ,'NAME'
::                Plik do którego zapisywać
                  ,'FILE'
::                Nazwa arkusza (zakładka w Excel)
                  ,'SHEET'
::                Opis importu
                  ,'DESC'
::                Liczba dodatkowych redagowalnych wierszy
                  ,'ADD_ROWS'
::                Formuła na selekcję rekordów
                  ,'SELECT'
::                Formuła na prefix dla tabeli
                  ,'PREFIX'
::                Uchwyt do eksportowanej tabeli
                  ,'TABLE'
::                Uchwyt do importowanej tabeli
                  ,'TAB_IMP'
::                Pola które będą eksportowane
                  ,'FIELDS'
::                Formuła eksportująca dane
                  ,'EXPORT'
::                Formuła przed importem
                  ,'BEFORE'
::                Formuła importująca dane
                  ,'IMPORT'
::                Formuła po imporcie
                  ,'AFTER'
::                Formuła walidująca dane przed importem
                  ,'VALIDATE'
::                Formuła na szczegóły w komunikatach importu
                  ,'DETAILS'
::                Dziedzina produktowa
                  ,'DOMAIN'
::                Blokada arkusza
                  ,'LOCK'
::                Kod liścia w parametryzacji
                  ,'FUNPAR'
::                Czy ukryty
                  ,'HIDDEN'
::                Czy pomijać definicję przy imporcie bez parametryzacji
::                Definicja zostanie pominięta jeżeli nie podano tablicy z kodami z parametryzatora
                  ,'SKIP'
::                Czy imex wielofirmy
                  ,'MULTIFIR'

::                Metoda dodająca eksport/import do definicji
                  ,'add'
::                Metoda walidująca poprawność pól tego obiektu (typy itp)
                  ,'valid_before'
::                Metoda czyści pola
                  ,'blank'
);
_result.env:=_env;
_result.blank:="
   .ID:='';
   .FILE:='';
   .SHEET:='';
   .DESC:='';
   .ADD_ROWS:=-1;
   .TABLE:=\"\";
   .TAB_IMP:=\"\";
   .PREFIX:=\"\";
   .FIELDS:='';
   .EXPORT:=\"\";
   .SELECT:=\"\";
   .BEFORE:=\"\";
   .IMPORT:=\"\";
   .AFTER:=\"\";
   .VALIDATE:=\"\";
   .DETAILS:=\"\";
   .DOMAIN:='';
   .LOCK:=1;
   .FUNPAR:='';
   .HIDDEN:='N';
   .SKIP:='N';
   .MULTIFIR:='N';
   ~~
";
_result.blank();

_result.add:="
   {? .TAB_IMP=\"\"
   || .TAB_IMP:=.TABLE
   ?};
   .env.add_definition(.)
";
_result.valid_before:="

   _result:=1;
   _sect:=exec('komm_sect_file','#excel_imex',.env);
   {? type_of(.ID)<>type_of('') | .ID=''
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['ID'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   || _lentht_error:=0;
      {? (+.ID)>100
      || _lentht_error:=1
      ?};
      {? _lentht_error>0
      || _msg:='Za długie pole %1 w definicji importu Excel (max %1 znaków)'@['ID','100'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      ?};
      {? (+.ID)<=4 & exec('isDigit','#string',.ID+1)>0
      || _msg:='Identyfikator %1 w definicji importu Excel nie może być mniejszy niż %2 znaków z cyfrą na końcu'@['ID','5'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      ?}
   ?};
   {? type_of(.FILE)<>type_of('') | .FILE=''
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['FILE'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.SHEET)<>type_of('') | .SHEET=''
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['SHEET'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   || _lentht_error:=0;
      _loc_error:=0;
      {? .SHEET*'='>0
      || _split:=spli_str(.SHEET,'=');
         {? +(_split[1])>31
         || _lentht_error:=1
         ?};

         {? _split[2]*','>0
         || _spli_loc:=spli_str(_split[2],',');
            {? _spli_loc[1]='0' | _spli_loc[2]='0'
            || _loc_error:=1
            ?}
         || _loc_error:=1
         ?}
      ||
         {? (.SHEET)>31
         || _lentht_error:=1
         ?}
      ?};
      {? _lentht_error>0
      || _msg:='Za długie pole %1 w definicji importu Excel (max %2 znaków)'@['SHEET','31'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      ?};
      {? _loc_error>0
      || _msg:='Nieprawidłowe pole %1 w definicji importu Excel (lokalizacja tabeli musi być różna niż 0,0)'@['SHEET'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      ?}
   ?};

   {? type_of(.DESC)<>type_of('') | .DESC=''
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['DESC'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.ADD_ROWS)<>type_of(0)
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['ADD_ROWS'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   || {? .ADD_ROWS<0 & .ADD_ROWS<>-1
      || _msg:='Nieprawidłowe pole %1 w definicji importu Excel (wartość musi być nieujemna)'@['ADD_ROWS'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      ?}
   ?};
   {? type_of(.PREFIX)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['PREFIX'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? .env.TAB_IMP_CHK>0
   ||
      {? type_of(.TAB_IMP)=type_of(\"\") & .TAB_IMP=\"\"
      || _msg:='Nieprawidłowe pole %1 w definicji importu Excel (pusta formuła)'@['TAB_IMP'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      |? type_of(.TAB_IMP)=type_of(obj_new(1))
      || {! _it:=1..obj_len(.TAB_IMP)
         |! _tab_imp:=.TAB_IMP[_it];
            {? type_of(_tab_imp)<>type_of(\"\") | _tab_imp=\"\"
            || _msg:='Nieprawidłowe pole %1 w definicji importu Excel (pusta formuła), element tablicy: %2'@['TAB_IMP',$_it];
               exec('komm_add','#excel_imex',_msg,3,.env,_sect);
               _result:=0
            ?}
         !}
      |? type_of(.TAB_IMP)<>type_of(\"\") & type_of(.TAB_IMP)<>type_of(obj_new(1))
      || _msg:='Nieprawidłowe pole %1 w definicji importu Excel (błędny typ)'@['TAB_IMP'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      ?}
   ?};
   {? type_of(.TABLE)<>type_of(\"\") | .TABLE=\"\"
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['TABLE'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ||
      _fml:=.TABLE;
      _table1:=(_fml)(1,1);
      _table2:=(_fml)(2,1);

      {? var_pres('_table1')>100
      || _temporary:=exec('is_temporary','#table',_table1);

         {? _temporary>0
         || _req_fields:=0;
            {? var_pres('UIDREF',_table1)=27
            || _req_fields:=1
            ?};
            {? _temporary>0 & _req_fields=0
            ||
               _msg:='Tabela tymczasowa zwracana przez formułę: %1 musi mieć pole typu: %2 o akronimie: %3'['TABLE','STRING','UIDREF'];
               exec('komm_add','#excel_imex',_msg,3,.env,_sect);
               _result:=0
            ?}
         ?};
         {? _result>0 & .env.TAB_IMP_CHK>0 & _temporary>0 & .TABLE=.TAB_IMP & .IMPORT<>\"\"
         || _msg:='Eksport korzysta z tabeli tymczasowej, konieczne jest zdefiniowanie pola: %1'@['TAB_IMP'];
            exec('komm_add','#excel_imex',_msg,3,.env,_sect);
            _result:=0
         ?}
      ?};
      {? var_pres('_table2')>100
      || _temporary:=exec('is_temporary','#table',_table2);

         {? _temporary>0
         || _req_fields:=0;
            {? var_pres('UIDREF',_table2)=27
            || _req_fields:=1
            ?};
            {? _temporary>0 & _req_fields=0
            ||
               _msg:='Tabela tymczasowa zwracana przez formułę: %1 musi mieć pole typu: %2 o akronimie: %3'['TABLE','STRING','UIDREF'];
               exec('komm_add','#excel_imex',_msg,3,.env,_sect);
               _result:=0
            ?}
         ?};

         {? _result>0 & .env.TAB_IMP_CHK>0 & _temporary>0 & .TABLE=.TAB_IMP & .IMPORT<>\"\"
         || _msg:='Eksport korzysta z tabeli tymczasowej, konieczne jest zdefiniowanie pola: %1'@['TAB_IMP'];
            exec('komm_add','#excel_imex',_msg,3,.env,_sect);
            _result:=0
         ?}
      ?}
   ?};

   {? .env.TAB_IMP_CHK>0 & .IMPORT<>\"\"
   ||
      {? _result>0
      || _fml:=.TAB_IMP;
         _tab_imp1:=(_fml)(1,1);
         _tab_imp2:=(_fml)(2,1);

         {? var_pres('_tab_imp1')>100
         || _temporary:=exec('is_temporary','#table',_tab_imp1);
            {? _temporary>0
            || _msg:='Tabela zwracana przez formułę: %1 nie może być tymczasowa'['TAB_IMP'];
               exec('komm_add','#excel_imex',_msg,3,.env,_sect);
               _result:=0
            ||
               {? exec('is_fun','#file','#to_string',2-(!_tab_imp1))
               || ~~
               |? exec('is_fun','#file','#to_string_auto',2-(!_tab_imp1))
               || ~~
               ||
                  _what:='';
                  {? .TAB_IMP<>.TABLE
                  || _what:='TAB_IMP'
                  || _what:='TABLE'
                  ?};
                  _msg:='Tabela zwracana przez formułę: %1 musi mieć swoją formułę w pliku: %2'[_what,'#to_string'];
                  exec('komm_add','#excel_imex',_msg,3,.env,_sect);
                  _result:=0
               ?}
            ?}
         ?};
         {? _result>0 & var_pres('_tab_imp2')>100
         || _temporary:=exec('is_temporary','#table',_tab_imp2);
            {? _temporary>0
            || _msg:='Tabela zwracana przez formułę: %1 nie może być tymczasowa'['TAB_IMP'];
               exec('komm_add','#excel_imex',_msg,3,.env,_sect);
               _result:=0
            ||
               {? exec('is_fun','#file','#to_string',2-(!_tab_imp2))
               || ~~
               |? exec('is_fun','#file','#to_string_auto',2-(!_tab_imp2))
               || ~~
               ||
                  _what:='';
                  {? .TAB_IMP<>.TABLE
                  || _what:='TAB_IMP'
                  || _what:='TABLE'
                  ?};
                  _msg:='Tabela zwracana przez formułę: %1 musi mieć swoją formułę w pliku: %2'[_what,'#to_string'];
                  exec('komm_add','#excel_imex',_msg,3,.env,_sect);
                  _result:=0
               ?}
            ?}
         ?}
      ?}
   ?};

   {? type_of(.FIELDS)<>type_of(\"\") | .FIELDS=\"\"
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['TABLE'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.SELECT)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['SELECT'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.EXPORT)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['EXPORT'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.BEFORE)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['BEFORE'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.IMPORT)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['IMPORT'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.AFTER)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['AFTER'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.VALIDATE)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['VALIDATE'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.DETAILS)<>type_of(\"\")
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['DETAILS'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.LOCK)<>type_of(0)
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['LOCK'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   || {? .LOCK<>0 & .LOCK<>1
      || _msg:='Nieprawidłowe pole %1 w definicji importu Excel (wartość musi być %2 albo %3)'@['LOCK','0','1'];
         exec('komm_add','#excel_imex',_msg,3,.env,_sect);
         _result:=0
      ?}
   ?};
   {? type_of(.DOMAIN)<>type_of('')
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['DOMAIN'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.FUNPAR)<>type_of('')
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['FUNPAR'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.HIDDEN)<>type_of('')
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['HIDDEN'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   {? type_of(.SKIP)<>type_of('')
   || _msg:='Nieprawidłowe pole %1 w definicji importu Excel'@['SKIP'];
      exec('komm_add','#excel_imex',_msg,3,.env,_sect);
      _result:=0
   ?};
   _result
";
_result


\komm_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dodaje komunikat podczas eksportu/importu
::       Komunikaty będą miały strukturę:
::       - Rodzaj (Błąd, Ostrzeżenie, Informacja)
::          |- (Opcjonalna własna sekcja)
::             |- treść
::   WE: _a - STRING - treść komunikatu
::       _b - INTEGER - rodzaj komunikatu: [1] - informacja
::                                          2 - ostrzeżenie
::                                          3 - błąd
::                                          4 - błąd obsługi arkuszy Excel
::       [_c] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_d] - STRING - dodatkowa sekcja w której umieścić komunikat
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_msg:=_a;
_kind:=1;
{? var_pres('_b')=type_of(0)
|| _kind:=_b
?};
{? var_pres('_c')>100
|| _env:=_c
|| _env:=params_get().env_xls
?};

_sect_own:='';
{? var_pres('_d')=type_of('')
|| _sect_own:=_d
?};

_komm:=_env.KOMM;
_icon:=19;

{? _kind=1
|| _sect:='Informacja'@
|? _kind=2
|| _sect:='Ostrzeżenie'@;
   _icon:=9
|? _kind=3
|| _sect:='Błąd'@;
   _icon:=3
|? _kind=4
|| _sect:='Błąd obsługi arkuszy Excel'@;
   _icon:=81
?};

{? _komm.find_msg(_sect) || _komm.set_root(_sect) || _komm.sect_beg(_sect) ?};
{? _sect_own<>''
|| {? _komm.find_msg(_sect_own) || _komm.set_root(_sect_own) || _komm.sect_beg(_sect_own) ?}
?};
_komm.add(_msg,_icon,,1);
_komm.sect_end();
{? _sect_own<>''
|| _komm.sect_end()
?};
~~


\tab_head
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - nagłówki definicji
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'LP'      ,'INTEGER'     ,'Liczba porządkowa'@
               ,'ID'      ,'STRING[100]' ,'Identyfikator imex'@
               ,'FILE'    ,'STRING[255]' ,'Nazwa pliku'@
               ,'NAME'    ,'STRING[255]' ,'Nazwa imex'@
               ,'SHEET'   ,'STRING[255]' ,'Arkusz'@
               ,'DOMAIN'  ,'STRING[255]' ,'Dziedzina'@
               ,'FUNPAR'  ,'STRING[255]' ,'Kod liścia w parametryzacji'@
               ,'FUNPAROK','STRING[1]'   ,'Czy spełnia listę funparów'
               ,'HIDDEN'  ,'STRING[1]'   ,'Ukryty?'@
               ,'ROWSTART','REAL'        ,'Wiersz startowy'@
               ,'COLUMN'  ,'REAL'        ,'Kolumna startowa'@
               ,'DESC'    ,'SYS_MEMO'    ,'Opis'@
               ,'FIELDS'  ,'SYS_MEMO'    ,'Pola'@
               ,'PREFIX'  ,'SYS_MEMO'    ,'Formuła na prefix'@
               ,'TABLE'   ,'SYS_MEMO'    ,'Formuła na tabelę'@
               ,'TAB_IMP'   ,'SYS_MEMO'    ,'Formuła na importowaną tabelę'@
               ,'SELECT'  ,'SYS_MEMO'    ,'Formuła na wybór rekordów'@
               ,'EXPORT'  ,'SYS_MEMO'    ,'Formuła na eksport'@
               ,'BEFORE'  ,'SYS_MEMO'    ,'Formuła przed importem'@
               ,'IMPORT'  ,'SYS_MEMO'    ,'Formuła na import'@
               ,'AFTER'   ,'SYS_MEMO'    ,'Formuła po imporcie'@
               ,'VALIDATE','SYS_MEMO'    ,'Formuła na walidację'@
               ,'DETAILS' ,'SYS_MEMO'    ,'Formuła na szczegóły w komunikatach'@
               ,'SELECTED','STRING[1]'   ,'Czy wybrano?'@
               ,'CAN_SEL' ,'STRING[1]'   ,'Wybór dostępny?'@
               ,'HAS_SEL' ,'STRING[1]'   ,'Elementy wybrane?'@
               ,'DONE'    ,'STRING[1]'   ,'Czy wykonano?'@
               ,'TIME_IMP','REAL'        ,'Czas wywołań implementacji'@
               ,'TIME_ALL','REAL'        ,'Czas całkowity'@
               ,'TIME_JM' ,'STRING[10]'  ,'Jednostka miary dla czasów'@
               ,'HISTSIZE','INTEGER'     ,'Liczba komunikatów w historii'@
               ,'ADD_ROWS','INTEGER'     ,'Liczba dodatkowych redagowalnych wierszy'@
               ,'LOCK'    ,'INTEGER'     ,'Blokada arkusza'@
               ,'LAST'    ,'INTEGER'     ,'Znacznik, czy jest to ostatni zapis dla danego pliku (%1)'@['FILE']
               ,'MULTIFIR','STRING[1]'   ,'Czy imex wielofirmowy?'@
               );
_env.NDX_HEAD1:=_tab.ndx_tmp(,,'HIDDEN',,,'LP',,,'ID',,);
_env.NDX_HEAD2:=_tab.ndx_tmp(,,'ID',,);
_env.NDX_HEAD3:=_tab.ndx_tmp(,,'SELECTED',,,'LP',,);
_env.NDX_HEAD4:=_tab.ndx_tmp(,,'DONE',,,'LP',,);
_env.NDX_HEAD5:=_tab.ndx_tmp(,,'FUNPAROK',,,'LP',,);
_env.NDX_HEAD6:=_tab.ndx_tmp(,,'FILE',,,'SELECTED',,,'LP',,);
_env.NDX_HEAD7:=_tab.ndx_tmp(,,'FILE',,,'SHEET',,);
_env.NDX_HEAD8:=_tab.ndx_tmp(,,'LP',,);
_env.NDX_HEAD9:=_tab.ndx_tmp(,,'FILE',,,'LP',,);
_env.NDX_HEAD10:=_tab.ndx_tmp(,,'FUNPAR',,);
_tab


\tab_pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - pozycje definicji
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'HEAD'    ,'INTEGER','#_tab.ref() rekordu nagłówkowego'
               ,'LP'      ,'REAL' ,'Liczba porządkowa'
               ,'FIELD'   ,'STRING[255]' ,'Akronim pola w MacroBASE'
               ,'COLUMN'  ,'STRING[255]' ,'Nazwa kolumny w Excel'
               ,'EDITABLE','INTEGER'     ,'Czy kolumna edytowalna'
               ,'COLOR'   ,'STRING[255]' ,'Kolor kolumny'
               ,'DESC'    ,'SYS_MEMO'    ,'Opis'
               ,'TYPE'    ,'INTEGER'     ,'Typ'
               ,'DEC'     ,'INTEGER'     ,'Liczba miejsc dziesiętnych (dla liczb)'
               ,'EXCEL_ID','STRING[255]' ,'Identyfikator kolumny dla Excel'
               );
_env.NDX_POS1:=_tab.ndx_tmp(,,'HEAD',,,'LP',,);
_env.NDX_POS2:=_tab.ndx_tmp(,,'HEAD',,,'FIELD',,);
_env.NDX_POS3:=_tab.ndx_tmp(,,'HEAD',,,'COLUMN',,);
_tab


\tab_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - wybrane do eksportu rekordy
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'ID'     ,'STRING[255]','Identyfikator imex'
               ,'LP'      ,'REAL' ,'Liczba porządkowa'
               ,'REF'     ,'STRING[16]' ,'Ref zaznaczonego rekordu'
               );
_env.NDX_SEL1:=_tab.ndx_tmp(,,'ID',,,'LP',,);
_env.NDX_SEL2:=_tab.ndx_tmp(,,'ID',,,'REF',,);
_tab


\tab_iter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - techniczne liczniki do zapisu
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'HEAD'    ,'INTEGER','#_tab.ref() rekordu nagłówkowego'
               ,'FILE'    ,'STRING[255]' ,'Nazwa pliku'
               ,'DESC_OK' ,'INTEGER'     ,'Czy opis zakładki już zapisany'
               ,'HEAD_OK' ,'INTEGER'     ,'Czy nagłówki kolumn już zapisane'
               ,'ROWSTART','REAL'        ,'Wiersz startowy'@
               ,'ROWNOW'  ,'REAL'        ,'Wiersz aktualny'@
               ,'COLUMN'  ,'REAL'        ,'Kolumna startowa'@
               ,'SHEET'   ,'STRING[255]' ,'Nazwa zakładki'
               ,'ADD_ROWS','INTEGER'     ,'Liczba dodatkowych redagowalnych wierszy'
               ,'POSSIZE' ,'INTEGER'     ,'Liczba kolumn'
               ,'ID'      ,'STRING[100]' ,'Identyfikator imex'
               ,'LOCK'    ,'INTEGER'     ,'Blokada arkusza'
               );
_env.NDX_ITER1:=_tab.ndx_tmp(,,'HEAD',,,'FILE',,);
_env.NDX_ITER2:=_tab.ndx_tmp(,,'FILE',,);
_tab


\tab_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - historia exportu
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_b] - INTEGER - czy tabela ma przeżyć transakcję, jeśli nie podane to zależne
::                       od tego czy w środowisku są włączone transakcje
::       [_c] - INTEGER - czy tworzyć indeksy tymczasowe i przypinać je do środowiska
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_transactions:=_env.TRANSACTIONS;
{? var_pres('_b')=type_of(0)
|| _transactions:=_b
?};
_ndx:=1;
{? var_pres('_c')=type_of(0)
|| _ndx:=_c
?};

{? _transactions>0
|| _tab:=tab_tmp_out_tr( 2
                  ,'REF'       ,'STRING[100]','Ref lub uidref wyeksportowanego rekordu'
                  ,'RESWRITE'  ,'REAL'       ,'Wynik metody zapisu do Excel'
                  ,'RESVALID'  ,'REAL'       ,'Wynik walidatora'
                  ,'MESSAGE'   ,'SYS_MEMO'   ,'Komunikat'@
                  ,'LINE'      ,'STRING[255]','Pierwsza linia komunikatu'
                  ,'ID'        ,'STRING[100]','Identyfikator imex'
                  ,'FILE'      ,'STRING[255]','Nazwa pliku'
                  ,'SHEET'     ,'STRING[255]','Zakładka'
                  ,'ROW'       ,'INTEGER'    ,'Wiersz'
                  ,'LP'        ,'REAL'       ,'Liczba porządkowa'
                  ,'MOD'       ,'STRING[20]' ,'Identyfikator modyfikacji (put,add)'
                  ,'MOD_ACR'   ,'STRING[8]'  ,'Akronim tabeli którą modyfikowano'
                  ,'IS_MOD'    ,'INTEGER'    ,'Czy zapis o zmianach w rekordach'
                  ,'EXPORTED'  ,'STRING[1]'  ,'Czy rekord wyeksportowano'
                  ,'DETAILS'   ,'INTEGER'    ,'Czy dla rekordu będzie dostępna akcja szczegóły'
                  ,'IDADD'     ,'IDADD'      ,'Identyfikator'
                  ,'ID_GRP'    ,'STRING[50]' ,'Wspólny identyfikator grupy rekordów'
                  ,'UIDREF'    ,'STRING[50]' ,'Identyfikator'
                  )
|| _tab:=tab_tmp( 2
                  ,'REF'       ,'STRING[100]','Ref lub uidref wyeksportowanego rekordu'
                  ,'RESWRITE'  ,'REAL'       ,'Wynik metody zapisu do Excel'
                  ,'RESVALID'  ,'REAL'       ,'Wynik walidatora'
                  ,'MESSAGE'   ,'SYS_MEMO'   ,'Komunikat'@
                  ,'LINE'      ,'STRING[255]','Pierwsza linia komunikatu'
                  ,'ID'        ,'STRING[100]','Identyfikator imex'
                  ,'FILE'      ,'STRING[255]','Nazwa pliku'
                  ,'SHEET'     ,'STRING[255]','Zakładka'
                  ,'ROW'       ,'INTEGER'    ,'Wiersz'
                  ,'LP'        ,'REAL'       ,'Liczba porządkowa'
                  ,'MOD'       ,'STRING[20]'  ,'Identyfikator modyfikacji (put,add)'
                  ,'MOD_ACR'   ,'STRING[8]'  ,'Akronim tabeli którą modyfikowano'
                  ,'IS_MOD'    ,'INTEGER'    ,'Czy zapis o zmianach w rekordach'
                  ,'EXPORTED'  ,'STRING[1]'  ,'Czy rekord wyeksportowano'
                  ,'DETAILS'   ,'INTEGER'    ,'Czy dla rekordu będzie dostępna akcja szczegóły'
                  ,'IDADD'     ,'IDADD'      ,'Identyfikator'
                  ,'ID_GRP'    ,'STRING[50]' ,'Wspólny identyfikator grupy rekordów'
                  ,'UIDREF'    ,'STRING[50]' ,'Identyfikator'
                  )
?};
{? _ndx>0
|| _env.NDX_HIST1:=_tab.ndx_tmp(,,'REF',,,'ID',,,'RESWRITE',,);
   _env.NDX_HIST2:=_tab.ndx_tmp(,,'EXPORTED',,,'ID',,,'LP',,);
   _env.NDX_HIST3:=_tab.ndx_tmp(,,'FILE',,,'LP',,);
   _env.NDX_HIST4:=_tab.ndx_tmp(,,'REF',,,'ID',,,'MOD',,);
   _env.NDX_HIST5:=_tab.ndx_tmp(,,'IS_MOD',,);
   _env.NDX_HIST6:=_tab.ndx_tmp(,,'ID',,);
   _env.NDX_HIST7:=_tab.ndx_tmp(,,'ID_GRP',,)
?};
_tab


\tab_links
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - powiązania definicji imex
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'FROM'    ,'STRING[255]' ,'Identyfikator zrodla'
               ,'TO'      ,'STRING[255]' ,'Identyfikator celu'
               ,'ORGIN'   ,'STRING[20]' ,'Pochodzenie powiązania'
               ,'F_FUNPAR','STRING[255]' ,'Identyfikator FUNPAR zrodla'
               ,'T_FUNPAR','STRING[255]' ,'Identyfikator FUNPAR celu'
               );
_env.NDX_LINKS1:=_tab.ndx_tmp(,,'FROM',,,'TO',,);
_env.NDX_LINKS2:=_tab.ndx_tmp(,,'TO',,,'FROM',,);
_env.NDX_LINKS3:=_tab.ndx_tmp(,,'ORGIN',,);
_tab


\win_export_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy okno tymczasowe
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=_a;
_tab:=_env.TAB_HEAD;

_sel:=_tab.mk_sel(_env.tit_export,'P',,'#xls_export_nag',,,,,'U',,,,,'html_maximized');
_tab.win_fld(_sel,,'SELECTED',,,,,,'Zaznaczony?'@,,'Czy wybrano element do eksportu? (T/N)'@,2,,"'T'","'N'",,'mobile_visible=1');
_tab.win_fld(_sel,,'DOMAIN',,,10,,,'Dziedzina'@,,'Dziedzina produktowa'@);
_tab.win_fld(_sel,,'FILE',,,30,,,'Plik'@,,'Nazwa pliku'@,,,,,,'mobile_visible=1');
::_tab.win_fld(_sel,,'SHEET',,,40,,,'Arkusz'@,,'Nazwa arkusza w Excel'@);
_tab.win_fld(_sel,,'ID',,,5,,,'Identyfikator'@,,'Identyfikator eksportu'@,,,,,,'mobile_visible=1,mobile_header=1');
_tab.win_fld(_sel,,'NAME',,,40,,1,'Nazwa'@,,'Nazwa eksportu'@,,,,,,'mobile_visible=1');
_tab.win_fld(_sel,,'HISTSIZE',,,10,,1,'Ilość komunikatów'@,,'Ilość komunikatów w historii'@);
_tab.win_fld(_sel,,'TIME_IMP',,,-10,5,1,'Czas formuł eksportujących'@,,'Czas formuł z implementacji'@);
_tab.win_fld(_sel,,'TIME_ALL',,,-10,5,1,'Czas trwania'@,,'Czas trwania'@);
_tab.win_fld(_sel,,'TIME_JM',,,-5,,1,'jm'@,,'Jednostka miary'@);
_tab.win_fld(_sel,,'CAN_SEL',,,-6,,,'Wybór dostępny?'@,,'Czy zdefiniowano obsługę wybierania elementów (T/N)'@,2,,"'T'","'N'");
_tab.win_fld(_sel,,'HAS_SEL',,,-6,,,'Elementy wybrane?'@,,'Czy wybrano ręcznie elementy do eksportu? (T/N)'@,2,,"'T'","'N'");

_ff:="{? fld()=0 || 'empty=1' || 'empty=0' ?}";
_tab.fld_fml('TIME_IMP','DISPLAY_FORMAT',_ff);
_tab.fld_fml('TIME_ALL','DISPLAY_FORMAT',_ff);
_tab.fld_fml('HISTSIZE','DISPLAY_FORMAT',_ff);
:: Zaznacz
_fb:="
   _tab:=cur_tab();
   _tab.SELECTED:='T';
   _tab.put();
   1
";
_gr1:="
   1
";
_gr2:="
   ~~
";
_tab.win_act(_sel,,'Formuła','&Zaznacz'@@,,'Zaznacz element'@,_fb,,,1,_gr1,_gr2,'Z');

:: Odznacz
_fb:="
   _tab:=cur_tab();
   _tab.SELECTED:='N';
   _tab.put()
";
_tab.win_act(_sel,,'Formuła','&Odznacz'@@,,'Odznacz element'@,_fb,,,1,,,'O');

:: Akceptuj
_fb:="
   _env:=params_get().env_xls;
   _env.TAB_HEAD.cntx_psh();
   params_exec('export_accept','#excel_imex');
   _env.TAB_HEAD.cntx_pop();
   FUN.prg_stop()
";
_tab.win_act(_sel,,'Formuła','&Eksportuj'@@,,,_fb,,,,,,'A');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=bottom,align=end'['&Eksportuj'@],'menu:A',,,,,,'noempty');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=bottom,align=end'['A&nuluj'@],'key:Esc');


:: Pola
_fb:="
   params_exec('select_pos','#excel_imex')
";
_tab.win_act(_sel,,'Formuła','&Pola'@@,,'Wyświetla pola definicji'@,_fb,,,1,,,'P');

:: Komunikaty
_fb:="
   params_exec('select_hist','#excel_imex')
";
_tab.win_act(_sel,,'Formuła','Ko&munikaty'@@,,'Wyświetla komunikaty powstałe podczas eksportu'@,_fb,,,1,,,'M');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=right,align=begin'['Ko&munikaty'@],'menu:M',,,,,,'noempty');

:: Wybór elementów
_fb:="
   params_exec('select_elements','#excel_imex')
";
_tab.win_act(_sel,,'Formuła','&Wybór elementów'@@,,'Pozwala wybrać rekordy, które będą eksportowane'@,_fb,,,0,,,'W');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=right,align=begin'['&Wybór elementów'@],'menu:W',,,,,,'noempty');

:: Rekord
_fb:="
   _lastdraw:=1;
   {? var_pres('_a')=type_of(0)
   || _lastdraw:=_a
   ?};
   params_exec('rek_head_exp','#excel_imex',_lastdraw)
";
_tab.win_act(_sel,,'Rekord',,,,_fb);

:: Bufor
{? _env.EXPORT_MODE=2
||
   _fb:="
      _env:=params_get().env_xls;
      _tab_head:=_env.TAB_HEAD;

      _store:=_env.STORE[_tab_head.LP];
      {? var_pres('_store')>100
      || exec('select','#table',_store)
      ?}
   ";
   _tab.win_act(_sel,,'Formuła','&Bufor'@@,,'Wyświetla bufor eksportu'@,_fb,,,1,,,'B');
   ~~
?};

:: Zakres podstawowy
{? _env.FUNPAR=0
||
   _fb:="
      _env:=params_get().env_xls;
      params_exec('export_basic_range','#excel_imex')
   ";
   _tab.win_act(_sel,,'Formuła','Zakres po&dstawowy'@@,,'Eksportuje zakres podstawowy'@,_fb,,,1,,,'D')
?};

::_fb:="
::   _env:=params_get().env_xls;
::   _tab_head:=_env.TAB_HEAD;
::   _tab_head.prefix();
::   _fml:=_tab_head.memo_txt(,1,'EXPORT');
::   _tab:=_env.analize_fml(_fml);
::   exec('select','#table',_tab)
::";
::_tab.win_act(_sel,,'Formuła','Test'@@,,'Test'@,_fb,,,1,,,'T');


_fb:="
   _env:=params_get().env_xls;
   params_exec('select_links','#excel_imex',_env);
   ~~
";
_tab.win_act(_sel,,'Formuła','Pow&iązania'@@,,'Wyświetla listę wszystkich powiązań definicji imex'@,_fb,,,1,,,'I');

{? __develop
||
   _fb:="
      _env:=params_get().env_xls;
      _names:=obj_new('NAME1','NAME2');
      _names.NAME1:='Domyślny'@;
      _names.NAME2:='Wszystkie'@;
      _values:=obj_new('VAL1','VAL2');
      _values.VAL1:='W';
      _values.VAL2:='A';
      _edit:=exec('edit_radiobutton','#edit','W','Zakres widoczności elementów'@,_names,_values);
      {? type_of(_edit)=type_of('')
      || {? _edit='W'
         || _env.TAB_HEAD.index(_env.NDX_HEAD1);
            _env.TAB_HEAD.prefix('N')
         |? _edit='A'
         || _env.TAB_HEAD.index(_env.NDX_HEAD8);
            _env.TAB_HEAD.prefix()
         ?}
      ?};
      ~~
   ";
   _tab.win_act(_sel,,'Formuła','Zak&res'@@,,'Zakres widoczności elementów'@,_fb,,,1,,,'R')
?};

:: Legenda
::_fb:="exec('legenda','color','@EXCEL_IMEX#01')";
::_tab.win_act(_sel,,'Formuła','Legenda'@@,,,_fb);

:: Szukaj
::_tab.win_act(_sel,,'Szukaj');

:: Kolejność
_tab.win_act(_sel,,'Kolejność');

:: Wyświetl
_fb:="
   params_exec('head_display','#excel_imex')
";
_tab.win_act(_sel,,'Wyświetl',,,,_fb);

_sel


\win_import_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy okno tymczasowe
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=_a;
_tab:=_env.TAB_HEAD;

_sel:=_tab.mk_sel(_env.tit_import,'P',,'#xls_import_nag',,,,,'U',,,,,'html_maximized');
::_tab.win_fld(_sel,,'DONE',,,,,1,'Wykonano?'@,,'Czy znaleziono zawartość w Excel i wykonano import (T/N)'@,2,,"'T'","'N'");
_tab.win_fld(_sel,,'DOMAIN',,,10,,,'Dziedzina'@,,'Dziedzina produktowa'@);
_tab.win_fld(_sel,,'FILE',,,30,,,'Plik'@,,'Nazwa pliku'@,,,,,,'mobile_visible=1');
::_tab.win_fld(_sel,,'SHEET',,,40,,,'Arkusz'@,,'Nazwa arkusza w Excel'@);
_tab.win_fld(_sel,,'ID',,,5,,,'Identyfikator'@,,'Identyfikator eksportu'@,,,,,,'mobile_visible=1,mobile_header=1');
_tab.win_fld(_sel,,'NAME',,,40,,1,'Nazwa'@,,'Nazwa eksportu'@,,,,,,'mobile_visible=1');
_tab.win_fld(_sel,,'HISTSIZE',,,10,,1,'Ilość komunikatów'@,,'Ilość komunikatów w historii'@,,,,,,'mobile_visible=1');
_tab.win_fld(_sel,,'TIME_IMP',,,-10,5,1,'Czas formuł importujących'@,,'Czas formuł z implementacji'@);
_tab.win_fld(_sel,,'TIME_ALL',,,-10,5,1,'Czas trwania'@,,'Czas trwania'@);
_tab.win_fld(_sel,,'TIME_JM',,,-5,,1,'jm'@,,'Jednostka miary'@);

_ff:="{? fld()=0 || 'empty=1' || 'empty=0' ?}";
_tab.fld_fml('TIME_IMP','DISPLAY_FORMAT',_ff);
_tab.fld_fml('TIME_ALL','DISPLAY_FORMAT',_ff);
_tab.fld_fml('HISTSIZE','DISPLAY_FORMAT',_ff);
:: Pola
_fb:="
   params_exec('select_pos','#excel_imex')
";
_tab.win_act(_sel,,'Formuła','&Pola'@@,,'Wyświetla pola definicji'@,_fb,,,1,,,'P');

:: Komunikaty
_fb:="
   params_exec('select_hist','#excel_imex')
";
_tab.win_act(_sel,,'Formuła','Ko&munikaty'@@,,'Wyświetla komunikaty powstałe podczas importu'@,_fb,,1,0,,,'M');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=right,align=begin'['Ko&munikaty'@],'menu:M',,,,,,'noempty');

_fb:="
   params_exec('select_hist','#excel_imex',,1)
";
_tab.win_act(_sel,,'Formuła','W&szystkie komunikaty'@@,,'Wyświetla wszystkie komunikaty powstałe podczas importu'@,_fb,,,,,,'S');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=right,align=begin'['W&szystkie komunikaty'@],'menu:S',,,,,,'noempty');

_fb:="
   params_exec('file_imp_hist','#excel_imex')
";
_tab.win_act(_sel,,'Formuła','Zapisz k&omunikaty'@@,,'Zapisuje wszystkie komunikaty do pliku MS Excel'@,_fb,,,,,,'O');
_tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=right,align=begin'['Zapisz k&omunikaty'@],'menu:O',,,,,,'noempty');

:: Rekord
_fb:="
   _lastdraw:=1;
   {? var_pres('_a')=type_of(0)
   || _lastdraw:=_a
   ?};
   params_exec('rek_head_imp','#excel_imex',_lastdraw)
";
_tab.win_act(_sel,,'Rekord',,,,_fb);

:: Legenda
::_fb:="exec('legenda','color','@EXCEL_IMEX#01')";
::_tab.win_act(_sel,,'Formuła','Legenda'@@,,,_fb);

:: Szukaj
::_tab.win_act(_sel,,'Szukaj');

:: Kolejność
_tab.win_act(_sel,,'Kolejność');

:: Wyświetl
_fb:="
   params_exec('head_display','#excel_imex')
";
_tab.win_act(_sel,,'Wyświetl',,,,_fb);

_sel


\win_export_pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy okno tymczasowe
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=_a;
_tab:=_env.TAB_POS;

_sel:=_tab.mk_sel(_env.tit_pos,'P',,'#xls_export_pos',,,,,'U');

_tab.win_fld(_sel,,'FIELD',,,40,,,'Pole w tabeli'@,,'Akronim pola w tabeli'@);
_tab.win_fld(_sel,,'COLUMN',,,40,,,'Kolumna Excel'@,,'Nazwa kolumny w Excel'@);
_tab.win_fld(_sel,,'COLOR',,,20,,,'Kolor kolumny'@,,'Domyślny kolor komórek w Excel'@);
_tab.win_fld(_sel,,'EDITABLE',,,,,1,'Edytowalne?'@,,'Czy kolumna w Excel będzie edytowalna? (0/1)'@,2,,"1","2");

_fb:="
   _lastdraw:=1;
   {? var_pres('_a')=type_of(0)
   || _lastdraw:=_a
   ?};
   ~~
";

:: Rekord
_tab.win_act(_sel,,'Rekord',,,,_fb);

:: Legenda
::_fb:="exec('legenda','color','@EXCEL_IMEX#02')";
::_tab.win_act(_sel,,'Formuła','Legenda'@@,,,_fb);

:: Szukaj
::_tab.win_act(_sel,,'Szukaj');

:: Kolejność
_tab.win_act(_sel,,'Kolejność');

_sel


\win_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy okno tymczasowe
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _b - TABLE - uchwyt do tabeli dla której utworzyć okienko
::       [_c] - czy pokazać wszystkie komunikaty 0 - nie (tylko bieżący wiersz, domyślnie), 1 - tak
::       [_d] - STRING - tytuł okienka
::       [_e] - INTEGER - czy dodawać kolumnę o walidacji
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=_a;
_tab:=_b;
_wszystko:=0;
{? var_pres('_c')=type_of(0)
|| _wszystko:=_c
?};

_title:='Historia eksportu'@;
_id:='#xls_export_his';
{? _env.KIND='IMPORT'
|| _title:='Historia importu'@;
   _id:='#xls_import_his'
?};

{? var_pres('_d')=type_of('')
|| _title:=_d
?};

_col_valid:=1;
{? var_pres('_e')=type_of(0)
|| _col_valid:=_e
?};

_sel:=_tab.mk_sel(_title,'P',,_id,,,,,'U');

{? _env.KIND='IMPORT'
|| {? _col_valid>0
   || _tab.win_fld(_sel,,'RESVALID',,,,,1,'Walidacja ok?'@,,'Wynik walidacji podczas importu (0/1)'@,2,,"1","0")
   ?};
   _tab.win_fld(_sel,,'FILE',,,20,,,'Nazwa pliku'@,,'Nazwa pliku Excel'@,,,,,,'mobile_visible=1,mobile_header=1');
   _tab.win_fld(_sel,,'SHEET',,,20,,,'Arkusz'@,,'Nazwa arkusza w Excel'@,,,,,,'mobile_visible=1');
   _tab.win_fld(_sel,,'ROW',,,10,,,'Wiersz Excel'@,,'Wiersz w Excel podczas importu którego powstał komunikat'@,,,,,,'mobile_visible=1')
?};
_tab.win_fld(_sel,,'LINE',,,100,,,'Komunikat'@,,'Komunikat utworzony podczas eksportu'@,,,,,,'mobile_visible=1');
_tab.win_act(_sel,,'Wyświetl',,,,"cur_tab(1,1).memo_get(,'MESSAGE',0); cur_tab(1,1).memo_view(,'MESSAGE')");

:: Szczegóły
{? _env.KIND='IMPORT'
||
   _fb:="
      params_exec('select_details','#excel_imex')
   ";
   _tab.win_act(_sel,,'Formuła','Szcze&góły'@@,,'Wyświetla szczegóły dla komunikatu'@,_fb,,1,,,,'G');
   _tab.win_btn(_sel,'text=%1,btn_label_align=center,panel=right,align=begin'['Szcze&góły'@],'menu:G',,,,,,'noempty');
   ~~
?};

:: Rekord
{? _env.KIND='IMPORT'
||
   _fb:="
      params_set(params_get());
      _env:=params_get().env_xls;
      _lastdraw:=1;
      {? var_pres('_a')=type_of(0)
      || _lastdraw:=_a
      ?};
      {? _lastdraw>0
      ||
         _tab_head:=_env.TAB_HEAD;
         _tab_hist:=cur_tab();
         _sel:=cur_win(1,1);

         _grayed:='';
         {? _tab_hist.MOD*'import_msg_'>0
         || _grayed:=''
         ||
            _tab_head.cntx_psh();
            _tab_head.index(_env.NDX_HEAD2);
            _tab_head.prefix(_tab_hist.ID,);
            {? _tab_head.first()
            ||
               _fml:=_tab_head.memo_txt(,1,'DETAILS');
               {? _fml='' | _tab_hist.DETAILS=0
               || _grayed+='G'
               ?}
            ?};
            _tab_head.cntx_pop();
            ~~
         ?};
         _tab_hist.actions_grayed(_sel,_grayed)
      ?};
      ~~
   "
||
   _fb:="
      _lastdraw:=1;
      {? var_pres('_a')=type_of(0)
      || _lastdraw:=_a
      ?};
      ~~
   "
?};
_tab.win_act(_sel,,'Rekord',,,,_fb);

:: Legenda
::_fb:="exec('legenda','color','@EXCEL_IMEX#03')";
::_tab.win_act(_sel,,'Formuła','Legenda'@@,,,_fb);

:: Szukaj
::_tab.win_act(_sel,,'Szukaj');

:: Kolejność
_tab.win_act(_sel,,'Kolejność');

_sel


\win_hist_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Tworzy okno grupowe komunikatów historii importów
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _b - TABLE - uchwyt do tabeli dla której utworzyć okienko
::       [_c] - czy pokazać wszystkie komunikaty 0 - nie (tylko bieżący wiersz, domyślnie), 1 - tak
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=_a;
_tab:=_b;
_wszystko:=0;
{? var_pres('_c')=type_of(0)
|| _wszystko:=_c
?};

_title:='Historia eksportu'@;
_id:='#xls_exp_hisg';
{? _env.KIND='IMPORT'
|| _title:='Historia importu'@;
   _id:='#xls_imp_hisg'
?};
_grpbefore:="
   params_set(params_get());
   _env:=params_get().env_xls;
   _tab:=params_get().tab_hist;
   grp_disp(_tab,_env.WIN_HIST1);
   grp_disp(_tab,_env.WIN_HIST2);
   ~~
";
_grp:=_tab.grp_make(_title,_grpbefore,_id,,,,,'html_maximized');

_wer1:=exec('win_hist','#excel_imex',_env,_tab,_wszystko,'Błędy i ostrzeżenia'@);
_env.WIN_HIST1:=_wer1;
{? _wszystko>0
||
   _before:="
      params_set(params_get());
      _env:=params_get().env_xls;
      _tab:=cur_tab(1,1);
      _ndx:=_tab.ndx_tmp(,,'EXPORTED',,,'IS_MOD',,,'LP',,);
      _tab.index(_ndx);
      _tab.prefix('T',0);
      _tab.first()
   "
||
   _before:="
      params_set(params_get());
      _env:=params_get().env_xls;
      _tab:=cur_tab(1,1);
      _ndx:=_tab.ndx_tmp(,,'EXPORTED',,,'IS_MOD',,,'ID',,,'LP',,);
      _tab.index(_ndx);
      _tab.prefix('T',0,_env.TAB_HEAD.ID);
      _tab.first()
   "
?};
_tab.grp_sel(_grp,_tab,_wer1,,,,,,_before);

_tab.grp_splt(_grp,,'horizontal','bottom',10,'#');
_wer2:=exec('win_hist','#excel_imex',_env,_tab,_wszystko,'Szczegółowe komunikaty o modyfikacjach',0);
_env.WIN_HIST2:=_wer2;
{? _wszystko>0
||
   _before:="
      params_set(params_get());
      _env:=params_get().env_xls;
      _tab:=cur_tab(1,1);
      _ndx:=_tab.ndx_tmp(,,'EXPORTED',,,'IS_MOD',,,'LP',,);
      _tab.index(_ndx);
      _tab.prefix('T',1);
      _tab.first()
   "
||
   _before:="
      params_set(params_get());
      _env:=params_get().env_xls;
      _tab:=cur_tab(1,1);
      _ndx:=_tab.ndx_tmp(,,'EXPORTED',,,'IS_MOD',,,'ID',,,'LP',,);
      _tab.index(_ndx);
      _tab.prefix('T',1,_env.TAB_HEAD.ID);
      _tab.first()
   "
?};
_tab.grp_sel(_grp,_tab,_wer2,,,,,,_before);
_grp


\win_links
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Tworzy okno tymczasowe
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: STRING - uchwyt do okna
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=_a;
_tab:=_env.TAB_LINKS;

_sel:=_tab.mk_sel('Powiązania definicji imex'@,'P',,'#xls_export_lin',,,,,'U');

_tab.win_fld(_sel,,'FROM',,,40,,,'Źródło'@,,'Id definicji imex: słownik'@);
_tab.win_fld(_sel,,'TO',,,40,,,'Cel'@,,'Id definicji imex: tabela'@);
_tab.win_fld(_sel,,'ORGIN',,,40,,,'Pochodzenie'@,,'Skąd pochodzi to powiązanie?'@);

{? __develop>0
||
   _fb:="
      params_set(params_get());
      _env:=params_get().env_xls;
      params_exec('links_analize','#excel_imex',_env);
      ~~
   ";
   _tab.win_act(_sel,,'Formuła','Analizuj powiązania'@@,,'Analizuje powiązania imex z plików .fml'@,_fb,,,,,,'A');
   _tab.win_act(_sel,1,'Formuła','Analizuj powiązania'@@,,'Analizuje powiązania imex z plików .fml'@,_fb,,,,,,'A');

   _fb:="
      params_set(params_get());
      _env:=params_get().env_xls;
      params_exec('links_gen_fml','#excel_imex',_env);
      ~~
   ";
   _tab.win_act(_sel,,'Formuła','Generuj formułę'@@,,'Generuje plik z powiązaniami imex definicji'@,_fb,,,,,,'G')
?};

_fb:="
   _lastdraw:=1;
   {? var_pres('_a')=type_of(0)
   || _lastdraw:=_a
   ?};
   ~~
";

:: Rekord
_tab.win_act(_sel,,'Rekord',,,,_fb);

:: Legenda
::_fb:="exec('legenda','color','@EXCEL_IMEX#02')";
::_tab.win_act(_sel,,'Formuła','Legenda'@@,,,_fb);

:: Szukaj
::_tab.win_act(_sel,,'Szukaj');

:: Kolejność
_tab.win_act(_sel,,'Kolejność');

_sel


\select_details
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia formułę na szczegóły dla komunikatu w historii
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_xls;
_tab_head:=_env.TAB_HEAD;
_tab_hist:=cur_tab();
{? _tab_hist.MOD*'import_msg_'>0
|| exec('import_msg_view','#excel_imex')
||
   _tab_head.cntx_psh();
   _tab_head.index(_env.NDX_HEAD2);
   _tab_head.prefix(_tab_hist.ID,);
   {? _tab_head.first()
   || _fml:=_tab_head.memo_txt(,1,'DETAILS');
      _msg:=_tab_hist.memo_txt(,1,'MESSAGE');
      {? _fml<>''
      || ($_fml)(_env,_msg)
      || FUN.emsg('Nie zdefiniowano formuły DETAILS w definicji imex.'@)
      ?}
   || FUN.emsg('Nie znaleziono definicji imex.'@)
   ?};
   _tab_head.cntx_pop();
   ~~
?};
~~


\rek_head_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Akcja na rekord przed w oknie nagłówków definicji
::   WE: _a - INTEGER - oznacza czy rekord jest ostatnim odrysowywanym rekordem
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_xls;
_lastdraw:=_a;

_tab:=cur_tab();
_sel:=cur_win();

_grayed:='';
_result:='';

{? _lastdraw>0
|| {? exec('tab_hist_size','#excel_imex',_env)=0
   || _grayed+='H'
   ?};
   {? _tab.memo_txt(,1,'SELECT')=''
   || _grayed+='W'
   ?};
   {? _env.ACCEPT_ALLOW=0
   || _grayed+='A'
   ?};
   {? _tab.sel_size()=0
   ||
::    Pojedyncze zaznaczenie
      {? _tab.SELECTED='T'
      || _tab.actions(_sel,,'O',1);
         _grayed+='Z'
      |? _tab.SELECTED='N'
      || _tab.actions(_sel,,'Z',1);
         _grayed+='O'
      ?}
   ||
::    Zaznaczenie grupowe
      _tab.actions(_sel,,'Z',1)
   ?};

   _anyselected:=0;
   _current:=_tab.ref();
   _tab.first();
   {!
   |? _anyselected:=(_tab.SELECTED='T');
      _tab.next() & ~_anyselected
   !};
   _tab.seek(_current);
   _tab.actions_grayed(_sel,_grayed)
?};
_result


\rek_head_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Akcja na rekord przed w oknie nagłówków definicji
::   WE: _a - INTEGER - oznacza czy rekord jest ostatnim odrysowywanym rekordem
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_xls;
_lastdraw:=_a;

_tab:=cur_tab();
_sel:=cur_win();

_grayed:='';
_result:='';

{? _lastdraw>0
|| {? exec('tab_hist_size','#excel_imex',_env)=0
   || _grayed+='H'
   ?};
   _tab.actions_grayed(_sel,_grayed)
?};
_result


\tab_hist_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca rozmiar tabeli z historią dla aktualnego rekordu .TAB_HEAD
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: REAL
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};

_tab_head:=_env.TAB_HEAD;
_tab_hist:=_env.TAB_HIST;
_tab_head.cntx_psh();
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST2);
_tab_hist.prefix(_tab_head.ID,);
_result:=_tab_hist.size();
_tab_hist.cntx_pop();
_tab_head.cntx_pop();
_result


\head_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Akcja na wyświetl w nagłówkach definicji
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_xls;

_tab:=_env.TAB_HEAD;

_red:=_tab.mk_edit('Nagłówek definicji importu/eksportu'@);
_tab.win_esep(_red,'Dane podstawowe'@);
_tab.win_efld(_red,,'ID',,,60);
_tab.win_efld(_red,,'NAME',,,60);
_tab.win_efld(_red,,'FILE',,,60);
_tab.win_efld(_red,,'SHEET',,,60);
_tab.win_efld(_red,,'DESC',,,60,-4);
_tab.win_esep(_red,'Szczegóły implementacji'@);
_tab.win_efld(_red,,'FIELDS',,,60,-2);
_tab.win_efld(_red,,'TABLE',,,60,-2);
_tab.win_efld(_red,,'PREFIX',,,60,-2);
_tab.win_efld(_red,,'SELECT',,,60,-2);
_tab.win_efld(_red,,'EXPORT',,,60,-2);
_tab.win_efld(_red,,'BEFORE',,,60,-2);
_tab.win_efld(_red,,'IMPORT',,,60,-2);
_tab.win_efld(_red,,'AFTER',,,60,-2);
_tab.win_efld(_red,,'VALIDATE',,,60,-2);
_tab.win_efld(_red,,'DETAILS',,,60,-2);
_tab.win_edit(_red);
_tab.win_ebtn(_red,'text=%1,panel=bottom,align=end,display=1'['Zamknij'@],'key:Esc');
_tab.display();
~~


\select_pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wyświetla pozycje zaznaczonej definicji imex
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};

_tab_head:=_env.TAB_HEAD;
_tab_pos:=_env.TAB_POS;

_tab_head.cntx_psh();
_tab_pos.cntx_psh();
_tab_pos.index(_env.NDX_POS1);
_tab_pos.prefix(#_tab_head.ref());
_tab_pos.first();
_tab_pos.win_sel(_env.WIN_POS);
_tab_pos.select();
_tab_pos.cntx_pop();
_tab_head.cntx_pop();
~~


\select_links
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Wyświetla wszystkie powiazania
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};

_tab_head:=_env.TAB_HEAD;
_tab_links:=_env.TAB_LINKS;

_tab_links.cntx_psh();
_tab_head.cntx_psh();
_tab_links.prefix();
_tab_links.first();
_win:=exec('win_links','#excel_imex',_env);
_tab_links.win_sel(_win);
_tab_links.select();
_tab_links.cntx_pop();
_tab_head.cntx_pop();
~~

\select_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wyświetla historię
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_b] - czy pokazać wszystkie komunikaty 0 - nie (tylko bieżący wiersz, domyślnie), 1 - tak
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
{? var_pres('_b')=type_of(0)
|| _wszystko:=_b
|| _wszystko:=0
?};
_ndx:=_env.NDX_HIST2;
_tab_head:=_env.TAB_HEAD;
_win:='';
{? _env.TRANSACTIONS>0
|| _tab_hist:=exec('tab_hist','#excel_imex',_env,0,0);
   _tab_hist_src:=_env.TAB_HIST;
   _tab_hist_src.cntx_psh();
   _tab_hist_src.index(_env.NDX_HIST6);
   {? _wszystko
   || _tab_hist_src.prefix()
   || _tab_hist_src.prefix(_tab_head.ID,)
   ?};
   exec('tab2tab','#table',_tab_hist_src,_tab_hist,1,0);
   _tab_hist_src.cntx_pop();
   _ndx:=_tab_hist.ndx_tmp(,,'EXPORTED',,,'ID',,,'LP',,);
   {? _env.KIND='IMPORT' & _env.IMP_MSG>0
   || _win:=exec('win_hist_grp','#excel_imex',_env,_tab_hist,_wszystko)
   || _win:=exec('win_hist','#excel_imex',_env,_tab_hist,_wszystko)
   ?}
|| _tab_hist:=_env.TAB_HIST;
   {? _env.KIND='IMPORT' & _env.IMP_MSG>0
   || _win:=exec('win_hist_grp','#excel_imex',_env,_tab_hist,_wszystko)
   || _win:=exec('win_hist','#excel_imex',_env,_tab_hist,_wszystko)
   ?};
   ~~
?};
params_set('tab_hist',_tab_hist,'env_xls',_env);
_tab_head.cntx_psh();
_tab_hist.cntx_psh();
_tab_hist.index(_ndx);
{? _wszystko
|| _tab_hist.prefix('T')
|| _tab_hist.prefix('T',_tab_head.ID,)
?};
_tab_hist.first();
_tab_hist.win_sel(_win);
_tab_hist.select();
_tab_hist.cntx_pop();
_tab_head.cntx_pop();
~~


\select_elements
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia formułę na wybór elementów
::       Kontekst pracy - rekord tabeli .TAB_HEAD
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};

_can_continue:=1;

_tab_head:=_env.TAB_HEAD;
_tab_sel:=_env.TAB_SEL;
_tab_head.cntx_psh();
_tab_sel.cntx_psh();
_tab_sel.index(_env.NDX_SEL2);
_fml:=_tab_head.memo_txt(,1,'SELECT');
{? _fml<>''
||

   _refs:=tab_tmp(1,
      'REF','STRING[16]','SQL Ref rekordu'
   );
:: Ładuję to co było wcześniej wybrane
   _tab_sel.prefix(_tab_head.ID,);
   {? _tab_sel.first()
   || {!
      |? _refs.blank();
         _refs.REF:=_tab_sel.REF;
         _refs.add();
         _tab_sel.next()
      !}
   ?};
   _fml_tab:=_tab_head.memo_txt(,1,'TABLE');
:: Uruchamiam formułę na uzyskanie uchwytu tabeli
   _table:=($_fml_tab)(0,0);
   {? var_pres('EXP_TAB',_env)>100
   || obj_del(_env.EXP_TAB)
   ?};
   _env.EXP_TAB:=_table;

   {? _can_continue>0
   || _can_continue:=($_fml)(_refs,_env)
   ?};
   obj_del(_env.EXP_TAB);

   {? _can_continue>0
   ||
::    Po wykonaniu formuły z implementacji usuwam wszystko co było wcześniej wybrane, bo użytkownik może
::    totalnie zmienić ten wybór
      {? _tab_sel.first()
      || {!
         |? _can_continue:=_tab_sel.del(,1);
            _tab_sel.first() & _can_continue>0
         !}
      ?};
      _refs.prefix();
      {? _refs.first()
      ||
::       Oznaczam że są jakieś elementy wybrane
         _tab_head.HAS_SEL:='T';
::       Zaznaczam implementację że wybrana do eksportu, bo skoro ktoś wybrał jakieś rekordy
::       to znak że będzie to chciał eksportować
         _tab_head.SELECTED:='T';
         _tab_head.put();
         {!
         |?
            {? _refs.REF<>''
            || _tab_sel.prefix(_tab_head.ID,_refs.REF);
               {? _tab_sel.first()=0
               || _tab_sel.blank();
                  _tab_sel.ID:=_tab_head.ID;
                  _tab_sel.REF:=_refs.REF;
                  _tab_sel.add()
               ?}
            ?};
            _refs.next()
         !}
      ||
         {? _tab_head.HAS_SEL='X'
         ||
::          Implementacja robi własną obsługę zaznaczania, w tabeli _refs nie ma rekordów
::          więc jeżeli w .HAS_SEL jest X to oznacza że zaznaczenie jest zrobione np na własnej
::          globalnej tabeli tymczasowej
            _tab_head.HAS_SEL:='T'
         ||
            _tab_head.HAS_SEL:='N'
         ?};
         _tab_head.put()
      ?}
   ?}
|| FUN.emsg('Formuła na wybór elementów niezdefiniowana.'@)
?};
_tab_sel.cntx_pop();
_tab_head.cntx_pop();
~~


\export_accept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Akcja Akceptuj w oknie eksportu
::   WY: STRING - '0'/'1'
::  TAG: <PRYWATNA>
:: ~OST: INFEXISTS
::----------------------------------------------------------------------------------------------------------------------

params_set(params_get());
_env:=params_get().env_xls;
_env.INTERM:=exec('interm','#system');
{? _env.DIR=''
|| _env.XLS.XLS.SERWER:=_env.DIR_ON_SERVER:=_env.INTERM
|| {? _env.DIR_ON_SERVER=1
   || obj_del(_env.XLS.XLS);
      _env.XLS.XLS:=exec('Xls','#object',1)
   ?}
?};

_can_continue:=1;
_result:='0';

_progress:=_env.PROGRESS;
_prg_step:=1;
_extra_steps:=1;
_transaction:=_env.TRANSACTIONS;

_sep:=exec('sep','#file');
{? _env.DIR_ON_SERVER>0
|| _sep:=exec('sep','#file',2)
?};
_env.SEP:=_sep;

_msg:='Eksport parametryzacji'@;
_env.KOMM.init(250,,_msg);

_tab_head:=_env.TAB_HEAD;

_tab_head.cntx_psh();
KOMM.init(250,,'Eksport parametryzacji'@);
_tab_head.index(_env.NDX_HEAD6);
_files:=sql('select distinct FILE from :_a where :_a.SELECTED=\'T\'',_tab_head);
{? _files.first()
|| {!
   |? _tab_head.prefix(_files.FILE,'T');
      {? _tab_head.last()
      || _tab_head.LAST:=1;
         _tab_head.put()
      ?};
      _files.next()
   !}
?};

::{? _can_continue & _env.INTERM>0
::|| _tab_head.cntx_psh();
::   _tab_head.index(_env.NDX_HEAD2);
::   _tab_head.prefix('B_PROC');
::   {? _tab_head.first() & _tab_head.SELECTED='T'
::   || _can_continue:=FUN.ask('Eksport procesów na interm niedostępny. Kontynuować?');
::      {? _can_continue>0
::      || _tab_head.clear();
::         _tab_head.SELECTED:='N';
::         _tab_head.put
::      ?}
::   ?};
::   _tab_head.cntx_pop()
::?};

_tab_head.index(_env.NDX_HEAD3);
_tab_head.prefix('T');
_tab_sel:=_env.TAB_SEL;
_tab_sel.cntx_psh();
_tab_sel.index(_env.NDX_SEL1);
{? _tab_head.size()=0
|| _can_continue:=0;
   _msg:='Brak zaznaczonych elementów do eksportu.'@;
   exec('komm_add','#excel_imex',_msg,2,_env)
?};

{? _can_continue>0
||
   {? _env.DIR=''
   || {? _env.INTERM>0
      || _monkey:='';
         _tmpdir:=fmk_tmp_dir(0);
         _env.DIR:=_tmpdir.get_path()
      || _monkey:='@';
         _env.DIR:=exec('dialog_path','#excel_imex',2)
      ?}
   || {? _env.DIR_ON_SERVER
      || _monkey:=''
      || _monkey:='@'
      ?}
   ?};
   {? _env.DIR<>''
   ||
      _can_continue:=fexists(_monkey+_env.DIR);
      {? _can_continue=0
      || _msg:='Katalog: %1 nie istnieje. Eksport niemożliwy.'@[_env.DIR];
         exec('komm_add','#excel_imex',_msg,2,_env)
      ?}
   || _can_continue:=0
   ?}
?};
{? _can_continue>0
||
   {? _env.DIR<>''
   || {? fexists(_monkey+_env.DIR+_env.SEP+'excelspliter.log',0)>0
      || ferase(_monkey+_env.DIR+_env.SEP+'excelspliter.log',0)
      ?};
      _env.XLS.XLS.addErrorPath(_env.DIR+_env.SEP)
   ?};

:: Inicjalizacja progressa
   {? var_pres('ARGSPROG',_env)>100
   || obj_del(_env.ARGSPROG)
   ?};
   _argsprog:=exec('init','#progress');
   _env.ARGSPROG:=_argsprog;
   {? _progress>0
   ||
      _argsprog.gl_smode('|');
::      _argsprog.BREAK_ON:='N';
      _argsprog.TITLE:='Eksport parametryzacji'@;
      _global_size:=100;
      _argsprog.add_progress('Alokowanie plików Excel'@+'…',_tab_head.size());
      _argsprog.add_progress('Eksport elementu'@+'...',_tab_head.size()*1000);
      _argsprog.add_progress('Zapis końcowy plików Excel na dysku'@+'…',_tab_head.size());
      _argsprog.global_size(_global_size);
      _argsprog.HEIGHT:=10
   ?};

   {? _progress>0
   || exec('start','#progress',_argsprog);
      _argsprog.next_phase()
   ?};

:: Zaalokowanie obiektów do obsługi arkuszy Excel
   _can_continue:=_env.create();

   _mydo:=do_state()=0;

   {? _transaction>0
   || {? _mydo || do() ?}
   ?};
   {? _can_continue>0
   ||
      {? _progress>0
      || _argsprog.next_phase()
      ?};

::    Przed każdym eksportem kasuje zawartość technicznych tabel
      _env.erase();
      _lp:=0;
      _files_step_global:=0;
      {? _tab_head.first()
      || _args_before:=exec('args_before','#excel_imex',_env);
         _args_before.KIND:='EXPORT';
         _args_after:=exec('args_after','#excel_imex',_env);
         _args_after.KIND:='EXPORT';
         {? _progress>0
         || _files_step_global:=_env.PROG_IMEX/_tab_head.size()
         ?};

         {!
         |?
            {? _progress>0
            || _argsprog.ph_sname(2,'Eksport: %1'@[_tab_head.NAME]);
               ~~
            ?};

            {? _can_continue>0
            ||
               _can_export:=1;
               _diff:=0;
               _fml_before:=_tab_head.memo_txt(,1,'BEFORE');
               _fml_after:=_tab_head.memo_txt(,1,'AFTER');

               {? _fml_before<>''
               || _args_before.CONTINUE:=1;
                  _res_before:=exec('run_formula','#excel_imex',_env,_fml_before,_args_before);
                  _can_export:=_args_before.CONTINUE;
                  {? _args_before.MSG<>''
                  || exec('history_add_bef','#excel_imex',_args_before,_env)
                  ?}
               ?};
               {? _can_export>0
               ||
                  _mode:=1;
                  _tab_sel.prefix(_tab_head.ID,);
                  {? _tab_sel.size()>0
                  || _mode:=3
                  ?};
                  _can_continue:=exec('export_main','#excel_imex',_env,_mode)
               ?};

               {? _fml_after<>''
               || exec('run_formula','#excel_imex',_env,_fml_after,_args_after);
                  {? _args_after.MSG<>''
                  || exec('history_add_bef','#excel_imex',_args_after,_env)
                  ?}
               ?}
            ?};

            {? _env.EXPORT_MODE=1
            ||
::             Jeżeli ostatnie odwołanie do pliku, to w tym miejscu zapis i zamknięcie
               {? _tab_head.LAST
               ||

                  _filepath:=_env.FILEPATH;
                  _env.auto_size(_filepath);

                  {? _env.RANDOM_TEST>0
                  ||
                     _tab_head.cntx_psh();
                     _tab_head.index(_env.NDX_HEAD6);
                     _tab_head.prefix(_tab_head.FILE,'T');

                     {? var_pres('_tab_iter')>100
                     || obj_del(_tab_iter)
                     ?};
                     _tab_iter:=_env.TAB_ITER;
                     _tab_iter.cntx_psh();
                     _tab_iter.index(_env.NDX_ITER1);
                     {? _tab_head.first()
                     || {!
                        |?
                           {? _tab_head.ADD_ROWS<>0
                           ||
                              _tab_iter.prefix(#_tab_head.ref());
                              {? _tab_iter.first()
                              ||
                                 {? var_pres('_table')>100
                                 || obj_del(_table)
                                 ?};
::                               Uruchamiam formułę na uzyskanie uchwytu tabeli
                                 _fml:=_tab_head.memo_txt(,1,'TABLE');
                                 _table:=exec('run_formula','#excel_imex',_env,_fml,1,0);
::                               Tworzę obiekt zasilający
                                 {? var_pres('_obj_rand')>100
                                 || obj_del(_obj_rand)
                                 ?};
                                 _obj_rand:=exec('filler_obj','#excel_imex',_table,_env);
                                 exec('obj_rand','#excel_imex',_obj_rand,1);
                                 _env.write_row(_filepath,_obj_rand);
                                 exec('obj_rand','#excel_imex',_obj_rand,255);
                                 _env.write_row(_filepath,_obj_rand)
                              ?}
                           ?};
                           _tab_head.next()
                        !}
                     ?};
                     _tab_iter.cntx_pop();
                     _tab_head.cntx_pop()
                  ?};

                  _env.write_empty_rows(_filepath);
                  _env.save(_filepath);
                  _env.close(_filepath)
               ?}
            ?};

            _lp+=1;

            {? _progress>0
            ||
::               _can_continue:=exec('update','#progress',_argsprog,1);
               _cur_prog:=_lp*1000;
               _argsprog.ph_spos(2,_cur_prog,1);
               _can_continue:=_argsprog.global_step(_files_step_global);
               {? _can_continue<=0
               || KOMM.add('Eksport przerwany przez użytkownika.',2,,1)
               ?}
            ?};
            _tab_head.next() & _can_continue>0
         !}
      ?}
   ?};


   {? _progress>0
   ||
      {? _can_continue>0
      || _argsprog.ph_sname(2,'Eksport elementów: OK.'@)
      || _argsprog.ph_sname(2,'Eksport elementów: BŁĄD.'@)
      ?};
      _argsprog.next_phase()
   ?};

::   {? _progress>0
::   || progress(,'Zapis końcowy plików Excel na dysku'@+'…',FUN.TYT,1,0)
::   ?};
   {? _can_continue>0 & _env.EXPORT_MODE=2
   ||
      _tab_head.cntx_psh();
      _tab_head.prefix();
      _cfiles:=tab_tmp(1
            ,'FILEPATH','STRING[255]','Nazwa pola 1'
            ,'FILENAME','STRING[255]','Nazwa pola 1');
::    Tryb zapisu do osobnych plików, druga pętla, która zbiera tylko pliki które coś mają
      {? _tab_head.first()
      || {!
         |?
            _filepath:=_env.DIR+_sep+_tab_head.FILE;
            {? var_pres('_content')>100
            || obj_del(_content)
            ?};
            _content:=_env.STORE[_tab_head.LP];
            {? var_pres('_content')>100
            ||
               _content.prefix();
               {? _content.first()
               ||
                  _cfiles.prefix(_filepath,);
                  {? _cfiles.size()=0
                  || _cfiles.blank();
                     _cfiles.FILEPATH:=_filepath;
                     _cfiles.FILENAME:=_tab_head.FILE;
                     _can_continue:=_cfiles.add()
                  ?}
               ?}
            ?};
            _tab_head.next() & _can_continue>0
         !}
      ?};
      _tab_head.cntx_pop();

::    Trzecia pętla. Zapis do plików oraz zamykanie plików które coś mają
      {? _can_continue>0
      ||
         _cfiles.prefix();
         _tab_head.cntx_psh();
         _tab_head.index(_env.NDX_HEAD9);
         _lp:=0;
         _files_step_global:=0;
         {? _cfiles.first()
         ||
            {? _progress>0
            || _argsprog.ph_ssize(3,_cfiles.size());
               _files_step_global:=_env.PROG_SAVE/_cfiles.size()
            ?};

            {!
            |? {? _progress>0
               || _argsprog.ph_sname(3,'Zamykanie pliku: %1'@[_cfiles.FILENAME]);
                  ~~
               ?};

               _filepath:=_cfiles.FILEPATH;

               _tab_head.prefix(_cfiles.FILENAME);
               {? _tab_head.first()
               || {!
                  |?
                     echo('Eksport: %1. Zapis do pliku: %2'@[$_tab_head.LP+'. '+_tab_head.ID,_filepath]);
                     {? var_pres('_content')>100
                     || obj_del(_content)
                     ?};
                     _content:=_env.STORE[_tab_head.LP];
                     {? var_pres('_content')>100
                     ||
                        _content.prefix();
                        {? _content.first()
                        ||
                           {!
                           |?
                              _res:=_env.write_row2(_filepath,_content);
                              {? _res=0
                              || _can_continue:=0;
                                 _msg:='Błąd zapisu do arkusza Excel (metoda write_row2)'@;
                                 exec('komm_add','#excel_imex',_msg,3,_env,_sect)
                              ?};
                              _content.next() & _can_continue>0
                           !}
                        ?}
                     ?};
                     _env.auto_size(_filepath);

                     {? _env.RANDOM_TEST>0
                     ||
                        _tab_head.cntx_psh();
                        _tab_head.index(_env.NDX_HEAD6);
                        _tab_head.prefix(_tab_head.FILE,'T');

                        {? var_pres('_tab_iter')>100
                        || obj_del(_tab_iter)
                        ?};
                        _tab_iter:=_env.TAB_ITER;
                        _tab_iter.cntx_psh();
                        _tab_iter.index(_env.NDX_ITER1);
                        {? _tab_head.first()
                        || {!
                           |?
                              {? _tab_head.ADD_ROWS<>0
                              ||
                                 _tab_iter.prefix(#_tab_head.ref());
                                 {? _tab_iter.first()
                                 ||
                                    {? var_pres('_table')>100
                                    || obj_del(_table)
                                    ?};
::                                  Uruchamiam formułę na uzyskanie uchwytu tabeli
                                    _fml:=_tab_head.memo_txt(,1,'TABLE');
                                    _table:=exec('run_formula','#excel_imex',_env,_fml,1,0);
::                                  Tworzę obiekt zasilający
                                    {? var_pres('_obj_rand')>100
                                    || obj_del(_obj_rand)
                                    ?};
                                    _obj_rand:=exec('filler_obj','#excel_imex',_table,_env);
                                    exec('obj_rand','#excel_imex',_obj_rand,1);
                                    _env.write_row(_filepath,_obj_rand);
                                    exec('obj_rand','#excel_imex',_obj_rand,255);
                                    _env.write_row(_filepath,_obj_rand)
                                 ?}
                              ?};
                              _tab_head.next() & _can_continue>0
                           !}
                        ?};
                        _tab_iter.cntx_pop();
                        _tab_head.cntx_pop()
                     ?};
                     _tab_head.next()
                  !}
               ?};
               echo('Zamykanie pliku: %1'@[_filepath]);
               _env.write_empty_rows(_filepath);
               _env.save(_filepath);
               _env.close(_filepath);

               {? _progress>0
               || _can_continue:=exec('update','#progress',_argsprog,1);
                  {? _can_continue<=0
                  || KOMM.add('Eksport przerwany przez użytkownika.',2,,1)
                  ?};
                  _argsprog.global_step(_files_step_global)
               ?};
               _cfiles.next()
            !}
         ?};
         _tab_head.cntx_pop()
      ?};
      {? _progress>0
      ||
         {? _can_continue>0
         || _argsprog.ph_sname(3,'Zamykanie plików: OK.'@)
         || _argsprog.ph_sname(3,'Zamykanie plików: BŁĄD.'@)
         ?}
      ?}
   ?};

   {? _transaction>0
   ||
      {? _can_continue=0
      || undo()
      ?}
   ?};
   {? _transaction>0 & _can_continue>0
   ||
      {? _mydo>0
      || {? do_state()=0
         ||
::          Jeżeli coś zdjęło transakcję to komunikat
            _msg:='Eksport został przerwany ze względu na przedwczesne zakończenie transakcji przez którąś z formuł eksportujących.'@;
            exec('komm_add','#excel_imex',_msg,3,_env);
            _can_continue:=0
         ?}
      ?}
   ?};
   {? _can_continue>0
   ||
::    Ostateczny zapis wszystkich plików Excel na dysku
      _env.done(1)
   ||
      _env.done(0)
   ?};

   {? _progress>0
   || _argsprog.next_phase();
      _argsprog.global_step(100);
      _argsprog.ctr_stop()
   ?};

::   {? _progress>0
::   || prgs_clr()
::   ?};

   {? _transaction>0
   || {? _mydo>0
      || end()
      ?}
   ?}
?};
_tab_head.cntx_pop();
_tab_sel.cntx_pop();
_env.KOMM.select();

{? _env.DIR<>''
||
   _monkey:='@';
   {? _env.DIR_ON_SERVER>0
   || _monkey:=''
   ?};
   _spliter_path:=_monkey+_env.DIR+_env.SEP+'excelspliter.log';
   {? fexists(_spliter_path,0)>0
   || _break:=0;
      {!
      |? _msg:='Podczas zapisu plików do Excela powstały wyjątki w bibliotece: %1.'@['excelspliter.jar'];
         _choi:=FUN.choice(_msg,,'Szczegóły...'@,,,,'Zamknij'@);
         {? _choi=1
         || {? _env.INTERM
            || _interm_path:=$SYSLOG.tm_stamp()+'.log';
               {? fcopy(_spliter_path,_interm_path,0,1,1)
               || txt_view(_interm_path,1,1);
                  ferase(_interm_path,1)
               ?}
            || txt_view(_spliter_path,0,1)
            ?}
         |? _choi=0
         || _break:=1
         ?};
         _break=0
      !}
   ?}
?};
KOMM.select();
{? _can_continue>0
|| _result:='1'
?};
{? _can_continue>0 & _env.INTERM>0
||
   _dir_files:=exec('dir','#file',_env.DIR);
   {? _dir_files.first()
   ||
      _tmp_dir2:=fmk_tmp_dir(0);
      {? type_of(_tmp_dir2)<>type_of(~~)
      || _pth2:=_tmp_dir2.get_path();
         {? _env.ZIP_NAME*'.zip'>0
         || _name:=_env.ZIP_NAME
         || _name:=_env.ZIP_NAME+'.zip'
         ?};
         _arch:=_pth2+exec('sep','#file',2)+_name;
         _can_continue:=fpack_add(_arch,_env.DIR);
         {? _can_continue>0
         || dlg_save(_arch,0,_name)
         ?}
      ?}
   ||
      FUN.info('Brak plików do pobrania'@)
   ?}
?};
_env.DIR:='';
_result


\import_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia import
::   WE: [_a] - obj_new - tablica z kodami z parametryzatora
::       [_b] - STRING - alternatywny init
::       [_c] - INTEGER - wskazany tryb importu: 1 - nadpisuj istniejace, 0 - dodaj brakujace
::       [_d] - STRING - tekst tytułu dialogu z wyborem ścieżki katalogu z którego importować
::       [_e] - INTEGER - czy importować procesy
::       [_f] - INTEGER - czy wyświetlać szczególowe info o modyfikacjach
::       [_g] - STRING - identyfikatory imex do których ograniczyć działanie, separowane przecinkiem
::       [_h] - STRING - ścieżka katalogu odczytu danych
::       [_i] - INTEGER - czy pokazywać podsumowanie  [1]* - pokazywać na ekranie; [2] - zapis do plików
::       [_j] - INTEGER - czy importować tylko elementy do bieżącej firmy (z wyłączeniem importów wielofirmowych)
::       [_k] - STRING - symbol firmy z której pochodzi parametryzacja
::   WY: 0 - porażka
::       1 - sukces
::       -1 - użytkownik zrezygnował
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_funpar:=~~;
{? var_pres('_a')>100
|| _funpar:=_a
?};
_alt_init:='';
{? var_pres('_b')=type_of('')
|| _alt_init:=_b
?};
_force_mode:=~~;
{? var_pres('_c')=type_of(0)
|| _force_mode:=_c
?};
_pth_dialog_txt:=~~;
{? var_pres('_d')=type_of('')
|| _pth_dialog_txt:=_d
?};
_proc_imp:=~~;
{? var_pres('_e')=type_of(0)
|| _proc_imp:=_e
?};
_imp_msg:=~~;
{? var_pres('_f')=type_of(0)
|| _imp_msg:=_f
?};
_filter:=~~;
{? var_pres('_g')=type_of('')
|| _filter:=_g
?};
_dir:='';
{? var_pres('_h')=type_of('')
|| _dir:=_h
?};
_show_res:=1;
{? var_pres('_i')=type_of(1)
|| _show_res:=_i
?};
_singlefirm:=0;
{? var_pres('_j')=type_of(0)
|| _singlefirm:=_j
?};
_firm_src:='';
{? var_pres('_k')=type_of('')
|| _firm_src:=_k
?};

_env:=exec('env','#excel_imex');
_env.INTERM:=exec('interm','#system');
_env.SINGLEFIRM:=_singlefirm;
_env.FIRM_SRC:=_firm_src;
{? _dir<>'' & fexists(_dir)=2
|| {? 1+_dir='@'
   || _env.DIR_ON_SERVER:=0;
      _env.FILEPATH:=1-_dir
   || _env.DIR_ON_SERVER:=1;
      _env.FILEPATH:=_dir
   ?}
?};
{? _env.FILEPATH=''
|| _env.XLS.XLS.SERWER:=_env.DIR_ON_SERVER:=_env.INTERM
|| {? _env.DIR_ON_SERVER=1
   || obj_del(_env.XLS.XLS);
      _env.XLS.XLS:=exec('Xls','#object',1)
   ?}
?};
_env.XLS.XLS.TRYB:=0;
_env.TRANSACTIONS:=1;
VAR_DEL.delete('EXCEL_ENV');
EXCEL_ENV:=_env;
params_set('env_xls',_env);
_env.KIND:='IMPORT';
_env.load(_funpar,_alt_init,_filter);

exec('czytaj','#stalesys');

_result:=0;
_can_continue:=1;
_can_import:=1;

_progress:=_env.PROGRESS;
_prg_step:=1;
_extra_steps:=2;
_transaction:=_env.TRANSACTIONS;

{? type_of(_proc_imp)=type_of(0)
|| _env.IMP_PROC:=_proc_imp
?};

{? type_of(_imp_msg)=type_of(0)
|| _env.IMP_MSG:=_imp_msg
?};
{? type_of(_force_mode)=type_of(0)
|| _env.IMP_MODE:=_force_mode
||
   {? type_of(_funpar)>100
   ||
      _sel1:='N';
      {? _env.IMP_MSG>0
      || _sel1:='T'
      ?};
      _choice:=exec('import_dialog','#excel_imex',0,_sel1);
      {? type_of(_choice)>100
      || {? _choice.MODE='D'
         || _env.IMP_MODE:=0
         |? _choice.MODE='N'
         || _env.IMP_MODE:=1
         ?};
         {? _choice.DETAILS='T'
         || _env.IMP_MSG:=1
         ?}
      || _can_continue:=0;
         _result:=-1
      ?};

::      _choice:=FUN.multichoice('Wybierz tryb importu'@,'',,80,6,
::                               'text=%1;selected=%2'['Szczegółowe komunikaty o modyfikowanych rekordach'@,_sel1],
::                               'text=%1;kind=button'['&Nadpisuj istniejące'@],
::                               'text=%1;kind=button'['&Dodaj brakujące'@]);
::      {? _choice[1]=''
::      || _can_continue:=0
::      |? _choice[1]='2'
::      || _env.IMP_MODE:=1
::      |? _choice[1]='3'
::      || _env.IMP_MODE:=0
::      ?};
::      {? _can_continue>0
::      || {? _choice[2]<>''
::         || _env.IMP_MSG:=1
::         ?}
::      ?}
::      _choice:=FUN.choice('Wybierz tryb importu'@,,'Nadpisuj istniejące'@,'Dodaj brakujące'@);
::      {? _choice=1
::      || _env.IMP_MODE:=1
::      |? _choice=2
::      || _env.IMP_MODE:=0
::      || _can_continue:=0
::      ?}
      ~~
   ||
      _sel1:='N';
      {? _env.IMP_PROC>0
      || _sel1:='T'
      ?};
      _sel2:='N';
      {? _env.IMP_MSG>0
      || _sel2:='T'
      ?};

      _choice:=exec('import_dialog','#excel_imex',,_sel1,_sel2);
      {? type_of(_choice)>100
      || {? _choice.MODE='D'
         || _env.IMP_MODE:=0
         |? _choice.MODE='N'
         || _env.IMP_MODE:=1
         ?};
         {? _choice.PROC='W'
         || _env.IMP_PROC:=1
         |? _choice.PROC='C'
         || _env.IMP_PROC:=2
         || _env.IMP_PROC:=0
         ?};

         {? _choice.DETAILS='T'
         || _env.IMP_MSG:=1
         ?}
      || _can_continue:=0;
         _result:=-1
      ?};
::      _choice:=FUN.multichoice('Wybierz tryb importu'@,'',,80,6,
::                               'text=%1;selected=%2'['Importuj procesy'@,_sel1],
::                               'text=%1;selected=%2'['Szczegółowe komunikaty o modyfikowanych rekordach'@,_sel2],
::                               'text=%1;kind=button'['&Nadpisuj istniejące'@],
::                               'text=%1;kind=button'['&Dodaj brakujące'@]);
::      {? _choice[1]=''
::      || _can_continue:=0
::      |? _choice[1]='3'
::      || _env.IMP_MODE:=1
::      |? _choice[1]='4'
::      || _env.IMP_MODE:=0
::      ?};
::      {? _can_continue>0
::      || {? _choice[2]=''
::         || _env.IMP_PROC:=0
::         ?};
::         {? _choice[3]<>''
::         || _env.IMP_MSG:=1
::         ?}
::      ?};
      ~~
   ?}
?};
_sep:=exec('sep','#file');
{? _env.DIR_ON_SERVER>0
|| _sep:=exec('sep','#file',2)
?};
_env.SEP:=_sep;
{? _can_continue>0
|| {? _env.FILEPATH=''
   || {? _env.INTERM>0
      || _monkey:='';
         _sep:=exec('sep','#file',2);
         _tmpdir:=fmk_tmp_dir(0);
         _filepath_tmp:=_tmpdir.get_path();
         _uploaded:=dlg_upload(_filepath_tmp,0,'.zip',1);
         {? _uploaded<>'' & _uploaded+4='.zip'
         || _filepath_zip:=_filepath_tmp+_sep+_uploaded;
            _tmp_dir2:=fmk_tmp_dir(0);
            {? type_of(_tmp_dir2)<>type_of(~~)
            || _pth2:=_tmp_dir2.get_path();
               _can_continue:=funpack('zip',_filepath_zip,_pth2);
               {? _can_continue>0
               ||
                  _dir:=fdir(_pth2,1,0);
                  _ndx:=_dir.ndx_tmp(,,'TYPE',,,'NAME',,);
                  _dir.index(_ndx);
                  _dir.prefix('f');
                  {? _dir.first()
                  || _env.FILEPATH:=_pth2
                  || _dir.prefix('d');
                     {? _dir.first()
                     || _env.FILEPATH:=_pth2+_sep+_dir.NAME
                     ?}
                  ?}
               ?}
            ?}
         |? _uploaded<>''
         || _can_continue:=0;
            _msg:='Wskazany plik ma inne rozszerzenie niż: %1'@['.zip'];
            exec('komm_add','#excel_imex',_msg,3,_env)
         ?}
      || _monkey:='@';
         _env.FILEPATH:=exec('dialog_path','#excel_imex',1,_pth_dialog_txt)
      ?}
   || {? _env.DIR_ON_SERVER=0
      || _monkey:='@'
      || _monkey:=''
      ?}
   ?};
   {? _env.FILEPATH=''
   || _can_continue:=0;
      _result:=-1
   || _env.DIR:=_env.FILEPATH
   ?}
?};
{? _can_continue>0 & _env.DIR<>''
|| {? fexists(_monkey+_env.DIR+_env.SEP+'excelspliter.log',0)>0
   || ferase(_monkey+_env.DIR+_env.SEP+'excelspliter.log',0)
   ?};
   _env.XLS.XLS.addErrorPath(_env.DIR+_env.SEP)
?};

_lp_our_files:=0;
_mydo:=0;

{? _can_continue>0
||
   _tab_head:=_env.TAB_HEAD;
   _tab_head.cntx_psh();
   _tab_head.index(_env.NDX_HEAD1);
   _tab_head.prefix();
   _head_size:=_tab_head.size();

   _files:=tab_tmp(2,
       'FILEPATH','STRING[255]','Ścieżka pliku'
       ,'FILENAME','STRING[255]','Nazwa pliku'

   );
   {? _tab_head.first()
   || {!
      |? _filepath:=_env.FILEPATH+_sep+_tab_head.FILE;
         {? (+_filepath)>255
         || _can_continue:=0;
            _msg:='Całkowita ścieżka do pliku nie może być dłuższa niż 255 znaków: %1'@[_filepath];
            exec('komm_add','#excel_imex',_msg,3,_env)
         ?};
         {? _can_continue>0
         ||
            {? _env.DIR_ON_SERVER>0
            || _dynamic_filepath:=_filepath
            || _dynamic_filepath:='@'+_filepath
            ?};
            {? fexists(_dynamic_filepath,0)
            || _files.prefix(_filepath,);
               {? _files.first()=0
               || _files.blank();
                  _files.FILEPATH:=_filepath;
                  _files.FILENAME:=_tab_head.FILE;
                  _files.add()
               ?}
            ?}
         ?};
         _tab_head.next() & _can_continue>0
      !}
   ?};

   _files.prefix();
   {? _files.size()=0
   || _msg:='Brak plików zgodnych z definicją importu/eksportu w wybranym folderze: %1'@[_env.FILEPATH];
      exec('komm_add','#excel_imex',_msg,2,_env);
      _can_continue:=0
   ?};

   {? _can_continue>0
   || _msg:='Import parametryzacji.'@;

::    Inicjalizacja progressa
      {? var_pres('ARGSPROG',_env)>100
      || obj_del(_env.ARGSPROG)
      ?};
      _argsprog:=exec('init','#progress');
      _env.ARGSPROG:=_argsprog;
      {? _progress>0
      ||
         _argsprog.gl_smode('|');
         _argsprog.BREAK_ON:='N';
         _argsprog.TITLE:='Import parametryzacji'@;
         _global_size:=100;
         _prg_files:=10;
         _prg_imex:=90;
         _argsprog.add_progress('Odczytywanie plików Excel'@+'…',_files.size());
         _argsprog.add_progress('Import elementu'@,100);
         _argsprog.global_size(_global_size);
         _argsprog.HEIGHT:=10
      ?};

::    Zaalokowanie obiektów do obsługi arkuszy Excel
      {? _progress=1
      || exec('start','#progress',_argsprog);
         _argsprog.next_phase()
      ?};

::    Uruchomienie transakcji
      _mydo:=do_state()=0;

      {? _transaction>0
      || {? _mydo || do() ?}
      ?};

      {? _files.first()
      || _lp:=1;
         {? _progress>0
         || _files_step_global:=_prg_files/_files.size()
         ?};
         {!
         |?
            {? _progress>0
            || _argsprog.ph_sname(1,'Odczyt zawartości pliku: %1'@[_files.FILENAME]);
               ~~
            ?};
            _can_continue:=_env.read_load(_files.FILEPATH);
            _lp+=1;
            {? _progress>0
            || _can_continue:=exec('update','#progress',_argsprog,1);
               _argsprog.global_step(_files_step_global)
            ?};
            _files.next() & _can_continue>0
         !}
      ?};
      {? _progress>0
      || {? _can_continue>0
         || _argsprog.ph_sname(1,'Odczyt plików: OK.'@)
         || _argsprog.ph_sname(1,'Odczyt plików: BŁĄD.'@)
         ?}
      ?};
::    Odczytuję tabelkę z identyfikatorami imex które są w plikach Excel
      _tab_id:=_env.read_id();

      _tab_id.cntx_psh();
      _ndx_id1:=_tab_id.ndx_tmp(,,'ID',,);
      _ndx_id2:=_tab_id.ndx_tmp(,,'LP',,,'ID',,);
      _ndx_id3:=_tab_id.ndx_tmp(,,'FUNPAR',,);
      _ndx_id4:=_tab_id.ndx_tmp(,,'SELECTED',,,'LP',,);
      _ndx_id5:=_tab_id.ndx_tmp(,,'SELECTED',,,'ID',,);
      {? _can_continue>0
      ||
         _tab_id.prefix();
         {? _tab_id.size()=0
         || _can_continue:=0;
            _msg:='Nie udało się odczytać identyfikatorów imex z plików w folderze %1'@[_filepath];
            exec('komm_add','#excel_imex',_msg,3,_env)
         ?};
         _tab_id.index(_ndx_id1);
::       Identyfikatorom nawijam LP
         {? _can_continue>0 & _tab_head.first()
         || {!
            |? _tab_id.prefix(_tab_head.ID,);
               {? _tab_id.first()
               || {!
                  |? _tab_id.LP:=_tab_head.LP;
                     _tab_id.FUNPAR:=_tab_head.FUNPAR;
                     _can_continue:=_tab_id.put();
                     _tab_id.next() & _can_continue>0
                  !}
               ?};
               _tab_head.next() & _can_continue>0
            !}
         ?};
         _tab_head.prefix();
         {? type_of(_funpar)>100
         ||
::          Jeżeli identyfikatory parametryzatory podane to nawijam pole w _tab_id
::          żeby móc zaprefiksować tylko po tych podanych
            _tab_id.index(_ndx_id3);
            {! _it:=1..obj_len(_funpar)
            |!
                _funid:=_funpar[_it];
                {? type_of(_funid)=type_of('')
                ||
                   _tab_id.prefix(_funid,);
                   {? _tab_id.first()
                   || {!
                      |? _tab_id.SELECTED:='T';
                         _tab_id.put();
                         _tab_id.next()
                      !}
                   ?}
                ?}
            !};
            _tab_id.index(_ndx_id4);
            _tab_id.prefix('T')
         || _tab_id.index(_ndx_id2);
            _tab_id.prefix()
         ?};

::       Rozpoczynamy import - pętlimy po identyfikatorach imex odczytanych z plików
         {? _progress>0
         || _argsprog.next_phase()
         ?};

         _args_before:=exec('args_before','#excel_imex',_env);
         _args_before.KIND:='IMPORT';
         _args_after:=exec('args_after','#excel_imex',_env);
         _args_after.KIND:='IMPORT';

         {? _can_continue>0 & _tab_id.first()
         || {? _progress>0
            || _imex_step_global:=_prg_imex/_tab_id.size()
            ?};
            {!
            |?
               _can_import:=1;
               {? _tab_id.ID='B_PROC'
               || _can_import:=_env.IMP_PROC
               ?};
               {? _can_import>0
               ||
                  {? var_pres('_res_core')>100
                  || obj_del(_res_core)
                  ?};
                  _res_core:=exec('import_init_core','#excel_imex',_env,_tab_id,_args_before,_args_after,_argsprog,_progress);
                  _can_continue:=_res_core.CAN_CONTINUE;
                  _lp_our_files+=_res_core.LP_OUR;
                  {? _progress>0
                  || _argsprog.global_step(_imex_step_global)
                  ?}
               ?};
               _tab_id.next() & _can_continue>0
            !}
         ?}
      ?};

      {? _transaction>0 & _can_continue>0
      ||
         {? _mydo>0
         || {? do_state()=0
            ||
::             Jeżeli coś zdjęło transakcję to komunikat
               _msg:='Import został przerwany ze względu na przedwczesne zakończenie transakcji przez którąś z formuł importujących.'@;
               exec('komm_add','#excel_imex',_msg,3,_env);
               _can_continue:=0
            ?}
         ?}
      ?};
      {? _transaction>0
      ||
         {? _can_continue=0
         || undo()
         ?}
      ?};
      {? _transaction>0
      || end()
      ?};

      {? _progress>0
      || _argsprog.ctr_stop()
      ?};

      _tab_id.cntx_pop();
      _tab_id.ndx_drop(_ndx_id1);
      _tab_id.ndx_drop(_ndx_id2);
      _tab_id.ndx_drop(_ndx_id3);
      _tab_id.ndx_drop(_ndx_id4);
      _tab_id.ndx_drop(_ndx_id5);
      ~~
   ?};
   _msg:='';

:: Komunikaty po
   _monkey:='@';
   {? _env.DIR_ON_SERVER>0
   || _monkey:=''
   ?};
   _spliter_path:=_monkey+_env.DIR+_env.SEP+'excelspliter.log';
   {? fexists(_spliter_path,0)>0
   || {? _show_res=1
      || _break:=0;
         {!
         |? _msg:='Podczas odczytu plików z Excela powstały wyjątki w bibliotece: %1.'@['excelspliter.jar'];
            _choi:=FUN.choice(_msg,,'Szczegóły...'@,,,,'Zamknij'@);
            {? _choi=1
            || {? _env.INTERM
               || _interm_path:=$SYSLOG.tm_stamp()+'.log';
                  {? fcopy(_spliter_path,_interm_path,0,1,1)
                  || txt_view(_interm_path,1,1);
                     ferase(_interm_path,1)
                  ?}
               || txt_view(_spliter_path,0,1)
               ?}
            |? _choi=0
            || _break:=1
            ?};
            _break=0
         !}
      |? _show_res=2
      || fcopy(_spliter_path,'excelspliter.log',0,1,1)
      ?}
   ?};

   {? _lp_our_files=0
   || _msg:='Nic nie zostało zaimportowane (brak plików zgodnych z definicją importu/eksportu w wybranym folderze).'@;
      {? _show_res=1
      || FUN.emsg(_msg)
      |? _show_res=2
      || _env.KOMM.add(_msg)
      ?};
      _can_continue:=0
   || {? _show_res=1
      || {? _can_continue=0
         || _msg:='Import zakończony niepowodzeniem (błąd wewnętrzny).'@;
            _choice2:=FUN.choice(_msg,,'Szczegóły'@,,,,'Zamknij'@);
            {? _choice2>0
            || _env.KOMM.select()
            ?}
         || _env.select()
         ?}
      ?}
   ?};
   _tab_head.cntx_pop()
|| {? _show_res=1 || _env.KOMM.select() ?}
?};
{? _show_res=2
||  exec('export_messages','#excel_imex',_env)
?};

_env.erase();
VAR_DEL.delete('EXCEL_ENV');

{? _can_continue>0
|| _result:=1
?};
_result


\import_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Akcja 'Importuj' w Administracji
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
exec('import_init','#excel_imex');
''


\import_singlefirm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Import dla bieżącej firmy (z wyłączeniem elementów wielofirmowych)
::   WE: [_a] - STRING - symbol firmy z której pochodzi importowana parametryzacja
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_firm_src:='';
{? var_pres('_a')=type_of('')
|| _firm_src:=_a
?};
exec('import_init','#excel_imex',,,,,,,,,,1,_firm_src)


\import_init_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia import jednej implementacji
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _b - tab_tmp - tablica z identyfikatorami imex odczytana z plików
::       _c - obj_new - argumenty dla formuły BEFORE
::       _d - obj_new - argumenty dla formuły AFTER
::       _e - obj_new - argumenty progressa
::       _f - INTEGER - 0/1 - czy wyświetlać progress
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab_id:=_b;
_args_before:=_c;
_args_after:=_d;
_argsprog:=_e;
_progress:=_f;

_transaction:=_env.TRANSACTIONS;
_tab_head:=_env.TAB_HEAD;

_result:=obj_new('CAN_CONTINUE','LP_OUR');
_result.CAN_CONTINUE:=1;
_result.LP_OUR:=0;

_can_continue:=1;
_lp_our_files:=0;

_tab_head.index(_env.NDX_HEAD2);
_tab_head.prefix(_tab_id.ID,);
{? _tab_head.first()
|| _lp_our_files+=1;
   _prg_step:=_env.PROG_STEP;
   {? _progress>0
   ||
      _size:=((_tab_id.SIZE-_tab_head.ROWSTART+1))$0;
      _argsprog.ph_ssize(2,_size);
      _argsprog.ph_start(2);
      _argsprog.ph_sname(2,'Import elementu: %1'@[_tab_head.NAME])
   ?};

   _fml_before:=_tab_head.memo_txt(,1,'BEFORE');
   _fml_after:=_tab_head.memo_txt(,1,'AFTER');
   _can_import:=1;

   _trig_msg:=0;
   _fml_imp:=_tab_head.memo_txt(,1,'TAB_IMP');
   _tab_imp:=~~;
   {? _fml_imp<>''
   || _tab_imp:=($_fml_imp)(0,1)
   ?};
   {? type_of(_tab_imp)>100 & _can_continue>0 & _env.IMP_MSG>0 & exec('is_temporary','#table',_tab_imp)=0
   ||
::    Zakładam triggery tworzące szczegółowe komunikaty o modyfikowanych rekordach
      _tab_imp.trig_a('add',"exec('import_msg','#excel_imex',_a,'add')",'xls_imp_msg_a');
      _tab_imp.trig_a('put',"exec('import_msg','#excel_imex',_a,'put')",'xls_imp_msg_p');
      _tab_imp.trig_a('del',"exec('import_msg','#excel_imex',_a,'del_po')",'xls_imp_msg_d2');
      _tab_imp.trig_b('del',"exec('import_msg','#excel_imex',1,'del_przed')",'xls_imp_msg_d1');
      _tab_imp.trig_b('memo_put',"exec('import_msg_memo','#excel_imex',1,'memo_przed',_a)",'xls_imp_mem_b');
      _tab_imp.trig_a('memo_put',"exec('import_msg_memo','#excel_imex',_a,'memo_po',_b)",'xls_imp_mem_a');
      VAR_DEL.delete('EXCEL_TT');
      EXCEL_TT:=_tab_imp;
      _trig_msg:=1;
      ~~
   ?};

   {? _fml_before<>''
   || _args_before.CONTINUE:=1;
      _mydo:=do_state()=1;
      exec('run_formula','#excel_imex',_env,_fml_before,_args_before);

      {? _transaction>0 & _can_continue>0
      ||
         {? _mydo>0
         || {? do_state()<>1
            ||
::             Jeżeli coś zdjęło transakcję to komunikat
               _msg:='Import został przerwany ze względu na przedwczesne zakończenie transakcji przez formułę BEFORE importu: %1'@[_tab_head.ID];
               exec('komm_add','#excel_imex',_msg,3,_env);
               _can_continue:=0
            ?}
         ?}
      ?};

      _can_import:=_args_before.CONTINUE;
      {? _args_before.MSG<>''
      || exec('history_add_bef','#excel_imex',_args_before,_env)
      ?}
   ?};
   {? _can_import>0 & _can_continue>0
   || _can_continue:=exec('import_main','#excel_imex',_env,_tab_id.FILE,_argsprog,_progress,_prg_step)
   ?};

   {? _fml_after<>''
   || _mydo:=do_state()=1;
      exec('run_formula','#excel_imex',_env,_fml_after,_args_after);

      {? _transaction>0 & _can_continue>0
      ||
         {? _mydo>0
         || {? do_state()<>1
            ||
::             Jeżeli coś zdjęło transakcję to komunikat
               _msg:='Import został przerwany ze względu na przedwczesne zakończenie transakcji przez formułę AFTER importu: %1'@[_tab_head.ID];
               exec('komm_add','#excel_imex',_msg,3,_env);
               _can_continue:=0
            ?}
         ?}
      ?};

      {? _args_after.MSG<>''
      || exec('history_add_bef','#excel_imex',_args_after,_env)
      ?}
   ?};

   {? _trig_msg>0
   ||
::    Wyłączam triggery tworzące szczegółowe komunikaty o modyfikowanych rekordach
      _tab_imp.trig_a('add',"",'xls_imp_msg_a');
      _tab_imp.trig_a('put',"",'xls_imp_msg_p');
      _tab_imp.trig_a('del',"",'xls_imp_msg_d2');
      _tab_imp.trig_b('del',"",'xls_imp_msg_d1');
      _tab_imp.trig_b('memo_put',"",'xls_imp_mem_b');
      _tab_imp.trig_a('memo_put',"",'xls_imp_mem_a');
      VAR_DEL.delete('EXCEL_TT');
      ~~
   ?};

   ~~
?};
_result.CAN_CONTINUE:=_can_continue;
_result.LP_OUR:=_lp_our_files;
_result


\export_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia eksport dla aktualnego rekordu tabeli .TAB_HEAD
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_b] - INTEGER - tryb działania: [1] - przetwarzamy wszystkie rekordy z dziedziny tabeli
::                                         2  - przetwarzamy tylko jeden rekord
::                                         3  - przetwarzamy wybrane rekordy  (wybrane rekordy sa w tabeli _enb.TAB_SEL)
::       [_c] - _table.ref() - ref który przetworzyć, jeżeli tryb działania=2
::   WY: obj_new - obiekt z wynikami
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_mode:=1;
{? var_pres('_b')=type_of(0)
|| _mode:=_b
?};

_one_ref:=null();
{? var_pres('_c')=type_of(SYSLOG.ref())
|| _one_ref:=_c
?};

_result:=0;

_tab_head:=_env.TAB_HEAD;
_tab_pos:=_env.TAB_POS;
_tab_sel:=_env.TAB_SEL;
_tab_sel.cntx_psh();
_tab_sel.index(_env.NDX_SEL1);
_tab_head.cntx_psh();
_tab_pos.cntx_psh();
_tab_pos.index(_env.NDX_POS1);
_tab_pos.prefix(#_tab_head.ref());
_time_start:=SYSLOG.tm_stamp();

_progress:=_env.PROGRESS;
_argsprog:=_env.ARGSPROG;

{? _tab_pos.first()
||
   _size_head:=_tab_head.size();

:: Łapię uchwyt do tabeli
   _can_continue:=1;
   _sect:=exec('komm_sect_head','#excel_imex',_env);
   _fml:='';
   _table:=~~;
   _fml:=_tab_head.memo_txt(,1,'TABLE');
   _fml_pref:=_tab_head.memo_txt(,1,'PREFIX');
   {? _can_continue>0 & _fml<>''
   ||
::    Uruchamiam formułę na uzyskanie uchwytu tabeli
      _table:=exec('run_formula','#excel_imex',_env,_fml,_mode,0)
   ?};
   {? type_of(_table)>100
   || {? var_pres('EXP_TAB',_env)>100
      || obj_del(_env.EXP_TAB)
      ?};
      _env.EXP_TAB:=_table;
      _table.cntx_psh();
      _fml:='';
      _fml:=_tab_head.memo_txt(,1,'EXPORT');

      {? exec('is_temporary','#table',_table)>0
      ||
         _req_fields:=0;
         {? var_pres('UIDREF',_table)=27
         || _req_fields:=1
         ?};
         {? _req_fields=0
         ||
            _can_continue:=0;
            _msg:='Eksportowana tabela tymczasowa musi mieć pole typu: %1 o akronimie: %2'@['STRING','UIDREF'];
            exec('komm_add','#excel_imex',_msg,3,_env,_sect)
         ?}
      ?};

      {? _can_continue>0
      || _can_continue:=_env.chk_links()
      ?};

      {? _can_continue>0 & _fml<>''
      ||
::       Ustalam nazwę pliku do którego będe pisał. Generalnie nazwa jest taka
::       jak zdefiniowana w implementacji, chyba że jesteśmy w trybie zapisu
::       asynchronicznego, wtedy pochodzi z obiektu, czyli z poziomu wyżej
         {? _mode=1
         || _env.FILENAME:=_tab_head.FILE;
            _env.FILEPATH:=_env.DIR+_env.SEP+_env.FILENAME
         |? _mode=2
         ||
::          Odkomentować jeżeli chcemy trzymać się zasady że zawartość idzie
::          zawsze do pliku zdefiniowanego przy implementacji
            {? _env.EXPORT_MODE=2
            || _env.FILENAME:=_tab_head.FILE;
               _env.FILEPATH:=_env.DIR+_env.SEP+_env.FILENAME
            ?};
            ~~
         |? _mode=3
         || _env.FILENAME:=_tab_head.FILE;
            _env.FILEPATH:=_env.DIR+_env.SEP+_env.FILENAME
         ?};
::       Uruchamiam przetwarzanie rekordów tabeli i zapis fizyczny do Excela
         {? _mode=1
         ||
::          Tryb pracy - cała dziedzina tabeli
            {? _fml_pref<>''
            ||
::             Uruchamiam formułkę na prefix
               ($_fml_pref)()
            ?};

            _filtr:=_table.f_active();
            _fml_first:="_table:=_a;_table.first()";
            _fml_next:="_table:=_a;_table.next()";
            _fml_size:="_table:=_a;_table.size()";
            {? _filtr>0
            || _fml_first:="_table:=_a;_table.f_first()";
               _fml_next:="_table:=_a;_table.f_next()";
               _fml_size:="_table:=_a;_table.f_size()"
            ?};
            {? _can_continue>0
            ||
::             Obsługa opisu i nagłówka tabeli
               _can_continue:=exec('export_head','#excel_imex',_env)
            ?};

            {? _can_continue>0 & _fml_first(_table)
            ||
::             Tworzę obiekt zasilający
               _obj:=exec('filler_obj','#excel_imex',_table,_env);

               {? type_of(_obj)>100
               || _can_continue:=1
               || _can_continue:=0;
                  _msg:='Nie udało się utworzyć obiektu zasilającego.'@;
                  exec('komm_add','#excel_imex',_msg,3,_env)
               ?};

               {? _can_continue>0
               ||
                  _lp:=1;
                  _step:=_env.PROG_STEP;
                  _size:=_fml_size(_table);
                  _prog_step:=(1000/_size)*_step;

                  {!
                  |?
                     {? _progress>0 & _lp%*_step=0
                     || {? _prog_step>0
                        ||
                           _can_continue:=exec('next_step','#progress',_argsprog,2,_prog_step)
                        ?};
                        {? _can_continue<=0
                        || KOMM.add('Eksport przerwany przez użytkownika.',2,,1)
                        ?}
                     ?};
                     {? exec('history_chk','#excel_imex',_table,_env)
                     || _obj.blank(_env);
                        exec('history_add_exp','#excel_imex',_table,-1,'N',_env);
                        _env.ASYNC_LEVEL:=0;
::                      Uruchomienie implementacji eksportu

                        _can_write:=exec('run_formula','#excel_imex',_env,_fml,_env,_obj);
                        {? type_of(_can_write)=type_of(0) & _can_write>0
                        ||
                           {? _progress>0 & _lp%*_step=0
                           ||
                              _what:=exec('obj_export2string','#excel_imex',_obj);
                              {? _what<>''
                              || _argsprog.ph_sname(_argsprog.PHASE,'Eksport: %1 (rekord: %2)'@[_tab_head.NAME,_what])
                              || _argsprog.ph_sname(_argsprog.PHASE,'Eksport: %1 '@[_tab_head.NAME])
                              ?}
                           ?};
::                         Obiekt zasilony, odpalam zapis do pliku
                           _meth:='';
                           {? _env.EXPORT_MODE=1
                           || _meth:='write_row';
                              _res:=_env.write_row(_env.FILEPATH,_obj)
                           |? _env.EXPORT_MODE=2
                           || _meth:='store_row';
                              _res:=_env.store_row(_env.FILEPATH,_obj,_table)
                           ?};
                           {? _res=0
                           || _can_continue:=0;
                              _msg:='Błąd zapisu do arkusza Excel (metoda %1)'@[_meth];
                              exec('komm_add','#excel_imex',_msg,3,_env,_sect)
                           ?};
                           exec('history_add_exp','#excel_imex',_table,_res,'T',_env)
                        ?}
                     ||
::                      Rekord już został wyeksportowany, naprawiam jego kolejność
                        _res:=_env.store_fix_order(_obj,_table)
                     ?};
                     _lp+=1;
                     _fml_next(_table) & _can_continue>0
                  !}
               ?};
               {? _can_continue>0
               ||
::                Czyszczę historię, z zapisów zabezpieczających przed rekurencją
::                ponieważ rekord nie musiał zostać wyeksportowany tym razem i nie może
::                zostać w historii, żeby inny eksport mógł go wyeksportować
                  _can_continue:=exec('history_rec_clear','#excel_imex',_env)
               ?}
            ?}
         |? _mode=2
         ||
::          Tryb pracy - jeden rekord (asynchroniczny zapis)
            {? _fml_pref<>''
            ||
::             Uruchamiam formułkę na prefix
               ($_fml_pref)()
            ?};
            _can_export:=1;
            _filtr:=_table.f_active();
            _fml_seek:="_table:=_a;_table.seek(_b)";
            {? _filtr>0
            || _fml_seek:="_table:=_a;_table.f_seek(_b)"
            ?};

            {? _fml_seek(_table,_one_ref)
            ||
               {? exec('history_chk','#excel_imex',_table,_env)
               ||
                  _args_before:=exec('args_before','#excel_imex',_env);
                  _args_before.KIND:='EXPORT';
                  _args_after:=exec('args_after','#excel_imex',_env);
                  _args_after.KIND:='EXPORT';

                  _fml_before:=_tab_head.memo_txt(,1,'BEFORE');
                  _fml_after:=_tab_head.memo_txt(,1,'AFTER');

                  {? _fml_before<>''
                  || _args_before.CONTINUE:=1;
                     _res_before:=exec('run_formula','#excel_imex',_env,_fml_before,_args_before);
                     _can_export:=_args_before.CONTINUE;
                     {? _args_before.MSG<>''
                     || exec('history_add_bef','#excel_imex',_args_before,_env)
                     ?}
                  ?};
                  {? _can_continue>0 & _can_export>0
                  ||
::                   Tworzę obiekt zasilający
                     _obj:=exec('filler_obj','#excel_imex',_table,_env);

                     {? type_of(_obj)>100
                     || _can_continue:=1
                     || _can_continue:=0;
                        _msg:='Nie udało się utworzyć obiektu zasilającego.'@;
                        _sect:=exec('komm_sect_head','#excel_imex',_env);
                        exec('komm_add','#excel_imex',_msg,3,_env,_sect)
                     ?}
                  ?};

                  {? _can_continue>0 & _can_export>0
                  ||
::                   Obsługa opisu i nagłówka tabeli
                     _can_continue:=exec('export_head','#excel_imex',_env)
                  ?};

                  {? _can_continue>0 & _can_export>0
                  ||
                     exec('history_add_exp','#excel_imex',_table,-1,'N',_env);
::                   Uruchomienie implementacji eksportu
::                     _can_write:=exec('run_formula','#excel_imex',_env,_fml,_env,_obj);

::                   Metoda spawarki - przy .write_async() każdy poziom jest na wagę złota
::                   nie uruchamiam exec('run_formula','#excel_imex',...) tylko tutaj wykonuję bezpośrednio
::                   to co tam jest zawarte
                     _time_start:=SYSLOG.tm_stamp();
                     _can_write:=(($_fml))(_env,_obj);
                     _time_end:=SYSLOG.tm_stamp();
                     _duration:=_time_end-_time_start;
                     _tab_head.TIME_IMP+=(_duration/_env.TIME_CLOCK);
                     _tab_head.put();

                     {? type_of(_can_write)=type_of(0) & _can_write>0
                     ||
::                      Obiekt zasilony, odpalam zapis do pliku
                        _meth:='';
                        {? _env.EXPORT_MODE=1
                        || _meth:='write_row';
                           _res:=_env.write_row(_env.FILEPATH,_obj)
                        |? _env.EXPORT_MODE=2
                        || _meth:='store_row';
                           _res:=_env.store_row(_env.FILEPATH,_obj,_table)
                        ?};
                        {? _res=0
                        || _can_continue:=0;
                           _msg:='Błąd zapisu do arkusza Excel (metoda %1)'@[_meth];
                           exec('komm_add','#excel_imex',_msg,3,_env,_sect)
                        ?};
                        exec('history_add_exp','#excel_imex',_table,_res,'T',_env)
                     ?}
                  ?};

                  {? _fml_after<>''
                  || exec('run_formula','#excel_imex',_env,_fml_after,_args_after);
                     {? _args_after.MSG<>''
                     || exec('history_add_bef','#excel_imex',_args_after,_env)
                     ?}
                  ?}
               ?};
               ~~
            ?}
         |? _mode=3
         ||
::          Tryb pracy - wybrane przez użytkownika rekordy
            _tab_sel.prefix(_tab_head.ID,);
            {? _tab_sel.first()
            ||
::             Tworzę obiekt zasilający
               _obj:=exec('filler_obj','#excel_imex',_table,_env);

               {? type_of(_obj)>100
               || _can_continue:=1
               || _can_continue:=0;
                  _msg:='Nie udało się utworzyć obiektu zasilającego.'@;
                  _sect:=exec('komm_sect_head','#excel_imex',_env);
                  exec('komm_add','#excel_imex',_msg,3,_env,_sect)
               ?};

               {? _can_continue>0
               ||
::                Obsługa opisu i nagłówka tabeli
                  _can_continue:=exec('export_head','#excel_imex',_env)
               ?};
               {? _can_continue>0
               ||
                  {? _fml_pref<>''
                  ||
::                   Uruchamiam formułkę na prefix
                     ($_fml_pref)()
                  ?};

                  _filtr:=_table.f_active();
                  _fml_seek:="_table:=_a; {? +_b<>16 || _table.seek(#_b,) || _table.seek(_b) ?}";
                  {? _filtr>0
                  || _fml_seek:="_table:=_a;_table.f_seek(_b)"
                  ?};

                  {!
                  |?
                     {? _fml_seek(_table,_tab_sel.REF)
                     ||
                        {? exec('history_chk','#excel_imex',_table,_env)
                        || _obj.blank(_env);
                           exec('history_add_exp','#excel_imex',_table,-1,'N',_env);
                           _env.ASYNC_LEVEL:=0;
::                         Uruchomienie implementacji eksportu
::                           _can_write:=($_fml)(_env,_obj);
                           _can_write:=exec('run_formula','#excel_imex',_env,_fml,_env,_obj);
                           {? type_of(_can_write)=type_of(0) & _can_write>0
                           ||
::                            Obiekt zasilony, odpalam zapis do pliku
                              _meth:='';
                              {? _env.EXPORT_MODE=1
                              || _meth:='write_row';
                                 _res:=_env.write_row(_env.FILEPATH,_obj)
                              |? _env.EXPORT_MODE=2
                              || _meth:='store_row';
                                 _res:=_env.store_row(_env.FILEPATH,_obj,_table)
                              ?};
                              {? _res=0
                              || _can_continue:=0;
                                 _msg:='Błąd zapisu do arkusza Excel (metoda %1)'@[_meth];
                                 exec('komm_add','#excel_imex',_msg,3,_env,_sect)
                              ?};
                              exec('history_add_exp','#excel_imex',_table,_res,'T',_env)
                           ?}
                        ?};
                        ~~
                     ?};
                     _tab_sel.next() & _can_continue>0
                  !}
               ?};
               {? _can_continue>0
               || _can_continue:=exec('history_rec_clear','#excel_imex',_env)
               ?}
            ?}
         ?};
         ~~
      ||
         _msg:='Pusta formuła na implementacje eksportu.'@;
         _sect:=exec('komm_sect_head','#excel_imex',_env);
         exec('komm_add','#excel_imex',_msg,3,_env,_sect)
      ?};
      _table.cntx_pop();
      ~~
   ||
      _msg:='Nie udało się uzyskać uchwytu do eksportowanej tabeli.'@;
      _sect:=exec('komm_sect_head','#excel_imex',_env);
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   ?}
|| _sect:=exec('komm_sect_head','#excel_imex',_env);
   _msg:='Definicja nie zawiera żadnych pól do eksportu.'@;
   exec('komm_add','#excel_imex',_msg,3,_env)
?};
_tab_pos.cntx_pop();
_tab_head.cntx_pop();

_time_end:=SYSLOG.tm_stamp();
_duration:=_time_end-_time_start;
{? _duration>0
|| _tab_head.get();
   _tab_head.TIME_ALL+=(_duration/_env.TIME_CLOCK);
   _tab_head.put()
?};

_tab_sel.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\import_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia import dla aktualnego rekordu tabeli .TAB_HEAD
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::        _b - STRING - ścieżka do pliku
::        _c - obj_new - obiekt progressa
::        _d - INTEGER - 0/1 - czy nawijać progress
::        _e - REAL - krok progressa
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_filepath:=_b;
_argsprog:=_c;
_progress:=_d;
_step:=_e;

_env.FILEPATH:=_filepath;
_mode:=_env.IMP_MODE;

_result:=0;
_can_continue:=1;

_tab_iter:=_env.TAB_ITER;
_tab_head:=_env.TAB_HEAD;
_tab_pos:=_env.TAB_POS;
_tab_head.cntx_psh();
_tab_pos.cntx_psh();
_tab_iter.cntx_psh();
_tab_pos.index(_env.NDX_POS1);
_tab_pos.prefix(#_tab_head.ref());

{? do_state()=1
|| _do_before:=1
|| _do_before:=0
?};

_time_start:=SYSLOG.tm_stamp();
{? _tab_pos.first()
||  _fml_tab:=_tab_head.memo_txt(,1,'TABLE');
    _fml_valid:=_tab_head.memo_txt(,1,'VALIDATE');
    _fml_import:=_tab_head.memo_txt(,1,'IMPORT');
   {? _can_continue>0 & _fml_tab<>''
   ||
::    Uruchamiam formułę na uzyskanie uchwytu tabeli
      _table:=($_fml_tab)(0,0)
   ?};
   {? type_of(_table)>100
   ||
::    Tworzę obiekt zasilający
      _obj:=exec('getter_obj','#excel_imex',_table,_env);

      {? type_of(_obj)>100
      || _can_continue:=1
      || _can_continue:=0;
         _msg:='Nie udało się utworzyć obiektu zasilającego.'@;
         _sect:=exec('komm_sect_head','#excel_imex',_env);
         exec('komm_add','#excel_imex',_msg,3,_env)
      ?};

      {? _can_continue>0
      || _ref:=exec('tab_iter_add','#excel_imex',_env);
         {? _ref<>null()
         || _can_continue:=_tab_iter.seek(_ref)
         || _can_continue:=0
         ?}
      ?};
      {? _can_continue>0
      ||
         _tab_head.DONE:='T';
         _tab_head.put();
         _can_read:=1;
         _args_valid:=exec('args_valid','#excel_imex',_env);
         VAR_DEL.delete('__XLS_VALID');
         __XLS_VALID:=_args_valid;
         __EMPTY_COL:='';
         _lp:=0;
         {!
         |? _can_read>0
         |!
::          Czytam wiersz z Excel i wypełniam obiekt wartościami
            _can_read:=_env.read_row(_filepath,_obj);
            {? _can_read<0
            || _can_continue:=0
            ?};

            _lp+=1;
            {? _progress>0 & _lp%*_step=0
            || _what:=exec('obj_import2string','#excel_imex',_obj);
               {? _what<>''
               || _argsprog.ph_sname(_argsprog.PHASE,'Import elementu: %1 (rekord: %2)'@[_tab_head.NAME,_what])
               || _argsprog.ph_sname(_argsprog.PHASE,'Import elementu: %1 '@[_tab_head.NAME])
               ?};
               _can_continue:=exec('update','#progress',_argsprog,_step)
            ?};

            {? _can_read>0
            ||
::             Obiekt wypełniony wartościami, uruchamiam walidator
               _valid_res:=1;

               {? _fml_valid<>''
               || _args_valid.blank();
::                Uruchamiam formułę na walidację
                  exec('run_formula','#excel_imex',_env,_fml_valid,_obj,_env.IMP_MODE,_args_valid);

                  {? type_of(_args_valid.MSG)=type_of('')
                  ||
                     {? _args_valid.MSG<>''
                     || exec('history_add_imp','#excel_imex',_args_valid,_env)
                     ?}
                  ||
                     {? var_pres('MSG',_args_valid)>100
                     || obj_del(_args_valid.MSG)
                     ?};
                     _args_valid.MSG:='Błędny typ argumentu .MSG w formule: %1'@[_fml_valid];
                     exec('history_add_imp','#excel_imex',_args_valid,_env)
                  ?}
               ?};
               {? _args_valid.RESULT>0 & _fml_import<>''
               ||
::                Jeżeli formuła na walidację się powiodła to uruchamiam formułę na import
                  exec('run_formula','#excel_imex',_env,_fml_import,_obj,_env.IMP_MODE,_args_valid);
                  {? type_of(_args_valid.MSG)=type_of('')
                  ||
                     {? _args_valid.MSG<>''
                     || exec('history_add_imp','#excel_imex',_args_valid,_env)
                     ?}
                  ||
                     {? var_pres('MSG',_args_valid)>100
                     || obj_del(_args_valid.MSG)
                     ?};
                     _args_valid.MSG:='Błędny typ argumentu .MSG w formule: %1'@[_fml_import];
                     exec('history_add_imp','#excel_imex',_args_valid,_env)
                  ?}
               ?}
            ?};
            _obj.blank(_env)
         !};
         VAR_DEL.delete('__XLS_VALID','__EMPTY_COL')
      ?};
      ~~
   ||
      _msg:='Nie udało się uzyskać uchwytu do importowanej tabeli.'@;
      _sect:=exec('komm_sect_head','#excel_imex',_env);
      exec('komm_add','#excel_imex',_msg,3,_env)
   ?}
|| _sect:=exec('komm_sect_head','#excel_imex',_env);
   _msg:='Definicja nie zawiera żadnych pól do eksportu.'@;
   exec('komm_add','#excel_imex',_msg,3,_env)
?};

_do_after:=do_state();
{? _do_after<>_do_before
|| _can_continue:=0;
   _sect:=exec('komm_sect_head','#excel_imex',_env);
   _msg:='Formuły importowe implementacji: %1 zmieniły status transakcji, czego nie mogą robić. Import został przerwany.'@[_tab_head.ID];
   exec('komm_add','#excel_imex',_msg,3,_env,_sect)
?};

_tab_iter.cntx_pop();
_tab_pos.cntx_pop();
_tab_head.cntx_pop();

_time_end:=SYSLOG.tm_stamp();
_duration:=_time_end-_time_start;
{? _duration>0
|| _tab_head.get();
   _tab_head.TIME_ALL+=(_duration/_env.TIME_CLOCK);
   _tab_head.put()
?};
{? _can_continue>0
|| _result:=1
?};
_result


\export_head
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia zapis opisu i nagłowka tabeli
::       Kontekst pracy - rekord tabeli .TAB_HEAD
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};

_can_continue:=1;
_result:=0;

_tab_head:=_env.TAB_HEAD;
_tab_iter:=_env.TAB_ITER;
_tab_pos:=_env.TAB_POS;
_tab_pos.cntx_psh();
_tab_pos.index(_env.NDX_POS1);
_tab_pos.prefix(#_tab_head.ref());
_tab_iter.cntx_psh();
_tab_iter.index(_env.NDX_ITER1);
_tab_iter.prefix(#_tab_head.ref(),_env.FILEPATH,);
{? _tab_iter.first()=0
||
::  Brak rekordu w _tab_iter - zakładam
   _ref:=exec('tab_iter_add','#excel_imex',_env);
   {? _ref<>null()
   || _tab_iter.prefix();
      _can_continue:=_tab_iter.seek(_ref)
   || _can_continue:=0
   ?}
?};
{? _can_continue>0 & _tab_iter.DESC_OK=0
||
:: Utworzenie opisu zakładki
   {? _env.write_description(_env.FILEPATH)>0
   || _tab_iter.DESC_OK:=1;
      _can_continue:=_tab_iter.put()
   || _can_continue:=0;
      _msg:='Nie udał się zapis opisu do pliku: %1 (metoda write_description)'@[_env.FILEPATH];
      exec('komm_add','#excel_imex',_msg,3,_env)
   ?}
?};
{? _can_continue>0 & _tab_iter.HEAD_OK=0
||
:: Utworzenie hedera tabeli
   {? _env.write_header(_env.FILEPATH)>0
   || _tab_iter.HEAD_OK:=1;
      _can_continue:=_tab_iter.put()
   || _can_continue:=0;
      _msg:='Nie udał się zapis nagłówka tabeli do pliku: %1 (metoda write_header)'@[_env.FILEPATH];
      exec('komm_add','#excel_imex',_msg,3,_env)
   ?}
?};
_tab_iter.cntx_pop();
_tab_pos.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\tab_iter_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dodaje rekord do .TAB_ITER
::       Kontekst pracy - rekord tabeli .TAB_HEAD i .TAB_POS
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: .TAB_ITER.ref() lub null jeżeli się nie udało
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_can_continue:=0;
_result:=null();

_tab_pos:=_env.TAB_POS;
_tab_head:=_env.TAB_HEAD;
_tab_iter:=_env.TAB_ITER;
_tab_iter.cntx_psh();
_tab_iter.index(_env.NDX_ITER1);
_tab_iter.prefix(#_tab_head.ref(),_env.FILEPATH,);
{? _tab_iter.first()=0
||
::  Brak rekordu w _tab_iter - zakładam
   _tab_iter.blank();
   _tab_iter.HEAD:=#_tab_head.ref();
   _tab_iter.FILE:=_env.FILEPATH;
   _tab_iter.ROWSTART:=_tab_head.ROWSTART;
   _tab_iter.ROWNOW:=_tab_head.ROWSTART;
   _tab_iter.COLUMN:=_tab_head.COLUMN;
   _tab_iter.POSSIZE:=_tab_pos.size();
   _tab_iter.SHEET:=_tab_head.SHEET;
   _tab_iter.ADD_ROWS:=_tab_head.ADD_ROWS;
   _tab_iter.ID:=_tab_head.ID;
   _tab_iter.LOCK:=_tab_head.LOCK;
   _can_continue:=_tab_iter.add();
   {? _can_continue>0
   || _result:=_tab_iter.ref()
   ?}
?};
_tab_iter.cntx_pop();
_result


\run_formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Uruchamia formułę z implementacji
::       Kontekst pracy - rekord .TAB_HEAD
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::        _b  - STRING - formuła do uruchomienia
::        [_c,.._z] - argumenty do formuli
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_formula:=_b;
_formula:="params_set(params_get());"+_formula;

_zmienne:=obj_new(_);
_result:=~~;
_duration:=0;
{? _>2
||
:: Mapowator argumentów do przekazanej formuły - wymagany doktorat na MIT żeby zrozumieć
   _rule:="_a(";
   {! __:=3.._
   |! _rule+={? type_of(_[__])>0
             || _zmienne[__]:=_[__] ; '_b['+form(__)+']'
             || ''
             ?}+','
   !};
   _rule:=$((_rule-1)+')');
   _time_start:=SYSLOG.tm_stamp();
   _result:=_rule($_formula,_zmienne);
   _time_end:=SYSLOG.tm_stamp();
   _duration:=_time_end-_time_start
||
:: Bezargumentowo idzie łatwo
   _time_start:=SYSLOG.tm_stamp();
   _result:=($_formula)();
   _time_end:=SYSLOG.tm_stamp();
   _duration:=_time_end-_time_start
?};
{? _duration>0
|| _tab_head:=_env.TAB_HEAD;
   _tab_head.get();
   _tab_head.TIME_IMP+=(_duration/_env.TIME_CLOCK);
   _tab_head.put()
?};
_result


\history_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Sprawdza czy dany rekord tabeli może byc wyeksportowany (czy już nie był wcześniej eksportowany)
::       Kontekst pracy - rekord tabeli _a
::   WE: _a - TABLE - uchwyt do tabeli którą eksportujemy
::       [_b] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: 0 - nie można eksportować
::       1 - można
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
{? var_pres('_b')>100
|| _env:=_b
|| _env:=params_get().env_xls
?};
_result:=1;
_tab_hist:=_env.TAB_HIST;
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST1);
_id:=exec('history_id','#excel_imex',_table);
_tab_hist.prefix(_id,_env.TAB_HEAD.ID);
{? _tab_hist.first()
|| _result:=0
?};
_tab_hist.cntx_pop();
_result


\history_rec_clear
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Czyści z historii wszystkie rekordy zabezpieczające przed rekurencją
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_result:=0;
_can_continue:=1;

_tab_hist:=_env.TAB_HIST;
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST2);
_tab_hist.prefix('N');
{? _tab_hist.first()
|| {!
   |? _can_continue:=_tab_hist.del(,1);
      _tab_hist.first() & _can_continue>0
   !}
?};
_tab_hist.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\history_add_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dodaje info do historii że rekord już został wyeksportowany
::       Kontekst pracy - rekord tabeli _a
::   WE: _a - TABLE - uchwyt do tabeli którą eksportujemy
::       _b - REAL - wynik działania metody niskopoziomowej zapisującej do Excela
::       _c - STRING - czy już wyeksportowano, czy nie (zapis zabezpieczający przed przekroczeniem rekurencji)
::       [_d] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_e] - STRING - domyślna treść komunikatu o tym że nie wyeksportowano
::       [_f] - STRING - id komunikatu
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_reswrite:=_b;
_exported:=_c;
{? var_pres('_d')>100
|| _env:=_d
|| _env:=params_get().env_xls
?};

_result:=1;
_tab_head:=_env.TAB_HEAD;
_tab_hist:=_env.TAB_HIST;
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST1);

_id:='';
{? var_pres('_f')=type_of('')
|| _id:=_f
?};
{? _id=''
|| _id:=exec('history_id','#excel_imex',_table)
?};

_what:=_id;

{? var_pres('SYMBOL',_table)=27
|| _what:=_table.SYMBOL
|? var_pres('SYM',_table)=27
|| _what:=_table.SYM
|? var_pres('NAME',_table)=27
|| _what:=_table.NAME
|? var_pres('NAM',_table)=27
|| _what:=_table.NAM
|? var_pres('NAZWA',_table)=27
|| _what:=_table.NAZWA
|? var_pres('NAZ',_table)=27
|| _what:=_table.NAZ
|? var_pres('KOD',_table)=27
|| _what:=_table.KOD
|? var_pres('OPIS',_table)=27
|| _what:=_table.OPIS
?};

:: Uwaga #to_string został porzucony w tym miejscu ze względu na jego fatalną wydajność
::{? exec('is_temporary','#table',_table)=0
::|| _what:=exec('record','#to_string',_table.ref())
::?};

_error_msg:='Nie wyeksportowano rekordu (błąd zapisu): %1'@[_what];
{? var_pres('_e')=type_of('')
|| _error_msg:=_e
?};

_tab_hist.prefix(_id,_tab_head.ID);
{? _tab_hist.first()=0
||
   _tab_hist.blank();
   _tab_hist.EXPORTED:=_exported;

   _tab_hist.REF:=_id;
   {? type_of(_reswrite)=type_of(0)
   || _tab_hist.RESWRITE:=_reswrite
   ?};
   {? _tab_hist.RESWRITE>0
   || _txt:='Wyeksportowano rekord: %1'@[_what];
      _tab_hist.memo_set(_txt,'MESSAGE');
      _tab_hist.LINE:=_txt
   || _txt:=_error_msg;
      _tab_hist.memo_set(_txt,'MESSAGE');
      _tab_hist.LINE:=_txt
   ?};
   _tab_hist.ID:=_tab_head.ID;
   _tab_hist.LP:=_tab_hist.size()+1;
   _tab_hist.FILE:=_env.FILENAME;
   _tab_hist.UIDREF:=$SYSLOG.tm_stamp();
   _result:=_tab_hist.add();
   {? _result>0 || _result:=_tab_hist.memo_put() ?};
   {? _result>0 & _exported='T'
   || _tab_head.get();
      _tab_head.HISTSIZE+=1;
      _tab_head.put()
   ?}
|| _tab_hist.EXPORTED:=_exported;
   {? type_of(_reswrite)=type_of(0)
   || _tab_hist.RESWRITE:=_reswrite
   ?};
   {? _tab_hist.RESWRITE>0
   || _txt:='Wyeksportowano rekord: %1'@[_what];
      _tab_hist.memo_set(_txt,'MESSAGE');
      _tab_hist.LINE:=_txt
   || _txt:=_error_msg;
      _tab_hist.memo_set(_txt,'MESSAGE');
      _tab_hist.LINE:=_txt
   ?};
   {? _result>0 & _exported='T'
   || _tab_head.get();
      _tab_head.HISTSIZE+=1;
      _tab_head.put()
   ?};
   _result:=_tab_hist.put();
   {? _result>0 || _result:=_tab_hist.memo_put() ?}
?};
_tab_hist.cntx_pop();
_result


\history_add_bef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dodaje info do historii że były jakieś problemy w czasie wykonywania
::       formuł BEFORE lub AFTER
::   WE: _a - obj_new() obiekt z argumentami formuł BEFORE/AFTER, wynik działania exec('args_before','#excel_imex')
::       [_b] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: 0 / 1
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj_before:=_a;
{? var_pres('_b')>100
|| _env:=_b
|| _env:=params_get().env_xls
?};
_details:=0;
{? var_pres('_c')=type_of(0)
|| _details:=_c
?};
_result:=1;

_lines:=~~;
_first_line:='';
{? _obj_before.MSG<>'' & _obj_before.MSG*'\n'>0
|| _lines:=spli_str(_obj_before.MSG,'\n');
   _first_line:=_lines[1]
|| _first_line:=_obj_before.MSG
?};

_tab_head:=_env.TAB_HEAD;
_tab_hist:=_env.TAB_HIST;
_tab_iter:=_env.TAB_ITER;
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST1);
_tab_hist.prefix();
_tab_hist.blank();
_tab_hist.EXPORTED:='T';
_tab_hist.LINE:=_first_line;
_tab_hist.memo_set(_obj_before.MSG,'MESSAGE');
_tab_hist.ID:=_tab_head.ID;
_tab_hist.LP:=_tab_hist.size()+1;
_tab_hist.FILE:=_tab_head.FILE;
_tab_hist.SHEET:=_tab_head.SHEET;
_tab_hist.DETAILS:=_obj_before.MSG_DETAILS;
_tab_hist.UIDREF:=$SYSLOG.tm_stamp();
_result:=_tab_hist.add();
{? _result>0 || _result:=_tab_hist.memo_put() ?};
{? _result>0
|| _tab_head.get();
   _tab_head.HISTSIZE+=1;
   _tab_head.put()
?};
_tab_hist.cntx_pop();
_obj_before.clear();
_result


\history_add_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dodaje info do historii że coś się zadziało podczas importu
::       Kontekst pracy - rekord tabeli .TAB_HEAD
::   WE: _a - obj_new() obiekt z resultem walidatora, wynik działania exec('args_valid','#excel_imex')
::       [_b] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_c] - INTEGER - [0]/1 - czy dla rekordu historii będzie dostępna akcja 'Szczegóły'
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_obj_valid:=_a;
{? var_pres('_b')>100
|| _env:=_b
|| _env:=params_get().env_xls
?};
_details:=0;
{? var_pres('_c')=type_of(0)
|| _details:=_c
?};
_lines:=~~;
_first_line:='';
{? _obj_valid.MSG<>'' & _obj_valid.MSG*'\n'>0
|| _lines:=spli_str(_obj_valid.MSG,'\n');
   _first_line:=_lines[1]
|| _first_line:=_obj_valid.MSG
?};
_result:=1;
_tab_head:=_env.TAB_HEAD;
_tab_hist:=_env.TAB_HIST;
_tab_iter:=_env.TAB_ITER;
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST1);
_tab_hist.prefix();
_tab_hist.blank();
_tab_hist.EXPORTED:='T';
_tab_hist.LINE:=_first_line;
_tab_hist.memo_set(_obj_valid.MSG,'MESSAGE');
_tab_hist.RESVALID:=_obj_valid.RESULT;
_tab_hist.ID:=_tab_head.ID;
_tab_hist.LP:=_tab_hist.size()+1;
_tab_hist.FILE:=_tab_head.FILE;
_tab_hist.SHEET:=_tab_head.SHEET;
_tab_hist.ROW:=_tab_iter.ROWNOW+1;
_tab_hist.DETAILS:=_obj_valid.MSG_DETAILS;
_tab_hist.ID_GRP:=_obj_valid.ID_GRP;
_tab_hist.UIDREF:=$SYSLOG.tm_stamp();
_result:=_tab_hist.add();
{? _result>0 || _result:=_tab_hist.memo_put() ?};
{? _result>0
|| _tab_head.get();
   _tab_head.HISTSIZE+=1;
   _tab_head.put()
?};
_tab_hist.cntx_pop();
_obj_valid.clear();
_result


\history_add_imp2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Dodaje szczegółowe info do historii że coś zmodyfikowano
::       Kontekst pracy - rekord tabeli .TAB_HEAD
::   WE: _a - obj_new() obiekt z resultem walidatora, wynik działania exec('args_valid','#excel_imex')
::       _b - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _c - STRING - ref modyfikowanego/dodanego rekordu
::       _d - STRING - rodzaj akcji
::       [_e] - INTEGER - [0]/1 - czy dla rekordu historii będzie dostępna akcja 'Szczegóły'
::       [_f] - STRING  - akronim tabeli na ktorą został założony trigger
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_obj_valid:=_a;
{? var_pres('_b')>100
|| _env:=_b
|| _env:=params_get().env_xls
?};
_ref:=_c;
_kind:=_d;

_kind:='import_msg_'+_kind;

_details:=0;
{? var_pres('_e')=type_of(0)
|| _details:=_e
?};

_tab_acr:='';
{? var_pres('_f')=type_of('')
|| _tab_acr:=_f
?};

_result:=1;
_tab_head:=_env.TAB_HEAD;
_tab_hist:=_env.TAB_HIST;
_tab_iter:=_env.TAB_ITER;
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST4);
_tab_hist.prefix(_ref,_tab_head.ID,_kind,);
_lines:=~~;
_first_line:='';
{? _obj_valid.MSG<>'' & _obj_valid.MSG*'\n'>0
|| _lines:=spli_str(_obj_valid.MSG,'\n');
   _first_line:=_lines[1]
|| _first_line:=_obj_valid.MSG
?};
{? _tab_hist.first()=0
||
   _tab_hist.blank();
   _tab_hist.IS_MOD:=1;
   _tab_hist.REF:=_ref;
   _tab_hist.EXPORTED:='T';
   _tab_hist.LINE:=_first_line;
   _tab_hist.MOD:=_kind;
   _tab_hist.MOD_ACR:=_tab_acr;
   _tab_hist.memo_set(_obj_valid.MSG,'MESSAGE');
   _tab_hist.RESVALID:=1;
   _tab_hist.ID:=_tab_head.ID;
   _tab_hist.LP:=_tab_hist.size()+1;
   _tab_hist.FILE:=_tab_head.FILE;
   _tab_hist.SHEET:=_tab_head.SHEET;
   _tab_hist.ROW:=_tab_iter.ROWNOW+1;
   _tab_hist.DETAILS:=_obj_valid.MSG_DETAILS;
   _tab_hist.ID_GRP:=_obj_valid.ID_GRP;
   _tab_hist.UIDREF:=$SYSLOG.tm_stamp();
   _result:=_tab_hist.add();
   {? _result>0 || _result:=_tab_hist.memo_put() ?};
   {? _result>0
   || _tab_head.get();
      _tab_head.HISTSIZE+=1;
      _tab_head.put()
   ?}
||
   _txt:=_tab_hist.memo_txt(,1,'MESSAGE');
:: Obcinam pierwszą linię z komunikatu który doszedł, bo zawiera już to co było w notatce
   _new_txt:='';
   {? type_of(_lines)>100
   || {! _it:=2..obj_len(_lines)
      |! _ll:=_lines[_it];
         {? _ll<>''
         || _new_txt+=_ll+'\n'
         ?}
      !}
   ?};
   _txt+=_new_txt;
   _tab_hist.memo_set(_txt,'MESSAGE');
   _result:=_tab_hist.memo_put()
?};
_tab_hist.cntx_pop();
_obj_valid.clear();
_result



\komm_sect_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca sekcję do komunikatów - inicjalizacja z plików xls_*.fml
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_sect:='Wczytywanie definicji imex z formuły: %1'@[$_env.INIT_FML];
_sect


\komm_sect_head
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca sekcję do komunikatów - zapis do pliku excel jednej definicji
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       Kontekst wywołania: rekord tabeli _env.TAB_HEAD
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_sect:='ID definicji: %1, nazwa definicji: %2, plik: %3, arkusz: %4'@[_env.TAB_HEAD.ID,_env.TAB_HEAD.NAME,_env.TAB_HEAD.FILE,_env.TAB_HEAD.SHEET];
_sect


\komm_sect_iter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Zwraca sekcję do komunikatów - odczyt z pliku excel jednej definicji
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       Kontekst wywołania: rekord tabeli _env.TAB_ITER
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_sect:='Arkusz: %1'@[_env.TAB_ITER.SHEET];
_sect


\dialog_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wyświetla dialog z pytaniem gdzie mają być eksportowana parametryzacja
::   WE: _a - INTEGER - 1 - odczyt
::                      2 - zapis
::       [_b] - STRING - opcjonalny tytul okienka
::   WY: STRING - ścieżka lub '' jeżeli użytkownik zrezygnował
::  TAG: <PUBLICZNA>
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
_mode:=_a;
{? exec('interm','#system')>0
|| FUN.emsg(exec('interm_nacc_msg','#system'));
   return('')
?};
_result:='';

_txt:={? _mode=1 || 'Import parametryzacji' || 'Eksport parametryzacji' ?};
_force_txt:=~~;
{? var_pres('_b')=type_of('')
|| _force_txt:=_b
?};
{? type_of(_force_txt)=type_of('')
|| {? _force_txt<>''
   || _txt:=_force_txt
   ?}
?};

ctr_set('!application', 'filechooser','reset');
ctr_set('!application', 'filechooser','setMultiSelectionEnabled',0);
ctr_set('!application', 'filechooser','setFileSelectionMode','DIRECTORIES_ONLY');
ctr_set('!application', 'filechooser','setDialogTitle',_txt);
{? _mode=1
|| _can_continue:=ctr_call('!application', 'filechooser','showOpenDialog')
|? _mode=2
|| _can_continue:=ctr_call('!application', 'filechooser','showSaveDialog')
?};
{? _can_continue>0
|| _result:=ctr_call('!application', 'filechooser','getSelectedFile')
?};
{? _mode=2 & _result<>''
|| _files:=exec('dir','#file','@'+_result);
   {? _files.first()
   || {? ~FUN.ask('Folder %1 nie jest pusty.\nCzy na pewno wyeksportować pliki?'@[_result])
      || _result:=''
      ?}
   ?}
?};
_result


\def2table_head
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Dodaje obiekt do tabeli tymczasowej z nagłówkami imex
::   WE: _a - obj_new - obiekt który dodać - wynik działania exec('arg_head','#excel_imex')
::       _b - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_obj:=_a;
{? var_pres('_b')>100
|| _env:=_b
|| _env:=params_get().env_xls
?};

_result:=1;

_tab:=_env.TAB_HEAD;

{? obj_ntab(_obj)>0
|| _can_add:=1;
   _tab.cntx_psh();

   _sect:=exec('komm_sect_file','#excel_imex',_env);

   _tab.index(_env.NDX_HEAD2);
   _tab.prefix(_obj.ID,);
   {? _tab.first()
   || _can_add:=0;
      _msg:='Imex o identyfikatorze %1 już istnieje w definicji (ID musi być unikalne)'@[_obj.ID];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   ?};

   {? _can_add>0
   ||
      _tab.prefix();
      _tab.blank();
      _tab.LP:=_tab.size()+1;
      _tab.TIME_JM:=_env.TIME_JM;
      _tab.SELECTED:='N';
      _fml_memo_put:=exec('obj2table','#excel_imex',_obj,_tab);

::    obsługa pola SHEET
      _sheet_error:=0;
      {? _tab.SHEET*'='>0 & _tab.SHEET*','>0
      || _split:=spli_str(_tab.SHEET,'=');

         {? obj_len(_split)>=2
         || _tab.SHEET:=_split[1];
            _location:=_split[2];

            _split2:=spli_str(_location,',');
            {? obj_len(_split2)>=2
            || _tab.COLUMN:=#_split2[1];
               _tab.ROWSTART:=#_split2[2]
            || _sheet_error:=1
            ?}
         || _sheet_error:=1
         ?}
      || _sheet_error:=1
      ?};
      {? _sheet_error>0
      ||
         _can_add:=0;
         _result:=0;
         _sect:=exec('komm_sect_file','#excel_imex',_env);
         _msg:='Niepoprawny format pola %1. Pole musi zawierać nazwę arkusza i startowy wiersz i kolumnę.'@['SHEET'];
         exec('komm_add','#excel_imex',_msg,3,_env,_sect)
      ?};

      _tab.cntx_psh();
      _tab.index(_env.NDX_HEAD7);
      _tab.prefix(_obj.FILE,_tab.SHEET,);
      {? _tab.first()
      || _can_add:=0;
         _msg:='Zakładka %1 już istnieje w pliku: %2 (zakładka i plik muszą być unikalne w całej definicji imex)'@[_tab.SHEET,_obj.FILE];
         exec('komm_add','#excel_imex',_msg,3,_env,_sect)
      ?};
      _tab.cntx_pop();

      {? _obj.SELECT<>''
      || _tab.CAN_SEL:='T'
      || _tab.CAN_SEL:='N'
      ?};

      {? _can_add>0
      || {? _tab.add()
         || ($_fml_memo_put)(_tab);
            _result:=1
         || _result:=0
         ?}
      || _result:=0
      ?};
      {? _result>0
      ||
::       Zakładam pozycje w definicji
         _fields:=_obj.FIELDS;
::       Tworzę argumenty do wypełnienia przez implementację
         _obj_fields:=exec('args_fields','#excel_imex',_env);
::       Uruchamiam formułę z implementacji na utworzenie pól
         _env.FIELDS_OK:=1;
         _fields(_obj_fields);
         _result:=_env.FIELDS_OK
      ?}
   ?};
   _tab.cntx_pop()
|| _sect:=exec('komm_sect_file','#excel_imex',_env);
   _msg:='Błąd wewnętrzny formuły head2table - przekazany obiekt nie jest tablicą';
   exec('komm_add','#excel_imex',_msg,3,_env,_sect)
?};
_result


\obj2table_pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Na podstawie przekazanego obiektu definiującego pola do importu/eksportu
::       tworzy rekord w tabeli .TAB_POS
::   WE: _a - obj_new - obiekt który dodać - wynik działania exec('args_fields','#excel_imex')
::       [_b] - .TAB_HEAD.ref() - ref nagłówka lub bieżący rekord
::       [_c] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_obj:=_a;

_can_continue:=1;
_result:=0;

{? var_pres('_c')>100
|| _env:=_c
|| _env:=params_get().env_xls
?};

_tab_head:=_env.TAB_HEAD;
_tab_head.cntx_psh();
_header:=_tab_head.ref();
{? var_pres('_b')>0
|| _header:=_b;
   _tab_head.prefix();
   _can_continue:=_tab_head.seek(_header)
?};

_tab:=_env.TAB_POS;
_tab.cntx_psh();
{? _can_continue>0
||
   _tab.index(_env.NDX_POS1);
   _tab.prefix(#_header);
   _tab.blank();
   _tab.HEAD:=#_header;
   _tab.LP:=_tab.size()+1;

   _names:=obj_ntab_names(_obj);

   _sect:=exec('komm_sect_file','#excel_imex',_env);
   {? type_of(_obj.FIELD)<>type_of('') | _obj.FIELD=''
   || _can_continue:=0;
      _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel'@['FIELD'];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   || {? _obj.FIELD*' '>0
      || _can_continue:=0;
         _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel (zawiera spacje)'@['FIELD'];
         exec('komm_add','#excel_imex',_msg,3,_env,_sect)
      ?};
      {? _env.EXPORT_MODE=2
      ||
         {? +_obj.FIELD>8
         || _can_continue:=0;
            _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel (dłuższe niż 8 znaków)'@[_obj.FIELD];
            exec('komm_add','#excel_imex',_msg,3,_env,_sect)
         ?}
      ?}
   ?};
   {? type_of(_obj.COLUMN)<>type_of('') | _obj.COLUMN=''
   || _can_continue:=0;
      _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel'@['COLUMN'];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   ?};
   {? type_of(_obj.EDITABLE)<>type_of(0)
   || _can_continue:=0;
      _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel'@['EDITABLE'];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   ?};
   {? type_of(_obj.COLOR)<>type_of('')
   || _can_continue:=0;
      _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel'@['COLOR'];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   ?};
   {? type_of(_obj.DESC)<>type_of('')
   || _can_continue:=0;
      _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel'@['DESC'];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   ?};
   {? type_of(_obj.TYPE)<>type_of(0)
   || _can_continue:=0;
      _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel'@['TYPE'];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   || {? _obj.TYPE<>0 & _obj.TYPE<>1 & _obj.TYPE<>2 & _obj.TYPE<>4 & _obj.TYPE<>5
      || _can_continue:=0;
         _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel (dopuszczalne wartości: %2, %3, %4, %5)'@
               ['TYPE','1','2','4','5'];
         exec('komm_add','#excel_imex',_msg,3,_env,_sect)
      ?}
   ?};
   {? type_of(_obj.DEC)<>type_of(0)
   || _can_continue:=0;
      _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel'@['DEC'];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   || _from:=0; _to:=6;
      {? _obj.DEC<_from | _obj.DEC>_to
      || _can_continue:=0;
         _msg:='Nieprawidłowe pole %1 w definicji pól do importu Excel (dopuszczalne wartości w przedziale %2 - %3)'@
               ['DEC',$_from,$_to];
         exec('komm_add','#excel_imex',_msg,3,_env,_sect)
      ?}
   ?}
?};

{? _can_continue>0
|| _fml_memo_put:=exec('obj2table','#excel_imex',_obj,_tab);
   _tab.EXCEL_ID:=_tab_head.ID+'.'+_tab.FIELD;
   ~~
?};

{? _can_continue>0
|| {? _tab.add()
   || ($_fml_memo_put)(_tab);
      _result:=1
   || _result:=0
   ?}
?};
_tab.cntx_pop();
_tab_head.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\obj2table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Wypełnia bufor tabeli wartościami z obiektu
::   WE: _a - obj_new - tablica nazwana
::       _b - TABLE - tabela
::   WY: STRING - formuła do putnięcia SYSMEMO
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_tab:=_b;
_names:=obj_ntab_names(_obj);
_fml_memo_put:='_tab:=_a;\n';
{! _it:=1..obj_len(_names)
|!
   _rule:='
      _tab:=_a;
      _obj:=_b;
      _result:=\'\';
      _obj_value:=_obj['+$_it+'];
      {? type_of(_obj_value)=type_of("")
      || _obj_value:=$_obj_value
      ?};
      _type_nr:=var_pres(\''+_names[_it]+'\',_tab);
      {? _type_nr>0
      ||
         {? _type_nr=36
         || _tab.memo_set(_obj_value,\''+_names[_it]+'\');
            _result:=\'_tab.memo_put(,\\\''+_names[_it]+'\\\');\'
         || _tab.'+_names[_it]+':=_obj_value
         ?}
      ?};
      _result
   ';
   _fml_memo_put+=($_rule)(_tab,_obj)
!};
_fml_memo_put+='~~';
_fml_memo_put


\filler_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy na podstawie definicji tablicę nazwaną która musi zostać wypełniona
::       przez implementację eksportu. Przesyła tę tablicę do zapisu excel
::   WE: _a - TABLE - uchwyt do eksportowanej tabeli
::       [_b] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_c] - .TAB_HEAD.ref lub bieżący rekord

::   WY: obj_new() - utworzony i zaincjowany wartościami domyślnymi dla danego typu
::                   obiekt
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
{? var_pres('_b')>100
|| _env:=_b
|| _env:=params_get().env_xls
?};
_tab_head:=_env.TAB_HEAD;
_ref:=null();
{? var_pres('_c')=type_of(_tab_head.ref())
|| _ref:=_c
?};
_result:=0;
_can_continue:=1;

_tab_head.cntx_psh();
{? _ref<>null()
|| _tab_head.prefix();
   {? _tab_head.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _tab_pos:=_env.TAB_POS;
   _tab_pos.cntx_psh();
   _tab_pos.index(_env.NDX_POS1);
   _tab_pos.prefix(#_tab_head.ref());
   {? _tab_pos.first()
   || _rule_new:='obj_new( \'GOTO\',\'blank\'';
      _rule_val:='_env:=_a;';
      _rule_edit:='';
      _rule_color:='';
      _rule_desc:='';
      _rule_type:='';
      _rule_dec:='';
      {!
      |?
         _type:=0;
         _tab_pos.memo_get(,'DESC');
         _desc:=_tab_pos.memo_txt(,,'DESC');
::       Jeżeli typ jest określony, to go pobieram z definicji
         {? _tab_pos.TYPE<>0
         || _type:=_tab_pos.TYPE;
            _var_pres:=_tab_pos.TYPE
::       Jeżeli pole do excela w tabeli którą eksportuję istnieje to biorę typ z tabeli
         |? var_pres(_tab_pos.FIELD,_table)>0
         || _type:=($('_table:=_a;type_of(_table.'+_tab_pos.FIELD+')'))(_table);
            _var_pres:=($('_table:=_a;var_pres(\''+_tab_pos.FIELD+'\',_table)'))(_table);
            {? _var_pres=36
            ||
::             Specjalna obsługa dla SYS_MEMO
               _type:=2
            |? _var_pres=26
            ||
::             Specjalna obsługa dla złączeń
               _type:=2
            ?}
::       Jeżeli nie ma pola które eksportuję do excela w tabeli to przyjmuję typ domyślny (string)
         || _type:=type_of('');
            _var_pres:=_type
         ?};
::       update typu w definicji
         {? _type<>0 || _tab_pos.TYPE:=_type; _tab_pos.put() ?};
         _rule_val+='.'+_tab_pos.FIELD+'.VALUE:=_env.empty_value('+$_var_pres+');\n';
         _rule_edit+='.'+_tab_pos.FIELD+'.EDITABLE:='+$_tab_pos.EDITABLE+';\n';
         _rule_color+='.'+_tab_pos.FIELD+'.COLOR:=\''+_tab_pos.COLOR+'\';\n';
         _rule_desc+='.'+_tab_pos.FIELD+'.DESC:=\''+gsub(_desc,'''','''''')+'\';\n';
         _rule_type+='.'+_tab_pos.FIELD+'.TYPE:='+$_type+';\n';
         _rule_type+='.'+_tab_pos.FIELD+'.DEC:='+$_tab_pos.DEC+';\n';
         _rule_new+=',\''+_tab_pos.FIELD+'\'';
         _tab_pos.next()
      !};
      _rule_new+=')';
      _result:=($_rule_new)();

::    Określam dla funkcji niskopoziomowej od którego elementu zaczyna się prawdziwa
::    zawartość, jeżeli będzie przybywać metod w tym obiekcie to należy inkrementować
::    ten licznik
      _result.GOTO:=3;
      _result.blank:=$(_rule_val+_rule_edit+_rule_color+_rule_desc+_rule_type+_rule_dec+'~~');

      {? type_of(_result)>100
      ||
         {! _it:=_result.GOTO..obj_len(_result)
         |! _result[_it]:=exec('filler_obj_core','#excel_imex')
         !};
::       Wypełniam obiekt domyślnymi wartościami
         _result.blank(_env);
         ~~
      ?}
   ?};
   _tab_pos.cntx_pop()
?};
_tab_head.cntx_pop();
_result


\store_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.02]
:: OPIS: Tworzy na podstawie definicji imex tabelę tymczasową która będzie zawierała całą eksportowaną
::       zawartość. Potrzebne jest to do tego aby w czasie eksportu nie było problemu z pamięcią
::   WE: _a - TABLE - uchwyt do eksportowanej tabeli
::       _b - obj_new - obiekt z wartościami
::       [_c] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_d] - .TAB_HEAD.ref lub bieżący rekord

::   WY: obj_new() - utworzony i zaincjowany wartościami domyślnymi dla danego typu
::                   obiekt
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
_obj:=_b;
{? var_pres('_c')>100
|| _env:=_c
|| _env:=params_get().env_xls
?};

_tab_head:=_env.TAB_HEAD;
_ref:=null();
{? var_pres('_d')=type_of(_tab_head.ref())
|| _ref:=_d
?};
_result:=0;
_can_continue:=1;

_tab_head.cntx_psh();
{? _ref<>null()
|| _tab_head.prefix();
   {? _tab_head.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _tab_pos:=_env.TAB_POS;
   _tab_pos.cntx_psh();
   _tab_pos.index(_env.NDX_POS1);
   _tab_pos.prefix(#_tab_head.ref());
   {? _tab_pos.first()
   ||
      _rule_new:='tab_tmp(1,\'LPPPPPPP\',\'REAL\',\'Liczba porządkowa (tm_stamp)\'';
      _rule_new+=',\'REFFFFFF\',\'STRING[100]\',\'Ref lub uidref eksportowanego rekordu\'';
      {!
      |?
         _tab_pos.memo_get(,'DESC');
         _desc:=_tab_pos.memo_txt(,,'DESC');
::       Jeżeli typ jest określony, to go pobieram z definicji
         {? _tab_pos.TYPE<>0
         || _type:=_tab_pos.TYPE;
            _var_pres:=_tab_pos.TYPE
::       Jeżeli pole do excela w tabeli którą eksportuję istnieje to biorę typ z tabeli
         |? var_pres(_tab_pos.FIELD,_obj)>0
         || _type:=($('_obj:=_a;type_of(_obj.'+_tab_pos.FIELD+')'))(_obj);
            _var_pres:=($('_obj:=_a;var_pres(\''+_tab_pos.FIELD+'\',_obj)'))(_obj);
            {? _var_pres=36
            ||
::             Specjalna obsługa dla SYS_MEMO
               _type:=2
            |? _var_pres=26
            ||
::             Specjalna obsługa dla złączeń
               _type:=2
            ?}
::       Jeżeli nie ma pola które eksportuję do excela w tabeli to przyjmuję typ domyślny (string)
         || _type:=type_of('');
            _var_pres:=_type
         ?};
::       update typu w definicji
         {? _type<>0 || _tab_pos.TYPE:=_type; _tab_pos.put() ?};

         {? _type=type_of(0)
         || _rule_new+=',\''+_tab_pos.FIELD+'\',\'REAL\',\''+_tab_pos.COLUMN+'\''
         |? _type=type_of('') | _type=type_of(SYSLOG.ref())
         || _rule_new+=',\''+_tab_pos.FIELD+'\',\'SYS_MEMO\',\''+_tab_pos.COLUMN+'\''
         |? _type=type_of(date())
         || _rule_new+=',\''+_tab_pos.FIELD+'\',\'DATE\',\''+_tab_pos.COLUMN+'\''
         |? _type=type_of(time())
         || _rule_new+=',\''+_tab_pos.FIELD+'\',\'TIME\',\''+_tab_pos.COLUMN+'\''
         ?};
         _tab_pos.next()
      !};
      _rule_new+=')';
      _result:=($_rule_new)()
   ?};
   _tab_pos.cntx_pop()
?};
_tab_head.cntx_pop();
_result


\getter_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Tworzy na podstawie definicji tablicę nazwaną która musi zostać wypełniona
::       przez czytajkę Excela. Przesyła tę tablicę do formuł importująco/walidujących
::   WE: _a - TABLE - uchwyt do eksportowanej tabeli
::       [_b] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       [_c] - .TAB_HEAD.ref lub bieżący rekord

::   WY: obj_new() - utworzony i zaincjowany wartościami domyślnymi dla danego typu
::                   obiekt
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;
{? var_pres('_b')>100
|| _env:=_b
|| _env:=params_get().env_xls
?};
_tab_head:=_env.TAB_HEAD;
_ref:=null();
{? var_pres('_c')=type_of(_tab_head.ref())
|| _ref:=_c
?};
_result:=0;
_can_continue:=1;

_tab_head.cntx_psh();
{? _ref<>null()
|| _tab_head.prefix();
   {? _tab_head.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _tab_pos:=_env.TAB_POS;
   _tab_pos.cntx_psh();
   _tab_pos.index(_env.NDX_POS1);
   _tab_pos.prefix(#_tab_head.ref());
   {? _tab_pos.first()
   || _rule_new:='obj_new( \'GOTO\',\'blank\'';
      _rule_val:='_env:=_a;';
      {!
      |?
         _tab_pos.memo_get(,'DESC');
         _desc:=_tab_pos.memo_txt(,,'DESC');
::       Jeżeli typ jest określony, to go pobieram z definicji
         {? _tab_pos.TYPE<>0
         || _type:=_tab_pos.TYPE
::       Jeżeli pole do excela w tabeli którą eksportuję istnieje to biorę typ z tabeli
         |? var_pres(_tab_pos.FIELD,_table)>0
         ||
::            _type:=($('_table:=_a;type_of(_table.'+_tab_pos.FIELD+')'))(_table)
            _type:=var_pres(_tab_pos.FIELD,_a);
            {? _type=20 | _type=22
            || _type:=type_of(0)
            |? _type=21
            || _type:=type_of(date())
            |? _type=29
            || _type:=type_of(time())
            || _type:=type_of('')
            ?}
::       Jeżeli nie ma pola które eksportuję do excela w tabeli to przyjmuję typ domyślny (string)
         || _type:=type_of('')
         ?};
         _rule_val+='.'+_tab_pos.FIELD+':=_env.empty_value('+$_type+');\n';
         _rule_new+=',\''+_tab_pos.FIELD+'\'';
         _tab_pos.next()
      !};
      _rule_new+=')';
      _result:=($_rule_new)();

::    Określam dla funkcji niskopoziomowej od którego elementu zaczyna się prawdziwa
::    zawartość, jeżeli będzie przybywać metod w tym obiekcie to należy inkrementować
::    ten licznik
      _result.GOTO:=3;
      _result.blank:=$(_rule_val+'~~');

      {? type_of(_result)>100
      ||
::       Wypełniam obiekt domyślnymi wartościami
         _result.blank(_env);
         ~~
      ?}

   ?};
   _tab_pos.cntx_pop()
?};
_tab_head.cntx_pop();
_result


\filler_obj_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca drugi poziom obiektu
::   WY: obj_new()
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new(
::                Wartość w komórce Excel
                  'VALUE'
::                Edytowalność komórki
                  ,'EDITABLE'
::                Kolor komórki
                  ,'COLOR'
::                Opis komórki
                  ,'DESC'
::                Typ komórki
                  ,'TYPE'
::                Liczba miejsc dziesiętnych (dla liczb)
                  ,'DEC'
);
_result


\args_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca obiekt do definiowania pól w eksporcie/imporcie
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: obj_new
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_result:=obj_new(
::                Nazwa pola w eksportowanej tabeli po stronie MacroBASE
                  'FIELD'
::                Nazwa kolumny w Excel
                  ,'COLUMN'
::                Edytowalność komórki
                  ,'EDITABLE'
::                Kolor komórki
                  ,'COLOR'
::                Opis komórki
                  ,'DESC'
::                Typ komórki
                  ,'TYPE'
::                Liczba miejsc dziesiętnych (dla liczb)
                  ,'DEC'

::                Pola techniczne
                  ,'env'

::                Metody
                  ,'blank'
                  ,'add'
                  ,'define'

);

_result.blank:="
   .FIELD:='';
   .COLUMN:='';
   .EDITABLE:=1;
   .COLOR:='';
   .DESC:='';
   .TYPE:=0;
   .DEC:=2;
   ~~
";

:: _a [STRING] - Akronim pola.
:: _b [STRING] - Nazwa kolumny.
:: _c [NUMBER] - Kolumna edytowalna [0/1*].
:: _d [STRING] - Kolor kolumny.
:: _e [STRING] - Komentarz kolumny.
:: _f [NUMBER] - Typ wartości (zgodny z type_of()).
:: _g [NUMBER] - Precyzja dla liczb [domyślnie: 2]

_result.define:="

   _field:='';
   {? var_pres('_a')=type_of('')
   || _field:=_a
   ?};
   _column:='';
   {? var_pres('_b')=type_of('')
   || _column:=_b
   ?};
   _editable:=1;
   {? var_pres('_c')=type_of(0)
   || _editable:=_c
   ?};
   _color:='';
   {? var_pres('_d')=type_of('')
   || _color:=_d
   ?};
   _desc:='';
   {? var_pres('_e')=type_of('')
   || _desc:=_e
   ?};
   _type:=0;
   {? var_pres('_f')=type_of(0)
   || _type:=_f
   ?};
   _dec:=2;
   {? var_pres('_g')=type_of(0)
   || _dec:=_g
   ?};

   .blank();
   .FIELD:=_field;
   .COLUMN:=_column;
   .EDITABLE:=_editable;
   .COLOR:=_color;
   .DESC:=_desc;
   .TYPE:=_type;
   .DEC:=_dec;
   .env.add_field(.)
";


_result.add:="
   .env.add_field(.)
";

_result.blank();
_result.env:=_env;
_result


\args_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca obiekt do obsługi sekcji BEFORE
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: obj_new
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_result:=obj_new(
::                Określa czy wywołanie podczas: IMPORT,EXPORT
                  'KIND'

::                Komunikat do historii
                  ,'MSG'
::                Czy komunikat w historii ma mieć akcję Szczegóły
::                (wtedy definicja musi implementować formułę DETAILS)
                  ,'MSG_DETAILS'

::                Czy kontynuować import/export
                  ,'CONTINUE'

::                Pola techniczne
                  ,'excel'
::                Metody
                  ,'blank'
                  ,'is_import'
                  ,'is_export'
                  ,'dir'
                  ,'dir_on_server'
                  ,'clear'
                  ,'is_danewzor'
);

_result.blank:="
   .KIND:='';
   .MSG:='';
   .MSG_DETAILS:=0;
   .CONTINUE:=1;
   ~~
";
_result.is_import:="
   {? .KIND='IMPORT'
   || 1
   || 0
   ?}
";
_result.is_export:="
   {? .KIND='EXPORT'
   || 1
   || 0
   ?}
";
_result.dir:=".excel.DIR";
_result.dir_on_server:=".excel.DIR_ON_SERVER";
_result.clear:="
   .MSG:='';
   .MSG_DETAILS:=0;
   ~~
";
:: Zwraca info czy eksport danych wzorcowych
_result.is_danewzor:="
   .excel.is_danewzor()
";

_result.excel:=_env;
_result.blank();
_result


\args_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca obiekt do obsługi sekcji BEFORE
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: obj_new
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
exec('args_before','#excel_imex',_a)


\args_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca obiekt do obsługi sekcji VALIDATE i IMPORT
::   WY: obj_new
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};
_result:=obj_new(
::                Czy kontunuować import rekordu
                  'RESULT'
::                Co ma zrobić formuła na import
                  ,'ACTION'
::                Dowolny własny obiekt przesłany formule na import
                  ,'OBJ'
::                Komunikat zapisywany w historii po walidacji i po imporcie
                  ,'MSG'
::                Czy komunikat w historii ma mieć akcję Szczegóły
::                (wtedy definicja musi implementować formułę DETAILS)
                  ,'MSG_DETAILS'
::                Identyfikator grupujący
                  ,'ID_GRP'

::                Metody
                  ,'blank'
                  ,'name'
                  ,'dir'
                  ,'clear'

::                Metody weryfikujące dane
                  ,'chk_fld'

::                Metody do obsługi komunikatów
                  ,'msg_empty'
                  ,'msg_value'
                  ,'msg_range'
                  ,'msg_inset'
                  ,'msg_norec'
                  ,'msg_length'
                  ,'msg_int'
                  ,'msg_unique'
                  ,'msg_insert'
                  ,'msg_update'


::                Pola techniczne
                  ,'env'
);

_result.blank:="
   .RESULT:=1;
   .ACTION:='';
   .MSG:='';
   .MSG_DETAILS:=0;
   .ID_GRP:='';
   {? var_pres('OBJ',.)>100
   || obj_del(.OBJ)
   ?};
   .OBJ:=~~;
   ~~
";
:: Zwraca na podstawie przekazanego akronimu pola nazwę kolumny w Excel
:: _a - STRING - akronim pola w MacroBase
_result.name:="
   .env.column(_a)
";

:: Zwraca katalog z którego jest prowadzony import
_result.dir:="
   .env.DIR
";

_result.clear:="
   .MSG:='';
   .MSG_DETAILS:=0;
   ~~
";

:: metody weryfikujące dane
::    _a OBJECT - wskazanie bufora danych
::    _b STRING - kolejne pola do sprawdzenia
_result.chk_fld:="
   _buf:=_a;
   _err:='';
   {! _ii:=2.._
   |? _err=''
   |! _fld:=_[_ii];
      {? var_pres(_fld,_buf)>0
      || _val:=($'_a.%1'[_fld])(_buf);
         {? _val=__CHK.empty[type_of(_val)]
         || .msg_empty(_fld);
            .RESULT:=0;
            _err:=_fld
         ?}
      ?}
   !};
   _err
";

:: metody standaryzujące zwracane komunikaty

:: msg_empty - komunikat o braku wartości
::    _a - STRING - akronim pola dodanego do definicji imex
_result.msg_empty:="
   _column_name:=.env.column(_a);
   exec('msg_empty','#excel_imex',.,_column_name)
";

:: msg_value - komunikat o błędnej wartości
::    _a -  STRING  - akronim pola dodanego do definicji imex
::    _b - [STRING] - opcjonalne wyjaśnienie powodu uznania wartości za błędną
_result.msg_value:="
   _column_name:=.env.column(_a);
   exec('msg_value','#excel_imex',.,_column_name,
      {? var_pres('_b')=type_of('') || _b || '' ?}
   )
";

:: msg_range - komunikat o błędnym zakresie
::    _a - STRING  - akronim pola dodanego do definicji imex
::    _b - [ANY]   - kres dolny przedziału
::    _c - [ANY]   - kres górny przedziału
_result.msg_range:="
   _column_name:=.env.column(_a);
   exec('msg_range','#excel_imex',.,_column_name,
      {? var_pres('_b')=type_of(0) | var_pres('_b')=type_of('') || _b || ~~ ?},
      {? var_pres('_c')=type_of(0) | var_pres('_c')=type_of('')|| _c || ~~ ?}
   )
";

:: msg_inset - komunikat o wartości poza dopuszczalnymi
::    _a -  STRING  - akronim pola dodanego do definicji imex
::    .. [ANY] - kolejne dopuszczalne wartości
_result.msg_inset:="
   _column_name:=.env.column(_a);
   _list:='';
   {! _ai:=2.._
   |! {? var_pres('_['+$_ai+']')>0
      || _list+=form(_[_ai])+', '
      ?}
   !};
   exec('msg_inset','#excel_imex',.,_column_name,_list-2)
";

:: msg_record - komunikat o błędnym wskazaniu
::    [_a] - [STRING]  - akronim pola dodanego do definicji imex
::    [_b] - [STRING]  - własny napis identyfikujący kolumnę (jeżeli nie podano _a)
_result.msg_norec:="
   _column_name:='';
   {? var_pres('_a')=type_of('')
   || _field:=_a;
      _column_name:=.env.column(_field)
   || _column_name:=_b
   ?};
   exec('msg_norec','#excel_imex',.,_column_name)
";

:: msg_length - komunikat o przekroczeniu długości
::    _a -  STRING   - akronim pola dodanego do definicji imex
::    _b - [INTEGER] - maksymalna długość napisu
_result.msg_length:="
   _column_name:=.env.column(_a);
   exec('msg_length','#excel_imex',.,_column_name,_b)
";

:: msg_int - komunikat o oczekiwaniu liczby całkowitej
::    _a -  STRING  - akronim pola dodanego do definicji imex
_result.msg_int:="
   _column_name:=.env.column(_a);
   exec('msg_int','#excel_imex',.,_column_name)
";

:: msg_unique - komunikat o powieleniu unikalnego klucza
::    _a [STRING] - treść dodatkowej informacji
_result.msg_unique:="exec('msg_unique','#excel_imex',.,{? var_pres('_a')=type_of('') || _a || '' ?})";

:: msg_insert - komunikat o błędzie podczas dołączania wiersza
::    _a [STRING] - treść dodatkowej informacji
_result.msg_insert:="exec('msg_insert','#excel_imex',.,{? var_pres('_a')=type_of('') || _a || '' ?})";

:: msg_update - komunikat o błędzie podczas modyfikacji wiersza
::    _a [STRING] - treść dodatkowej informacji
_result.msg_update:="exec('msg_update','#excel_imex',.,{? var_pres('_a')=type_of('') || _a || '' ?})";

_result.env:=_env;

_result


\xls_style
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Zwraca tablicę stylów arkusza Excel
::   WE: _a - obiekt do obsługi arkuszy Excel
::----------------------------------------------------------------------------------------------------------------------
_xls:=_a;
_style:=obj_new(
   'description','header','label',
   'number','string','date','time',
   'number_editable','string_editable','date_editable','time_editable',
   'table_content'
);

_style.description:=_xls.addStyle();
   _xls.setStyle('fgcolor:127:127:127'); _xls.setStyle('text'); _xls.setStyle('italic');
_style.header:=_xls.addStyle();
   _xls.setStyle('bgcolor:190:190:190'); _xls.setStyle('text'); _xls.setStyle('bold');
_style.label:=_xls.addStyle();
   _xls.setStyle('bgcolor:210:210:210'); _xls.setStyle('text'); _xls.setStyle('bold');

_style.number:=obj_new(7);
{! _it:=0..6
|! _style.number[_it+1]:=_xls.addStyle();
      _xls.setStyle('bgcolor:230:230:230');
      _xls.setStyle('format:# ##0'+{? _it=0 || '' || '.'+(_it*'0') ?})
!};
_style.string:=_xls.addStyle();
   _xls.setStyle('bgcolor:230:230:230'); _xls.setStyle('text');
_style.date:=_xls.addStyle();
   _xls.setStyle('bgcolor:230:230:230'); _xls.setStyle('date');
_style.time:=_xls.addStyle();
   _xls.setStyle('bgcolor:230:230:230'); _xls.setStyle('time');

_style.number_editable:=obj_new(7);
{! _it:=0..6
|! _style.number_editable[_it+1]:=_xls.addStyle();
      _xls.setStyle('bgcolor:250:250:250'); _xls.setStyle('editable:1');
      _xls.setStyle('format:# ##0'+{? _it=0 || '' || '.'+(_it*'0') ?})
!};
_style.string_editable:=_xls.addStyle();
   _xls.setStyle('bgcolor:250:250:250'); _xls.setStyle('editable:1'); _xls.setStyle('text');
_style.date_editable:=_xls.addStyle();
   _xls.setStyle('bgcolor:250:250:250'); _xls.setStyle('editable:1'); _xls.setStyle('date');
_style.time_editable:=_xls.addStyle();
   _xls.setStyle('bgcolor:250:250:250'); _xls.setStyle('editable:1'); _xls.setStyle('time');
_style.table_content:=_xls.addStyle();
   _xls.setStyle('fgcolor:0:0:255'); _xls.setStyle('editable:0');

_style


\xls_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Zwraca obiekt (tablicę) do obsługi arkuszy Excel
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: obiekt
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
::UWAGA: _fld, i _mth to formułki pomocnicze, zeby wygodniej tworzyć tablicę i komentować poszczególne jej elementy
::       powiedzmy, że to bedzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to bedzie metoda
         _mth:="31+form(_a)";

_obj:=obj_new(
::             POLA:
                _fld('ENV','Środowisko nadrzędne')
               ,_fld('XLS','Obiekt do obsługi plików Excel')
               ,_fld('TAB_EXP','Tablica obiektów do obsługi eksportu plików Excel')
               ,_fld('TAB_IMP','Tablica obiektów do obsługi importu plików Excel')
               ,_fld('FILES','Tabela tymczasowa nazw plików Excel i ich wewnętrznych ID')
               ,_fld('PASS','Hasło do chronionego arkusza')
               ,_fld('READ_MODE','Sposób czytania plików (0 - bezpośrednio, 1 - z tabel tymczasowych)')

::             METODY "publiczne"
               ,_mth('create','Tworzy zestaw obiektów do obsługi plików Excel')
               ,_mth('add_table_of_content','Dodaje do pliku spis treści')
               ,_mth('save','Zapisuje (i zamyka) pojedynczy plik Excel')
               ,_mth('close','Zamyka pojedynczy plik Excel (z utratą danych)')
               ,_mth('write_description','Wpisuje opis zakładki')
               ,_mth('write_header','Wpisuje nagłówek tabeli')
               ,_mth('write_row','Wpisuje wiersz tabeli (z danymi) na podstawie obiektu')
               ,_mth('write_row2','Wpisuje wiersz tabeli (z danymi) na podstawie rekordu tabeli')
               ,_mth('read_load','Ładuje dane z arkuszy do pamięci do późniejszego odczytu')
               ,_mth('read_id','Udostępnia tabelę z identyfikatorami')
               ,_mth('read_row','Pobiera wiersz tabeli (z danymi)')
               ,_mth('write_empty_rows','Wpisuje puste wiersze pod wszystkimi tabelami w danym pliku')
               ,_mth('auto_size','Ustawia automatyczny rozmiar kolumn z danymi w danym pliku')
               ,_mth('done','Zakończenie pracy z plikami xlsx')

::             METODY "prywatne"
               ,_mth('get_xls_id','Pobiera identyfikator pliku Excel')
               ,_mth('get_xls_nr','Pobiera numer pliku w tablicy .TAB_EXP')

             );
_obj.ENV:=_env;
_obj.XLS:=exec('Xls','#object');
_obj.TAB_EXP:=~~;
_obj.TAB_IMP:=obj_new('NAMES','NDX_NAMES1','NDX_NAMES2','SHEETS','VALUES','ID');
_obj.TAB_IMP.NAMES:=tab_tmp_out_tr(2
   ,'FILE','STRING[255]','Plik'
   ,'NAME','STRING[100]','Nazwa'
   ,'SHEET','INTEGER','Arkusz'
   ,'COLUMN','INTEGER','Kolumna'
   ,'ROW','INTEGER','Wiersz'
);
_obj.TAB_IMP.NDX_NAMES1:=_obj.TAB_IMP.NAMES.index('?');
_obj.TAB_IMP.NDX_NAMES2:=_obj.TAB_IMP.NAMES.ndx_tmp(,,'FILE',,,'COLUMN',,,'ROW',,);
_obj.TAB_IMP.SHEETS:=tab_tmp_out_tr(2
   ,'FILE','STRING[255]','Plik'
   ,'NAME','STRING[100]','Nazwa arkusza'
   ,'LP','INTEGER','Numer arkusza'
);
_obj.TAB_IMP.VALUES:=tab_tmp_out_tr(4
   ,'FILE','STRING[255]','Plik'
   ,'SHEET','INTEGER','Arkusz'
   ,'COLUMN','INTEGER','Kolumna'
   ,'ROW','INTEGER','Wiersz'
   ,'VALUE','SYS_MEMO','Wartość'
   ,'TXT','STRING[255]','Wartość tekstowo (początek)'
);
_obj.TAB_IMP.ID:=tab_tmp_out_tr(3
   ,'LP','INTEGER','Lp'
   ,'FILE','STRING[255]','Plik'
   ,'ID','STRING[100]','Identyfikator arkusza'
   ,'SIZE','INTEGER','Rozmiar danych'
   ,'FUNPAR','STRING[100]','Identyfikator z parmetyzatora'
   ,'SELECTED','STRING[1]','Czy wybrano do importu'
);
_obj.FILES:=tab_tmp_out_tr(1
   ,'FILE','STRING[255]','Nazwa pliku ze ścieżką'
   ,'FILENAME','STRING[255]','Nazwa pliku'
   ,'ID','INTEGER','ID pliku Excel'
   ,'NR','INTEGER','Numer pliku w .TAB_IMP'
);
_obj.PASS:=exec('password','#excel_imex');

_obj.create:="
::----------------------------------------------------------------------------------------------------------------------
:: Kontekst wywołania - ustalona dziedzina tabeli .ENV.TAB_HEAD
::----------------------------------------------------------------------------------------------------------------------
   _result:=1;
   _can_continue:=1;

   _tab_head:=.ENV.TAB_HEAD;
:: Zebranie nazw plików Excel
   _tab_head.cntx_psh();
   {? .ENV.EXPORT_MODE=2
   || _tab_head.prefix()
   ?};
   _progress:=.ENV.PROGRESS;
   _argsprog:=.ENV.ARGSPROG;

   {? _tab_head.first()
   ||
      {!
      |?
         _file:=.ENV.DIR+.ENV.SEP+_tab_head.FILE;
         _file_name:=_tab_head.FILE;
         {? .ENV.DIR_ON_SERVER
         || _dynamic_filepath:=_file
         || _dynamic_filepath:='@'+_file
         ?};
         _file_id:=fopen(_dynamic_filepath,'bw',0,0);
         {? _file_id>0
         || fclose(_file_id);
            ferase(_dynamic_filepath,0)
         || exec('komm_add','#excel_imex','Nie udało się utworzyć pliku %1'@[_file],4,.ENV);
            _result:=0;
            _can_continue:=0
         ?};
         {? _can_continue>0
         || .FILES.prefix(_file,);
            {? ~.FILES.first()
            || .FILES.FILE:=_file;
               .FILES.FILENAME:=_file_name;
               .FILES.add()
            ?}
         ?};
         _can_continue>0 & _tab_head.next()
      !}
   ?};
   _tab_head.cntx_pop();

:: Zainicjowanie plików Excel, załadowanie stylów, zapamiętanie ID pliku, uzupełnienie zakładki z opisem
   {? _can_continue>0
   || .FILES.prefix();
      _size:=.FILES.size();
      {? var_pres('TAB_EXP',.)>100 || obj_del(.TAB_EXP) ?};
      .TAB_EXP:=obj_new(_size);
      _it:=0;
      _files_step_global:=0;
      {? .FILES.first()
      ||
         {? _progress>0
         || _argsprog.ph_ssize(1,.FILES.size());
            _files_step_global:=.ENV.PROG_ALLOC/.FILES.size()
         ?};
         {!
         |? _it+=1;

            {? _progress>0
            ||
               _argsprog.ph_sname(1,'Alokacja pliku: %1'@[.FILES.FILENAME]);
               ~~
            ?};

            .TAB_EXP[_it]:=obj_new('file','style');
            .TAB_EXP[_it].file:=.FILES.FILE;
            _type:={? .FILES.FILE+4='.xls' || 'xls' || 'xlsx' ?};
            _id:=.XLS.create(_type);
            {? _id>0
            || .FILES.ID:=_id;
               .FILES.NR:=_it;
               .FILES.put();
               .TAB_EXP[_it].style:=exec('xls_style','#excel_imex',.XLS);
               .XLS.addSheet('Opis'@);
               .XLS.lock(.PASS);

::               .XLS.addRow(0);
::               .XLS.addCell(0,'%1: %2'[exec('nazwa','#system'),exec('wersja','#system')]);
::               .XLS.setCellStyle(.TAB_EXP[_it].style.description);
::               .XLS.setName('MERIT');

               .XLS.addRow(0);
               .XLS.addCell(0,'Nazwa pliku: %1'@[.FILES.FILENAME]);
               .XLS.setCellStyle(.TAB_EXP[_it].style.description);
               .XLS.setName('MERIT');

::               .XLS.addRow(2);
::               .XLS.addCell(0,'Utworzono: %1 %2'@[$date(),$time()]);
::               .XLS.setCellStyle(.TAB_EXP[_it].style.description);

::               .XLS.addRow(3);
::               .XLS.addCell(0,'=HIPERŁĄCZE(\"#PLUGINS\";\"Wtyczki wdrożeniowe\")');
::               .XLS.setCellStyle(.TAB_EXP[_it].style.rule);

               {! _it2:=0..0 |! .XLS.autoSizeColumn(_it2) !}

            || exec('komm_add','#excel_imex','Nie udało się zaalokować pliku %1'@[.FILES.FILE],4,.ENV);
               _result:=0;
               _can_continue:=0
            ?};

            {? _progress>0
            || _can_continue:=exec('update','#progress',_argsprog,1);
               {? _can_continue<=0
               || KOMM.add('Eksport przerwany przez użytkownika.'@,2,,1)
               ?};
               _argsprog.global_step(_files_step_global)
            ?};

            _can_continue>0 & .FILES.next()
         !}
      ?}
   ?};

   {? _progress>0
   ||
      {? _can_continue>0
      || _argsprog.ph_sname(1,'Alokowanie plików Excel: OK.'@)
      || _argsprog.ph_sname(1,'Alokowanie plików Excel: BŁĄD.'@)
      ?}
   ?};
   _result
";

_obj.add_table_of_content:="
::----------------------------------------------------------------------------------------------------------------------
:: Dodaje spis treści do pliku
:: WE: [_a] - nazwa pliku Excel ze ścieżką
::----------------------------------------------------------------------------------------------------------------------
   _id:=_a;
   _result:=1;
   _lp:=4;
   .XLS.get(_id);
   _st:=.XLS.addStyle();
   .XLS.setStyle('fgcolor:0:0:255');
   .XLS.getSheet('Opis');
   .XLS.SHEET.cntx_psh();
   .XLS.SHEET.prefix(_id);
   {? .XLS.SHEET.first()
   || _lp+=1;
      .XLS.addRow(_lp);
      .XLS.addCell(0,'Spis treści');
      _lp+=1;
      {!
      |? _sh:=.XLS.SHEET.NAME;
         {? _sh<>'Opis'
         || _lp+=1;
            .XLS.addRow(_lp);
            .XLS.addCell(0, exec('get_link','#excel_imex',_sh) );
            .XLS.setCellStyle(_st)
         ?};
         .XLS.SHEET.next()
      !}
   ?};
   .XLS.SHEET.cntx_pop();
   _result
";

_obj.save:="
::----------------------------------------------------------------------------------------------------------------------
:: Przetwarza wskazany (nazwą pliku) albo bieżący rekord tabeli .FILES
:: WE: [_a] - nazwa pliku Excel ze ścieżką
::----------------------------------------------------------------------------------------------------------------------
   _result:=1;
   {? var_pres('_a')=type_of('')
   || .FILES.prefix(_a,);
      {? .FILES.first()
      || .XLS.get(.FILES.ID);
         .add_table_of_content(.FILES.ID);
         {? ~.XLS.save(.FILES.FILE)
         || exec('komm_add','#excel_imex','Nie udało się zapisać pliku %1'@[.FILES.FILE],4,.ENV);
            _result:=0
         ?}
      ?}
   || .XLS.get(.FILES.ID);
      .add_table_of_content(.FILES.ID);
      {? ~.XLS.save(.FILES.FILE)
      || exec('komm_add','#excel_imex','Nie udało się zapisać pliku %1'@[.FILES.FILE],4,.ENV);
         _result:=0
      ?}
   ?};
   _result
";

_obj.close:="
::----------------------------------------------------------------------------------------------------------------------
:: Przetwarza wskazany (nazwą pliku) albo bieżący rekord tabeli .FILES
:: WE: [_a] - nazwa pliku Excel ze ścieżką
::----------------------------------------------------------------------------------------------------------------------
   {? var_pres('_a')=type_of('')
   || .FILES.prefix(_a,);
      {? .FILES.first()
      || .XLS.close(.FILES.ID);
::         .FILES.del();
         ~~
      ?}
   || .XLS.close(.FILES.ID);
::      .FILES.del();
      ~~
   ?};
   ~~
";

_obj.get_xls_id:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
:: WY: identyfikator pliku Excel
::----------------------------------------------------------------------------------------------------------------------
   _id:=0;
   .FILES.prefix(_a,);
   {? .FILES.first()
   || _id:=.FILES.ID
   ?};
   _id
";

_obj.get_xls_nr:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
:: WY: indeks pliku w tablicy roboczej .TAB_EXP
::----------------------------------------------------------------------------------------------------------------------
   _nr:=0;
   .FILES.prefix(_a,);
   {? .FILES.first()
   || _nr:=.FILES.NR
   ?};
   _nr
";

_obj.write_description:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
:: WY: 0/1
:: Kontekst wywołania - rekord tabeli .ENV.TAB_HEAD
::----------------------------------------------------------------------------------------------------------------------
   _can_continue:=1;
   _tab_head:=.ENV.TAB_HEAD;
   _tab_pos:=.ENV.TAB_POS;
   _nr:=_id:=0;
   {? var_pres('_a')=type_of('')
   || _nr:=.get_xls_nr(_a); _id:=.get_xls_id(_a)
   ?};
   {? _nr=0 | _id=0
   || exec('komm_add','#excel_imex',
         'Problem z ustaleniem identyfikatora pliku: %1'@[_a],
         4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
      );
      _can_continue:=0
   ?};
   _xls:=.XLS;
   {? _can_continue>0
   || _can_continue:=_xls.get(_id);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu pliku: %1'@[_a],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || {? ~_xls.getSheet(_tab_head.SHEET)
      || _can_continue:=_xls.addSheet(_tab_head.SHEET);
         {? _can_continue>0 & _tab_head.LOCK || _can_continue:=(_xls.lock(.PASS)=~~) ?}
      ?};
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu zakładki: %1'@[_tab_head.SHEET],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || _can_continue:=_xls.addRow(0);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z dołączeniem wiersza: %1'@['0'],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || _can_continue:=_xls.addCell(0,_tab_head.memo_txt(,1,'DESC'));
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z dołączeniem kolumny: %1'@['0'],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || _can_continue:=_xls.setName(_tab_head.ID);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem nazwy kolumny: %1 (niedozwolony identyfikator: %2)'@['0',_tab_head.ID],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || _can_continue:=(_xls.setCellStyle(.TAB_EXP[_nr].style.description)=~~);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem komentrza celi: %1'@['0'],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   _can_continue
";

_obj.write_header:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
:: WY: 0/1
:: Kontekst wywołania - rekord tabeli .ENV.TAB_HEAD i .ENV.TAB_ITER
::----------------------------------------------------------------------------------------------------------------------
   _can_continue:=1;
   _tab_head:=.ENV.TAB_HEAD;
   _tab_iter:=.ENV.TAB_ITER;
   _tab_pos:=.ENV.TAB_POS;
   _nr:=_id:=0;
   {? var_pres('_a')=type_of('')
   || _nr:=.get_xls_nr(_a); _id:=.get_xls_id(_a)
   ?};
   {? _nr=0 | _id=0
   || exec('komm_add','#excel_imex',
         'Problem z ustaleniem identyfikatora pliku: %1'@[_a],
         4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
      );
      _can_continue:=0
   ?};
   _xls:=.XLS;
   {? _can_continue>0
   || _can_continue:=_xls.get(_id);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu pliku: %1'@[_a],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || {? ~_xls.getSheet(_tab_head.SHEET)
      || _can_continue:=_xls.addSheet(_tab_head.SHEET);
         {? _can_continue>0 & _tab_head.LOCK || _can_continue:=(_xls.lock(.PASS)=~~) ?}
      ?};
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu zakładki: %1'@[_tab_head.SHEET],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || _can_continue:=_xls.addRow(_tab_iter.ROWNOW);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z dołączeniem wiersza: %1'@[$_tab_iter.ROWNOW],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?};
      _tab_iter.ROWNOW+=1; _tab_iter.put()
   ?};
   {? _can_continue>0
   || _xls.addCell(0, exec('get_link','#excel_imex','Opis','Powrót') );
      _xls.setCellStyle(.TAB_EXP[_nr].style.table_content);

      _column:=_tab_head.COLUMN;
      _tab_pos.index(.ENV.NDX_POS1);
      _tab_pos.prefix(#_tab_head.ref());
      {? _tab_pos.first()
      || {!
         |?
::            {? _can_continue>0
::            || _can_continue:=_xls.setAutoSizeColumn(_column);
::               {? _can_continue=0
::               || exec('komm_add','#excel_imex',
::                     'Problem z coś tam coś tam: %1'@[$_column],
::                     4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
::                  )
::               ?}
::            ?};
            _xls.setAutoSizeColumn(_column);
            _can_continue:=_xls.addCell(_column,_tab_pos.COLUMN);
            {? _can_continue=0
            || exec('komm_add','#excel_imex',
                  'Problem z dołączeniem kolumny: %1'@[$_column],
                  4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
               )
            ?};
            {? _can_continue>0 || _can_continue:=_xls.setName(_tab_pos.EXCEL_ID) ?};
            {? _can_continue>0
            || _can_continue:=(_xls.setCellStyle(.TAB_EXP[_nr].style.header)=~~);
               {? _can_continue=0
               || exec('komm_add','#excel_imex',
                     'Problem z ustaleniem stylu celi: %1'@[$_column],
                     4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
                  )
               ?}
            ?};
            {? _can_continue>0
            || _desc:=_tab_pos.memo_txt(,1,'DESC'); {? _desc<>'' || _can_continue:=_xls.setComment(_desc) ?};
               {? _can_continue=0
               || exec('komm_add','#excel_imex',
                     'Problem z ustaleniem komentrza celi: %1'@[$_column],
                     4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
                  )
               ?}
            ?};
            {? _can_continue>0
            || _can_continue:=_xls.freeze(0,_tab_iter.ROWNOW);
               {? _can_continue=0
               || exec('komm_add','#excel_imex',
                     'Problem z zablokowaniem wiersza: %1'@[$_tab_iter.ROWNOW],
                     4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
                  )
               ?}
            ?};
            _column+=1;
            _can_continue>0 & _tab_pos.next()
         !}
      ?}
   ?};
   _can_continue
";

_obj.write_row:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
::     _b - obiekt
:: WY: 0/1
:: Kontekst wywołania - rekord tabeli .ENV.TAB_HEAD
::----------------------------------------------------------------------------------------------------------------------
   _can_continue:=1;
   _tab_head:=.ENV.TAB_HEAD;
   _tab_iter:=.ENV.TAB_ITER;
   _tab_pos:=.ENV.TAB_POS;
   _nr:=id:=0;
   {? var_pres('_a')=type_of('')
   || _nr:=.get_xls_nr(_a); _id:=.get_xls_id(_a); _file:=_a
   ?};
   {? _nr=0 | _id=0
   || exec('komm_add','#excel_imex',
         'Problem z ustaleniem identyfikatora pliku: %1'@[_a],
         4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
      );
      _can_continue:=0
   ?};
   _xls:=.XLS;
   {? _can_continue>0
   || _can_continue:=_xls.get(_id);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu pliku: %1'@[_a],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || {? ~_xls.getSheet(_tab_head.SHEET)
      || _can_continue:=_xls.addSheet(_tab_head.SHEET);
         {? _can_continue>0 & _tab_head.LOCK || _can_continue:=(_xls.lock(.PASS)=~~) ?}
      ?};
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu zakładki: %1'@[_tab_head.SHEET],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || _tab_iter.cntx_psh();
      _tab_iter.index(.ENV.NDX_ITER1);
      _tab_iter.prefix(#_tab_head.ref(),_file,);
      {? _tab_iter.first()
      || _can_continue:=_xls.addRow(_tab_iter.ROWNOW);
         {? _can_continue=0
         || exec('komm_add','#excel_imex',
               'Problem z dołączeniem wiersza: %1'@[$_tab_iter.ROWNOW],
               4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
            )
         ?};
         _tab_iter.ROWNOW+=1; _tab_iter.put()
      ?};
      _tab_iter.cntx_pop()
   ?};
   {? _can_continue>0
   || _column:=_tab_head.COLUMN;
      _obj:=_b;
      {! _it:=_obj[1].. obj_len(_obj)
      |! _value:=_obj[_it].VALUE;
         _type:=_obj[_it].TYPE;
         {? type_of(_value)=type_of(null()) || _value:=$_value ?};
::         {? _type=type_of(null()) || _value:=$_value ?};
         _editable:=_obj[_it].EDITABLE;
         _can_continue:=_xls.addCell(_column,_value);
         {? _can_continue=0
         || exec('komm_add','#excel_imex',
               'Problem z dołączeniem kolumny: %1'@[$_column],
               4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
            )
         ?};
         {? _can_continue>0
         || _style:=
               {? _editable
               || {? _type=type_of(0)
                  || .TAB_EXP[_nr].style.number_editable[_obj[_it].DEC+1]
                  |? _type=type_of(date())
                  || .TAB_EXP[_nr].style.date_editable
                  |? _type=type_of(time())
                  || .TAB_EXP[_nr].style.time_editable
                  || .TAB_EXP[_nr].style.string_editable
                  ?}
               || {? _type=type_of(0)
                  || .TAB_EXP[_nr].style.number[_obj[_it].DEC+1]
                  |? _type=type_of(date())
                  || .TAB_EXP[_nr].style.date
                  |? _type=type_of(time())
                  || .TAB_EXP[_nr].style.time
                  || .TAB_EXP[_nr].style.string
                  ?}
               ?};
            _can_continue:=(_xls.setCellStyle(_style)=~~);
            {? _can_continue=0
            || exec('komm_add','#excel_imex',
                  'Problem z ustaleniem stylu celi: %1'@[$_column],
                  4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
               )
            ?}
         ?};
         _column+=1
      !}
   ?};
   _can_continue
";

_obj.write_row2:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
::     _b - rekord tabeli
:: WY: 0/1
:: Kontekst wywołania - rekord tabeli .ENV.TAB_HEAD, .ENV.TAB_POS
::----------------------------------------------------------------------------------------------------------------------
   _can_continue:=1;
   _tab_head:=.ENV.TAB_HEAD;
   _tab_iter:=.ENV.TAB_ITER;
   _tab_pos:=.ENV.TAB_POS;
   _nr:=id:=0;
   {? var_pres('_a')=type_of('')
   || _nr:=.get_xls_nr(_a); _id:=.get_xls_id(_a); _file:=_a
   ?};
   {? _nr=0 | _id=0
   || exec('komm_add','#excel_imex',
         'Problem z ustaleniem identyfikatora pliku: %1'@[_a],
         4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
      );
      _can_continue:=0
   ?};
   _xls:=.XLS;
   {? _can_continue>0
   || _can_continue:=_xls.get(_id);
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu pliku: %1'@[_a],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || {? ~_xls.getSheet(_tab_head.SHEET)
      || _can_continue:=_xls.addSheet(_tab_head.SHEET);
         {? _can_continue>0 & _tab_head.LOCK || _can_continue:=(_xls.lock(.PASS)=~~) ?}
      ?};
      {? _can_continue=0
      || exec('komm_add','#excel_imex',
            'Problem z ustaleniem kontekstu zakładki: %1'@[_tab_head.SHEET],
            4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
         )
      ?}
   ?};
   {? _can_continue>0
   || _tab_iter.cntx_psh();
      _tab_iter.index(.ENV.NDX_ITER1);
      _tab_iter.prefix(#_tab_head.ref(),_file,);
      {? _tab_iter.first()
      || _can_continue:=_xls.addRow(_tab_iter.ROWNOW);
         {? _can_continue=0
         || exec('komm_add','#excel_imex',
               'Problem z dołączeniem wiersza: %1'@[$_tab_iter.ROWNOW],
               4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
            )
         ?};
         _tab_iter.ROWNOW+=1; _tab_iter.put()
      ?};
      _tab_iter.cntx_pop()
   ?};
   {? _can_continue>0
   || _column:=_tab_head.COLUMN;
      _tab:=_b;
      {! _it:=2.. obj_len(_tab)
      |! _acr:=_tab.fld_acr(_it);

         _tab_pos.cntx_psh();
         _tab_pos.index(.ENV.NDX_POS2);
         _tab_pos.prefix(#_tab_head.ref(),_acr);
         {? _tab_pos.first()
         ||

            _type:=var_pres(_acr,_tab);
            {? _type=25 | _type=36
            || _value:=_tab.memo_txt(,1,_acr)
            || _value:=_tab[_it]
            ?};
            {? type_of(_value)=type_of(null()) || _value:=$_value ?};
::         {? _type=type_of(null()) || _value:=$_value ?};

            _editable:=_tab_pos.EDITABLE;
            _can_continue:=_xls.addCell(_column,_value);
            {? _can_continue=0
            || exec('komm_add','#excel_imex',
                  'Problem z dołączeniem kolumny: %1'@[$_column],
                  4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
               )
            ?};
            {? _can_continue>0
            || _style:=
                  {? _editable
                  || {? _type=20 | _type=22
                     || .TAB_EXP[_nr].style.number_editable[_tab_pos.DEC+1]
                     |? _type=21
                     || .TAB_EXP[_nr].style.date_editable
                     |? _type=29
                     || .TAB_EXP[_nr].style.time_editable
                     || .TAB_EXP[_nr].style.string_editable
                     ?}
                  || {? _type=20 | _type=22
                     || .TAB_EXP[_nr].style.number[_tab_pos.DEC+1]
                     |? _type=21
                     || .TAB_EXP[_nr].style.date
                     |? _type=29
                     || .TAB_EXP[_nr].style.time
                     || .TAB_EXP[_nr].style.string
                     ?}
                  ?};
               _can_continue:=(_xls.setCellStyle(_style)=~~);
               {? _can_continue=0
               || exec('komm_add','#excel_imex',
                     'Problem z ustaleniem stylu celi: %1'@[$_column],
                     4,.ENV,exec('komm_sect_head','#excel_imex',.ENV)
                  )
               ?}
            ?};
            _column+=1
         ?};
         _tab_pos.cntx_pop()
      !}
   ?};
   _can_continue
";

_obj.read_load:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
:: WY: 1 - zacignęło plik poprawnie albo plik nieMERITowy / 0 - błędy
::----------------------------------------------------------------------------------------------------------------------
   _filename:=_a;
   {? var_pres('_b')=type_of(1)
   || _serverDir:=_b
   || _serverDir:=0
   ?};
   _result:=1;

:: Jak nie ma jeszcze danego pliku, to ciągnę całą zawartość z xlsx do tabel tymczasowych
   .FILES.prefix(_filename,);
   {? ~.FILES.first()
   ||
      _env:=exec('xls_stream_reader','#excel');
      {? _env.open(_filename,_serverDir)
      || _names:=_env.TabNames;

::       Tylko arkusze Merit-owe
         _names.prefix('MERIT',);
         {? _names.first()
         ||
            _names.prefix();
            {? _names.first()
            || {!
               |? .TAB_IMP.NAMES.prefix();
                  .TAB_IMP.NAMES.blank();
                  .TAB_IMP.NAMES.FILE:=_filename;
                  .TAB_IMP.NAMES.NAME:=_names.NAME;
                  .TAB_IMP.NAMES.SHEET:=_names.SHEET;
                  .TAB_IMP.NAMES.COLUMN:=_names.COLUMN;
                  .TAB_IMP.NAMES.ROW:=_names.ROW;
                  .TAB_IMP.NAMES.add();
                  _names.next()
               !}
            ?};

            _sheets:=_env.TabSheets;
            {? _sheets.first()
            || {!
               |? .TAB_IMP.SHEETS.prefix();
                  .TAB_IMP.SHEETS.blank();
                  .TAB_IMP.SHEETS.FILE:=_filename;
                  .TAB_IMP.SHEETS.NAME:=_sheets.NAME;
                  .TAB_IMP.SHEETS.LP:=_sheets.LP;
                  .TAB_IMP.SHEETS.add();
                  _sheets.next()
               !}
            ?};

            {!
            |? {? _env.read()
               || _in:=_env.get();
                  {? _in.TYPE='SHEET'
                  || .TAB_IMP.SHEETS.prefix(_filename,_in.NAME,);
                     {? .TAB_IMP.SHEETS.first()
                     || _sheet:=.TAB_IMP.SHEETS.LP
                     || _sheet:=-1
                     ?}
                  |? _in.TYPE='ROW'
                  || .TAB_IMP.VALUES.prefix();
                     .TAB_IMP.VALUES.blank();
                     .TAB_IMP.VALUES.FILE:=_filename;
                     .TAB_IMP.VALUES.SHEET:=_sheet;
                     .TAB_IMP.VALUES.ROW:=_in.ROW;
                     {! _it:=1.. obj_len(_in.CELLS)
                     |! .TAB_IMP.VALUES.COLUMN:=_it;
                        .TAB_IMP.VALUES.TXT:=_in.CELLS[_it];
                        {? .TAB_IMP.VALUES.add()
                        || .TAB_IMP.VALUES.memo_set(_in.CELLS[_it],'VALUE');
                           .TAB_IMP.VALUES.memo_put(,'VALUE')
                        ?}
                     !}
                  ?};
                  obj_del(_in);
                  1
               || 0
               ?}
            !};

            .TAB_IMP.NAMES.index(.TAB_IMP.NDX_NAMES2);
            .TAB_IMP.NAMES.prefix(_filename,1,1);
            {? .TAB_IMP.NAMES.first()
            || {!
               |? .TAB_IMP.ID.blank();
                  .TAB_IMP.ID.FILE:=_filename;
                  .TAB_IMP.ID.ID:=.TAB_IMP.NAMES.NAME;
                  .TAB_IMP.VALUES.prefix(_filename,.TAB_IMP.NAMES.SHEET,1); .TAB_IMP.ID.SIZE:=.TAB_IMP.VALUES.size();
                  .TAB_IMP.ID.add();
                  .TAB_IMP.NAMES.next()
               !}
            ?};

            .FILES.FILE:=_filename;
            .FILES.add()
         ?};
         _env.close()

      || _result:=0
      ?}
   ?};
   _result
";

_obj.read_id:=".TAB_IMP.ID";

_obj.read_row:="
::----------------------------------------------------------------------------------------------------------------------
:: WE: _a - nazwa pliku Excel ze ścieżką
::     _b - obiekt
:: WY: 0/1
:: Kontekst wywołania - rekord tabeli .ENV.TAB_ITER
::----------------------------------------------------------------------------------------------------------------------
   _filename:=_a;
   _obj:=_b;
   _can_continue:=1;

   _tab_iter:=.ENV.TAB_ITER;
   _tab_pos:=.ENV.TAB_POS;

   _filled:=0;

:: Ustalenie kontekstu zakładki
   .TAB_IMP.NAMES.index(.TAB_IMP.NDX_NAMES1);
   .TAB_IMP.NAMES.prefix(_filename,_tab_iter.ID,);
   {? .TAB_IMP.NAMES.first()
   || _sheet:=.TAB_IMP.NAMES.SHEET
   || exec('komm_add','#excel_imex',
         'Problem z ustaleniem kontekstu zakładki: %1'@[_tab_iter.ID],
         4,.ENV,exec('komm_sect_iter','#excel_imex',.ENV)
      );
      _can_continue:=0
   ?};

:: Ustalenie kontekstu wiersza
   {? _can_continue>0 || _tab_iter.ROWNOW+=1; _row:=_tab_iter.ROWNOW+1; _can_continue:=_tab_iter.put() ?};
   {? _can_continue>0
   || _filled:=0;
      _tab_pos.index(.ENV.NDX_POS1);
      _tab_pos.prefix(_tab_iter.HEAD);
      _empty_col:='';
      {? _tab_pos.first()
      || {!
         |? _value:=($('_a.'+_tab_pos.FIELD))(_obj);
            _type:=type_of(_value);
            _empty:=0;

            .TAB_IMP.NAMES.prefix(_filename,_tab_pos.EXCEL_ID,);
            {? .TAB_IMP.NAMES.first()
            || _column:=.TAB_IMP.NAMES.COLUMN
            ||
:: Jeżeli brak jest jakiejś kolumny to domyślnie ma pustą wartość a po odczytaniu rekordu wyświetli się zapytanie czy to akceptować
               _empty:=1;
               {? ~(__EMPTY_COL*_tab_pos.EXCEL_ID) || _empty_col+=__EMPTY_COL+=_tab_pos.EXCEL_ID+', ' ?}
            ?};

            {? _can_continue>0 & ~_empty
            || .TAB_IMP.VALUES.prefix(_filename,_sheet,_column,_row);
               {? .TAB_IMP.VALUES.first()
               || _value:=.TAB_IMP.VALUES.memo_txt(,1,'VALUE');
                  {? form(_value)<>'' || _filled:=1 ?};
                  {? _type=type_of(0)
                  || {? exec('allDigit','#valid',gsub(_value,' ',''))=0
                     || exec('komm_add','#excel_imex',
                           'Błędna wartość w polu numerycznym: %1 -  plik: %2, zakładka: %3, wiersz: %4, kolumna: %5.'@
                           [_value,_filename,$_sheet,$_row,$_column],
                           4,.ENV,exec('komm_sect_iter','#excel_imex',.ENV)
                        );
                        _can_continue:=0
                     ?};
                     _value:=exec('str2real','#convert',_value)
                  |? _type=type_of(date())
                  || _value:=exec('str2date','#convert',_value)
                  |? _type=type_of(time())
                  || _value:=exec('str2time','#convert',_value)
                  || _value:=_value
                  ?};
                  ($('_a.'+_tab_pos.FIELD))(_obj):=_value
               ?}
            ?};
            _can_continue>0 & _tab_pos.next()
         !};
:: Jeżeli brak jest jakiejś kolumny to wyskakuje okienko z pytaniem czy dodać puste wartości
         {? _empty_col<>''
         ||
            {? ~FUN.ask('Brak kolumny w pliku: %1 odpowiadającej polu:\n%2\n(plik nie pasuje do aktualnej definicji).
            \nCzy wypełnić pola pustymi wartościami?
            \nUwaga: Puste wartości mogą wywołać nieprawidłowe działanie niektórych funkcji.'@[_filename,_empty_col-2])
            ||
               exec('komm_add','#excel_imex',
               'Brak kolumny w pliku: %1 odpowiadającej polu: %2 (plik nie pasuje do aktualnej definicji).'@
               [_filename,_empty_col-2],
               4,.ENV,exec('komm_sect_iter','#excel_imex',.ENV)
               );
               _can_continue:=0
            ?}
         ?}
      ?}
   ?};
   {? _can_continue>0 || _filled || -1 ?}
";

_obj.write_empty_rows:="
::----------------------------------------------------------------------------------------------------------------------
:: Iteruje po jednym pliku
:: WE: _a - nazwa pliku Excel ze ścieżką
::----------------------------------------------------------------------------------------------------------------------
   _can_continue:=1;
   _xls:=.XLS;
   _tab_pos:=.ENV.TAB_POS;
   _tab_pos.cntx_psh();
   _tab_pos.index(.ENV.NDX_POS1);
   _tab_iter:=.ENV.TAB_ITER;
   _tab_iter.cntx_psh();
   _tab_iter.index(.ENV.NDX_ITER2);
   _tab_iter.prefix(_a,);
   {? _tab_iter.first()
   || {!
      |?
         _tab_pos.prefix(_tab_iter.HEAD);
         _obj:=obj_new(_tab_iter.POSSIZE);
         _it:=0;
         {? _tab_pos.first()
         || {!
            |? _it+=1;
               _obj[_it]:=obj_new('TYPE','DEC');
               _obj[_it].TYPE:=_tab_pos.TYPE;
               _obj[_it].DEC:=_tab_pos.DEC;
               _tab_pos.next()
            !}
         ?};
         _nr:=.get_xls_nr(_tab_iter.FILE); _id:=.get_xls_id(_tab_iter.FILE);
         {? _nr=0 | _id=0 || _can_continue:=0 ?};
         {? _can_continue>0 || _can_continue:=_xls.get(_id) ?};
         {? _can_continue>0
         || {? ~_xls.getSheet(_tab_iter.SHEET)
            || _can_continue:=_xls.addSheet(_tab_iter.SHEET);
               {? _can_continue>0 & _tab_iter.LOCK || _can_continue:=(_xls.lock(.PASS)=~~) ?}
            ?}
         ?};
         {? _can_continue>0
         || {! _it1:=1.. {? _tab_iter.ADD_ROWS=-1 || .ENV.ADD_ROWS || _tab_iter.ADD_ROWS ?}
            |! _can_continue:=_xls.addRow(_tab_iter.ROWNOW); _tab_iter.ROWNOW+=1; _tab_iter.put();
               {? _can_continue>0
               ||
                  {! _it2:=1.. _tab_iter.POSSIZE
                  |! _can_continue:=_xls.addCell(_tab_iter.COLUMN+_it2-1,'');
                     {? _can_continue>0
                     || _type:=_obj[_it2].TYPE;
                        _style:=
                           {? _type=type_of(0)
                           || .TAB_EXP[_nr].style.number_editable[_obj[_it2].DEC+1]
                           |? _type=type_of(date())
                           || .TAB_EXP[_nr].style.date_editable
                           |? _type=type_of(time())
                           || .TAB_EXP[_nr].style.time_editable
                           || .TAB_EXP[_nr].style.string_editable
                           ?};
                        _can_continue:=(_xls.setCellStyle(_style)=~~)
                     ?}
                  !}
               ?}
            !}
         ?};
         obj_del(_obj);
         _can_continue>0 & _tab_iter.next()
      !}
   ?};
   _tab_iter.cntx_pop();
   _tab_pos.cntx_pop();
   _can_continue
";

_obj.auto_size:="
::----------------------------------------------------------------------------------------------------------------------
:: Iteruje po jednym pliku
:: WE: _a - nazwa pliku Excel ze ścieżką
::----------------------------------------------------------------------------------------------------------------------
   _can_continue:=01;
   _xls:=.XLS;
   _tab_iter:=.ENV.TAB_ITER;
   _tab_iter.cntx_psh();
   _tab_iter.index(.ENV.NDX_ITER2);
   _tab_iter.prefix(_a,);
   {? _tab_iter.first()
   || {!
      |? _id:=.get_xls_id(_tab_iter.FILE);
         {? _id=0 || _can_continue:=0 ?};
         {? _can_continue>0 || _can_continue:=_xls.get(_id) ?};
         {? _can_continue>0
         || {? _xls.getSheet(_tab_iter.SHEET)
            || {! _it:=1.. _tab_iter.POSSIZE
               |! _can_continue:=(_xls.autoSizeColumn(_tab_iter.COLUMN+_it-1)=~~)
               !}
            ?}
         ?};
         _can_continue>0 & _tab_iter.next()
      !}
   ?};
   _tab_iter.cntx_pop();
   _can_continue
";

_obj.done:=".XLS.done(_a)";

_obj


\msg_empty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o niewypełnionym polu.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - nazwa wartości
::   WY: ~~
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Brak wartości w kolumnie \'%1\'.'@[_b];
~~


\msg_value
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o błędnej wartości pola.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - nazwa wartości
::       _c [STRING] - opcjonalne wyjaśnienie powodu uznania wartości za błędną
::   WY: ~~
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Błędna wartość w kolumnie \'%1\'. %2'@[_b,{? _c<>'' || ' '+_c || '' ?}];
~~


\msg_range
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o błędnej wartości pola.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - nazwa wartości
::       _c [ANY] - kres dolny przedziału
::       _d [ANY] - kres górny przedziału
::   WY: ~~
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+
   {? var_pres('_c')<=0 || 'Wartość w kolumnie \'%1\' musi być mniejsza od %2.'@[_b,form(_d)]
   |? var_pres('_d')<=0 || 'Wartość w kolumnie \'%1\' musi być większa od %2.'@[_b,form(_c)]
   |? _c=_d             || 'Wartość w kolumnie \'%1\' musi być %2.'@[_b,form(_c)]
   || 'Wartość w kolumnie \'%1\' musi zawierać się w przedziale od %2 do %3.'@[_b,form(_c),form(_d)]
   ?};
~~


\msg_inset
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o wartości poza dopuszczalnymi.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - nazwa wartości
::       _c [STRING] - lista wartości
::   WY: ~~
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Dopuszczalne wartości w kolumnie \'%1\' to: %2'@[_b,_c];
~~


\msg_norec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o nie znalezieniu w danych żądanej wartości
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - nazwa wartości
::   WY: ~~
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
exec('msg_value','#excel_imex',_a,_b,'Nie znaleziono powiązanej danej.'@);
~~


\msg_length
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o przekroczonej długości.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - nazwa wartości
::       _c [INTEGER] - maksymalna długość
::   WY: ~~
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Wartość w kolumnie \'%1\' przekracza maksymalną liczbę znaków %2.'@[_b,$_c];
~~


\msg_int
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o oczekiwanej wartości całkowitej.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - nazwa wartości
::   WY: ~~
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Wartość w kolumnie \'%1\' musi być liczbą całkowitą.'@ [_b];
~~


\msg_unique
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o powieleniu unikalnego klucza.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - treść dodatkowej informacji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Naruszenie unikalnego klucza%1.'@[{? _b<>'' || ' ('+_b+')' || '' ?}];
~~


\msg_insert
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o błędzie podczas dołączania wiersza.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - treść dodatkowej informacji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Dołączenie wiersza%1 nie powiodło się.'@[{? _b<>'' || ' ('+_b+')' || '' ?}];
~~


\msg_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Ustawia w wartości zwracanej walidatora komunikat o błędzie podczas dołączania wiersza.
::       Kod delegowany do formuły ze względu na tłumaczenia.
::   WE: _a [OBJECT] - obiekt z resultem, patrz exec('args_valid','#excel_imex')
::       _b [STRING] - treść dodatkowej informacji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.MSG+={? _a.MSG='' || '' || '\n' ?}+'Modyfikacja wiersza%1 nie powiodła się.'@[{? _b<>'' || ' ('+_b+')' || '' ?}];
~~


\tab_funpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - identyfikatory FUNPAR
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 1
               ,'ID'    ,'STRING[255]'   ,'Identyfikator'
               );
_env.NDX_FUNPAR1:=_tab.ndx_tmp(,,'ID',,);
_tab


\tab_filter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Zwraca tabelę tymczasową - identyfikatory IMEX do których zafiltrować działanie
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 1
               ,'ID'    ,'STRING[255]'   ,'Identyfikator'
               );
_env.NDX_FILTER1:=_tab.ndx_tmp(,,'ID',,);
_tab


\tab_hfun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zwraca tabelę tymczasową - identyfikatory imex i odpowiadające im identyfikatory FUNPAR
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 1
               ,'ID'    ,'STRING[255]'   ,'Identyfikator imex'
               ,'FUNPAR','STRING[255]'   ,'Identyfikator FUNPAR'
               );
_env.NDX_HFUN1:=_tab.ndx_tmp(,,'ID',,,'FUNPAR',,);
_env.NDX_HFUN2:=_tab.ndx_tmp(,,'FUNPAR',,,'ID',,);
_tab


\tab_memo_history
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Zwraca tabelę tymczasową - historia pól typu memo, przechowuje wartość przed memo_put do porównania
::       jej w triggerze po memo_put
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=tab_tmp( 2
               ,'REF'   ,'STRING[16]'   ,'Ref SQL rekordu'
               ,'FLD'   ,'STRING[8]'    ,'Akronim pola MEMO w źrodłowej tabeli'
               ,'MEMO'  ,'SYS_MEMO'     ,'MEMO'
               );
_tab


\get_link
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Zwraca formułę excela do skoku do zakładki
::   WE:  _a  - nazwa zakładki
::       [_b] - opis w linku
::----------------------------------------------------------------------------------------------------------------------
_sheet:=_a;
_desc:={? var_press('_b')<=0 || _a || _b ?};
$('HYPERLINK("#\'%1\'!A1","%2")'[_sheet,_desc])


\obj_rand
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zasila obiekt randomowymi informacjami
::   WE: _a - obj_new - obiekt
::       _b - INTEGER - długość string
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_len:=_b;

_goto:=_obj.GOTO;

{! _it:=_goto..obj_len(_obj)
|!
   _val:=($('_obj:=_a;_obj['+$_it+'].VALUE'))(_obj);
   {? type_of(_val)=type_of(0)
   || _sign:={? rand()>0.5 || 1 || -1 ?};
      _val:=rand()*1000000*_sign
   |? type_of(_val)=type_of(date())
   || _val:=date(1970,1,1)+((rand()*20000)$0)
   |? type_of(_val)=type_of(time())
   || _val:=time((24*rand())$0,(59*rand())$0,(59*rand())$0)
   || _val:=exec('random','#string',_len)
   ?};
   _rule:='_obj:=_a;_obj['+$_it+'].VALUE:=_b';
   ($_rule)(_obj,_val)
!};
_obj


\store_tab_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.02]
:: OPIS: Dodaje jeden rekord do tabeli tymczasowej z zawartością eksportu
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _b - tab_tmp - tabela do której dodawać
::       _c - obj_new - obiekt z danymi który dodać
::       _d - TABLE - uchwyt do eksportowanej tabeli
::       Kontekst pracy - rekord tabeli TAB_HEAD
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_b;
_obj:=_c;
_table:=_d;

_can_continue:=1;
_result:=0;

_tab.cntx_psh();
_tab.blank();
_names:=obj_ntab_names(_obj);

_memos:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'MEMO','STRING[8]','Nazwa pola 1'
);
_goto:=_obj.GOTO;
{! _it:=_goto..obj_len(_obj)
|? _can_continue>0
|! _val:=($('_obj:=_a;_obj['+$_it+'].VALUE'))(_obj);
   _field:=_names[_it];
   _rule_type:='_tab:=_a;var_pres(\''+_field+'\',_tab)';
   _tab_type:=($_rule_type)(_tab);

:: Sprawdzam czy typy się zgadzają
   {? type_of(_val)=type_of('')
   ||
::    Typ STRING musi być MEMEM albo SYS_MEMEM w tabeli
      {? _tab_type<>25 & _tab_type<>36
      || _can_continue:=0
      ?}
   |? type_of(_val)=type_of(0)
   ||
::    Typ liczbowy musi być w tabeli REALEm lub INTEGEREM
      {? _tab_type<>20 & _tab_type<>22
      || _can_continue:=0
      ?}
   |? type_of(_val)=type_of(date())
   ||
::    Typ daty musi być w tabeli datą
      {? _tab_type<>21
      || _can_continue:=0
      ?}
   |? type_of(_val)=type_of(date())
   ||
::    Typ czasu musi być w tabeli czasem
      {? _tab_type<>29
      || _can_continue:=0
      ?}
   ?};
   {? _can_continue=0
   || _sect:=exec('komm_sect_head','#excel_imex',_env);
      _msg:='Błąd zapisu do arkusza Excel (wartość w polu %1 ma nieprawidłowy typ.)'@[_field];
      exec('komm_add','#excel_imex',_msg,3,_env,_sect)
   ?};

   {? _can_continue>0
   ||
      {? type_of(_val)=type_of('')
      || _rule_set:='_tab:=_a;_result:=_tab.memo_set(_b,\''+_field+'\');_result';
         _memos.MEMO:=_field;
         _memos.add()
      || _rule_set:='_tab:=_a;_tab.'+_field+':=_b;1'
      ?};
      _can_continue:=($_rule_set)(_tab,_val)
   ?}
!};

{? _can_continue>0
|| _tab.LPPPPPPP:=SYSLOG.tm_stamp();
   _id:=exec('history_id','#excel_imex',_table);
   _tab.REFFFFFF:=_id;
   _can_continue:=_tab.add()
?};

{? _can_continue>0
||
   _memos.prefix();
   {? _memos.first()
   || {!
      |? _can_continue:=_tab.memo_put(,_memos.MEMO);
         _memos.next() & _can_continue>0
      !}
   ?}
?};
_tab.cntx_pop();
::{? _can_continue>0
::|| _result:=1
::?};
_result:=1;
_result



\store_tab_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Poprawia jeden rekord w tabeli tymczasowej z zawartością eksportu
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _b - tab_tmp - tabela do której dodawać
::       _c - STRING - indeks tabeli _b
::       _d - TABLE - uchwyt do tabeli która jest eksportowana
::       Kontekst pracy - rekord tabeli TAB_HEAD i rekord tabeli _c
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab:=_b;
_ndx:=_c;
_table:=_d;

_can_continue:=1;
_result:=0;

_tab.cntx_psh();
_tab.index(_ndx);
_id:=exec('history_id','#excel_imex',_table);
_tab.prefix(_id,);
{? _tab.first()
|| {!
   |? _tab.LPPPPPPP:=SYSLOG.tm_stamp();
      _can_continue:=_tab.put();
      _tab.next() & _can_continue>0
   !}
?};

_tab.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\password
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Zwraca hasło zabezpieczające do arkuszy xslx
::----------------------------------------------------------------------------------------------------------------------
_password:='';
_file:=fopen('../../__action/password.txt','r',0,0,1);
{? _file.is_open()
|| _password:=_file.fread()
?};
_password


\file_imp_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Export komunikatów do pliku EXcel
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_xls
?};

_ndx:=_env.NDX_HIST2;
{? _env.TRANSACTIONS>0
|| _tab_hist:=exec('tab_hist','#excel_imex',_env,0,0);
   _tab_hist_src:=_env.TAB_HIST;
   _tab_hist_src.cntx_psh();
   _tab_hist_src.index(_env.NDX_HIST3);
   _tab_hist_src.prefix();
   exec('tab2tab','#table',_tab_hist_src,_tab_hist,1,0);
   _tab_hist_src.cntx_pop();
   _ndx:=_tab_hist.ndx_tmp(,,'EXPORTED',,,'ID',,,'LP',,)
|| _tab_hist:=_env.TAB_HIST
?};

_tab_hist.cntx_psh();
_tab_hist.index(_ndx);
_tab_hist.prefix('T');

VAR_DEL.delete('__TableImpHist');
__TableImpHist := _tab_hist;

_funpar:=obj_new(1);
_funpar[1]:='ZWS_IMP_HIST';

exec('export_init','#excel_imex',_funpar,0);

VAR_DEL.delete('__TableImpHist');

_tab_hist.cntx_pop();
~~


\export_basic_range
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Uruchamia eksport zakresu podstawowego
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_xls;
_tab_head:=_env.TAB_HEAD;
_tab_sel:=_env.TAB_SEL;

_can_continue:=1;

_tab_head.cntx_psh();
_tab_head.index(_env.NDX_HEAD2);
KOMM.init(250,,'Eksport zakresu podstawowego'@);
:: Odczytuję plik zawierający informację które eksporty tworzą zakres podstawowy
_filename:='zakres_podstawowy.dfg';
_file:=fopen(_filename,'r',1,0,1);
_line:='\n';

{? _tab_head.first()
|| {!
   |? _tab_head.SELECTED:='N';
      _tab_head.HAS_SEL:='N';
      _tab_head.put();
      _tab_head.next()
   !}
?};
_tab_sel.erase();

{? _file.is_open()
|| {!
   |? _line:=_file.fread();

      _tab_head.prefix(_line,);
      {? _line<>'' & 2+_line<>'::' & _line<>'\n'
      ||
         {? _tab_head.first()
         || _tab_head.SELECTED:='T';
            _can_continue:=_tab_head.put()
         || KOMM.add('Nie znaleziono ekportu o identyfikatorze: %1 (błędny plik: %2)'@[_line,_filename])
         ?}
      ?};
      _line<>'\n'
   !}
|| FUN.emsg('Błąd otwarcia pliku: %1'@[_filename]);
   _can_continue:=0
?};
_tab_head.cntx_pop();
KOMM.select();

{? _can_continue>0
|| _env.ASYNC:=0;
   {? exec('export_accept','#excel_imex')='1'
   ||
      _tab_head.index(_env.NDX_HEAD3);
      _tab_head.prefix('T');
      _env.ACCEPT_ALLOW:=0
   || sel_exit();
      ~~
   ?};
   _env.ASYNC:=1
?};
~~


\import_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Formuła uruchomiona w triggerze dla dowolnej tabeli - dodaje do komunikatów
::       szczegółowe info o modyfikowanych rekordach
::       KONTEKTS DZIAŁANIA - rekord .TAB_HEAD
::   WE: _a - INTEGER - wynik akcji
::       _b - STRING - 'add', 'put'
::   WY: 1 lub ~~
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_res:=_a;
_kind:=_b;
_env:=EXCEL_ENV;

_result:=~~;

_can_continue:=_res;
{? _kind='del_przed'
|| _result:=1
?};

{? _can_continue>0 & var_pres('_env')>100
||
   _args_valid:=exec('args_valid','#excel_imex',_env);
   _args_valid.blank();
   _args_valid.MSG_DETAILS:=1;
   _args_valid.ID_GRP:=_env.ID_GRP;
   _table:=EXCEL_TT;
   _ref:=_table.ref();
   {? var_pres('_table')>100
   ||
      {? _kind='add'
      || {? type_of(_ref)=type_of(null()) & _ref<>null()
         || _what:=exec('record','#to_string',_ref);
            _args_valid.MSG:='Dodano rekord: %1'@[_what]
         ?}
      |? _kind='put'
      ||
         _compare:='';
         _can_continue:=1;
         _fld_num:=_table.fld_num();
         {! _it:=1.._fld_num
         |? _can_continue>0
         |!
            _fld_acr:=_table.fld_acr(_it);
            _fld_name:=_table.fld_name(_it);
            _fld_type:=_table.fld_join(_it);

            {? _fld_type<>'MEMO' & _fld_type<>'SYSMEMO'
            || _rule:='_tab:=_a;_tab.'+_fld_acr;
               _val_new:=($_rule)(_table);
               _val_old:=bfld(_fld_acr);
               {? _val_new<>_val_old
               || _compare+='Modyfikacja pola: %1 - %2\n'@[_fld_acr,_fld_name]
               ?}
            ?}
         !};
         {? _compare<>'' & type_of(_ref)=type_of(null()) & _ref<>null()
         || _what:=exec('record','#to_string',_ref);
            _args_valid.MSG:='Zmodyfikowano rekord: %1\n'@[_what];
            _args_valid.MSG+=_compare
         ?}
      |? _kind='del_przed'
      || VAR_DEL.delete('EXCEL_DEL');
         VAR_DEL.delete('EXCEL_REF');
         EXCEL_DEL:=exec('record','#to_string',_ref);
         EXCEL_REF:=_ref
      |? _kind='del_po'
      || _args_valid.MSG:='Usunięto rekord: %1'@[EXCEL_DEL];
         _ref:=EXCEL_REF;
         VAR_DEL.delete('EXCEL_DEL');
         VAR_DEL.delete('EXCEL_REF')
      ?};
      {? _args_valid.MSG<>'' & type_of(_ref)=type_of(null()) & _ref<>null()
      || exec('history_add_imp2','#excel_imex',_args_valid,_env,$_ref,_kind,,2-(!_table))
      ?}
   ?}
?};
_result


\import_msg_memo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Formuła uruchomiona w trigerze przed i po memo_put - dodaje do komunikatów
::       szczegółowe info o modyfikowanych rekordach
::   WE: _a - INTEGER - wynik akcji
::       _b - STRING - 'przed', 'po'
::       _c - STRING - akronim pola którego dotyczy
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_res:=_a;
_kind:=_b;
_fld:=_c;

_result:=~~;
{? _res>0
|| _table:=EXCEL_TT;
   _env:=EXCEL_ENV;
   _hist_tab:=_env.TAB_MEMO_HISTORY;
   {? _kind='memo_przed'
   ||
      _result:=1;
      _txt:=_table.memo_txt(,1,_fld);
      _hist_tab.prefix();
      _hist_tab.blank();
      _hist_tab.REF:=$_table.ref();
      _hist_tab.FLD:=_fld;
      {? _hist_tab.add()
      || _hist_tab.memo_set(_txt,'MEMO');
         _hist_tab.memo_put(,'MEMO')
      ?}
   |? _kind='memo_po'
   ||
      _args_valid:=exec('args_valid','#excel_imex',_env);
      _args_valid.blank();
      _args_valid.MSG_DETAILS:=1;
      _args_valid.ID_GRP:=_env.ID_GRP;
      _can_continue:=1;
      _compare:='';
      _val_new:=_table.memo_txt(,1,_fld);

      _hist_tab.prefix($_table.ref(),_fld);
      {? _hist_tab.first()
      || _val_old:=_hist_tab.memo_txt(,1,'MEMO');
         {? _val_new<>_val_old
         || _compare+='Modyfikacja pola notatnikowego: %1\n'@[_fld]
         ?}
      ?};

      {? _compare<>''
      || _what:=exec('record','#to_string',_table.ref());
         _args_valid.MSG:='Zmodyfikowano rekord: %1\n'@[_what];
         _args_valid.MSG+=_compare
      ?};
      {? _args_valid.MSG<>''
      || exec('history_add_imp2','#excel_imex',_args_valid,_env,$_table.ref(),'put',,2-(!_table))
      ?};
      VAR_DEL.delete('EXCEL_MEMO')
   ?}
?};
_result


\import_msg_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Akcja Szczegóły na komunikaty o modyfikacjach w rekordach
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
cur_tab(1,1).memo_get(,'MESSAGE',0); cur_tab(1,1).memo_view(,'MESSAGE');
~~


\links_analize
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Analizuje powiazania rozcztytujac pliki .fml
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_xls;
_tab_head:=_env.TAB_HEAD;
_tab_links:=_env.TAB_LINKS;

_tab_links.cntx_psh();
_tab_links.prefix();
{? _tab_links.first()
|| {!
   |? _can_continue:=_tab_links.del(,1);
      _tab_links.first() & _can_continue>0
   !}
?};
_tab_links.cntx_pop();

_tab_links.cntx_psh();
_tab_links.prefix();
_size_before:=_tab_links.size();
_tab_head.cntx_psh();
_tab_head.index(_env.NDX_HEAD8);
_tab_head.prefix();

_can_continue:=1;

_env.KOMM.init(250,,'Analizowanie powiązań definicji imex'@);

{? _tab_head.first()
|| FUN.prg_start(_tab_head.size()+1,,0);
   {!
   |?
      _can_continue:=FUN.prg_next(1,'Analiza dla: %1'@[_tab_head.ID]);
      _fml:=_tab_head.memo_txt(,1,'EXPORT');
      {? var_pres('_tab')>100
      || obj_del(_tab)
      ?};
      _tab:=_env.analize_fml(_fml);
      {? _tab.first()
      || {!
         |?
            _can_add:=1;
            _tab_head.cntx_psh();
            _tab_head.index(_env.NDX_HEAD2);
            _tab_head.prefix(_tab.ID,);

            {? _tab_head.first()=0
            || _can_add:=0;
               _sect:='';
               {? _tab.FILE<>''
               || _sect:='Analiza pliku: %1'@[_tab.FILE]
               ?};
               _msg:='Błędne powiązanie: %1 -> %2. Należy zadbać o jego inicjalizację w pliku: %3 '@[_tab.ID,_tab_head.ID,'xls__init.fml'];
               exec('komm_add','#excel_imex',_msg,3,_env,_sect)
            ?};
            _tab_head.cntx_pop();
            {? _can_add>0
            ||
               _src_funpar:='';

               _tab_head.cntx_psh();
               _tab_head.index(_env.NDX_HEAD2);
               _tab_head.prefix(_tab.ID,);
               {? _tab_head.first()
               || _src_funpar:=_tab_head.ID
               ?};
               _tab_head.cntx_pop();
               _dst_funpar:=_tab_head.FUNPAR;

               _can_continue:=_env.add_link(_tab.ID,_tab_head.ID,_src_funpar,_dst_funpar,'Automat')
            ?};
            _tab.next() & _can_continue>0
         !}
      ?};
      _tab_head.next() & _can_continue>0
   !};
   FUN.prg_stop()
?};

_env.KOMM.select();

_tab_links.prefix();
_size_after:=_tab_links.size();

FUN.emsg('Liczba nowych powiązań: %1'@[$(_size_after-_size_before)]);

_tab_head.cntx_pop();
_tab_links.cntx_pop();
~~


\links_gen_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Generuje formułę powiazań
::   WE: [_a] - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_tab_links:=_env.TAB_LINKS;
_tab_head:=_env.TAB_HEAD;

_tab_head.cntx_psh();
_tab_head.index(_env.NDX_HEAD2);
_tab_links.cntx_psh();
_tab_links.prefix();

_fml_file:='xls__links.fml';

_rules:='';

_header:=
':!UTF-8\r\n'+
':: (c) Macrologic S.A. Wszelkie prawa zastrzeżone\r\n'+
'::======================================================================================================================\r\n'+
':: Nazwa pliku: '+_fml_file+'\r\n'+
':: Autor: <wygenerowany automatycznie>\r\n'+
'::======================================================================================================================\r\n'+
':: Zawartość: Powiązania eksportów Excel - PLIK GENEROWANY AUTOMATYCZNIE - przy ponownej generacji zmiany zostaną nadpisane!\r\n'+
'::            NIE MODYFIKOWAĆ RĘCZNIE TEGO PLIKU, BO URWIE RĘCE!!!!\r\n'+
'::======================================================================================================================\r\n'+
'\r\n\r\n';


_header+='\\init_links\r\n';
_header+='::----------------------------------------------------------------------------------------------------------------------\r\n';
_header+='::  UTW: [AUTO]\r\n';
_header+=':: OPIS: Inicjuje powiązania definicji imex.\r\n';
_header+='::   WY: STRING\r\n';
_header+='::----------------------------------------------------------------------------------------------------------------------\r\n';
_header+='\r\n';
_header+='_env:=_a;\r\n';
_rules:=_header;

{? _tab_links.first()
|| {!
   |?
      _src_funpar:='';
      _dst_funpar:='';

      _tab_head.prefix(_tab_links.FROM,);
      {? _tab_head.first()
      || _src_funpar:=_tab_head.FUNPAR
      ?};

      _tab_head.prefix(_tab_links.TO,);
      {? _tab_head.first()
      || _dst_funpar:=_tab_head.FUNPAR
      ?};

      _rules+='_env.add_link(\''+_tab_links.FROM+'\',\''+_tab_links.TO+'\',\''+_src_funpar+'\',\''+_dst_funpar+'\');\r\n';
      _tab_links.next()
   !}
?};
_rules+='~~\r\n';

{? _rules<>''
|| _file:=fopen(_fml_file,'uw',1);
   {? _file>0
   || fwrite(_file,_rules);
      _can_continue:=1;
      fclose(_file)
   || _can_continue:=0;
      FUN.emsg('Nie udało się utworzyć pliku: %1'@[_fml_file])
   ?}
?};
{? _can_continue>0
|| FUN.emsg('Wygenerowano plik: %1'@[_fml_file])
?};
_tab_links.cntx_pop();
_tab_head.cntx_pop();
~~


\links4funpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Uzupełnia tabelkę TAB_FUNPAR_LINKS na podstawie przekazanego identyfikatora imex.
::       Dopisuje tam identyfikatory poprzedników imex, które należy załadować aby udał się
::       eksport
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::   WY: tab_tmp - tabela tymczasowa zawierająca pole ID
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;

_result:=tab_tmp(1,'ID','STRING[255]','Identyfikator imex');
_tab_links:=_env.TAB_LINKS;
_tab_hfun:=_env.TAB_HFUN;
_tab_funpar:=_env.TAB_FUNPAR;

_tab_funpar.cntx_psh();
_tab_funpar.prefix();

_tab_hfun.cntx_psh();
_tab_hfun.index(_env.NDX_HFUN2);

_tab:=_env.TAB_FUNPAR_LINKS;

{? _tab_funpar.first()
|| {!
   |?
      _tab_hfun.prefix(_tab_funpar.ID,);

      {? _tab_hfun.first()
      || {!
         |?
::          Do wyniku zawsze dodaję swój identyfikator
            _result.cntx_psh();
            _result.prefix(_tab_hfun.ID,);
            {? _result.first()=0
            || _result.blank();
               _result.ID:=_tab_hfun.ID;
               _result.add()
            ?};
            _result.cntx_pop();
            exec('links_get_poprzedniki','#excel_imex',_env,_tab_hfun.ID,_result);
            _tab_hfun.next()
         !}
      ?};
      _tab_funpar.next()
   !}
?};
_tab_hfun.cntx_pop();
_tab_funpar.cntx_pop();
_result


\links_get_poprzedniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Zwraca poprzedniki dla podanego identyfikatora imex
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _b - STRING - identyfikator imex
::       _c - tab_tmp - tabela tymczasowa którą zasilić
::       [_d] - tab_tmp - tabela odwiedzonych identyfikatorów
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_id:=_b;
_tab:=_c;

{? var_pres('_d')>100
|| _visited:=_d
|| _visited:=tab_tmp(1,'ID','STRING[255]','Identyfikator imex')
?};

_tab_links:=_env.TAB_LINKS;
_tab_links.cntx_psh();
_tab_links.index(_env.NDX_LINKS2);

_visited.prefix(_id,);

{? _visited.first()=0
|| _visited.blank();
   _visited.ID:=_id;
   _visited.add();

:: Prefiksuję poprzeniki
   _tab_links.prefix(_id,);
   {? _tab_links.first()
   || {!
      |?
         _tab.cntx_psh();
         _tab.prefix(_tab_links.FROM,);
         {? _tab.first()=0
         || _tab.blank();
            _tab.ID:=_tab_links.FROM;
            _tab.add()
         ?};
         _tab.cntx_pop();
::       !!! REKURENCJA !!!
         exec('links_get_poprzedniki','#excel_imex',_env,_tab_links.FROM,_tab,_visited);
         _tab_links.next()
      !}
   ?}
?};
_tab_links.cntx_pop();
~~


\import_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Dialog z opcjami importu
::   WE: [_a] - INTEGER - 0/[1] - czy pokazywać opcje dot procesów
::       [_b] - STRING - 'T/N' - czy importować wszystkie procesy
::       [_c] - STRING - 'T/N' - czy wyświetlać szczegółowe komunikaty o imporcie
::   WY: obj_new - tablela z opcjami
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;

_proc_opt:=1;
{? var_pres('_a')=type_of(0)
|| _proc_opt:=_a
?};

_opt_proc:='N';
{? var_pres('_b')=type_of('')
|| _opt_proc:=_b
?};

_opt_details:='N';
{? var_pres('_c')=type_of('')
|| _opt_details:=_c
?};

params_set(params_get());
_env:=params_get().env_xls;

_names:=obj_new(3);
_names[1]:='Brak'@;
_names[2]:='Tylko wymagane'@;
_names[3]:='Wszystkie'@;
_vals:=obj_new(3);
_vals[1]:="'B'";
_vals[2]:="'C'";
_vals[3]:="'W'";

_tab:=tab_tmp(1
      ,'MODE','STRING[1]','Tryb działania'
      ,'PROC','STRING[1]','Import procesów'
      ,'DETAILS','STRING[1]','Szczegóły');

_tab.blank();
{? _opt_proc='T'
|| _tab.PROC:='W'
|| _tab.PROC:='C'
?};
_tab.MODE:=_env.DEF_MODE;
_tab.DETAILS:=_opt_details;

_edit:=_tab.mk_edit(FUN.TYT,0,'#eximpdiag');

_tab.win_esep(_edit,'Tryb importowania'@);
_name:=' ';
_tab.win_efld(_edit,_tab,'MODE',,,100,0,,_name,,,'radio-buttons',,'Nadpisuj istniejące (wymagane dla startu zerowego)'@,"'N'"
                                                                 ,'Dodaj brakujące'@,"'D'");
{? _proc_opt>0
||
   _tab.win_esep(_edit,'Import procesów'@);
   _name:=' ';
   _tab.win_efld(_edit,_tab,'PROC',,,100,0,,_name,,,'radio-buttons',,_names[1],_vals[1]
                                                                    ,_names[2],_vals[2]
                                                                    ,_names[3],_vals[3])
?};
_tab.win_esep(_edit,'Komunikaty'@);
_name:='Szczegółowe komunikaty o modyfikowanych rekordach'@;
_tab.win_efld(_edit,_tab,'DETAILS',,,100,0,,_name,,,'check-box',,"'T'","'N'");
exec('ok_esc','#window',_tab,_edit);
_tab.win_edit(_edit);

{? _tab.edit()
|| {? _env.DOUBLE_CHK>0 & _tab.MODE='N'
   || {? FUN.ask('Wybrano tryb z nadpisywaniem istniejących danych.\nNa pewno kontynuować?'@)
      || _result:=_tab
      ?}
   || _result:=_tab
   ?}
?};
_result


\history_clear_id_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Czyści z historii wszystkie rekordy o podanym identyfikatorze grupowym
::   WE: _a - obj_new - środowisko imex - wynik działania exec('env','#excel_imex')
::       _b - STRING - identyfikator grupowy (ID_GRP)
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_id_grp:=_b;

_result:=0;
_can_continue:=1;

_tab_head:=_env.TAB_HEAD;
_tab_hist:=_env.TAB_HIST;
_tab_head.cntx_psh();
_tab_hist.cntx_psh();
_tab_hist.index(_env.NDX_HIST7);
_tab_hist.prefix(_id_grp,);
{? _tab_hist.first()
|| {!
   |?
      _imex:=_tab_hist.ID;
      _can_continue:=_tab_hist.del(,1);
      {? _can_continue>0
      || _tab_head.index(_env.NDX_HEAD2);
         _tab_head.prefix(_imex,);
         {?_tab_head.first()
         || _tab_head.HISTSIZE-=1;
            _tab_head.put()
         ?}
      ?};
      _tab_hist.first() & _can_continue>0
   !}
?};
_tab_hist.cntx_pop();
_tab_head.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\history_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Zwraca identyfikator dla historii zapisu
::   WE: _a - TABLE - uchwyt do eksportowanej tabeli
::   WY: STRING
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_table:=_a;

_id:='';
{? exec('is_temporary','#table',_table) & var_pres('UIDREF',_table)=27
|| _id:=_table.UIDREF
|? exec('has_idadd','#table',_table)>0
|| _id:=_table.uidref()
|| _id:=$_table.ref()
?};
_id


\export_danewzor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Uruchamia eksport danych wzorcowych
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
exec('export_init','#excel_imex',,0,,,1);
''


\export_singlefirm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Uruchamia eksport danych wzorcowych bez elementów wielofirmowych (wyłącznie z bieżącej firmy)
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
exec('export_init','#excel_imex',,,,,,,,1)


\obj_import2string
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Zwraca tekstową reprezentację rekordu Excel który będzie importowany
::   WE: _a - obj_new() - obiekt zawieracjący pola odczytane z Excel
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_result:='';
{? var_pres('SYM',_obj)=type_of('')
|| _result:=_obj.SYM
|? var_pres('SYMBOL',_obj)=type_of('')
|| _result:=_obj.SYMBOL
|? var_pres('KOD',_obj)=type_of('')
|| _result:=_obj.KOD
|? var_pres('NAZ',_obj)=type_of('')
|| _result:=_obj.NAZ
|? var_pres('NAZWA',_obj)=type_of('')
|| _result:=_obj.NAZWA
|? var_pres('NAME',_obj)=type_of('')
|| _result:=_obj.NAME
|? var_pres('NAM',_obj)=type_of('')
|| _result:=_obj.NAM
|? var_pres('NA',_obj)=type_of('')
|| _result:=_obj.NA
|? var_pres('OPIS',_obj)=type_of('')
|| _result:=_obj.OPIS
||
:: Jeżeli nie znalazło nic pasującego to pierwsze pole znaczące
   _result:=exec('to_string','#convert',_obj[_obj.GOTO])
?};
_result


\obj_export2string
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Zwraca tekstową reprezentację rekordu Excel który będzie importowany
::   WE: _a - obj_new() - obiekt zawieracjący pola odczytane z Excel
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_result:='';
{? var_pres('SYM',_obj)>100
|| _result:=_obj.SYM.VALUE
|? var_pres('SYMBOL',_obj)>100
|| _result:=_obj.SYMBOL.VALUE
|? var_pres('KOD',_obj)>100
|| _result:=_obj.KOD.VALUE
|? var_pres('NAZ',_obj)>100
|| _result:=_obj.NAZ.VALUE
|? var_pres('NAZWA',_obj)>100
|| _result:=_obj.NAZWA.VALUE
|? var_pres('NAME',_obj)>100
|| _result:=_obj.NAME.VALUE
|? var_pres('NAM',_obj)>100
|| _result:=_obj.NAM.VALUE
|? var_pres('NA',_obj)>100
|| _result:=_obj.NA.VALUE
|? var_pres('OPIS',_obj)>100
|| _result:=_obj.OPIS.VALUE
||
:: Jeżeli nie znalazło nic pasującego to pierwsze pole znaczące
   _result:=_obj[_obj.GOTO].VALUE
?};
{? type_of(_result)<>type_of('')
|| _result:=exec('to_string','#convert',_result)
?};
_result


\export_messages
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: Eksportuje komunikaty do plików
::   WE: _a - _env
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
{? _env.KOMM.TAB.size()
|| _env.KOMM.save('KOMM_msg.log')
?};
_ndx:=_env.NDX_HIST2;
_env.TAB_HIST.index(_ndx);
_env.TAB_HIST.prefix('T');
_env.TAB_HIST.export('TAB_HIST.log',0,,'UTF-8,pth,header',,
            'REF',,1,,
            'RESWRITE',,2,,
            'RESVALID',,3,,
            'MESSAGE',,4,,
            'LINE',,5,,
            'ID',,6,,
            'FILE',,7,,
            'SHEET',,8,,
            'ROW',,9,,
            'LP',,10,,
            'MOD',,11,,
            'MOD_ACR',,12,,
            'IS_MOD',,13,,
            'EXPORTED',,14,,
            'DETAILS',,15,,
            'ID_GRP',,17,,
            'UIDREF',,18, )


\import_messages
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: import komunikatów do tabeli
::   WE: _a - tabela
::       _b - nazwa pliku
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.import(_b,0,0,,'UTF-8*,pth,header',,
                     'REF',,1,,
                     'RESWRITE',,2,,
                     'RESVALID',,3,,
                     'MESSAGE',,4,,
                     'LINE',,5,,
                     'ID',,6,,
                     'FILE',,7,,
                     'SHEET',,8,,
                     'ROW',,9,,
                     'LP',,10,,
                     'MOD',,11,,
                     'MOD_ACR',,12,,
                     'IS_MOD',,13,,
                     'EXPORTED',,14,,
                     'DETAILS',,15,,
                     'ID_GRP',,17,,
                     'UIDREF',,18, )

:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 658f9353d9c071a5d2142574efa5a8895725e8a17c60790135375fcb7f6e9c92aa312bebbc9967f396252bb33512d52f73d1d3113bcc65669c75e32b67eed4df3f998770138553cafb90fcde729eec1975adb9e21191fd7bf6172241718032cabbed9c7e1268c9b7c17f8fcd52a4d6f8fc60095b68f0324aedfd5057d847efcb
