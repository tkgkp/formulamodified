:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #stack.fml
:: Utworzony: 09.06.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły do obsługi struktur danych typu stos.
::======================================================================================================================


\stack_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Definicja klast Stack implementującej stos. Opis metod publicznych - poniżej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Historia zmian:
:: 09.06.2015  RWR      Implementacja podstawowej funkcjonalności - metody: push(), pop() i size().
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('Stack',@.CLASS)>0
|| return()
?};

obj_decl('Stack',

:  Pola prywatne -------------------------------------------------------------------------------------------------------

:  Wskazanie na szczyt stosu.
   obj_fld('TOP',~~),

:  Informacyjnie - rozmiar stosu.
   obj_fld('SIZE',0),

:  Wskazanie na siebie
   obj_fld('SELF',~~),

:  Metody prywatne -----------------------------------------------------------------------------------------------------

:  Inicjalizacja obiektu.
   obj_meth('__init',"_a.SELF:=_a"),

:  Tworzy element stosu.
   obj_meth('newNode',
   "  _node:=obj_new('DATA','PREV');
      _node.DATA:=_a;
      _node
   "),

:  Metody publiczne ----------------------------------------------------------------------------------------------------

   obj_meth('push',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda odkłada na stos przekazany element.
::   WE: _a - Element dowolnego typu, który będzie odłożony na stos.
::   WY: Wskazanie bieżącego obiektu. Pozwala na wywołania wielokrotne.
::----------------------------------------------------------------------------------------------------------------------
      "  {? _
         || _data:=_a;
            _node:=.newNode(_data);
            _node.PREV:=.TOP;
            {? type_of(.TOP)
            || obj_del(.TOP)
            ?};
            .TOP:=_node;
            .SIZE+=1
         ?};
         .SELF
      "
   ),

   obj_meth('pop',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zdejmuje ze stosu element.
::   WE:
::   WY: Zdjęty element lub ~~ jeśli stos jest pusty.
::----------------------------------------------------------------------------------------------------------------------
      "  {? type_of(.TOP)
         || _top:=.TOP;
            _ret:=_top.DATA;
            obj_del(.TOP);
            .TOP:=_top.PREV;
            .SIZE-=1;
            _ret
         || ~~
         ?}
      "
   ),

   obj_meth('size',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca aktualny rozmiar stosu (informacyjnie).
::   WE:
::   WY: Aktualny rozmiar stosu.
::----------------------------------------------------------------------------------------------------------------------
      ".SIZE"
   )

)


\stack_demo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przykład zastosowania klasy Stack.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('FUN','#object');

:Deklaracja klasy.
exec('stack_decl','#stack');

:Funkcja pomocnicza.
_fsize:="'Rozmiar stosu: '+$_a.size()+'\n'";

:Powołanie obiektu.
_stos:=obj_new(@.CLASS.Stack);

:Pobieranie elementu z pustego stosu.
_el:=_stos.pop();
{? _el=~~
|| FUN.info(_fsize(_stos)+'Stos jest pusty','1a')
|| FUN.info(_fsize(_stos)+form(_el),'1b')
?};

:Odkładanie na stos - wywołania wielokrotne.
_stos.push('a').push('a1');

FUN.info(_fsize(_stos),'2');
:Zdejmowanie ze stosu.
{? _stos.pop()='a1'
|| FUN.info('%1 Faktycznie zdjęto ostatnio odłożony element'@[_fsize(_stos)],'2a')
|| FUN.info('%1 No coś nie działa...'@[_fsize(_stos)],'2b')
?};

:Odkładanie na stos - kontynuacja (wywołania klasyczne).
_stos.push('b');
_stos.push('c');

:Zdejmowanie ze stosu.
_ret:='';
{!
|? _el:=_stos.pop();
   _el<>~~
|! _ret+=_el
!};

:Wynikiem powinno być "cba".
FUN.info(_ret,'Elementy stosu'@);
~~

:Sign Version 2.0 jowisz:1028 2019/06/07 15:58:47 739c1b934fab88945c89ac0f038094dc24405c10a2a10e755476f131c7b61330f6af959c982519874f7dec0a167883ed79faa96118f5f96d312803e997411e267b481c47924bedb997a59717a96082af705b078ea8ce65dacfd3332b82e253e9a69e0c22c3e74849359d4610cfecf29d489d52002cfc3475bd42e4d6bca60b93
