:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: #upgrade.fml [17.00]
:: Utworzony: 14.02.2017
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Automatyzacja formuł potransferowych
::======================================================================================================================


\declUpgrade
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Deklaracja klasy do automatyzacji formuł potransferowych
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('UPGRADE',@.CLASS)<=0
||
   obj_decl('UPGRADE',
:: --POLA---------------------------------------------------------------------------------------------------------------
    obj_fld('STARTVER','początkowa wersja systemu';             ''),
    obj_fld('HEAD'    ,'nagłówek grupy zadań';                  null()),
    obj_fld('HFILE'   ,'plik grupy zadań';                      ''),
    obj_fld('WORK'    ,'czy wersja rozwojowa';                  'N'),
    obj_fld('TASK'    ,'zadanie do przetworzenia';              null()),
    obj_fld('DOMAIN'  ,'dziedzina produktowa';                  null()),
    obj_fld('REAL'    ,'wykonanie';                             null()),
    obj_fld('MODE'    ,'tryb przetwarzania danych';             0),
    obj_fld('BREAK'   ,'przerwanie';                            0),
    obj_fld('USERS'   ,'operator';                              null()),
    obj_fld('LPWORK'  ,'liczba porządkowa dla wersji roboczej'; 0),
    obj_fld('LPMANU'  ,'liczba porządkowa dla manualnych';      0),
    obj_fld('INFIRM'  ,'czy w trakcie przetwarzania firmy';     null()),
    obj_fld('LOG'     ,'wskazanie na aktualizację';             null()),
    obj_fld('ONLYACT' ,'czy tylko aktualizacja';                'N'),
    obj_fld('ONLYVER' ,'tylko nowe wersje i aktualizacja';      0),
    obj_fld('DETASK'  ,'warunki deaktywacji';                   ~~),
:: --KONSTRUKTOR/DESTRUKTOR--
   obj_meth('__init',
            "
::          Inicjalizacja
            .HEAD:=null();
            .HFILE:='';
            .WORK:='N';
            .TASK:=null();
            .DOMAIN:=null();
            .REAL:=null();
            .MODE:=0;
            .BREAK:=0;
            .USERS:=OPERATOR.USER;
            .LPWORK:=0;
            .LPMANU:=0;
            .INFIRM:=null();
            .LOG:=null();
            .STARTVER:=5+exec('getVersion','#upgrade');
            .ONLYACT:='N';
            .ONLYVER:=0;
            .DETASK:=tab_tmp(4,'TASK','STRING[30]',''
                      ,'HEAD','STRING[30]',''
                      ,'OPERATOR','STRING[8]',''
                      ,'VALUE','STRING[30]','');
             1"),
:: --METODY-------------------------------------------------------------------------------------------------------------
   obj_meth('act_StartVer',
            "
::          Ustawia aktualną wersję startową STARTVER
            _res:=1;
            .STARTVER:=5+exec('getVersion','#upgrade');
            _res"),
   obj_meth('add_head',
            "
::           Dodanie jednego nagłówka grupy wykonań oraz wywołanie init-u dla grupy wykonań
::             _a - nazwa pliku upgrade-u
::             [_b] - wersja systemu - domyślnie odczytywana na podstawie pliku
::             [_c] - 1-podczytanie tylko nowych wersji i nie dodawanie nowych zadań poza aktualizacyjnymi
::                    0(domyślnie)-nie
::             [_d] - wartość pola SORT - domyślnie 0
             _jump:=0;
             {? var_pres('_b')<>type_of('') || _b:='' || _jump:=1 ?};
             {? var_pres('_c')<>type_of(0)  || _c:=0 ?};
             {? var_pres('_d')<>type_of(0)  || _d:=0 ?};
             _res:=0;
             _refLogU:=exec('FindInSet','#table','UPG_LOG','END','U');
             _runManu:={? exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T')<>null()
                       || exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T',\"UPG_REAL.UPG_TASK().AUTO\",,,'')='N'
                       || 0
                       ?};
             _run:=.ctrl_run()<>0 & _refLogU=null() & _runManu;
             {? _>=1 & type_of(_a)=type_of('') & (+_a)>0 & ~_run
             || _ver:={? _b=''
                      || {? (1+_a)<>'q' || _wsk:=_a*'_'; _wsk-_a || 8-_a ?}
                      || _b
                      ?};
                _subver:={? (+_ver)>4 || _buf:=4-_ver; _ver:=4+_ver; _buf || '' ?};
                _ver:=(2+_ver)+'.'+(_ver+2);
                _fexist:=fexists(_a+'.fml',1);
                .ONLYACT:={? (~_jump & .STARTVER='12.41'
                              & exec('FindInSet','#table','UPG_VER','VERSION','V',,\"UPG_VER.VERSION+5\")=_ver)
                           | _ver=.STARTVER
                          || {? _subver='' || 'T' || 'N' ?}
                          || 'N'
                          ?};
                .ONLYVER:=_c;
                {? _fexist
                 & ({? (3+.STARTVER)='12.'
                    || _ver>='17.00'
                    || (_ver+_subver)>.STARTVER | .ONLYACT='T'
                    ?} | (_ver+2)='xx')
                || .HFILE:=_a;
                   .HEAD:=null();
                   UPG_HEAD.index('SYMBOL');
                   UPG_HEAD.prefix(_a,);
                   {? UPG_HEAD.first()
                   || {? UPG_HEAD.r_lock(1,1,1)
                      || exec('corrVER','#upgrade',UPG_HEAD.ref());
                         _put:=0;
                         .HEAD:=UPG_HEAD.ref();
                         .WORK:={? (UPG_HEAD.VERSION+2)='xx' || 'T' || 'N' ?};
                         {? UPG_HEAD.VERSION<>(_ver+_subver)
                         || UPG_HEAD.VERSION:=(_ver+_subver);
                            _put:=1
                         ?};
                         {? .WORK='T'
                         || UPG_HEAD.DATA:=date();
                            _put:=1
                         ?};
                         {? UPG_HEAD.SORT<>_d
                         || UPG_HEAD.SORT:=_d;
                            _put:=1
                         ?};
                         {? _put || UPG_HEAD.put(1) ?}
                      ?}
                   || UPG_HEAD.blank();
                      UPG_HEAD.DATA:=date();
                      UPG_HEAD.SYMBOL:=_a;
                      UPG_HEAD.VERSION:=_ver+_subver;
                      UPG_HEAD.SORT:=_d;
                      {? UPG_HEAD.add(1) & UPG_HEAD.r_lock(1,1,1)
                      || .HEAD:=UPG_HEAD.ref();
                         .WORK:={? (UPG_HEAD.VERSION+2)='xx' || 'T' || 'N' ?}
                      ?}
                   ?};
                   {? .HEAD<>null()
                   || _res:=1;
                      .id_ver();
                      {? .WORK='T'
                      || .LPWORK:=0;
                         .LPMANU:=0;
                         .initWorktask()
                      ?};
                      {? exec('is_fun','#file',.HFILE,'init')
                      || exec('init',.HFILE)
                      || FUN.emsg('W pliku %1.fml nie istnieje formuła \\init.'@[.HFILE]);
                         _res:=0
                      ?};
                      {? .WORK='T' || .doneWorktask() ?}
                   ?};
                   UPG_HEAD.r_unlock();
                   {? .ONLYACT='T' & exec('FindInSet','#table','UPG_TASK','HEAD',.HEAD)=null()
                   || UPG_HEAD.del()
                   || .act_task();
                      .act_order('T');
                      .act_order('N')
                   ?}
                |? ~_fexist
                || FUN.emsg('Plik %1.fml nie istnieje.'@[_a])
                ?}
             ?};
             _res"),
   obj_meth('initWorktask',
            "
::          Ustawia znacznik MODIFY dla wersji roboczej zadań
            _res:=1;
            UPG_TASK.index('HEAD');
            UPG_TASK.prefix(.HEAD);
            {? UPG_TASK.first() || {! |? UPG_TASK.MODIFY:=1; UPG_TASK.put(1); UPG_TASK.next() !} ?};
            _res"),
   obj_meth('doneWorktask',
            "
::          Aktualizuję dane dla wersji roboczej zadań na podstawie znacznika MODIFY
            _res:=1;
            UPG_TASK.index('HEAD');
            UPG_TASK.prefix(.HEAD);
            {? UPG_TASK.first()
            || {!
               |? {? UPG_TASK.MODIFY
                  || .TASK:=UPG_TASK.ref();
                     .del_buf();
                     .del_real();
                     UPG_TASK.del()
                  || UPG_TASK.next()
                  ?}
               !}
            ?};
            _res"),
   obj_meth('zeroWorkHead',
            "
::          Ustawia datę zerową dla zapisów wersji roboczej zadań
             _res:=1;
             UPG_HEAD.index('SYMBOL');
             UPG_HEAD.prefix();
             {? UPG_HEAD.first()
             || {!
                |? {? (UPG_HEAD.VERSION+2)='xx' & UPG_HEAD.r_lock(1,1,1)
                   || UPG_HEAD.DATA:=date(0,0,0);
                      UPG_HEAD.put(1);
                      UPG_HEAD.r_unlock();
                      0
                   || UPG_HEAD.next()
                   ?}
                !}
             ?};
             _res"),
   obj_meth('delWorkHead',
            "
::          Usuwa zapisy wersji roboczej zadań
             _res:=1;
            UPG_HEAD.index('SYMBOL');
            UPG_HEAD.prefix();
            {? UPG_HEAD.first()
            || {!
               |? {? (UPG_HEAD.VERSION+2)='xx' & UPG_HEAD.DATA=date(0,0,0) & UPG_HEAD.r_lock(1,1,1)
                  || .HEAD:=UPG_HEAD.ref();
                     .initWorktask();
                     .doneWorktask();
                     UPG_HEAD.r_unlock();
                     UPG_HEAD.del();
                     0
                  || UPG_HEAD.next()
                  ?}
               !}
            ?};
            _res"),
   obj_meth('id_ver',
            "
::           Ustawia pole IDVER informacja o dacie i czasie wypuszczenia aktualizacji
::             [_a] - data aktualizacji: domyślnie-rok aktualizacji + liczba weekendów
::             [_b] - czas aktualizacji: domyślnie 00:00:00
            _res:=0;
            _dt:={? var_pres('_a')=type_of(date()) || _a || date(0,0,0) ?};
            _tm:={? var_pres('_b')=type_of(time()) || _b || time(0,0,0) ?};
            {? .HEAD<>null()
            || UPG_HEAD.cntx_psh();
               UPG_HEAD.index('SYMBOL');
               UPG_HEAD.prefix();
               {? UPG_HEAD.seek(.HEAD)
               || _ver:=form(5+UPG_HEAD.VERSION);
                  {? _dt=date(0,0,0)
                  || _year:=#(2+_ver);
                     _week:=#(2+(3-_ver));
                     _dt:={? _year<>0 & _week<>0 || date(2000+_year,1,1)+((_week*7)-6) || date(0,0,0) ?};
                     _tm:=time(0,0,0)
                  ?};
                  UPG_HEAD.IDVER:='%1,%2,%3'[_ver,form(_dt),form(_tm,,3)];
                  UPG_HEAD.put(1)
               ?};
               UPG_HEAD.cntx_pop()
            ?};
            _res"),
   obj_meth('add_task',
            "
::           Dodanie jednego zadania do wykonania
::             _a - nazwa formuły
::             _b - czy automatyczna T/N
::             _c - czy wielofirmowa T/N
::             _d - dziedzina produktowa
::             [_e] - wersja
::             [_f] - wymagane T/N, dla automatycznych zawsze T
::             [_g] - powiązana formuła manualna
::             [_h] - 1-bez firmy 000, 0-domyślnie
::             [_i] - aktualizacja wersji T/N, domyślnie N
             {? var_pres('_a')<>type_of('') || _a:='' ?};
             {? var_pres('_b')<>type_of('') | (_b<>'T' & _b<>'N') || _b:='T' ?};
             {? var_pres('_c')<>type_of('') | (_c<>'T' & _c<>'N') || _c:='T' ?};
             {? var_pres('_d')<>type_of('') | (+_d)<>3 || _d:='XXX' ?};
             {? var_pres('_e')<>type_of(0) | _e<0 || _e:=0 ?};
             {? var_pres('_f')<>type_of('') | (_f<>'T' & _f<>'N') || _f:='N' ?};
             {? var_pres('_g')<>type_of('') | _b='N' || _g:='' ?};
             {? var_pres('_h')<>type_of(0) | _c='T' || _h:=0 ?};
             {? var_pres('_i')<>type_of('') | (_i<>'T' & _i<>'N') || _i:='N' ?};
             .DOMAIN:=exec('FindInSet','#table','B_DOMAIN','SYMBOL',_d);
             _res:=0;
             {? .HEAD & .HFILE<>'' & .DOMAIN & (+_a)>0 & (.ONLYACT='N' | .ONLYACT=_i)
             || UPG_TASK.index('SYMBOL');
                UPG_TASK.prefix(.HEAD,_a,);
                {? UPG_TASK.first()
                 & ({? UPG_TASK.AUTO='T'
                    || {? .WORK='T' || .LPWORK+=1; _lpwork:=.LPWORK ?}
                    || {? .WORK='T' || .LPMANU+=1; _lpwork:=.LPMANU ?}
                    ?};
                    {? .WORK='T'
                    || _lpwork=UPG_TASK.LP & UPG_TASK.VERSION=_e
                      & UPG_TASK.AUTO=_b & UPG_TASK.FIRM=_c
                      & UPG_TASK.B_DOMAIN=.DOMAIN
                      & UPG_TASK.NOFIRM=_h & UPG_TASK.MANUAL=_g
                    || 1
                    ?})
                || _res:=1;
                   .TASK:=UPG_TASK.ref();
                   {? .WORK='T' | UPG_TASK.VERSION<>_e
                   || UPG_TASK.MODIFY:=0;
                      UPG_TASK.VERSION:=_e;
                      UPG_TASK.MANUAL:=_g;
                      UPG_TASK.NOFIRM:=_h;
                      {? .WORK<>'T' & UPG_TASK.AUTO<>_b || UPG_TASK.AUTO:=_b ?};
                      {? UPG_TASK.AUTO='T' & UPG_TASK.MANUAL<>''
                      || _task:=.TASK;
                         UPG_TASK.cntx_psh();
                         UPG_TASK.index('SYMBOL');
                         UPG_TASK.prefix(.HEAD,UPG_TASK.MANUAL,);
                         {? UPG_TASK.first() & UPG_TASK.AUTO='N'
                         || UPG_TASK.STAN:='N';
                            UPG_TASK.INFRES:='N';
                            UPG_TASK.put(1);
                            .TASK:=UPG_TASK.ref();
                            .no_real()
                         ?};
                         UPG_TASK.cntx_pop();
                         .TASK:=_task
                      ?};
                      UPG_TASK.REQUIRED:={? UPG_TASK.AUTO='T' || 'T' || _f ?};
                      UPG_TASK.put(1)
                   ?};
                   _desc:=_a+'_desc';
                   _fname:=exec('ctrl_fun','#upgrade',.HFILE,_desc);
                   UPG_TASK.memo_get();
                   {? _fname<>''
                   || UPG_TASK.memo_set(($('exec('''+_desc+''','''+_fname+''')'))())
                   || UPG_TASK.memo_set()
                   ?};
                   UPG_TASK.memo_put();
                   .add_real(_i)
                |? (_fname:=exec('ctrl_fun','#upgrade',.HFILE,_a); _fname='')
                || FUN.emsg('W pliku %1.fml nie istnieje formuła: %2.'@[.HFILE,_a]);
                   _res:=0
                |? ~.ONLYVER | _i='T'
                || UPG_TASK.blank();
                   UPG_TASK.UPG_HEAD:=.HEAD;
                   UPG_TASK.SYMBOL:=_a;
                   UPG_TASK.FORM:='exec('''+_a+''','''+_fname+''')';
                   UPG_TASK.LP:=.next_task(_b);
                   UPG_TASK.AUTO:=_b;
                   UPG_TASK.FIRM:=_c;
                   UPG_TASK.B_DOMAIN:=.DOMAIN;
                   UPG_TASK.VERSION:=_e;
                   UPG_TASK.STAN:='N';
                   UPG_TASK.INFRES:='N';
                   UPG_TASK.SYSTEM:=UPG_TASK.UPG_HEAD().VERSION;
                   UPG_TASK.REQUIRED:={? UPG_TASK.AUTO='T' || 'T' || _f ?};
                   UPG_TASK.MANEND:='N';
                   UPG_TASK.MANUAL:=_g;
                   UPG_TASK.NOFIRM:=_h;
                   _desc:=_a+'_desc';
                   _fname:=exec('ctrl_fun','#upgrade',.HFILE,_desc);
                   {? _fname<>''
                   || UPG_TASK.memo_set(($('exec('''+_desc+''','''+_fname+''')'))())
                   || UPG_TASK.memo_set()
                   ?};
                   {? UPG_TASK.add(1)
                   || UPG_TASK.memo_put();
                      {? UPG_TASK.AUTO='T' & UPG_TASK.MANUAL<>''
                      || _task:=.TASK;
                         UPG_TASK.cntx_psh();
                         UPG_TASK.index('SYMBOL');
                         UPG_TASK.prefix(.HEAD,UPG_TASK.MANUAL,);
                         {? UPG_TASK.first() & UPG_TASK.AUTO='N'
                         || UPG_TASK.STAN:='N';
                            UPG_TASK.INFRES:='N';
                            UPG_TASK.put(1);
                            .TASK:=UPG_TASK.ref();
                            .no_real()
                         ?};
                         UPG_TASK.cntx_pop();
                         .TASK:=_task
                      ?};
                      _res:=1;
                      .TASK:=UPG_TASK.ref();
                      .add_real(_i)
                   ?}
                ?}
             ?};
             _res
            "),
   obj_meth('add_real',
            "
::           Dodanie wymaganych realizacji dla jednego zadania
::             [_a] - aktualizacja wersji T/N, domyślnie N
             {? var_pres('_a')<>type_of('') || _a:='N' ?};

             _res:=1;
             {? .TASK<>null()
             || _version:=exec('FindAndGet','#table',UPG_TASK,.TASK,,\"VERSION\",0);
                _firm:=exec('FindAndGet','#table',UPG_TASK,.TASK,,\"FIRM\",'T');
                _nofirm:=exec('FindAndGet','#table',UPG_TASK,.TASK,,\"NOFIRM\",0);
                FIRMA.cntx_psh();
                FIRMA.index('SYMBOL');
                {? FIRMA.first() | _firm='T'
                || {!
                   |? _firma:={? _firm='T' || null() || FIRMA.ref() ?};
                      {? _firma=null()
                       | ({? _nofirm || FIRMA.SYMBOL<>'000' || 1 ?}
                         & (FIRMA.TYP='S' | FIRMA.SYMBOL='000')
                         & FIRMA.Z='N'
                         & .ctrlVerFirm(FIRMA.SYMBOL,_a))
                      || UPG_REAL.index('TASK');
                         UPG_REAL.prefix(.TASK,_firma);
                         {? UPG_REAL.first()
                         || _put:=0;
                            {!
                            |? {? UPG_REAL.STAN<>'T' | UPG_REAL.VERSION=_version
                               || _put:=1;
                                  0
                               || UPG_REAL.next()
                               ?}
                            !}
                         || _put:=0
                         ?};
                         _rlock:={? _put || UPG_REAL.r_lock(1,1,1) || 0 ?};
                         {? ~_put || UPG_REAL.blank() ?};
                         UPG_REAL.UPG_TASK:=.TASK;
                         UPG_REAL.FIRMA:=_firma;
                         {? ~_put | UPG_REAL.VERSION<>_version | UPG_REAL.ERROR=1
                         || UPG_REAL.STAN:='N';
                            UPG_REAL.DATA:=date(0,0,0);
                            UPG_REAL.CZAS:=time(0,0,0);
                            UPG_REAL.ERROR:=0;
                            UPG_REAL.INFRES:='N';
                            UPG_REAL.VERSION:=_version
                         ?};
                         UPG_REAL.B_DOMAIN:=.DOMAIN;
                         UPG_REAL.SYMBOL:=UPG_REAL.UPG_TASK().SYMBOL;
                         UPG_REAL.SYSTEM:=UPG_REAL.UPG_TASK().SYSTEM;
                         UPG_REAL.DISABLED:=~(UPG_REAL.FIRMA=null() | UPG_REAL.FIRMA().A='T' | UPG_REAL.FIRMA().A='');
                         {? _put & _rlock || UPG_REAL.put(1) |? ~_put || UPG_REAL.add(1) ?};
                         UPG_REAL.r_unlock()
                      ?};
                      _firm<>'T' & FIRMA.next()
                   !}
                ?};
                FIRMA.cntx_pop()
             ?};
             _res
            "),
   obj_meth('off_task',
            "
::           Dodanie jednego zadania do wyłączenia
::             _a - nazwa formuły
::             [_b] - operator porównania - domyślnie <
::             [_c] - wartość do porównania - domyślnie symbol aktualizacji
             _head:=exec('FindAndGet','#table',UPG_HEAD,.HEAD,,\"VERSION\",'');
             {? var_pres('_a')<>type_of('') || _a:='' ?};
             {? var_pres('_b')<>type_of('')
              | ~(';<;<=;=;'*(';%1;'[_b]))  || _b:='<' ?};
             {? var_pres('_c')<>type_of('') || _c:=_head ?};

             _res:=0;
             _val:={? _head<_c || _head || _c ?};
             _op:={? _head<=_c
                  || {? ';<=;<;'*(';%1;'[_b]) || '<' || '!' ?}
                  || _b
                  ?};
             {? _head<>'' & (+_a)>0 & (+_c)>0
             || .DETASK.clear();
                .DETASK.prefix(_a,_head,_op,_val,);
                {? ~.DETASK.first()
                || _res:=1;
                   .DETASK.prefix();
                   .DETASK.blank();
                   .DETASK.TASK:=_a;
                   .DETASK.OPERATOR:=_op;
                   .DETASK.HEAD:=_head;
                   .DETASK.VALUE:=_val;
                   .DETASK.add(1)
                ?}
             ?};
             _res
            "),
   obj_meth('act_off',
            "
::           Aktualizuje zadania pod kątem ich wyłączenia z aktywności
             _res:=1;
             .DETASK.prefix();
             {? .DETASK.first()
             || UPG_TASK.cntx_psh();
                {!
                |? _task:=.DETASK.TASK;
                   _op:=.DETASK.OPERATOR;
                   _val:=.DETASK.VALUE;
                   UPG_TASK.index('AUTO');
                   UPG_TASK.prefix();
                   {? UPG_TASK.first()
                    & UPG_TASK.find_tab('first','SYMBOL',,'=',_task,'UPG_HEAD','VERSION',_op,_val)
                   || {!
                      |? {? UPG_TASK.STAN<>'T' || exec('offTASK','#upgrade',UPG_TASK.ref()) ?};
                         UPG_TASK.find_tab('next','SYMBOL',,'=',_task,'UPG_HEAD','VERSION',_op,_val)
                      !}
                   ?};
                   .DETASK.del()
                !};
                UPG_TASK.cntx_pop()
             ?};
             _res
            "),
   obj_meth('ctrlVerFirm',
            "
::           Kontroluję wersję dla firmy, czy jej brak, czy też jest mniejsza od wersji zadania
::           wersja robocza jest niekontrolowana
::              _a - symbol firmy
::              [_b] - 'T'-aktualizacja, 'N'-nie(domyślnie)
::           _result: 1-tak
::                    0-nie
             {? var_pres('_a')<>type_of('') || _a:='' ?};
             {? var_pres('_b')<>type_of('') || _b:='N' ?};

             _res:=1;
             {? _a<>''
             || UPG_VER.cntx_psh();
                UPG_VER.index('FIRMA');
                UPG_VER.prefix(_a,);
                {? UPG_VER.first() & (';TD'*UPG_VER.STAN)>1
                || _system:=exec('FindAndGet','#table',UPG_TASK,.TASK,,\"SYSTEM\",'17.00');
                   _res:={? _b='T' || _system>=UPG_VER.VERSION || _system>UPG_VER.VERSION ?}
                ?};
                UPG_VER.cntx_pop()
             ?};
             _res
            "),
   obj_meth('autoTaskFirm',
            "
::           Kontroluję czy są niewykonane zadania automatyczne per firma
::              _a - ref Firmy
::           _result: 1-tak
::                    0-nie
             {? var_pres('_a')<>type_of(null()) || _a:=null() ?};

             _res:=0;
             {? _a<>null()
             || UPG_REAL.cntx_psh();
                UPG_REAL.index('TASKFIRM');
                UPG_REAL.prefix('T','N',_a);
                {? UPG_REAL.first() || {! |? {? ~UPG_REAL.DISABLED || _res:=1; 0 || UPG_REAL.next() ?} !} ?};
                UPG_REAL.cntx_pop()
             ?};
             _res
            "),
   obj_meth('next_task',
            "
::           Zwraca kolejny numer w grupie zadań
::              _a - 'T'-automatyczna 'N'-manualna
             {? var_pres('_a')<>type_of('') || _a:='T' ?};

             _res:=0;
             UPG_TASK.cntx_psh();
             UPG_TASK.index('AUTO');
             UPG_TASK.prefix(_a,.HEAD);
             {? UPG_TASK.last()
             || {!
                |? {? UPG_TASK.MODIFY
                   || UPG_TASK.prev()
                   || _res:=UPG_TASK.LP;
                      0
                   ?}
                !}
             ?};
             UPG_TASK.cntx_pop();
             _res+=1;
             _res
            "),
   obj_meth('act_order',
            "
::           Nadaję kolejne numery porządkowe do kolejki przetwarzania
::              _a - 'T'-automatyczna 'N'-manualna
             {? var_pres('_a')<>type_of('') || _a:='T' ?};

             _res:=~~;
             _ord:=0;
             UPG_HEAD.cntx_psh();
             UPG_TASK.cntx_psh();
             UPG_REAL.cntx_psh();
             FIRMA.cntx_psh();
             UPG_REAL.index('ORDER');
             UPG_REAL.prefix(_a,'T');
             {? UPG_REAL.last() || _ord:=UPG_REAL.ORDER ?};
::             UPG_HEAD.index('VERSION');
             UPG_HEAD.index('IDVER');
             {? UPG_HEAD.first()
             || {!
                |? UPG_TASK.index('AUTO');
                   UPG_TASK.prefix(_a,UPG_HEAD.ref());
                   {? UPG_TASK.first()
                   || {!
                      |? {? UPG_TASK.FIRM='N'
                         || _first:=_last:=UPG_TASK.ref();
                            UPG_TASK.cntx_psh();
                            FIRMA.index('SYMBOL');
                            {? FIRMA.first()
                            || {!
                               |? {? (FIRMA.TYP='S' | FIRMA.SYMBOL='000') & FIRMA.Z='N' & .ctrlVerFirm(FIRMA.SYMBOL,'T')
                                  || {!
                                     |? UPG_REAL.index('TASK');
                                        UPG_REAL.prefix(UPG_TASK.ref(),FIRMA.ref());
                                        {? UPG_REAL.first()
                                        || {!
                                           |? {? UPG_REAL.STAN<>'T'
                                              || _ord+=1;
                                                 UPG_REAL.ORDER:=_ord;
                                                 UPG_REAL.put(1)
                                              ?};
                                              UPG_REAL.next()
                                           !}
                                        ?};
                                        {? UPG_TASK.next() & UPG_TASK.FIRM='N'
                                        || _last:=UPG_TASK.ref();
                                           1
                                        || UPG_TASK.seek(_first);
                                           0
                                        ?}
                                     !}
                                  ?};
                                  FIRMA.next()
                               !}
                            ?};
                            UPG_TASK.cntx_pop();
                            UPG_TASK.seek(_last)
                         || UPG_REAL.index('TASK');
                            UPG_REAL.prefix(UPG_TASK.ref(),null());
                            {? UPG_REAL.first()
                            || {!
                               |? {? UPG_REAL.STAN<>'T'
                                  || _ord+=1;
                                     UPG_REAL.ORDER:=_ord;
                                     UPG_REAL.put(1)
                                  ?};
                                  UPG_REAL.next()
                               !}
                            ?}
                         ?};
                         UPG_TASK.next()
                      !}
                   ?};
                   UPG_HEAD.next()
                !}
             ?};
             UPG_HEAD.cntx_pop();
             UPG_TASK.cntx_pop();
             UPG_REAL.cntx_pop();
             FIRMA.cntx_pop();
             _res
            "),
   obj_meth('del_real',
            "
::           Usunięcie poprzednich zapisów wymaganych realizacji dla jednego zadania
             _res:=1;
             {? .TASK<>null()
             || UPG_REAL.index('TASK');
                UPG_REAL.prefix(.TASK);
                {? UPG_REAL.first()
                || {!
                   |? .REAL:=UPG_REAL.ref();
                      .del_msg();
                      UPG_REAL.del()
                   !}
                ?}
             ?};
             _res
            "),
   obj_meth('del_msg',
            "
::           Usunięcie poprzednich zapisów o wykonaniu zadania
             _res:=1;
             {? .REAL<>null()
             || UPG_MSG.index('UPG_REAL');
                UPG_MSG.prefix(.REAL);
                {? UPG_MSG.first() || {! |? UPG_MSG.del() !} ?}
             ?};
             _res
            "),
   obj_meth('del_buf',
            "
::           Usunięcie poprzednich zapisów bufora
             _res:=1;
             {? .TASK<>null()
             || UPG_BUF.index('UPG_TASK');
                UPG_BUF.prefix(.TASK);
                {? UPG_BUF.first() || {! |? UPG_BUF.del() !} ?}
             ?};
             _res
            "),
   obj_meth('del_manbuf',
            "
::           Usunięcie poprzednich zapisów bufora dla powiązanego zadania manualnego
             _res:=1;
             {? .TASK<>null() & (_symm:=exec('FindAndGet','#table',UPG_TASK,.TASK,,\"MANUAL\",''))<>''
             || _head:=exec('FindAndGet','#table',UPG_TASK,.TASK,,\"UPG_HEAD\",null());
                {? _head<>null()
                || UPG_TASK.cntx_psh();
                   UPG_TASK.index('SYMBOL');
                   UPG_TASK.prefix(_head,_symm,);
                   _task:={? UPG_TASK.first() & UPG_TASK.AUTO='N' || UPG_TASK.ref() || null() ?};
                   {? _task<>null()
                   || UPG_BUF.index('UPG_TASK');
                      UPG_BUF.prefix(_task);
                      {? UPG_BUF.first() || {! |? UPG_BUF.del() !} ?}
                   ?};
                   UPG_TASK.cntx_pop()
                ?}
             ?};
             _res
            "),
   obj_meth('mode',
            "
::          Ustawia tryb przetwarzania danych
::            _a - 1-tryb serwisowy 0-tryb informacjami
            {? var_pres('_a')<>type_of(0) || _a:=0 ?};
            .MODE:=_a;
            1"),
   obj_meth('get_mode',
            "
::          Zwraca tryb przetwarzania danych
::            _result - 1-tryb serwisowy 0-tryb informacjami
            _res:=.MODE;
            _res"),
   obj_meth('ctrl_run',
            "
::          Sprawdzenie czy nie zostały dokonane wpisy o aktywnym niezakończonym uruchomieniu
::          _result: 1  - w trakcie uruchomienia
::                   0  - nie
::                   -1 - w trakcie uruchomienia czeka na wykonanie w danej firmie
::                   -2 - w trakcie uruchomienia czeka na wykonanie zadań manualnych
::                   -3 - w trakcie update-u
            _refLogN:=exec('FindInSet','#table','UPG_LOG','END','N');
            _refLogX:=exec('FindInSet','#table','UPG_LOG','END','X');
            _refAktu:={? _refLogN<>null() || _refLogN || _refLogX ?};

            _refFirm:={? _refAktu<>null()
                      || exec('FindInSet','#table','UPG_FIRM','FIRMA',REF.FIRMA,_refAktu,
                              \"{? ~('XMPR'*UPG_FIRM.END) || REF.FIRMA || null() ?}\",,,null())
                      || null()
                      ?};

            _res:=_refLogN<>null();
            _break:=_refLogX<>null() | _refFirm<>null();
            _nowait:=exec('waitRun','#upgrade');
            .INFIRM:=_firm:=null();
            {? ~_nowait
            || _res:=-2
            |? _break
            || UPG_REAL.cntx_psh();
               UPG_REAL.index('ORDER');
               UPG_REAL.prefix('T','N',);
               {? UPG_REAL.first()
               || _firm:=null();
                  {! |? {? ~UPG_REAL.DISABLED || _firm:=UPG_REAL.FIRMA; 0 || UPG_REAL.next() ?} !};
                  {? ~UPG_REAL.DISABLED
                  || {!
                     |? {? UPG_REAL.FIRMA=null()
                        || 0
                        || {? UPG_REAL.FIRMA=REF.FIRMA
                           || _firm:=UPG_REAL.FIRMA;
                              0
                           || UPG_REAL.next()
                           ?}
                        ?}
                     !}
                  ?}
               ?};
               UPG_REAL.cntx_pop();
               .INFIRM:=_firm;
               {? .INFIRM=REF.FIRMA || _res:=-1 ?}
            ?};
            _res"),
   obj_meth('auto_run',
            "
::          Automatyczne uruchomienie aupgrade-u w przypadku istnienia niewykonanych zadań
::          _result: 1  - są zadania do wykonania
::                   0  - brak
            _res:=.ctrl_run();
            {? _res<=0
            || _res:=(.INFIRM=null() | .INFIRM=REF.FIRMA) & exec('todoReal','#upgrade')
            || _res:=0
            ?};
            _res"),
   obj_meth('block_run',
            "
::          Ustawienie wpisu o rozpoczęciu przetwarzania
            _res:=0;
            UPG_LOG.index('END');
            {? .INFIRM=null()
            || UPG_LOG.prefix('N');
               {? UPG_LOG.first()
               || .LOG:=UPG_LOG.ref();
                  .act_firm();
                  _res:=1
               || UPG_LOG.prefix();
                  {? UPG_LOG.first() & UPG_LOG.find_tab('first','S_IDTIME',,'=',server_start_idtime())
                  || .LOG:=UPG_LOG.ref();
                     .act_firm();
                     _res:=1
                  || UPG_LOG.blank();
                     UPG_LOG.USERS:=.USERS;
                     UPG_LOG.DATA:=date();
                     UPG_LOG.CZAS:=time();
                     UPG_LOG.END:='N';
                     UPG_LOG.S_IDTIME:=server_start_idtime();
                     {? UPG_LOG.add(1)
                     || .LOG:=UPG_LOG.ref();
                        .add_firm();
                        _res:=1
                     ?}
                  ?}
               ?}
            || UPG_LOG.prefix('X');
               {? UPG_LOG.first()
               || UPG_LOG.prefix();
                  UPG_LOG.END:='N';
                  {? UPG_LOG.put(1)
                  || .LOG:=UPG_LOG.ref();
                     .act_firm();
                     _res:=1
                  ?}
               || UPG_LOG.prefix('N');
                  {? UPG_LOG.first()
                  || .LOG:=UPG_LOG.ref();
                     .act_firm();
                     _res:=1
                  ?}
               ?}
            ?};
            _res"),
   obj_meth('add_firm',
            "
::          Ustawienie wpisu o rozpoczęciu przetwarzania dla firm
            _res:=1;
            FIRMA.cntx_psh();
            FIRMA.index('SYMBOL');
            {? FIRMA.first()
            || {!
               |? {? (FIRMA.TYP='S' | FIRMA.SYMBOL='000') & FIRMA.Z='N' & .autoTaskFirm(FIRMA.ref())
                  || UPG_FIRM.cntx_psh();
                     UPG_FIRM.index('FIRMA');
                     UPG_FIRM.prefix(.LOG,FIRMA.ref());
                     {? UPG_FIRM.first()
                     || UPG_FIRM.END:={? REF.FIRMA=UPG_FIRM.FIRMA
                                      || exec('upg_firm_end','#upgrade','X')
                                      || exec('upg_firm_end','#upgrade','N')
                                      ?};
                        UPG_FIRM.put(1)
                     || UPG_FIRM.blank();
                        UPG_FIRM.UPG_LOG:=.LOG;
                        UPG_FIRM.FIRMA:=FIRMA.ref();
                        UPG_FIRM.END:={? REF.FIRMA=UPG_FIRM.FIRMA
                                      || exec('upg_firm_end','#upgrade','X')
                                      || exec('upg_firm_end','#upgrade','N')
                                      ?};
                        UPG_FIRM.add(1)
                     ?};
                     UPG_FIRM.cntx_pop()
                  ?};
                  FIRMA.next()
               !}
            ?};
            FIRMA.cntx_pop();
            _res"),
   obj_meth('unblock_run',
            "
::          Ustawienie wpisu o zakończeniu przetwarzania
::            _a - 0-zakończono (domyślnie)
::                 1-do anulowania
            {? var_pres('_a')<>type_of(0) || _a:=0 ?};
            _res:=0;
            UPG_LOG.index('END');
            UPG_LOG.prefix('N',);
            {? UPG_LOG.first()
            || UPG_LOG.prefix();
               UPG_LOG.END:={? ~_a || 'T' || 'X' ?};
               {? UPG_LOG.put(1)
               || {? UPG_LOG.END='T'
                  || .LOG:=UPG_LOG.ref();
                     .end_firm()
                  ?};
                  _res:=1
               ?}
            |? ~_a
            || UPG_LOG.prefix('X',);
               {? UPG_LOG.first()
               || UPG_LOG.prefix();
                  UPG_LOG.END:='T';
                  {? UPG_LOG.put(1)
                  || {? UPG_LOG.END='T'
                     || .LOG:=UPG_LOG.ref();
                        .end_firm()
                     ?};
                     _res:=1
                  ?}
               ?}
            ?};
            _res"),
   obj_meth('act_firm',
            "
::          Ustawienie wpisu o rozpoczęciu przetwarzania dla firm
            _res:=1;
            UPG_FIRM.index('FIRMA');
            UPG_FIRM.prefix(.LOG,REF.FIRMA);
            {? UPG_FIRM.first()
            || UPG_FIRM.END:=exec('upg_firm_end','#upgrade','X');
               UPG_FIRM.put(1)
            ?};
            _res"),
   obj_meth('end_firm',
            "
::          Ustawienie wpisu o rozpoczęciu przetwarzania dla firm
            _res:=1;
            UPG_FIRM.index('FIRMA');
            UPG_FIRM.prefix(.LOG);
            {? UPG_FIRM.first()
            || {!
               |? UPG_FIRM.END:=exec('upg_firm_end','#upgrade','T');
                  UPG_FIRM.put(1);
                  UPG_FIRM.next()
               !}
            ?};
            _res"),
   obj_meth('who_run',
            "
::          Sprawdzenie jaki użytkownik uruchomił niezakończoną aktualizację systemu
::          _result: kod użytkownika lub pusty string jeśli żaden
            _res:=exec('FindInSet','#table','UPG_LOG','END','N',,\"UPG_LOG.USERS().KOD\",,,'');
            {? _res='' || _res:=exec('FindInSet','#table','UPG_LOG','END','X',,\"UPG_LOG.USERS().KOD\",,,'') ?};
            {? _res='' || _res:={? exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T')<>null()
                                || exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T',\"UPG_REAL.USERS().KOD\",,,'')
                                || ''
                                ?} ?};
            _res"),
   obj_meth('next_msg',
            "
::           Zwraca kolejny numer komunikatu dla realizacji
             _res:=0;
             UPG_MSG.cntx_psh();
             UPG_MSG.index('UPG_REAL');
             UPG_MSG.prefix(.REAL);
             _res:={? UPG_MSG.last() || UPG_MSG.LP || 0 ?}+1;
             UPG_MSG.cntx_pop();
             _res"),
   obj_meth('msg',
            "
::          Dodanie informacji o realizacji wykonania
::            _a - treść komunikatu
            {? var_pres('_a')<>type_of('') || _a:='' ?};
            _res:=0;
            {? .REAL<>null() & (+_a)>0
            || UPG_MSG.prefix();
               UPG_MSG.blank();
               UPG_MSG.UPG_REAL:=.REAL;
               UPG_MSG.LP:=.next_msg();
               UPG_MSG.OPIS:=_a;
               {? UPG_MSG.add(1) || _res:=1 ?}
            ?};
            _res"),
   obj_meth('buf',
            "
::          Dodanie informacji do bufora realizacji wykonania
::            _a - unikalny kod
::            _b - treść dodatkowa
            {? var_pres('_a')<>type_of('') || _a:='' ?};
            {? var_pres('_b')<>type_of('') || _b:='' ?};
            _res:=0;
            {? .REAL<>null() & (+_a)>0
            || _task:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"UPG_TASK\",null());
               _firm:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"FIRMA\",null());
               _afrm:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"UPG_TASK().FIRM\",'');
               _symm:=exec('FindAndGet','#table',UPG_TASK,_task,,\"MANUAL\",'');
               {? _symm<>''
               || _head:=exec('FindAndGet','#table',UPG_TASK,_task,,\"UPG_HEAD\",null());
                  {? _head<>null()
                  || UPG_TASK.cntx_psh();
                     UPG_TASK.index('SYMBOL');
                     UPG_TASK.prefix(_head,_symm,);
                     _task:={? UPG_TASK.first() & UPG_TASK.AUTO='N' & _afrm=UPG_TASK.FIRM
                            || UPG_TASK.ref()
                            || null()
                            ?};
                     {? _task<>null()
                     || UPG_BUF.index('UPG_TASK');
                        UPG_BUF.prefix(_task,_a,_a,_firm);
                        {? ~UPG_BUF.first()
                        || UPG_BUF.prefix();
                           UPG_BUF.blank();
                           UPG_BUF.UPG_TASK:=_task;
                           UPG_BUF.CODE:=_a;
                           UPG_BUF.DESC:=_b;
                           UPG_BUF.FIRMA:=_firm;
                           {? UPG_BUF.add(1) || _res:=1 ?}
                        ?}
                     ?};
                     UPG_TASK.cntx_pop()
                  ?}
               ?}
            ?};
            _res"),
   obj_meth('get_buf',
            "
::          Zwraca tabele tymczasową zapisów buforowych dla realizacji
            {? .REAL<>null()
            || _task:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"UPG_TASK\",null());
               _firm:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"FIRMA\",null());
               {? _task<>null()
               || {? _firm<>null()
                  || _res:=sql('select UPG_BUF.CODE, UPG_BUF.DESC, UPG_BUF.FIRMA '
                               ' from UPG_BUF '
                               ' where UPG_BUF.UPG_TASK=:_a and UPG_BUF.FIRMA=:_b'
                               'order by 1'
                               ,_task,_firm)
                  || _res:=sql('select UPG_BUF.CODE, UPG_BUF.DESC, UPG_BUF.FIRMA '
                               ' from UPG_BUF '
                               ' where UPG_BUF.UPG_TASK=:_a '
                               'order by 1'
                               ,_task)
                  ?}
               || _res:=tab_tmp(1,'CODE','STRING[48]','','DESC','STRING[255]','','FIRMA','STRING[16]','')
               ?}
            || _res:=tab_tmp(1,'CODE','STRING[48]','','DESC','STRING[255]','','FIRMA','STRING[16]','')
            ?};
            _res"),
   obj_meth('required',
            "
::          Ewentualna zmiana statusu powiązanego zadania manualnego (o ile są dodane zapisy w UPG_BUF)
            _res:=0;
            {? .REAL<>null() & (_symm:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"UPG_TASK().MANUAL\",''))<>''
            || _head:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"UPG_TASK().UPG_HEAD\",null());
               _afrm:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"UPG_TASK().FIRM\",'');
               _firm:=exec('FindAndGet','#table',UPG_REAL,.REAL,,\"FIRMA\",null());
               {? _head<>null()
               || UPG_TASK.cntx_psh();
                  UPG_TASK.index('SYMBOL');
                  UPG_TASK.prefix(_head,_symm,);
                  _task:={? UPG_TASK.first() & UPG_TASK.AUTO='N' & UPG_TASK.REQUIRED<>'T' & _afrm=UPG_TASK.FIRM
                         || UPG_TASK.ref()
                         || null()
                         ?};
                  {? _task<>null() & exec('FindInSet','#table','UPG_BUF','UPG_TASK',_task)<>null()
                  || UPG_TASK.REQUIRED:='T';
                     UPG_TASK.put(1)
                  ?};
                  UPG_TASK.cntx_pop()
               ?}
            ?};
            _res"),
   obj_meth('no_real',
            "
::           Ustawia znacznik niewykonania na realizacjach zadania
             _res:=1;
             UPG_REAL.cntx_psh();
             UPG_REAL.index('TASK');
             UPG_REAL.prefix(.TASK);
             {? UPG_REAL.first()
             || {!
                |? UPG_REAL.STAN:='N';
                   UPG_REAL.put(1);
                   UPG_REAL.next()
                !}
             ?};
             UPG_REAL.cntx_pop();
             _res
            "),
   obj_meth('act_real',
            "
::           Zwraca aktualny stan wykonania wykonań zadania
::             _result: 'N' - brak wykonań
::                      'T' - wykonano wszystko
::                      'W' - wykonano częściowo
             _res:='N';
             UPG_REAL.cntx_psh();
             UPG_REAL.index('TASK');
             UPG_REAL.prefix(.TASK);
             {? UPG_REAL.first()
             || _ile:=_all:=UPG_REAL.size();
                {!
                |? {? UPG_REAL.DISABLED
                   || _ile-=1;
                      _all-=1
                   |? UPG_REAL.STAN<>'N'
                   || _ile-=1
                   ?};
                   UPG_REAL.next()
                !};
                {? ~_ile      || _res:='T'
                |? _ile<>_all || _res:='W'
                ?}
             ?};
             UPG_REAL.cntx_pop();
             _res
            "),
   obj_meth('act_infres',
            "
::           Zwraca aktualny stan wykonania wykonań zadania (choć jedna realizacja ma taki stan)
::             _result: 'E' - błąd na realizacji
::                      'W' - wykonano z uwagami
::                      'T' - wykonano
::                      'N' - brak realizacji
             _res:='N';
             UPG_REAL.cntx_psh();
             UPG_REAL.index('TASK');
             UPG_REAL.prefix(.TASK);
             {? UPG_REAL.first()
             || {? UPG_TASK.MANEND='T' || _res:='U'
                |? UPG_REAL.find_tab('first','INFRES',,'=','E') || _res:='E'
                |? UPG_REAL.find_tab('first','INFRES',,'=','W') || _res:='W'
                |? UPG_REAL.find_tab('first','INFRES',,'=','T') || _res:='T'
                |? UPG_REAL.find_tab('first','INFRES',,'=','P') || _res:='P'
                ?}
             ?};
             UPG_REAL.cntx_pop();
             _res
            "),
   obj_meth('act_task',
            "
::           Aktualizuje pole STAN dla zadań
             _res:=0;
             UPG_TASK.cntx_psh();
             UPG_TASK.index('HEAD');
             UPG_TASK.prefix();
             {? UPG_TASK.first()
             || {!
                |? .TASK:=UPG_TASK.ref();
                   UPG_TASK.STAN:=.act_real();
                   UPG_TASK.INFRES:=.act_infres();
                   UPG_TASK.put(1);
                   UPG_TASK.next()
                !}
             ?};
             UPG_TASK.cntx_pop();
             _res"),
   obj_meth('act_one_task',
            "
::           Aktualizuje pole STAN dla jednego zadania
             _res:=0;
             UPG_TASK.cntx_psh();
             UPG_TASK.prefix();
             {? UPG_TASK.seek(_a)
             || .TASK:=UPG_TASK.ref();
                UPG_TASK.STAN:=.act_real();
                UPG_TASK.INFRES:=.act_infres();
                UPG_TASK.put(1)
             ?};
             UPG_TASK.cntx_pop();
             _res"),
   obj_meth('runOneTASK',
            "
::           Uruchomienie formuły
::           [_a] - 1-z zapisem czasu
             _res:=0;
             _log:={? var_pres('_a')=type_of(0) || _a || 0 ?};
             _form:=UPG_REAL.UPG_TASK().FORM;
             {? _log
             || _bd:=date(); _bt:=time(); _opis:=exec('opis','#upgrade',_form);
                _nfile:={? UPG_REAL.FIRMA<>null()
                        || UPG_REAL.FIRMA().SYMBOL+'_time_upgrade_imp.log'
                        || 'ALL_time_upgrade_imp.log'
                        ?}
             ?};
             _res:=($_form)();
             {? _log
             || _ed:=date(); _et:=time();
                _tm:=form(exec('timeDiff','#datetime',_bd,_bt,_ed,_et),,3);
                _file:=fopen(_nfile,'a');
                {? _file
                || fwrite(_file,_opis+' - '+_tm);
                   fclose(_file)
                ?}
             ?};
             _res"),
   obj_meth('run_manual',
            "
::          Uruchomienie zadania manualnego do wykonania
::            _result: 0-błąd przerwano
::                     1-zakończono aktualizację sukcesem
::                    -1-zrezygnowano z wykonania zadania manualnego
            _res:=0;
            {? exec('ctrlManual','#upgrade')
            || _log:=exec('logTIME','#upgrade',.USERS);
               _rlock:=UPG_REAL.r_lock(1,1,1);
               {? _rlock
               || UPG_REAL.RUN:='T';
                  UPG_REAL.USERS:=.USERS;
                  UPG_REAL.BEGD:=date();
                  UPG_REAL.BEGT:=time();
                  UPG_REAL.put(1);
                  UPG_REAL.cntx_psh();
                  .REAL:=UPG_REAL.ref();
                  .del_msg();
                  _res:=.runOneTASK(_log);
                  {? var_pres('_res')<>type_of(0)
                  || .msg('Niepoprawny wynik zwracany przez formułę.'@);
                     UPG_REAL.RUN:='N';
                     UPG_REAL.RUNT:=time(0,0,0);
                     UPG_REAL.put(1);
                     _res:=0
                  |? _res>0
                  || UPG_REAL.DATA:=date();
                     UPG_REAL.CZAS:=time();
                     UPG_REAL.RUNT:={? UPG_REAL.BEGD=date(0,0,0)
                                    || 0
                                    || exec('timeDiff','#datetime',UPG_REAL.BEGD,UPG_REAL.BEGT
                                        ,UPG_REAL.DATA,UPG_REAL.CZAS)
                                    ?};
                     UPG_REAL.USERS:=.USERS;
                     UPG_REAL.STAN:='T';
                     UPG_REAL.ERROR:=0;
                     UPG_REAL.INFRES:='T';
                     UPG_REAL.RUN:='N';
                     _res:=1;
                     UPG_REAL.put(1)
                  |? _res<0
                  || _res:=1;
                     UPG_REAL.USERS:=.USERS;
                     UPG_REAL.DATA:=date(0,0,0);
                     UPG_REAL.CZAS:=time(0,0,0);
                     UPG_REAL.RUNT:=time(0,0,0);
                     {? ~UPG_REAL.ERROR || UPG_REAL.RUN:='N' ?};
                     UPG_REAL.put(1);
                     _dt:=form(date,,7);
                     _tm:=form(time,,4);
                     _we:='w'+{? (1+_dt)='w' || 'e' || '' ?};
                     .msg('Użytkownik %1 zrezygnował z wykonania zadania %4 %2, %3.'@[UPG_REAL.USERS().KOD,_dt,_tm,_we])
                  || UPG_REAL.DATA:=date();
                     UPG_REAL.CZAS:=time();
                     UPG_REAL.RUNT:={? UPG_REAL.BEGD=date(0,0,0)
                                    || time(0,0,0)
                                    || exec('timeDiff','#datetime',UPG_REAL.BEGD,UPG_REAL.BEGT
                                        ,UPG_REAL.DATA,UPG_REAL.CZAS)
                                    ?};
                     UPG_REAL.USERS:=.USERS;
                     UPG_REAL.STAN:='N';
                     UPG_REAL.RUN:='N';
                     UPG_REAL.ERROR:=1;
                     UPG_REAL.INFRES:='E';
                     UPG_REAL.put(1)
                  ?};
                  UPG_REAL.cntx_pop()
               || FUN.info('Aktualnie dane zadanie jest przetwarzane.\nUruchomienie niemożliwe.'@)
               ?};
               UPG_REAL.r_unlock();
               .TASK:=UPG_REAL.UPG_TASK;
               UPG_TASK.cntx_psh();
               UPG_TASK.prefix();
               {? UPG_TASK.seek(.TASK)
               || UPG_TASK.STAN:=.act_real();
                  UPG_TASK.INFRES:=.act_infres();
                  UPG_TASK.put(1)
               ?};
               UPG_TASK.cntx_pop()
            || FUN.info('Nie wykonano poprzednich wymaganych zadań manualnych.\nOperacja niemożliwa.'@)
            ?};
            _res"),
   obj_meth('run_all',
            "
::          Uruchomienie wszystkich zadań automatycznych do wykonania
::            _result: 0-błąd przerwano
::                     1-zakończono aktualizację sukcesem
::                    -1-oczekuję na wykonanie zadań w innej firmie lub zadań manualnych
            _res:=-1;
            _noreal:=exec('FindInSet','#table','UPG_REAL','STAN',0,'T',,,'N')<>null();
            _block:=0;
            _ctrl:=0;
            {? ~_noreal
            || {? ~.MODE
               || FUN.info('Aktualnie wszystkie formuły potransferowe zostały wykonane.\nOperacja niemożliwa.'@)
               ?};
               _res:=1;
               .unblock_run(0)
            |? (_ctrl:=.ctrl_run(); _ctrl=1)
            || {? ~.MODE
               || FUN.info('Aktualnie uruchomiono przetwarzanie formuł potransferowych.\nOperacja niemożliwa.'@)
               ?}
            |? _ctrl=-2
            || {? ~.MODE
               || FUN.info('Aktualnie nie wykonano wszystkich wymaganych zadań manualnych.\nOperacja niemożliwa.'@)
               ?};
               _res:=-1
            |? (_block:=.block_run(); _block)
            || _res:=1;
               _brfirm:=0;
               UPG_TASK.cntx_psh();
               UPG_REAL.index('ORDER');
               UPG_REAL.prefix('T','N');
               {? UPG_REAL.first()
               || _log:=exec('logTIME','#upgrade',.USERS);
                  {!
                  |? {? ~UPG_REAL.DISABLED
                     || _ref:=UPG_REAL.ref();
                        _alfirm:=UPG_REAL.FIRMA=null();
                        _isfirm:=_alfirm | UPG_REAL.FIRMA=REF.FIRMA;
                        {? _alfirm & _brfirm
                        || _order:=UPG_REAL.ORDER;
                           UPG_REAL.cntx_psh();
                           UPG_REAL.index('ORDER');
                           UPG_REAL.prefix('T','N');
                           {? UPG_REAL.first()
                           || {! |? {? ~UPG_REAL.DISABLED || 0 || UPG_REAL.next() ?} !};
                              {? ~UPG_REAL.DISABLED & UPG_REAL.ORDER<_order || _isfirm:=0 ?}
                           ?};
                           UPG_REAL.cntx_pop()
                        |? ~_isfirm
                        || _brfirm:=1;
                           {? UPG_REAL.next()
                           || {!
                              |? {? UPG_REAL.FIRMA<>null()
                                 || {? UPG_REAL.FIRMA=REF.FIRMA
                                    || _isfirm:=1;
                                       _ref:=UPG_REAL.ref();
                                       0
                                    || UPG_REAL.next()
                                    ?}
                                 || 0
                                 ?}
                              !}
                           ?}
                        ?};
                        _rlock:=UPG_REAL.r_lock(1,1,1);
                        _nowait:=exec('waitRun','#upgrade',UPG_REAL.SYSTEM);
                        _next:=_nowait & _isfirm & _rlock & UPG_REAL.next();
                        UPG_REAL.cntx_psh();
                        UPG_REAL.prefix();
                        {? ~_isfirm | ~_rlock | ~_nowait
                        || _res:=-1;
                           UPG_REAL.r_unlock()
                        |? UPG_REAL.seek(_ref)
                        || UPG_REAL.RUN:='T';
                           UPG_REAL.BEGD:=date();
                           UPG_REAL.BEGT:=time();
                           UPG_REAL.put(1);
                           {? .MODE=0 || exec('refreshTEKST','#upgrade') ?};
                           UPG_REAL.cntx_psh();
                           .REAL:=UPG_REAL.ref();
                           .del_msg();
                           _res:=.runOneTASK(_log);
                           UPG_REAL.cntx_pop();
                           UPG_REAL.RUN:='N';
                           UPG_REAL.put(1);
                           {? var_pres('_res')<>type_of(0)
                           || .msg('Niepoprawny wynik zwracany przez formułę.'@);
                              UPG_REAL.DATA:=date();
                              UPG_REAL.CZAS:=time();
                              UPG_REAL.RUNT:={? UPG_REAL.BEGD=date(0,0,0)
                                             || time(0,0,0)
                                             || exec('timeDiff','#datetime',UPG_REAL.BEGD,UPG_REAL.BEGT
                                                 ,UPG_REAL.DATA,UPG_REAL.CZAS)
                                             ?};
                              UPG_REAL.USERS:=.USERS;
                              UPG_REAL.STAN:='N';
                              UPG_REAL.ERROR:=1;
                              UPG_REAL.INFRES:='E';
                              {? UPG_REAL.put(1) || .del_manbuf() ?};
                              _res:=0
                           |? _res<>0
                           || UPG_REAL.DATA:=date();
                              UPG_REAL.CZAS:=time();
                              UPG_REAL.RUNT:={? UPG_REAL.BEGD=date(0,0,0)
                                             || time(0,0,0)
                                             || exec('timeDiff','#datetime',UPG_REAL.BEGD,UPG_REAL.BEGT
                                                 ,UPG_REAL.DATA,UPG_REAL.CZAS)
                                             ?};
                              UPG_REAL.USERS:=.USERS;
                              UPG_REAL.STAN:='T';
                              UPG_REAL.ERROR:={? _res<0 || 2 || 0 ?};
                              UPG_REAL.INFRES:={? _res<0 || 'W' || 'T' ?};
                              _res:=1;
                              {? UPG_REAL.put(1)
                              || .required();
                                 .act_one_task(UPG_REAL.UPG_TASK)
                              ?}
                           || UPG_REAL.DATA:=date();
                              UPG_REAL.CZAS:=time();
                              UPG_REAL.RUNT:={? UPG_REAL.BEGD=date(0,0,0)
                                             || time(0,0,0)
                                             || exec('timeDiff','#datetime',UPG_REAL.BEGD,UPG_REAL.BEGT
                                                 ,UPG_REAL.DATA,UPG_REAL.CZAS)
                                             ?};
                              UPG_REAL.USERS:=.USERS;
                              UPG_REAL.STAN:='N';
                              UPG_REAL.ERROR:=1;
                              UPG_REAL.INFRES:='E';
                              {? UPG_REAL.put(1) || .del_manbuf() ?}
                           ?};
                           UPG_REAL.r_unlock()
                        ?};
                        {? .MODE=0 || exec('refreshTEKST','#upgrade') ?};
                        UPG_REAL.cntx_pop()
                     || _next:=UPG_REAL.next()
                     ?};
                     _res>0 & _next
                  !}
               ?};
               .unblock_run({? _res=1 || 0 || 1 ?});
               .act_task();
               UPG_TASK.cntx_pop()
            |? ~_block
            || {? ~.MODE
               || _kod:=exec('FindAndGet','#table',FIRMA,.INFIRM,,\"SYMBOL\",'');
                  FUN.info('Aktualizację należy uruchomić w firmie %1.'@[_kod])
               ?}
            || {? ~.MODE
               || FUN.info('Nie udało się uruchomić przetwarzanie formuł potransferowych.\nOperacja niemożliwa.'@)
               ?}
            ?};
            _res")

   )
?};
~~


\inter_event
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: warunek dla zdarzenia pośredniego - czy można dalej przetwarzać
::   WY: 1-wystartuj
::       0-nie
::----------------------------------------------------------------------------------------------------------------------
{? exec('refresh','#upgrade')
|| _refLogN:=exec('FindInSet','#table','UPG_LOG','END','N');
   _refLogX:=exec('FindInSet','#table','UPG_LOG','END','X');
   _runManu:={? exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T')<>null()
             || exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T',"UPG_REAL.UPG_TASK().AUTO",,,'')='N'
             || 0
             ?};

   _res:=_refLogN<>null();
   _noreal:=exec('FindInSet','#table','UPG_REAL','STAN',0,'T',,,'N')<>null();
   _break:=_refLogX<>null();
   _nowait:=exec('waitRun','#upgrade');
   _infirm:=null();
   _ctrlupg:=exec('ctrlStruct','#upgrade');

:: kontrola czy jest jakieś zadanie w danej firmie do wykonania
   _firmtask:=0;
   UPG_TASK.cntx_psh();
   UPG_REAL.cntx_psh();
   UPG_TASK.index('SYSTEM2');
   UPG_TASK.prefix('T');
   {? UPG_TASK.first() & UPG_TASK.find_tab('first','STAN',,'<>','T')
   || _sysfirm:=UPG_TASK.SYSTEM+UPG_TASK.FIRM;
      {!
      |? {? _sysfirm=(UPG_TASK.SYSTEM+UPG_TASK.FIRM)
         ||
::          pobiera pierwsze zadanie nie do końca przetworzone
            UPG_REAL.index('TASK');
            {? UPG_TASK.FIRM='T'
            || UPG_REAL.prefix(UPG_TASK.ref())
            || UPG_REAL.prefix(UPG_TASK.ref(),REF.FIRMA)
            ?};
            {? UPG_REAL.first() & UPG_REAL.find_tab('first','STAN',,'=','N','DISABLED',,'=',0,'RUN',,'<>','T')
            || _firmtask:=1
            |? UPG_TASK.FIRM='T'
            || _firmtask:=-1
            ?}
         || _firmtask:=-1
         ?};
         _firmtask=0 & UPG_TASK.find_tab('next','STAN',,'<>','T')
      !}
   ?};
   UPG_TASK.cntx_pop();
   UPG_REAL.cntx_pop();
   {? ~_ctrlupg
   || _res:=0
   |? ~_noreal & ~_runManu
   || _res:=1
   || {? _firmtask<=0
      || _res:=-2
      |? _firmtask=1
      || _res:=0
      |? ~_nowait
      || _res:=-2
      |? _break
      || _firm:=null();
         UPG_REAL.cntx_psh();
         UPG_REAL.index('ORDER');
         UPG_REAL.prefix('T','N',);
         {? UPG_REAL.first()
         || {!
            |? {? ~UPG_REAL.DISABLED
               || _firm:=UPG_REAL.FIRMA;
                  0
               || UPG_REAL.next()
               ?}
            !};
            {? _firm<>null()
            || {!
               |? {? UPG_REAL.FIRMA=null()
                  || 0
                  || {? UPG_REAL.FIRMA=REF.FIRMA
                     || _firm:=UPG_REAL.FIRMA;
                        0
                     || UPG_REAL.next()
                     ?}
                  ?}
               !}
            ?}
         ?};
         UPG_REAL.cntx_pop();
         _infirm:=_firm;
         {? _infirm=REF.FIRMA || _res:=-1 ?}
      ?};
      {? _res=-2
      || _res:=0
      |? _res<=0
      || _res:=(_infirm=null() | _infirm=REF.FIRMA) & exec('todoReal','#upgrade',REF.FIRMA)
      || _res:=0
      ?}
   ?}
|| _res:=0
?};
_res


\start_event
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: warunek dla zdarzenia startowego - czy można uruchomić
::   WY: 1-wystartuj
::       0-nie
::----------------------------------------------------------------------------------------------------------------------
_refLogN:=exec('FindInSet','#table','UPG_LOG','END','N');
_refLogX:=exec('FindInSet','#table','UPG_LOG','END','X');

_res:=_refLogN<>null();

_startfirm:='XMPR'*exec('FindInSet','#table','UPG_FIRM','FIRMA',REF.FIRMA,_refLogN,"UPG_FIRM.END",,,'')
          | 'XMPR'*exec('FindInSet','#table','UPG_FIRM','FIRMA',REF.FIRMA,_refLogX,"UPG_FIRM.END",,,'');

_noreal:=exec('FindInSet','#table','UPG_REAL','STAN',0,'T',,,'N')<>null();
_break:=~_res & exec('FindInSet','#table','UPG_LOG','END','X')<>null();
_error:=exec('FindInSet','#table','UPG_REAL','ERROR',1,'T',,,'N')<>null();
_infirm:=null();
{? ~_error & _break
|| _firm:=null();
   UPG_REAL.cntx_psh();
   UPG_REAL.index('ORDER');
   UPG_REAL.prefix('T','N',);
   {? UPG_REAL.first()
   || {!
      |? {? ~UPG_REAL.DISABLED
         || _firm:=UPG_REAL.FIRMA;
            0
         || UPG_REAL.next()
         ?}
      !};
      {? _firm<>null()
      || {!
         |? {? UPG_REAL.FIRMA=null()
            || 0
            || {? UPG_REAL.FIRMA=REF.FIRMA
               || _firm:=UPG_REAL.FIRMA;
                  0
               || UPG_REAL.next()
               ?}
            ?}
         !}
      ?}
   ?};
   UPG_REAL.cntx_pop();
   _infirm:=_firm;
   {? _infirm=REF.FIRMA || _res:=-1 ?}
|? _error
|| _res:=1
?};
{? _res<=0
|| _res:=(_infirm=null() | _infirm=REF.FIRMA) & exec('todoReal','#upgrade')
|| _res:=0
?};
{? _res & _startfirm || _res:=0 ?};
_res


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła do odświeżenia struktury aktualizacji
::   WY: 0-wykonano, 1-trwa aktualizacja, 2-trwa aktualizacja struktury, -1-nie udało się założyć blokady
::----------------------------------------------------------------------------------------------------------------------
_tm_serv:=server_start_idtime();
UPG_LOG.cntx_psh();
UPG_FIRM.cntx_psh();
UPG_LOG.index('DTTM');
UPG_LOG.prefix();
{? UPG_LOG.first()
|| {!
   |? {? UPG_LOG.S_IDTIME<>_tm_serv & UPG_LOG.END<>'A' & UPG_LOG.r_lock(1,1,1)
      || UPG_FIRM.index('FIRMA');
         UPG_FIRM.prefix(UPG_LOG.ref());
         {? UPG_FIRM.first() || {! |? UPG_FIRM.del() !} ?};
         UPG_LOG.r_unlock();
         UPG_LOG.del()
      || UPG_LOG.next()
      ?}
   !}
?};
UPG_LOG.cntx_pop();
UPG_FIRM.cntx_pop();

_refLogN:=exec('FindInSet','#table','UPG_LOG','END','N');
_refLogX:=exec('FindInSet','#table','UPG_LOG','END','X');
_refLogU:=exec('FindInSet','#table','UPG_LOG','END','U');

_upgrade:=_refLogN<>null() | _refLogX<>null();
_refresh:=_refLogU<>null();
_runManu:={? exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T')<>null()
          || exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T',"UPG_REAL.UPG_TASK().AUTO",,,'')='N'
          || 0
          ?};

:: kontrola czy aby na pewno ktoś update-uje, czy nie został przekroczony czas na update formuł (5 minut)
{? _refresh
|| _date:=exec('FindAndGet','#table',UPG_LOG,_refLogU,,"DATA",date());
   _time:=exec('FindAndGet','#table',UPG_LOG,_refLogU,,"CZAS",time());
   _idsr:=exec('FindAndGet','#table',UPG_LOG,_refLogU,,"S_IDTIME",'');
   _upgr:=0;
   {? _date=date(0,0,0) & _time=time(0,0,0) & _idsr<>''
   || _upgr:=1;
      _date:=exec('str2date','#convert',(10+_idsr));
      _time:=exec('str2time','#convert',8+(11-_idsr))
   ?};
   {? (_upgr & ~exec('ctrlStruct','#upgrade')) | (*exec('timeDiff','#datetime',_date,_time,date(),time()))>5
   || UPG_LOG.prefix();
      {? UPG_LOG.seek(_refLogU) & UPG_LOG.r_lock(1,1,1)
      || UPG_FIRM.index('FIRMA');
         UPG_FIRM.prefix(UPG_LOG.ref());
         {? UPG_FIRM.first() || {! |? UPG_FIRM.del() !} ?};
         UPG_LOG.r_unlock();
         {? UPG_LOG.del(1,1)
         || _refLogU:=null();
            _refresh:=0
         ?}
      ?}
   ?}
?};

_res:={? _upgrade | _runManu || 1 |? _refresh || 2 || -1 ?};

{? ~_upgrade & ~_refresh & ~_runManu & UPG_LOG.lock(1,1,1)
|| UPG_LOG.prefix();
   UPG_LOG.blank();
   UPG_LOG.USERS:=OPERATOR.USER;
   UPG_LOG.DATA:=date();
   UPG_LOG.CZAS:=time();
   UPG_LOG.END:='U';
   UPG_LOG.S_IDTIME:=_tm_serv;
   _res:=UPG_LOG.add(1);
   {? _res
   || _ref:=UPG_LOG.ref();
      exec('workInit','#upgrade');
      exec('init','upgrade');
      exec('workDone','#upgrade');
      UPG_LOG.prefix();
      {? UPG_LOG.seek(_ref)
      || UPG_LOG.DATA:=date(0,0,0);
         UPG_LOG.CZAS:=time(0,0,0);
         {? UPG_LOG.put(1)
         ||
::          założenie log-ów dla firm
            FIRMA.cntx_psh();
            FIRMA.index('SYMBOL');
            {? FIRMA.first()
            || {!
               |? {? (FIRMA.TYP='S' | FIRMA.SYMBOL='000') & FIRMA.Z='N'
                   & exec('FindInSet','#table','UPG_FIRM','FIRMA',FIRMA.ref(),_ref,,,,null())=null()
                  || UPG_FIRM.blank();
                     UPG_FIRM.UPG_LOG:=_ref;
                     UPG_FIRM.FIRMA:=FIRMA.ref();
                     UPG_FIRM.END:='N';
                     UPG_FIRM.add(1)
                  ?};
                  FIRMA.next()
               !}
            ?};
            FIRMA.cntx_pop()
         ?}
      ?};
      _res:=0
   ?};
   UPG_LOG.unlock()
?};
_res


\refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła sprawdza czy wykonano
::   WY: 1-wykonano, 2-znaleziono log-a o wykonaniu update-u, 0-oczekiwanie na zadania manualne lub trwa aktualizacja
::----------------------------------------------------------------------------------------------------------------------
_refLogU:=exec('FindInSet','#table','UPG_LOG','END','U');
_tm_serv:={? _refLogU<>null()
          || exec('FindAndGet','#table',UPG_LOG,_refLogU,,"S_IDTIME",'')=server_start_idtime()
          || 0
          ?};
_endActU:={? _refLogU<>null()
          || exec('FindAndGet','#table',UPG_LOG,_refLogU,,"DATA=date(0,0,0) & CZAS=time(0,0,0)",0)
          || 0
          ?};
UPG_REAL.cntx_psh();
UPG_REAL.index('TASKRUN');
UPG_REAL.prefix('T',0);
{? UPG_REAL.first()
|| {!
   |? {? UPG_REAL.STAN='T' | ~_tm_serv
      || _ref:=UPG_REAL.ref();  _oki:=UPG_REAL.next();
         UPG_REAL.cntx_psh();
         UPG_REAL.prefix();
         {? UPG_REAL.seek(_ref) || UPG_REAL.RUN:='N'; UPG_REAL.put(1) ?};
         UPG_REAL.cntx_pop()
      || _oki:=UPG_REAL.next()
      ?};
      _oki
   !}
?};
UPG_REAL.cntx_pop();
_runManu:={? exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T')<>null()
          || exec('FindInSet','#table','UPG_REAL','TASKRUN',0,'T',"UPG_REAL.UPG_TASK().AUTO",,,'')='N'
          || 0
          ?};

{? _runManu
|| _res:=0
|? _refLogU<>null() & _tm_serv & _endActU
|| _res:=1
|? _refLogU<>null() & _tm_serv & ~_endActU
|| _res:=0
|| exec('__UPG','#object');
   exec('init','#upgrade');
   _res:=0
?};
_res


\getVersion
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła ustawia początkowy wpis o wersji systemu lub też zwraca numer wersji
::       Ustalenie początkowej wersji systemu
::   WY: numer wersji systemu
::----------------------------------------------------------------------------------------------------------------------
_res:='';
:: uzupełnienie zapisu o wersji
UPG_VER.index('VERSION');
UPG_VER.prefix();
{? UPG_VER.find_tab('first','FIRMA',,'=','') || UPG_VER.STAN:='V'; UPG_VER.put(1) ?};
UPG_HEAD.index('SYMBOL');
UPG_HEAD.prefix('upgradex1842');
{? UPG_HEAD.first() || UPG_HEAD.prefix(); UPG_HEAD.SYMBOL:='upgradexpertis'; UPG_HEAD.put(1) ?};
:: ustalenie wersji
UPG_VER.index('VERSION');
UPG_VER.prefix('V');
{? UPG_VER.first()
|| _res:=UPG_VER.VERSION;
   {? (5+_res)='12.41' & exec('FindInSet','#table','UPG_HEAD','VERSION','17.14',,,1)<>null()
   || UPG_VER.VERSION:='12.51';
      UPG_VER.put(1);
      _res:=UPG_VER.VERSION
   ?}
|| _proc:=sql('select top 1 bi_proc from @bi_prel').first();
   _1241:=sql('select top 1 NR from @FO').first();
   _1700:=sql('select top 1 KOD from USERS where USERS.EKIOSK=\'\'').first();

   {? _1241
   || _res:='12.41'+'-'+exec('verINFiles','#upgrade')
   |? _1700
   || _res:='17.00'
   || _prev:='';
      _files:=files('upgrade_????.fml');
      {? _files.first()
      || {!
         |? _ver:=4+(8-_files.FILENAME);
            _ver:=(2+_ver)+'.'+(_ver+2);
            {? (_ver+2)<>'xx' & (_res='' | _res<_ver) || _prev:=_res; _res:=_ver ?};
            _files.next()
         !}
      ?};
      obj_del(_files);
      {? _proc | _res='' || {? _prev=_res | _prev='' || _res:='17.00' || _res:=_prev ?} ?}
   ?};
   {? _res<>''
   || UPG_VER.blank();
      UPG_VER.VERSION:=_res;
      UPG_VER.STAN:='V';
      {? exec('FindInSet','#table','UPG_VER','VERSION','V')=null() || UPG_VER.add(1) ?}
   ?}
?};
::_res:='12.41';
_res


\waitManual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła sprawdza czy wykonano wszystkie WYMAGANE zadania maunalne dla wcześniejszej wersji wersji
::   WE: _a - wersja, dla której sprawdzamy
::       _b - kontrola również wg aktualnej wersji
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
UPG_TASK.cntx_psh();
UPG_REAL.cntx_psh();
UPG_REAL.index('REQUIRED');
UPG_REAL.prefix('N','T','N',0);
{? UPG_REAL.first() & {? ~_b || UPG_REAL.UPG_TASK().SYSTEM<_a || UPG_REAL.UPG_TASK().SYSTEM<=_a ?} || _res:=0 ?};
UPG_TASK.cntx_pop();
UPG_REAL.cntx_pop();
_res


\waitAuto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła sprawdza czy wykonano wszystkie zadania automatyczne dla danej i wcześniejszej wersji
::   WE: _a - wersja, dla której sprawdzamy
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
UPG_TASK.cntx_psh();
UPG_REAL.cntx_psh();
UPG_REAL.index('ORDER');
UPG_REAL.prefix('T','N');
{? UPG_REAL.first()
|| {! |? {? ~UPG_REAL.DISABLED || 0 || UPG_REAL.next() ?} !};
   {? ~UPG_REAL.DISABLED & UPG_REAL.UPG_TASK().SYSTEM<=_a || _res:=0 ?}
?};
UPG_TASK.cntx_pop();
UPG_REAL.cntx_pop();
_res


\waitRun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła sprawdza czy przed aktualnym zadaniem automatycznym wykonano wymagalne manualne
::   WE: [_a] - system do kontroli, jeśli nie podano (domyślnie) to pobiera z pierwszego automatycznego niewykonanego
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_system:={? var_pres('_a')=type_of('') || _a || '' ?};
_res:=0;
_man:=0;
UPG_TASK.cntx_psh();
UPG_REAL.cntx_psh();
{? _system=''
|| UPG_REAL.index('ORDER');
   UPG_REAL.prefix('T','N');
   {? UPG_REAL.first()
   ||  {! |? {? ~UPG_REAL.DISABLED || 0 || UPG_REAL.next() ?} !};
       _system:={? ~UPG_REAL.DISABLED || UPG_REAL.UPG_TASK().SYSTEM || '' ?}
   || _system:=''
   ?};
   {? _system=''
   || UPG_REAL.index('ORDER');
      UPG_REAL.prefix('T','T');
      {? UPG_REAL.last()
      || {! |? {? ~UPG_REAL.DISABLED || 0 || UPG_REAL.prev() ?} !};
         {? ~UPG_REAL.DISABLED
         || _man:=1;
            _system:=UPG_REAL.UPG_TASK().SYSTEM
         || _man:=0;
            _system:=''
         ?}
      ?}
   ?}
?};
UPG_TASK.cntx_pop();
UPG_REAL.cntx_pop();
_res:={? _system<>'' || exec('waitManual','#upgrade',_system,_man) || 1 ?};
_res


\ctrlManual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła sprawdza czy wcześniejsze WYMAGANE zadanie manualne zostało wykonane
::       lub czy dane zadanie manualne nie jest wymagalne
::       (jednakże zostały wykonane wymagane manualne z wersji poprzedniej)
::       Uruchomienie dla aktualnego rekordu
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
UPG_TASK.cntx_psh();
UPG_REAL.cntx_psh();
{? UPG_REAL.UPG_TASK().REQUIRED='N'
|| _res:=exec('waitManual','#upgrade',UPG_REAL.UPG_TASK().SYSTEM,0)
|| _ref:=UPG_REAL.ref();
   _lp:=UPG_REAL.UPG_TASK().LP;
   _system:=UPG_REAL.UPG_TASK().SYSTEM;
   UPG_REAL.index('REQUIRED');
   UPG_REAL.prefix('N','T','N',0);
   {? UPG_REAL.first() & UPG_REAL.seek(_ref) & UPG_REAL.prev()
   || {!
      |? {? UPG_REAL.UPG_TASK().SYSTEM<_system | UPG_REAL.UPG_TASK().LP<_lp
         || _res:=0
         ?};
         _res & UPG_REAL.prev()
      !}
   ?};
   {? _res || _res:=exec('waitAuto','#upgrade',_system) ?}
?};
UPG_TASK.cntx_pop();
UPG_REAL.cntx_pop();
_res


\wzorVersion
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Formuła ustawia wersję dla danych wzorcowych dodatkowo usuwa dane związane z upgrade'ami
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,'OLD','STRING[5]',''
       ,'ACT','STRING[5]',''
       ,'DAT','DATE',''
       ,'NEW','STRING[5]',''
       ,'FML','STRING[5]','');

UPG_VER.prefix();
_tab.blank();
_tab.OLD:={? UPG_VER.first() || UPG_VER.VERSION || 'brak' ?};
_tab.DAT:=date();
_tab.ACT:=form((date()~1)-2000,-2,0,'99')+'.'+form(exec('NumberOfWeek','#datetime',date()),-2,0,'99');
_tab.NEW:={? _tab.OLD='brak' || _tab.ACT || _tab.OLD ?};
_files:=files('upgrade_????.fml');
_res:='brak';
{? _files.first()
|| {!
   |? _ver:=4+(8-_files.FILENAME);
      _ver:=(2+_ver)+'.'+(_ver+2);
      {? (_ver+2)<>'xx' & (_res='brak' | _res<_ver) || _res:=_ver ?};
      _files.next()
   !}
?};
obj_del(_files);
_tab.FML:=_res;
_tab.add(1);
_edt:=_tab.mk_edit('Ustawienie aktualnej wersji systemu'@,,'#upg_ver');
_tab.win_esep(_edt,'Wersja aktualna'@);
_tab.win_efld(_edt,,'OLD',,,13,,1,'Ustawiono'@);
_tab.win_esep(_edt,'Wersja proponowana'@);
_tab.win_efld(_edt,,'DAT',,,,,0,'Data emisji'@);
_tab.win_efld(_edt,,'ACT',,,13,,1,'Wg daty'@);
_tab.win_efld(_edt,,'FML',,,13,,1,'Wg pliku'@);
_tab.win_esep(_edt,'Wersja startowa'@);
_tab.win_efld(_edt,,'NEW',,,13,,0,'Zmień na'@);
exec('ok_esc','#window',_tab,_edt);
_tab.win_edit(_edt);
_tab.fld_fml('DAT','AFTER_EDIT',"
       _tab:=cur_tab();
       _tab.ACT:=form((_tab.DAT~1)-2000,-2,0,'99')+'.'+form(exec('NumberOfWeek','#datetime',_tab.DAT),-2,0,'99');
       _tab.put(1);
       ''
       ");
{? _tab.edit()
|| _tab.put(1);
   {? +_tab.NEW=5 & (_tab.NEW*'.')=3
   || UPG_VER.erase();
      UPG_VER.blank();
      UPG_VER.VERSION:=_tab.NEW;
      UPG_VER.add(1);
      __UPG.act_StartVer();
      UPG_FIRM.erase();
      UPG_LOG.erase();
      UPG_BUF.erase();
      UPG_MSG.erase();
      UPG_REAL.erase();
      UPG_TASK.erase();
      UPG_HEAD.erase()
   ?}
?};
obj_del(_tab);
~~


\workInit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Zeruję datę na wersji roboczej
::----------------------------------------------------------------------------------------------------------------------
UPG_HEAD.cntx_psh();
__UPG.zeroWorkHead();
UPG_HEAD.cntx_pop();
~~


\workDone
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Usuwa wersję roboczą jeżeli data pozostała zerowa
::----------------------------------------------------------------------------------------------------------------------
UPG_HEAD.cntx_psh();
__UPG.delWorkHead();
UPG_HEAD.cntx_pop();
~~


\actualVersion
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.28]
:: OPIS: Ustala aktualną (ostatnią) wersję systemu wg umieszczonych plików na dysku.
::       Pomijana jest wersja VV.xx i jako aktualna traktowana jest ostatnia "nierobocza"
::   WY: numer aktualnej wersji systemu w formacie 18.02 lub domyślnie '17.00'
::----------------------------------------------------------------------------------------------------------------------
_res:='17.00';
_files:=files('upgrade_????.fml');
{? _files.first()
|| {!
   |? _ver:=4+(8-_files.FILENAME);
      _ver:=(2+_ver)+'.'+(_ver+2);
      {? (_ver+2)<>'xx' & _res<_ver || _res:=_ver ?};
      _files.next()
   !}
?};
obj_del(_files);
_res


\addFVerUpgrade
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.28]
:: OPIS: Dodaje zapis o wersji dla nowo dodanej firmy
::   WE: _a - ref Firmy
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
FIRMA.prefix();
{? FIRMA.seek(_a) & ((FIRMA.TYP='S' | FIRMA.SYMBOL='000') & FIRMA.Z='N')
|| UPG_VER.index('FIRMA');
   UPG_VER.prefix(FIRMA.SYMBOL,);
   {? ~UPG_VER.first()
   || UPG_VER.blank();
      UPG_VER.VERSION:=exec('actualVersion','#upgrade');
      UPG_VER.FIRMA:=FIRMA.SYMBOL;
      UPG_VER.STAN:='T';
      UPG_VER.add(1)
   ?}
?};
FIRMA.cntx_pop();
~~


\ctrlStruct
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.02]
:: OPIS: Kontroluje strukturę wersji roboczej z aktualnie zapisaną w systemie
::       Kontrola przeprowadzana z dokładnością do: Symbolu zadania, Sposób uruchomienia, Wielofirmowość
::   WY: 1-struktura jest zgodna 0-nie jest 2-brak wersji roboczej
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_str:=31+form(exec('string_fun','#file','upgrade.fml','\init',,'xx'')'));
_str:=gsub(_str,'__UPG.add_head(\'upgrade_','');
_str:=gsub(_str,'__UPG.add_head(\'upgradex','');
_str:=4+_str;

{? +_str
|| _ver:=(2+_str)+'.'+(2-_str);
   UPG_HEAD.cntx_psh();
   UPG_HEAD.index('VERSION');
   UPG_HEAD.prefix(_ver,);
   {? UPG_HEAD.first()
   || _head:=UPG_HEAD.ref();
      {? exec('is_fun','#file',UPG_HEAD.SYMBOL,'init')
      || _str:=exec('string_fun','#file','upgrade_'+(2+_str)+'xx','\init','__UPG.add_task(','add_task',,,1);
         {? +_str
         || _tab:=tab_tmp(1,'TASK','STRING[30]',''
                   ,'AUTO','STRING[1]',''
                   ,'FIRM','STRING[1]',''
                   ,'DOMAIN','STRING[3]',''
                   ,'VERSION','INTEGER','');
            _ch:='\n';
            {! |? _wsk:=(_str*_ch); _res & _wsk
            |! _buf:=(_wsk-1)+_str;
               _str:=_wsk-_str;
               _wsk:=_buf*'\'';
               {? _wsk
               || _buf:=_wsk-_buf;
                  _wsk:=_buf*'\'';
                  {? _wsk
                  || _task:=form((_wsk-1)+_buf);
                     _buf:=_wsk-_buf;
                     _wsk:=_buf*',';
                     {? _wsk
                     || _buf:=_wsk-_buf;
                        _wsk:=_buf*',';
                        _auto:=gsub(form((_wsk-1)+_buf),'\'','');
                        {? _auto='' || _auto:='T' ?};
                        _buf:=_wsk-_buf;
                        _wsk:=_buf*',';
                        {? _wsk
                        || _firm:=gsub(form((_wsk-1)+_buf),'\'','');
                           {? _firm='' || _firm:='T' ?};
                           _buf:=_wsk-_buf;
                           _wsk:=_buf*',';
                           _end:={? ~_wsk || _wsk:=_buf*')'; 1 || 0 ?};
                           {? _wsk
                           || _domain:=gsub(form((_wsk-1)+_buf),'\'','');
                              _buf:=_wsk-_buf;
                              {? _end
                              || _version:=0
                              || _wsk:=_buf*',';
                                 {? ~_wsk || _wsk:=_buf*')' ?};
                                 _version:=#form((_wsk-1)+_buf)
                              ?};
                              _tab.clear();
                              _tab.prefix(_task,);
                              {? ~_tab.first()
                              || _tab.blank();
                                 _tab.TASK:=_task;
                                 _tab.AUTO:=_auto;
                                 _tab.FIRM:=_firm;
                                 _tab.DOMAIN:=_domain;
                                 _tab.VERSION:=_version;
                                 _tab.add(1)
                              ?}
                           || _res:=0
                           ?}
                        || _res:=0
                        ?}
                     || _res:=0
                     ?}
                  || _res:=0
                  ?}
               || _res:=0
               ?}
            !};
            _tab.clear();
            {? _res & _tab.first()
            || UPG_TASK.cntx_psh();
               UPG_TASK.index('SYMBOL');
               UPG_TASK.prefix(_head);
               {? UPG_TASK.first()
               || {!
                  |? _tab.clear();
                     _tab.prefix(UPG_TASK.SYMBOL,);
                     {? _tab.first()
                      & _tab.AUTO=UPG_TASK.AUTO & _tab.FIRM=UPG_TASK.FIRM
                      & _tab.DOMAIN=UPG_TASK.B_DOMAIN().SYMBOL & _tab.VERSION=UPG_TASK.VERSION
                     || _tab.del()
                     || _res:=0
                     ?};
                     _res & UPG_TASK.next()
                  !}
               ?};
               UPG_TASK.cntx_pop();
               {? _tab.clear(); _tab.size() || _res:=0 ?}
            ?};
            obj_del(_tab)
         ?}
      || _res:=0
      ?}
   || _res:=0
   ?};
   UPG_HEAD.cntx_pop()
|| _res:=2
?};
_res


\actdeactReal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.22]
:: OPIS: Aktywacja/dezaktywacja zadań potransferowych przy zmianie aktywności firmy
::   WE: _a - wskazanie na firmę
::----------------------------------------------------------------------------------------------------------------------
_sys:=tab_tmp(1,'SYSTEM','STRING[5]','');
UPG_REAL.cntx_psh();
UPG_VER.cntx_psh();
UPG_REAL.index('S1');
UPG_REAL.prefix(_a);
{? UPG_REAL.first()
||
:: czy dezaktywować?
   _deact:=UPG_REAL.FIRMA().A='N';
   _firma:=UPG_REAL.FIRMA().SYMBOL;
   {!
   |? _system:=UPG_REAL.SYSTEM;
      UPG_REAL.DISABLED:=_deact;
::    dla wyłączonych usuwamy zapis o błędzie
      {? UPG_REAL.ERROR & _deact || UPG_REAL.ERROR:=0; UPG_REAL.INFRES:='N' ?};
      {? UPG_REAL.put(1) & (_sys.clear(); ~_sys.find_key(_system,))
      || UPG_VER.index('ACTIVE');
         UPG_VER.prefix(_system,_firma,);
         {? UPG_VER.first()
         || {? _deact
            || {? UPG_VER.STAN='T'
               || UPG_VER.STAN:='D';
                  UPG_VER.put(1)
               ?}
            |? UPG_VER.STAN='D'
            || UPG_VER.STAN:='T';
               UPG_VER.put(1)
            ?}
         |? _deact
         || UPG_VER.blank();
            UPG_VER.VERSION:=_system;
            UPG_VER.FIRMA:=_firma;
            UPG_VER.STAN:='N';
            UPG_VER.add(1)
         ?}
      ?};
      UPG_REAL.next()
   !};
   __UPG.act_task()
?};
UPG_REAL.cntx_pop();
UPG_VER.cntx_pop();
obj_del(_sys);
~~


\todoReal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.22]
:: OPIS: Sprawdzenie czy są zadania automatyczne do wykonania
::   WE: [_a] - dodatkowa kontrola na aktualną firmę (czyli czy zadanie dla firmy lub wielofirmowe)
::   WY: 1-tak, 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_firm:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_rreal:='';
UPG_REAL.cntx_psh();
UPG_REAL.index('ORDER');
UPG_REAL.prefix('T','N',);
{? UPG_REAL.first()
|| {? _firm<>null()
   || {!
      |? {? ~UPG_REAL.DISABLED
         || _rreal:=$UPG_REAL.ref();
            0
         || UPG_REAL.next()
         ?}
      !};
      UPG_REAL.first()
   ?};
   {!
   |? {? _firm=null() | _firm=UPG_REAL.FIRMA
      || _res:=~UPG_REAL.DISABLED
      |? _firm<>null() & UPG_REAL.FIRMA=null() & ~UPG_REAL.DISABLED
      || {? $UPG_REAL.ref()=_rreal || _res:=1 || _res:=-1 ?}
      ?};
      ~_res & UPG_REAL.next()
   !};
   {? _res<0 || _res:=0 ?}
?};
UPG_REAL.cntx_pop();
_res


\isError
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.22]
:: OPIS: Sprawdzenie czy są zadania z błędem
::   WY: 1-tak, 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
UPG_TASK.cntx_psh();
UPG_REAL.cntx_psh();
UPG_REAL.index('TASKERR');
UPG_REAL.prefix(1);
{? UPG_REAL.first()
|| {!
   |? _res:=~UPG_REAL.DISABLED & UPG_REAL.UPG_TASK().STAN<>'T';
      ~_res & UPG_REAL.next()
   !}
?};
UPG_TASK.cntx_pop();
UPG_REAL.cntx_pop();
_res


\verINFiles
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.22]
:: OPIS: Zwraca ostatni wersję wg ostatniego pliku
::   WY: 1-tak, 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:='00.00';
_files:=files('upgrade_????.fml');
{? _files.first()
|| {!
   |? _ver:=4+(8-_files.FILENAME);
      _ver:=(2+_ver)+'.'+(_ver+2);
      {? (_ver+2)<>'xx' & (_res='' | _res<_ver) || _prev:=_res; _res:=_ver ?};
      _files.next()
   !}
?};
obj_del(_files);
_res


\createReport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Tworzy tablicę nazwaną ze statystykami wykonania formuły aktualizującej dane.
::   WE:
::   WY: referencja tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_rep:=obj_new(
:  pola statystyk wykonania
   'all','cnt','mod','uch','err',
:  "metody" zwiększające wartości liczników
   'setAll','incCnt','incMod','incUch','incErr',
:  zapis raportu
   'write'
);
{! _ii:=1..5
|! _rep[_ii]:=0
!};

_rep.setAll:=".all:=_a";
_rep.incCnt:=".cnt+=1";
_rep.incMod:=".mod+=1";
_rep.incUch:=".uch+=1";
_rep.incErr:=".err+=1";

_rep.write:="
   __UPG.msg('Całkowita liczba wierszy %1, w tym:'[$.all]);
   __UPG.msg('%1 przetworzonych'[$.cnt]);
   __UPG.msg('%1 zaktualizowanych'[$.mod]);
   __UPG.msg('%1 pominiętych'[$.uch]);
   __UPG.msg('%1 błędnych'[$.err]);
   ~~
";

_rep


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Wyświetla informacje o nowych funkcjonalnościach w poszczególnych wersjach systemu
::----------------------------------------------------------------------------------------------------------------------
_co_nowego_wiki:=exec('co_nowego','#help');
exec('browser_launch','#help',_co_nowego_wiki);
~~


\noReal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Kontrola czy są niewykonane realizacje
::   WY: 0-wszystko wykonane,
::       1-niewykonane tylko wielofirmowe, 2-niewykonane tylko jednofirmowe, 3-niewykonane takie i takie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
UPG_REAL.cntx_psh();
UPG_REAL.index('STAN');
UPG_REAL.prefix('T','N',0);
{? UPG_REAL.find_tab('first','UPG_TASK','FIRM','=','T') || _res+=1 ?};
{? UPG_REAL.find_tab('first','UPG_TASK','FIRM','=','N') || _res+=2 ?};
UPG_REAL.cntx_pop();
_res


\ctrl_fun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Sprawdza czy w podanym pliku lub plikach skojarzonych istnieje formuła
::   WE: _a - plik
::       _b - formuła
::   WY: nazwa dyskowa pliku lub '' jesli nie ma formuły
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? _a*'upgrade_' | _a*'qupgrade'
|| {? exec('is_fun','#file',_a,_b) || _res:=_a ?}
|| {? exec('is_fun','#file','upgradexpertis',_b)
   || _res:=_a
   || _files:=files('upgradexperti?.fml');
      {? _files.first()
      || {!
         |? _fname:=gsub(_files.FILENAME,'.fml','');
            {? _fname<>'upgradexpertis' & exec('is_fun','#file',_fname,_b) || _res:=_fname ?};
            _res='' & _files.next()
         !}
      ?};
      obj_del(_files)
   ?}
?};
_res


\opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Zamiana napisu formuły
::   WE: _a - formuła zapisana jako string
::   WY: formuła,plik
::----------------------------------------------------------------------------------------------------------------------
gsub((6-_a)-2,'\',\'',',')


\logTIME
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Sprawdza czy włączone jest zapisywanie log-ów czasowych
::   WE: _a - użytkownik
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('get','#params',4101,2,_a)='T';
_res


\none_S_IDTIME
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Zeruje identyfikator startu serwera
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_tm_serv:=server_start_idtime();
UPG_LOG.cntx_psh();
UPG_FIRM.cntx_psh();
UPG_LOG.index('DTTM');
UPG_LOG.prefix();
{? UPG_LOG.first()
|| {!
   |? {? UPG_LOG.S_IDTIME=_tm_serv & UPG_LOG.r_lock(1,1,1)
      || UPG_FIRM.index('FIRMA');
         UPG_FIRM.prefix(UPG_LOG.ref());
         {? UPG_FIRM.first() || {! |? UPG_FIRM.del() !} ?};
         UPG_LOG.r_unlock();
         UPG_LOG.del()
      || UPG_LOG.next()
      ?}
   !}
?};
UPG_LOG.cntx_pop();
UPG_FIRM.cntx_pop();

_res


\splitVER
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: dokleja do zmiennej _ver wersje wdrożeniowe zadań potransferowych
::   WE: _a - wersja
::   WY: posklejane wersje
::----------------------------------------------------------------------------------------------------------------------
_ver:=_a;
_res:='';

_tabres:=tab_tmp(2,'VER','STRING[20]',''
          ,'SORT','INTEGER',''
          ,'MOD','STRING[1]','');
:: przepisujemy wersje wg standardowej aktualizacji
_tabver:=spli_str(_ver,'.');
_len:=obj_len(_tabver);
{! _ii:=1.._len
|! _tabres.blank();
   _tabres.VER:=_tabver[_ii];
   _tabres.MOD:='N';
   _tabres.SORT:=0;
   _tabres.add(1)
!};
obj_del(_tabver);
:: przepisujemy wersje wg aktualizacji z warstwy modify

_qupgrade:='qupgrade';
_ver:={? exec('is_fun','#file',_qupgrade,'init')
      || exec('init',_qupgrade)
      || ''
      ?};
{? var_pres('_ver')=type_of('') & +_ver
||
   _tabver:=spli_str(_ver,'.');
   _len:=obj_len(_tabver);
   {! _ii:=1.._len
   |! {? (_tabver[_ii]+1)='^'
      || _value:=_tabver[_ii]-1;
         _sort:=-1
      || _value:=_tabver[_ii];
         _sort:=1
      ?};
      _tabres.blank();
      _tabres.VER:=_value;
      _tabres.MOD:='T';
      _tabres.SORT:=_sort;
      _tabres.add(1)
   !};
   obj_del(_tabver)
?};

_tabres.clear();
{? _tabres.first()
|| _res:='';
   {!
   |? _res+='%1%2.'[{? _tabres.MOD='T' || {? _tabres.SORT<0 || 'Q' || 'q' ?} || '' ?},_tabres.VER];
      _tabres.next()
   !};
   _res:=_res-1
?};
obj_del(_tabres);
_res


\upg_firm_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Zwraca wartośc dla UPG_FIRM.END
::   WE: _a - T/N/X/B/C
::   WY: Wartość UPG_FIRM.END uwzględniająca wysłanie maila
::----------------------------------------------------------------------------------------------------------------------
:: Wartości UPG_FIRM.END
:: Podstawowe  Aut.  Man.  Aut.+Man.
:: T           B     C     D
:: N           E     F     G
:: X           M     P     R
_old_end:=UPG_FIRM.END;
_new_end:={? var_press('_a')=type_of('') || _a || '' ?};

{? _new_end='T'
||
   {? 'TNX'*_old_end || 'T'
   |? 'BEM'*_old_end || 'B'
   |? 'CFP'*_old_end || 'C'
   |? 'DGR'*_old_end || 'D'
   || _new_end
   ?}
|? _new_end='N'
||
   {? 'TNX'*_old_end || 'N'
   |? 'BEM'*_old_end || 'E'
   |? 'CFP'*_old_end || 'F'
   |? 'DGR'*_old_end || 'G'
   || _new_end
   ?}
|? _new_end='X'
||
   {? 'TNX'*_old_end || 'X'
   |? 'BEM'*_old_end || 'M'
   |? 'CFP'*_old_end || 'P'
   |? 'DGR'*_old_end || 'R'
   || _new_end
   ?}
::Wysłano maila o zadaniach automatycznych
|? _new_end='B' & 'TNX'*_old_end
||
   {? 'T'*_old_end || 'B'
   |? 'N'*_old_end || 'E'
   |? 'X'*_old_end || 'M'
   || _new_end
   ?}
|? _new_end='B' & 'CFP'*_old_end
||
   {? 'C'*_old_end || 'D'
   |? 'F'*_old_end || 'G'
   |? 'P'*_old_end || 'R'
   || _new_end
   ?}
::Wysłano maila o zadaniach manulanych
|? _new_end='C' & 'TNX'*_old_end
||
   {? 'T'*_old_end || 'C'
   |? 'N'*_old_end || 'F'
   |? 'X'*_old_end || 'P'
   || _new_end
   ?}
|? _new_end='C' & 'BEM'*_old_end
||
   {? 'B'*_old_end || 'D'
   |? 'E'*_old_end || 'G'
   |? 'M'*_old_end || 'R'
   || _new_end
   ?}
?}


\offTASK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: wyłączenie zadania
::   WE: _a - UPG_TASK.ref
::   WY: 1-wyłączono 0-nie udało się -1-było wyłączone
::----------------------------------------------------------------------------------------------------------------------
_task:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_res:=-1;
_upg:=var_pres('__UPG')>100;

{? _task<>null()
|| _oki:=1;
   _ozn:=0;
   do();
   UPG_TASK.cntx_psh();
   UPG_REAL.cntx_psh();
   UPG_REAL.index('TASK');
   UPG_REAL.prefix(_task);
   {? UPG_REAL.first()
   || {!
      |? {? UPG_REAL.STAN<>'T'
         || UPG_REAL.STAN:='T';
            UPG_REAL.INFRES:='P';
            {? ~UPG_REAL.put(1)
            || _oki:=0;
               undo()
            || _ozn+=1;
               {? _upg
               || _buf:=__UPG.REAL;
                  __UPG.REAL:=UPG_REAL.ref();
                  __UPG.msg('Programowe wyłączenie realizacji zadania.'@);
                  __UPG.REAL:=_buf
               ?}
            ?}
         ?};
         _oki & UPG_REAL.next()
      !}
   ?};
   {? _oki & (UPG_TASK.prefix(); UPG_TASK.seek(_task) & (_ozn | UPG_TASK.STAN<>'T'))
   || UPG_TASK.get();
      UPG_TASK.STAN:='T';
      UPG_TASK.INFRES:='P';
      UPG_TASK.MANEND:='A';
      {? ~UPG_TASK.put(1)
      || _oki:=0;
         undo()
      || _res:=1
      ?}
   ?};
   UPG_TASK.cntx_pop();
   UPG_REAL.cntx_pop();
   end()
?};
_res


\refreshTEKST
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Odświeżenie informacji o przetwarzaniu zadań w trybie podglądu
::----------------------------------------------------------------------------------------------------------------------
{? (';s_sel;c_ctr'*cur_kwin())>1
|| UPG_TASK.cntx_psh();
   UPG_REAL.cntx_psh();
   exec('set_value','#desktop','','selektor','tekst@panel',exec('tekst','zws',1),1);
   _error:=exec('isError','#upgrade');
   {? _error>0
   || exec('set_foreground','#desktop','','selektor','tekst@panel','255:0:0')
   || exec('set_foreground','#desktop','','selektor','tekst@panel','51:175:74')
   ?};
::_firms:=exec('ctrlFirms','zws');
::{? FILTER.FIRMS<>_firms
::|| FILTER.FIRMS:=_firms;
::   _data_id:=$SYSLOG.tm_stamp();
::   exec('fetch_data','#desktop',_data_id,'selektor',exec('dsk_get_firma','zws'),'KOD,NAZWA','');
::   exec('grab_data','#desktop','','selektor','firma@panel',_data_id)
::?};
   UPG_TASK.cntx_pop();
   UPG_REAL.cntx_pop()
?};
~~


\corrVER
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Sprawdzenie, czy ewentualnie korygować wersję
::   WE: _a - UPG_HEAD.ref()
::----------------------------------------------------------------------------------------------------------------------
_lfld:=0;
UPG_HEAD.cntx_psh();
UPG_HEAD.VERSION:=20*'x';
_lfld:=(+UPG_HEAD.VERSION)=20;
{? _lfld & _a<>null()
|| UPG_HEAD.prefix();
   {? UPG_HEAD.seek(_a) & UPG_HEAD.SYMBOL<>'upgradexpertis'
   || _ver:={? (1+UPG_HEAD.SYMBOL)<>'q' || _wsk:=UPG_HEAD.SYMBOL*'_'; _wsk-UPG_HEAD.SYMBOL || 8-UPG_HEAD.SYMBOL ?};
      _subver:={? (+_ver)>4 || _buf:=4-_ver; _ver:=4+_ver; _buf || '' ?};
      _ver:=(2+_ver)+'.'+(_ver+2);
      _version:=_ver+_subver;
      {? UPG_HEAD.VERSION<>_version
      || UPG_HEAD.VERSION:=_version;
         {? UPG_HEAD.put(1)
         || UPG_TASK.cntx_psh();
            UPG_REAL.cntx_psh();
            UPG_TASK.index('HEAD');
            UPG_TASK.prefix(UPG_HEAD.ref());
            {? UPG_TASK.first()
            || {!
               |? UPG_TASK.SYSTEM:=_version;
                  {? UPG_TASK.put(1)
                  || UPG_REAL.index('TASK');
                     UPG_REAL.prefix(UPG_TASK.ref());
                     {? UPG_REAL.first()
                     || {!
                        |? UPG_REAL.SYSTEM:=_version;
                           UPG_REAL.put(1);
                           UPG_REAL.next()
                        !}
                     ?}
                  ?};
                  UPG_TASK.next()
               !}
            ?};
            UPG_TASK.cntx_pop();
            UPG_REAL.cntx_pop()
         ?}
      ?}
   ?}
?};
UPG_HEAD.cntx_pop();
~~

:Sign Version 2.0 jowisz:1045 2023/07/03 09:07:18 6ae7da47e20ab1ddec619b8d7fb700d45e75ad00c851738c103e3874bde6d55c8ecab08283e3e406ddcff125f3a7c057aaba2c6b4e567adaae60bddba29901e837f12085ceaf7e92c82ffeb81ddd785a296e8c33d8b06bc36248dea79dd718d927ecbc9c98c2b93868c2ff3c6385265dff17d93e4f06cab04424e173c249483e
