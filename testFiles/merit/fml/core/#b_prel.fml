:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #b_prel.fml
:: Utworzony: 05.07.2013 [17.00]
:: Autor: WH
::======================================================================================================================
:: Zawartosc: Formuły do obsługi tabeli B_PREL
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Tworzy bufor tabeli B_PREL
::   WY: obj_new() - tablica nazwana - reprezentacja rekordu B_PREL
::----------------------------------------------------------------------------------------------------------------------
exec('B_PREL','#buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Dodaje do tabeli B_PREL jeden rekord
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','#b_prel')
::       [_b] - INTEGER - 0/[1] - czy wykonywać blanka z formułami, czy zwykłego?
::   WY: B_PREL.ref() lub null
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','#b_prel')
         ?};
_result:=null();

_blank:=1;
{? var_pres('_b')=type_of(0)
|| _blank:=_b
?};

B_PREL.cntx_psh(); B_PREL.clear();
{? _blank>0
|| B_PREL.blank()
|| B_PREL.blank(1)
?};
_buffer.set();
{? B_PREL.VISIBLE=''
|| B_PREL.VISIBLE:={? B_PREL.CLASS='B_ACTION' || 'T' || 'N' ?}
?};
{? B_PREL.COND_CHK=''
|| B_PREL.COND_CHK:='T'
?};
{? B_PREL.add()>0
|| _result:=B_PREL.ref()
?};
B_PREL.cntx_pop();
_result


\put
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Aktualizuje w tabeli B_PREL jeden rekord
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','#b_prel')
::       _b - B_PREL.ref - rekord ktory zmodyfikowac
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','#b_prel')
         ?};

B_PREL.cntx_psh(); B_PREL.clear();
{? B_PREL.seek(_buffer.Ref)
|| _buffer.set();
   _result:=B_PREL.put()
?};
B_PREL.cntx_pop();
B_PREL.get();
_result


\valid_symbol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza symbol elementu, czy jest dopuszczalny w ramach procesu (czy sie nie powtarza)
::   WE: _a - $B_PROC.ref()
::       _b - STRING - symbol
::   WY: 0 / 1 - czy symbol jest ok
::----------------------------------------------------------------------------------------------------------------------
_b_proc:=_a;
_symbol:=_b;
_b_prel:=_c;

_result:=1;
_can_continue:=1;

{? _symbol=''
|| FUN.emsg('Symbol musi być podany.'@);
   _result:=0;
   _can_continue:=0
?};

{? _can_continue>0
|| B_PROC.cntx_psh(); B_PREL.cntx_psh();
   B_PROC.clear();
   {? B_PROC.seek(_b_proc)
   || B_PREL.index('SYMBOL');
      B_PREL.prefix(B_PROC.ref(),_symbol,);
      {? B_PREL.first()
         & (_b_prel='' | _b_prel<>$B_PREL.ref())
      || FUN.emsg('Istnieje już element o symbolu \'%1\' w procesie %2.'@[_symbol,B_PROC.SYMBOL]);
         _result:=0
      ?}
   ?};
   B_PROC.cntx_pop(); B_PREL.cntx_pop()
?};

_result


\get_bele
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Zwraca B_ELE.ref skojarzony z przekazanym B_PREL
::   WE: _a - B_PREL.ref()
::   WY: B_ELE.ref lub null()
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;
_result:=exec('FindAndGet','#table',B_PREL,#_b_prel,ref_name(_b_prel),"B_ELE",null());
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
:: UTW: WH [17.00]
:: OPIS: Czyści powiązania do rekordu tabeli B_PREL
:: WE: _a - B_PREL.ref()
::    [_b] - INTEGER - czy dodawać komunikaty do KOMMa o nieprawidłowościach: [0] - nie
::                                                                             1  - tak
:: WY: >0 -wyczyszczone,
:: <=0 -niewyczyszczone
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;
_komm:=0;
{? var_pres('_b')=type_of(0)
|| _komm:=_b
?};
_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

B_PREL.cntx_psh(); B_PREL.clear();
{? B_PREL.seek(_ref)
||

   {? _can_continue>0
   ||
::    1. Usuwam B_POCONNy które wskazują na ten element
      B_POCONN.cntx_psh();
      B_POCONN.index('PREL_DST');
      B_POCONN.prefix(B_PREL.ref());
      {? B_POCONN.first()
      || {!
         |? _can_continue:=exec('delete','#b_poconn',B_POCONN.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie powiązań parametrów dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_POCONN.first() & _can_continue>0
         !}
      ?};
      B_POCONN.cntx_pop()
   ?};
   {? _can_continue>0
   ||
      B_POCONN.cntx_psh();
      B_POCONN.index('PREL_SRC');
      B_POCONN.prefix(B_PREL.ref());
      {? B_POCONN.first()
      || {!
         |? _can_continue:=exec('delete','#b_poconn',B_POCONN.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie powiązań parametrów dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_POCONN.first() & _can_continue>0
         !}
      ?};
      B_POCONN.cntx_pop()
   ?};

   {? _can_continue>0
   ||
::    2. Usuwam następniki i poprzedniki
      B_CONN.cntx_psh();
      B_CONN.index('FROM');
      B_CONN.prefix(B_PREL.B_PROC,_ref);
      {? B_CONN.first()
      || {!
         |?
            _can_continue:=exec('delete','#b_conn',B_CONN.ref(),_komm);
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie połączeń dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_CONN.first() & _can_continue>0
         !}
      ?};
      {? _can_continue>0
      || B_CONN.index('TO');
         B_CONN.prefix(B_PREL.B_PROC,_ref);
         {? B_CONN.first()
         || {!
            |? _can_continue:=exec('delete','#b_conn',B_CONN.ref(),_komm);
               {? _can_continue<=0 & _komm>0
               || _msg:='Usuwanie połączeń dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
                  KOMM.add(_msg,2,,1)
               ?};
               B_CONN.first() & _can_continue>0
            !}
         ?}
      ?};
      B_CONN.cntx_pop()
   ?};

:: 3. Usuwam wartości ręczne portów
   {? _can_continue>0
   ||
      B_VALPRT.cntx_psh();
      B_VALPRT.index('UNIK');
      B_VALPRT.prefix(B_PREL.ref());
      {? B_VALPRT.first()
      || {!
         |? _can_continue:=exec('delete','#b_valprt',B_VALPRT.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie wartości parametrów dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_VALPRT.first() & _can_continue>0
         !}
      ?};
      B_VALPRT.cntx_pop()
   ?};

:: 4. Usuwam własności zdarzeń czasowych
   {? _can_continue>0
   ||
      B_TIMER.cntx_psh();
      B_TIMER.index('B_PREL');
      B_TIMER.prefix(B_PREL.ref());
      {? B_TIMER.first()
      || {!
         |?
            _can_continue:=exec('delete','#b_timer',B_TIMER.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie właściwości zdarzeń czasowych dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_TIMER.first()& _can_continue>0
         !}
      ?};
      B_TIMER.cntx_pop()
   ?};

:: 5. Usuwam harmonogram zdarzeń czasowych
   {? _can_continue>0
   || _can_continue:=exec('del_b_prel','#b_harm',B_PREL.ref());
      {? _can_continue<=0 & _komm>0
      || _msg:='Usuwanie harmonogramu zdarzeń czasowych dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
         KOMM.add(_msg,2,,1)
      ?}
   ?};

:: 6. Usuwam własności zdarzeń wysłania komunikatów
   {? _can_continue>0
   ||
      B_MSG.cntx_psh();
      B_MSG.index('B_PREL');
      B_MSG.prefix(B_PREL.ref());
      {? B_MSG.first()
      || {!
         |? _can_continue:=exec('delete','#b_msg',B_MSG.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie własności zdarzeń wysyłających komunikaty dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_MSG.first() & _can_continue>0
         !}
      ?};
      B_MSG.cntx_pop()
   ?};

:: 7. Usuwam własności zdarzeń sygnałowych
   {? _can_continue>0
   ||
      B_SIGPRT.cntx_psh();
      B_SIGPRT.index('PRELTYP');
      B_SIGPRT.prefix(B_PREL.ref());
      {? B_SIGPRT.first()
      || {!
         |? _can_continue:=exec('delete','#b_sigprt',B_SIGPRT.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie własności zdarzeń sygnałowych dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_SIGPRT.first() & _can_continue>0
         !}
      ?};
      B_SIGPRT.cntx_pop()
   ?};

:: 8. Usuwam dynamiczne porty wejściowe i wyjściowe
   {? _can_continue>0
   ||
      B_PORT.cntx_psh();
      B_PORT.index('UNIK');
      B_PORT.prefix(null(),B_PREL.ref());
      {? B_PORT.first()
      || {!
         |? _can_continue:=exec('delete','#b_port',B_PORT.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie dynamicznych parametrów dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_PORT.first() & _can_continue>0
         !}
      ?};
      B_PORT.cntx_pop()
   ?};

:: 9. Definicja planowanego zakresu pracy
   {? _can_continue>0 & B_PREL.IVAL_DEF<>null()
   || _ival:=B_PREL.IVAL_DEF;
      B_PREL.IVAL_DEF:=null();
      _can_continue:=B_PREL.put();
      {? _can_continue>0
      || exec('delete','#interval',_ival,0)
      ?}
   ?};

:: 10. Elementy na które czekają bramy
   {? _can_continue>0
   ||
      B_GATELE.cntx_psh();
      B_GATELE.index('GATE');
      B_GATELE.prefix(B_PREL.ref());
      {? B_GATELE.first()
      || {!
         |? _can_continue:=B_GATELE.del(,1);
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie elementów na które czekają bramy dla: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_GATELE.first() & _can_continue>0
         !}
      ?};
      B_GATELE.cntx_pop()
   ?};
   {? _can_continue>0
   ||
      B_GATELE.cntx_psh();
      B_GATELE.index('ELE');
      B_GATELE.prefix(B_PREL.ref());
      {? B_GATELE.first()
      || {!
         |? _can_continue:=B_GATELE.del(,1);
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie elementów na które czekają bramy dla: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_GATELE.first() & _can_continue>0
         !}
      ?};
      B_GATELE.cntx_pop()
   ?};

   {? _can_continue>0
   || B_CHOICE.cntx_psh();
      B_CHOICE.index('PREL_SRC');
      B_CHOICE.prefix(B_PREL.ref());
      {? B_CHOICE.first()
      || {!
         |? _can_continue:=exec('delete','#b_choice',B_CHOICE.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie warunków bram dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_CHOICE.first() & _can_continue>0
         !}
      ?};
      B_CHOICE.cntx_pop()
   ?};

:: 11. usuwanie warunków bram
   {? _can_continue>0
   || B_CHOICE.cntx_psh();
      B_CHOICE.index('PREL_DST');
      B_CHOICE.prefix(B_PREL.ref());
      {? B_CHOICE.first()
      || {!
         |? _can_continue:=exec('delete','#b_choice',B_CHOICE.ref());
            {? _can_continue<=0 & _komm>0
            || _msg:='Usuwanie warunków bram dla elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
               KOMM.add(_msg,2,,1)
            ?};
            B_CHOICE.first() & _can_continue>0
         !}
      ?};
      B_CHOICE.cntx_pop()
   ?};

:: 12. usunięcie czynności startowych zdarzenia startowego
   {? _can_continue>0
   ||
::    B_PREL.ref() jest zdarzeniem startowym
      B_ACTSTA.cntx_psh();
      B_ACTSTA.index('UNIK');
      B_ACTSTA.prefix(B_PREL.ref());
      _loop:=B_ACTSTA.first();
      {!
      |? _loop
      |!
         _loop:=B_ACTSTA.del()
      !};
::    B_PREL.ref() jest czynnością startową
      B_ACTSTA.index('PREL_ACT');
      B_ACTSTA.prefix(B_PREL.ref());
      _loop:=B_ACTSTA.first();
      {!
      |? _loop
      |!
         _loop:=B_ACTSTA.del()
      !};
      B_ACTSTA.cntx_pop()
   ?};

   {? _can_continue>0
   ||
::    Zabezpieczenie na wypadek błędnych danych - usuwam BI_PRELE które nie są powiązane z BI_PROCAmi
      BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
      BI_PREL.index('ELSTATUS');
      BI_PREL.prefix(B_PREL.ref());
      {? BI_PREL.first()
      || {!
         |? _next:=0;
            _ref_nxt:=null();
            BI_PREL.cntx_psh();
            {? BI_PREL.next()
            || _ref_nxt:=BI_PREL.ref()
            ?};
            BI_PREL.cntx_pop();

            {? BI_PREL.BI_PROC=null()
            || _can_continue:=exec('delete','#bi_prel',BI_PREL.ref());
               {? _can_continue<=0 & _komm>0
               || _msg:='Usuwanie instancji elementu: %1 zakończone niepowodzeniem'@[B_PREL.SYMBOL];
                  KOMM.add(_msg,2,,1)
               ?}
            ?};

            {? _ref_nxt<>null()
            || _next:=BI_PREL.seek(_ref_nxt)
            ?};
            _next>0 & _can_continue>0
         !}
      ?};
      BI_PREL.cntx_pop()
   ?};
   ~~
?};

B_PREL.cntx_pop();

{? _can_continue>0
|| _result:=1
|| undo()
?};

:: --- wszystkie powiazania usuniete? ---
{? _mydo || end() ?};

_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje podany rekord tabeli B_PREL (wykonywane w transakcji!!!)
::   WE: _a - B_PREL.ref()
::       [_b] - INTEGER - czy dodawac komunikaty do KOMMa o nieprawidlowosciach: [0] - nie
::                                                                                1  - tak
::       [_c] - INTEGER - 0/[1] - czy sprawdzać czy proces jest zaakceptowany
::       [_d] - INTEGER - 0/[1] - czy sprawdzać czy element procesu jest zablokowany
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;
_komm:=0;
{? var_pres('_b')=type_of(0)
|| _komm:=_b
?};

_chk_akc:=1;
{? var_pres('_c')=type_of(0)
|| _chk_akc:=_c
?};

_chk_lock:=1;
{? var_pres('_d')=type_of(0)
|| _chk_lock:=_d
?};

_result:=0;
_can_continue:=1;

:: Sprawdzam czy moge usunac
{? _komm=1
|| _can_continue:=exec('can_delete','#b_prel',_ref,2,_chk_akc,_chk_lock)
|| _can_continue:=exec('can_delete','#b_prel',_ref,1,_chk_akc,_chk_lock)
?};

{? _can_continue>0
||
:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
   _mydo:=do_state()=0;
   {? _mydo || do() ?};
   B_PREL.cntx_psh(); B_PREL.clear();
   {? B_PREL.seek(_ref)
   || {? exec('clean','#b_prel',_ref,_komm)>0
      || exec('unlock','#b_prel',_ref);
         {? B_PREL.del(,1)>0
         || _result:=1
         || undo();
            _result:=-4
         ?}
      || _result:=-3
      ?}
   || _result:=0
   ?};
   B_PREL.cntx_pop();

   {? _result<0
   || undo()
   ?};

   {? _mydo || end() ?}
|| _result:=-2;
   exec('unlock','#b_prel',_ref)
?};
_result


\can_delete
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Sprawdza mozliwosc usuniecia elementu w procesie
::   WE: _a - B_PREL.ref()
::       _b - INTEGER - 0/[1]/2 - czy wyswietlać dialogi: [1] - na ekran
::                                                         2 - do KOMMa
::       [_c] - INTEGER - 0/[1] - czy sprawdzać czy proces jest zaakceptowany
::       [_d] - INTEGER - 0/[1] - czy sprawdzać czy element procesu jest zablokowany
::   WY: 1 - mozna usunac
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;
_screen:=_b;

_chk_akc:=1;
{? var_pres('_c')=type_of(0)
|| _chk_akc:=_c
?};

_chk_lock:=1;
{? var_pres('_d')=type_of(0)
|| _chk_lock:=_d
?};

_result:=1;
_can_continue:=1;

B_PREL.cntx_psh();
B_PREL.clear();
{? B_PREL.seek(_b_prel)
||
:: 1. Sprawdzam czy proces jest zaakceptowany
   {? _chk_akc>0
   ||
      {? B_PREL.B_PROC().ACCEPTED='T' & B_PREL.B_PROC().ACTIVE='T'
      || {? _screen=1
         || exec('akc_info','#b_design',B_PROC.SYMBOL)
         |? _screen=2
         || KOMM.add('Proces %1 jest zaakceptowany. Operacja niedozwolona.'@[B_PROC.SYMBOL],2,,1)
         ?};
         _result:=0;
         _can_continue:=0
      ?}
   ?};
:: 2. Sprawdzam czy sa jakies instancje uruchomionych elementów
   {? _can_continue>0
   ||
      BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
      BI_PREL.index('ELSTATUS');
      BI_PREL.prefix(B_PREL.ref());
      {? BI_PREL.first()
      || {!
         |? {? BI_PREL.BI_PROC<>null()
            ||
               _msg:='Element: %1 posiada już jakieś instancje (uruchomienia).\n\n'
                     'Jego usunięcie nie jest możliwe.'@[B_PREL.SYMBOL];
               {? _screen=1
               || FUN.info(_msg)
               |? _screen=2
               || KOMM.add(_msg,2,,1)
               ?};
               _result:=0;
               _can_continue:=0
            ?};
            BI_PREL.next() & _can_continue>0
         !}
      ?};
      BI_PREL.cntx_pop()
   ?};

:: 3. Sprawdzam czy można zablokować element
   {? _can_continue>0 & _chk_lock>0
   || {? exec('lock','#b_prel',B_PREL.ref(),_screen)=0
      || _result:=0;
         _can_continue:=0
      ?}
   ?};
   ~~
?};
B_PREL.cntx_pop();
_result


\lock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Blokuje element procesu
::   WE: _a - B_PREL.ref
::       [_b] - INTEGER - 0/[1]/2 - czy wyswietlać dialogi: [1] - na ekran
::                                                           2 - do KOMMa
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

{? var_pres('_b')=type_of(0)
|| _display:=_b
|| _display:=1
?};

_result:=0;

B_PREL.cntx_psh(); B_PREL.clear();
{? B_PREL.seek(_b_prel)
||
   _ses_id:=exec('blk_lock','#table','B_PREL',B_PREL.ref(),,2);
   {? _ses_id=SYSLOG.ses_id()
   || _result:=1
   || _msg:='Element procesu: '+B_PREL.SYMBOL+' jest redagowany przez użytkownika \'';
      _msg+=B_PREL.ses_info(_ses_id,'log_name')+'\' ';
      _msg+='na terminalu \''+B_PREL.ses_info(_ses_id,'log_tty')+'\'';
      {? _display=1
      || FUN.emsg(_msg)
      || KOMM.add(_msg,7,,1)
      ?}
   ?}
?};
B_PREL.cntx_pop();
_result


\unlock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Odblokowuje brame
::   WE: _a - B_PREL.ref - jesli nie bedzie brama to nie odblokuje sie
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

B_PREL.cntx_psh(); B_PREL.clear();
{? B_PREL.seek(_b_prel)
|| exec('blk_unlock','#table','B_PREL',B_PREL.ref())
?};
B_PREL.cntx_pop();
~~


\display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla zawartość rekordu B_PREL
::   WE: _a - B_PREL.ref()
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

B_PREL.cntx_psh();
B_PREL.clear();
{? B_PREL.seek(_b_prel)
|| {? B_PREL.CLASS='B_ACTION'
   || B_ACTION.cntx_psh();
      B_ACTION.index('B_ELE');
      B_ACTION.prefix(B_PREL.B_ELE);
      {? B_ACTION.first() & B_ACTION.MANUAL='T'
      || define('SYMBOL',B_PREL.SYMBOL,'Symbol elementu'@,,100,50);
         define('FMANMAIN',B_PREL.FMANMAIN,'Formuła do obsługi ręcznej'@,,100,50);
         define('FMANDESC',B_PREL.FMANDESC,'Formuła do obsługi ręcznej (opis)'@,,100,50);
         def_disp('Element procesu — czynność ręczna'@)
      ?};
      B_ACTION.cntx_pop()
   ?}
?};
B_PREL.cntx_pop();
~~


\fields_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na wartość początkową dla pól w tabeli B_PREL
::   WY:
::  TAG: <MBUILDER><BL><TAB:B_PREL>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_fld:=cur_afld();
{? _fld='START'
|| _result:=exec('str_n_','#blank')
|? _fld='AUTOMAT'
|| _result:=exec('str_n_','#blank')
|? _fld='LOOP'
|| _result:=exec('str_n_','#blank')
|? _fld='B_DOMAUT'
|| _result:=exec('str_n_','#blank')
|? _fld='TR_MODE'
|| _result:=exec('tr_mode','#b_prel')
?};
_result


\fields_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed wyświetleniem dla pól w tabeli B_PREL
::   WY:
::  TAG: <MBUILDER><BD><TAB:B_PREL>
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='ISTDEF'
|| exec('istdef_bd','#b_prel')
|| ''
?}


\fields_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły przed redkacją dla pól w tabeli B_PREL
::   WY:
::  TAG: <MBUILDER><BE><TAB:B_PREL>
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='ISTDEF'
|| ISTDEF.win_dict('PROC_SEL');
   exec('istdef_be','#b_prel')
|? _fld='ISTDEF_T'
|| exec('istdeft_be','#b_prel')
|| 1
?}


\fields_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły po redakcji dla pól w tabeli B_PREL
::   WY:
::  TAG: <MBUILDER><AE><TAB:B_PREL>
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='ISTDEF'
|| exec('istdef_ae','#b_prel')
|? _fld='AUTOMAT'
|| {? fld()='T' || B_PREL.ASSIGNTD:='T' || 1 ?}
|? _fld='ASSIGNTD'
|| {? fld()='N' || B_PREL.AUTOMAT:='N' || 1 ?}
|| 1
?}


\fields_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły obsługi na F3 dla pól w tabeli B_PREL
::   WY:
::  TAG: <MBUILDER><F3><TAB:B_PREL>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_fld:=cur_afld();
{? _fld='FMANOUT' | _fld='FMANMAIN' | _fld='FMANDESC' | _fld='FMACCESS' | _fld='FCOND' | _fld='FMANVIEW'
|| _fml:=exec('select_formula','#file');
   {? _fml<>''
   || _fml:=gsub(_fml,'.m.fml','.fml');
      _split:=spli_str(_fml,'\\');
      {? obj_len(_split)>1
      || _result:='params_exec(\''+_split[1]+'\',\''+_split[2]-4+'\')'
      ?}
   ?}
|? _fld='ICONFILE'
|| _sel:='';
   {? fld()*'|'>0
   || _choice:=2
   |? fld()*'.png'>0
   || _choice:=1
   || _choice:=FUN.choice('Które pliki ikon brać pod uwagę?',,'*.png','*.ttf')
   ?};
   {? _choice=1
   || _sel:=exec('ico_selall','#icon',fld(),1,1,'.png')
   |? _choice=2
   || _sel:=exec('ico_selttf','#icon',fld(),'A',0)
   ?};
   {? _sel<>''
   || _result:=_sel
   ?}
?};
_result


\fields_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format wyświetlania dla pól w tabeli B_PREL
::   WY:
::  TAG: <MBUILDER><FD><TAB:B_PREL>
::----------------------------------------------------------------------------------------------------------------------
''


\fields_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuły na format redagowania dla pól w tabeli B_PREL
::   WY:
::  TAG: <MBUILDER><FE><TAB:B_PREL>
::----------------------------------------------------------------------------------------------------------------------
''


\is_action_manual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy element procesu jest czynnością ręczną
::   WE: _a - B_PREL.ref()
::   WY: 0 - nie jest ręczna
::       1 - jest ręczna
::  TAG: <PUBLICZNA><MODELER><PROCES><CZYNNOŚĆ><KONTROLA>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_b_ele:=null();
{? _b_prel<>null()
|| _b_ele:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_ELE")
?};

_result:=0;

B_ACTION.cntx_psh();
B_ACTION.index('B_ELE');
B_ACTION.prefix(_b_ele);
{? B_ACTION.first() & B_ACTION.MANUAL='T'
|| _result:=1
?};
B_ACTION.cntx_pop();
_result


\is_action_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy element procesu jest czynnością użytkownika
::   WE: _a - B_PREL.ref()
::   WY: 0 - nie jest użytkownika
::       1 - jest użytkownika
::  TAG: <PUBLICZNA><MODELER><PROCES><CZYNNOŚĆ><KONTROLA>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_type:=exec('FindAndGet','#table',B_PREL,_b_prel,,"TYPE",'');

_type='U'


\is_action_service
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza czy element procesu jest czynnością usługową
::   WE: _a - B_PREL.ref()
::   WY: 0 - nie jest usługową
::       1 - jest usługową
::  TAG: <PUBLICZNA><MODELER><PROCES><CZYNNOŚĆ><KONTROLA>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_type:=exec('FindAndGet','#table',B_PREL,_b_prel,,"TYPE",'');

_type='S'


\is_action_uniservice
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza czy element procesu jest czynnością usługową - uniwersalną
::   WE: _a - B_PREL.ref()
::   WY: 0 - nie jest usługową uniwersalną
::       1 - jest usługową uniwersalną
::  TAG: <PUBLICZNA><MODELER><PROCES><CZYNNOŚĆ><KONTROLA>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_b_ele:=null();
{? _b_prel<>null()
|| _b_ele:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_ELE")
?};

_result:=0;

B_ACTION.cntx_psh();
B_ACTION.index('B_ELE');
B_ACTION.prefix(_b_ele);
{? B_ACTION.first() & B_ACTION.SERVICE='T' & B_ACTION.UID='ZWS_SER_VICE'
|| _result:=1
?};
B_ACTION.cntx_pop();
_result


\is_action_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza czy element procesu jest czynnością wysłania
::   WE: _a - B_PREL.ref()
::   WY: 0 - nie jest wysłania
::       1 - jest wysłania
::  TAG: <PUBLICZNA><MODELER><PROCES><CZYNNOŚĆ><KONTROLA>
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_type:=exec('FindAndGet','#table',B_PREL,_b_prel,,"TYPE",'');

_type='E'


\istdef_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Przed wyświetleniem B_PREL.ISTDEF
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
_sort:='K';
_from:='';
_where:=$"ISTDEF.ACTION='T' and (ISTDEF.IST_ISTK='E' or ISTDEF.IST_ISTK='M')";
ISTDEF.f_set(_sort,_from,_where);
EDI_Z.ACTION:='T';
ISTDEF.win_sel('EDI_DEF');
''


\istdef_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Przed redakcją B_PREL.ISTDEF
::   WE:
::   WY: 0-nieredagowalne, 1-redagowalne
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
B_PORT.cntx_psh();
B_PORT.index('UNIK');
B_PORT.prefix(null(),B_PREL.ref(),null());
_loop:=B_PORT.first();
{!
|? _loop
|!
   _wyn:=B_PORT.count()=0;
   _loop:=_wyn & B_PORT.next()
!};
B_PORT.cntx_pop();
_wyn


\istdef_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Po redakcji B_PREL.ISTDEF
::   WE:
::   WY: 0-powrót do redakcji, 1-zakończenie redakcji
::----------------------------------------------------------------------------------------------------------------------
B_PREL.ISTDEF_T:=
   {? B_PREL.ISTDEF().IST_ISTK='M' || 'M'
   |? B_PREL.ISTDEF().R='T' || 'R'
   |? B_PREL.ISTDEF().W='T' || 'W'
   || ''
   ?};
1


\istdeft_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Przed redakcją B_PREL.ISTDEF_T
::   WE:
::   WY: 0-nieredagowalne, 1-redagowalne
::----------------------------------------------------------------------------------------------------------------------
exec('istdef_be','#b_prel')
& B_PREL.ISTDEF().IST_ISTK='E'
& B_PREL.ISTDEF().R='T'
& B_PREL.ISTDEF().W='T'


\is_edi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Sprawdza czy czynność EDI
::   WE: _a - B_PREL.ref()
::   WY: 0-nie, 1-tak
::----------------------------------------------------------------------------------------------------------------------
_b_ele:=exec('FindAndGet','#table',B_PREL,_a,,"B_PREL.B_ELE");
exec('FindInSet','#table','B_ACTION','B_ELE',_b_ele,,"B_ACTION.UID='ZWS_EDI_UNIW'",,,0)


\tr_mode
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca 'P' - pierwsze uruchomienie lub 'U' - utworzenie na podstawie parametru FO 100902
::   WY: STRING
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='U';
_par:=exec('get','#params',100902);
{? _par='Uruchomienia'
|| _result:='P'
|? _par='Utworzenia'
|| _result:='U'
?};
_result


\action_b_can
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Zwraca kanał dostępu (wywołanie) dla elementu procesu który jest czynnością
::   WE: _a - B_PREL.ref()
::   WY: 'M', 'W', 'B', 'O', 'Q', ''
::----------------------------------------------------------------------------------------------------------------------
_b_prel:=_a;

_b_ele:=null();
{? _b_prel<>null()
|| _b_ele:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_ELE")
?};

_result:='';

B_ACTION.cntx_psh();
B_ACTION.index('B_ELE');
B_ACTION.prefix(_b_ele);
{? B_ACTION.first()
|| _result:=B_ACTION.B_CAN
?};
B_ACTION.cntx_pop();
_result


\isConn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Jest połącznie pomiędzy dwoma elementami.
::   WE: _a - źródłowy B_PREL.ref()
::       _b - docelowy B_PREL.ref()
::       _c - bieżący B_PREL.ref()
::       _d - odwiedzone B_PREL'e
::       _e - proces B_PROC.ref()
::       _f - połączenie B_CONN.ref()
::       _g - przeszliśmy przez połączenie _f
::   WY: [0/1]
::----------------------------------------------------------------------------------------------------------------------
_prel_src:=_a;
_prel_dst:=_b;
_prel_cur:={? _c=null() || _prel_src || _c ?};
_prel_visited:=_d;
_proc:={? _e=null() || exec('FindAndGet','#table',B_PREL,_prel_cur,,"B_PROC",null()) || _e ?};
_b_conn:=_f;
_b_conn_pass_org:=_g;

_result:=0;

{? _prel_visited*$_prel_cur || return(_result) ?};
_prel_visited+=$_prel_cur;

B_CONN.cntx_psh();
B_CONN.index('FROM');
B_CONN.prefix(_proc,_prel_cur);
_loop:=B_CONN.first();
{!
|? _loop
|!
   _b_conn_pass:={? _b_conn_pass_org || _b_conn_pass_org || _b_conn=null() | _b_conn=B_CONN.ref() ?};
   _loop:=
      {? B_CONN.TO=_prel_dst
         & _b_conn_pass
      ||
         _result:=1;
         0
      ||
         {? exec('isConn','#b_prel',_prel_src,_prel_dst,B_CONN.TO,_prel_visited,_proc,_b_conn,_b_conn_pass)
         ||
            _result:=1;
            0
         ||
            B_CONN.next()
         ?}
      ?}
!};
B_CONN.cntx_pop();
_result


\add_etypy_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Dodaje rekord ETYPY_P albo zwiększa licznik
::   WE:  _a  - P.ref() lub USERS.ref()
::        _b  - ETYPY.ref()
::        _c  - FIRMA.ref()
::       [_d] - licznik, domyślnie 1
::   WY: wynik add()
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_prac:=_a;
_etypy:=_b;
_firma:=_c;
_cnt:={? var_pres('_d')=type_of(1) || _d || 1 ?};
_add:=1;
_ret:=0;
_dalej:=1;
ETYPY_P.cntx_psh();
ETYPY_P.prefix();
ETYPY_P.blank();
{? ref_tab(_prac)=P
|| ETYPY_P.P:=_prac
|? ref_tab(_prac)=USERS
|| ETYPY_P.USERS:=_prac
?};
ETYPY_P.ETYPY:=_etypy;
{? XINFO.POR_CONF='J'
|| ETYPY_P.FIRMA:=_firma;
   _dalej:=_firma=REF.FIRMA
?};
{? _dalej
|| ETYPY_P.cntx_psh();
   ETYPY_P.index('UNIK');
   ETYPY_P.prefix(ETYPY_P.FIRMA,ETYPY_P.ETYPY,ETYPY_P.P,ETYPY_P.USERS);
   {? ETYPY_P.first()
   || _add:=0;
      ETYPY_P.CNT+=_cnt;
      ETYPY_P.put()
   ?};
   ETYPY_P.cntx_pop();

   {? _add=1
   || ETYPY_P.CNT:=_cnt;
      _ret:=ETYPY_P.add()
   ?}
?};
ETYPY_P.cntx_pop();
_ret


\del_etypy_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Usuwa licznik z rekordów etypy_p
::   WE: _a - P.ref()
::       _b - ETYPY.ref()
::       _c - FIRMA.ref()
::   WY: wynik add()
::---------------------------------------------------------------------------------------------------------------------
_prac:=_a;
_etypy:=_b;
_firma:=_c;
_add:=1;
_ret:=0;
ETYPY_P.cntx_psh();
ETYPY_P.index('UNIK');
ETYPY_P.prefix(_firma,_etypy,_prac);
{? ETYPY_P.first() || ETYPY_P.CNT+=-1; ETYPY_P.put()  ?};
ETYPY_P.cntx_pop();
_ret


\ba_trig_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Triger before add dla tabeli B_PREL
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic_or','#b_domain','POR','SEO')
|| exec('synch_etpy_p_del','#b_prel',B_PREL.B_PROC)
?};
1


\aa_trig_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Triger after add dla tabeli B_PREL
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic_or','#b_domain','POR','SEO')
|| exec('synch_etpy_p_add','#b_prel',B_PREL.B_PROC)
?};
~~


\bp_trig_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Triger before put dla tabeli B_PREL
::----------------------------------------------------------------------------------------------------------------------
{?  exec('lic','#b_domain','POR')
|| _b_proc:=B_PREL.B_PROC;
   _class:=B_PREL.CLASS;
   _b_role:=B_PREL.B_ROLE;
   _synchr:=1;
   B_PREL.cntx_psh();
   B_PREL.index('PROCROLE');
   B_PREL.prefix(_b_proc,_class,_b_role);
   {? B_PREL.first() || _synchr:=0 ?};
   B_PREL.cntx_pop();
   {? _synchr=1
   || exec('synch_etpy_p_del','#b_prel',B_PREL.B_PROC)
   ?}
?};
1


\ap_trig_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Triger after put dla tabeli B_PREL
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic_or','#b_domain','POR','SEO')
|| _synchr:=1;
   B_PREL.cntx_psh();
   B_PREL.index('PROCROLE');
   B_PREL.prefix(B_PREL.B_PROC,B_PREL.CLASS,B_PREL.B_ROLE);
   {? B_PREL.size()>1 || _synchr:=0 ?};
   B_PREL.cntx_pop();
   {? _synchr=1
   || exec('synch_etpy_p_add','#b_prel',B_PREL.B_PROC)
   ?}
?};
~~


\bd_trig_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Triger before del dla tabeli B_PREL
::----------------------------------------------------------------------------------------------------------------------
{?  exec('lic','#b_domain','POR') || exec('synch_etpy_p_del','#b_prel',B_PREL.B_PROC) ?};
1


\ad_trig_b_prel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Triger after del dla tabeli B_PREL
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic_or','#b_domain','POR','SEO')
|| exec('synch_etpy_p_add','#b_prel',B_PREL.B_PROC)
?};
~~


\synch_etpy_p_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: funkcja synchronizująca usuwające powiązania w tabeli ETYPY_P
::   WE: _a: B_PROC.ref()
::----------------------------------------------------------------------------------------------------------------------
_b_proc:=_a;
_firma:=exec('firma','ustawienia');
ETYPPROC.cntx_psh(); B_PROC.cntx_psh();
{? B_PROC.seek(_b_proc)
|| _sym:=B_PROC.SYMBOL;
   _ver:=B_PROC.VER;
   ETYPPROC.index('PROC');
   ETYPPROC.prefix(B_PROC.SYMBOL,B_PROC.VER);
   {? ETYPPROC.first()
   || {! |?
         OSOBA.cntx_psh(); P.cntx_psh();
         _users:=exec('get_proc_users','#b__box',B_PROC.SYMBOL,B_PROC.VER,'OBE_FAW_DARP');
         {? _users.first()
         || {! |?
:: usuwanie starych powiązań
               {? OSOBA.seek(_users.OSOBA)
               || P.index('OSOZATR');
                  P.prefix(FIRMA.ref(),OSOBA.ref);
                  {? P.first()
                  || {! |?
                     exec('del_etypy_p','#b_prel',P.ref(),ETYPPROC.ETYPY,ETYPPROC.FIRMA);
                     P.next()
                     !}
                  ?}
               ?};
               _users.next()
            !}
         ?};
         &_users; OSOBA.cntx_pop(); P.cntx_pop;
         ETYPPROC.next()
      !}
   ?}
?};
exec('dnull_etyp_p','#b_prel');
ETYPPROC.cntx_pop(); B_PROC.cntx_pop();
~~


\dnull_etyp_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Formuła usuwająca uprawnienia, których licznik doszedł do 0
::----------------------------------------------------------------------------------------------------------------------
ETYPY_P.cntx_psh();
ETYPY_P.index('CNT');
ETYPY_P.prefix(0);
{? ETYPY_P.first()
|| {!
   |? ETYPY_P.del()
   !}
?};
ETYPY_P.cntx_pop()


\synch_etpy_p_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: funkcja synchronizująca dodająca rekordy do tabeli ETYPY_P
::   WE: _a: B_PROC.ref()
::----------------------------------------------------------------------------------------------------------------------
_b_proc:=_a;
_firma:=exec('firma','ustawienia');
ETYPPROC.cntx_psh(); B_PROC.cntx_psh();
{? B_PROC.seek(_b_proc)
|| _sym:=B_PROC.SYMBOL;
   _ver:=B_PROC.VER;
   ETYPPROC.index('PROC');
   ETYPPROC.prefix(B_PROC.SYMBOL,B_PROC.VER);
   {? ETYPPROC.first()
   || USERS.cntx_psh();
      USERS.prefix();
      {!
      |? OSOBA.cntx_psh(); P.cntx_psh();
         ETYPY.cntx_psh();
         _act:={? exec('EDOKUM_typ','portal_seod','W',,ETYPPROC.ETYPY().TYPOBIEG) || 'OBE_FAW_DARP' || 'OBE_FDL_DBRP' ?};
         ETYPY.cntx_pop();
         _users:=exec('get_proc_users','#b__box',B_PROC.SYMBOL,B_PROC.VER,_act);
         {? _users.first()
         || {!
            |?
:: dodawanie nowych powiązań
               {? OSOBA.seek(_users.OSOBA)
               || P.index('OSOZATR');
                  P.prefix(FIRMA.ref(),OSOBA.ref);
                  {? P.first()
                  || {!
                     |? exec('add_etypy_p','#b_prel',P.ref(),ETYPPROC.ETYPY,ETYPPROC.FIRMA);
                        P.next()
                     !}
                  ?}
               |? USERS.seek(_users.REF)
               || exec('add_etypy_p','#b_prel',USERS.ref(),ETYPPROC.ETYPY,ETYPPROC.FIRMA)
               ?};
               _users.next()
            !}
         ?};
         &_users; OSOBA.cntx_pop(); P.cntx_pop;
         ETYPPROC.next()
      !};
      USERS.cntx_pop()
   ?}
?};
ETYPPROC.cntx_pop(); B_PROC.cntx_pop();
~~


:Sign Version 2.0 jowisz:1048 2023/06/23 14:13:35 ace5093221a1ce91f93f91afb08bcced004c92f110756a6c9746e14aed59fee4c193e51ce0c3ea5863be3003380288f07dfe9657214bd6e7699b2d50eba411690e84ffa4c9b45537cdf1006dc86c6620cd7c0f5bdd3bb4363d2d1ecd52293c76556a819729da79035a07ddc89c4981bcbc2d402663d71d28c1003a241cdeb84b
