:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: #bi_msg.fml [17.00]
:: Utworzony: 04.12.2013
:: Autor: [rr]
::======================================================================================================================
:: Zawartosc: Obsługa komunikatów błędu
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli BI_MSG
::   WY: obj_new()
::----------------------------------------------------------------------------------------------------------------------
exec('BI_MSG','#buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Funkcja dodająca wpis do tabeli BI_MSG
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','#bi_msg')
::   WY:      [REFERENCE]  - wskazanie na dodany rekord (lub już istniejący)
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};

_res:=0;
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.prefix(_buffer.BI_PREL,_buffer.USERSERR);
{? BI_MSG.first()
|| _buffer.get();
   _res:=1
|| BI_MSG.blank(1);

   _buffer.PROBLEM:='N';
   {? _buffer.STAT_ANS<>__Status.RETURN
   || _buffer.PROBLEM:='T';
::   Każdy inny status niż rozwiązany powoduje że na BI_PROC też jest zaznaczany problem
      exec('problem_set','#bi_proc',_buffer.BI_PROC,'T')
   ?};
   _buffer.set();
   {? BI_MSG.add()
   || BI_MSG.memo_put(,'TR_ERR');
      BI_MSG.memo_put(,'TR_ANS');
      _buffer.get();
      _res:=1
   ?};
   {? _buffer.STAT_ANS=__Status.RETURN
   ||
::   Jeżeli komunikat ma status rozwiązany to aktualizuję info na BI_PROC
      exec('problem_update','#bi_proc',_buffer.BI_PROC)
   ?};
   ~~
?};
BI_MSG.cntx_pop();
_res


\put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Funkcja poprawiająca wpis do tabeli BI_MSG
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','#bi_msg')
::   WY:      0-NOK, 1-OK
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};
_res:=0;
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.clear();
{? BI_MSG.seek(_buffer.Ref)
||
   _buffer.PROBLEM:='N';
   {? _buffer.STAT_ANS<>__Status.RETURN
   || _buffer.PROBLEM:='T';
::   Każdy inny status niż rozwiązany powoduje że na BI_PROC też jest zaznaczany problem
      exec('problem_set','#bi_proc',_buffer.BI_PROC,'T')
   ?};

   _buffer.set();
   _res:=BI_MSG.put();

   {? _buffer.STAT_ANS=__Status.RETURN
   ||
::   Jeżeli komunikat ma status rozwiązany to aktualizuję info na BI_PROC
      exec('problem_update','#bi_proc',_buffer.BI_PROC)
   ?};

   BI_MSG.memo_put(,'TR_ERR');
   BI_MSG.memo_put(,'TR_ANS')
?};
BI_MSG.cntx_pop();
_res


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Kasuje podany rekord tabeli BI_MSG
::   WE: _a - [REFERENCE]  - BI_MSG.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.clear();
{? BI_MSG.seek(_ref)
|| {? BI_MSG.del(,1)>0
   || _result:=1
   || undo();
      _result:=-3
   ?}
|| _result:=0
?};
BI_MSG.cntx_pop();

{? _result<0 || undo() ?};
{? _mydo || end() ?};
_result


\delete4biprel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Kasuje wszystkie rekordy tabeli BI_MSG dla podanego BI_PRELa
::   WE: [_a] - BI_PREL.ref() lub aktualny rekord
::       [_b] - STRING - BI_MSG.KIND
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_type:='';
{? var_pres('_b')=type_of('')
|| _type:=_b
?};

_result:=0;
_can_continue:=1;

BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?}; BI_PREL.index('UID');
{? _ref<>null()
|| BI_PREL.clear();
   {? BI_PREL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?}; BI_MSG.index('KIND');
   {? _type<>''
   || BI_MSG.prefix(BI_PREL.ref(),_type)
   || BI_MSG.prefix(BI_PREL.ref())
   ?};
   {? BI_MSG.first()
   || {!
      |? _can_continue:=exec('delete','#bi_msg',BI_MSG.ref());
         BI_MSG.first() & _can_continue>0
      !}
   ?};
   BI_MSG.cntx_pop()
?};
BI_PREL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wyswietlanie zgloszonych problemow
::   WE: [_a] - 1-wg zgloszonych bledow 0(domyslnie)-wszystkie zadania
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

BI_MSG.win_sel('WER_ALL');
exec('initIconBiMsg','#bi_msg');

{? ~_a
|| BI_MSG.index('ALL');
   BI_MSG.prefix(REF.FIRMA,'T')
|| BI_MSG.index('BI_PROC');
   BI_MSG.prefix(BI_PROC.ref(),'T')
?};
BI_MSG.select()


\todoError
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zgłoszenie błędu dla zadania
::   WE: _a - =0-wszyscy użytkownicy, =1-kontekst użytkownika, =-1-kontekst użytkownika bez pytania
::       _b - treść błędu
::   WY: 0 - problem nie dodany
::       1 - dodany
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of('str') || _b:='' ?};

_usrCntx:=_a;
_err_txt:=_b;

_result:=0;

_bi_todo:=BI_TODO.ref();

{? _bi_todo=null() || return() ?};
_biprel:=BI_TODO.BI_PREL;

_user:=exec('operatorUser','#users');

_error:=exec('TODO_ERROR','#bi_stat');
_errbreak:={? _usrCntx=-2 || exec('BLAD','#bi_stat') || null() ?};
_no_action:={? _usrCntx=-2 || exec('NO_ACTION','#bi_stat') || null() ?};
{? _usrCntx=-2 || _usrCntx:=-1 ?};

_verifi:=exec('VERIFI','#bi_stat');
_verifa:=exec('VERIFI_AGAIN','#bi_stat');

BI_MSG.win_edit('ERR');

_buffer:=exec('buffer','#bi_todo');
_buffer.cntx_get(_bi_todo);
BI_TODO.cntx_psh();
{? (_usrCntx<=0 | _buffer.USERS=null() | _buffer.USERS=_user)
||
   _locked:=exec('lock','#bi_prel',BI_TODO.BI_PREL);
   _can_continue:=_locked>0 & exec('chk_ended','#bi_proc',BI_TODO.BI_PROC);

   {? _can_continue>0
   ||
      {? exec('statRunTodo','#bi_todo',_buffer.BI_STAT)
      || _add:=1;
         _bufmsg:=exec('buffer','#bi_msg');
         BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
         BI_MSG.index('BI_PREL'); BI_MSG.prefix(_buffer.BI_PREL);
         {? BI_MSG.first()
         || _add:=0;
            _bufmsg.get();
            _bufmsg.D_ERR:=date();
            _bufmsg.T_ERR:=time();
            _bufmsg.TM_ERR:=BI_MSG.tm_stamp();
            _bufmsg.BI_TODO:=_bi_todo;
            _bufmsg.USERSERR:=_user;
            _bufmsg.ACTIVE:='T';
            _bufmsg.KIND:='T';
            {? _no_action<>null() || _bufmsg.BI_STAT:=_no_action ?};
            _bufmsg.STAT_ANS:={? _errbreak<>null() || _errbreak || _verifa ?};
            {? _err_txt<>'' || _bufmsg.TR_ERR:=_err_txt ?};
            _bufmsg.set()
         || _bufmsg.blank();
            _bufmsg.BI_PROC:=_buffer.BI_PROC;
            _bufmsg.BI_PREL:=_buffer.BI_PREL;
            _bufmsg.B_PROC:=_buffer.B_PROC;
            _bufmsg.B_PREL:=_buffer.B_PREL;
            _bufmsg.D_ERR:=date();
            _bufmsg.T_ERR:=time();
            _bufmsg.TM_ERR:=BI_MSG.tm_stamp();
            _bufmsg.BI_TODO:=_bi_todo;
            _bufmsg.USERSERR:=_user;
            _bufmsg.BI_STAT:={? _no_action<>null() || _no_action || _error ?};
            _bufmsg.STAT_ANS:={? _errbreak<>null() || _errbreak || _verifi ?};
            _bufmsg.ACTIVE:='T';
            _bufmsg.KIND:='T';
            _bufmsg.TR_ERR:=_err_txt;
            _bufmsg.TR_ANS:='';
            _bufmsg.set()
         ?};
         {? _usrCntx=-1 | BI_MSG.edit()
         || _bufmsg.get();
            _trans:=do_state();
            {? ~_trans || do() ?};
            {? _add
            || {? exec('add','#bi_msg',_bufmsg)
               || _result:=1
               || undo()
               ?}
            || {? exec('put','#bi_msg',_bufmsg)
               || _result:=1
               || undo()
               ?}
            ?};
            _buffer.BI_STAT:=_error;
            {? exec('put','#bi_todo',_buffer) || exec('otherUsers','#bi_todo',_buffer.Ref,-1) ?};
            {? ~_trans || end() ?}
         ?};
         BI_MSG.cntx_pop()
      |? _usrCntx<>-1
      || _txt:=exec('FindAndGet','#table',BI_STAT,$_buffer.BI_STAT,,"BI_STAT.NAME",'');
         _txt1:=exec('TODO_MOJE','#bi_stat','name');
         FUN.info('Zadanie ma status: %1.\nOczekiwany jest status: %2.\nOpcja niedostępna.'@[_txt,_txt1])
      ?}
   ?};
   {? _locked>0 || exec('unlock','#bi_prel',BI_TODO.BI_PREL) ?}
|? _usrCntx<>-1
|| FUN.info('Zadanie przypisane do innego użytkownika.\nOpcja niedostępna.'@)
?};
BI_TODO.cntx_pop();
BI_MSG.win_edit('');
_result


\todoError_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mario [17.00]
:: OPIS: Zgłoszenie błędu dla zadania w WebTerm
::   WE: _a - akronim okna - 'WER_WEB'
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('str') || _a:='WER_WEB' ?};

exec('env_wt_core','#web_srv');
_bi_todo:=BI_TODO.ref();

{? _bi_todo=null() || return() ?};
_biprel:=BI_TODO.BI_PREL;

_user:=exec('operatorUser','#users');

_error:=exec('TODO_ERROR','#bi_stat');
_verifi:=exec('VERIFI','#bi_stat');
_verifa:=exec('VERIFI_AGAIN','#bi_stat');

_buffer:=exec('buffer','#bi_todo');
_buffer.cntx_get(_bi_todo);
BI_TODO.cntx_psh();
{? BI_TODO.USERS=_user
||
   _locked:=exec('lock','#bi_prel',BI_TODO.BI_PREL);
   _can_continue:=_locked>0 & exec('chk_ended','#bi_proc',BI_TODO.BI_PROC);

   {? _can_continue>0
   ||
      {? exec('statRunTodo','#bi_todo',BI_TODO.BI_STAT)
      ||
         _add:=1;
         BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
         BI_MSG.index('BI_PREL'); BI_MSG.prefix(BI_TODO.BI_PREL);
         {? BI_MSG.first()
         ||
            _add:=0;
            BI_MSG.D_ERR:=date();
            BI_MSG.T_ERR:=time();
            BI_MSG.TM_ERR:=BI_MSG.tm_stamp();
            BI_MSG.BI_TODO:=_bi_todo;
            BI_MSG.USERSERR:=_user;
            BI_MSG.ACTIVE:='T';
            BI_MSG.KIND:='T';
            BI_MSG.STAT_ANS:=_verifa;
            BI_MSG.memo_get(,'TR_ERR');
            BI_MSG.memo_get(,'TR_ANS')
         ||
            BI_MSG.blank();
            BI_MSG.BI_PROC:=_buffer.BI_PROC;
            BI_MSG.BI_PREL:=_buffer.BI_PREL;
            BI_MSG.B_PROC:=_buffer.B_PROC;
            BI_MSG.B_PREL:=_buffer.B_PREL;
            BI_MSG.D_ERR:=date();
            BI_MSG.T_ERR:=time();
            BI_MSG.TM_ERR:=BI_MSG.tm_stamp();
            BI_MSG.BI_TODO:=_bi_todo;
            BI_MSG.USERSERR:=_user;
            BI_MSG.BI_STAT:=_error;
            BI_MSG.STAT_ANS:=_verifi;
            BI_MSG.ACTIVE:='T';
            BI_MSG.KIND:='T';
            BI_MSG.memo_set('','TR_ERR');
            BI_MSG.memo_set('','TR_ANS')
         ?};

         web_params_set('add', _add, 'error' ,_error, 'bitodower', _a);
         BI_MSG.web_edit('ERR_WEB',,,,"{? _a='OK'
                              ||
                                 _trans:=do_state();
                                 {? ~_trans || do() ?};
                                 {? web_params_get.add=1
                                 || BI_MSG.add();
                                    BI_MSG.memo_put(,'TR_ERR');
                                    BI_MSG.memo_put(,'TR_ANS')
                                 || BI_MSG.put();
                                    BI_MSG.memo_put(,'TR_ERR');
                                    BI_MSG.memo_put(,'TR_ANS')
                                 ?};
                                 BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
                                 BI_PREL.index('UID'); BI_PREL.prefix();
                                 BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
                                 BI_TODO.index('ALL'); BI_TODO.prefix();
                                 {? BI_TODO.seek(BI_MSG.BI_TODO)
                                 || _bi:=BI_TODO.BI_PREL().DESC;
                                    BI_TODO.BI_STAT:=exec('TODO_ERROR','#bi_stat');
                                    BI_TODO.TM_LANG:=0;
                                    {? BI_TODO.put()
                                    || exec('otherUsers','#bi_todo',BI_TODO.ref,-1)
                                    ?}
                                 ?};
                                 {? ~_trans || end() ?};
                                 BI_MSG.web_eclose();
                                 BI_TODO.cntx_pop(); BI_PREL.cntx_pop();

                                 {? web_params_get.bitodower='WER_WEB'
                                 ||
                                    exec('bitodo_zakres_www','#bi_todo');
                                    BI_TODO.web_refresh('WER_WEB')
                                 ||
                                    web_global_params_set(exec('obj_ntab_set','#array',web_global_params_get(),'todo_zakr','T'));
                                    exec('bitodo_zakres_www','#bi_todo');
                                    web_top_refresh(1)
                                 ?}
                              || BI_MSG.web_eclose()
                              ?}");
         BI_MSG.cntx_pop()
      || _txt:=exec('FindAndGet','#table',BI_STAT,$BI_TODO.BI_STAT,,"BI_STAT.NAME",'');
         _txt1:=exec('TODO_MOJE','#bi_stat','name');
         FUN.info('Zadanie ma status: %1.\nOczekiwany jest status: %2.\nOpcja niedostępna.'@[_txt,_txt1])
      ?}
   ?};
   {? _locked>0 || exec('unlock','#bi_prel',BI_TODO.BI_PREL) ?}
|| FUN.info('Zadanie przypisane do innego użytkownika.\nOpcja niedostępna.'@)
?};
BI_TODO.cntx_pop();
''


\todoAnswerOK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Przywrócenie do życia zadania
::       Kontekst wywołania: rekord tabeli BI_MSG
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_bi_msg:=BI_MSG.ref();
_bi_prel:=BI_MSG.BI_PREL;
_bi_todo:=BI_MSG.BI_TODO;
BI_MSG.win_edit('ANS');

_can_continue:=1;
_user:=exec('operatorUser','#users');

_moje:=exec('TODO_MOJE','#bi_stat');
_return:=exec('RETURN','#bi_stat');
_wait:=exec('OCZEKUJACA','#bi_stat');

_bufmsg:=exec('buffer','#bi_msg');
_bufmsg.cntx_get(_bi_msg);
_bufmsg.D_ANS:=date();
_bufmsg.T_ANS:=time();
_bufmsg.TM_ANS:=BI_MSG.tm_stamp();
_bufmsg.BI_TODO:=_bi_todo;
_bufmsg.USERSANS:=_user;
_bufmsg.STAT_ANS:=_return;
_bufmsg.ACTIVE:='N';
_bufmsg.set();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('ALL'); BI_TODO.prefix();
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.prefix();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?};
BI_PROC.index('UID'); BI_PROC.prefix();
B_PROC.cntx_psh();
B_KEYREF.cntx_psh();

{? exec('check_ref','#bi_arch',_bi_prel)>0
||
:: Dla archiwalnego BI_PRELa nic nie zwracam, bo nie ma sensu
   _can_continue:=0
?};

{? _can_continue & BI_MSG.BI_STAT=exec('NO_ACTION','#bi_stat')
|| FUN.info('Nie można przywrócić zadania, dla którego czynność nie jest aktywna.'@);
   _can_continue:=0
?};

{? _can_continue>0
|| B_KEYREF.index('BI_PREL');
   B_KEYREF.prefix(ref_name(_bi_prel),_bi_prel);
   {? B_KEYREF.first()
   || {!
      |? {? ~exec('uidref_live','#table',B_KEYREF.KEY_REF) || _can_continue:=0 ?};
         _can_continue & B_KEYREF.next()
      !}
   ?};
   {? _can_continue=0 || FUN.info('Nie można przywrócić zadania powiązanego z usuniętym rekordem kluczowym.'@) ?}
?};

{? _can_continue>0 & BI_MSG.KIND='O' & BI_MSG.BI_TODO<>null()
|| FUN.info('Zanim zadanie zostanie przywrócone należy przydzielić je uprawnionemu użytkownikowi.'@);
:: Jeżeli rodzaj 'O' to znaczy że nie ma żadnego użytkownika przypisanego do zadania todo
:: ale samo zadanie jest więc można je spróbować przydzielić komuś
   BI_MSG.BI_TODO();
   exec('przydziel_act','#bi_todo');
   _can_continue:=0
?};

{? _can_continue>0
||
   _can_answer:=1;
   {? _bi_prel<>null()
   ||
      {? BI_MSG.BI_TODO=null()
      || _can_answer:=1
      || _usr:=exec('usersAction','#b_desktop',BI_MSG.BI_TODO().BI_PREL);
         _can_answer:=_usr.first()
      ?};
      {? _can_answer<=0
      || _msg:='Użytkownik: \'%1\' nie ma uprawnień aby wykonać to zadanie.\n'
               'Aby przywrócić mu zadanie należy najpierw nadać mu wymagane uprawnienia.'@[USERS.KOD];
         FUN.info(_msg)
      ?};
      {? _can_answer>0
      || _can_answer:=exec('chk_ended','#bi_proc',BI_MSG.BI_PROC)
      ?}
   ?};

   {? _can_answer>0 & _bi_prel<>null() & FUN.ask('Czy anulować zgłoszenie problemu?'@) & BI_MSG.edit()
   || _bufmsg.get();
      {? _bi_todo<>null() & (BI_TODO.clear(); BI_TODO.seek(_bi_todo))
      || _buffer:=exec('buffer','#bi_todo');
         _buffer.cntx_get(_bi_todo)
      ?};
      _trans:=do_state();
      {? ~_trans || do() ?};
      {? ~exec('put','#bi_msg',_bufmsg) || undo() ?};
      {? _bi_todo<>null()
      || _buffer.BI_STAT:=_moje;
         _buffer.EXECUT:='N';
         _oki:=exec('put','#bi_todo',_buffer)
      || _buffer:=exec('buffer','#bi_prel');
         _buffer.cntx_get(_bi_prel);
         _buffer.BI_STAT:=_wait;
         _oki:=exec('put','#bi_prel',_buffer)
      ?};
      {? _oki & _bi_todo<>null() || exec('otherUsers','#bi_todo',_bi_todo,0) ?};
      {? ~_trans || end() ?};
      {? _oki
      || _class:={? __develop || @.Class.cProMan || @.CLASS.cProMan ?};
         _proMan:=obj_new(_class);
         _proMan.setCntx(_bi_prel);
         _proMan.descTodo()
      ?}
   ?}
?};

B_KEYREF.cntx_pop();
B_PROC.cntx_pop();
BI_TODO.cntx_pop();
BI_MSG.cntx_pop();
BI_PREL.cntx_pop();
BI_PROC.cntx_pop();
_res


\todoAnswerEND
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zakonczenie procesu
::----------------------------------------------------------------------------------------------------------------------

_res:='';
_bi_msg:=BI_MSG.ref();
_bi_prel:=BI_MSG.BI_PREL;
_bi_todo:=BI_MSG.BI_TODO;
_bi_proc:=BI_MSG.BI_PROC;

BI_MSG.win_edit('ANS');

_micro:=BI_MSG.B_PROC().MICRO='T';

_user:=exec('operatorUser','#users');

_awaria:=exec('AWARYJNA','#bi_stat');

_bufmsg:=exec('buffer','#bi_msg');

_txt:='(wraz z wszystkimi powiązanymi zadaniami)?\n\n'
      'Uwaga. Nie są usuwane aktualne efekty działania danych zadań.'@;

BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.prefix();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('ALL'); BI_TODO.prefix();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?};
BI_PROC.index('UID'); BI_PROC.prefix();
B_PROC.cntx_psh();

_can_answer:=exec('chk_ended','#bi_proc',BI_MSG.BI_PROC);

{? _can_answer>0 & FUN.ask({? _micro || 'Czy zakończyć daną czynność '@ || 'Czy zakończyć cały proces '@ ?}+_txt)
|| _bufmsg.get();
   _czyend:=exec('statEndBiPrel','#bi_msg',exec('FindAndGet','#table',BI_PREL,$_bufmsg.BI_PREL,,"BI_PREL.BI_STAT"),-1);
   _bufmsg.D_ANS:=date();
   _bufmsg.T_ANS:=time();
   _bufmsg.TM_ANS:=BI_MSG.tm_stamp();
   _bufmsg.USERSANS:=_user;
   {? ~_czyend || _bufmsg.STAT_ANS:=_awaria ?};
   _bufmsg.TR_ANS:='';
   _bufmsg.set();
   BI_MSG.edit();
   _bufmsg.get();
   _trans:=do_state();
   {? ~_trans || do() ?};
   {? ~exec('put','#bi_msg',_bufmsg) || undo() ?};
   BI_MSG.index('BI_PROC');
   BI_MSG.prefix(_bi_proc);
   {? BI_MSG.first()
   || {!
      |? _bufmsg.get();
         _czyend:=exec('statEndBiPrel','#bi_msg',exec('FindAndGet','#table',BI_PREL,$_bufmsg.BI_PREL,,"BI_PREL.BI_STAT"),-1);
         _bufmsg.D_ANS:=date();
         _bufmsg.T_ANS:=time();
         _bufmsg.TM_ANS:=BI_MSG.tm_stamp();
         _bufmsg.USERSANS:=_user;
         {? ~_czyend || _bufmsg.STAT_ANS:=_awaria ?};
         _bufmsg.ACTIVE:='N';
         _bufmsg.set();
         {? ~exec('put','#bi_msg',_bufmsg) || undo() ?};
         BI_MSG.next()
      !}
   ?};
   exec('break','#bi_proc',_bi_proc);
   {? ~_trans || end() ?};
   _res:=''
?};
B_PROC.cntx_pop();
BI_MSG.cntx_pop();
BI_TODO.cntx_pop();
BI_PREL.cntx_pop();
BI_PROC.cntx_pop();

_res


\todoAnswerKILL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Usuniecie procesu
::----------------------------------------------------------------------------------------------------------------------

_res:='';
_bi_msg:=BI_MSG.ref();
_bi_prel:=BI_MSG.BI_PREL;
_bi_todo:=BI_MSG.BI_TODO;
_bi_proc:=BI_MSG.BI_PROC;

BI_MSG.win_edit('ANS');

_micro:=BI_MSG.B_PROC().MICRO='T';

_user:=exec('operatorUser','#users');

_txt:='(wraz z wszystkimi powiązanymi zadaniami)?\n\n'
      'Uwaga. Nie są usuwane aktualne efekty działania danych zadań.'@;

BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.prefix();
BI_TODO.cntx_psh(); {? BI_TODO.name()='' || BI_TODO.use('bi_t____') ?};
BI_TODO.index('ALL'); BI_TODO.prefix();
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
BI_PROC.cntx_psh();

_can_answer:=exec('chk_ended','#bi_proc',BI_MSG.BI_PROC);

{? _can_answer>0 & _bi_prel<>null() & FUN.ask({? _micro || 'Czy usunąć daną czynność '@ || 'Czy usunąć cały proces '@ ?}+_txt)
|| _trans:=do_state();
   {? ~_trans || do() ?};
   exec('delete','#bi_proc',_bi_proc);
   {? ~_trans || end() ?};
   _res:=''
?};
BI_MSG.cntx_pop();
BI_TODO.cntx_pop();
BI_PREL.cntx_pop();
BI_PROC.cntx_pop();
_res


\msgRek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Rekod dla BI_MSG
::----------------------------------------------------------------------------------------------------------------------
''


\actions_grayed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyszarzator akcji w oknie BI_MSG
::   WE:
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_keys:=':';
{? BI_MSG.ACTIVE='N'
|| _keys:='PZU'+_keys
||
   {? (';TAO'*BI_MSG.KIND)=0
   || _keys:='P'+_keys
   ?};
   _winbiprel:=var_pres('__instam')>0;
   {? _winbiprel>0
   || _keys:='U'+_keys
   ?}
?};
BI_MSG.actions_grayed(cur_win(1,1),_keys);
~~


\dispMessage
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wyswietl dla BI_MSG
::---------------------------------------------------------------------------------------------------------------------

BI_MSG.cntx_psh();
BI_MSG.win_edit({? BI_MSG.STAT_ANS<>null() || 'ANS' || 'ERR' ?});
BI_MSG.display();
BI_MSG.cntx_pop();
~~


\updateBiMsg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: tworzy lub update-uje zapis w BI_MSG
::   WE: _a - BI_PREL.ref()
::       [_b] - rodzaj problemu T-ToDO G-gate A-action E-event
::       [_c] - tresc problemu
::       [_d] - BI_TODO.ref()
::       [_e] - B_STAT.ref() - status
::       [_f] - USERS.ref()
::       [_g] - aktywny/nieaktywny - domyslnie 'T'-aktywny, 'N'-nieaktywny
::   WY: 0/1 - rezultat zapisu
::---------------------------------------------------------------------------------------------------------------------

{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};
{? _>=3 || {? type_of(_c)<>2 || _c:='' ?} || _c:='' ?};
{? _>=4 || {? type_of(_d)<>7 || _d:=null() ?} || _d:=null() ?};
{? _>=5 || {? type_of(_e)<>7 || _e:=null() ?} || _e:=null() ?};
{? _>=6 || {? type_of(_f)<>7 || _f:=null() ?} || _f:=null() ?};
{? _>=7 || {? type_of(_g)<>2 || _g:='T' ?} || _g:='T' ?};

_res:=0;
_add:=1;
_bi_prel:=_a;
_kind:=_b;
_desc:=_c;
_bi_todo:=_d;
_bi_stat:=_e;
_users:=_f;
_active:=_g;
_bi_msg:=null();
_bufmsg:=exec('buffer','#bi_msg');

BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.prefix(_bi_prel);
{? BI_MSG.first()
|| _add:=0;
   _bi_msg:=BI_MSG.ref();
   _bufmsg.cntx_get(_bi_msg)
|| _bufmsg.blank();
   _bufmsg.TR_ERR:='';
   _bufmsg.TR_ANS:=''
?};

_bufmsg.BI_PREL:=_bi_prel;
_bufmsg.BI_PROC:=exec('FindAndGet','#table',BI_PREL,$_bufmsg.BI_PREL,,"BI_PREL.BI_PROC");
_bufmsg.B_PREL:=exec('FindAndGet','#table',BI_PREL,$_bufmsg.BI_PREL,,"BI_PREL.B_PREL");
_bufmsg.B_PROC:=exec('FindAndGet','#table',B_PREL,$_bufmsg.B_PREL,,"B_PREL.B_PROC");

{? _bufmsg.KIND=''
|| {? _kind=''
   || _class:=exec('FindAndGet','#table',B_PREL,$_bufmsg.B_PREL,,"B_PREL.B_ELE().CLASS");
      _kind:={? _bufmsg.BI_TODO<>null() | _bi_todo<>null() || 'T' || 1+(2-_class) ?}
    ?};
   _bufmsg.KIND:=_kind
?};
{? _bufmsg.BI_STAT=null() | (_bi_stat<>null() & _bi_stat<>_bufmsg.BI_STAT)
|| {? _bi_stat=null
   || _bi_stat:=exec('FindAndGet','#table',BI_PREL,$_bufmsg.BI_PREL,,"BI_PREL.BI_STAT")
   ?};
   _bufmsg.BI_STAT:=_bi_stat
?};
{? _bufmsg.BI_TODO=null() || _bufmsg.BI_TODO:=_bi_todo ?};
{? _bufmsg.USERSERR=null()
|| {? _users=null()
   || _users:=exec('FindAndGet','#table',BI_PREL,$_bufmsg.BI_PREL,,"BI_PREL.USERS")
   ?};
   _bufmsg.USERSERR:=_users
?};

{? _desc<>'' || _bufmsg.TR_ERR:=_desc ?};
{? _kind<>'T'
|| {? _bufmsg.STAT_ANS=null() | (_bi_stat<>null() & _bi_stat<>_bufmsg.STAT_ANS)
   || {? _bi_stat=null
      || _bi_stat:=exec('FindAndGet','#table',BI_PREL,$_bufmsg.BI_PREL,,"BI_PREL.BI_STAT")
      ?};
      _bufmsg.STAT_ANS:=_bi_stat
   ?}
?};

_bufmsg.D_ERR:=date();
_bufmsg.T_ERR:=time();
_bufmsg.TM_ERR:=BI_MSG.tm_stamp();
_bufmsg.ACTIVE:=_active;

_bufmsg.set();

_res:={? _add || exec('add','#bi_msg',_bufmsg) || exec('put','#bi_msg',_bufmsg) ?};

obj_del(_bufmsg);
BI_MSG.cntx_pop();
_res


\initBi_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: inicjuje zakladke BI_MSG
::---------------------------------------------------------------------------------------------------------------------
{? var_pres('__instan')>0
|| BI_MSG.index('BI_PROC');
   BI_MSG.prefix(BI_PROC.ref(),'T')
|| _upr_all:=exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODE');
   _upr_own:=exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODW');
   {? _upr_all>0
   || BI_MSG.index('ALL');
      BI_MSG.prefix(REF.FIRMA)
   |? _upr_own>0
   || BI_MSG.index('ALL_OWN');
      BI_MSG.prefix(OPERATOR.USER,REF.FIRMA)
   || BI_MSG.index('ALL_OWN');
      BI_MSG.prefix(null(),null(),'X')
   ?}
?};
~~


\refreshBi_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: odswiez dla zakladki BI_MSG
::---------------------------------------------------------------------------------------------------------------------
exec('actions_grayed','#bi_msg');
''


\isProblems
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: sprawdza czy sa problemy dla danego elementu instancji procesu
::   WE: _a - BI_PREL.ref()
::   WY: 1-tak 0-nie -1-tak i anulowano proces
::---------------------------------------------------------------------------------------------------------------------
_res:=0;
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PREL'); BI_MSG.prefix(_a);
{? BI_MSG.first()
|| _awaria:=exec('AWARYJNA','#bi_stat');
   {!
   |? {? BI_MSG.STAT_ANS=_awaria || _res:=-1
      |? BI_MSG.ACTIVE='T' || _res:=1
      ?};
      ~_res & BI_MSG.next()
   !}
?};
BI_MSG.cntx_pop();
_res


\initIconBiMsg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: ustawia ikonki dla BI_MSG
::----------------------------------------------------------------------------------------------------------------------
BI_MSG.win_fml('WER_ALL',,'STAT_ANS','NAME','ICON_BEFORE',"
   {? exec('statEndBiPrel','#bi_msg',BI_MSG.STAT_ANS,1)
   || 'xwin16.png:2'
   |? BI_MSG.ACTIVE='N' & BI_MSG.STAT_ANS<>null()
   || 'xwin16.png:38'
   |? BI_MSG.KIND='T'
   || 'xwin16.png:3'
   |? BI_MSG.KIND<>'T'
   || 'xwin16.png:4'
   || ''
   ?}
");
~~


\isProblemsProc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: sprawdza czy sa problemy dla danej instancji procesu
::   WE: _a - BI_PROC.ref()
::   WY: 1-tak 0-nie -1-tak i anulowano proces
::---------------------------------------------------------------------------------------------------------------------

_res:=0;
BI_MSG.cntx_psh(); {? BI_MSG.name()='' || BI_MSG.use('bi_m____') ?};
BI_MSG.index('BI_PROC'); BI_MSG.prefix(_a);
{? BI_MSG.first()
|| _awaria:=exec('AWARYJNA','#bi_stat');
   {!
   |? {? BI_MSG.STAT_ANS=_awaria || _res:=-1
      |? BI_MSG.ACTIVE='T' || _res:=1
      ?};
      ~_res & BI_MSG.next()
   !}
?};
BI_MSG.cntx_pop();
_res


\statEndBiPrel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Sprawdza czy podany status jest jedny z wykonanych
::   WE: _a - BI_STAT.ref()
::       [_b] - 1 tylko przerwane, 0(domyslnie) wszystkie, -1 bez przerwanych
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------

{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

_result:=0;
_breake:=exec('AWARYJNIE','#bi_stat');
_breaka:=exec('AWARYJNA','#bi_stat');
_wykony:=exec('ZAKONCZONY','#bi_stat');
_wykona:=exec('ZAKONCZONA','#bi_stat');

_result:={? _b>=0
         || _a=_breake | _a=_breaka | (~_b & (_a=_wykony | _a=_wykona))
         || _a=_wykony | _a=_wykona
         ?};
_result


\proc_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wyświetla podgląd instancji procesu skojarzony ze zgłoszonym problemem
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
BI_PROC.cntx_psh(); {? BI_PROC.name()='' || BI_PROC.use('bi_p____') ?}; BI_PROC.index('UID');
BI_PREL.cntx_psh(); {? BI_PREL.name()='' || BI_PREL.use('bi_e____') ?};
BI_PREL.index('UID'); BI_PREL.prefix();
B_PROC.cntx_psh();
{? BI_MSG.BI_PROC().B_PROC().MICRO<>'T'
|| exec('select4biproc_alt','#b_design',BI_MSG.BI_PROC,BI_MSG.B_PREL,'bi_proc_todo')
|| FUN.info('Podgląd procesu niemożliwy dla zadań powiązanych z mikroprocesami.'@)
?};
B_PROC.cntx_pop();
BI_PREL.cntx_pop();
BI_PROC.cntx_pop();
~~


\ckh_bi_t_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.00]
:: OPIS: Kontrola wypełnienia pól dla BI_T_MSG na webterm
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? BI_T_MSG.SYMBOL=''
|| FUN.info('Nie wypełniono symbolu.'@);
   return('SYMBOL')
|? BI_T_MSG.NAME=''
|| FUN.info('Nie wypełniono nazwy.'@);
   return('NAME')
?};
''


\bobs_err_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Przed obsługą okienka redakcji tabeli BI_MSG (web)
::----------------------------------------------------------------------------------------------------------------------
exec('maski','#b_proman');
1


\todoError_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Zgłoszenie problemu - akcja w oknie listy zadań
::----------------------------------------------------------------------------------------------------------------------
BI_TODO.cntx_psh();
_ref1:=BI_TODO.ref();
{? BI_TODO.next() | BI_TODO.prev() || _ref2:=BI_TODO.ref() || _ref2:=null() ?};
BI_TODO.cntx_pop();

_result:=exec('todoError','#bi_msg',1);

{? _result>0
|| {? ~((_ref1 & BI_TODO.seek(_ref1)) | (_ref2 & BI_TODO.seek(_ref2))) || BI_TODO.first() ?}
?};
~~

:Sign Version 2.0 jowisz:1045 2021/01/22 13:20:08 8705756eab81bf64720a43e86578637a027f764d5300211e1026d16afe210367db5fd85a97a4dcc54715c1fbf2b15595330bf76fc530d4a268528f4a898bf221554437e92f56cf2e5bd664b8dc3c54fb67eec9f915b91c984c54e3b5cee150bd1cc240ed310c28c789beb9a5c146db2e2f7b061b42c0e7f20a8f2d57f05a38eb
