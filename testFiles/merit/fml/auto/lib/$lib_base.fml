:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: $lib.fml
:: Utworzony: 09.11.2018
:: Autor: ARTSLO
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły biblioteczne używane w testach
::======================================================================================================================


\importBuff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła importująca dane z podanego pliku dla wskazanej struktury
::   WE: _a - nazwa pliku .csv z którego będą czytane dane
::       _b - struktura dla jakiej dane mają być wczytane
::       _c [STRING} - opcja zgodnie z parametrem dla funkcji import; bez podania domyślnie nic
::   WY: _tabela o zadanej strukturze z wczytanymi danymi ze wskazanego pliku
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<0
|| _fIMP:='_a.import(\''+_a+'\',,,\';\',,,'
|| _fIMP:='_a.import(\''+_a+'\',,,\';\',\''+_c+'\',,'
?};
_len:=_b.fld_num;
{! _n:=1.._len |! _fIMP+='\''+$(_b.fld_acr(_n))+'\''+',,'+$_n+',,' !};
_fIMP-=1;
_fIMP+='); _a';
($_fIMP)(_b)


\testy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: funkcja odpalająca zdefiniowane wywołania testów na podstawie utworzonych zestawów
::   WE: _a - wskazanie na obiekt testujący
::       _b - wskazanie na id pulpitu
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_pulpit:=_b;
{? _c.first
|| {!
   |? ($_c.EXEC)(_test_driver,_b);
      _c.next()
   !}
?}


\kopiuj_logi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [19.22]
:: OPIS:
::   WE:
::   WY:
:: ~OST: INENVGET,INFCOPY
::----------------------------------------------------------------------------------------------------------------------
_cmd:='@'+envget('@COMSPEC')+' /c '+'c:\\auto\\tools\\archiwizuj_logi.bat ';
system(_cmd,1);
{? envget('@MacroTestyZero')='0'
||
   fcopy('autotest.log',
         '@c:\\auto\\wyniki\\logi_zero\\autotest_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('atm.log',
         '@c:\\auto\\wyniki\\logi_zero\\atm_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('/auto/merit/work/f001/system/admin/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\admin_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f002/system/admin/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\admin002_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f003/system/admin/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\admin003_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f002/system/admin/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\admin000_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/server/work/error.log',
         '@c:\\auto\\wyniki\\logi_zero\\error_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/server/work/macro.log',
         '@c:\\auto\\wyniki\\logi_zero\\macro_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f001/system/html/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\html_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f002/system/html/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\html002_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f003/system/html/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\html003_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f000/system/html/merit.log',
         '@c:\\auto\\wyniki\\logi_zero\\html000_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('$test_pliki_procesow.log',
         '@c:\\auto\\wyniki\\logi_zero\\$test_pliki_procesow_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_dane_wzorc.log',
         '@c:\\auto\\wyniki\\logi_zero\\$test_dane_wzorc_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_kontrahenci.log',
         '@c:\\auto\\wyniki\\logi_zero\\$test_kontrahenci_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_materialy.log',
         '@c:\\auto\\wyniki\\logi_zero\\$test_materialy_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_dokumenty_ksiegowe.log',
         '@c:\\auto\\wyniki\\logi_zero\\$test_dokumenty_ksiegowe_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_dodanie_uzytkownikow.log',
         '@c:\\auto\\wyniki\\logi_zero\\$test_dodanie_uzytkownikow_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   _cmd:='@'+envget('@COMSPEC')+' /c '+'c:\\auto\\harvester\\harvest_real.cmd ';
   system(_cmd,1)
:: $test_dane_wzorc.log
||
   fcopy('autotest.log',
         '@c:\\auto\\wyniki\\logi\\autotest_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('atm.log',
         '@c:\\auto\\wyniki\\logi\\atm_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('/auto/merit/work/f001/system/admin/merit.log',
         '@c:\\auto\\wyniki\\logi\\admin_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/auto/merit/work/f001/system/html/merit.log',
         '@c:\\auto\\wyniki\\logi\\html_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('$test_form_chk.log',
         '@c:\\auto\\wyniki\\logi\\$test_form_chk_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_uzup_param.log',
         '@c:\\auto\\wyniki\\logi\\$test_uzup_param_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_zadania_potransferowe.log',
         '@c:\\auto\\wyniki\\logi\\$test_zadania_potransferowe_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_%release.log',
         '@c:\\auto\\wyniki\\logi\\$test_%release_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_mbuilder.log',
         '@c:\\auto\\wyniki\\logi\\$test_mbuilder_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$akceptacja_wykonanych_zadan.log',
         '@c:\\auto\\wyniki\\logi\\$akceptacja_wykonanych_zadan_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_dodaj_kalendarz_standard.log',
         '@c:\\auto\\wyniki\\logi\\$test_dodaj_kalendarz_standard_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_kontrahenci.log',
         '@c:\\auto\\wyniki\\logi\\$test_kontrahenci_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_materialy.log',
         '@c:\\auto\\wyniki\\logi\\$test_materialy_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_dokumenty_ksiegowe.log',
         '@c:\\auto\\wyniki\\logi\\$test_dokumenty_ksiegowe_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_srodki_trwale.log',
         '@c:\\auto\\wyniki\\logi\\$test_srodki_trwale_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_hbn_check.log',
         '@c:\\auto\\wyniki\\logi\\$test_hbn_check_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_naliczanie_amortyzacji.log',
         '@c:\\auto\\wyniki\\logi\\$test_naliczanie_amortyzacji_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_dekret_amortyzacji.log',
         '@c:\\auto\\wyniki\\logi\\$test_dekret_amortyzacji_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
            +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_import_wzorc.log',
         '@c:\\auto\\wyniki\\logi\\$test_import_wzorc_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_zatrudnij_nowa_osobe.log',
         '@c:\\auto\\wyniki\\logi\\$test_zatrudnij_nowa_osobe_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_nalicz_liste_plac.log',
         '@c:\\auto\\wyniki\\logi\\$test_nalicz_liste_plac_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1);
   fcopy('$test_akc_PK1_zatr_prac.log',
         '@c:\\auto\\wyniki\\logi\\$test_akc_PK1_zatr_prac_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',1,0,1)
::fcopy('$*.png','@c:\\auto\\wyniki\\logi',1,0,1)
?}


\kopiuj_logi_selenium
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: kopiowanie logów selenium
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   fcopy('/home/macroadm/docker/portaltesty/merit/work/f001/system/admin/merit.log',
         '@c:\\auto\\wyniki\\logi_selenium\\admin_f001_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/home/macroadm/docker/portaltesty/merit/work/f002/system/admin/merit.log',
         '@c:\\auto\\wyniki\\logi_selenium\\admin_f002_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/home/macroadm/docker/portaltesty/merit/work/f001/system/html/merit.log',
         '@c:\\auto\\wyniki\\logi_selenium\\html_f001_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1);
   fcopy('/home/macroadm/docker/portaltesty/merit/work/f002/system/html/merit.log',
         '@c:\\auto\\wyniki\\logi_selenium\\html_f002_'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
         +form((time()~1),-2)+form((time()~2),-2)+'.log',0,0,1)


\on_error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [19.22]
:: OPIS: Formuła wykonywana w razie wystąpienia błędu
::   WE: _a - obiekt test_driver
::   WY:
:: ~OST: INFCOPY
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_filename:='$scr'+$(date()~1)+form((date()~2),-2)+form((date()~3),-2)+'_'
        +form((time()~1),-2)+form((time()~2),-2)+form((time()~3),-2);
_test_driver.screen(_filename);
fcopy(_filename+'.png','@c:\\auto\\wyniki\\screeny\\'+_filename+'.png',1,0,1)


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [19.22]
:: OPIS: Inicjalizuje obiekt _test_driver i podmienia loga o ile podano w parametrze
::   WE: [_a] - nazwa loga. Gdy nie podana, będzie używany autotest.log
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_filename:={? var_pres('_a') = type_of('') || _a || '' ?};
exec('init','__test');
_test_driver:=obj_new(@.CLASS.AUTOTEST);
_test_driver.logger.log_actions:=1;
_test_driver.exec_after_error:=1;
_test_driver.sa_enable(1);
_test_driver.sa_reset_error();

::_test_driver.timeout:=120000;
_test_driver.on_error("exec('on_error','$lib_base',_a)");
_test_driver.set_lib_mock_enabled('', '', 0);
_test_driver.set_lib_mock_enabled('mbutil.jar', '', 1);
_test_driver.set_lib_mock_enabled('filedlg.jar', '', 1);
_test_driver.set_ctrl_mock_enabled('', '', 0);
_test_driver.set_ctrl_mock_enabled('!application>ctr:filechooser', '', 1);
{? _filename<>''
|| _test_driver.logger.filename:=_filename
?};
_test_driver.log_init_info();
_test_driver


\end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [19.22]
:: OPIS: Formuła wykonywana na koniec testów
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\otworz_obszar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła otwiera wskazany obszar i zwraca id aktywowanego obszaru
::   WE: _a - wskazanie na obiekt testujący
::       _b - akronim obszaru
::       _c - id pulpitu
::       [_d] - dla obszarów HR opcjonalne wskazanie czy przejsc na widok rozbudowany (nie inTermowy), podajemy
::              id_elementu który można sprawdzić poprzez exist, a który powie nam który widok jest uruchomiony
::              np. 'wnd:selektor>ctr:selektor(elemId=btnO@panel)' dla list płac
::   WY: id aktywowanej aplikacji
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_timeout:=_test_driver.timeout;
_test_driver.timeout:=1800000;
{? _b='Dane osobowe'
|| _test_driver.control('!leftmenu', 'open', 'Wspólne\\Obszary\\Dane osobowe', 1)
|? _b='Administracja'
|| _test_driver.control('!leftmenu', 'open', 'Wspólne\\Obszary\\Administracja', 1)
|? _b='Zawierane umowy (personel)'
|| _test_driver.control('!leftmenu', 'open', 'Kadry\\Obszary\\Zawierane umowy (personel)', 1)
|? _b='Obsługa procesów'
|| _test_driver.control('!leftmenu', 'open', 'Obsługa procesów\\Obszary\\Obsługa procesów', 1)
|? _b='Użytkownicy, role, uprawnienia'
|| _test_driver.control('!leftmenu', 'open', 'Wspólne\\Obszary\\Użytkownicy, role, uprawnienia', 1)
|? _b='Ustawienia i parametryzacja'
|| _test_driver.control('!leftmenu', 'open', 'Wspólne\\Obszary\\Ustawienia i parametryzacja', 1)
?};
_test_driver.app_wait_for_change();
{? var_press('_d')>0
|| {? ~(_test_driver.exist(_d))
   || _test_driver.menu('Funkcje:Widok rozbudowany');
      {? _test_driver.exist('dbtn:Tak')
      || _test_driver.click('dbtn:Tak');
         _test_driver.app_wait_for_change()
      ?}
   ?}
?};
_test_driver.timeout:=_timeout;
return(_test_driver.app_activate())


\uzupelnij_pole
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła uzupełnia pole o wskazanym identyfikatorze podaną wartością
::   WE: _a - wskazanie na obiekt testujący
::       _b - rodzaj pola [PoleEdycji/Checkbox/PoleWyboru]
::       _c - identyfikator pola
::       _d - wartość jaka pole ma zostać uzupełnione / ustawienie checkboxa [T/N] / numer wiersza pola wyboru
::       _e - parametr określający czy ma zostać sprawdzone czy pole jest dostępne do edycji [1/0]
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
{? _test_driver.error_no<>0 || return(0) ?};
{? ~(var_pres('_b')=type_of(' ') & (_b='PoleEdycji' | _b='Checkbox' | _b='PoleWyboru')) |
   (var_pres('_c')<>type_of(' ')) | (var_pres('_d')<>type_of(' ')) | (var_pres('_e')<>type_of(1))
|| _test_driver.fail('Nieprawidlowow wywolane uzupelnij_pole!')
?};

::kliknięcie w pole by zaktualizaować status, po przejściu z innego pola
{? _b='PoleEdycji' | _b='Checkbox'
|| _test_driver.click(_c)
|? _b='PoleWyboru'
|| _test_driver.click(_c+'(ndx=1)')
?};

::sprawdzenie czy pole jest dostepne do edycji
{? _e
|| {? ~(_test_driver.state(_c).enable='1')
   || {? _d<>''
      || _test_driver.fail('Pole '+_c+' jest niedostępne do edycji!')
      ?};
      return()
   ?}
?};

{? _b='PoleEdycji' & _d<>''
|| _test_driver.send(_d, '', _c)
|? _b='Checkbox'
|| _test_driver.send({? _d='T' || 'checked' || 'unchecked' ?}, '', _c);
   _test_driver.click(_c);
   _test_driver.click(_c)
|? _b='PoleWyboru' & _d<>''
|| _test_driver.click(_c+'(ndx='+_d+')')
?}


\wait
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła ma za zadanie zasymulować wtrzymanie wykonywania instrukcji testu do momentu, aż nastąpi spełnienie
::       warunku wskazanego parametrem
::   WE: _a - wskazanie na obiekt testujący z formuły nadrzędnej
::       _b - formuła definiująca do kiedy będzie realizowane czekanie;
::       _c - [STRING] opcjonalny komunikat który zostanie dodany do loga na rozpoczęcie i zakończenie czekania
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_b:={? var_pres('_b') = type_of("") || _b || "" ?};
_c:={? var_pres('_c') = type_of('') || _c || '' ?};

_test_driver.logger.info('Rozpoczęcie czekania '+_c+' (time: '+$date()+' '+(time()$3)+')');
{? _b<>""
|| _test_driver.logger.log_actions:=0;
   {!
   |? _b(_test_driver)
   !};
   _test_driver.logger.log_actions:=1
?};
_test_driver.logger.info('Zakończono czekanie '+_c+' (time: '+$date()+' '+(time()$3)+')');
~~


\przygotuj_plik_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła robi kopię pliku załącznika potrzebnego do scenariusza testu z serwera na końcówkę klienta
::   WE: _a -  wskazanie na obiekt testujący
::       _b [STRING] - nazwa pliku, który jest obecny na serwerze w lokalizacji \merit\fml\auto\csv\
::       _c [STRING] - nazwa pliku po skopiowaniu
::       _d [STRING] - ścieżka bezwzględna do pliku w przypadku wyszukiwania bez pth
::   WY: tablica zawierająca adres utworoznego katalogu i nazwę skopiowanego pliku
:: ~OST: INENVGET,INFEXISTS,INFMKDIR
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_fname:=_b;
_fname2:={? var_pres('_c')<0 || _b || _c ?};
_path_in:={? var_pres('_d')>0 & type_of(_d)=type_of('') || _d || '' ?};
_file:=obj_new('DIR','NAME');
_file.DIR:='';
_file.NAME:='';
{? _test_driver.execute($('fexists(\'' + {? _path_in<>'' || _d || '' ?} +_fname+'\','+{? _path_in<>'' || '0' || '1' ?}+')'))
:: utworzenie folderu na końcówce
||
   {? ~fexists('@'+envget('@LOCALAPPDATA')+'\\autotestzal',0)
   || _file.DIR:=1-(fmkdir('@'+envget('@LOCALAPPDATA'),'autotestzal'))
   || _file.DIR:=envget('@LOCALAPPDATA')+'\\autotestzal'
   ?};
   {? _file.DIR<>''
   || {? _test_driver.execute($('fcopy(\'' + {? _path_in<>'' || _d || '' ?}+_fname+'\',\''+'@\''+'+envget(\'@LOCALAPPDATA\')+'+'\'\\\\autotestzal\\\\'+_fname2+'\','+{? _path_in<>'' || '0' || '1' ?}+',0,1)'))
      || _file.NAME:=_fname2
      ?}
   ?}
?};
_file


\wait_time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła ma za zadanie zasymulować wtrzymanie wykonywania instrukcji testu na określony czas
::   WE: _a - wskazanie na obiekt testujący z formuły nadrzędnej
::       _b [TIME] - czas na jaki mają być wstrzymane dalsze instrukcje
::       _c - [STRING] opcjonalny komunikat który zostanie dodany do loga na rozpoczęcie i zakończenie czekania
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_b:={? var_pres('_b') = type_of(time()) || _b || time(0,0,0) ?};
_c:={? var_pres('_c') = type_of('') || _c || '' ?};

_ts:=time();
_test_driver.logger.info('Rozpoczęcie czekania '+_c+' (time: '+$date()+' '+(time()$3)+')');
{? _b<>time(0,0,0)
|| _test_driver.logger.log_actions:=0;
   {!
   |? (time()-_ts)<_b
   !};
   _test_driver.logger.log_actions:=1
?};
_test_driver.logger.info('Zakończono czekanie '+_c+' (time: '+$date()+' '+(time()$3)+')');
~~


\zglos_defekt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [20.14]
:: OPIS: Zgłasza defekt do Lacidy
::   WE: _a - argument - wynik formuły \zglos_defekt_args/$lib_base.fml
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
{? _args.LOGIN='' | _args.PASS = ''
|| USERS_Z.cntx_psh();
   USERS_Z.index('USERS_Z');
   USERS_Z.prefix('Lacida');
   {? USERS_Z.first()
   || _args.LOGIN:=USERS_Z.LOGIN;
      _args.PASS:=USERS_Z.PASS
   || USERS_Z.cntx_pop();
      return(0)
   ?};
   USERS_Z.cntx_pop()
?};
VAR_DEL.delete('__ODBC');
:: polaczenie ODBC do lacidy produkcyjnej
__ODBC:=odbc_con('DRIVER=MacroBASE_22_26;UID='+_args.LOGIN+';PWD='+_args.PASS+';AS=1;PTH=c:\macrologic\lacida\lacida.pth;'
                +'ASNAME=lacida;ASGROUP=lacida;ASADDRESS=wawslacida.abs.assecobs.pl;ASPORT=5580;ASCERTUSE=0;'
                +'ASCERTPTH=;TPWD=0',,,'UTF16');

:: polaczenie ODBC do TESTOWEJ lacidy
::__ODBC:=odbc_con('DRIVER=MacroBASE_22_26;UID=szef;PWD=szef;AS=1;PTH=C:\\macrologic\\wersje\\2014\\lacida\\lacida.pth;'
::                +'ASNAME=lacida;ASGROUP=lacida;ASADDRESS=wawsdro04.abs.assecobs.pl;ASPORT=5580;ASCERTUSE=0;'
::                +'ASCERTPTH=;TPWD=0',,,'UTF16');
{? var_pres('__ODBC')<0 | var_pres('__ODBC')=type_of(~~) || return() ?};
__ODBC.prm_set(1,'');
__ODBC.prm_set(2,'P');
__ODBC.prm_set(3,_args.RODZAJ);
__ODBC.prm_set(4,_args.APPL);
__ODBC.prm_set(5,_args.WERSJA);
__ODBC.prm_set(6,'');
__ODBC.prm_set(7,_args.ZGLOSIL);
__ODBC.prm_set(8,_args.WYKON);
__ODBC.prm_set(9,_args.WERYFIK);
__ODBC.prm_set(10,_args.NAZ);
__ODBC.prm_set(11,'1');
_Tab:=__ODBC.exec_tab('{call zgl_add@autotest(?,?,?,?,?,?,?,?,?,?,?)}');
{? var_pres('_Tab')>100
|| {? _Tab.first() & _Tab.WYNIK=''
   || __ODBC.prm_set(1,'ZGLOSZEN');
      __ODBC.prm_set(2,_Tab.REF);
      __ODBC.prm_set(3,_args.MEMO);
      __ODBC.prm_set(4,'OPIS');
      __ODBC.exec_tab('{call memo_put@spis(?,?,?,?)}')
   ?};
   return(_Tab)
|| 0
?}


\zglos_defekt_bez_dubli
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [20.14]
:: OPIS: Zgłasza defekt do Lacidy z poziomu robota z uwzględdnieniem dubli (jeśli błąd był zgłoszony i jest
::       niezweryfikowany to nie zgłasza błędu
::   WE: _a - argument - wynik formuły \zglos_defekt_args/$lib_base.fml z uzzupełnionymi parametrami
::   WY: 'zgloszone'/'niezgloszone'
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
VAR_DEL.delete('__ODBC_rob');
:: polaczenie ODBC do robota
__ODBC_rob:=odbc_conn('DRIVER=MacroBASE_r_20;UID=admin;PWD='+_args.PASS+
                  ';AS=1;PTH=/auto/merit/robot/atm.pth;ASNAME=robot;ASGROUP=firma;ASADDRESS=192.168.39.2;'
                  +'ASPORT=5581;ASCERTUSE=0;ASCERTPTH=;TPWD=0',,,'UTF16');
{? var_pres('__ODBC_rob')<0 | var_pres('__ODBC_rob')=type_of(~~) || return() ?};
__ODBC_rob.prm_set(1,_args.LOGIN);
__ODBC_rob.prm_set(2,_args.PASS);
__ODBC_rob.prm_set(3,_args.RODZAJ);
__ODBC_rob.prm_set(4,_args.APPL);
__ODBC_rob.prm_set(5,_args.WERSJA);
__ODBC_rob.prm_set(6,_args.ZGLOSIL);
__ODBC_rob.prm_set(7,_args.WYKON);
__ODBC_rob.prm_set(8,_args.WERYFIK);
__ODBC_rob.prm_set(9,_args.NAZ);
__ODBC_rob.prm_set(10,_args.MEMO);
_Tab:=__ODBC_rob.exec_tab('{call zgl_lac@atm(?,?,?,?,?,?,?,?,?,?)}');
_Tab.first();
_Tab.WYNIK


\zglos_defekt_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [20.14]
:: OPIS: Argumet funkcji \zglos_defekt/$lib_base.fml
::   WY: obj_new()
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
:: User Lacidy - STRING - jest w tabeli USERS_Z robota
   'LOGIN'
:: Hasło do Lacidy - STRING - jest w tabeli USERS_Z robota
   ,'PASS'
:: Rodzaj błędu - STRING - domyślnie "Błąd Działania"
   ,'RODZAJ'
:: Dziedzina - STRING - domyślnie ZWS
   ,'APPL'
:: Wersja - STRING - domyślnie rozwojowa
   ,'WERSJA'
:: Zgłaszający - STRING - login z lacidy zgłaszającego. Domyślnie autotesty
   ,'ZGLOSIL'
:: Wykonujący - STRING - login z lacidy wykonującego. Domyślnie grzabkie
   ,'WYKON'
:: Weryfikujący - STRING - login z lacidy weryfikującego. Domyślnie grzabkie
   ,'WERYFIK'
:: Tytuł zgłoszenia - STRING
   ,'NAZ'
:: Treść zgłoszenia - STRING
   ,'MEMO'
);
_args.LOGIN:='';
_args.PASS:='';
_args.RODZAJ:='Błąd Działania';
_args.APPL:='ZWS';
_args.WERSJA:='r_23.25';
::_args.WERSJA:='r_24.xx';
_args.ZGLOSIL:='autotesty';
_args.WYKON:='grzabkie';
_args.WERYFIK:='grzabkie';
_args.NAZ:='';
_args.MEMO:='';
_args


\file_fml2tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [Home] MOD: GZ
:: OPIS: pobiera listę formuł z podanego pliku i wrzuca do tabeli tymczasowej
::   WE: _a - uchwyt do pliku z formula
::   WY: tabela
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_fnwoext:={? var_pres('_b')=2 || _b || '' ?};
_tab:=tab_tmp(2
             ,'SML'     ,'STRING[32]' ,'szukaj'
             ,'FML'     ,'STRING[32]' ,'Formuła'
             ,'NR'      ,'INTEGER'    ,'Nr'
             ,'DESC'    ,'SYS_MEMO'   ,'Opis'
             ,'PARAMS'  ,'SYS_MEMO'   ,'Parametry'
             ,'RESULT'  ,'SYS_MEMO'   ,'Wynik'
             ,'FORMULA' ,'SYS_MEMO'   ,'Treść'
             ,'ALL_FORM','SYS_MEMO'   ,'Cała formuła'
             ,'FML_NRW' ,'INTEGER'    ,'Numer wystąpienie formuły'
             ,'LINE'    ,'INTEGER'    ,'Numer linii wystąpienia formuły'
             );

{? _file.is_open
||
   _cur_state:='BEGIN';
   _memo_upd:=1;
   _val:=obj_new('desc','params','result','formula','all','nr','linia');
   _val.desc:='';
   _val.params:='';
   _val.result:='';
   _val.formula:='';
   _val.all:='';
   _val.linia:=0;

   _val.nr:=-1;
   _tab.blank();
   _tab.NR:=(_val.nr+=1);
   _tab.FML:='#nagłówek';
   _tab.add();

   _UTF8:=0;
::      debug();
   {!
   |? _line:=_file.fread();
      _val.linia+=1;
      _line<>'\n'
   |!
      {? _line=':!UTF-8' || _UTF8:=1 ?};
      _baseline:=_line;
::    jezeli nowa formula, to trzeba po zaktualizowac poprzedni rekord
      {? 1+_line='\\'
      ||
         _line:=1-_line;
         {? (_pos:=_line*' '; _pos>0)
          | (_pos:=_line*'\t';_pos>0)
          | (_pos:=+_line;    _pos>0)
         || _line:=form(_pos+_line)
         ?};
         {? _line<>''
         ||
            _tab.memo_set(form(_val.desc)   ,'DESC'    ); _tab.memo_put(,'DESC');
            _tab.memo_set(form(_val.params) ,'PARAMS'  ); _tab.memo_put(,'PARAMS');
            _tab.memo_set(form(_val.result) ,'RESULT'  ); _tab.memo_put(,'RESULT');
            _tab.memo_set(form(_val.formula),'FORMULA' ); _tab.memo_put(,'FORMULA');
            {? 1+_val.all='\n' || _val.all:=1-_val.all ?};
            _tab.memo_set(     _val.all     ,'ALL_FORM'); _tab.memo_put(,'ALL_FORM');

            _cur_state:='FORM_NAME';
            _tab.blank(1);
            _tab.LINE:=_val.linia;
            _tab.FML:=_line;
            _tab.SML:=-_line;

            _tab.NR:=(_val.nr+=1);
            _val.desc:='';
            _val.params:='';
            _val.result:='';
            _val.formula:='';
            _val.all:=_baseline;
            _tab.add()
         ?}
::    jezeli to komentarz, to trzeba zobaczyc czy to sygnatura
      |? (2+_line)='::'
      || _val.all+='\n'+_baseline;
         {? 'BEGIN#FORMULA'*_cur_state=0
         ||
            _line:=2-_line;
            {? (_pos:=_line*'OPIS:';_pos>0 & _pos<8) || _cur_state:='DESC';   _pos:=_line*':'; _val.desc:=form(_pos-_line); 1
            |? (_pos:=_line*'WE:';  _pos>0 & _pos<8) || _cur_state:='PARAMS'; _pos:=_line*':'; _val.params:=form(_pos-_line); 1
            |? (_pos:=_line*'WY:';  _pos>0 & _pos<8) || _cur_state:='RESULT'; _pos:=_line*':'; _val.result:=form(_pos-_line); 1
            |? 5+_line='-----'     || ''; 0
            |? _cur_state='DESC'   || _val.desc+='\n'+form(_line); 1
            |? _cur_state='PARAMS' || _val.params+='\n'+form(_line); 1
            |? _cur_state='RESULT' || _val.result+='\n'+form(_line); 1
            ?}
         ?}

      |? _cur_state='FORMULA'
       | (_cur_state<>'BEGIN' & (1+_line)<>':' & _line<>'')
      || _cur_state:='FORMULA';
         _val.all+='\n'+_baseline;
         {? 1+_line<>':'
         || _memo_upd+=1;
            _val.formula+=_line+'\n'
         ?}

      || _val.all+='\n'+_baseline;
         ~~
      ?}
   !};
   _tab.memo_set(form(_val.desc)   ,'DESC'    ); _tab.memo_put(,'DESC');
   _tab.memo_set(form(_val.params) ,'PARAMS'  ); _tab.memo_put(,'PARAMS');
   _tab.memo_set(form(_val.result) ,'RESULT'  ); _tab.memo_put(,'RESULT');
   _tab.memo_set(form(_val.formula),'FORMULA' ); _tab.memo_put(,'FORMULA');
   _tab.memo_set(      _val.all    ,'ALL_FORM'); _tab.memo_put(,'ALL_FORM');

:: sprawdzam kolejne wystąpienia formuł w pliku
   _tab.cntx_psh();
   _xtab:=_tab.ndx_tmp(,1
                      ,'FML',,
                      ,'NR',,
                      );
   _tab.index(_xtab);
   _tab.prefix();
   _lastfml:='';
   _lastnr:=0;
   {? _tab.first()
   || {!
      |?
         {? _lastfml=_tab.FML
         ||
            _tab.FML_NRW:=(_lastnr+=1);
            _tab.put()
         ||
            _lastfml:=_tab.FML;
            _lastnr:=0
         ?};
         _tab.next()
      !}
   ?};
   _tab.cntx_pop();
   ~~
?};
_tab


\ostatni_modyfikujacy_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [20.14]
:: OPIS: Zwraca login użytkownika svn, który ostatnio modyfikował formułę w pliku.
::   WE: _a - formuła
::       _b - plik z rozszerzeniem np. .fml
::   WY:
:: ~OST: INENVGET,INFERASE,INFEXISTS,INFOPEN
::----------------------------------------------------------------------------------------------------------------------
:: znajduję ścieżkę pliku i wywołuję blame
_formula:=_a;
_plik:=_b;
_pthdir:=pth_dir(_plik);
_fname:=_pthdir+'/'+_plik;
_mode:='ur';
_file:=fopen(_fname,_mode,0,0,1,1);
{? _file.is_open()
|| _line:=fread(_file);
   {? _line<>':!UTF-8'
   || _mode:='r'
   ?};
   fclose(_file)
|| _mode:=''
?};
obj_del(_file);
_blame:='';
_start_line:=0;
_end_line:=0;

:: Szuka od jakiej linii w pliku zaczyna się formuła i na jakiej się kończy
{? _mode<>''
||
   _file:=fopen(_fname,_mode,0,0,1,1);
   {? _file.is_open()
   || _tab:=exec('file_fml2tab','$lib_base',_file);
      _ndx:=_tab.ndx_tmp('',1,'LINE',,0);
      _tab.index(_ndx);
      {? _tab.first()
      || {!
         |? {? _start_line=0 & _tab.FML=_formula
            || _start_line:=_tab.LINE
            |? _start_line<>0 & _end_line=0
            || _end_line:=_tab.LINE-1
            ?};
            _tab.next()
         !}
      ?};
      VAR_DEL.delete('_tab');
      _file.fclose()
   ?}
?};

:: wykonuje blame na pliku formuł
_new_path:='c:\\auto\\wersja_rrxx\\17xx\\'+gsub(12-_pthdir,'/','\\')+'\\'+_plik;
_cmd:='@'+envget('@COMSPEC')+' /c '+'c:\\auto\\tools\\svn_blame.bat '
      +_new_path;
system(_cmd,1);

:: szuka w wynikach blame usera, który jako ostatni modyfikował formułę
{? fexists('@c:\\auto\\wyniki\\form_chk.txt',0)
|| _form_chk_results:=fopen('@c:\\auto\\wyniki\\form_chk.txt','r',0);
   _tab_blame:=tab_tmp(2,
         'REWIZJA','INTEGER','Nr rewizji',
         'AUTOR','STRING[8]','Autor linii'
      );
   {! .. _start_line
   |! _line:=fread(_form_chk_results)
   !};
:: podczytać dane z pliku
   {? _line<>''
   ||
      _char:=(|_line)*' ';
      _tab_blame.REWIZJA:=#(_char+_line);
      _blame:=|(_char-|_line);
      _char:=_blame*' ';
      _tab_blame.AUTOR:=(_char-1)+_blame;
      _tab_blame.add();

      {! _iter:=_start_line+1 .. _end_line-1
      |! _line:=fread(_form_chk_results);

         _char:=(|_line)*' ';
         _tab_blame.REWIZJA:=#(_char+_line);
         _blame:=|(_char-|_line);
         _char:=_blame*' ';
         _tab_blame.AUTOR:=(_char-1)+_blame;
         _tab_blame.add()
      !};
      _blame:='';
      _ndx:=_tab_blame.ndx_tmp('',1,'REWIZJA',,0);
      _tab_blame.index(_ndx);
      {? _tab_blame.last()
      || _blame:=_tab_blame.AUTOR
      ?};
      _tab_blame.ndx_drop(_ndx)
   ?};
   fclose(_form_chk_results);
   ferase('@c:\\auto\\wyniki\\form_chk.txt',0);
   {? var_pres('_form_chk_results')>100 || obj_del(_form_chk_results) ?}
?};
return(_blame)


\znajdz_w_drzewie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [20.42]
:: OPIS: Formuła realizująca poruszanie się po drzewie; zaczynając od ostatniego elementu idziemy w górę do momentu
::       napotkania interesującej nas gałęzi
::   WE: _a - wskazanie na obiekt testowy
::       _b - obiekt tablica nazwana z parametrami drzewa:
::            .title       - tytuł okna, w którym jest drzewo
::            .branch_el   - tablica tablic nazwanych z nazwami elementów gałęzi oraz wartością jaką szukamy;
::                           chodząc po drzewie klikamy w pierwszy rekord tej tablicy:
::                           .kod        - nazwa elementu drzewa rozpoznawana przez mechanizm autotestów w którym
::                                         wartość będzie sprawdzona
::                           .search_val - wartość która będzie porównywana (identyfikująca szukaną gałąź)
::       _c - [STRING} fragment formuły dokładany do warunku walidacyjnego nie opierający się na kolumnach drzewa
::             np. wywołanie _test_driver.execute
::   WY: 1/0 - oznaczenie czy wskazany element drzewa został odnaleziony
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_tree_par:=_b;
_size:=obj_len(_tree_par.branch_el);
_znalazl:=0;
_war_specjalny:=_c;

_warunek:='_test_driver:=_b; _znalazl:=0; {? _test_driver.state(\'fld:@tmp.\'+_a[1].kod+\'(row=1)\').value=_a[1].search_value ';
{? _size>1
|| {! _n:=2.._size
   |! _warunek+='& _test_driver.state(\'fld:@tmp.\'+_a['+$_n+'].kod+\'(row=1)\').value=_a['+$_n+'].search_value '
   !}
?};
{? _war_specjalny<>'' || _warunek+=_war_specjalny ?};
_warunek+='|| _znalazl:=1 ?}; _znalazl';

_test_driver.logger.info('Rozpoczęto szukanie po drzewie (time: '+$date()+' '+(time()$3)+')');
_test_driver.logger.log_actions:=0;
_test_driver.assert('', 'wnd:@param', 'title', _tree_par.title, 'type', 's');
_test_driver.click('fld:@tmp.'+_tree_par.branch_el[1].kod+'(row=1)');
_test_driver.menu('Zwiń/rozwiń');
_test_driver.send('', '{END}', '');
_test_driver.click('fld:@tmp.'+_tree_par.branch_el[1].kod+'(row=1)');

:: sprawdzenie czy pierwszy element spełnia warunek
_znalazl:=($_warunek)(_tree_par.branch_el,_test_driver);
{? _znalazl || return(_znalazl) ?};


:: jeśli pierszy element nie jest szukanym to zaczynamy iterować w pętli

{!
|? _test_driver.send('', '{UP}', '');
   _test_driver.click('fld:@tmp.'+_tree_par.branch_el[1].kod+'(row=1)');
   _znalazl:=($_warunek)(_tree_par.branch_el,_test_driver);
:: dodać zabezpieczenie gdy nie znalazł w całym drzewie
   ~_znalazl
!};
_test_driver.logger.log_actions:=1;
_test_driver.logger.info('Zakończono szukanie po drzewie (time: '+$date()+' '+(time()$3)+')');
_znalazl


\search_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [20.42]
:: OPIS: Formuła realizująca poruszanie się po drzewie; zaczynając od ostatniego elementu idziemy w górę do momentu
::       napotkania interesującej nas gałęzi
::   WE: _a - wskazanie na obiekt testowy
::       _b - tytuł okna, w którym jest drzewo
::       _c - kod pola po którym będziemy szukać
::       _d - string z szukana ścieżką w drzewie kolejne zagłębiena oddzielone '-'
::       _e - [STRING} fragment formuły dokładany do warunku walidacyjnego nie opierający się na kolumnach drzewa
::             np. wywołanie _test_driver.execute - wywoływany dla ostatniego zagłębienia
::   WY: 1/0 - oznaczenie czy wskazany element drzewa został odnaleziony
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_title:=_b;
_kod:=_c;
_branch_el:=_d;
_war_specjalny:='_test_driver:=_a; '+_e;
_znalazl:=0;

_test_driver.logger.info('Rozpoczęto szukanie po drzewie (time: '+$date()+' '+(time()$3)+')');
_test_driver.logger.log_actions:=0;
_test_driver.assert('', 'wnd:@param', 'title', _title, 'type', 's');
_test_driver.click('fld:@tmp.'+_kod+'(row=1)');

_path:=spli_str(_branch_el,'-');
_szukany:=1;
_size_szukanych:=obj_len(_path);

_deep:=0;
_last:='';
_next_prev:='';

:: sprawdzamy ile wierszy mamy dostępnych
_max:=1;
_loop:=1;
{!
|? _loop
|! {? _test_driver.state('fld:@tmp.'+_kod+'(row='+$_max+')').ref='-1'
   || _loop:=0
   || _max+=1
   ?}
!};
_max-=1;

:: ostatnią gałąź drzewa rozwijamy maksymalnie
_test_driver.send('', '{END}', '');
_last:=_test_driver.state('fld:@tmp.'+_kod+'(row=1)').value;
_loop:=1;
{!
|? _loop
|! _test_driver.send('', '{RIGHT}', '');
   _test_driver.send('', '{END}', '');
   _c_last:=_test_driver.state('fld:@tmp.'+_kod+'(row=1)').value;
   _loop:={? _c_last<>_last
          || _last:=_c_last;
             1
          || 0
          ?}
!};
_test_driver.send('', '{HOME}', '');
_c_row:=1;
{! _i:=1.._size_szukanych
|!
   _znalazl:=0;
   _loop:=1;
   _s_ref:='';
   _s_value:='';
:: w pętli przechodzimy po kolejnych wierszach i sprawdzamy czy jest tym którego szukamy
   {!
   |? _loop
   |!

:: sprawdzam czy obecny jest szukanym
      _znalazl:=_test_driver.state('fld:@tmp.'+_kod+'(row='+$(_c_row)+')').value=_path[_i];

:: jesli nie znalazł to sprawdzamy czy nalezy przerwać szukanie bo wyjdziemy po za zakres
      {? ~_znalazl
      ||
::       jeśli weszlismy głębiej w drzewo to porównujemy z nastepnym do liścia z którego zeszliśmy
::       w innym wypadku sprawdzamy lub jeśli liść z którego zeszliśmy był ostatnim porównujemy z ostatnim wierszem
         {? _test_driver.state('fld:@tmp.'+_kod+'(row='+$(_c_row)+')').value={? _deep || _next_prev || _last ?}
         || _loop:=0
         ||
            _test_driver.send('', '{DOWN}', ''); {? _c_row<_max || _c_row+=1 ?};
            _loop:=1
         ?}
      ||
::       znalazł wiec wychodzimy z pętli
         _loop:=0
      ?}
   !};

:: jeśli nie znalazł to wychodzimy z tej pętli bo nie ma gdzie zejść głebiej
   {? ~_znalazl
   || _i:=_size_szukanych+1
   ||
::    jeśli znalazł to działamy dalej, ale najpierwsz sprawdzamy czy to nie jest ostatni poziom
      {? _i=_size_szukanych
      ||
::       konczymy i sprawdzamy warunek dodatkowy
         _znalazl:=($_war_specjalny)(_test_driver);
         _i+=1
      ||
::    zchodzimy głebiej i dzieje się magia

::    sprawdzamy czy obecny nie był ostatnim w obecnie rozwiniętym drzewiw
         {? _test_driver.state('fld:@tmp.'+_kod+'(row='+$(_c_row)+')').value=_last
         ||
::       jeśli ostatni to kończymy
            _i:=_size_szukanych+1
         ||
::       jeśli nie to schodzimy głebiej
            {? _c_row=_max
            || _test_driver.send('', '{DOWN}', '');
               _test_driver.send('', '{UP}', ''); _c_row-=1
            ?};
            _next_prev:=_test_driver.state('fld:@tmp.'+_kod+'(row='+$(_c_row+1)+')').value;
            _test_driver.send('', '{RIGHT}', '');
            _test_driver.send('', '{DOWN}', ''); {? _c_row<_max || _c_row+=1 ?};
            _deep:=1;
            _i+=1
         ?}
      ?}
   ?}
!};

_test_driver.logger.log_actions:=1;
_test_driver.logger.info('Zakończono szukanie po drzewie (time: '+$date()+' '+(time()$3)+')');
_znalazl


\user_trans
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [20.42]
:: OPIS: tworzy tabelę z odpowiednikami kodów użytkowników w Lacidzie i MacroBuilder'ze
::   WE:
::   WY: tablica z odpowiednikami
::----------------------------------------------------------------------------------------------------------------------
_trans:=tab_tmp(2,
      'LACIDA','STRING[30]','Kod usera lacidy',
      'BUILDER','STRING[30]','Kod usera buildera'
   );
_trans.BUILDER:='adamtar';_trans.LACIDA:='adtarkow';_trans.add();
_trans.BUILDER:='akol';_trans.LACIDA:='a15kolod';_trans.add();
_trans.BUILDER:='aldkob';_trans.LACIDA:='alkobyli';_trans.add();
_trans.BUILDER:='anncza';_trans.LACIDA:='a2czajko';_trans.add();
_trans.BUILDER:='amodlins';_trans.LACIDA:='anprzedz';_trans.add();
_trans.BUILDER:='arkcze';_trans.LACIDA:='a4czerni';_trans.add();
_trans.BUILDER:='awi';_trans.LACIDA:='arwielgu';_trans.add();
_trans.BUILDER:='afi';_trans.LACIDA:='arfijalk';_trans.add();
_trans.BUILDER:='amakos';_trans.LACIDA:='armakos';_trans.add();
_trans.BUILDER:='amk';_trans.LACIDA:='armakos';_trans.add();
_trans.BUILDER:='artslo';_trans.LACIDA:='arsloma';_trans.add();
_trans.BUILDER:='bfital';_trans.LACIDA:='bofital';_trans.add();
_trans.BUILDER:='damkrz';_trans.LACIDA:='dakrzesl';_trans.add();
_trans.BUILDER:='darokr';_trans.LACIDA:='dakraciu';_trans.add();
_trans.BUILDER:='dorwol';_trans.LACIDA:='dowolans';_trans.add();
_trans.BUILDER:='jaws';_trans.LACIDA:='grszlek';_trans.add();
_trans.BUILDER:='grzzab';_trans.LACIDA:='grzabkie';_trans.add();
_trans.BUILDER:='izafij';_trans.LACIDA:='izfijalk';_trans.add();
_trans.BUILDER:='kuba';_trans.LACIDA:='jahelbin';_trans.add();
_trans.BUILDER:='jabr';_trans.LACIDA:='joabramo';_trans.add();
_trans.BUILDER:='magbur';_trans.LACIDA:='maburacz';_trans.add();
_trans.BUILDER:='mako';_trans.LACIDA:='m12kostr';_trans.add();
_trans.BUILDER:='mburacze';_trans.LACIDA:='m1buracz';_trans.add();
_trans.BUILDER:='mario';_trans.LACIDA:='makrumph';_trans.add();
_trans.BUILDER:='mickoc';_trans.LACIDA:='mikocot';_trans.add();
_trans.BUILDER:='piotrb';_trans.LACIDA:='pibiendz';_trans.add();
_trans.BUILDER:='pjaskul';_trans.LACIDA:='p1jaskul';_trans.add();
_trans.BUILDER:='pkoso';_trans.LACIDA:='pikosows';_trans.add();
_trans.BUILDER:='pgroch';_trans.LACIDA:='prgrocho';_trans.add();
_trans.BUILDER:='radruc';_trans.LACIDA:='raruchal';_trans.add();
_trans.BUILDER:='rafore';_trans.LACIDA:='raorendo';_trans.add();
_trans.BUILDER:='ren';_trans.LACIDA:='relukasi';_trans.add();
_trans.BUILDER:='romwro';_trans.LACIDA:='rowrobel';_trans.add();
_trans.BUILDER:='tommro';_trans.LACIDA:='tomrozin';_trans.add();
_trans.BUILDER:='tomsob';_trans.LACIDA:='tosobans';_trans.add();
_trans.BUILDER:='wojhur';_trans.LACIDA:='wohuras';_trans.add();
_trans


\log_viewer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [21.14]
:: OPIS: Tworzy okno grupowe i osadza wewnątrz niego przeglądarkę logów dla autotestów
::----------------------------------------------------------------------------------------------------------------------
_init:="
   exec('load','#desktop','log_viewer','log_viewer_auto.dsk',,,,,,0)
";
_tab:=exec('create_grp','#desktop','log_viewer',_init,25,150,'Przeglądarka logów'@);
_tab.select();
''


\get_desctop_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [22.26]
:: OPIS: Zwraca id zakładki pulpitu
::   WE:
::   WY: [STRING] id
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=exec('init','$lib_base','$test_manager.log');
_res:='';
_i:=1;
{! |?
   _app:=_test_driver.app_activate($_i);
   {? type_of(_app)=type_of('')
   || {? _test_driver.execute("AreaTitle.getTitle()")='Pulpit'
      || _res:=$_i
      ?}
   ?};
   _i+=1;
   _i<=30 & _res=''
!};
_res


\set_active_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [22.26]
:: OPIS: Zwraca id zakładki pulpitu
::   WE: _a - test_driver
::   WY: [1/0]
::----------------------------------------------------------------------------------------------------------------------
_test_driver:=_a;
_win:=_b;
_res:=0;
_i:=1;
{! |?
   _app:=_test_driver.app_activate($_i);
   {? _test_driver.execute("cur_win(1,1)")=_win
   || _res:=1
   ?};
   _i+=1;
   _i<=30 & _res=0
!};
_res


\report_mail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [22.26]
:: OPIS: Formuła do technicznej wysyłki maili z wynikami testów statycznych
::   WE: _a - [STRING] maile adresatów
::       _b - [STRING] treść błędów
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
exec('MAIL','#object');
_args:=exec('add_email_a','#mailbox');
_tmp:=spli_str(_a,',');
_tab_rcv:=tab_tmp(,'ADDRESS','STRING[255]','Adres email');
{! _i:=1..obj_len(_tmp)
|! _tab_rcv.ADDRESS:=_tmp[_i];
   _tab_rcv.add()
!};
_args.RCV:=_tab_rcv;
_args.FROM:=exec('get','#params',700002,2);
_args.SUB:='BŁĄD: Wykryto błędy na instancji testowej';
_args.BODYT:=_b;
_args.TEMPLATE:='template_error.htm';
:: Generowany mail "techniczny"
_args.TRYB:='X';
{? exec('add_email','#mailbox',_args)
|| _res:=exec('em_send_one','#mailbox',_args.REFERENCE)
?};
_res


\mail_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: Formuła do technicznej wysyłki maili z wynikami testów
::   WE: _a - [STRING] tytuł maila
::       _b - [STRING] treść maila
::       _c - [STRING] ścieżka do pliku z parametrami "smtp" i "mail_address" (jak w pliku autotran.cfg)
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_setting:=exec('mail_settings','$lib_base',_c);
_setting.args.SUB:=_a;
_setting.args.BODYT:=_b;
:: Generowany mail "techniczny"
{? exec('add_email','#mailbox',_setting.args)
|| _res:=exec('em_send_one','#mailbox',_setting.args.REFERENCE,,,_setting.server)
?};
_res


\mail_settings
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: Ustawia parametry wysyłania maila
::   WE: _a - [STRING] ścieżka do pliku z parametrami "smtp" i "mail_address" (jak w pliku autotran.cfg)
::   WY: obiekt z polami 'args' i 'server'
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new('args','server');
exec('MAIL','#object');
_args:=exec('add_email_a','#mailbox');
_path:=_a;
_p01:=obj_new('p01');
_p01.p01:=_path;
params_set('in',_p01);
_json:=exec('parse_config_file','%transfer','smtp');
{? _json<>'' || _res.server:=json_parse(_json) ?};
_mails:=exec('parse_config_file','%transfer','mail_address');
_mails:=gsub(_mails,';',',');
{? _mails*','
|| _tmp:=spli_str(_mails,',');
   _tab_rcv:=tab_tmp(,'ADDRESS','STRING[255]','Adres email');
   {! _i:=1..obj_len(_tmp)
   |! _tab_rcv.ADDRESS:=_tmp[_i];
      _tab_rcv.add()
   !};
   _args.RCV:=_tab_rcv
|| _args.RCV:=_mails
?};
_args.FROM:=exec('get','#params',700002,2);
{? _args.FROM=''
|| _args.FROM:='merit'+gsub(user(10),'.','')+'@auto.assecobs.pl'
?};
_args.TEMPLATE:='template_notify.htm';
_args.TRYB:='X';
_res.args:=_args;
_res


\py_system
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [2022]
:: OPIS: Formmuła uruchamia skrypty pythona poprzez funkcję system i odbiera zwrócone komunikaty ze standardowego
::       wyjścia
::   WE: _a [STRING] - nazwa skryptu zlokalizowanego w ścieżce zgodnie z pth
::       _b - czy ze startx [0 - (domyślnie), ze startx (wykonanie tylko na serwerze), 1 - bez startx
::       _c - parametry dla skryptu w postaci string oddzielane kolejno poprzez ;
::       _d - 1 - na końcówce (tylko bez startx), 0 - na serwerze (domyślnie)
::   WY:
:: ~OST: INENVGET
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<0
|| _b:=0
|| {? var_pres('_b')<>type_of(1) | (var_pres('_b')=type_of(1) & _b<>1)
   || _b:=0
   ?}
?};
{? var_pres('_d')>-1 & _d=1
|| _cli:='@'
|| _cli:=''
?};
_result:=obj_new('sys','stdout');
_result.sys:=0;
_result.stdout:='';
_work_path:='c:\\macrologic\\skrypty\\inne\\';
_script:=_a;
_log:=gsub(_script,'.','_')+'_log_'+$tm_stamp(date()~1,date()~2,date()~3,time()~1,time()~2,time()~3)+'.txt';

_cmd:=envget('@COMSPEC')+' /u /c python "'+_work_path+_script+'" '+gsub(_c,';',' ')+' > "'+_work_path+_log+'"';

_result.sys:={? _b
             || system(_cli+_cmd,1)
             || system(pth_dir('startx.exe')+'\\startx.exe /NOUI /B /RETURNERROR \"'+_cmd+'\"',1)
             ?};

{? fexists(_work_path+_log)
|| _log_file:=fopen(_work_path+_log,'ur');
   {? _log_file
   || {!
      |? (_wiersz:=fread(_log_file))<>'\n'
      |! _result.stdout+=_wiersz
      !};
      fclose(_log_file)
   ?};
   ferase(_work_path+_log)
?};
_result


:Sign Version 2.0 jowisz:1048 2023/06/23 14:11:20 6e71a313b93d9f5f72c0057735d52fefcd097717ee192c295fa486f0dc0602d1c5db27e82dc549677536aef1b9e931402335854a3f5e8a03f2629d9683614b6fa0cc227cbcc495a9d020dca50139d0b6d39e7c383a8984dd4f4df534476cfbb41e7152cdc07547166e4a0b983f7b15f8267862c56abf9b2109521394d590c7b6
