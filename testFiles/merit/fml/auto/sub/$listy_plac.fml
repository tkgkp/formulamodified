:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: $listy_plac.fml
:: Utworzony: 14.01.2019
:: Autor: ARTSLO
:: Systemy:
::======================================================================================================================
:: Zawartość:
::======================================================================================================================
\place_listy_plac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Definicja klasy obiektu obszaru place lista plac
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Przy powtórnym wywołaniu deklaracji klasy  - zakończ.
{? var_pres('PLACE_LP',@.CLASS)>0
|| return()
?};
obj_decl('PLACE_LP',

:: Stałe  --------------------------------------------------------------------------------------------------------------
:: Wersja runtime-ów.
   obj_fld('runtime',user(11)),

:: Pola prywatne  ------------------------------------------------------------------------------------------------------
:: Tabela tymczasowa z konfiguracją pól-parametrów elementów w obszarze
:: Tabela zawiera informacje o akronimie, nazwie i typie elementu, kluczu oraz czy wchodzi do bufora
   obj_fld('TCID',~~),

:: Tablica z elementami nazwanymi - indeksami tabeli TCID.
   obj_fld('NCID',~~),

:: Tabela tymczasowa z "naszymi" danymi do testu pobranych z csv.
   obj_fld('TBUF',~~),

:: Pole zawierające formułe importu danych.
   obj_fld('fTAB',''),

:: Pole przechowujące wskazanie na obiekt testowy
   obj_fld('test_driver',~~),

:: Pole na obiekt okna KOM_OS owtwieranego w obszarze
   obj_fld('KOM_OS',~~),


:: Metody prywatne  ----------------------------------------------------------------------------------------------------
   obj_meth('addTCID',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Formuła dodaje jeden rekord do tabeli .TCID.
::   WE: _a [STRING] - Akronim pola.
::       _b [STRING] - Nazwa pola.
::       _c [STRING] - Typo pola.
::       _d [STRING] - Nazwa klucza.
::       _e [STRING] - Rodzaj elementu w oknie (pole edycyjne, checkbox, lista rozwijalna, button itp)
::       _f [STRING] - Czy wchodzi do bufora [T/N]
::       _g [STRING] - Akronim pola w mechanizmie autotestów
::   WY: Wynik operacji.
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID.blank();
      .TCID.LP:=.TCID.size()+1;
      .TCID.ACR:=_a;
      .TCID.TYPE:=_b;
      .TCID.NAME:=_c;
      .TCID.KEY:=_d;
      .TCID.ELMTYPE:=_e;
      .TCID.INBUF:=_f;
      .TCID.ACRFLD:=_g;
      .TCID.add()
   "),

   obj_meth('crtTCID',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda tworzy strukturę i wypełnia danymi tabelę tymczasową .TCID.
::   WY: Wynik operacji.
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID:=tab_tmp(1,
         'LP','INTEGER','Lp.',
         'ACR','STRING[8]','Akronim pola',
         'TYPE','STRING[12]','Typ pola',
         'NAME','STRING[64]','Nazwa pola',
         'KEY','STRING[20]','Nazwa klucza',
         'ELMTYPE','STRING[20]','Typ elementu w oknie',
         'INBUF','STRING[1]','Czy wchodzi do bufora?',
         'ACRFLD','STRING[50]','Akronim w mechanizmie autotestów'
      );
      .NCID:=obj_new('LP','ACR','KEY');
      .NCID.LP:=.TCID.index('?');
      .NCID.ACR:=.TCID.ndx_tmp(,,'ACR',,);
      .NCID.KEY:=.TCID.ndx_tmp(,,'KEY',,);

::    Elementy podstawowe

::    Elementy dodatkowe
      .addTCID('WYB_LIST','STRING{1]','Przycisk Wybierz Listę','BTNWYBLIST','Button','N','btnO@panel') &
      .addTCID('ROZLICZ','STRING{1]','Przycisk Rozlicz','BTNROZLICZ','Button','N','wnd:PPL_RST>btn:aa8621985000000') &
      .addTCID('USUN','STRING{1]','Przycisk Usun','BTNUSUN','Button','N','wnd:PPL_PLL>btn:aa0795508000000') &
      .addTCID('TABOBLICZ','STRING{1]','Przycisk Oblicz z zakładek','BTNTABOBLICZ','Button','N','wnd:@LS.WER>btn:aa5877954000000') &
      .addTCID('USUNSKL','STRING{1]','Przycisk Usun skladniki','BTNUSUNSKL','Button','N','wnd:@LS.WER>btn:aa7527304000000') &
      .addTCID('USUNZROZL','STRING{1]','Przycisk Usun z rozliczenia','BTNUSUNZROZL','Button','N','wnd:PPL_PLL>btn:USUN')
   "),

   obj_meth('crtF',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda tworzy tabelę tymczasową .BUF.
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID.cntx_psh();
      .TCID.index(.NCID.LP);
      .TCID.prefix();
      {? .TCID.first()
      || .fTAB:='tab_tmp(1';
         {!
         |? {? .TCID.INBUF='T'
            || .fTAB+=',\\''+.TCID.ACR+'\\',\\''+.TCID.TYPE+'\\',\\''+.TCID.NAME+'\\''
            ?};
            .TCID.next()
         !};
         .fTAB+=')'
      ?};
      .TCID.cntx_pop();
      .fTAB<>''
   "),

   obj_meth('fillFLD',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: metoda do uzupełniania pól typu pole edycyjne i checkbox
::   WE: _a - wartość do wpisania
::       _b - Akronim elementu którego dotyczy
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID.cntx_psh();
      .TCID.index(.NCID.ACR);
      .TCID.prefix(_b);
      .TCID.first();
      .test_driver.click(.TCID.ACRFLD);
      {? .TCID.ELMTYPE='Pole edycyjne'
      || .test_driver.send(_a,'',.TCID.ACRFLD)
      |? .TCID.ELMTYPE='Checkbox'
      || {? _a='T'
         || .test_driver.send('checked', '', .TCID.ACRFLD)
         || .test_driver.send('unchecked', '', .TCID.ACRFLD)
         ?}
      ?};
      .TCID.cntx_pop();
      ~~
   "),

:: Metody publiczne  ---------------------------------------------------------------------------------------------------
   obj_meth('__init',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda inicjująca obiekt. Tworzy struktury złożone.
::----------------------------------------------------------------------------------------------------------------------
   "  .crtTCID();
      .crtF();
      .test_driver:=_b;
::      .TBUF:=($.fTAB)();
      exec('decl_WIN_KOM_OS','$listy_plac');
      .KOM_OS:=obj_new(@.CLASS.WIN_KOM_OS,.test_driver);
      ~~
   "),

   obj_meth('otworzObszar',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda otwierająca obszar z panelu bocznego
::   WE: wskazanie na zakładkę obszaru
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.app_activate();
      _timeout:=.test_driver.timeout;
      .test_driver.timeout:=1800000;
      .test_driver.control('!leftmenu', 'open', 'Płace\\\\Obszary\\\\Listy płac', 1);
      .test_driver.app_wait_for_change();
:: upewniamy się, że jesteśmy w wersji nie intermowej
      {? .test_driver.exist('btn:PARAMETRY')
      || .test_driver.menu('Funkcje:Widok rozbudowany');
         {? .test_driver.exist('dbtn:Tak')
         || .test_driver.click('dbtn:Tak')
         ?};
::         .test_driver.app_wait_for_change()
         exec('wait','$lib_base',.test_driver,""~_a.exist('wnd:selektor')"",'na przeładowanie widoku')
      ?};
      .test_driver.timeout:=_timeout;
      return(.test_driver.app_activate())
   "),

   obj_meth('wybierzListe',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda pozwalająca wybrać liste płac poprzez przycisk z PanelPlus
::   WE: _a [STRING] - symbol listy płac
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.click('wnd:selektor');
      .test_driver.click('wnd:selektor>ctr:selektor(elemId=btnO@panel)');
      exec('wait_time','$lib_base',.test_driver,time(0,0,10));
      .test_driver.assert('', 'wnd:WER', 'title', 'Listy płac', 'type', 's');
      .test_driver.filter('@O.LT', _a);
      .test_driver.click('fld:@O.LT(row=1)');
      .test_driver.menu('Wybierz');
      ~~
   "),

   obj_meth('otworzListe',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda pozwalająca otworzyć liste/listy płac poprzez przycisk z PanelPlus
::   WE: _a [STRING] - symbole listy płac oddzielane średnikami np. 'L1904UMY;L1905UMY'
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.click('wnd:selektor');
      .test_driver.click('wnd:selektor>ctr:selektor(elemId=btnO@panel)');
      exec('wait_time','$lib_base',.test_driver,time(0,0,10));
      exec('wait','$lib_base',.test_driver,""~_a.exist('wnd:WER')"",'(oczekiwanie na otwarcie okna wertowania)');
      .test_driver.assert('', 'wnd:WER', 'title', 'Listy płac', 'type', 's');
      _tab:=spli_str(_a,';');
      {! _i:=1..obj_len(_tab)
      |! .test_driver.filter('@O.LT', _tab[_i]);
         .test_driver.click('fld:@O.LT(row=1)');
         {? .test_driver.state('fld:@O.LT(row=1)').value=_tab[_i] &
            .test_driver.state('fld:@O.Z(row=1)').value='checked' &
            .test_driver.state('btn:aa8062734000000').enable='true'
         || .test_driver.click('btn:aa8062734000000');
            {? .test_driver.exist('dbtn:Tak')
            || .test_driver.click('dbtn:Tak');
                exec('wait','$lib_base',.test_driver,""_a.exist('dial:')&(_a.state('dial:').message='')"",'(oczekiwanie na otwarcie listy płac)')
            ?};
            {? .test_driver.exist('dbtn:OK') || .test_driver.click('dbtn:OK') ?}
         ?};
         .test_driver.click('fld:@O.Z(row=1)');
         .test_driver.assert_true('Nie otwarto listy płac'+_tab[_i],.test_driver.state('fld:@O.Z(row=1)').value='unchecked')
      !};
      .test_driver.send('', '{ESC}', '');
      ~~
   "),

   obj_meth('zamknijListe',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda pozwalająca zamknąć liste/listy płac poprzez przycisk z PanelPlus
::   WE: _a [STRING] - symbole listy płac oddzielane średnikami np. 'L1904UMY;L1905UMY'
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.click('wnd:selektor');
      .test_driver.click('wnd:selektor>ctr:selektor(elemId=btnO@panel)');
      .test_driver.assert('', 'wnd:WER', 'title', 'Listy płac', 'type', 's');
      _tab:=spli_str(_a,';');
      {! _i:=1..obj_len(_tab)
      |! .test_driver.filter('@O.LT', _tab[_i]);
         .test_driver.click('fld:@O.LT(row=1)');
         {? .test_driver.state('fld:@O.LT(row=1)').value=_tab[_i] &
            .test_driver.state('fld:@O.Z(row=1)').value='unchecked' &
            .test_driver.state('btn:aa8062731000000').enable='true'
         || .test_driver.click('btn:aa8062731000000');
            {? .test_driver.exist('dbtn:Tak')
            || .test_driver.click('dbtn:Tak');
               exec('wait','$lib_base',.test_driver,""_a.exist('dial:')&(_a.state('dial:').message='')"",'(oczekiwanie na zamknięcie listy płac)')
            ?};
            {? .test_driver.exist('dbtn:OK') || .test_driver.click('dbtn:OK') ?}
         ?};
         .test_driver.click('fld:@O.Z(row=1)');
         .test_driver.assert_true('Nie zamknięto listy płac'+_tab[_i],.test_driver.state('fld:@O.Z(row=1)').value='checked')
      !};
      .test_driver.send('', '{ESC}', '');
      ~~
   "),

   obj_meth('wybierzZakladke',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda pozwalająca przełączyć się na wybraną zakładkę
::   WE: _a [STRING] - nazwa zakladki
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.click('gtab:@'+_a);
      ~~
   "),

   obj_meth('wybierzPracownika',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda pozwalająca odfiltrować okno z pracownikami i wybrać wskazanego pracownika
::   WE: _a [STRING] - obiekt zawierający IP, NAZWISKO, IMIE
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.filter('@P.IP',_a.IP, '@P.OSOBA.NAZWISKO',_a.NAZWISKO, '@P.OSOBA.PIERWSZE', _a.IMIE);
      .test_driver.click('fld:@P.OSOBA.PIERWSZE(row=1)');
      ~~
   "),

   obj_meth('wcisnijPrzycisk',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda wciskająca przycisk z obszaru
::   WE: _a [STRING] - akronim pola elementu typu button
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID.cntx_psh();
      .TCID.index(.NCID.ACR);
      .TCID.prefix(_a);
      .TCID.first();
      {? .test_driver.exist(.TCID.ACRFLD)
      || .test_driver.click(.TCID.ACRFLD)
      || .test_driver.click((.TCID.ACRFLD*'>')-.TCID.ACRFLD)
      ?};
      .TCID.cntx_pop();
      ~~
   "),

   obj_meth('loadTestDriver',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda wczytuje do obiektu wskazanie na obiekt autotestów
::   WE: _a - obiekt autotestów
::----------------------------------------------------------------------------------------------------------------------
   ".test_driver:=_a;
   ~~ "),

   obj_meth('dodajPotracenie',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda dodająca potrącenie
::   WE: _a - obiekt z danymi potrącenia
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.click('btn:DOŁĄCZ');
      .KOM_OS.uzupelnijRodzaj(_a.RODZAJ);
      .KOM_OS.zaznaczAktywnosc(_a.AKTYWNE);
      .KOM_OS.uzupelnijDateOd(_a.OD);
      .KOM_OS.uzupelnijDateDo(_a.DO);
      .KOM_OS.uzupelnijWartoscDlugu(_a.WARTOSC);
      .KOM_OS.uzupelnijKwoteRaty(_a.RATA);
      .KOM_OS.uzupelnijDatePrzekazania(_a.DPW);
      .KOM_OS.uzupelnijSygnature(_a.SYG);
      .KOM_OS.uzupelnijDaneKomornika(_a.KOMNAZWA);
      .KOM_OS.uzupelnijDaneWierzyciela(_a.WIENAZWA);
      .KOM_OS.okreslPriorytet(_a.P);
      .KOM_OS.wskazMiejsceOchron(_a.KOL);
      .KOM_OS.okreslCzyRazWMiesiacu(_a.RAZ);
      .KOM_OS.okreslCzyPrzelew(_a.PRZ);
      .KOM_OS.wcisnijOK();
      ~~
   "),

   obj_meth('usunPotracenie',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda dodająca potrącenie
::   WE: _a - obiekt z danymi potrącenia
::----------------------------------------------------------------------------------------------------------------------
   "  .test_driver.click('btn:USUŃ');
      .test_driver.click('dbtn:Tak');
      ~~
   "),

   obj_meth('usunSkladnikiZListy',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda dodająca potrącenie
::   WE: _a - obiekt z danymi potrącenia
::----------------------------------------------------------------------------------------------------------------------
   "  .wcisnijPrzycisk('USUNSKL');
      .test_driver.click('dbtn:Tak');
      ~~
   "),

   obj_meth('usunPracownikaZRozliczeniaListy',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda dodająca potrącenie
::   WE: _a - obiekt z danymi potrącenia
::----------------------------------------------------------------------------------------------------------------------
   "  .wcisnijPrzycisk('USUNZROZL');
      .test_driver.click('dbtn:Tak');
      ~~
   "),

   obj_meth('sprawdzNaliczeniePotracenia',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda sprawdzająca poprawność naliczonego potracenia Alimentacyjnego/Komorniczego
::   WE: _a - obiekt z danymi potrącenia
::----------------------------------------------------------------------------------------------------------------------
   "  .wybierzZakladke('Składniki listy');
      {? _b.OCZ_POTR<>''
      || .test_driver.filter('@LS.RB.RN', {? _a.RODZAJ='Alimenty'
                                          || '824'
                                          |? _a.RODZAJ='Komornik'
                                          || '825'
                                          ?}  );
         .test_driver.click('fld:@LS.KW(row=1)');
         .test_driver.assert('', 'fld:@LS.KW(row=1)', 'value', _b.OCZ_POTR);
         .test_driver.filter('@LS.RB.RN', '')
      ?};
      ~~
   "),

      obj_meth('sprawdzNaliczenieWyplaty',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda sprawdzająca wartość naliczonej kwoty do wypłaty na liście
::   WE: _a - obiekt z danymi potrącenia
::----------------------------------------------------------------------------------------------------------------------
   "  .wybierzZakladke('Składniki listy');
      {? _b.OCZ_WYPL<>''
      || .wybierzZakladke('Składniki listy');
         .test_driver.filter('@LS.RB.RN', '999');
         .test_driver.click('fld:@LS.KW(row=1)');
         .test_driver.assert('', 'fld:@LS.KW(row=1)', 'value', _b.OCZ_WYPL);
         .test_driver.filter('@LS.RB.RN', '')
      ?};
      ~~
   "),
   )


\decl_WIN_KOM_OS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Definicja klasy obiektu okna dodawania osoby
::   WE: _a - wskazanie na obiekt autotestów
::----------------------------------------------------------------------------------------------------------------------
:: Przy powtórnym wywołaniu deklaracji klasy  - zakończ.
{? var_pres('WIN_KOM_OS',@.CLASS)>0
|| return()
?};
obj_decl('WIN_KOM_OS',

:: Stałe  --------------------------------------------------------------------------------------------------------------
:: Wersja runtime-ów.
   obj_fld('runtime',user(11)),

:: Pola prywatne  ------------------------------------------------------------------------------------------------------
:: Tabela tymczasowa z konfiguracją elementów występujących w oknie
:: Tabela zawiera informacje o akronimie, nazwie i typie elementu oraz czy wchodzi do bufora
   obj_fld('TCID',~~),

:: Tablica z elementami nazwanymi - indeksami tabeli TCID.
   obj_fld('NCID',~~),

:: Tabela tymczasowa z "naszymi" danymi do testu pobranych z csv.
   obj_fld('TBUF',~~),

:: Pola zawierające formułe importu danych.
   obj_fld('fTAB',''),

:: Pole przechowujące wskazanie na obiekt testowy
   obj_fld('test_driver',~~),


:: Metody prywatne  ----------------------------------------------------------------------------------------------------

   obj_meth('addTCID',
::----------------------------------------------------------------------------------------------------------------------
::  UTW:
:: OPIS: Formuła dodaje jeden rekord do tabeli .TCID.
::   WE: _a [STRING] - Akronim pola.
::       _b [STRING] - Nazwa pola.
::       _c [STRING] - Typo pola.
::       _d [STRING] - Nazwa klucza.
::       _e [STRING] - Rodzaj elementu w oknie (pole edycyjne, checkbox, lista rozwijalna, button itp)
::       _f [STRING] - Czy wchodzi do bufora [T/N]
::       _g [STRING] - Akronim pola w mechanizmie autotestów
::   WY: Wynik operacji.
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID.blank();
      .TCID.LP:=.TCID.size()+1;
      .TCID.ACR:=_a;
      .TCID.TYPE:=_b;
      .TCID.NAME:=_c;
      .TCID.KEY:=_d;
      .TCID.ELMTYPE:=_e;
      .TCID.INBUF:=_f;
      .TCID.ACRFLD:=_g;
      .TCID.add()
   "),

   obj_meth('crtTCID',
::----------------------------------------------------------------------------------------------------------------------
::  UTW:
:: OPIS: Metoda tworzy strukturę i wypełnia danymi tabelę tymczasową .TCID.
::   WE:
::   WY: Wynik operacji.
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID:=tab_tmp(1,
         'LP','INTEGER','Lp.',
         'ACR','STRING[8]','Akronim pola',
         'TYPE','STRING[12]','Typ pola',
         'NAME','STRING[64]','Nazwa pola',
         'KEY','STRING[20]','Nazwa klucza',
         'ELMTYPE','STRING[20]','Typ elementu w oknie',
         'INBUF','STRING[1]','Czy wchodzi do bufora?',
         'ACRFLD','STRING[30]','Akronim w mechanizmie autotestów'
      );
      .NCID:=obj_new('LP','ACR','KEY');
      .NCID.LP:=.TCID.index('?');
      .NCID.ACR:=.TCID.ndx_tmp(,,'ACR',,);
      .NCID.KEY:=.TCID.ndx_tmp(,,'KEY',,);

::    Dane podstawowe
      .addTCID('RODZAJ','STRING[30]','Rodzaj','Type','Pole edycyjne','T','fld:@KOM_OS.KOM_RP.N') &
      .addTCID('AKTYWNE','STRING[1]','Aktywność','Active','Checkbox','T','fld:@KOM_OS.A') &
      .addTCID('OD','STRING[20]','Data od','DateFrom','Pole edycyjne','T','fld:@KOM_OS.OD') &
      .addTCID('DO','STRING[20]','Date do','DateTo','Pole edycyjne','T','fld:@KOM_OS.DO') &
      .addTCID('WARTOSC','STRING[20]','Wartość długu','Debt','Pole edycyjne','T','fld:@KOM_OS.WART') &
      .addTCID('RATA','STRING[20]','Rata','Instalment','Pole edycyjne','T','fld:@KOM_OS.RATA') &
      .addTCID('DPW','STRING[20]','Data przekazania','DeliveryDate','Pole edycyjne','T','fld:@KOM_OS.DPW') &
      .addTCID('SYG','STRING[40]','Sygnatura','Signature','Pole edycyjne','T','fld:@KOM_OS.SYG') &
      .addTCID('KOMNAZWA','STRING[30]','Komornik','Komornik','Pole edycyjne','T','fld:@KOM_OS.KOM.NAZWA') &
      .addTCID('WIENAZWA','STRING[30]','Wierzyciel','Wierzyciel','Pole edycyjne','T','fld:@KOM_OS.WIE.NAZWA') &
      .addTCID('P','STRING[5]','Priorytet','Prioritate','Pole edycyjne','T','fld:@KOM_OS.P') &
      .addTCID('KOL','STRING[20]','Miejsce ochrony','Protection','Pole wyboru','T','fld:@KOM_OS.KOL') &
      .addTCID('RAZ','STRING[1]','Raz w miesiacu','Once','Checkbox','T','fld:@KOM_OS.RAZ') &
      .addTCID('PRZ','STRING[20]','Przelew','Przelew','Pole wyboru','T','fld:@KOM_OS.PRZ') &

::    Dane dodatkowe
::      .addTCID() &
      .addTCID('OK','STRING{1]','Przycisk OK okienka','BTNOK','Button','N','btn:@OK')
   "),

   obj_meth('crtF',
::----------------------------------------------------------------------------------------------------------------------
::  UTW:
:: OPIS: Metoda tworzy tabelę tymczasową .BUF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID.cntx_psh();
      .TCID.index(.NCID.LP);
      .TCID.prefix();
      {? .TCID.first()
      || .fTAB:='tab_tmp(1';
         {!
         |? {? .TCID.INBUF='T'
            || .fTAB+=',\\''+.TCID.ACR+'\\',\\''+.TCID.TYPE+'\\',\\''+.TCID.NAME+'\\''
            ?};
            .TCID.next()
         !};
         .fTAB+=')'
      ?};
      .TCID.cntx_pop();
      .fTAB<>''
   "),

   obj_meth('fillFLD',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: Metoda do uzupełniania pól
::   WE: _a - wartość do wpisania
::       _b - element którego dotyczy
::----------------------------------------------------------------------------------------------------------------------
   "  .TCID.cntx_psh();
      .TCID.index(.NCID.ACR);
      .TCID.prefix(_b);
      .TCID.first();
      .test_driver.click(.TCID.ACRFLD);
      {? .TCID.ELMTYPE='Pole edycyjne'
      || .test_driver.send(_a,'',.TCID.ACRFLD)
      |? .TCID.ELMTYPE='Checkbox'
      || {? _a='T'
         || .test_driver.send('checked', '', .TCID.ACRFLD)
         || .test_driver.send('unchecked', '', .TCID.ACRFLD)
         ?}
      ?};
      .TCID.cntx_pop();
      ~~
   "),

:: Metody publiczne  ---------------------------------------------------------------------------------------------------
   obj_meth('__init',
::----------------------------------------------------------------------------------------------------------------------
::  UTW:
:: OPIS: Metoda inicjująca obiekt. Tworzy struktury złożone.
::----------------------------------------------------------------------------------------------------------------------
   "  .crtTCID();
      .crtF();
      .TBUF:=($.fTAB)();
      .test_driver:=_b;
      ~~
   "),

   obj_meth('loadTestDriver',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO
:: OPIS: wczytuje do bufora wartości przekazane w odpowiadającej strukturze
::   WE: _a - wskazanie na obiekt autotestów
::----------------------------------------------------------------------------------------------------------------------
   ".test_driver:=_a;
   ~~ "),

   obj_meth('uzupelnijRodzaj',".fillFLD(_a,'RODZAJ'); ~~"),
   obj_meth('zaznaczAktywnosc',".fillFLD(_a,'AKTYWNE'); ~~"),
   obj_meth('uzupelnijDateOd',".fillFLD(_a,'OD'); ~~"),
   obj_meth('uzupelnijDateDo',".fillFLD(_a,'DO'); ~~"),
   obj_meth('uzupelnijWartoscDlugu',".fillFLD(_a,'WARTOSC'); ~~"),
   obj_meth('uzupelnijKwoteRaty',".fillFLD(_a,'RATA'); ~~"),
   obj_meth('uzupelnijDatePrzekazania',".fillFLD(_a,'DPW'); ~~"),
   obj_meth('uzupelnijSygnature',".fillFLD(_a,'SYG'); ~~"),
   obj_meth('uzupelnijDaneKomornika',".fillFLD(_a,'KOMNAZWA'); ~~"),
   obj_meth('uzupelnijDaneWierzyciela',".fillFLD(_a,'WIENAZWA'); ~~"),
   obj_meth('okreslPriorytet',".fillFLD(_a,'P'); ~~"),
   obj_meth('wskazMiejsceOchron'," {? _a='Listy'
                                   || .test_driver.click('fld:@KOM_OS.KOL(ndx=1)')
                                   || .test_driver.click('fld:@KOM_OS.KOL(ndx=2)')
                                   ?};~~"),
   obj_meth('okreslCzyRazWMiesiacu',".fillFLD(_a,'RAZ'); ~~"),
   obj_meth('okreslCzyPrzelew'," {? _a='Nie dotyczy'
                                 || .test_driver.click('fld:@KOM_OS.PRZ(ndx=1)')
                                 |? _a='Komornik'
                                 || .test_driver.click('fld:@KOM_OS.KOL(ndx=2)')
                                 || .test_driver.click('fld:@KOM_OS.KOL(ndx=3)')
                                 ?};~~"),
   obj_meth('wcisnijOK',".test_driver.send('', '{F2}', '');~~"),
   obj_meth('wcisnijAnuluj',".test_driver.send('', '{ESC}', '');~~")
   )

:Sign Version 2.0 jowisz:1048 2023/06/23 14:12:17 769e5c11f5dcdb6ec901d350b9bd9957720c9bb829d7f12eb86ed832bf2a2ec0b9b65f51e9d0e10d4add3495c95427ca18748fc39900e55eb7cc21d9e0282b111c2713c4b877eff01a246a1df169b5ff74841256ac5aa61a6826b1a786bc09793dc9a8a9e24e4d7164e4f94603618889a76542660622f66751cff64c1394b80a
